
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b7a0  0800b7a0  0000c7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc18  0800bc18  0000cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc20  0800bc20  0000cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800bc28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001d8  0800be00  0000d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000238  0800be60  0000d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  24000298  0800bec0  0000d298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005fc  0800bec0  0000d5fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019097  00000000  00000000  0000d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028da  00000000  00000000  0002635d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00028c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d64  00000000  00000000  00029d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000357a0  00000000  00000000  0002aafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d6d  00000000  00000000  0006029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015dfcd  00000000  00000000  00076009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d3fd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005914  00000000  00000000  001d401c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001d9930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000298 	.word	0x24000298
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b788 	.word	0x0800b788

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400029c 	.word	0x2400029c
 800030c:	0800b788 	.word	0x0800b788

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_write>:

void ReadTwoChannels(void);


int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <_write+0x28>)
 80006c8:	f007 f9de 	bl	8007a88 <HAL_UART_Transmit>
  return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2400040c 	.word	0x2400040c

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fe98 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f89a 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fa32 	bl	8000b50 <MX_GPIO_Init>
  MX_ETH_Init();
 80006ec:	f000 f990 	bl	8000a10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 f9da 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006f4:	f000 fa24 	bl	8000b40 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006f8:	f000 f900 	bl	80008fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Sistem pornit. ADC1 cu 2 canale (Ch10, Ch15) - LM35.\r\n");
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <main+0x38>)
 80006fe:	f009 f941 	bl	8009984 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 ReadTwoChannels();
 8000702:	f000 f809 	bl	8000718 <ReadTwoChannels>
	  // Pause 1 second
	     HAL_Delay(1000);
 8000706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070a:	f000 ff15 	bl	8001538 <HAL_Delay>
	  	 ReadTwoChannels();
 800070e:	bf00      	nop
 8000710:	e7f7      	b.n	8000702 <main+0x26>
 8000712:	bf00      	nop
 8000714:	0800b7a0 	.word	0x0800b7a0

08000718 <ReadTwoChannels>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void ReadTwoChannels(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af04      	add	r7, sp, #16
    // 1. Pornim conversia ADC
    if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800071e:	4837      	ldr	r0, [pc, #220]	@ (80007fc <ReadTwoChannels+0xe4>)
 8000720:	f001 fc36 	bl	8001f90 <HAL_ADC_Start>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <ReadTwoChannels+0x1a>
    {
        printf("Eroare la HAL_ADC_Start\r\n");
 800072a:	4835      	ldr	r0, [pc, #212]	@ (8000800 <ReadTwoChannels+0xe8>)
 800072c:	f009 f92a 	bl	8009984 <puts>
        return;
 8000730:	e060      	b.n	80007f4 <ReadTwoChannels+0xdc>
    }

    // 2. Așteptare și citire canalul de Rank 1 (Channel 10)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000732:	210a      	movs	r1, #10
 8000734:	4831      	ldr	r0, [pc, #196]	@ (80007fc <ReadTwoChannels+0xe4>)
 8000736:	f001 fd29 	bl	800218c <HAL_ADC_PollForConversion>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d156      	bne.n	80007ee <ReadTwoChannels+0xd6>
    {
        uint32_t rawValCh10 = HAL_ADC_GetValue(&hadc1);
 8000740:	482e      	ldr	r0, [pc, #184]	@ (80007fc <ReadTwoChannels+0xe4>)
 8000742:	f001 fe17 	bl	8002374 <HAL_ADC_GetValue>
 8000746:	6178      	str	r0, [r7, #20]
        // Convertim la tensiune (12 biți la 3.3 V)
        float voltageCh10 = ((float)rawValCh10 / 4095.0f) * 3.3f;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	ee07 3a90 	vmov	s15, r3
 800074e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000752:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000804 <ReadTwoChannels+0xec>
 8000756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800075a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000808 <ReadTwoChannels+0xf0>
 800075e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000762:	edc7 7a04 	vstr	s15, [r7, #16]
        // LM35 => 10mV / °C => 0.01 V / °C
        float tempC_Ch10 = voltageCh10 / 0.01f;
 8000766:	ed97 7a04 	vldr	s14, [r7, #16]
 800076a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800080c <ReadTwoChannels+0xf4>
 800076e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000772:	edc7 7a03 	vstr	s15, [r7, #12]

        // 3. Așteptare și citire canalul de Rank 2 (Channel 15)
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000776:	210a      	movs	r1, #10
 8000778:	4820      	ldr	r0, [pc, #128]	@ (80007fc <ReadTwoChannels+0xe4>)
 800077a:	f001 fd07 	bl	800218c <HAL_ADC_PollForConversion>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d130      	bne.n	80007e6 <ReadTwoChannels+0xce>
        {
            uint32_t rawValCh15 = HAL_ADC_GetValue(&hadc1);
 8000784:	481d      	ldr	r0, [pc, #116]	@ (80007fc <ReadTwoChannels+0xe4>)
 8000786:	f001 fdf5 	bl	8002374 <HAL_ADC_GetValue>
 800078a:	60b8      	str	r0, [r7, #8]
            float voltageCh15 = ((float)rawValCh15 / 4095.0f) * 3.3f;
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000796:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000804 <ReadTwoChannels+0xec>
 800079a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000808 <ReadTwoChannels+0xf0>
 80007a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a6:	edc7 7a01 	vstr	s15, [r7, #4]
            float tempC_Ch15 = voltageCh15 / 0.01f;
 80007aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80007ae:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800080c <ReadTwoChannels+0xf4>
 80007b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b6:	edc7 7a00 	vstr	s15, [r7]

            // Oprim ADC (opțional, dacă nu e modul continuu)
            HAL_ADC_Stop(&hadc1);
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <ReadTwoChannels+0xe4>)
 80007bc:	f001 fcb2 	bl	8002124 <HAL_ADC_Stop>

            // 4. Afișare valori
            printf("Ch10: raw=%lu, T=%.2f C | Ch15: raw=%lu, T=%.2f C\r\n",
 80007c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007c8:	edd7 7a00 	vldr	s15, [r7]
 80007cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	ec53 2b16 	vmov	r2, r3, d6
 80007dc:	6979      	ldr	r1, [r7, #20]
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <ReadTwoChannels+0xf8>)
 80007e0:	f009 f868 	bl	80098b4 <iprintf>
 80007e4:	e006      	b.n	80007f4 <ReadTwoChannels+0xdc>
                   rawValCh15, tempC_Ch15);
        }
        else
        {
            // Eroare la al doilea Poll
            printf("Eroare la PollForConversion ch15\r\n");
 80007e6:	480b      	ldr	r0, [pc, #44]	@ (8000814 <ReadTwoChannels+0xfc>)
 80007e8:	f009 f8cc 	bl	8009984 <puts>
 80007ec:	e002      	b.n	80007f4 <ReadTwoChannels+0xdc>
        }
    }
    else
    {
        // Eroare la primul Poll
        printf("Eroare la PollForConversion ch10\r\n");
 80007ee:	480a      	ldr	r0, [pc, #40]	@ (8000818 <ReadTwoChannels+0x100>)
 80007f0:	f009 f8c8 	bl	8009984 <puts>
    }
}
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	240002ec 	.word	0x240002ec
 8000800:	0800b7d8 	.word	0x0800b7d8
 8000804:	457ff000 	.word	0x457ff000
 8000808:	40533333 	.word	0x40533333
 800080c:	3c23d70a 	.word	0x3c23d70a
 8000810:	0800b7f4 	.word	0x0800b7f4
 8000814:	0800b828 	.word	0x0800b828
 8000818:	0800b84c 	.word	0x0800b84c

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	@ 0x70
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	224c      	movs	r2, #76	@ 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f009 f98a 	bl	8009b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f009 f984 	bl	8009b44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800083c:	2002      	movs	r0, #2
 800083e:	f003 fd4d 	bl	80042dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a2b      	ldr	r2, [pc, #172]	@ (80008f8 <SystemClock_Config+0xdc>)
 800084c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800085e:	bf00      	nop
 8000860:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086c:	d1f8      	bne.n	8000860 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800086e:	2321      	movs	r3, #33	@ 0x21
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000872:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000880:	2302      	movs	r3, #2
 8000882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000888:	f240 1313 	movw	r3, #275	@ 0x113
 800088c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000892:	2304      	movs	r3, #4
 8000894:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800089a:	2304      	movs	r3, #4
 800089c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089e:	2300      	movs	r3, #0
 80008a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fd50 	bl	8004350 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b6:	f000 fa47 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	233f      	movs	r3, #63	@ 0x3f
 80008bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008c6:	2308      	movs	r3, #8
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2103      	movs	r1, #3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f90f 	bl	8004b04 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008ec:	f000 fa2c 	bl	8000d48 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3770      	adds	r7, #112	@ 0x70
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	58024800 	.word	0x58024800

080008fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2224      	movs	r2, #36	@ 0x24
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f009 f915 	bl	8009b44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800091a:	4b39      	ldr	r3, [pc, #228]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800091c:	4a39      	ldr	r2, [pc, #228]	@ (8000a04 <MX_ADC1_Init+0x108>)
 800091e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000920:	4b37      	ldr	r3, [pc, #220]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000926:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000928:	2208      	movs	r2, #8
 800092a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800092c:	4b34      	ldr	r3, [pc, #208]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000934:	2204      	movs	r2, #4
 8000936:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000944:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000946:	2202      	movs	r2, #2
 8000948:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000966:	2200      	movs	r2, #0
 8000968:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800096c:	2200      	movs	r2, #0
 800096e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000970:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800097a:	2201      	movs	r2, #1
 800097c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097e:	4820      	ldr	r0, [pc, #128]	@ (8000a00 <MX_ADC1_Init+0x104>)
 8000980:	f001 f8fe 	bl	8001b80 <HAL_ADC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800098a:	f000 f9dd 	bl	8000d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4819      	ldr	r0, [pc, #100]	@ (8000a00 <MX_ADC1_Init+0x104>)
 800099a:	f002 fce3 	bl	8003364 <HAL_ADCEx_MultiModeConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009a4:	f000 f9d0 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_ADC1_Init+0x10c>)
 80009aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ac:	2306      	movs	r3, #6
 80009ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80009b0:	2305      	movs	r3, #5
 80009b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ba:	2304      	movs	r3, #4
 80009bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <MX_ADC1_Init+0x104>)
 80009ce:	f001 fcdf 	bl	8002390 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80009d8:	f000 f9b6 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_ADC1_Init+0x110>)
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e0:	230c      	movs	r3, #12
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_ADC1_Init+0x104>)
 80009ea:	f001 fcd1 	bl	8002390 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80009f4:	f000 f9a8 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	@ 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	240002ec 	.word	0x240002ec
 8000a04:	40022000 	.word	0x40022000
 8000a08:	2a000400 	.word	0x2a000400
 8000a0c:	3ef08000 	.word	0x3ef08000

08000a10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a16:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <MX_ETH_Init+0x84>)
 8000a18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a28:	22e1      	movs	r2, #225	@ 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a40:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <MX_ETH_Init+0x88>)
 8000a42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a4c:	4a13      	ldr	r2, [pc, #76]	@ (8000a9c <MX_ETH_Init+0x8c>)
 8000a4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <MX_ETH_Init+0x90>)
 8000a54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a58:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_ETH_Init+0x80>)
 8000a60:	f002 fe46 	bl	80036f0 <HAL_ETH_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a6a:	f000 f96d 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a6e:	2238      	movs	r2, #56	@ 0x38
 8000a70:	2100      	movs	r1, #0
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ETH_Init+0x94>)
 8000a74:	f009 f866 	bl	8009b44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_ETH_Init+0x94>)
 8000a7a:	2221      	movs	r2, #33	@ 0x21
 8000a7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_ETH_Init+0x94>)
 8000a80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_ETH_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400035c 	.word	0x2400035c
 8000a94:	40028000 	.word	0x40028000
 8000a98:	240004a0 	.word	0x240004a0
 8000a9c:	24000238 	.word	0x24000238
 8000aa0:	240001d8 	.word	0x240001d8
 8000aa4:	240002b4 	.word	0x240002b4

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <MX_USART3_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000af2:	f006 ff79 	bl	80079e8 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f924 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 f913 	bl	8008d2e <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f91b 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b16:	f008 f948 	bl	8008daa <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f912 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b26:	f008 f8c9 	bl	8008cbc <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f90a 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2400040c 	.word	0x2400040c
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b71      	ldr	r3, [pc, #452]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a6f      	ldr	r2, [pc, #444]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b6d      	ldr	r3, [pc, #436]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b84:	4b69      	ldr	r3, [pc, #420]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	4a68      	ldr	r2, [pc, #416]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b94:	4b65      	ldr	r3, [pc, #404]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b62      	ldr	r3, [pc, #392]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	4a60      	ldr	r2, [pc, #384]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	4a59      	ldr	r2, [pc, #356]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd0:	4b56      	ldr	r3, [pc, #344]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b53      	ldr	r3, [pc, #332]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	4a51      	ldr	r2, [pc, #324]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bee:	4b4f      	ldr	r3, [pc, #316]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a4a      	ldr	r2, [pc, #296]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0c:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1a:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	4a42      	ldr	r2, [pc, #264]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2a:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <MX_GPIO_Init+0x1dc>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c3e:	483c      	ldr	r0, [pc, #240]	@ (8000d30 <MX_GPIO_Init+0x1e0>)
 8000c40:	f003 fb32 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4a:	483a      	ldr	r0, [pc, #232]	@ (8000d34 <MX_GPIO_Init+0x1e4>)
 8000c4c:	f003 fb2c 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2102      	movs	r1, #2
 8000c54:	4838      	ldr	r0, [pc, #224]	@ (8000d38 <MX_GPIO_Init+0x1e8>)
 8000c56:	f003 fb27 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4833      	ldr	r0, [pc, #204]	@ (8000d3c <MX_GPIO_Init+0x1ec>)
 8000c70:	f003 f972 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c74:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4828      	ldr	r0, [pc, #160]	@ (8000d30 <MX_GPIO_Init+0x1e0>)
 8000c8e:	f003 f963 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4822      	ldr	r0, [pc, #136]	@ (8000d34 <MX_GPIO_Init+0x1e4>)
 8000cac:	f003 f954 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481e      	ldr	r0, [pc, #120]	@ (8000d40 <MX_GPIO_Init+0x1f0>)
 8000cc6:	f003 f947 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <MX_GPIO_Init+0x1f4>)
 8000ce0:	f003 f93a 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <MX_GPIO_Init+0x1f4>)
 8000d02:	f003 f929 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <MX_GPIO_Init+0x1e8>)
 8000d1e:	f003 f91b 	bl	8003f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58020c00 	.word	0x58020c00
 8000d38:	58021000 	.word	0x58021000
 8000d3c:	58020800 	.word	0x58020800
 8000d40:	58021800 	.word	0x58021800
 8000d44:	58020000 	.word	0x58020000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	22b8      	movs	r2, #184	@ 0xb8
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f008 fecb 	bl	8009b44 <memset>
  if(hadc->Instance==ADC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e9c <HAL_ADC_MspInit+0x114>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d16d      	bne.n	8000e94 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000dc8:	2318      	movs	r3, #24
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dd8:	23c0      	movs	r3, #192	@ 0xc0
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fa14 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000dfa:	f7ff ffa5 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e40:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_ADC_MspInit+0x118>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <HAL_ADC_MspInit+0x11c>)
 8000e72:	f003 f871 	bl	8003f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e76:	2308      	movs	r3, #8
 8000e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <HAL_ADC_MspInit+0x120>)
 8000e90:	f003 f862 	bl	8003f58 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e94:	bf00      	nop
 8000e96:	37e8      	adds	r7, #232	@ 0xe8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000

08000eac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	@ 0x38
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a59      	ldr	r2, [pc, #356]	@ (8001030 <HAL_ETH_MspInit+0x184>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	f040 80ab 	bne.w	8001026 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ed0:	4b58      	ldr	r3, [pc, #352]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed6:	4a57      	ldr	r2, [pc, #348]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000edc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ee0:	4b54      	ldr	r3, [pc, #336]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eee:	4b51      	ldr	r3, [pc, #324]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000efe:	4b4d      	ldr	r3, [pc, #308]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f0c:	4b49      	ldr	r3, [pc, #292]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f12:	4a48      	ldr	r2, [pc, #288]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f1c:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b42      	ldr	r3, [pc, #264]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a40      	ldr	r2, [pc, #256]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	4a39      	ldr	r2, [pc, #228]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b33      	ldr	r3, [pc, #204]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	4a31      	ldr	r2, [pc, #196]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f76:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <HAL_ETH_MspInit+0x188>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fa2:	2332      	movs	r3, #50	@ 0x32
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481e      	ldr	r0, [pc, #120]	@ (8001038 <HAL_ETH_MspInit+0x18c>)
 8000fbe:	f002 ffcb 	bl	8003f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fc2:	2386      	movs	r3, #134	@ 0x86
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4817      	ldr	r0, [pc, #92]	@ (800103c <HAL_ETH_MspInit+0x190>)
 8000fde:	f002 ffbb 	bl	8003f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4810      	ldr	r0, [pc, #64]	@ (8001040 <HAL_ETH_MspInit+0x194>)
 8001000:	f002 ffaa 	bl	8003f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001004:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001016:	230b      	movs	r3, #11
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4808      	ldr	r0, [pc, #32]	@ (8001044 <HAL_ETH_MspInit+0x198>)
 8001022:	f002 ff99 	bl	8003f58 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40028000 	.word	0x40028000
 8001034:	58024400 	.word	0x58024400
 8001038:	58020800 	.word	0x58020800
 800103c:	58020000 	.word	0x58020000
 8001040:	58020400 	.word	0x58020400
 8001044:	58021800 	.word	0x58021800

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b8      	sub	sp, #224	@ 0xe0
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	22b8      	movs	r2, #184	@ 0xb8
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f008 fd6b 	bl	8009b44 <memset>
  if(huart->Instance==USART3)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <HAL_UART_MspInit+0xc8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d146      	bne.n	8001106 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001078:	f04f 0202 	mov.w	r2, #2
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4618      	mov	r0, r3
 8001090:	f004 f8c4 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800109a:	f7ff fe55 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_UART_MspInit+0xcc>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80010da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f4:	2307      	movs	r3, #7
 80010f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <HAL_UART_MspInit+0xd0>)
 8001102:	f002 ff29 	bl	8003f58 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001106:	bf00      	nop
 8001108:	37e0      	adds	r7, #224	@ 0xe0
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40004800 	.word	0x40004800
 8001114:	58024400 	.word	0x58024400
 8001118:	58020c00 	.word	0x58020c00

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f9c1 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_kill>:

int _kill(int pid, int sig)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001194:	f008 fd28 	bl	8009be8 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	2216      	movs	r2, #22
 800119c:	601a      	str	r2, [r3, #0]
  return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_exit>:

void _exit (int status)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b2:	f04f 31ff 	mov.w	r1, #4294967295
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffe7 	bl	800118a <_kill>
  while (1) {}    /* Make sure we hang here */
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <_exit+0x12>

080011c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e00a      	b.n	80011e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d2:	f3af 8000 	nop.w
 80011d6:	4601      	mov	r1, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	b2ca      	uxtb	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf0      	blt.n	80011d2 <_read+0x12>
  }

  return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001222:	605a      	str	r2, [r3, #4]
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_isatty>:

int _isatty(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f008 fca8 	bl	8009be8 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24050000 	.word	0x24050000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	240004a8 	.word	0x240004a8
 80012cc:	24000600 	.word	0x24000600

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <SystemInit+0xd0>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a31      	ldr	r2, [pc, #196]	@ (80013a0 <SystemInit+0xd0>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <SystemInit+0xd4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d807      	bhi.n	8001300 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <SystemInit+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 030f 	bic.w	r3, r3, #15
 80012f8:	4a2a      	ldr	r2, [pc, #168]	@ (80013a4 <SystemInit+0xd4>)
 80012fa:	f043 0307 	orr.w	r3, r3, #7
 80012fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <SystemInit+0xd8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a28      	ldr	r2, [pc, #160]	@ (80013a8 <SystemInit+0xd8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <SystemInit+0xd8>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <SystemInit+0xd8>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4924      	ldr	r1, [pc, #144]	@ (80013a8 <SystemInit+0xd8>)
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <SystemInit+0xdc>)
 800131a:	4013      	ands	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <SystemInit+0xd4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <SystemInit+0xd4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 030f 	bic.w	r3, r3, #15
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <SystemInit+0xd4>)
 8001334:	f043 0307 	orr.w	r3, r3, #7
 8001338:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <SystemInit+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <SystemInit+0xd8>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <SystemInit+0xd8>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <SystemInit+0xd8>)
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <SystemInit+0xe0>)
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <SystemInit+0xd8>)
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <SystemInit+0xe4>)
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <SystemInit+0xd8>)
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <SystemInit+0xe8>)
 800135c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <SystemInit+0xd8>)
 8001360:	2200      	movs	r2, #0
 8001362:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <SystemInit+0xd8>)
 8001366:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <SystemInit+0xe8>)
 8001368:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <SystemInit+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <SystemInit+0xd8>)
 8001372:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <SystemInit+0xe8>)
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <SystemInit+0xd8>)
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <SystemInit+0xd8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <SystemInit+0xd8>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <SystemInit+0xd8>)
 800138a:	2200      	movs	r2, #0
 800138c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <SystemInit+0xec>)
 8001390:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001394:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	52002000 	.word	0x52002000
 80013a8:	58024400 	.word	0x58024400
 80013ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b0:	02020200 	.word	0x02020200
 80013b4:	01ff0000 	.word	0x01ff0000
 80013b8:	01010280 	.word	0x01010280
 80013bc:	52004000 	.word	0x52004000

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c4:	f7ff ff84 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f008 fc01 	bl	8009bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff f973 	bl	80006dc <main>
  bx  lr
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001400:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001404:	0800bc28 	.word	0x0800bc28
  ldr r2, =_sbss
 8001408:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 800140c:	240005fc 	.word	0x240005fc

08001410 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC3_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141a:	2003      	movs	r0, #3
 800141c:	f002 f936 	bl	800368c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001420:	f003 fd26 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_Init+0x68>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	4913      	ldr	r1, [pc, #76]	@ (8001480 <HAL_Init+0x6c>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_Init+0x68>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_Init+0x6c>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_Init+0x70>)
 8001456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001458:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <HAL_Init+0x74>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145e:	2000      	movs	r0, #0
 8001460:	f000 f814 	bl	800148c <HAL_InitTick>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e002      	b.n	8001474 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800146e:	f7ff fc71 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58024400 	.word	0x58024400
 8001480:	0800b870 	.word	0x0800b870
 8001484:	24000004 	.word	0x24000004
 8001488:	24000000 	.word	0x24000000

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_InitTick+0x60>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e021      	b.n	80014e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <HAL_InitTick+0x64>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_InitTick+0x60>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 f90d 	bl	80036d6 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f002 f8e5 	bl	80036a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <HAL_InitTick+0x68>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2400000c 	.word	0x2400000c
 80014f0:	24000000 	.word	0x24000000
 80014f4:	24000008 	.word	0x24000008

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2400000c 	.word	0x2400000c
 800151c:	240004ac 	.word	0x240004ac

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	240004ac 	.word	0x240004ac

08001538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff ffee 	bl	8001520 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d005      	beq.n	800155e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_Delay+0x44>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155e:	bf00      	nop
 8001560:	f7ff ffde 	bl	8001520 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f7      	bhi.n	8001560 <HAL_Delay+0x28>
  {
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2400000c 	.word	0x2400000c

08001580 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001590:	4904      	ldr	r1, [pc, #16]	@ (80015a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	58000400 	.word	0x58000400

080015a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3360      	adds	r3, #96	@ 0x60
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <LL_ADC_SetOffset+0x60>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d10b      	bne.n	800164c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800164a:	e00b      	b.n	8001664 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	430b      	orrs	r3, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58026000 	.word	0x58026000

08001674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3360      	adds	r3, #96	@ 0x60
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	611a      	str	r2, [r3, #16]
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00e      	beq.n	8001706 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3360      	adds	r3, #96	@ 0x60
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]
  }
}
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	58026000 	.word	0x58026000

08001718 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <LL_ADC_SetOffsetSaturation+0x40>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d10e      	bne.n	800174a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3360      	adds	r3, #96	@ 0x60
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	58026000 	.word	0x58026000

0800175c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4a0c      	ldr	r2, [pc, #48]	@ (800179c <LL_ADC_SetOffsetSign+0x40>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10e      	bne.n	800178e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3360      	adds	r3, #96	@ 0x60
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	58026000 	.word	0x58026000

080017a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3360      	adds	r3, #96	@ 0x60
 80017b0:	461a      	mov	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <LL_ADC_SetOffsetState+0x50>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d108      	bne.n	80017d4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80017d2:	e007      	b.n	80017e4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	431a      	orrs	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	58026000 	.word	0x58026000

080017f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3330      	adds	r3, #48	@ 0x30
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	4413      	add	r3, r2
 8001838:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	211f      	movs	r1, #31
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0e9b      	lsrs	r3, r3, #26
 8001852:	f003 011f 	and.w	r1, r3, #31
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3314      	adds	r3, #20
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0e5b      	lsrs	r3, r3, #25
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	0d1b      	lsrs	r3, r3, #20
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2107      	movs	r1, #7
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0d1b      	lsrs	r3, r3, #20
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001940 <LL_ADC_SetChannelSingleDiff+0x78>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d115      	bne.n	8001908 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0318 	and.w	r3, r3, #24
 80018f2:	4914      	ldr	r1, [pc, #80]	@ (8001944 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	400b      	ands	r3, r1
 80018fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001906:	e014      	b.n	8001932 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0318 	and.w	r3, r3, #24
 800191e:	4909      	ldr	r1, [pc, #36]	@ (8001944 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001920:	40d9      	lsrs	r1, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	400b      	ands	r3, r1
 8001926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800192a:	431a      	orrs	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	58026000 	.word	0x58026000
 8001944:	000fffff 	.word	0x000fffff

08001948 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 031f 	and.w	r3, r3, #31
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6093      	str	r3, [r2, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	5fffffc0 	.word	0x5fffffc0

080019a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80019da:	4013      	ands	r3, r2
 80019dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	6fffffc0 	.word	0x6fffffc0

080019f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <LL_ADC_Enable+0x24>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	7fffffc0 	.word	0x7fffffc0

08001a44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <LL_ADC_Disable+0x24>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	f043 0202 	orr.w	r2, r3, #2
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	7fffffc0 	.word	0x7fffffc0

08001a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_IsEnabled+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_IsEnabled+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_IsDisableOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_IsDisableOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <LL_ADC_REG_StartConversion+0x24>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	7fffffc0 	.word	0x7fffffc0

08001ae0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <LL_ADC_REG_StopConversion+0x24>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	7fffffc0 	.word	0x7fffffc0

08001b08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d101      	bne.n	8001b20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <LL_ADC_INJ_StopConversion+0x24>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	7fffffc0 	.word	0x7fffffc0

08001b58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e1ee      	b.n	8001f78 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff f8ed 	bl	8000d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff feef 	bl	80019a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fed5 	bl	8001980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff0a 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff feee 	bl	80019cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8001e2c <HAL_ADC_Init+0x2ac>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4a8e      	ldr	r2, [pc, #568]	@ (8001e30 <HAL_ADC_Init+0x2b0>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c02:	e002      	b.n	8001c0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f9      	bne.n	8001c04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff feed 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff61 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001c46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 8188 	bne.w	8001f66 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 8184 	bne.w	8001f66 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fefa 	bl	8001a6c <LL_ADC_IsEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d136      	bne.n	8001cec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6c      	ldr	r2, [pc, #432]	@ (8001e34 <HAL_ADC_Init+0x2b4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d004      	beq.n	8001c92 <HAL_ADC_Init+0x112>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e38 <HAL_ADC_Init+0x2b8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10e      	bne.n	8001cb0 <HAL_ADC_Init+0x130>
 8001c92:	4868      	ldr	r0, [pc, #416]	@ (8001e34 <HAL_ADC_Init+0x2b4>)
 8001c94:	f7ff feea 	bl	8001a6c <LL_ADC_IsEnabled>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	4867      	ldr	r0, [pc, #412]	@ (8001e38 <HAL_ADC_Init+0x2b8>)
 8001c9c:	f7ff fee6 	bl	8001a6c <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e008      	b.n	8001cc2 <HAL_ADC_Init+0x142>
 8001cb0:	4862      	ldr	r0, [pc, #392]	@ (8001e3c <HAL_ADC_Init+0x2bc>)
 8001cb2:	f7ff fedb 	bl	8001a6c <LL_ADC_IsEnabled>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5a      	ldr	r2, [pc, #360]	@ (8001e34 <HAL_ADC_Init+0x2b4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Init+0x15a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	@ (8001e38 <HAL_ADC_Init+0x2b8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x15e>
 8001cda:	4a59      	ldr	r2, [pc, #356]	@ (8001e40 <HAL_ADC_Init+0x2c0>)
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADC_Init+0x160>
 8001cde:	4a59      	ldr	r2, [pc, #356]	@ (8001e44 <HAL_ADC_Init+0x2c4>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7ff fc5e 	bl	80015a8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	@ (8001e3c <HAL_ADC_Init+0x2bc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d129      	bne.n	8001d4a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d00:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001d06:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d013      	beq.n	8001d38 <HAL_ADC_Init+0x1b8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d00d      	beq.n	8001d34 <HAL_ADC_Init+0x1b4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b1c      	cmp	r3, #28
 8001d1e:	d007      	beq.n	8001d30 <HAL_ADC_Init+0x1b0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b18      	cmp	r3, #24
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Init+0x1ac>
 8001d28:	2318      	movs	r3, #24
 8001d2a:	e006      	b.n	8001d3a <HAL_ADC_Init+0x1ba>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_Init+0x1ba>
 8001d30:	2310      	movs	r3, #16
 8001d32:	e002      	b.n	8001d3a <HAL_ADC_Init+0x1ba>
 8001d34:	2308      	movs	r3, #8
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_Init+0x1ba>
 8001d38:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001d3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e00e      	b.n	8001d68 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7e5b      	ldrb	r3, [r3, #25]
 8001d4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d54:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d5a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	3b01      	subs	r3, #1
 8001d78:	045b      	lsls	r3, r3, #17
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a26      	ldr	r2, [pc, #152]	@ (8001e3c <HAL_ADC_Init+0x2bc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d115      	bne.n	8001dd2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <HAL_ADC_Init+0x2c8>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	e009      	b.n	8001de6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_ADC_Init+0x2cc>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe8c 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001df0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff feae 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8001dfc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 808e 	bne.w	8001f22 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 808a 	bne.w	8001f22 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_ADC_Init+0x2bc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d11b      	bne.n	8001e50 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e24:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	e018      	b.n	8001e5e <HAL_ADC_Init+0x2de>
 8001e2c:	24000000 	.word	0x24000000
 8001e30:	053e2d63 	.word	0x053e2d63
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40022100 	.word	0x40022100
 8001e3c:	58026000 	.word	0x58026000
 8001e40:	40022300 	.word	0x40022300
 8001e44:	58026300 	.word	0x58026300
 8001e48:	fff04007 	.word	0xfff04007
 8001e4c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7e1b      	ldrb	r3, [r3, #24]
 8001e54:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4b46      	ldr	r3, [pc, #280]	@ (8001f80 <HAL_ADC_Init+0x400>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d137      	bne.n	8001eec <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <HAL_ADC_Init+0x404>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d116      	bne.n	8001eba <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	4b3d      	ldr	r3, [pc, #244]	@ (8001f88 <HAL_ADC_Init+0x408>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ea4:	4311      	orrs	r1, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	e020      	b.n	8001efc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <HAL_ADC_Init+0x40c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ec8:	3a01      	subs	r2, #1
 8001eca:	0411      	lsls	r1, r2, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001edc:	430a      	orrs	r2, r1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e007      	b.n	8001efc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_ADC_Init+0x404>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d002      	beq.n	8001f22 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f001 f90d 	bl	800313c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10c      	bne.n	8001f44 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	f023 010f 	bic.w	r1, r3, #15
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f42:	e007      	b.n	8001f54 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020f 	bic.w	r2, r2, #15
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	661a      	str	r2, [r3, #96]	@ 0x60
 8001f64:	e007      	b.n	8001f76 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3724      	adds	r7, #36	@ 0x24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	ffffbffc 	.word	0xffffbffc
 8001f84:	58026000 	.word	0x58026000
 8001f88:	fc00f81f 	.word	0xfc00f81f
 8001f8c:	fc00f81e 	.word	0xfc00f81e

08001f90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002110 <HAL_ADC_Start+0x180>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_ADC_Start+0x1c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002114 <HAL_ADC_Start+0x184>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_Start+0x20>
 8001fac:	4b5a      	ldr	r3, [pc, #360]	@ (8002118 <HAL_ADC_Start+0x188>)
 8001fae:	e000      	b.n	8001fb2 <HAL_ADC_Start+0x22>
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800211c <HAL_ADC_Start+0x18c>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fcc8 	bl	8001948 <LL_ADC_GetMultimode>
 8001fb8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fda2 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 809a 	bne.w	8002100 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Start+0x4a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e095      	b.n	8002106 <HAL_ADC_Start+0x176>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 ffc0 	bl	8002f68 <ADC_Enable>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 8081 	bne.w	80020f6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff8:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <HAL_ADC_Start+0x190>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a42      	ldr	r2, [pc, #264]	@ (8002114 <HAL_ADC_Start+0x184>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d002      	beq.n	8002014 <HAL_ADC_Start+0x84>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	e000      	b.n	8002016 <HAL_ADC_Start+0x86>
 8002014:	4b3e      	ldr	r3, [pc, #248]	@ (8002110 <HAL_ADC_Start+0x180>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4293      	cmp	r3, r2
 800201c:	d002      	beq.n	8002024 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800203c:	d106      	bne.n	800204c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002042:	f023 0206 	bic.w	r2, r3, #6
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	665a      	str	r2, [r3, #100]	@ 0x64
 800204a:	e002      	b.n	8002052 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	221c      	movs	r2, #28
 8002058:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <HAL_ADC_Start+0x184>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d002      	beq.n	8002072 <HAL_ADC_Start+0xe2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	e000      	b.n	8002074 <HAL_ADC_Start+0xe4>
 8002072:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <HAL_ADC_Start+0x180>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4293      	cmp	r3, r2
 800207a:	d008      	beq.n	800208e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b05      	cmp	r3, #5
 8002086:	d002      	beq.n	800208e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b09      	cmp	r3, #9
 800208c:	d114      	bne.n	80020b8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fd01 	bl	8001ab8 <LL_ADC_REG_StartConversion>
 80020b6:	e025      	b.n	8002104 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <HAL_ADC_Start+0x184>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d002      	beq.n	80020d4 <HAL_ADC_Start+0x144>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_Start+0x146>
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_ADC_Start+0x180>)
 80020d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00f      	beq.n	8002104 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80020f4:	e006      	b.n	8002104 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80020fe:	e001      	b.n	8002104 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000
 8002114:	40022100 	.word	0x40022100
 8002118:	40022300 	.word	0x40022300
 800211c:	58026300 	.word	0x58026300
 8002120:	fffff0fe 	.word	0xfffff0fe

08002124 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Stop+0x16>
 8002136:	2302      	movs	r3, #2
 8002138:	e021      	b.n	800217e <HAL_ADC_Stop+0x5a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002142:	2103      	movs	r1, #3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fe53 	bl	8002df0 <ADC_ConversionStop>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 ff91 	bl	800307c <ADC_Disable>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_ADC_Stop+0x64>)
 800216a:	4013      	ands	r3, r2
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	ffffeefe 	.word	0xffffeefe

0800218c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a72      	ldr	r2, [pc, #456]	@ (8002364 <HAL_ADC_PollForConversion+0x1d8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_ADC_PollForConversion+0x1e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a70      	ldr	r2, [pc, #448]	@ (8002368 <HAL_ADC_PollForConversion+0x1dc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_PollForConversion+0x22>
 80021aa:	4b70      	ldr	r3, [pc, #448]	@ (800236c <HAL_ADC_PollForConversion+0x1e0>)
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_PollForConversion+0x24>
 80021ae:	4b70      	ldr	r3, [pc, #448]	@ (8002370 <HAL_ADC_PollForConversion+0x1e4>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fbc9 	bl	8001948 <LL_ADC_GetMultimode>
 80021b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d102      	bne.n	80021c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021c0:	2308      	movs	r3, #8
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e037      	b.n	8002236 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d002      	beq.n	80021d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d111      	bne.n	80021fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0b1      	b.n	800235a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021f6:	2304      	movs	r3, #4
 80021f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021fa:	e01c      	b.n	8002236 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_ADC_PollForConversion+0x1d8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_ADC_PollForConversion+0x84>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a57      	ldr	r2, [pc, #348]	@ (8002368 <HAL_ADC_PollForConversion+0x1dc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_ADC_PollForConversion+0x88>
 8002210:	4b56      	ldr	r3, [pc, #344]	@ (800236c <HAL_ADC_PollForConversion+0x1e0>)
 8002212:	e000      	b.n	8002216 <HAL_ADC_PollForConversion+0x8a>
 8002214:	4b56      	ldr	r3, [pc, #344]	@ (8002370 <HAL_ADC_PollForConversion+0x1e4>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fba4 	bl	8001964 <LL_ADC_GetMultiDMATransfer>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e093      	b.n	800235a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002232:	2304      	movs	r3, #4
 8002234:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002236:	f7ff f973 	bl	8001520 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800223c:	e021      	b.n	8002282 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d01d      	beq.n	8002282 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002246:	f7ff f96b 	bl	8001520 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <HAL_ADC_PollForConversion+0xd0>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d112      	bne.n	8002282 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e06b      	b.n	800235a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0d6      	beq.n	800223e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff faa7 	bl	80017f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e5b      	ldrb	r3, [r3, #25]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d118      	bne.n	80022e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d111      	bne.n	80022e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022de:	f043 0201 	orr.w	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <HAL_ADC_PollForConversion+0x1dc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x16a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_PollForConversion+0x16c>
 80022f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_ADC_PollForConversion+0x1d8>)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d008      	beq.n	8002312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d002      	beq.n	8002312 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b09      	cmp	r3, #9
 8002310:	d104      	bne.n	800231c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e00c      	b.n	8002336 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_ADC_PollForConversion+0x1dc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d002      	beq.n	800232c <HAL_ADC_PollForConversion+0x1a0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e000      	b.n	800232e <HAL_ADC_PollForConversion+0x1a2>
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_ADC_PollForConversion+0x1d8>)
 800232e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e008      	b.n	8002358 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	220c      	movs	r2, #12
 8002356:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40022100 	.word	0x40022100
 800236c:	40022300 	.word	0x40022300
 8002370:	58026300 	.word	0x58026300

08002374 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0b9      	sub	sp, #228	@ 0xe4
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023aa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4aab      	ldr	r2, [pc, #684]	@ (8002660 <HAL_ADC_ConfigChannel+0x2d0>)
 80023b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x34>
 80023be:	2302      	movs	r3, #2
 80023c0:	f000 bcfe 	b.w	8002dc0 <HAL_ADC_ConfigChannel+0xa30>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fb99 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 84e2 	bne.w	8002da2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db38      	blt.n	8002458 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a9e      	ldr	r2, [pc, #632]	@ (8002664 <HAL_ADC_ConfigChannel+0x2d4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d033      	beq.n	8002458 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d108      	bne.n	800240e <HAL_ADC_ConfigChannel+0x7e>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	e01d      	b.n	800244a <HAL_ADC_ConfigChannel+0xba>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800242a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e004      	b.n	8002440 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2201      	movs	r2, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	69d1      	ldr	r1, [r2, #28]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	430b      	orrs	r3, r1
 8002456:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	f7ff f9d8 	bl	800181a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fb4a 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8002474:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fb6b 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8002482:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8270 	bne.w	8002970 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 826b 	bne.w	8002970 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff f9e3 	bl	8001872 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6c      	ldr	r2, [pc, #432]	@ (8002664 <HAL_ADC_ConfigChannel+0x2d4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10d      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024d0:	e032      	b.n	8002538 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024d2:	4b65      	ldr	r3, [pc, #404]	@ (8002668 <HAL_ADC_ConfigChannel+0x2d8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80024da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024de:	d10b      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x168>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	e01d      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1a4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x18e>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	e00a      	b.n	8002534 <HAL_ADC_ConfigChannel+0x1a4>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d048      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6919      	ldr	r1, [r3, #16]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002550:	f7ff f85e 	bl	8001610 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a42      	ldr	r2, [pc, #264]	@ (8002664 <HAL_ADC_ConfigChannel+0x2d4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d119      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	461a      	mov	r2, r3
 800256c:	f7ff f8f6 	bl	800175c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1f8>
 8002582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002586:	e000      	b.n	800258a <HAL_ADC_ConfigChannel+0x1fa>
 8002588:	2300      	movs	r3, #0
 800258a:	461a      	mov	r2, r3
 800258c:	f7ff f8c4 	bl	8001718 <LL_ADC_SetOffsetSaturation>
 8002590:	e1ee      	b.n	8002970 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d102      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x21a>
 80025a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025a8:	e000      	b.n	80025ac <HAL_ADC_ConfigChannel+0x21c>
 80025aa:	2300      	movs	r3, #0
 80025ac:	461a      	mov	r2, r3
 80025ae:	f7ff f891 	bl	80016d4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7e1b      	ldrb	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x238>
 80025c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025c6:	e000      	b.n	80025ca <HAL_ADC_ConfigChannel+0x23a>
 80025c8:	2300      	movs	r3, #0
 80025ca:	461a      	mov	r2, r3
 80025cc:	f7ff f868 	bl	80016a0 <LL_ADC_SetDataRightShift>
 80025d0:	e1ce      	b.n	8002970 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_ADC_ConfigChannel+0x2d4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 8181 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f845 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_ADC_ConfigChannel+0x27a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f83a 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	e01e      	b.n	8002648 <HAL_ADC_ConfigChannel+0x2b8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f82f 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800262c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e004      	b.n	8002646 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800263c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_ADC_ConfigChannel+0x2dc>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	e01e      	b.n	800269e <HAL_ADC_ConfigChannel+0x30e>
 8002660:	47ff0000 	.word	0x47ff0000
 8002664:	58026000 	.word	0x58026000
 8002668:	5c001000 	.word	0x5c001000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	429a      	cmp	r2, r3
 80026a0:	d106      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f878 	bl	80017a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe ffdc 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x34c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe ffd1 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	f003 021f 	and.w	r2, r3, #31
 80026da:	e01e      	b.n	800271a <HAL_ADC_ConfigChannel+0x38a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe ffc6 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e004      	b.n	8002718 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800270e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x3a2>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	e018      	b.n	8002764 <HAL_ADC_ConfigChannel+0x3d4>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800274a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800274e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800275a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	429a      	cmp	r2, r3
 8002766:	d106      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f815 	bl	80017a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe ff79 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x412>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ff6e 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	e01e      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x450>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe ff63 	bl	8001674 <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80027d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x468>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	e014      	b.n	8002822 <HAL_ADC_ConfigChannel+0x492>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800280c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002818:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	429a      	cmp	r2, r3
 8002824:	d106      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe ffb6 	bl	80017a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe ff1a 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x4d0>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2103      	movs	r1, #3
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff0f 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e017      	b.n	8002890 <HAL_ADC_ConfigChannel+0x500>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2103      	movs	r1, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe ff04 	bl	8001674 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800287c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x518>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	e011      	b.n	80028cc <HAL_ADC_ConfigChannel+0x53c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e003      	b.n	80028cc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80028c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d14f      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2103      	movs	r1, #3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe ff61 	bl	80017a0 <LL_ADC_SetOffsetState>
 80028de:	e047      	b.n	8002970 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800290a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002926:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800294a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800296e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff f879 	bl	8001a6c <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 8219 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f7fe ff9a 	bl	80018c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4aa1      	ldr	r2, [pc, #644]	@ (8002c20 <HAL_ADC_ConfigChannel+0x890>)
 800299a:	4293      	cmp	r3, r2
 800299c:	f040 812e 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x638>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2b09      	cmp	r3, #9
 80029be:	bf94      	ite	ls
 80029c0:	2301      	movls	r3, #1
 80029c2:	2300      	movhi	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e019      	b.n	80029fc <HAL_ADC_ConfigChannel+0x66c>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80029e0:	2320      	movs	r3, #32
 80029e2:	e003      	b.n	80029ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80029e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b09      	cmp	r3, #9
 80029f4:	bf94      	ite	ls
 80029f6:	2301      	movls	r3, #1
 80029f8:	2300      	movhi	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d079      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x68c>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1a:	e015      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x6b8>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x6d8>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	e017      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x708>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a78:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x72e>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	051b      	lsls	r3, r3, #20
 8002abc:	e018      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x760>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af0:	430b      	orrs	r3, r1
 8002af2:	e07e      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x780>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	069b      	lsls	r3, r3, #26
 8002b0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b0e:	e015      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x7ac>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x7cc>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	e017      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x7fc>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	61bb      	str	r3, [r7, #24]
  return result;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e003      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	ea42 0103 	orr.w	r1, r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10d      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x828>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	3b1e      	subs	r3, #30
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	e01b      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x860>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	60fb      	str	r3, [r7, #12]
  return result;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e003      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	3b1e      	subs	r3, #30
 8002bea:	051b      	lsls	r3, r3, #20
 8002bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fe fe3b 	bl	8001872 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f280 80d7 	bge.w	8002db4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_ADC_ConfigChannel+0x894>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x88a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_ADC_ConfigChannel+0x898>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10a      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x8a0>
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <HAL_ADC_ConfigChannel+0x89c>)
 8002c1c:	e009      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x8a2>
 8002c1e:	bf00      	nop
 8002c20:	47ff0000 	.word	0x47ff0000
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022100 	.word	0x40022100
 8002c2c:	40022300 	.word	0x40022300
 8002c30:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_ADC_ConfigChannel+0xa38>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fcde 	bl	80015f4 <LL_ADC_GetCommonPathInternalCh>
 8002c38:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a62      	ldr	r2, [pc, #392]	@ (8002dcc <HAL_ADC_ConfigChannel+0xa3c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_ADC_ConfigChannel+0x8c0>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a61      	ldr	r2, [pc, #388]	@ (8002dd0 <HAL_ADC_ConfigChannel+0xa40>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10e      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x8de>
 8002c50:	485e      	ldr	r0, [pc, #376]	@ (8002dcc <HAL_ADC_ConfigChannel+0xa3c>)
 8002c52:	f7fe ff0b 	bl	8001a6c <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	485d      	ldr	r0, [pc, #372]	@ (8002dd0 <HAL_ADC_ConfigChannel+0xa40>)
 8002c5a:	f7fe ff07 	bl	8001a6c <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4323      	orrs	r3, r4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e008      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x8f0>
 8002c6e:	4859      	ldr	r0, [pc, #356]	@ (8002dd4 <HAL_ADC_ConfigChannel+0xa44>)
 8002c70:	f7fe fefc 	bl	8001a6c <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8084 	beq.w	8002d8e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a53      	ldr	r2, [pc, #332]	@ (8002dd8 <HAL_ADC_ConfigChannel+0xa48>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d132      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x966>
 8002c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d12c      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd4 <HAL_ADC_ConfigChannel+0xa44>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	f040 8086 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a47      	ldr	r2, [pc, #284]	@ (8002dcc <HAL_ADC_ConfigChannel+0xa3c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x92c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a46      	ldr	r2, [pc, #280]	@ (8002dd0 <HAL_ADC_ConfigChannel+0xa40>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x930>
 8002cbc:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <HAL_ADC_ConfigChannel+0xa4c>)
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x932>
 8002cc0:	4a41      	ldr	r2, [pc, #260]	@ (8002dc8 <HAL_ADC_ConfigChannel+0xa38>)
 8002cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fe fc7e 	bl	80015ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd2:	4b43      	ldr	r3, [pc, #268]	@ (8002de0 <HAL_ADC_ConfigChannel+0xa50>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	4a42      	ldr	r2, [pc, #264]	@ (8002de4 <HAL_ADC_ConfigChannel+0xa54>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	e05e      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8002de8 <HAL_ADC_ConfigChannel+0xa58>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d120      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x9b2>
 8002d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_ADC_ConfigChannel+0xa44>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d14e      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dcc <HAL_ADC_ConfigChannel+0xa3c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x99a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd0 <HAL_ADC_ConfigChannel+0xa40>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x99e>
 8002d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ddc <HAL_ADC_ConfigChannel+0xa4c>)
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x9a0>
 8002d2e:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <HAL_ADC_ConfigChannel+0xa38>)
 8002d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fe fc47 	bl	80015ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d40:	e038      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <HAL_ADC_ConfigChannel+0xa5c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d133      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
 8002d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d12d      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <HAL_ADC_ConfigChannel+0xa44>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d128      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <HAL_ADC_ConfigChannel+0xa3c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x9e6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_ADC_ConfigChannel+0xa40>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x9ea>
 8002d76:	4a19      	ldr	r2, [pc, #100]	@ (8002ddc <HAL_ADC_ConfigChannel+0xa4c>)
 8002d78:	e000      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x9ec>
 8002d7a:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <HAL_ADC_ConfigChannel+0xa38>)
 8002d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7fe fc21 	bl	80015ce <LL_ADC_SetCommonPathInternalCh>
 8002d8c:	e012      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002da0:	e008      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002dbc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	37e4      	adds	r7, #228	@ 0xe4
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	58026300 	.word	0x58026300
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40022100 	.word	0x40022100
 8002dd4:	58026000 	.word	0x58026000
 8002dd8:	c7520000 	.word	0xc7520000
 8002ddc:	40022300 	.word	0x40022300
 8002de0:	24000000 	.word	0x24000000
 8002de4:	053e2d63 	.word	0x053e2d63
 8002de8:	c3210000 	.word	0xc3210000
 8002dec:	cb840000 	.word	0xcb840000

08002df0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fe7e 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fea0 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8002e18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8098 	beq.w	8002f58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02a      	beq.n	8002e8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7e5b      	ldrb	r3, [r3, #25]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d126      	bne.n	8002e8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7e1b      	ldrb	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d122      	bne.n	8002e8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e4a:	e014      	b.n	8002e76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4a45      	ldr	r2, [pc, #276]	@ (8002f64 <ADC_ConversionStop+0x174>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d90d      	bls.n	8002e70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e074      	b.n	8002f5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d1e3      	bne.n	8002e4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2240      	movs	r2, #64	@ 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d014      	beq.n	8002ebc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe36 	bl	8001b08 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fdf3 	bl	8001a92 <LL_ADC_IsDisableOngoing>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fe12 	bl	8001ae0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d014      	beq.n	8002eec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fe46 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fddb 	bl	8001a92 <LL_ADC_IsDisableOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fe22 	bl	8001b30 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d005      	beq.n	8002efe <ADC_ConversionStop+0x10e>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d105      	bne.n	8002f04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ef8:	230c      	movs	r3, #12
 8002efa:	617b      	str	r3, [r7, #20]
        break;
 8002efc:	e005      	b.n	8002f0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002efe:	2308      	movs	r3, #8
 8002f00:	617b      	str	r3, [r7, #20]
        break;
 8002f02:	e002      	b.n	8002f0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f04:	2304      	movs	r3, #4
 8002f06:	617b      	str	r3, [r7, #20]
        break;
 8002f08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fb09 	bl	8001520 <HAL_GetTick>
 8002f0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f10:	e01b      	b.n	8002f4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f12:	f7fe fb05 	bl	8001520 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d914      	bls.n	8002f4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e007      	b.n	8002f5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1dc      	bne.n	8002f12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	000cdbff 	.word	0x000cdbff

08002f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fd79 	bl	8001a6c <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d16e      	bne.n	800305e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <ADC_Enable+0x100>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e05a      	b.n	8003060 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fd34 	bl	8001a1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fab4 	bl	8001520 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <ADC_Enable+0x104>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <ADC_Enable+0x66>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	@ (8003070 <ADC_Enable+0x108>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <ADC_Enable+0x6a>
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <ADC_Enable+0x10c>)
 8002fd0:	e000      	b.n	8002fd4 <ADC_Enable+0x6c>
 8002fd2:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <ADC_Enable+0x110>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fcb7 	bl	8001948 <LL_ADC_GetMultimode>
 8002fda:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <ADC_Enable+0x108>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d002      	beq.n	8002fec <ADC_Enable+0x84>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e000      	b.n	8002fee <ADC_Enable+0x86>
 8002fec:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <ADC_Enable+0x104>)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02c      	beq.n	8003050 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d130      	bne.n	800305e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffc:	e028      	b.n	8003050 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fd32 	bl	8001a6c <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fd02 	bl	8001a1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003018:	f7fe fa82 	bl	8001520 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d914      	bls.n	8003050 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d00d      	beq.n	8003050 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d1cf      	bne.n	8002ffe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	8000003f 	.word	0x8000003f
 800306c:	40022000 	.word	0x40022000
 8003070:	40022100 	.word	0x40022100
 8003074:	40022300 	.word	0x40022300
 8003078:	58026300 	.word	0x58026300

0800307c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fd02 	bl	8001a92 <LL_ADC_IsDisableOngoing>
 800308e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fce9 	bl	8001a6c <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d047      	beq.n	8003130 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d144      	bne.n	8003130 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030d 	and.w	r3, r3, #13
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fcc3 	bl	8001a44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2203      	movs	r2, #3
 80030c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fa2b 	bl	8001520 <HAL_GetTick>
 80030ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030cc:	e029      	b.n	8003122 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	f043 0210 	orr.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e023      	b.n	8003132 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030ea:	f7fe fa19 	bl	8001520 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d914      	bls.n	8003122 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310a:	f043 0210 	orr.w	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e007      	b.n	8003132 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1dc      	bne.n	80030ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6c      	ldr	r2, [pc, #432]	@ (80032fc <ADC_ConfigureBoostMode+0x1c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <ADC_ConfigureBoostMode+0x1c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6b      	ldr	r2, [pc, #428]	@ (8003300 <ADC_ConfigureBoostMode+0x1c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d109      	bne.n	800316c <ADC_ConfigureBoostMode+0x30>
 8003158:	4b6a      	ldr	r3, [pc, #424]	@ (8003304 <ADC_ConfigureBoostMode+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <ADC_ConfigureBoostMode+0x42>
 800316c:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <ADC_ConfigureBoostMode+0x1cc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01c      	beq.n	80031bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003182:	f001 ffef 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8003186:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003190:	d010      	beq.n	80031b4 <ADC_ConfigureBoostMode+0x78>
 8003192:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003196:	d873      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x144>
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319c:	d002      	beq.n	80031a4 <ADC_ConfigureBoostMode+0x68>
 800319e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031a2:	d16d      	bne.n	8003280 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	60fb      	str	r3, [r7, #12]
        break;
 80031b2:	e068      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	60fb      	str	r3, [r7, #12]
        break;
 80031ba:	e064      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f003 f9ca 	bl	800655c <HAL_RCCEx_GetPeriphCLKFreq>
 80031c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80031d2:	d051      	beq.n	8003278 <ADC_ConfigureBoostMode+0x13c>
 80031d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80031d8:	d854      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 80031da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80031de:	d047      	beq.n	8003270 <ADC_ConfigureBoostMode+0x134>
 80031e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80031e4:	d84e      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 80031e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80031ea:	d03d      	beq.n	8003268 <ADC_ConfigureBoostMode+0x12c>
 80031ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80031f0:	d848      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 80031f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f6:	d033      	beq.n	8003260 <ADC_ConfigureBoostMode+0x124>
 80031f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031fc:	d842      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 80031fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003202:	d029      	beq.n	8003258 <ADC_ConfigureBoostMode+0x11c>
 8003204:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003208:	d83c      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 800320a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800320e:	d01a      	beq.n	8003246 <ADC_ConfigureBoostMode+0x10a>
 8003210:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003214:	d836      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 8003216:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800321a:	d014      	beq.n	8003246 <ADC_ConfigureBoostMode+0x10a>
 800321c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003220:	d830      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003226:	d00e      	beq.n	8003246 <ADC_ConfigureBoostMode+0x10a>
 8003228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800322c:	d82a      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 800322e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003232:	d008      	beq.n	8003246 <ADC_ConfigureBoostMode+0x10a>
 8003234:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003238:	d824      	bhi.n	8003284 <ADC_ConfigureBoostMode+0x148>
 800323a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800323e:	d002      	beq.n	8003246 <ADC_ConfigureBoostMode+0x10a>
 8003240:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003244:	d11e      	bne.n	8003284 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	0c9b      	lsrs	r3, r3, #18
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e016      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
        break;
 800325e:	e012      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	60fb      	str	r3, [r7, #12]
        break;
 8003266:	e00e      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	60fb      	str	r3, [r7, #12]
        break;
 800326e:	e00a      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	60fb      	str	r3, [r7, #12]
        break;
 8003276:	e006      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e002      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003284:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <ADC_ConfigureBoostMode+0x1d0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d808      	bhi.n	80032a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032a4:	e025      	b.n	80032f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <ADC_ConfigureBoostMode+0x1d4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d80a      	bhi.n	80032c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	e016      	b.n	80032f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a13      	ldr	r2, [pc, #76]	@ (8003314 <ADC_ConfigureBoostMode+0x1d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d80a      	bhi.n	80032e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	e007      	b.n	80032f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032f0:	609a      	str	r2, [r3, #8]
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40022000 	.word	0x40022000
 8003300:	40022100 	.word	0x40022100
 8003304:	40022300 	.word	0x40022300
 8003308:	58026300 	.word	0x58026300
 800330c:	005f5e10 	.word	0x005f5e10
 8003310:	00bebc20 	.word	0x00bebc20
 8003314:	017d7840 	.word	0x017d7840

08003318 <LL_ADC_IsEnabled>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <LL_ADC_IsEnabled+0x18>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <LL_ADC_IsEnabled+0x1a>
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_ADC_REG_IsConversionOngoing>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d101      	bne.n	8003356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b0a3      	sub	sp, #140	@ 0x8c
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800337e:	2302      	movs	r3, #2
 8003380:	e0c1      	b.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5e      	ldr	r2, [pc, #376]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d102      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800339c:	4b5d      	ldr	r3, [pc, #372]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e001      	b.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0a0      	b.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ffb9 	bl	800333e <LL_ADC_REG_IsConversionOngoing>
 80033cc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ffb2 	bl	800333e <LL_ADC_REG_IsConversionOngoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8081 	bne.w	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d17c      	bne.n	80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a48      	ldr	r2, [pc, #288]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a46      	ldr	r2, [pc, #280]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80033fe:	4b46      	ldr	r3, [pc, #280]	@ (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003400:	e000      	b.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003402:	4b46      	ldr	r3, [pc, #280]	@ (800351c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003404:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d039      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800340e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	431a      	orrs	r2, r3
 800341c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800341e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3a      	ldr	r2, [pc, #232]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a39      	ldr	r2, [pc, #228]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10e      	bne.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003434:	4836      	ldr	r0, [pc, #216]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003436:	f7ff ff6f 	bl	8003318 <LL_ADC_IsEnabled>
 800343a:	4604      	mov	r4, r0
 800343c:	4835      	ldr	r0, [pc, #212]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800343e:	f7ff ff6b 	bl	8003318 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	4323      	orrs	r3, r4
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e008      	b.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003452:	4833      	ldr	r0, [pc, #204]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003454:	f7ff ff60 	bl	8003318 <LL_ADC_IsEnabled>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d047      	beq.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800346e:	4013      	ands	r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6811      	ldr	r1, [r2, #0]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	6892      	ldr	r2, [r2, #8]
 8003478:	430a      	orrs	r2, r1
 800347a:	431a      	orrs	r2, r3
 800347c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800347e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003480:	e03a      	b.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800348a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800348c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10e      	bne.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80034a2:	481b      	ldr	r0, [pc, #108]	@ (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034a4:	f7ff ff38 	bl	8003318 <LL_ADC_IsEnabled>
 80034a8:	4604      	mov	r4, r0
 80034aa:	481a      	ldr	r0, [pc, #104]	@ (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034ac:	f7ff ff34 	bl	8003318 <LL_ADC_IsEnabled>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4323      	orrs	r3, r4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80034c0:	4817      	ldr	r0, [pc, #92]	@ (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80034c2:	f7ff ff29 	bl	8003318 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80034dc:	4013      	ands	r3, r2
 80034de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80034e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034e2:	e009      	b.n	80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80034f6:	e000      	b.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003502:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003506:	4618      	mov	r0, r3
 8003508:	378c      	adds	r7, #140	@ 0x8c
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000
 8003514:	40022100 	.word	0x40022100
 8003518:	40022300 	.word	0x40022300
 800351c:	58026300 	.word	0x58026300
 8003520:	58026000 	.word	0x58026000
 8003524:	fffff0e0 	.word	0xfffff0e0

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <__NVIC_SetPriorityGrouping+0x40>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	4313      	orrs	r3, r2
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <__NVIC_SetPriorityGrouping+0x40>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00
 800356c:	05fa0000 	.word	0x05fa0000

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	@ (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	@ (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	@ 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003658:	d301      	bcc.n	800365e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365a:	2301      	movs	r3, #1
 800365c:	e00f      	b.n	800367e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <SysTick_Config+0x40>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003666:	210f      	movs	r1, #15
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f7ff ff8e 	bl	800358c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <SysTick_Config+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <SysTick_Config+0x40>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff47 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff5e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff90 	bl	80035e0 <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5f 	bl	800358c <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffb2 	bl	8003648 <SysTick_Config>
 80036e4:	4603      	mov	r3, r0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0e3      	b.n	80038ca <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2223      	movs	r2, #35	@ 0x23
 8003710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fd fbc9 	bl	8000eac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	4b6e      	ldr	r3, [pc, #440]	@ (80038d4 <HAL_ETH_Init+0x1e4>)
 800371c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003720:	4a6c      	ldr	r2, [pc, #432]	@ (80038d4 <HAL_ETH_Init+0x1e4>)
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800372a:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_ETH_Init+0x1e4>)
 800372c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7a1b      	ldrb	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003740:	2000      	movs	r0, #0
 8003742:	f7fd ff1d 	bl	8001580 <HAL_SYSCFG_ETHInterfaceSelect>
 8003746:	e003      	b.n	8003750 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003748:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800374c:	f7fd ff18 	bl	8001580 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003750:	4b61      	ldr	r3, [pc, #388]	@ (80038d8 <HAL_ETH_Init+0x1e8>)
 8003752:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800376a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800376c:	f7fd fed8 	bl	8001520 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003772:	e011      	b.n	8003798 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003774:	f7fd fed4 	bl	8001520 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003782:	d909      	bls.n	8003798 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2204      	movs	r2, #4
 8003788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	22e0      	movs	r2, #224	@ 0xe0
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e098      	b.n	80038ca <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e4      	bne.n	8003774 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f89e 	bl	80038ec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80037b0:	f001 fcd8 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <HAL_ETH_Init+0x1ec>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0c9a      	lsrs	r2, r3, #18
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3a01      	subs	r2, #1
 80037c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa81 	bl	8003cd0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80037da:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037ea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	22e0      	movs	r2, #224	@ 0xe0
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e05d      	b.n	80038ca <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003816:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800381a:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_ETH_Init+0x1f0>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6952      	ldr	r2, [r2, #20]
 8003822:	0051      	lsls	r1, r2, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	430b      	orrs	r3, r1
 800382a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800382e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fae9 	bl	8003e0a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fb2f 	bl	8003e9c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	3305      	adds	r3, #5
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	3303      	adds	r3, #3
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	061a      	lsls	r2, r3, #24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	3302      	adds	r3, #2
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800387c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800388a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800388c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <HAL_ETH_Init+0x1f4>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <HAL_ETH_Init+0x1f8>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2210      	movs	r2, #16
 80038c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	58000400 	.word	0x58000400
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	ffff8001 	.word	0xffff8001
 80038e4:	0c020060 	.word	0x0c020060
 80038e8:	0c20c000 	.word	0x0c20c000

080038ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003904:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003906:	f001 fc2d 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 800390a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d804      	bhi.n	800391e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e022      	b.n	8003964 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4a16      	ldr	r2, [pc, #88]	@ (800397c <HAL_ETH_SetMDIOClockRange+0x90>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d204      	bcs.n	8003930 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e019      	b.n	8003964 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a13      	ldr	r2, [pc, #76]	@ (8003980 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d915      	bls.n	8003964 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a12      	ldr	r2, [pc, #72]	@ (8003984 <HAL_ETH_SetMDIOClockRange+0x98>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d804      	bhi.n	800394a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e00c      	b.n	8003964 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4a0e      	ldr	r2, [pc, #56]	@ (8003988 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d804      	bhi.n	800395c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e003      	b.n	8003964 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	02160ebf 	.word	0x02160ebf
 800397c:	03938700 	.word	0x03938700
 8003980:	05f5e0ff 	.word	0x05f5e0ff
 8003984:	08f0d17f 	.word	0x08f0d17f
 8003988:	0ee6b27f 	.word	0x0ee6b27f

0800398c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800399e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80039a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
 80039ac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7b5b      	ldrb	r3, [r3, #13]
 80039b4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	7b9b      	ldrb	r3, [r3, #14]
 80039bc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	7bdb      	ldrb	r3, [r3, #15]
 80039c4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	7c12      	ldrb	r2, [r2, #16]
 80039cc:	2a00      	cmp	r2, #0
 80039ce:	d102      	bne.n	80039d6 <ETH_SetMACConfig+0x4a>
 80039d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039d4:	e000      	b.n	80039d8 <ETH_SetMACConfig+0x4c>
 80039d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	7c52      	ldrb	r2, [r2, #17]
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d102      	bne.n	80039e8 <ETH_SetMACConfig+0x5c>
 80039e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039e6:	e000      	b.n	80039ea <ETH_SetMACConfig+0x5e>
 80039e8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	7c9b      	ldrb	r3, [r3, #18]
 80039f0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039f2:	431a      	orrs	r2, r3
               macconf->Speed |
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80039f8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80039fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	7f1b      	ldrb	r3, [r3, #28]
 8003a04:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7f5b      	ldrb	r3, [r3, #29]
 8003a0c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	7f92      	ldrb	r2, [r2, #30]
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	d102      	bne.n	8003a1e <ETH_SetMACConfig+0x92>
 8003a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1c:	e000      	b.n	8003a20 <ETH_SetMACConfig+0x94>
 8003a1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	7fdb      	ldrb	r3, [r3, #31]
 8003a26:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a30:	2a00      	cmp	r2, #0
 8003a32:	d102      	bne.n	8003a3a <ETH_SetMACConfig+0xae>
 8003a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a38:	e000      	b.n	8003a3c <ETH_SetMACConfig+0xb0>
 8003a3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a3c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a4a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003a4c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b56      	ldr	r3, [pc, #344]	@ (8003bb8 <ETH_SetMACConfig+0x22c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a8a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	d102      	bne.n	8003a9e <ETH_SetMACConfig+0x112>
 8003a98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a9c:	e000      	b.n	8003aa0 <ETH_SetMACConfig+0x114>
 8003a9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003aa0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4b42      	ldr	r3, [pc, #264]	@ (8003bbc <ETH_SetMACConfig+0x230>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <ETH_SetMACConfig+0x234>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	68f9      	ldr	r1, [r7, #12]
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ae8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003aee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d101      	bne.n	8003afe <ETH_SetMACConfig+0x172>
 8003afa:	2280      	movs	r2, #128	@ 0x80
 8003afc:	e000      	b.n	8003b00 <ETH_SetMACConfig+0x174>
 8003afe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b00:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b06:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b12:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003b16:	4013      	ands	r3, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	68f9      	ldr	r1, [r7, #12]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003b28:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003b30:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3e:	f023 0103 	bic.w	r1, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003b56:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d101      	bne.n	8003b7a <ETH_SetMACConfig+0x1ee>
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	e000      	b.n	8003b7c <ETH_SetMACConfig+0x1f0>
 8003b7a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003b7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003b84:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003b8e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003b9c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	00048083 	.word	0x00048083
 8003bbc:	c0f88000 	.word	0xc0f88000
 8003bc0:	fffffef0 	.word	0xfffffef0

08003bc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <ETH_SetDMAConfig+0xf8>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	6811      	ldr	r1, [r2, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bf6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	7b1b      	ldrb	r3, [r3, #12]
 8003bfc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc0 <ETH_SetDMAConfig+0xfc>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	430b      	orrs	r3, r1
 8003c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c1c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7b5b      	ldrb	r3, [r3, #13]
 8003c22:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c34:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003c38:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <ETH_SetDMAConfig+0x100>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	430b      	orrs	r3, r1
 8003c44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c48:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	7d1b      	ldrb	r3, [r3, #20]
 8003c54:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	7f5b      	ldrb	r3, [r3, #29]
 8003c5c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003c6e:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <ETH_SetDMAConfig+0x104>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c7e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	7f1b      	ldrb	r3, [r3, #28]
 8003c86:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c98:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <ETH_SetDMAConfig+0x108>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	ffff87fd 	.word	0xffff87fd
 8003cc0:	ffff2ffe 	.word	0xffff2ffe
 8003cc4:	fffec000 	.word	0xfffec000
 8003cc8:	ffc0efef 	.word	0xffc0efef
 8003ccc:	7fc0ffff 	.word	0x7fc0ffff

08003cd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0a4      	sub	sp, #144	@ 0x90
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d10:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003d28:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003d2c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d52:	2300      	movs	r3, #0
 8003d54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003d7a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d84:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003daa:	2300      	movs	r3, #0
 8003dac:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fde6 	bl	800398c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003de4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003de8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003df0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003df6:	f107 0308 	add.w	r3, r7, #8
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fee1 	bl	8003bc4 <ETH_SetDMAConfig>
}
 8003e02:	bf00      	nop
 8003e04:	3790      	adds	r7, #144	@ 0x90
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e01d      	b.n	8003e54 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2200      	movs	r2, #0
 8003e34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	3206      	adds	r2, #6
 8003e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d9de      	bls.n	8003e18 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e7c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e023      	b.n	8003ef2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	3212      	adds	r2, #18
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d9d8      	bls.n	8003eaa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2303      	movs	r3, #3
 8003f22:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f32:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f46:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	@ 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f66:	4b86      	ldr	r3, [pc, #536]	@ (8004180 <HAL_GPIO_Init+0x228>)
 8003f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f6a:	e18c      	b.n	8004286 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 817e 	beq.w	8004280 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d005      	beq.n	8003f9c <HAL_GPIO_Init+0x44>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d130      	bne.n	8003ffe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0201 	and.w	r2, r3, #1
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b03      	cmp	r3, #3
 8004008:	d017      	beq.n	800403a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d123      	bne.n	800408e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80d8 	beq.w	8004280 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <HAL_GPIO_Init+0x22c>)
 80040d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004184 <HAL_GPIO_Init+0x22c>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80040e0:	4b28      	ldr	r3, [pc, #160]	@ (8004184 <HAL_GPIO_Init+0x22c>)
 80040e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ee:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <HAL_GPIO_Init+0x230>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <HAL_GPIO_Init+0x234>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d04a      	beq.n	80041b0 <HAL_GPIO_Init+0x258>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_GPIO_Init+0x238>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02b      	beq.n	800417a <HAL_GPIO_Init+0x222>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_GPIO_Init+0x23c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d025      	beq.n	8004176 <HAL_GPIO_Init+0x21e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_GPIO_Init+0x240>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x21a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_GPIO_Init+0x244>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x216>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <HAL_GPIO_Init+0x248>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x212>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a17      	ldr	r2, [pc, #92]	@ (80041a4 <HAL_GPIO_Init+0x24c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_GPIO_Init+0x250>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x20a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <HAL_GPIO_Init+0x254>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x206>
 800415a:	2309      	movs	r3, #9
 800415c:	e029      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 800415e:	230a      	movs	r3, #10
 8004160:	e027      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 8004162:	2307      	movs	r3, #7
 8004164:	e025      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 8004166:	2306      	movs	r3, #6
 8004168:	e023      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 800416a:	2305      	movs	r3, #5
 800416c:	e021      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 800416e:	2304      	movs	r3, #4
 8004170:	e01f      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 8004172:	2303      	movs	r3, #3
 8004174:	e01d      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 8004176:	2302      	movs	r3, #2
 8004178:	e01b      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 800417a:	2301      	movs	r3, #1
 800417c:	e019      	b.n	80041b2 <HAL_GPIO_Init+0x25a>
 800417e:	bf00      	nop
 8004180:	58000080 	.word	0x58000080
 8004184:	58024400 	.word	0x58024400
 8004188:	58000400 	.word	0x58000400
 800418c:	58020000 	.word	0x58020000
 8004190:	58020400 	.word	0x58020400
 8004194:	58020800 	.word	0x58020800
 8004198:	58020c00 	.word	0x58020c00
 800419c:	58021000 	.word	0x58021000
 80041a0:	58021400 	.word	0x58021400
 80041a4:	58021800 	.word	0x58021800
 80041a8:	58021c00 	.word	0x58021c00
 80041ac:	58022400 	.word	0x58022400
 80041b0:	2300      	movs	r3, #0
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	f002 0203 	and.w	r2, r2, #3
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4093      	lsls	r3, r2
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c2:	4938      	ldr	r1, [pc, #224]	@ (80042a4 <HAL_GPIO_Init+0x34c>)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	3302      	adds	r3, #2
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f ae6b 	bne.w	8003f6c <HAL_GPIO_Init+0x14>
  }
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3724      	adds	r7, #36	@ 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	58000400 	.word	0x58000400

080042a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	4613      	mov	r3, r2
 80042b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b8:	787b      	ldrb	r3, [r7, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042c4:	e003      	b.n	80042ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042c6:	887b      	ldrh	r3, [r7, #2]
 80042c8:	041a      	lsls	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	619a      	str	r2, [r3, #24]
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042e4:	4b19      	ldr	r3, [pc, #100]	@ (800434c <HAL_PWREx_ConfigSupply+0x70>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d00a      	beq.n	8004306 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042f0:	4b16      	ldr	r3, [pc, #88]	@ (800434c <HAL_PWREx_ConfigSupply+0x70>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e01f      	b.n	8004342 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e01d      	b.n	8004342 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_PWREx_ConfigSupply+0x70>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 0207 	bic.w	r2, r3, #7
 800430e:	490f      	ldr	r1, [pc, #60]	@ (800434c <HAL_PWREx_ConfigSupply+0x70>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004316:	f7fd f903 	bl	8001520 <HAL_GetTick>
 800431a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800431c:	e009      	b.n	8004332 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800431e:	f7fd f8ff 	bl	8001520 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800432c:	d901      	bls.n	8004332 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e007      	b.n	8004342 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_PWREx_ConfigSupply+0x70>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433e:	d1ee      	bne.n	800431e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	58024800 	.word	0x58024800

08004350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	@ 0x30
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e3c8      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8087 	beq.w	800447e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004370:	4b88      	ldr	r3, [pc, #544]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800437a:	4b86      	ldr	r3, [pc, #536]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004382:	2b10      	cmp	r3, #16
 8004384:	d007      	beq.n	8004396 <HAL_RCC_OscConfig+0x46>
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	2b18      	cmp	r3, #24
 800438a:	d110      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b7f      	ldr	r3, [pc, #508]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d06c      	beq.n	800447c <HAL_RCC_OscConfig+0x12c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d168      	bne.n	800447c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e3a2      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x76>
 80043b8:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a75      	ldr	r2, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e02e      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x98>
 80043ce:	4b71      	ldr	r3, [pc, #452]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a70      	ldr	r2, [pc, #448]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6e      	ldr	r3, [pc, #440]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6d      	ldr	r2, [pc, #436]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0xbc>
 80043f2:	4b68      	ldr	r3, [pc, #416]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a67      	ldr	r2, [pc, #412]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b65      	ldr	r3, [pc, #404]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xd4>
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a60      	ldr	r2, [pc, #384]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b5e      	ldr	r3, [pc, #376]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5d      	ldr	r2, [pc, #372]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd f878 	bl	8001520 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd f874 	bl	8001520 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e356      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004446:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xe4>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd f864 	bl	8001520 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd f860 	bl	8001520 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e342      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800446e:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x10c>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 808c 	beq.w	80045a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448c:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004494:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004496:	4b3f      	ldr	r3, [pc, #252]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_RCC_OscConfig+0x162>
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	2b18      	cmp	r3, #24
 80044a6:	d137      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c8>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d132      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b2:	4b38      	ldr	r3, [pc, #224]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCC_OscConfig+0x17a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e314      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ca:	4b32      	ldr	r3, [pc, #200]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0219 	bic.w	r2, r3, #25
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	492f      	ldr	r1, [pc, #188]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd f820 	bl	8001520 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fd f81c 	bl	8001520 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e2fe      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f6:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	4920      	ldr	r1, [pc, #128]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004516:	e045      	b.n	80045a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d026      	beq.n	800456e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004520:	4b1c      	ldr	r3, [pc, #112]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 0219 	bic.w	r2, r3, #25
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4919      	ldr	r1, [pc, #100]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fc fff5 	bl	8001520 <HAL_GetTick>
 8004536:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453a:	f7fc fff1 	bl	8001520 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e2d3      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	490b      	ldr	r1, [pc, #44]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	e01a      	b.n	80045a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fc ffd1 	bl	8001520 <HAL_GetTick>
 800457e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004582:	f7fc ffcd 	bl	8001520 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d903      	bls.n	8004598 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e2af      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
 8004594:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004598:	4b96      	ldr	r3, [pc, #600]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ee      	bne.n	8004582 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d06a      	beq.n	8004686 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b0:	4b90      	ldr	r3, [pc, #576]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045ba:	4b8e      	ldr	r3, [pc, #568]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d007      	beq.n	80045d6 <HAL_RCC_OscConfig+0x286>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b18      	cmp	r3, #24
 80045ca:	d11b      	bne.n	8004604 <HAL_RCC_OscConfig+0x2b4>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d116      	bne.n	8004604 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d6:	4b87      	ldr	r3, [pc, #540]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCC_OscConfig+0x29e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e282      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ee:	4b81      	ldr	r3, [pc, #516]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	497d      	ldr	r1, [pc, #500]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004602:	e040      	b.n	8004686 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800460c:	4b79      	ldr	r3, [pc, #484]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a78      	ldr	r2, [pc, #480]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fc ff82 	bl	8001520 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004620:	f7fc ff7e 	bl	8001520 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e260      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004632:	4b70      	ldr	r3, [pc, #448]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800463e:	4b6d      	ldr	r3, [pc, #436]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	4969      	ldr	r1, [pc, #420]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]
 8004652:	e018      	b.n	8004686 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004654:	4b67      	ldr	r3, [pc, #412]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a66      	ldr	r2, [pc, #408]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800465a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fc ff5e 	bl	8001520 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004668:	f7fc ff5a 	bl	8001520 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e23c      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800467a:	4b5e      	ldr	r3, [pc, #376]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d036      	beq.n	8004700 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d019      	beq.n	80046ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b56      	ldr	r3, [pc, #344]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	4a55      	ldr	r2, [pc, #340]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fc ff3b 	bl	8001520 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fc ff37 	bl	8001520 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e219      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046c0:	4b4c      	ldr	r3, [pc, #304]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x35e>
 80046cc:	e018      	b.n	8004700 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ce:	4b49      	ldr	r3, [pc, #292]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	4a48      	ldr	r2, [pc, #288]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fc ff21 	bl	8001520 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fc ff1d 	bl	8001520 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1ff      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046f4:	4b3f      	ldr	r3, [pc, #252]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d036      	beq.n	800477a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d019      	beq.n	8004748 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004714:	4b37      	ldr	r3, [pc, #220]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a36      	ldr	r2, [pc, #216]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800471a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800471e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004720:	f7fc fefe 	bl	8001520 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004728:	f7fc fefa 	bl	8001520 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1dc      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800473a:	4b2e      	ldr	r3, [pc, #184]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x3d8>
 8004746:	e018      	b.n	800477a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a29      	ldr	r2, [pc, #164]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 800474e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004752:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004754:	f7fc fee4 	bl	8001520 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800475c:	f7fc fee0 	bl	8001520 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1c2      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800476e:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8086 	beq.w	8004894 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <HAL_RCC_OscConfig+0x4a8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1a      	ldr	r2, [pc, #104]	@ (80047f8 <HAL_RCC_OscConfig+0x4a8>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004794:	f7fc fec4 	bl	8001520 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fc fec0 	bl	8001520 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1a2      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_RCC_OscConfig+0x4a8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d106      	bne.n	80047d0 <HAL_RCC_OscConfig+0x480>
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	4a0b      	ldr	r2, [pc, #44]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ce:	e032      	b.n	8004836 <HAL_RCC_OscConfig+0x4e6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_OscConfig+0x4ac>
 80047d8:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	4a05      	ldr	r2, [pc, #20]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e4:	4b03      	ldr	r3, [pc, #12]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a02      	ldr	r2, [pc, #8]	@ (80047f4 <HAL_RCC_OscConfig+0x4a4>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	e021      	b.n	8004836 <HAL_RCC_OscConfig+0x4e6>
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
 80047f8:	58024800 	.word	0x58024800
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b05      	cmp	r3, #5
 8004802:	d10c      	bne.n	800481e <HAL_RCC_OscConfig+0x4ce>
 8004804:	4b83      	ldr	r3, [pc, #524]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	4a82      	ldr	r2, [pc, #520]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004810:	4b80      	ldr	r3, [pc, #512]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4a7f      	ldr	r2, [pc, #508]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	@ 0x70
 800481c:	e00b      	b.n	8004836 <HAL_RCC_OscConfig+0x4e6>
 800481e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	4a7c      	ldr	r2, [pc, #496]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6713      	str	r3, [r2, #112]	@ 0x70
 800482a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	4a79      	ldr	r2, [pc, #484]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d015      	beq.n	800486a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fc fe6f 	bl	8001520 <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc fe6b 	bl	8001520 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e14b      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800485c:	4b6d      	ldr	r3, [pc, #436]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ee      	beq.n	8004846 <HAL_RCC_OscConfig+0x4f6>
 8004868:	e014      	b.n	8004894 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fc fe59 	bl	8001520 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fc fe55 	bl	8001520 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e135      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004888:	4b62      	ldr	r3, [pc, #392]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ee      	bne.n	8004872 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 812a 	beq.w	8004af2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800489e:	4b5d      	ldr	r3, [pc, #372]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048a6:	2b18      	cmp	r3, #24
 80048a8:	f000 80ba 	beq.w	8004a20 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	f040 8095 	bne.w	80049e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b57      	ldr	r3, [pc, #348]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a56      	ldr	r2, [pc, #344]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fc fe2d 	bl	8001520 <HAL_GetTick>
 80048c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fc fe29 	bl	8001520 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e10b      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <HAL_RCC_OscConfig+0x6c8>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	430a      	orrs	r2, r1
 80048fc:	4945      	ldr	r1, [pc, #276]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	628b      	str	r3, [r1, #40]	@ 0x28
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	3b01      	subs	r3, #1
 8004908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004910:	3b01      	subs	r3, #1
 8004912:	025b      	lsls	r3, r3, #9
 8004914:	b29b      	uxth	r3, r3
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	3b01      	subs	r3, #1
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	3b01      	subs	r3, #1
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004932:	4938      	ldr	r1, [pc, #224]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a35      	ldr	r2, [pc, #212]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004944:	4b33      	ldr	r3, [pc, #204]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004948:	4b34      	ldr	r3, [pc, #208]	@ (8004a1c <HAL_RCC_OscConfig+0x6cc>)
 800494a:	4013      	ands	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004950:	00d2      	lsls	r2, r2, #3
 8004952:	4930      	ldr	r1, [pc, #192]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004958:	4b2e      	ldr	r3, [pc, #184]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f023 020c 	bic.w	r2, r3, #12
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	492b      	ldr	r1, [pc, #172]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	f023 0202 	bic.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	4927      	ldr	r1, [pc, #156]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004978:	4313      	orrs	r3, r2
 800497a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800497c:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a24      	ldr	r2, [pc, #144]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004988:	4b22      	ldr	r3, [pc, #136]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4a21      	ldr	r2, [pc, #132]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004994:	4b1f      	ldr	r3, [pc, #124]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	4a1e      	ldr	r2, [pc, #120]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 800499a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800499e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a18      	ldr	r2, [pc, #96]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fc fdb2 	bl	8001520 <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fc fdae 	bl	8001520 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e090      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049d2:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x670>
 80049de:	e088      	b.n	8004af2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 80049e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fc fd98 	bl	8001520 <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fc fd94 	bl	8001520 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e076      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a06:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <HAL_RCC_OscConfig+0x6c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6a4>
 8004a12:	e06e      	b.n	8004af2 <HAL_RCC_OscConfig+0x7a2>
 8004a14:	58024400 	.word	0x58024400
 8004a18:	fffffc0c 	.word	0xfffffc0c
 8004a1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a20:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a26:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d031      	beq.n	8004a98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0203 	and.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d12a      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d122      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d11a      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	0a5b      	lsrs	r3, r3, #9
 8004a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d111      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d108      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0e1b      	lsrs	r3, r3, #24
 8004a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e02b      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a9c:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d01f      	beq.n	8004af2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ab2:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	4a11      	ldr	r2, [pc, #68]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004abe:	f7fc fd2f 	bl	8001520 <HAL_GetTick>
 8004ac2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ac4:	bf00      	nop
 8004ac6:	f7fc fd2b 	bl	8001520 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d0f9      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <HAL_RCC_OscConfig+0x7b0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ade:	00d2      	lsls	r2, r2, #3
 8004ae0:	4906      	ldr	r1, [pc, #24]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ae6:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	4a04      	ldr	r2, [pc, #16]	@ (8004afc <HAL_RCC_OscConfig+0x7ac>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3730      	adds	r7, #48	@ 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	58024400 	.word	0x58024400
 8004b00:	ffff0007 	.word	0xffff0007

08004b04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e19c      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b8a      	ldr	r3, [pc, #552]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d910      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b87      	ldr	r3, [pc, #540]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 020f 	bic.w	r2, r3, #15
 8004b2e:	4985      	ldr	r1, [pc, #532]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b83      	ldr	r3, [pc, #524]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e184      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d010      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	4b7b      	ldr	r3, [pc, #492]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d908      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b64:	4b78      	ldr	r3, [pc, #480]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	4975      	ldr	r1, [pc, #468]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	4b70      	ldr	r3, [pc, #448]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d908      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b92:	4b6d      	ldr	r3, [pc, #436]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	496a      	ldr	r1, [pc, #424]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	4b64      	ldr	r3, [pc, #400]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d908      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bc0:	4b61      	ldr	r3, [pc, #388]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	495e      	ldr	r1, [pc, #376]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d908      	bls.n	8004c00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bee:	4b56      	ldr	r3, [pc, #344]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4953      	ldr	r1, [pc, #332]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	4b4d      	ldr	r3, [pc, #308]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d908      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f023 020f 	bic.w	r2, r3, #15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4947      	ldr	r1, [pc, #284]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d055      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c3a:	4b43      	ldr	r3, [pc, #268]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4940      	ldr	r1, [pc, #256]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d107      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c54:	4b3c      	ldr	r3, [pc, #240]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d121      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0f6      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c6c:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0ea      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d107      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c84:	4b30      	ldr	r3, [pc, #192]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0de      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c94:	4b2c      	ldr	r3, [pc, #176]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0d6      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ca4:	4b28      	ldr	r3, [pc, #160]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4925      	ldr	r1, [pc, #148]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fc33 	bl	8001520 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbe:	f7fc fc2f 	bl	8001520 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0be      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d1eb      	bne.n	8004cbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d010      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	4b14      	ldr	r3, [pc, #80]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d208      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d02:	4b11      	ldr	r3, [pc, #68]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f023 020f 	bic.w	r2, r3, #15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	490e      	ldr	r1, [pc, #56]	@ (8004d48 <HAL_RCC_ClockConfig+0x244>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d214      	bcs.n	8004d4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <HAL_RCC_ClockConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e086      	b.n	8004e52 <HAL_RCC_ClockConfig+0x34e>
 8004d44:	52002000 	.word	0x52002000
 8004d48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d208      	bcs.n	8004d7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d68:	4b3c      	ldr	r3, [pc, #240]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	4939      	ldr	r1, [pc, #228]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d010      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d208      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d96:	4b31      	ldr	r3, [pc, #196]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	492e      	ldr	r1, [pc, #184]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d208      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dc4:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4922      	ldr	r1, [pc, #136]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d208      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004df2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	4917      	ldr	r1, [pc, #92]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e04:	f000 f834 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b14      	ldr	r3, [pc, #80]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	4912      	ldr	r1, [pc, #72]	@ (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e22:	4b0e      	ldr	r3, [pc, #56]	@ (8004e5c <HAL_RCC_ClockConfig+0x358>)
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e60 <HAL_RCC_ClockConfig+0x35c>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <HAL_RCC_ClockConfig+0x360>)
 8004e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <HAL_RCC_ClockConfig+0x364>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <HAL_RCC_ClockConfig+0x368>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fc fb20 	bl	800148c <HAL_InitTick>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	0800b870 	.word	0x0800b870
 8004e64:	24000004 	.word	0x24000004
 8004e68:	24000000 	.word	0x24000000
 8004e6c:	24000008 	.word	0x24000008

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	@ 0x24
 8004e74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e76:	4bb3      	ldr	r3, [pc, #716]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e7e:	2b18      	cmp	r3, #24
 8004e80:	f200 8155 	bhi.w	800512e <HAL_RCC_GetSysClockFreq+0x2be>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ef1 	.word	0x08004ef1
 8004e90:	0800512f 	.word	0x0800512f
 8004e94:	0800512f 	.word	0x0800512f
 8004e98:	0800512f 	.word	0x0800512f
 8004e9c:	0800512f 	.word	0x0800512f
 8004ea0:	0800512f 	.word	0x0800512f
 8004ea4:	0800512f 	.word	0x0800512f
 8004ea8:	0800512f 	.word	0x0800512f
 8004eac:	08004f17 	.word	0x08004f17
 8004eb0:	0800512f 	.word	0x0800512f
 8004eb4:	0800512f 	.word	0x0800512f
 8004eb8:	0800512f 	.word	0x0800512f
 8004ebc:	0800512f 	.word	0x0800512f
 8004ec0:	0800512f 	.word	0x0800512f
 8004ec4:	0800512f 	.word	0x0800512f
 8004ec8:	0800512f 	.word	0x0800512f
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	0800512f 	.word	0x0800512f
 8004ed4:	0800512f 	.word	0x0800512f
 8004ed8:	0800512f 	.word	0x0800512f
 8004edc:	0800512f 	.word	0x0800512f
 8004ee0:	0800512f 	.word	0x0800512f
 8004ee4:	0800512f 	.word	0x0800512f
 8004ee8:	0800512f 	.word	0x0800512f
 8004eec:	08004f23 	.word	0x08004f23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef0:	4b94      	ldr	r3, [pc, #592]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004efc:	4b91      	ldr	r3, [pc, #580]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	4a90      	ldr	r2, [pc, #576]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f0e:	e111      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f10:	4b8d      	ldr	r3, [pc, #564]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f12:	61bb      	str	r3, [r7, #24]
      break;
 8004f14:	e10e      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f16:	4b8d      	ldr	r3, [pc, #564]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f18:	61bb      	str	r3, [r7, #24]
      break;
 8004f1a:	e10b      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f1e:	61bb      	str	r3, [r7, #24]
      break;
 8004f20:	e108      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f22:	4b88      	ldr	r3, [pc, #544]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f2c:	4b85      	ldr	r3, [pc, #532]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f38:	4b82      	ldr	r3, [pc, #520]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f42:	4b80      	ldr	r3, [pc, #512]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80e1 	beq.w	8005128 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f000 8083 	beq.w	8005074 <HAL_RCC_GetSysClockFreq+0x204>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f200 80a1 	bhi.w	80050b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x114>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d056      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f82:	e099      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f84:	4b6f      	ldr	r3, [pc, #444]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02d      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f90:	4b6c      	ldr	r3, [pc, #432]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b62      	ldr	r3, [pc, #392]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fea:	e087      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005158 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b51      	ldr	r3, [pc, #324]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005012:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800502e:	e065      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2ec>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b40      	ldr	r3, [pc, #256]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a02 	vldr	s12, [r7, #8]
 8005056:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005072:	e043      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005160 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b2f      	ldr	r3, [pc, #188]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a02 	vldr	s12, [r7, #8]
 800509a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050b6:	e021      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800515c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	ed97 6a02 	vldr	s12, [r7, #8]
 80050de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005154 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005100:	0a5b      	lsrs	r3, r3, #9
 8005102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005106:	3301      	adds	r3, #1
 8005108:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005114:	edd7 6a07 	vldr	s13, [r7, #28]
 8005118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005120:	ee17 3a90 	vmov	r3, s15
 8005124:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005126:	e005      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
      break;
 800512c:	e002      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005130:	61bb      	str	r3, [r7, #24]
      break;
 8005132:	bf00      	nop
  }

  return sysclockfreq;
 8005134:	69bb      	ldr	r3, [r7, #24]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3724      	adds	r7, #36	@ 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
 8005148:	03d09000 	.word	0x03d09000
 800514c:	003d0900 	.word	0x003d0900
 8005150:	007a1200 	.word	0x007a1200
 8005154:	46000000 	.word	0x46000000
 8005158:	4c742400 	.word	0x4c742400
 800515c:	4a742400 	.word	0x4a742400
 8005160:	4af42400 	.word	0x4af42400

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800516a:	f7ff fe81 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	490f      	ldr	r1, [pc, #60]	@ (80051b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800517c:	5ccb      	ldrb	r3, [r1, r3]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005188:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005192:	5cd3      	ldrb	r3, [r2, r3]
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	fa22 f303 	lsr.w	r3, r2, r3
 800519e:	4a07      	ldr	r2, [pc, #28]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x58>)
 80051a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051a2:	4a07      	ldr	r2, [pc, #28]	@ (80051c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051a8:	4b04      	ldr	r3, [pc, #16]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x58>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	58024400 	.word	0x58024400
 80051b8:	0800b870 	.word	0x0800b870
 80051bc:	24000004 	.word	0x24000004
 80051c0:	24000000 	.word	0x24000000

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051c8:	f7ff ffcc 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	4904      	ldr	r1, [pc, #16]	@ (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	58024400 	.word	0x58024400
 80051ec:	0800b870 	.word	0x0800b870

080051f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051f4:	f7ff ffb6 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	4904      	ldr	r1, [pc, #16]	@ (8005218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005206:	5ccb      	ldrb	r3, [r1, r3]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	58024400 	.word	0x58024400
 8005218:	0800b870 	.word	0x0800b870

0800521c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b0c6      	sub	sp, #280	@ 0x118
 8005222:	af00      	add	r7, sp, #0
 8005224:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005240:	2500      	movs	r5, #0
 8005242:	ea54 0305 	orrs.w	r3, r4, r5
 8005246:	d049      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800524e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005252:	d02f      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005258:	d828      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800525a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800525e:	d01a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005264:	d822      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800526e:	d007      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005270:	e01c      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005272:	4bab      	ldr	r3, [pc, #684]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	4aaa      	ldr	r2, [pc, #680]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800527e:	e01a      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005284:	3308      	adds	r3, #8
 8005286:	2102      	movs	r1, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fa49 	bl	8007720 <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005294:	e00f      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	3328      	adds	r3, #40	@ 0x28
 800529c:	2102      	movs	r1, #2
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 faf0 	bl	8007884 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052aa:	e004      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052b2:	e000      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052be:	4b98      	ldr	r3, [pc, #608]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052cc:	4a94      	ldr	r2, [pc, #592]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80052d2:	e003      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052e8:	f04f 0900 	mov.w	r9, #0
 80052ec:	ea58 0309 	orrs.w	r3, r8, r9
 80052f0:	d047      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d82a      	bhi.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005319 	.word	0x08005319
 8005308:	08005327 	.word	0x08005327
 800530c:	0800533d 	.word	0x0800533d
 8005310:	0800535b 	.word	0x0800535b
 8005314:	0800535b 	.word	0x0800535b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005318:	4b81      	ldr	r3, [pc, #516]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	4a80      	ldr	r2, [pc, #512]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800531e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005324:	e01a      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	3308      	adds	r3, #8
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f002 f9f6 	bl	8007720 <RCCEx_PLL2_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800533a:	e00f      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	3328      	adds	r3, #40	@ 0x28
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f002 fa9d 	bl	8007884 <RCCEx_PLL3_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005350:	e004      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005358:	e000      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800535a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800535c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005364:	4b6e      	ldr	r3, [pc, #440]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005368:	f023 0107 	bic.w	r1, r3, #7
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005374:	430b      	orrs	r3, r1
 8005376:	6513      	str	r3, [r2, #80]	@ 0x50
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800537e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800538e:	f04f 0b00 	mov.w	fp, #0
 8005392:	ea5a 030b 	orrs.w	r3, sl, fp
 8005396:	d05b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80053a4:	d03b      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80053a6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80053aa:	d834      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b0:	d037      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80053b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b6:	d82e      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053bc:	d033      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80053be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053c2:	d828      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c8:	d01a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80053ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ce:	d822      	bhi.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053d8:	d007      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80053da:	e01c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053dc:	4b50      	ldr	r3, [pc, #320]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053e8:	e01e      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	3308      	adds	r3, #8
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 f994 	bl	8007720 <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053fe:	e013      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	3328      	adds	r3, #40	@ 0x28
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f002 fa3b 	bl	8007884 <RCCEx_PLL3_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005414:	e008      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800541c:	e004      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005430:	4b3b      	ldr	r3, [pc, #236]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005434:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005440:	4a37      	ldr	r2, [pc, #220]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005442:	430b      	orrs	r3, r1
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800544c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800545c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005466:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d05d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005478:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800547c:	d03b      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800547e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005482:	d834      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005488:	d037      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800548a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800548e:	d82e      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005490:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005494:	d033      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005496:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800549a:	d828      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800549c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a0:	d01a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80054a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a6:	d822      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b0:	d007      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80054b2:	e01c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a19      	ldr	r2, [pc, #100]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01e      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f928 	bl	8007720 <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054d6:	e013      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 f9cf 	bl	8007884 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e008      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054f4:	e004      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10d      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005518:	4a01      	ldr	r2, [pc, #4]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6593      	str	r3, [r2, #88]	@ 0x58
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005538:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005542:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d03a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	2b30      	cmp	r3, #48	@ 0x30
 8005554:	d01f      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005556:	2b30      	cmp	r3, #48	@ 0x30
 8005558:	d819      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d00c      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800555e:	2b20      	cmp	r3, #32
 8005560:	d815      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d019      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005566:	2b10      	cmp	r3, #16
 8005568:	d111      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556a:	4baa      	ldr	r3, [pc, #680]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4aa9      	ldr	r2, [pc, #676]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005576:	e011      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	3308      	adds	r3, #8
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f002 f8cd 	bl	8007720 <RCCEx_PLL2_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005594:	e002      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800559a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800559c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	4a98      	ldr	r2, [pc, #608]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80055ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d051      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ec:	d035      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80055ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055f2:	d82e      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055f8:	d031      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80055fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055fe:	d828      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005604:	d01a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560a:	d822      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005614:	d007      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005616:	e01c      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005618:	4b7e      	ldr	r3, [pc, #504]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4a7d      	ldr	r2, [pc, #500]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800561e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005624:	e01c      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562a:	3308      	adds	r3, #8
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f002 f876 	bl	8007720 <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005640:	3328      	adds	r3, #40	@ 0x28
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f002 f91d 	bl	8007884 <RCCEx_PLL3_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005668:	4b6a      	ldr	r3, [pc, #424]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005676:	4a67      	ldr	r2, [pc, #412]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005678:	430b      	orrs	r3, r1
 800567a:	6513      	str	r3, [r2, #80]	@ 0x50
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005682:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005696:	2300      	movs	r3, #0
 8005698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800569c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d053      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056b0:	d033      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80056b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056b6:	d82c      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056bc:	d02f      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80056be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056c2:	d826      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056c8:	d02b      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80056ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056ce:	d820      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056d4:	d012      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80056d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056da:	d81a      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d022      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d115      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ea:	3308      	adds	r3, #8
 80056ec:	2101      	movs	r1, #1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 f816 	bl	8007720 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056fa:	e015      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005700:	3328      	adds	r3, #40	@ 0x28
 8005702:	2101      	movs	r1, #1
 8005704:	4618      	mov	r0, r3
 8005706:	f002 f8bd 	bl	8007884 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005710:	e00a      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005730:	4b38      	ldr	r3, [pc, #224]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005734:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573e:	4a35      	ldr	r2, [pc, #212]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005740:	430b      	orrs	r3, r1
 8005742:	6513      	str	r3, [r2, #80]	@ 0x50
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800574a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800575a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005764:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d058      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800577a:	d033      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800577c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005780:	d82c      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005786:	d02f      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578c:	d826      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800578e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005792:	d02b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005798:	d820      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800579a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800579e:	d012      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057a4:	d81a      	bhi.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d022      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ae:	d115      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	3308      	adds	r3, #8
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 ffb1 	bl	8007720 <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057c4:	e015      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	3328      	adds	r3, #40	@ 0x28
 80057cc:	2101      	movs	r1, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f858 	bl	8007884 <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057da:	e00a      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057e2:	e006      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057e4:	bf00      	nop
 80057e6:	e004      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10e      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057fa:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800580a:	4a02      	ldr	r2, [pc, #8]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800580c:	430b      	orrs	r3, r1
 800580e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800581c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800582c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005836:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800583a:	460b      	mov	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	d037      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800584a:	d00e      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005850:	d816      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585a:	d111      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585c:	4bc4      	ldr	r3, [pc, #784]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	4ac3      	ldr	r2, [pc, #780]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005868:	e00f      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	3308      	adds	r3, #8
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f001 ff54 	bl	8007720 <RCCEx_PLL2_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800587e:	e004      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005892:	4bb7      	ldr	r3, [pc, #732]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005896:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a0:	4ab3      	ldr	r2, [pc, #716]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80058a6:	e003      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80058bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d039      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d81c      	bhi.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80058da:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	080058f1 	.word	0x080058f1
 80058e8:	080058ff 	.word	0x080058ff
 80058ec:	0800591d 	.word	0x0800591d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f0:	4b9f      	ldr	r3, [pc, #636]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058fc:	e00f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005902:	3308      	adds	r3, #8
 8005904:	2102      	movs	r1, #2
 8005906:	4618      	mov	r0, r3
 8005908:	f001 ff0a 	bl	8007720 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005912:	e004      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005926:	4b92      	ldr	r3, [pc, #584]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592a:	f023 0103 	bic.w	r1, r3, #3
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005934:	4a8e      	ldr	r2, [pc, #568]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005936:	430b      	orrs	r3, r1
 8005938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800593a:	e003      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800595a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	f000 8099 	beq.w	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005966:	4b83      	ldr	r3, [pc, #524]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a82      	ldr	r2, [pc, #520]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005972:	f7fb fdd5 	bl	8001520 <HAL_GetTick>
 8005976:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800597a:	e00b      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fb fdd0 	bl	8001520 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	@ 0x64
 800598a:	d903      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005992:	e005      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005994:	4b77      	ldr	r3, [pc, #476]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ed      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80059a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d173      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059a8:	4b71      	ldr	r3, [pc, #452]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059b4:	4053      	eors	r3, r2
 80059b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d015      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059be:	4b6c      	ldr	r3, [pc, #432]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059ca:	4b69      	ldr	r3, [pc, #420]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ce:	4a68      	ldr	r2, [pc, #416]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d6:	4b66      	ldr	r3, [pc, #408]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059da:	4a65      	ldr	r2, [pc, #404]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059e2:	4a63      	ldr	r2, [pc, #396]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	d118      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fb fd92 	bl	8001520 <HAL_GetTick>
 80059fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a00:	e00d      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fb fd8d 	bl	8001520 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d903      	bls.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005a1c:	e005      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a1e:	4b54      	ldr	r3, [pc, #336]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0eb      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d129      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a42:	d10e      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005a44:	4b4a      	ldr	r3, [pc, #296]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a54:	091a      	lsrs	r2, r3, #4
 8005a56:	4b48      	ldr	r3, [pc, #288]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	4a45      	ldr	r2, [pc, #276]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6113      	str	r3, [r2, #16]
 8005a60:	e005      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005a62:	4b43      	ldr	r3, [pc, #268]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	4a42      	ldr	r2, [pc, #264]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a6c:	6113      	str	r3, [r2, #16]
 8005a6e:	4b40      	ldr	r3, [pc, #256]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a84:	e008      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f002 0301 	and.w	r3, r2, #1
 8005aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005aae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f000 808f 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ac0:	2b28      	cmp	r3, #40	@ 0x28
 8005ac2:	d871      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005bb1 	.word	0x08005bb1
 8005ad0:	08005ba9 	.word	0x08005ba9
 8005ad4:	08005ba9 	.word	0x08005ba9
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005ba9 	.word	0x08005ba9
 8005aec:	08005b7d 	.word	0x08005b7d
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005ba9 	.word	0x08005ba9
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005b93 	.word	0x08005b93
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005ba9 	.word	0x08005ba9
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005ba9 	.word	0x08005ba9
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005ba9 	.word	0x08005ba9
 8005b5c:	08005ba9 	.word	0x08005ba9
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	58024400 	.word	0x58024400
 8005b74:	58024800 	.word	0x58024800
 8005b78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b80:	3308      	adds	r3, #8
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 fdcb 	bl	8007720 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b90:	e00f      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	3328      	adds	r3, #40	@ 0x28
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fe72 	bl	8007884 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bba:	4bbf      	ldr	r3, [pc, #764]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bc8:	4abb      	ldr	r2, [pc, #748]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bce:	e003      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f002 0302 	and.w	r3, r2, #2
 8005be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d041      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d824      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c55 	.word	0x08005c55
 8005c0c:	08005c21 	.word	0x08005c21
 8005c10:	08005c37 	.word	0x08005c37
 8005c14:	08005c55 	.word	0x08005c55
 8005c18:	08005c55 	.word	0x08005c55
 8005c1c:	08005c55 	.word	0x08005c55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c24:	3308      	adds	r3, #8
 8005c26:	2101      	movs	r1, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fd79 	bl	8007720 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c34:	e00f      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3a:	3328      	adds	r3, #40	@ 0x28
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 fe20 	bl	8007884 <RCCEx_PLL3_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c4a:	e004      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c5e:	4b96      	ldr	r3, [pc, #600]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	f023 0107 	bic.w	r1, r3, #7
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6c:	4a92      	ldr	r2, [pc, #584]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 0304 	and.w	r3, r2, #4
 8005c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d044      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	d825      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005cc9 	.word	0x08005cc9
 8005cb8:	08005cdf 	.word	0x08005cdf
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cfd 	.word	0x08005cfd
 8005cc4:	08005cfd 	.word	0x08005cfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 fd25 	bl	8007720 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cdc:	e00f      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	3328      	adds	r3, #40	@ 0x28
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fdcc 	bl	8007884 <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d06:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0a:	f023 0107 	bic.w	r1, r3, #7
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	4a68      	ldr	r2, [pc, #416]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f002 0320 	and.w	r3, r2, #32
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d055      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d52:	d033      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d58:	d82c      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d5e:	d02f      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d64:	d826      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d6a:	d02b      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005d6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d70:	d820      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d76:	d012      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7c:	d81a      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d022      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d86:	d115      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fcc5 	bl	8007720 <RCCEx_PLL2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d9c:	e015      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	3328      	adds	r3, #40	@ 0x28
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 fd6c 	bl	8007884 <RCCEx_PLL3_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005db2:	e00a      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dba:	e006      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005dbc:	bf00      	nop
 8005dbe:	e004      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005dc0:	bf00      	nop
 8005dc2:	e002      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005dc4:	bf00      	nop
 8005dc6:	e000      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10b      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd2:	4b39      	ldr	r3, [pc, #228]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de2:	4a35      	ldr	r2, [pc, #212]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005de8:	e003      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d058      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e1e:	d033      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005e20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e24:	d82c      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2a:	d02f      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e30:	d826      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e36:	d02b      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e3c:	d820      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e42:	d012      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e48:	d81a      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d022      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	d115      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fc5f 	bl	8007720 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e68:	e015      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	2102      	movs	r1, #2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fd06 	bl	8007884 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e86:	e006      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e88:	bf00      	nop
 8005e8a:	e004      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e002      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10e      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eae:	4a02      	ldr	r2, [pc, #8]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005eb6:	bf00      	nop
 8005eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d055      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ef0:	d033      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005ef2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ef6:	d82c      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005efc:	d02f      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d826      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005f04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f08:	d02b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005f0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005f0e:	d820      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f14:	d012      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f1a:	d81a      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d022      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f24:	d115      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fbf6 	bl	8007720 <RCCEx_PLL2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f3a:	e015      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	3328      	adds	r3, #40	@ 0x28
 8005f42:	2102      	movs	r1, #2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fc9d 	bl	8007884 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f50:	e00a      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f70:	4ba0      	ldr	r3, [pc, #640]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f80:	4a9c      	ldr	r2, [pc, #624]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f002 0308 	and.w	r3, r2, #8
 8005f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005fa6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d01e      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	3328      	adds	r3, #40	@ 0x28
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 fc5c 	bl	8007884 <RCCEx_PLL3_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005fd8:	4b86      	ldr	r3, [pc, #536]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fe8:	4a82      	ldr	r2, [pc, #520]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f002 0310 	and.w	r3, r2, #16
 8005ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006004:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006008:	460b      	mov	r3, r1
 800600a:	4313      	orrs	r3, r2
 800600c:	d01e      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800601a:	d10c      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	3328      	adds	r3, #40	@ 0x28
 8006022:	2102      	movs	r1, #2
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fc2d 	bl	8007884 <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006036:	4b6f      	ldr	r3, [pc, #444]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006046:	4a6b      	ldr	r2, [pc, #428]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800605a:	2300      	movs	r3, #0
 800605c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800605e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d03e      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006074:	d022      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800607a:	d81b      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006084:	d00b      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006086:	e015      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608c:	3308      	adds	r3, #8
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fb45 	bl	8007720 <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800609c:	e00f      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a2:	3328      	adds	r3, #40	@ 0x28
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fbec 	bl	8007884 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060b2:	e004      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c6:	4b4b      	ldr	r3, [pc, #300]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060d6:	4a47      	ldr	r2, [pc, #284]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	6593      	str	r3, [r2, #88]	@ 0x58
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80060f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80060f4:	2300      	movs	r3, #0
 80060f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80060f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060fc:	460b      	mov	r3, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800610e:	d01f      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006114:	d818      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611a:	d003      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800611c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006120:	d007      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006122:	e011      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4b33      	ldr	r3, [pc, #204]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	4a32      	ldr	r2, [pc, #200]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006130:	e00f      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	3328      	adds	r3, #40	@ 0x28
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fba2 	bl	8007884 <RCCEx_PLL3_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006146:	e004      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616a:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006186:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006188:	2300      	movs	r3, #0
 800618a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800618c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006190:	460b      	mov	r3, r1
 8006192:	4313      	orrs	r3, r2
 8006194:	d034      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a4:	d007      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80061a6:	e011      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	4a11      	ldr	r2, [pc, #68]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061b4:	e00e      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	3308      	adds	r3, #8
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 faae 	bl	8007720 <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ea:	4a02      	ldr	r2, [pc, #8]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80061f2:	bf00      	nop
 80061f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800620c:	663b      	str	r3, [r7, #96]	@ 0x60
 800620e:	2300      	movs	r3, #0
 8006210:	667b      	str	r3, [r7, #100]	@ 0x64
 8006212:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	d00c      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	3328      	adds	r3, #40	@ 0x28
 8006222:	2102      	movs	r1, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fb2d 	bl	8007884 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006242:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006244:	2300      	movs	r3, #0
 8006246:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006248:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d036      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800625c:	d018      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800625e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006262:	d811      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006268:	d014      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800626a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626e:	d80b      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d011      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006278:	d106      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627a:	4bb7      	ldr	r3, [pc, #732]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4ab6      	ldr	r2, [pc, #728]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006286:	e008      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006290:	bf00      	nop
 8006292:	e002      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a2:	4bad      	ldr	r3, [pc, #692]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b0:	4aa9      	ldr	r2, [pc, #676]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80062cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ce:	2300      	movs	r3, #0
 80062d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	4a9b      	ldr	r2, [pc, #620]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80062fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062fe:	2300      	movs	r3, #0
 8006300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006302:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800630c:	4b92      	ldr	r3, [pc, #584]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800631a:	4a8f      	ldr	r2, [pc, #572]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800632c:	643b      	str	r3, [r7, #64]	@ 0x40
 800632e:	2300      	movs	r3, #0
 8006330:	647b      	str	r3, [r7, #68]	@ 0x44
 8006332:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006336:	460b      	mov	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800633c:	4b86      	ldr	r3, [pc, #536]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4a85      	ldr	r2, [pc, #532]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006342:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006346:	6113      	str	r3, [r2, #16]
 8006348:	4b83      	ldr	r3, [pc, #524]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800634a:	6919      	ldr	r1, [r3, #16]
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006354:	4a80      	ldr	r2, [pc, #512]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006356:	430b      	orrs	r3, r1
 8006358:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006368:	2300      	movs	r3, #0
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800636c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006376:	4b78      	ldr	r3, [pc, #480]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006384:	4a74      	ldr	r2, [pc, #464]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006386:	430b      	orrs	r3, r1
 8006388:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
 8006398:	2300      	movs	r3, #0
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
 800639c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b6:	4a68      	ldr	r2, [pc, #416]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	2100      	movs	r1, #0
 80063c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d011      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	3308      	adds	r3, #8
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 f99d 	bl	8007720 <RCCEx_PLL2_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80063ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	2100      	movs	r1, #0
 8006406:	6239      	str	r1, [r7, #32]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
 800640e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006412:	460b      	mov	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	d011      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	3308      	adds	r3, #8
 800641e:	2101      	movs	r1, #1
 8006420:	4618      	mov	r0, r3
 8006422:	f001 f97d 	bl	8007720 <RCCEx_PLL2_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800642c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006438:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	2100      	movs	r1, #0
 8006446:	61b9      	str	r1, [r7, #24]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d011      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	3308      	adds	r3, #8
 800645e:	2102      	movs	r1, #2
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f95d 	bl	8007720 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800646c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	2100      	movs	r1, #0
 8006486:	6139      	str	r1, [r7, #16]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d011      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	3328      	adds	r3, #40	@ 0x28
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f9ef 	bl	8007884 <RCCEx_PLL3_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80064ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	2100      	movs	r1, #0
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d011      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	3328      	adds	r3, #40	@ 0x28
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 f9cf 	bl	8007884 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80064ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	2100      	movs	r1, #0
 8006506:	6039      	str	r1, [r7, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	607b      	str	r3, [r7, #4]
 800650e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d011      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	3328      	adds	r3, #40	@ 0x28
 800651e:	2102      	movs	r1, #2
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f9af 	bl	8007884 <RCCEx_PLL3_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800652c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800653c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
}
 800654a:	4618      	mov	r0, r3
 800654c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006550:	46bd      	mov	sp, r7
 8006552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006556:	bf00      	nop
 8006558:	58024400 	.word	0x58024400

0800655c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b090      	sub	sp, #64	@ 0x40
 8006560:	af00      	add	r7, sp, #0
 8006562:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800656e:	430b      	orrs	r3, r1
 8006570:	f040 8094 	bne.w	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006574:	4b9b      	ldr	r3, [pc, #620]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b04      	cmp	r3, #4
 8006582:	f200 8087 	bhi.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a1 	.word	0x080065a1
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065f1 	.word	0x080065f1
 8006598:	0800668d 	.word	0x0800668d
 800659c:	08006619 	.word	0x08006619
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065a0:	4b90      	ldr	r3, [pc, #576]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ac:	d108      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 ff62 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065bc:	f000 bc93 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c4:	f000 bc8f 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065c8:	4b86      	ldr	r3, [pc, #536]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065d4:	d108      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d6:	f107 0318 	add.w	r3, r7, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fca6 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e4:	f000 bc7f 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ec:	f000 bc7b 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065f0:	4b7c      	ldr	r3, [pc, #496]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fc:	d108      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fde6 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660c:	f000 bc6b 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	f000 bc67 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006618:	4b72      	ldr	r3, [pc, #456]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006622:	4b70      	ldr	r3, [pc, #448]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006634:	4b6b      	ldr	r3, [pc, #428]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	4a6a      	ldr	r2, [pc, #424]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006646:	e01f      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006648:	4b66      	ldr	r3, [pc, #408]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006654:	d106      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665c:	d102      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800665e:	4b63      	ldr	r3, [pc, #396]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006664:	4b5f      	ldr	r3, [pc, #380]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006670:	d106      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006678:	d102      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800667a:	4b5d      	ldr	r3, [pc, #372]	@ (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006684:	f000 bc2f 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006688:	f000 bc2d 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800668c:	4b59      	ldr	r3, [pc, #356]	@ (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006690:	f000 bc29 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006698:	f000 bc25 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800669c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80066a4:	430b      	orrs	r3, r1
 80066a6:	f040 80a7 	bne.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80066aa:	4b4e      	ldr	r3, [pc, #312]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80066b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066ba:	d054      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c2:	f200 808b 	bhi.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066cc:	f000 8083 	beq.w	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066d6:	f200 8081 	bhi.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e0:	d02f      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e8:	d878      	bhi.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066f6:	d012      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80066f8:	e070      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066fa:	4b3a      	ldr	r3, [pc, #232]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006706:	d107      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800670c:	4618      	mov	r0, r3
 800670e:	f000 feb5 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006716:	e3e6      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671c:	e3e3      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800671e:	4b31      	ldr	r3, [pc, #196]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800672a:	d107      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800672c:	f107 0318 	add.w	r3, r7, #24
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fbfb 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673a:	e3d4      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006740:	e3d1      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006742:	4b28      	ldr	r3, [pc, #160]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800674a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800674e:	d107      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fd3d 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675e:	e3c2      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006764:	e3bf      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006766:	4b1f      	ldr	r3, [pc, #124]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006770:	4b1c      	ldr	r3, [pc, #112]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d10c      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800677c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006782:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	4a16      	ldr	r2, [pc, #88]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006794:	e01e      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a2:	d106      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80067a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067aa:	d102      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b0:	e010      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067be:	d106      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80067c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067c6:	d102      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067c8:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067cc:	e002      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067d2:	e388      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067d4:	e387      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067d6:	4b07      	ldr	r3, [pc, #28]	@ (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067da:	e384      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e0:	e381      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
 80067e8:	03d09000 	.word	0x03d09000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	007a1200 	.word	0x007a1200
 80067f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006800:	430b      	orrs	r3, r1
 8006802:	f040 809c 	bne.w	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006806:	4b9e      	ldr	r3, [pc, #632]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800680e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006816:	d054      	beq.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800681e:	f200 808b 	bhi.w	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006828:	f000 8083 	beq.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006832:	f200 8081 	bhi.w	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800683c:	d02f      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006844:	d878      	bhi.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006852:	d012      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006854:	e070      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006856:	4b8a      	ldr	r3, [pc, #552]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800685e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006862:	d107      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fe07 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006872:	e338      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006878:	e335      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800687a:	4b81      	ldr	r3, [pc, #516]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006888:	f107 0318 	add.w	r3, r7, #24
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fb4d 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006896:	e326      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689c:	e323      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800689e:	4b78      	ldr	r3, [pc, #480]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068aa:	d107      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fc8f 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ba:	e314      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c0:	e311      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068c2:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d10c      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80068d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068de:	4b68      	ldr	r3, [pc, #416]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	08db      	lsrs	r3, r3, #3
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	4a66      	ldr	r2, [pc, #408]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80068ea:	fa22 f303 	lsr.w	r3, r2, r3
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f0:	e01e      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068f2:	4b63      	ldr	r3, [pc, #396]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068fe:	d106      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006906:	d102      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006908:	4b5f      	ldr	r3, [pc, #380]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800690c:	e010      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800690e:	4b5c      	ldr	r3, [pc, #368]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800691a:	d106      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006924:	4b59      	ldr	r3, [pc, #356]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006928:	e002      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800692e:	e2da      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006930:	e2d9      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006932:	4b57      	ldr	r3, [pc, #348]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006936:	e2d6      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693c:	e2d3      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800693e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006942:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006946:	430b      	orrs	r3, r1
 8006948:	f040 80a7 	bne.w	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800694c:	4b4c      	ldr	r3, [pc, #304]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800694e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006950:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006954:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800695c:	d055      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006964:	f200 8096 	bhi.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800696e:	f000 8084 	beq.w	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006978:	f200 808c 	bhi.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006982:	d030      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800698a:	f200 8083 	bhi.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699a:	d012      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800699c:	e07a      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800699e:	4b38      	ldr	r3, [pc, #224]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fd63 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ba:	e294      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c0:	e291      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d0:	f107 0318 	add.w	r3, r7, #24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 faa9 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069de:	e282      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e4:	e27f      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069e6:	4b26      	ldr	r3, [pc, #152]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f2:	d107      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f4:	f107 030c 	add.w	r3, r7, #12
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fbeb 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a02:	e270      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a08:	e26d      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a14:	4b1a      	ldr	r3, [pc, #104]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d10c      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a26:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	08db      	lsrs	r3, r3, #3
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	4a14      	ldr	r2, [pc, #80]	@ (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a38:	e01e      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a3a:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a50:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a54:	e010      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a70:	e002      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a76:	e236      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a78:	e235      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a7a:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7e:	e232      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a80:	58024400 	.word	0x58024400
 8006a84:	03d09000 	.word	0x03d09000
 8006a88:	003d0900 	.word	0x003d0900
 8006a8c:	007a1200 	.word	0x007a1200
 8006a90:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a98:	e225      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	f040 8085 	bne.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006aa8:	4b9c      	ldr	r3, [pc, #624]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ab8:	d06b      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ac0:	d874      	bhi.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ac8:	d056      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ad0:	d86c      	bhi.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ad8:	d03b      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ae0:	d864      	bhi.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae8:	d021      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af0:	d85c      	bhi.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006afe:	d004      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006b00:	e054      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b02:	f7fe fb5f 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 8006b06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b08:	e1ed      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b0a:	4b84      	ldr	r3, [pc, #528]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b16:	d107      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b18:	f107 0318 	add.w	r3, r7, #24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fa05 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b26:	e1de      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b2c:	e1db      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3a:	d107      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fb47 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4a:	e1cc      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b50:	e1c9      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b52:	4b72      	ldr	r3, [pc, #456]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	08db      	lsrs	r3, r3, #3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	4a6d      	ldr	r2, [pc, #436]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b70:	e1b9      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b76:	e1b6      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b78:	4b68      	ldr	r3, [pc, #416]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b84:	d102      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006b86:	4b67      	ldr	r3, [pc, #412]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b8a:	e1ac      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b90:	e1a9      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b92:	4b62      	ldr	r3, [pc, #392]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b9e:	d102      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006ba0:	4b61      	ldr	r3, [pc, #388]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba4:	e19f      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006baa:	e19c      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb0:	e199      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	d173      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006bbe:	4b57      	ldr	r3, [pc, #348]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bc6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bce:	d02f      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bd6:	d863      	bhi.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be4:	d012      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006be6:	e05b      	b.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006be8:	4b4c      	ldr	r3, [pc, #304]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf6:	f107 0318 	add.w	r3, r7, #24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f996 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c04:	e16f      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c0a:	e16c      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c0c:	4b43      	ldr	r3, [pc, #268]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fad8 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c28:	e15d      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c2e:	e15a      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c30:	4b3a      	ldr	r3, [pc, #232]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c3a:	4b38      	ldr	r3, [pc, #224]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c4c:	4b33      	ldr	r3, [pc, #204]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	08db      	lsrs	r3, r3, #3
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c5e:	e01e      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c60:	4b2e      	ldr	r3, [pc, #184]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c74:	d102      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c76:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7a:	e010      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c7c:	4b27      	ldr	r3, [pc, #156]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c88:	d106      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c90:	d102      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c92:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c9c:	e123      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c9e:	e122      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e11f      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006caa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	d13c      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d012      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006cca:	e023      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ccc:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cd8:	d107      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fbcc 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce8:	e0fd      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cee:	e0fa      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cfe:	f107 0318 	add.w	r3, r7, #24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f912 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d0c:	e0eb      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d12:	e0e8      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d18:	e0e5      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	03d09000 	.word	0x03d09000
 8006d24:	003d0900 	.word	0x003d0900
 8006d28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d30:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006d34:	430b      	orrs	r3, r1
 8006d36:	f040 8085 	bne.w	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006d42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d4a:	d06b      	beq.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d52:	d874      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5a:	d056      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d62:	d86c      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d6a:	d03b      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d72:	d864      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7a:	d021      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d82:	d85c      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d90:	d004      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006d92:	e054      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d94:	f000 f8b4 	bl	8006f00 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d98:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d9a:	e0a4      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d9c:	4b54      	ldr	r3, [pc, #336]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006daa:	f107 0318 	add.w	r3, r7, #24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f8bc 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db8:	e095      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	e092      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f9fe 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ddc:	e083      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de2:	e080      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de4:	4b42      	ldr	r3, [pc, #264]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e02:	e070      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e08:	e06d      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e0a:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e16:	d102      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006e18:	4b37      	ldr	r3, [pc, #220]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1c:	e063      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e22:	e060      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e24:	4b32      	ldr	r3, [pc, #200]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006e32:	4b32      	ldr	r3, [pc, #200]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e36:	e056      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3c:	e053      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e42:	e050      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e48:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	d148      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e50:	4b27      	ldr	r3, [pc, #156]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e60:	d02a      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e68:	d838      	bhi.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e76:	d00d      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006e78:	e030      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006e88:	4b1c      	ldr	r3, [pc, #112]	@ (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	e02b      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e92:	e028      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e94:	4b16      	ldr	r3, [pc, #88]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fae8 	bl	800747c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb0:	e019      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb6:	e016      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec6:	f107 0318 	add.w	r3, r7, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f82e 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed4:	e007      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	e001      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3740      	adds	r7, #64	@ 0x40
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	03d09000 	.word	0x03d09000
 8006ef8:	003d0900 	.word	0x003d0900
 8006efc:	007a1200 	.word	0x007a1200

08006f00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f04:	f7fe f92e 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	091b      	lsrs	r3, r3, #4
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	4904      	ldr	r1, [pc, #16]	@ (8006f28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f16:	5ccb      	ldrb	r3, [r1, r3]
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	58024400 	.word	0x58024400
 8006f28:	0800b870 	.word	0x0800b870

08006f2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b089      	sub	sp, #36	@ 0x24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f34:	4ba1      	ldr	r3, [pc, #644]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	0b1b      	lsrs	r3, r3, #12
 8006f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f56:	4b99      	ldr	r3, [pc, #612]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	08db      	lsrs	r3, r3, #3
 8006f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8111 	beq.w	800719c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	f000 8083 	beq.w	8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	f200 80a1 	bhi.w	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d056      	beq.n	8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f96:	e099      	b.n	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f98:	4b88      	ldr	r3, [pc, #544]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d02d      	beq.n	8007000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fa4:	4b85      	ldr	r3, [pc, #532]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	4a84      	ldr	r2, [pc, #528]	@ (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fce:	4b7b      	ldr	r3, [pc, #492]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ffe:	e087      	b.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800700e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007012:	4b6a      	ldr	r3, [pc, #424]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007022:	ed97 6a03 	vldr	s12, [r7, #12]
 8007026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800702a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007042:	e065      	b.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007056:	4b59      	ldr	r3, [pc, #356]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007066:	ed97 6a03 	vldr	s12, [r7, #12]
 800706a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007086:	e043      	b.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	4b48      	ldr	r3, [pc, #288]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ca:	e021      	b.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b37      	ldr	r3, [pc, #220]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007110:	4b2a      	ldr	r3, [pc, #168]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007114:	0a5b      	lsrs	r3, r3, #9
 8007116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712a:	edd7 6a07 	vldr	s13, [r7, #28]
 800712e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007136:	ee17 2a90 	vmov	r2, s15
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800713e:	4b1f      	ldr	r3, [pc, #124]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	0c1b      	lsrs	r3, r3, #16
 8007144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 2a90 	vmov	r2, s15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800716c:	4b13      	ldr	r3, [pc, #76]	@ (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	0e1b      	lsrs	r3, r3, #24
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007186:	edd7 6a07 	vldr	s13, [r7, #28]
 800718a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	ee17 2a90 	vmov	r2, s15
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800719a:	e008      	b.n	80071ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	609a      	str	r2, [r3, #8]
}
 80071ae:	bf00      	nop
 80071b0:	3724      	adds	r7, #36	@ 0x24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
 80071c0:	03d09000 	.word	0x03d09000
 80071c4:	46000000 	.word	0x46000000
 80071c8:	4c742400 	.word	0x4c742400
 80071cc:	4a742400 	.word	0x4a742400
 80071d0:	4af42400 	.word	0x4af42400

080071d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b089      	sub	sp, #36	@ 0x24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ea:	0d1b      	lsrs	r3, r3, #20
 80071ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	0a1b      	lsrs	r3, r3, #8
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071fe:	4b99      	ldr	r3, [pc, #612]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8111 	beq.w	8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b02      	cmp	r3, #2
 8007226:	f000 8083 	beq.w	8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b02      	cmp	r3, #2
 800722e:	f200 80a1 	bhi.w	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d056      	beq.n	80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800723e:	e099      	b.n	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007240:	4b88      	ldr	r3, [pc, #544]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02d      	beq.n	80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800724c:	4b85      	ldr	r3, [pc, #532]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	4a84      	ldr	r2, [pc, #528]	@ (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
 800725c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b7b      	ldr	r3, [pc, #492]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007286:	ed97 6a03 	vldr	s12, [r7, #12]
 800728a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072a6:	e087      	b.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ea:	e065      	b.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b59      	ldr	r3, [pc, #356]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007312:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800732e:	e043      	b.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b48      	ldr	r3, [pc, #288]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007372:	e021      	b.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b37      	ldr	r3, [pc, #220]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800746c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	0a5b      	lsrs	r3, r3, #9
 80073be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073de:	ee17 2a90 	vmov	r2, s15
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007400:	edd7 6a07 	vldr	s13, [r7, #28]
 8007404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740c:	ee17 2a90 	vmov	r2, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007414:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743a:	ee17 2a90 	vmov	r2, s15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	bf00      	nop
 8007458:	3724      	adds	r7, #36	@ 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	03d09000 	.word	0x03d09000
 800746c:	46000000 	.word	0x46000000
 8007470:	4c742400 	.word	0x4c742400
 8007474:	4a742400 	.word	0x4a742400
 8007478:	4af42400 	.word	0x4af42400

0800747c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	@ 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007484:	4ba0      	ldr	r3, [pc, #640]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800748e:	4b9e      	ldr	r3, [pc, #632]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007498:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800749a:	4b9b      	ldr	r3, [pc, #620]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80074a4:	4b98      	ldr	r3, [pc, #608]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a8:	08db      	lsrs	r3, r3, #3
 80074aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8111 	beq.w	80076ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	f000 8083 	beq.w	80075d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	f200 80a1 	bhi.w	800761a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d056      	beq.n	8007592 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074e4:	e099      	b.n	800761a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e6:	4b88      	ldr	r3, [pc, #544]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d02d      	beq.n	800754e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074f2:	4b85      	ldr	r3, [pc, #532]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	08db      	lsrs	r3, r3, #3
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	4a83      	ldr	r2, [pc, #524]	@ (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751c:	4b7a      	ldr	r3, [pc, #488]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800751e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007530:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007548:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800754c:	e087      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007558:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800755c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007560:	4b69      	ldr	r3, [pc, #420]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007570:	ed97 6a03 	vldr	s12, [r7, #12]
 8007574:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007590:	e065      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80075a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a4:	4b58      	ldr	r3, [pc, #352]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d4:	e043      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800771c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e8:	4b47      	ldr	r3, [pc, #284]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800760c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007618:	e021      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007624:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762c:	4b36      	ldr	r3, [pc, #216]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007640:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800765e:	4b2a      	ldr	r3, [pc, #168]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	0a5b      	lsrs	r3, r3, #9
 8007664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007678:	edd7 6a07 	vldr	s13, [r7, #28]
 800767c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007684:	ee17 2a90 	vmov	r2, s15
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800768c:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	0c1b      	lsrs	r3, r3, #16
 8007692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b2:	ee17 2a90 	vmov	r2, s15
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80076ba:	4b13      	ldr	r3, [pc, #76]	@ (8007708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	0e1b      	lsrs	r3, r3, #24
 80076c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e0:	ee17 2a90 	vmov	r2, s15
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076e8:	e008      	b.n	80076fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	609a      	str	r2, [r3, #8]
}
 80076fc:	bf00      	nop
 80076fe:	3724      	adds	r7, #36	@ 0x24
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	58024400 	.word	0x58024400
 800770c:	03d09000 	.word	0x03d09000
 8007710:	46000000 	.word	0x46000000
 8007714:	4c742400 	.word	0x4c742400
 8007718:	4a742400 	.word	0x4a742400
 800771c:	4af42400 	.word	0x4af42400

08007720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800772e:	4b53      	ldr	r3, [pc, #332]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d101      	bne.n	800773e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e099      	b.n	8007872 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800773e:	4b4f      	ldr	r3, [pc, #316]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a4e      	ldr	r2, [pc, #312]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007744:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774a:	f7f9 fee9 	bl	8001520 <HAL_GetTick>
 800774e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007750:	e008      	b.n	8007764 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007752:	f7f9 fee5 	bl	8001520 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e086      	b.n	8007872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007764:	4b45      	ldr	r3, [pc, #276]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f0      	bne.n	8007752 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007770:	4b42      	ldr	r3, [pc, #264]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	031b      	lsls	r3, r3, #12
 800777e:	493f      	ldr	r1, [pc, #252]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	628b      	str	r3, [r1, #40]	@ 0x28
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	3b01      	subs	r3, #1
 800778a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	3b01      	subs	r3, #1
 8007794:	025b      	lsls	r3, r3, #9
 8007796:	b29b      	uxth	r3, r3
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	3b01      	subs	r3, #1
 80077a0:	041b      	lsls	r3, r3, #16
 80077a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	061b      	lsls	r3, r3, #24
 80077b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077b4:	4931      	ldr	r1, [pc, #196]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077ba:	4b30      	ldr	r3, [pc, #192]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	492d      	ldr	r1, [pc, #180]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077cc:	4b2b      	ldr	r3, [pc, #172]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	f023 0220 	bic.w	r2, r3, #32
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	4928      	ldr	r1, [pc, #160]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077de:	4b27      	ldr	r3, [pc, #156]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	4a26      	ldr	r2, [pc, #152]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077e4:	f023 0310 	bic.w	r3, r3, #16
 80077e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ea:	4b24      	ldr	r3, [pc, #144]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ee:	4b24      	ldr	r3, [pc, #144]	@ (8007880 <RCCEx_PLL2_Config+0x160>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	69d2      	ldr	r2, [r2, #28]
 80077f6:	00d2      	lsls	r2, r2, #3
 80077f8:	4920      	ldr	r1, [pc, #128]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077fe:	4b1f      	ldr	r3, [pc, #124]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007804:	f043 0310 	orr.w	r3, r3, #16
 8007808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007810:	4b1a      	ldr	r3, [pc, #104]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	4a19      	ldr	r2, [pc, #100]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800781a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800781c:	e00f      	b.n	800783e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d106      	bne.n	8007832 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007824:	4b15      	ldr	r3, [pc, #84]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007828:	4a14      	ldr	r2, [pc, #80]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 800782a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007830:	e005      	b.n	800783e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007832:	4b12      	ldr	r3, [pc, #72]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a11      	ldr	r2, [pc, #68]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800783c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800783e:	4b0f      	ldr	r3, [pc, #60]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a0e      	ldr	r2, [pc, #56]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784a:	f7f9 fe69 	bl	8001520 <HAL_GetTick>
 800784e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007850:	e008      	b.n	8007864 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007852:	f7f9 fe65 	bl	8001520 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e006      	b.n	8007872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <RCCEx_PLL2_Config+0x15c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	58024400 	.word	0x58024400
 8007880:	ffff0007 	.word	0xffff0007

08007884 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007892:	4b53      	ldr	r3, [pc, #332]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	2b03      	cmp	r3, #3
 800789c:	d101      	bne.n	80078a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e099      	b.n	80079d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078a2:	4b4f      	ldr	r3, [pc, #316]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a4e      	ldr	r2, [pc, #312]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ae:	f7f9 fe37 	bl	8001520 <HAL_GetTick>
 80078b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078b6:	f7f9 fe33 	bl	8001520 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e086      	b.n	80079d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c8:	4b45      	ldr	r3, [pc, #276]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078d4:	4b42      	ldr	r3, [pc, #264]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	051b      	lsls	r3, r3, #20
 80078e2:	493f      	ldr	r1, [pc, #252]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	025b      	lsls	r3, r3, #9
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	3b01      	subs	r3, #1
 8007904:	041b      	lsls	r3, r3, #16
 8007906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	3b01      	subs	r3, #1
 8007912:	061b      	lsls	r3, r3, #24
 8007914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007918:	4931      	ldr	r1, [pc, #196]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800791e:	4b30      	ldr	r3, [pc, #192]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	492d      	ldr	r1, [pc, #180]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007930:	4b2b      	ldr	r3, [pc, #172]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	4928      	ldr	r1, [pc, #160]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800793e:	4313      	orrs	r3, r2
 8007940:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007942:	4b27      	ldr	r3, [pc, #156]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a26      	ldr	r2, [pc, #152]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800794c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800794e:	4b24      	ldr	r3, [pc, #144]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007952:	4b24      	ldr	r3, [pc, #144]	@ (80079e4 <RCCEx_PLL3_Config+0x160>)
 8007954:	4013      	ands	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	69d2      	ldr	r2, [r2, #28]
 800795a:	00d2      	lsls	r2, r2, #3
 800795c:	4920      	ldr	r1, [pc, #128]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800795e:	4313      	orrs	r3, r2
 8007960:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007962:	4b1f      	ldr	r3, [pc, #124]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	4a1e      	ldr	r2, [pc, #120]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800796c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007974:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007978:	4a19      	ldr	r2, [pc, #100]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800797a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800797e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007980:	e00f      	b.n	80079a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d106      	bne.n	8007996 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007988:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800798e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007994:	e005      	b.n	80079a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007996:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	4a11      	ldr	r2, [pc, #68]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 800799c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079a2:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a0e      	ldr	r2, [pc, #56]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ae:	f7f9 fdb7 	bl	8001520 <HAL_GetTick>
 80079b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b4:	e008      	b.n	80079c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079b6:	f7f9 fdb3 	bl	8001520 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e006      	b.n	80079d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <RCCEx_PLL3_Config+0x15c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	58024400 	.word	0x58024400
 80079e4:	ffff0007 	.word	0xffff0007

080079e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e042      	b.n	8007a80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7f9 fb1b 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2224      	movs	r2, #36	@ 0x24
 8007a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 ff22 	bl	800887c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8b3 	bl	8007ba4 <UART_SetConfig>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e01b      	b.n	8007a80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 ffa1 	bl	80089c0 <UART_CheckIdleState>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	@ 0x28
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d17b      	bne.n	8007b9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <HAL_UART_Transmit+0x26>
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e074      	b.n	8007b9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2221      	movs	r2, #33	@ 0x21
 8007abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ac2:	f7f9 fd2d 	bl	8001520 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae0:	d108      	bne.n	8007af4 <HAL_UART_Transmit+0x6c>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	e003      	b.n	8007afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007afc:	e030      	b.n	8007b60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2200      	movs	r2, #0
 8007b06:	2180      	movs	r1, #128	@ 0x80
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f001 f803 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e03d      	b.n	8007b9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	3302      	adds	r3, #2
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e007      	b.n	8007b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1c8      	bne.n	8007afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2200      	movs	r2, #0
 8007b74:	2140      	movs	r1, #64	@ 0x40
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 ffcc 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e006      	b.n	8007b9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e000      	b.n	8007b9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b9a:	2302      	movs	r3, #2
  }
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba8:	b092      	sub	sp, #72	@ 0x48
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4bbe      	ldr	r3, [pc, #760]	@ (8007ecc <UART_SetConfig+0x328>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4ab3      	ldr	r2, [pc, #716]	@ (8007ed0 <UART_SetConfig+0x32c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	4baf      	ldr	r3, [pc, #700]	@ (8007ed4 <UART_SetConfig+0x330>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c20:	430b      	orrs	r3, r1
 8007c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2a:	f023 010f 	bic.w	r1, r3, #15
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4aa6      	ldr	r2, [pc, #664]	@ (8007ed8 <UART_SetConfig+0x334>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d177      	bne.n	8007d34 <UART_SetConfig+0x190>
 8007c44:	4ba5      	ldr	r3, [pc, #660]	@ (8007edc <UART_SetConfig+0x338>)
 8007c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c4c:	2b28      	cmp	r3, #40	@ 0x28
 8007c4e:	d86d      	bhi.n	8007d2c <UART_SetConfig+0x188>
 8007c50:	a201      	add	r2, pc, #4	@ (adr r2, 8007c58 <UART_SetConfig+0xb4>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007cfd 	.word	0x08007cfd
 8007c5c:	08007d2d 	.word	0x08007d2d
 8007c60:	08007d2d 	.word	0x08007d2d
 8007c64:	08007d2d 	.word	0x08007d2d
 8007c68:	08007d2d 	.word	0x08007d2d
 8007c6c:	08007d2d 	.word	0x08007d2d
 8007c70:	08007d2d 	.word	0x08007d2d
 8007c74:	08007d2d 	.word	0x08007d2d
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d2d 	.word	0x08007d2d
 8007c80:	08007d2d 	.word	0x08007d2d
 8007c84:	08007d2d 	.word	0x08007d2d
 8007c88:	08007d2d 	.word	0x08007d2d
 8007c8c:	08007d2d 	.word	0x08007d2d
 8007c90:	08007d2d 	.word	0x08007d2d
 8007c94:	08007d2d 	.word	0x08007d2d
 8007c98:	08007d0d 	.word	0x08007d0d
 8007c9c:	08007d2d 	.word	0x08007d2d
 8007ca0:	08007d2d 	.word	0x08007d2d
 8007ca4:	08007d2d 	.word	0x08007d2d
 8007ca8:	08007d2d 	.word	0x08007d2d
 8007cac:	08007d2d 	.word	0x08007d2d
 8007cb0:	08007d2d 	.word	0x08007d2d
 8007cb4:	08007d2d 	.word	0x08007d2d
 8007cb8:	08007d15 	.word	0x08007d15
 8007cbc:	08007d2d 	.word	0x08007d2d
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007d2d 	.word	0x08007d2d
 8007cd0:	08007d2d 	.word	0x08007d2d
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d1d 	.word	0x08007d1d
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d2d 	.word	0x08007d2d
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d2d 	.word	0x08007d2d
 8007cf0:	08007d2d 	.word	0x08007d2d
 8007cf4:	08007d2d 	.word	0x08007d2d
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e326      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d04:	2304      	movs	r3, #4
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e322      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e31e      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d14:	2310      	movs	r3, #16
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e31a      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e316      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d24:	2340      	movs	r3, #64	@ 0x40
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e312      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d2c:	2380      	movs	r3, #128	@ 0x80
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e30e      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a69      	ldr	r2, [pc, #420]	@ (8007ee0 <UART_SetConfig+0x33c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d130      	bne.n	8007da0 <UART_SetConfig+0x1fc>
 8007d3e:	4b67      	ldr	r3, [pc, #412]	@ (8007edc <UART_SetConfig+0x338>)
 8007d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	d826      	bhi.n	8007d98 <UART_SetConfig+0x1f4>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <UART_SetConfig+0x1ac>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e2f0      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e2ec      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e2e8      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e2e4      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e2e0      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d90:	2340      	movs	r3, #64	@ 0x40
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e2dc      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007d98:	2380      	movs	r3, #128	@ 0x80
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e2d8      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a4f      	ldr	r2, [pc, #316]	@ (8007ee4 <UART_SetConfig+0x340>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d130      	bne.n	8007e0c <UART_SetConfig+0x268>
 8007daa:	4b4c      	ldr	r3, [pc, #304]	@ (8007edc <UART_SetConfig+0x338>)
 8007dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d826      	bhi.n	8007e04 <UART_SetConfig+0x260>
 8007db6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <UART_SetConfig+0x218>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dd5 	.word	0x08007dd5
 8007dc0:	08007ddd 	.word	0x08007ddd
 8007dc4:	08007de5 	.word	0x08007de5
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e2ba      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e2b6      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007de4:	2308      	movs	r3, #8
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e2b2      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007dec:	2310      	movs	r3, #16
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e2ae      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007df4:	2320      	movs	r3, #32
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e2aa      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007dfc:	2340      	movs	r3, #64	@ 0x40
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e2a6      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e2a2      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a35      	ldr	r2, [pc, #212]	@ (8007ee8 <UART_SetConfig+0x344>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d130      	bne.n	8007e78 <UART_SetConfig+0x2d4>
 8007e16:	4b31      	ldr	r3, [pc, #196]	@ (8007edc <UART_SetConfig+0x338>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d826      	bhi.n	8007e70 <UART_SetConfig+0x2cc>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <UART_SetConfig+0x284>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e41 	.word	0x08007e41
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	08007e51 	.word	0x08007e51
 8007e34:	08007e59 	.word	0x08007e59
 8007e38:	08007e61 	.word	0x08007e61
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e284      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e280      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e50:	2308      	movs	r3, #8
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e27c      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e278      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e60:	2320      	movs	r3, #32
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e274      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e270      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e76:	e26c      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007eec <UART_SetConfig+0x348>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d142      	bne.n	8007f08 <UART_SetConfig+0x364>
 8007e82:	4b16      	ldr	r3, [pc, #88]	@ (8007edc <UART_SetConfig+0x338>)
 8007e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d838      	bhi.n	8007f00 <UART_SetConfig+0x35c>
 8007e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <UART_SetConfig+0x2f0>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ead 	.word	0x08007ead
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	08007ebd 	.word	0x08007ebd
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ef1 	.word	0x08007ef1
 8007ea8:	08007ef9 	.word	0x08007ef9
 8007eac:	2300      	movs	r3, #0
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e24e      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e24a      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e246      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e242      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ecc:	cfff69f3 	.word	0xcfff69f3
 8007ed0:	58000c00 	.word	0x58000c00
 8007ed4:	11fff4ff 	.word	0x11fff4ff
 8007ed8:	40011000 	.word	0x40011000
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	40004400 	.word	0x40004400
 8007ee4:	40004800 	.word	0x40004800
 8007ee8:	40004c00 	.word	0x40004c00
 8007eec:	40005000 	.word	0x40005000
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e22c      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ef8:	2340      	movs	r3, #64	@ 0x40
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e228      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007f00:	2380      	movs	r3, #128	@ 0x80
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e224      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4ab1      	ldr	r2, [pc, #708]	@ (80081d4 <UART_SetConfig+0x630>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d176      	bne.n	8008000 <UART_SetConfig+0x45c>
 8007f12:	4bb1      	ldr	r3, [pc, #708]	@ (80081d8 <UART_SetConfig+0x634>)
 8007f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f1a:	2b28      	cmp	r3, #40	@ 0x28
 8007f1c:	d86c      	bhi.n	8007ff8 <UART_SetConfig+0x454>
 8007f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <UART_SetConfig+0x380>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007fc9 	.word	0x08007fc9
 8007f28:	08007ff9 	.word	0x08007ff9
 8007f2c:	08007ff9 	.word	0x08007ff9
 8007f30:	08007ff9 	.word	0x08007ff9
 8007f34:	08007ff9 	.word	0x08007ff9
 8007f38:	08007ff9 	.word	0x08007ff9
 8007f3c:	08007ff9 	.word	0x08007ff9
 8007f40:	08007ff9 	.word	0x08007ff9
 8007f44:	08007fd1 	.word	0x08007fd1
 8007f48:	08007ff9 	.word	0x08007ff9
 8007f4c:	08007ff9 	.word	0x08007ff9
 8007f50:	08007ff9 	.word	0x08007ff9
 8007f54:	08007ff9 	.word	0x08007ff9
 8007f58:	08007ff9 	.word	0x08007ff9
 8007f5c:	08007ff9 	.word	0x08007ff9
 8007f60:	08007ff9 	.word	0x08007ff9
 8007f64:	08007fd9 	.word	0x08007fd9
 8007f68:	08007ff9 	.word	0x08007ff9
 8007f6c:	08007ff9 	.word	0x08007ff9
 8007f70:	08007ff9 	.word	0x08007ff9
 8007f74:	08007ff9 	.word	0x08007ff9
 8007f78:	08007ff9 	.word	0x08007ff9
 8007f7c:	08007ff9 	.word	0x08007ff9
 8007f80:	08007ff9 	.word	0x08007ff9
 8007f84:	08007fe1 	.word	0x08007fe1
 8007f88:	08007ff9 	.word	0x08007ff9
 8007f8c:	08007ff9 	.word	0x08007ff9
 8007f90:	08007ff9 	.word	0x08007ff9
 8007f94:	08007ff9 	.word	0x08007ff9
 8007f98:	08007ff9 	.word	0x08007ff9
 8007f9c:	08007ff9 	.word	0x08007ff9
 8007fa0:	08007ff9 	.word	0x08007ff9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007ff9 	.word	0x08007ff9
 8007fac:	08007ff9 	.word	0x08007ff9
 8007fb0:	08007ff9 	.word	0x08007ff9
 8007fb4:	08007ff9 	.word	0x08007ff9
 8007fb8:	08007ff9 	.word	0x08007ff9
 8007fbc:	08007ff9 	.word	0x08007ff9
 8007fc0:	08007ff9 	.word	0x08007ff9
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e1c0      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e1bc      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e1b8      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e1b4      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007fe8:	2320      	movs	r3, #32
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e1b0      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ff0:	2340      	movs	r3, #64	@ 0x40
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e1ac      	b.n	8008352 <UART_SetConfig+0x7ae>
 8007ff8:	2380      	movs	r3, #128	@ 0x80
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e1a8      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a75      	ldr	r2, [pc, #468]	@ (80081dc <UART_SetConfig+0x638>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d130      	bne.n	800806c <UART_SetConfig+0x4c8>
 800800a:	4b73      	ldr	r3, [pc, #460]	@ (80081d8 <UART_SetConfig+0x634>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b05      	cmp	r3, #5
 8008014:	d826      	bhi.n	8008064 <UART_SetConfig+0x4c0>
 8008016:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <UART_SetConfig+0x478>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008035 	.word	0x08008035
 8008020:	0800803d 	.word	0x0800803d
 8008024:	08008045 	.word	0x08008045
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	2300      	movs	r3, #0
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e18a      	b.n	8008352 <UART_SetConfig+0x7ae>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e186      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e182      	b.n	8008352 <UART_SetConfig+0x7ae>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e17e      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008054:	2320      	movs	r3, #32
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e17a      	b.n	8008352 <UART_SetConfig+0x7ae>
 800805c:	2340      	movs	r3, #64	@ 0x40
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e176      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e172      	b.n	8008352 <UART_SetConfig+0x7ae>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a5b      	ldr	r2, [pc, #364]	@ (80081e0 <UART_SetConfig+0x63c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d130      	bne.n	80080d8 <UART_SetConfig+0x534>
 8008076:	4b58      	ldr	r3, [pc, #352]	@ (80081d8 <UART_SetConfig+0x634>)
 8008078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	2b05      	cmp	r3, #5
 8008080:	d826      	bhi.n	80080d0 <UART_SetConfig+0x52c>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0x4e4>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e154      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e150      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e14c      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e148      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080c0:	2320      	movs	r3, #32
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e144      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080c8:	2340      	movs	r3, #64	@ 0x40
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e140      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e13c      	b.n	8008352 <UART_SetConfig+0x7ae>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a41      	ldr	r2, [pc, #260]	@ (80081e4 <UART_SetConfig+0x640>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	f040 8082 	bne.w	80081e8 <UART_SetConfig+0x644>
 80080e4:	4b3c      	ldr	r3, [pc, #240]	@ (80081d8 <UART_SetConfig+0x634>)
 80080e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ec:	2b28      	cmp	r3, #40	@ 0x28
 80080ee:	d86d      	bhi.n	80081cc <UART_SetConfig+0x628>
 80080f0:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <UART_SetConfig+0x554>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	0800819d 	.word	0x0800819d
 80080fc:	080081cd 	.word	0x080081cd
 8008100:	080081cd 	.word	0x080081cd
 8008104:	080081cd 	.word	0x080081cd
 8008108:	080081cd 	.word	0x080081cd
 800810c:	080081cd 	.word	0x080081cd
 8008110:	080081cd 	.word	0x080081cd
 8008114:	080081cd 	.word	0x080081cd
 8008118:	080081a5 	.word	0x080081a5
 800811c:	080081cd 	.word	0x080081cd
 8008120:	080081cd 	.word	0x080081cd
 8008124:	080081cd 	.word	0x080081cd
 8008128:	080081cd 	.word	0x080081cd
 800812c:	080081cd 	.word	0x080081cd
 8008130:	080081cd 	.word	0x080081cd
 8008134:	080081cd 	.word	0x080081cd
 8008138:	080081ad 	.word	0x080081ad
 800813c:	080081cd 	.word	0x080081cd
 8008140:	080081cd 	.word	0x080081cd
 8008144:	080081cd 	.word	0x080081cd
 8008148:	080081cd 	.word	0x080081cd
 800814c:	080081cd 	.word	0x080081cd
 8008150:	080081cd 	.word	0x080081cd
 8008154:	080081cd 	.word	0x080081cd
 8008158:	080081b5 	.word	0x080081b5
 800815c:	080081cd 	.word	0x080081cd
 8008160:	080081cd 	.word	0x080081cd
 8008164:	080081cd 	.word	0x080081cd
 8008168:	080081cd 	.word	0x080081cd
 800816c:	080081cd 	.word	0x080081cd
 8008170:	080081cd 	.word	0x080081cd
 8008174:	080081cd 	.word	0x080081cd
 8008178:	080081bd 	.word	0x080081bd
 800817c:	080081cd 	.word	0x080081cd
 8008180:	080081cd 	.word	0x080081cd
 8008184:	080081cd 	.word	0x080081cd
 8008188:	080081cd 	.word	0x080081cd
 800818c:	080081cd 	.word	0x080081cd
 8008190:	080081cd 	.word	0x080081cd
 8008194:	080081cd 	.word	0x080081cd
 8008198:	080081c5 	.word	0x080081c5
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a2:	e0d6      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081a4:	2304      	movs	r3, #4
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081aa:	e0d2      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081ac:	2308      	movs	r3, #8
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b2:	e0ce      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081b4:	2310      	movs	r3, #16
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ba:	e0ca      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081bc:	2320      	movs	r3, #32
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c2:	e0c6      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081c4:	2340      	movs	r3, #64	@ 0x40
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ca:	e0c2      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081cc:	2380      	movs	r3, #128	@ 0x80
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d2:	e0be      	b.n	8008352 <UART_SetConfig+0x7ae>
 80081d4:	40011400 	.word	0x40011400
 80081d8:	58024400 	.word	0x58024400
 80081dc:	40007800 	.word	0x40007800
 80081e0:	40007c00 	.word	0x40007c00
 80081e4:	40011800 	.word	0x40011800
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4aad      	ldr	r2, [pc, #692]	@ (80084a4 <UART_SetConfig+0x900>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d176      	bne.n	80082e0 <UART_SetConfig+0x73c>
 80081f2:	4bad      	ldr	r3, [pc, #692]	@ (80084a8 <UART_SetConfig+0x904>)
 80081f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081fa:	2b28      	cmp	r3, #40	@ 0x28
 80081fc:	d86c      	bhi.n	80082d8 <UART_SetConfig+0x734>
 80081fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <UART_SetConfig+0x660>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	080082a9 	.word	0x080082a9
 8008208:	080082d9 	.word	0x080082d9
 800820c:	080082d9 	.word	0x080082d9
 8008210:	080082d9 	.word	0x080082d9
 8008214:	080082d9 	.word	0x080082d9
 8008218:	080082d9 	.word	0x080082d9
 800821c:	080082d9 	.word	0x080082d9
 8008220:	080082d9 	.word	0x080082d9
 8008224:	080082b1 	.word	0x080082b1
 8008228:	080082d9 	.word	0x080082d9
 800822c:	080082d9 	.word	0x080082d9
 8008230:	080082d9 	.word	0x080082d9
 8008234:	080082d9 	.word	0x080082d9
 8008238:	080082d9 	.word	0x080082d9
 800823c:	080082d9 	.word	0x080082d9
 8008240:	080082d9 	.word	0x080082d9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082d9 	.word	0x080082d9
 800824c:	080082d9 	.word	0x080082d9
 8008250:	080082d9 	.word	0x080082d9
 8008254:	080082d9 	.word	0x080082d9
 8008258:	080082d9 	.word	0x080082d9
 800825c:	080082d9 	.word	0x080082d9
 8008260:	080082d9 	.word	0x080082d9
 8008264:	080082c1 	.word	0x080082c1
 8008268:	080082d9 	.word	0x080082d9
 800826c:	080082d9 	.word	0x080082d9
 8008270:	080082d9 	.word	0x080082d9
 8008274:	080082d9 	.word	0x080082d9
 8008278:	080082d9 	.word	0x080082d9
 800827c:	080082d9 	.word	0x080082d9
 8008280:	080082d9 	.word	0x080082d9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082d9 	.word	0x080082d9
 800828c:	080082d9 	.word	0x080082d9
 8008290:	080082d9 	.word	0x080082d9
 8008294:	080082d9 	.word	0x080082d9
 8008298:	080082d9 	.word	0x080082d9
 800829c:	080082d9 	.word	0x080082d9
 80082a0:	080082d9 	.word	0x080082d9
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e050      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e04c      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e048      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e044      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082c8:	2320      	movs	r3, #32
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e040      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e03c      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e038      	b.n	8008352 <UART_SetConfig+0x7ae>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a71      	ldr	r2, [pc, #452]	@ (80084ac <UART_SetConfig+0x908>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d130      	bne.n	800834c <UART_SetConfig+0x7a8>
 80082ea:	4b6f      	ldr	r3, [pc, #444]	@ (80084a8 <UART_SetConfig+0x904>)
 80082ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d826      	bhi.n	8008344 <UART_SetConfig+0x7a0>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x758>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008315 	.word	0x08008315
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008325 	.word	0x08008325
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008335 	.word	0x08008335
 8008310:	0800833d 	.word	0x0800833d
 8008314:	2302      	movs	r3, #2
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831a:	e01a      	b.n	8008352 <UART_SetConfig+0x7ae>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e016      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e012      	b.n	8008352 <UART_SetConfig+0x7ae>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e00e      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008334:	2320      	movs	r3, #32
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e00a      	b.n	8008352 <UART_SetConfig+0x7ae>
 800833c:	2340      	movs	r3, #64	@ 0x40
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e006      	b.n	8008352 <UART_SetConfig+0x7ae>
 8008344:	2380      	movs	r3, #128	@ 0x80
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834a:	e002      	b.n	8008352 <UART_SetConfig+0x7ae>
 800834c:	2380      	movs	r3, #128	@ 0x80
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a55      	ldr	r2, [pc, #340]	@ (80084ac <UART_SetConfig+0x908>)
 8008358:	4293      	cmp	r3, r2
 800835a:	f040 80f8 	bne.w	800854e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800835e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008362:	2b20      	cmp	r3, #32
 8008364:	dc46      	bgt.n	80083f4 <UART_SetConfig+0x850>
 8008366:	2b02      	cmp	r3, #2
 8008368:	db75      	blt.n	8008456 <UART_SetConfig+0x8b2>
 800836a:	3b02      	subs	r3, #2
 800836c:	2b1e      	cmp	r3, #30
 800836e:	d872      	bhi.n	8008456 <UART_SetConfig+0x8b2>
 8008370:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <UART_SetConfig+0x7d4>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	080083fb 	.word	0x080083fb
 800837c:	08008457 	.word	0x08008457
 8008380:	08008403 	.word	0x08008403
 8008384:	08008457 	.word	0x08008457
 8008388:	08008457 	.word	0x08008457
 800838c:	08008457 	.word	0x08008457
 8008390:	08008413 	.word	0x08008413
 8008394:	08008457 	.word	0x08008457
 8008398:	08008457 	.word	0x08008457
 800839c:	08008457 	.word	0x08008457
 80083a0:	08008457 	.word	0x08008457
 80083a4:	08008457 	.word	0x08008457
 80083a8:	08008457 	.word	0x08008457
 80083ac:	08008457 	.word	0x08008457
 80083b0:	08008423 	.word	0x08008423
 80083b4:	08008457 	.word	0x08008457
 80083b8:	08008457 	.word	0x08008457
 80083bc:	08008457 	.word	0x08008457
 80083c0:	08008457 	.word	0x08008457
 80083c4:	08008457 	.word	0x08008457
 80083c8:	08008457 	.word	0x08008457
 80083cc:	08008457 	.word	0x08008457
 80083d0:	08008457 	.word	0x08008457
 80083d4:	08008457 	.word	0x08008457
 80083d8:	08008457 	.word	0x08008457
 80083dc:	08008457 	.word	0x08008457
 80083e0:	08008457 	.word	0x08008457
 80083e4:	08008457 	.word	0x08008457
 80083e8:	08008457 	.word	0x08008457
 80083ec:	08008457 	.word	0x08008457
 80083f0:	08008449 	.word	0x08008449
 80083f4:	2b40      	cmp	r3, #64	@ 0x40
 80083f6:	d02a      	beq.n	800844e <UART_SetConfig+0x8aa>
 80083f8:	e02d      	b.n	8008456 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083fa:	f7fe fd81 	bl	8006f00 <HAL_RCCEx_GetD3PCLK1Freq>
 80083fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008400:	e02f      	b.n	8008462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fd90 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008410:	e027      	b.n	8008462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008412:	f107 0318 	add.w	r3, r7, #24
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fedc 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	e01f      	b.n	8008462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008422:	4b21      	ldr	r3, [pc, #132]	@ (80084a8 <UART_SetConfig+0x904>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800842e:	4b1e      	ldr	r3, [pc, #120]	@ (80084a8 <UART_SetConfig+0x904>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a1d      	ldr	r2, [pc, #116]	@ (80084b0 <UART_SetConfig+0x90c>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008440:	e00f      	b.n	8008462 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008442:	4b1b      	ldr	r3, [pc, #108]	@ (80084b0 <UART_SetConfig+0x90c>)
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008446:	e00c      	b.n	8008462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008448:	4b1a      	ldr	r3, [pc, #104]	@ (80084b4 <UART_SetConfig+0x910>)
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800844c:	e009      	b.n	8008462 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008454:	e005      	b.n	8008462 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 81ee 	beq.w	8008846 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	4a12      	ldr	r2, [pc, #72]	@ (80084b8 <UART_SetConfig+0x914>)
 8008470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008474:	461a      	mov	r2, r3
 8008476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008478:	fbb3 f3f2 	udiv	r3, r3, r2
 800847c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	4413      	add	r3, r2
 8008488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800848a:	429a      	cmp	r2, r3
 800848c:	d305      	bcc.n	800849a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008496:	429a      	cmp	r2, r3
 8008498:	d910      	bls.n	80084bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084a0:	e1d1      	b.n	8008846 <UART_SetConfig+0xca2>
 80084a2:	bf00      	nop
 80084a4:	40011c00 	.word	0x40011c00
 80084a8:	58024400 	.word	0x58024400
 80084ac:	58000c00 	.word	0x58000c00
 80084b0:	03d09000 	.word	0x03d09000
 80084b4:	003d0900 	.word	0x003d0900
 80084b8:	0800b880 	.word	0x0800b880
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084be:	2200      	movs	r2, #0
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	60fa      	str	r2, [r7, #12]
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c8:	4ac0      	ldr	r2, [pc, #768]	@ (80087cc <UART_SetConfig+0xc28>)
 80084ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2200      	movs	r2, #0
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	607a      	str	r2, [r7, #4]
 80084d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084de:	f7f7 ff6f 	bl	80003c0 <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	020b      	lsls	r3, r1, #8
 80084f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084f8:	0202      	lsls	r2, r0, #8
 80084fa:	6979      	ldr	r1, [r7, #20]
 80084fc:	6849      	ldr	r1, [r1, #4]
 80084fe:	0849      	lsrs	r1, r1, #1
 8008500:	2000      	movs	r0, #0
 8008502:	460c      	mov	r4, r1
 8008504:	4605      	mov	r5, r0
 8008506:	eb12 0804 	adds.w	r8, r2, r4
 800850a:	eb43 0905 	adc.w	r9, r3, r5
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	469a      	mov	sl, r3
 8008516:	4693      	mov	fp, r2
 8008518:	4652      	mov	r2, sl
 800851a:	465b      	mov	r3, fp
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f7 ff4e 	bl	80003c0 <__aeabi_uldivmod>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4613      	mov	r3, r2
 800852a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800852c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008532:	d308      	bcc.n	8008546 <UART_SetConfig+0x9a2>
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800853a:	d204      	bcs.n	8008546 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008542:	60da      	str	r2, [r3, #12]
 8008544:	e17f      	b.n	8008846 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800854c:	e17b      	b.n	8008846 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008556:	f040 80bd 	bne.w	80086d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800855a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800855e:	2b20      	cmp	r3, #32
 8008560:	dc48      	bgt.n	80085f4 <UART_SetConfig+0xa50>
 8008562:	2b00      	cmp	r3, #0
 8008564:	db7b      	blt.n	800865e <UART_SetConfig+0xaba>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d879      	bhi.n	800865e <UART_SetConfig+0xaba>
 800856a:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <UART_SetConfig+0x9cc>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085fb 	.word	0x080085fb
 8008574:	08008603 	.word	0x08008603
 8008578:	0800865f 	.word	0x0800865f
 800857c:	0800865f 	.word	0x0800865f
 8008580:	0800860b 	.word	0x0800860b
 8008584:	0800865f 	.word	0x0800865f
 8008588:	0800865f 	.word	0x0800865f
 800858c:	0800865f 	.word	0x0800865f
 8008590:	0800861b 	.word	0x0800861b
 8008594:	0800865f 	.word	0x0800865f
 8008598:	0800865f 	.word	0x0800865f
 800859c:	0800865f 	.word	0x0800865f
 80085a0:	0800865f 	.word	0x0800865f
 80085a4:	0800865f 	.word	0x0800865f
 80085a8:	0800865f 	.word	0x0800865f
 80085ac:	0800865f 	.word	0x0800865f
 80085b0:	0800862b 	.word	0x0800862b
 80085b4:	0800865f 	.word	0x0800865f
 80085b8:	0800865f 	.word	0x0800865f
 80085bc:	0800865f 	.word	0x0800865f
 80085c0:	0800865f 	.word	0x0800865f
 80085c4:	0800865f 	.word	0x0800865f
 80085c8:	0800865f 	.word	0x0800865f
 80085cc:	0800865f 	.word	0x0800865f
 80085d0:	0800865f 	.word	0x0800865f
 80085d4:	0800865f 	.word	0x0800865f
 80085d8:	0800865f 	.word	0x0800865f
 80085dc:	0800865f 	.word	0x0800865f
 80085e0:	0800865f 	.word	0x0800865f
 80085e4:	0800865f 	.word	0x0800865f
 80085e8:	0800865f 	.word	0x0800865f
 80085ec:	0800865f 	.word	0x0800865f
 80085f0:	08008651 	.word	0x08008651
 80085f4:	2b40      	cmp	r3, #64	@ 0x40
 80085f6:	d02e      	beq.n	8008656 <UART_SetConfig+0xab2>
 80085f8:	e031      	b.n	800865e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085fa:	f7fc fde3 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 80085fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008600:	e033      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008602:	f7fc fdf5 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 8008606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008608:	e02f      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fc8c 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008618:	e027      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861a:	f107 0318 	add.w	r3, r7, #24
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fdd8 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008628:	e01f      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800862a:	4b69      	ldr	r3, [pc, #420]	@ (80087d0 <UART_SetConfig+0xc2c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008636:	4b66      	ldr	r3, [pc, #408]	@ (80087d0 <UART_SetConfig+0xc2c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	08db      	lsrs	r3, r3, #3
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	4a64      	ldr	r2, [pc, #400]	@ (80087d4 <UART_SetConfig+0xc30>)
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008648:	e00f      	b.n	800866a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800864a:	4b62      	ldr	r3, [pc, #392]	@ (80087d4 <UART_SetConfig+0xc30>)
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864e:	e00c      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008650:	4b61      	ldr	r3, [pc, #388]	@ (80087d8 <UART_SetConfig+0xc34>)
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e009      	b.n	800866a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865c:	e005      	b.n	800866a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800866a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 80ea 	beq.w	8008846 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008676:	4a55      	ldr	r2, [pc, #340]	@ (80087cc <UART_SetConfig+0xc28>)
 8008678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867c:	461a      	mov	r2, r3
 800867e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008680:	fbb3 f3f2 	udiv	r3, r3, r2
 8008684:	005a      	lsls	r2, r3, #1
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	441a      	add	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869a:	2b0f      	cmp	r3, #15
 800869c:	d916      	bls.n	80086cc <UART_SetConfig+0xb28>
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a4:	d212      	bcs.n	80086cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f023 030f 	bic.w	r3, r3, #15
 80086ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086be:	4313      	orrs	r3, r2
 80086c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80086c8:	60da      	str	r2, [r3, #12]
 80086ca:	e0bc      	b.n	8008846 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086d2:	e0b8      	b.n	8008846 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086d8:	2b20      	cmp	r3, #32
 80086da:	dc4b      	bgt.n	8008774 <UART_SetConfig+0xbd0>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f2c0 8087 	blt.w	80087f0 <UART_SetConfig+0xc4c>
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	f200 8084 	bhi.w	80087f0 <UART_SetConfig+0xc4c>
 80086e8:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <UART_SetConfig+0xb4c>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	0800877b 	.word	0x0800877b
 80086f4:	08008783 	.word	0x08008783
 80086f8:	080087f1 	.word	0x080087f1
 80086fc:	080087f1 	.word	0x080087f1
 8008700:	0800878b 	.word	0x0800878b
 8008704:	080087f1 	.word	0x080087f1
 8008708:	080087f1 	.word	0x080087f1
 800870c:	080087f1 	.word	0x080087f1
 8008710:	0800879b 	.word	0x0800879b
 8008714:	080087f1 	.word	0x080087f1
 8008718:	080087f1 	.word	0x080087f1
 800871c:	080087f1 	.word	0x080087f1
 8008720:	080087f1 	.word	0x080087f1
 8008724:	080087f1 	.word	0x080087f1
 8008728:	080087f1 	.word	0x080087f1
 800872c:	080087f1 	.word	0x080087f1
 8008730:	080087ab 	.word	0x080087ab
 8008734:	080087f1 	.word	0x080087f1
 8008738:	080087f1 	.word	0x080087f1
 800873c:	080087f1 	.word	0x080087f1
 8008740:	080087f1 	.word	0x080087f1
 8008744:	080087f1 	.word	0x080087f1
 8008748:	080087f1 	.word	0x080087f1
 800874c:	080087f1 	.word	0x080087f1
 8008750:	080087f1 	.word	0x080087f1
 8008754:	080087f1 	.word	0x080087f1
 8008758:	080087f1 	.word	0x080087f1
 800875c:	080087f1 	.word	0x080087f1
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087f1 	.word	0x080087f1
 8008770:	080087e3 	.word	0x080087e3
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d037      	beq.n	80087e8 <UART_SetConfig+0xc44>
 8008778:	e03a      	b.n	80087f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800877a:	f7fc fd23 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 800877e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008780:	e03c      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008782:	f7fc fd35 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 8008786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008788:	e038      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fbcc 	bl	8006f2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008798:	e030      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd18 	bl	80071d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e028      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087aa:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <UART_SetConfig+0xc2c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d012      	beq.n	80087dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087b6:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <UART_SetConfig+0xc2c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	4a04      	ldr	r2, [pc, #16]	@ (80087d4 <UART_SetConfig+0xc30>)
 80087c2:	fa22 f303 	lsr.w	r3, r2, r3
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087c8:	e018      	b.n	80087fc <UART_SetConfig+0xc58>
 80087ca:	bf00      	nop
 80087cc:	0800b880 	.word	0x0800b880
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80087dc:	4b24      	ldr	r3, [pc, #144]	@ (8008870 <UART_SetConfig+0xccc>)
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e00c      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087e2:	4b24      	ldr	r3, [pc, #144]	@ (8008874 <UART_SetConfig+0xcd0>)
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e6:	e009      	b.n	80087fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ee:	e005      	b.n	80087fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087fa:	bf00      	nop
    }

    if (pclk != 0U)
 80087fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d021      	beq.n	8008846 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	4a1c      	ldr	r2, [pc, #112]	@ (8008878 <UART_SetConfig+0xcd4>)
 8008808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800880c:	461a      	mov	r2, r3
 800880e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008810:	fbb3 f2f2 	udiv	r2, r3, r2
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	441a      	add	r2, r3
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	2b0f      	cmp	r3, #15
 800882a:	d909      	bls.n	8008840 <UART_SetConfig+0xc9c>
 800882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008832:	d205      	bcs.n	8008840 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	b29a      	uxth	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60da      	str	r2, [r3, #12]
 800883e:	e002      	b.n	8008846 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2201      	movs	r2, #1
 800884a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2201      	movs	r2, #1
 8008852:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2200      	movs	r2, #0
 8008860:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008862:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008866:	4618      	mov	r0, r3
 8008868:	3748      	adds	r7, #72	@ 0x48
 800886a:	46bd      	mov	sp, r7
 800886c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008870:	03d09000 	.word	0x03d09000
 8008874:	003d0900 	.word	0x003d0900
 8008878:	0800b880 	.word	0x0800b880

0800887c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01a      	beq.n	8008992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800897a:	d10a      	bne.n	8008992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b098      	sub	sp, #96	@ 0x60
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089d0:	f7f8 fda6 	bl	8001520 <HAL_GetTick>
 80089d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d12f      	bne.n	8008a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ec:	2200      	movs	r2, #0
 80089ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f88e 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d022      	beq.n	8008a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e063      	b.n	8008b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d149      	bne.n	8008ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f857 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d03c      	beq.n	8008ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008abe:	61fa      	str	r2, [r7, #28]
 8008ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69b9      	ldr	r1, [r7, #24]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	617b      	str	r3, [r7, #20]
   return(result);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e012      	b.n	8008b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3758      	adds	r7, #88	@ 0x58
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b24:	e04f      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d04b      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2e:	f7f8 fcf7 	bl	8001520 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e04e      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d037      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d034      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d031      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d110      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2208      	movs	r2, #8
 8008b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f839 	bl	8008bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2208      	movs	r2, #8
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e029      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ba0:	d111      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f81f 	bl	8008bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e00f      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d0a0      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b095      	sub	sp, #84	@ 0x54
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e6      	bne.n	8008bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb8 <UART_EndRxTransfer+0xc8>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e5      	bne.n	8008c2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d118      	bne.n	8008c98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f023 0310 	bic.w	r3, r3, #16
 8008c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6979      	ldr	r1, [r7, #20]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	613b      	str	r3, [r7, #16]
   return(result);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e6      	bne.n	8008c66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cac:	bf00      	nop
 8008cae:	3754      	adds	r7, #84	@ 0x54
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	effffffe 	.word	0xeffffffe

08008cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d101      	bne.n	8008cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e027      	b.n	8008d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2224      	movs	r2, #36	@ 0x24
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0201 	bic.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e02d      	b.n	8008da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2224      	movs	r2, #36	@ 0x24
 8008d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f850 	bl	8008e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	e02d      	b.n	8008e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2224      	movs	r2, #36	@ 0x24
 8008dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0201 	bic.w	r2, r2, #1
 8008de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f812 	bl	8008e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d108      	bne.n	8008e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e48:	e031      	b.n	8008eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e4e:	2310      	movs	r3, #16
 8008e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	0e5b      	lsrs	r3, r3, #25
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	0f5b      	lsrs	r3, r3, #29
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	7b3a      	ldrb	r2, [r7, #12]
 8008e76:	4911      	ldr	r1, [pc, #68]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x94>)
 8008e78:	5c8a      	ldrb	r2, [r1, r2]
 8008e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e7e:	7b3a      	ldrb	r2, [r7, #12]
 8008e80:	490f      	ldr	r1, [pc, #60]	@ (8008ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8008e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	7b7a      	ldrb	r2, [r7, #13]
 8008e94:	4909      	ldr	r1, [pc, #36]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x94>)
 8008e96:	5c8a      	ldrb	r2, [r1, r2]
 8008e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e9c:	7b7a      	ldrb	r2, [r7, #13]
 8008e9e:	4908      	ldr	r1, [pc, #32]	@ (8008ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008eae:	bf00      	nop
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	0800b898 	.word	0x0800b898
 8008ec0:	0800b8a0 	.word	0x0800b8a0

08008ec4 <__cvt>:
 8008ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec6:	ed2d 8b02 	vpush	{d8}
 8008eca:	eeb0 8b40 	vmov.f64	d8, d0
 8008ece:	b085      	sub	sp, #20
 8008ed0:	4617      	mov	r7, r2
 8008ed2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008ed4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ed6:	ee18 2a90 	vmov	r2, s17
 8008eda:	f025 0520 	bic.w	r5, r5, #32
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	bfb6      	itet	lt
 8008ee2:	222d      	movlt	r2, #45	@ 0x2d
 8008ee4:	2200      	movge	r2, #0
 8008ee6:	eeb1 8b40 	vneglt.f64	d8, d0
 8008eea:	2d46      	cmp	r5, #70	@ 0x46
 8008eec:	460c      	mov	r4, r1
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	d004      	beq.n	8008efc <__cvt+0x38>
 8008ef2:	2d45      	cmp	r5, #69	@ 0x45
 8008ef4:	d100      	bne.n	8008ef8 <__cvt+0x34>
 8008ef6:	3401      	adds	r4, #1
 8008ef8:	2102      	movs	r1, #2
 8008efa:	e000      	b.n	8008efe <__cvt+0x3a>
 8008efc:	2103      	movs	r1, #3
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	ab02      	add	r3, sp, #8
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4622      	mov	r2, r4
 8008f08:	4633      	mov	r3, r6
 8008f0a:	eeb0 0b48 	vmov.f64	d0, d8
 8008f0e:	f000 ff23 	bl	8009d58 <_dtoa_r>
 8008f12:	2d47      	cmp	r5, #71	@ 0x47
 8008f14:	d114      	bne.n	8008f40 <__cvt+0x7c>
 8008f16:	07fb      	lsls	r3, r7, #31
 8008f18:	d50a      	bpl.n	8008f30 <__cvt+0x6c>
 8008f1a:	1902      	adds	r2, r0, r4
 8008f1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f24:	bf08      	it	eq
 8008f26:	9203      	streq	r2, [sp, #12]
 8008f28:	2130      	movs	r1, #48	@ 0x30
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d319      	bcc.n	8008f64 <__cvt+0xa0>
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f34:	1a1b      	subs	r3, r3, r0
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	b005      	add	sp, #20
 8008f3a:	ecbd 8b02 	vpop	{d8}
 8008f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f40:	2d46      	cmp	r5, #70	@ 0x46
 8008f42:	eb00 0204 	add.w	r2, r0, r4
 8008f46:	d1e9      	bne.n	8008f1c <__cvt+0x58>
 8008f48:	7803      	ldrb	r3, [r0, #0]
 8008f4a:	2b30      	cmp	r3, #48	@ 0x30
 8008f4c:	d107      	bne.n	8008f5e <__cvt+0x9a>
 8008f4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f56:	bf1c      	itt	ne
 8008f58:	f1c4 0401 	rsbne	r4, r4, #1
 8008f5c:	6034      	strne	r4, [r6, #0]
 8008f5e:	6833      	ldr	r3, [r6, #0]
 8008f60:	441a      	add	r2, r3
 8008f62:	e7db      	b.n	8008f1c <__cvt+0x58>
 8008f64:	1c5c      	adds	r4, r3, #1
 8008f66:	9403      	str	r4, [sp, #12]
 8008f68:	7019      	strb	r1, [r3, #0]
 8008f6a:	e7de      	b.n	8008f2a <__cvt+0x66>

08008f6c <__exponent>:
 8008f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	bfba      	itte	lt
 8008f72:	4249      	neglt	r1, r1
 8008f74:	232d      	movlt	r3, #45	@ 0x2d
 8008f76:	232b      	movge	r3, #43	@ 0x2b
 8008f78:	2909      	cmp	r1, #9
 8008f7a:	7002      	strb	r2, [r0, #0]
 8008f7c:	7043      	strb	r3, [r0, #1]
 8008f7e:	dd29      	ble.n	8008fd4 <__exponent+0x68>
 8008f80:	f10d 0307 	add.w	r3, sp, #7
 8008f84:	461d      	mov	r5, r3
 8008f86:	270a      	movs	r7, #10
 8008f88:	461a      	mov	r2, r3
 8008f8a:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f8e:	fb07 1416 	mls	r4, r7, r6, r1
 8008f92:	3430      	adds	r4, #48	@ 0x30
 8008f94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f98:	460c      	mov	r4, r1
 8008f9a:	2c63      	cmp	r4, #99	@ 0x63
 8008f9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	dcf1      	bgt.n	8008f88 <__exponent+0x1c>
 8008fa4:	3130      	adds	r1, #48	@ 0x30
 8008fa6:	1e94      	subs	r4, r2, #2
 8008fa8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fac:	1c41      	adds	r1, r0, #1
 8008fae:	4623      	mov	r3, r4
 8008fb0:	42ab      	cmp	r3, r5
 8008fb2:	d30a      	bcc.n	8008fca <__exponent+0x5e>
 8008fb4:	f10d 0309 	add.w	r3, sp, #9
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	42ac      	cmp	r4, r5
 8008fbc:	bf88      	it	hi
 8008fbe:	2300      	movhi	r3, #0
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	4403      	add	r3, r0
 8008fc4:	1a18      	subs	r0, r3, r0
 8008fc6:	b003      	add	sp, #12
 8008fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008fce:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008fd2:	e7ed      	b.n	8008fb0 <__exponent+0x44>
 8008fd4:	2330      	movs	r3, #48	@ 0x30
 8008fd6:	3130      	adds	r1, #48	@ 0x30
 8008fd8:	7083      	strb	r3, [r0, #2]
 8008fda:	70c1      	strb	r1, [r0, #3]
 8008fdc:	1d03      	adds	r3, r0, #4
 8008fde:	e7f1      	b.n	8008fc4 <__exponent+0x58>

08008fe0 <_printf_float>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	b08d      	sub	sp, #52	@ 0x34
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008fec:	4616      	mov	r6, r2
 8008fee:	461f      	mov	r7, r3
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	f000 fdaf 	bl	8009b54 <_localeconv_r>
 8008ff6:	f8d0 b000 	ldr.w	fp, [r0]
 8008ffa:	4658      	mov	r0, fp
 8008ffc:	f7f7 f9d8 	bl	80003b0 <strlen>
 8009000:	2300      	movs	r3, #0
 8009002:	930a      	str	r3, [sp, #40]	@ 0x28
 8009004:	f8d8 3000 	ldr.w	r3, [r8]
 8009008:	f894 9018 	ldrb.w	r9, [r4, #24]
 800900c:	6822      	ldr	r2, [r4, #0]
 800900e:	9005      	str	r0, [sp, #20]
 8009010:	3307      	adds	r3, #7
 8009012:	f023 0307 	bic.w	r3, r3, #7
 8009016:	f103 0108 	add.w	r1, r3, #8
 800901a:	f8c8 1000 	str.w	r1, [r8]
 800901e:	ed93 0b00 	vldr	d0, [r3]
 8009022:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009280 <_printf_float+0x2a0>
 8009026:	eeb0 7bc0 	vabs.f64	d7, d0
 800902a:	eeb4 7b46 	vcmp.f64	d7, d6
 800902e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009032:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009036:	dd24      	ble.n	8009082 <_printf_float+0xa2>
 8009038:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800903c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009040:	d502      	bpl.n	8009048 <_printf_float+0x68>
 8009042:	232d      	movs	r3, #45	@ 0x2d
 8009044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009048:	498f      	ldr	r1, [pc, #572]	@ (8009288 <_printf_float+0x2a8>)
 800904a:	4b90      	ldr	r3, [pc, #576]	@ (800928c <_printf_float+0x2ac>)
 800904c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009050:	bf94      	ite	ls
 8009052:	4688      	movls	r8, r1
 8009054:	4698      	movhi	r8, r3
 8009056:	f022 0204 	bic.w	r2, r2, #4
 800905a:	2303      	movs	r3, #3
 800905c:	6123      	str	r3, [r4, #16]
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	f04f 0a00 	mov.w	sl, #0
 8009064:	9700      	str	r7, [sp, #0]
 8009066:	4633      	mov	r3, r6
 8009068:	aa0b      	add	r2, sp, #44	@ 0x2c
 800906a:	4621      	mov	r1, r4
 800906c:	4628      	mov	r0, r5
 800906e:	f000 f9d1 	bl	8009414 <_printf_common>
 8009072:	3001      	adds	r0, #1
 8009074:	f040 8089 	bne.w	800918a <_printf_float+0x1aa>
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	b00d      	add	sp, #52	@ 0x34
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	eeb4 0b40 	vcmp.f64	d0, d0
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	d709      	bvc.n	80090a0 <_printf_float+0xc0>
 800908c:	ee10 3a90 	vmov	r3, s1
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfbc      	itt	lt
 8009094:	232d      	movlt	r3, #45	@ 0x2d
 8009096:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800909a:	497d      	ldr	r1, [pc, #500]	@ (8009290 <_printf_float+0x2b0>)
 800909c:	4b7d      	ldr	r3, [pc, #500]	@ (8009294 <_printf_float+0x2b4>)
 800909e:	e7d5      	b.n	800904c <_printf_float+0x6c>
 80090a0:	6863      	ldr	r3, [r4, #4]
 80090a2:	1c59      	adds	r1, r3, #1
 80090a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80090a8:	d139      	bne.n	800911e <_printf_float+0x13e>
 80090aa:	2306      	movs	r3, #6
 80090ac:	6063      	str	r3, [r4, #4]
 80090ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090b2:	2300      	movs	r3, #0
 80090b4:	6022      	str	r2, [r4, #0]
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80090ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090be:	ab09      	add	r3, sp, #36	@ 0x24
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6861      	ldr	r1, [r4, #4]
 80090c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7ff fefb 	bl	8008ec4 <__cvt>
 80090ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090d4:	4680      	mov	r8, r0
 80090d6:	d129      	bne.n	800912c <_printf_float+0x14c>
 80090d8:	1cc8      	adds	r0, r1, #3
 80090da:	db02      	blt.n	80090e2 <_printf_float+0x102>
 80090dc:	6863      	ldr	r3, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	dd41      	ble.n	8009166 <_printf_float+0x186>
 80090e2:	f1a9 0902 	sub.w	r9, r9, #2
 80090e6:	fa5f f989 	uxtb.w	r9, r9
 80090ea:	3901      	subs	r1, #1
 80090ec:	464a      	mov	r2, r9
 80090ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80090f4:	f7ff ff3a 	bl	8008f6c <__exponent>
 80090f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fa:	1813      	adds	r3, r2, r0
 80090fc:	2a01      	cmp	r2, #1
 80090fe:	4682      	mov	sl, r0
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	dc02      	bgt.n	800910a <_printf_float+0x12a>
 8009104:	6822      	ldr	r2, [r4, #0]
 8009106:	07d2      	lsls	r2, r2, #31
 8009108:	d501      	bpl.n	800910e <_printf_float+0x12e>
 800910a:	3301      	adds	r3, #1
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0a6      	beq.n	8009064 <_printf_float+0x84>
 8009116:	232d      	movs	r3, #45	@ 0x2d
 8009118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800911c:	e7a2      	b.n	8009064 <_printf_float+0x84>
 800911e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009122:	d1c4      	bne.n	80090ae <_printf_float+0xce>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1c2      	bne.n	80090ae <_printf_float+0xce>
 8009128:	2301      	movs	r3, #1
 800912a:	e7bf      	b.n	80090ac <_printf_float+0xcc>
 800912c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009130:	d9db      	bls.n	80090ea <_printf_float+0x10a>
 8009132:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009136:	d118      	bne.n	800916a <_printf_float+0x18a>
 8009138:	2900      	cmp	r1, #0
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	dd0b      	ble.n	8009156 <_printf_float+0x176>
 800913e:	6121      	str	r1, [r4, #16]
 8009140:	b913      	cbnz	r3, 8009148 <_printf_float+0x168>
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	07d0      	lsls	r0, r2, #31
 8009146:	d502      	bpl.n	800914e <_printf_float+0x16e>
 8009148:	3301      	adds	r3, #1
 800914a:	440b      	add	r3, r1
 800914c:	6123      	str	r3, [r4, #16]
 800914e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	e7db      	b.n	800910e <_printf_float+0x12e>
 8009156:	b913      	cbnz	r3, 800915e <_printf_float+0x17e>
 8009158:	6822      	ldr	r2, [r4, #0]
 800915a:	07d2      	lsls	r2, r2, #31
 800915c:	d501      	bpl.n	8009162 <_printf_float+0x182>
 800915e:	3302      	adds	r3, #2
 8009160:	e7f4      	b.n	800914c <_printf_float+0x16c>
 8009162:	2301      	movs	r3, #1
 8009164:	e7f2      	b.n	800914c <_printf_float+0x16c>
 8009166:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800916a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800916c:	4299      	cmp	r1, r3
 800916e:	db05      	blt.n	800917c <_printf_float+0x19c>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	6121      	str	r1, [r4, #16]
 8009174:	07d8      	lsls	r0, r3, #31
 8009176:	d5ea      	bpl.n	800914e <_printf_float+0x16e>
 8009178:	1c4b      	adds	r3, r1, #1
 800917a:	e7e7      	b.n	800914c <_printf_float+0x16c>
 800917c:	2900      	cmp	r1, #0
 800917e:	bfd4      	ite	le
 8009180:	f1c1 0202 	rsble	r2, r1, #2
 8009184:	2201      	movgt	r2, #1
 8009186:	4413      	add	r3, r2
 8009188:	e7e0      	b.n	800914c <_printf_float+0x16c>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	055a      	lsls	r2, r3, #21
 800918e:	d407      	bmi.n	80091a0 <_printf_float+0x1c0>
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	4642      	mov	r2, r8
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	d12a      	bne.n	80091f4 <_printf_float+0x214>
 800919e:	e76b      	b.n	8009078 <_printf_float+0x98>
 80091a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80091a4:	f240 80e0 	bls.w	8009368 <_printf_float+0x388>
 80091a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80091ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b4:	d133      	bne.n	800921e <_printf_float+0x23e>
 80091b6:	4a38      	ldr	r2, [pc, #224]	@ (8009298 <_printf_float+0x2b8>)
 80091b8:	2301      	movs	r3, #1
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	47b8      	blx	r7
 80091c0:	3001      	adds	r0, #1
 80091c2:	f43f af59 	beq.w	8009078 <_printf_float+0x98>
 80091c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091ca:	4543      	cmp	r3, r8
 80091cc:	db02      	blt.n	80091d4 <_printf_float+0x1f4>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	07d8      	lsls	r0, r3, #31
 80091d2:	d50f      	bpl.n	80091f4 <_printf_float+0x214>
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	465a      	mov	r2, fp
 80091d8:	4631      	mov	r1, r6
 80091da:	4628      	mov	r0, r5
 80091dc:	47b8      	blx	r7
 80091de:	3001      	adds	r0, #1
 80091e0:	f43f af4a 	beq.w	8009078 <_printf_float+0x98>
 80091e4:	f04f 0900 	mov.w	r9, #0
 80091e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80091ec:	f104 0a1a 	add.w	sl, r4, #26
 80091f0:	45c8      	cmp	r8, r9
 80091f2:	dc09      	bgt.n	8009208 <_printf_float+0x228>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	079b      	lsls	r3, r3, #30
 80091f8:	f100 8107 	bmi.w	800940a <_printf_float+0x42a>
 80091fc:	68e0      	ldr	r0, [r4, #12]
 80091fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009200:	4298      	cmp	r0, r3
 8009202:	bfb8      	it	lt
 8009204:	4618      	movlt	r0, r3
 8009206:	e739      	b.n	800907c <_printf_float+0x9c>
 8009208:	2301      	movs	r3, #1
 800920a:	4652      	mov	r2, sl
 800920c:	4631      	mov	r1, r6
 800920e:	4628      	mov	r0, r5
 8009210:	47b8      	blx	r7
 8009212:	3001      	adds	r0, #1
 8009214:	f43f af30 	beq.w	8009078 <_printf_float+0x98>
 8009218:	f109 0901 	add.w	r9, r9, #1
 800921c:	e7e8      	b.n	80091f0 <_printf_float+0x210>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	dc3b      	bgt.n	800929c <_printf_float+0x2bc>
 8009224:	4a1c      	ldr	r2, [pc, #112]	@ (8009298 <_printf_float+0x2b8>)
 8009226:	2301      	movs	r3, #1
 8009228:	4631      	mov	r1, r6
 800922a:	4628      	mov	r0, r5
 800922c:	47b8      	blx	r7
 800922e:	3001      	adds	r0, #1
 8009230:	f43f af22 	beq.w	8009078 <_printf_float+0x98>
 8009234:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009238:	ea59 0303 	orrs.w	r3, r9, r3
 800923c:	d102      	bne.n	8009244 <_printf_float+0x264>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	07d9      	lsls	r1, r3, #31
 8009242:	d5d7      	bpl.n	80091f4 <_printf_float+0x214>
 8009244:	9b05      	ldr	r3, [sp, #20]
 8009246:	465a      	mov	r2, fp
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	f43f af12 	beq.w	8009078 <_printf_float+0x98>
 8009254:	f04f 0a00 	mov.w	sl, #0
 8009258:	f104 0b1a 	add.w	fp, r4, #26
 800925c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925e:	425b      	negs	r3, r3
 8009260:	4553      	cmp	r3, sl
 8009262:	dc01      	bgt.n	8009268 <_printf_float+0x288>
 8009264:	464b      	mov	r3, r9
 8009266:	e794      	b.n	8009192 <_printf_float+0x1b2>
 8009268:	2301      	movs	r3, #1
 800926a:	465a      	mov	r2, fp
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af00 	beq.w	8009078 <_printf_float+0x98>
 8009278:	f10a 0a01 	add.w	sl, sl, #1
 800927c:	e7ee      	b.n	800925c <_printf_float+0x27c>
 800927e:	bf00      	nop
 8009280:	ffffffff 	.word	0xffffffff
 8009284:	7fefffff 	.word	0x7fefffff
 8009288:	0800b8a8 	.word	0x0800b8a8
 800928c:	0800b8ac 	.word	0x0800b8ac
 8009290:	0800b8b0 	.word	0x0800b8b0
 8009294:	0800b8b4 	.word	0x0800b8b4
 8009298:	0800b8b8 	.word	0x0800b8b8
 800929c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800929e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092a2:	4553      	cmp	r3, sl
 80092a4:	bfa8      	it	ge
 80092a6:	4653      	movge	r3, sl
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	4699      	mov	r9, r3
 80092ac:	dc37      	bgt.n	800931e <_printf_float+0x33e>
 80092ae:	2300      	movs	r3, #0
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092b6:	f104 021a 	add.w	r2, r4, #26
 80092ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092bc:	9907      	ldr	r1, [sp, #28]
 80092be:	9306      	str	r3, [sp, #24]
 80092c0:	eba3 0309 	sub.w	r3, r3, r9
 80092c4:	428b      	cmp	r3, r1
 80092c6:	dc31      	bgt.n	800932c <_printf_float+0x34c>
 80092c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ca:	459a      	cmp	sl, r3
 80092cc:	dc3b      	bgt.n	8009346 <_printf_float+0x366>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	07da      	lsls	r2, r3, #31
 80092d2:	d438      	bmi.n	8009346 <_printf_float+0x366>
 80092d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d6:	ebaa 0903 	sub.w	r9, sl, r3
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	ebaa 0303 	sub.w	r3, sl, r3
 80092e0:	4599      	cmp	r9, r3
 80092e2:	bfa8      	it	ge
 80092e4:	4699      	movge	r9, r3
 80092e6:	f1b9 0f00 	cmp.w	r9, #0
 80092ea:	dc34      	bgt.n	8009356 <_printf_float+0x376>
 80092ec:	f04f 0800 	mov.w	r8, #0
 80092f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092f4:	f104 0b1a 	add.w	fp, r4, #26
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	ebaa 0303 	sub.w	r3, sl, r3
 80092fe:	eba3 0309 	sub.w	r3, r3, r9
 8009302:	4543      	cmp	r3, r8
 8009304:	f77f af76 	ble.w	80091f4 <_printf_float+0x214>
 8009308:	2301      	movs	r3, #1
 800930a:	465a      	mov	r2, fp
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f aeb0 	beq.w	8009078 <_printf_float+0x98>
 8009318:	f108 0801 	add.w	r8, r8, #1
 800931c:	e7ec      	b.n	80092f8 <_printf_float+0x318>
 800931e:	4642      	mov	r2, r8
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	d1c1      	bne.n	80092ae <_printf_float+0x2ce>
 800932a:	e6a5      	b.n	8009078 <_printf_float+0x98>
 800932c:	2301      	movs	r3, #1
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	9206      	str	r2, [sp, #24]
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f ae9e 	beq.w	8009078 <_printf_float+0x98>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	9a06      	ldr	r2, [sp, #24]
 8009340:	3301      	adds	r3, #1
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	e7b9      	b.n	80092ba <_printf_float+0x2da>
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	465a      	mov	r2, fp
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	d1bf      	bne.n	80092d4 <_printf_float+0x2f4>
 8009354:	e690      	b.n	8009078 <_printf_float+0x98>
 8009356:	9a06      	ldr	r2, [sp, #24]
 8009358:	464b      	mov	r3, r9
 800935a:	4442      	add	r2, r8
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	d1c2      	bne.n	80092ec <_printf_float+0x30c>
 8009366:	e687      	b.n	8009078 <_printf_float+0x98>
 8009368:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800936c:	f1b9 0f01 	cmp.w	r9, #1
 8009370:	dc01      	bgt.n	8009376 <_printf_float+0x396>
 8009372:	07db      	lsls	r3, r3, #31
 8009374:	d536      	bpl.n	80093e4 <_printf_float+0x404>
 8009376:	2301      	movs	r3, #1
 8009378:	4642      	mov	r2, r8
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	f43f ae79 	beq.w	8009078 <_printf_float+0x98>
 8009386:	9b05      	ldr	r3, [sp, #20]
 8009388:	465a      	mov	r2, fp
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f ae71 	beq.w	8009078 <_printf_float+0x98>
 8009396:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800939a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80093a6:	d018      	beq.n	80093da <_printf_float+0x3fa>
 80093a8:	464b      	mov	r3, r9
 80093aa:	f108 0201 	add.w	r2, r8, #1
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	d10c      	bne.n	80093d2 <_printf_float+0x3f2>
 80093b8:	e65e      	b.n	8009078 <_printf_float+0x98>
 80093ba:	2301      	movs	r3, #1
 80093bc:	465a      	mov	r2, fp
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae57 	beq.w	8009078 <_printf_float+0x98>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	45c8      	cmp	r8, r9
 80093d0:	dbf3      	blt.n	80093ba <_printf_float+0x3da>
 80093d2:	4653      	mov	r3, sl
 80093d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093d8:	e6dc      	b.n	8009194 <_printf_float+0x1b4>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	f104 0b1a 	add.w	fp, r4, #26
 80093e2:	e7f4      	b.n	80093ce <_printf_float+0x3ee>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4642      	mov	r2, r8
 80093e8:	e7e1      	b.n	80093ae <_printf_float+0x3ce>
 80093ea:	2301      	movs	r3, #1
 80093ec:	464a      	mov	r2, r9
 80093ee:	4631      	mov	r1, r6
 80093f0:	4628      	mov	r0, r5
 80093f2:	47b8      	blx	r7
 80093f4:	3001      	adds	r0, #1
 80093f6:	f43f ae3f 	beq.w	8009078 <_printf_float+0x98>
 80093fa:	f108 0801 	add.w	r8, r8, #1
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009402:	1a5b      	subs	r3, r3, r1
 8009404:	4543      	cmp	r3, r8
 8009406:	dcf0      	bgt.n	80093ea <_printf_float+0x40a>
 8009408:	e6f8      	b.n	80091fc <_printf_float+0x21c>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	f104 0919 	add.w	r9, r4, #25
 8009412:	e7f4      	b.n	80093fe <_printf_float+0x41e>

08009414 <_printf_common>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	4616      	mov	r6, r2
 800941a:	4698      	mov	r8, r3
 800941c:	688a      	ldr	r2, [r1, #8]
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009424:	4293      	cmp	r3, r2
 8009426:	bfb8      	it	lt
 8009428:	4613      	movlt	r3, r2
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009430:	4607      	mov	r7, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b10a      	cbz	r2, 800943a <_printf_common+0x26>
 8009436:	3301      	adds	r3, #1
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	0699      	lsls	r1, r3, #26
 800943e:	bf42      	ittt	mi
 8009440:	6833      	ldrmi	r3, [r6, #0]
 8009442:	3302      	addmi	r3, #2
 8009444:	6033      	strmi	r3, [r6, #0]
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	f015 0506 	ands.w	r5, r5, #6
 800944c:	d106      	bne.n	800945c <_printf_common+0x48>
 800944e:	f104 0a19 	add.w	sl, r4, #25
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	6832      	ldr	r2, [r6, #0]
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	42ab      	cmp	r3, r5
 800945a:	dc26      	bgt.n	80094aa <_printf_common+0x96>
 800945c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009460:	6822      	ldr	r2, [r4, #0]
 8009462:	3b00      	subs	r3, #0
 8009464:	bf18      	it	ne
 8009466:	2301      	movne	r3, #1
 8009468:	0692      	lsls	r2, r2, #26
 800946a:	d42b      	bmi.n	80094c4 <_printf_common+0xb0>
 800946c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009470:	4641      	mov	r1, r8
 8009472:	4638      	mov	r0, r7
 8009474:	47c8      	blx	r9
 8009476:	3001      	adds	r0, #1
 8009478:	d01e      	beq.n	80094b8 <_printf_common+0xa4>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	f003 0306 	and.w	r3, r3, #6
 8009482:	2b04      	cmp	r3, #4
 8009484:	bf02      	ittt	eq
 8009486:	68e5      	ldreq	r5, [r4, #12]
 8009488:	6833      	ldreq	r3, [r6, #0]
 800948a:	1aed      	subeq	r5, r5, r3
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	bf0c      	ite	eq
 8009490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009494:	2500      	movne	r5, #0
 8009496:	4293      	cmp	r3, r2
 8009498:	bfc4      	itt	gt
 800949a:	1a9b      	subgt	r3, r3, r2
 800949c:	18ed      	addgt	r5, r5, r3
 800949e:	2600      	movs	r6, #0
 80094a0:	341a      	adds	r4, #26
 80094a2:	42b5      	cmp	r5, r6
 80094a4:	d11a      	bne.n	80094dc <_printf_common+0xc8>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e008      	b.n	80094bc <_printf_common+0xa8>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4641      	mov	r1, r8
 80094b0:	4638      	mov	r0, r7
 80094b2:	47c8      	blx	r9
 80094b4:	3001      	adds	r0, #1
 80094b6:	d103      	bne.n	80094c0 <_printf_common+0xac>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7c6      	b.n	8009452 <_printf_common+0x3e>
 80094c4:	18e1      	adds	r1, r4, r3
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	2030      	movs	r0, #48	@ 0x30
 80094ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094ce:	4422      	add	r2, r4
 80094d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094d8:	3302      	adds	r3, #2
 80094da:	e7c7      	b.n	800946c <_printf_common+0x58>
 80094dc:	2301      	movs	r3, #1
 80094de:	4622      	mov	r2, r4
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d0e6      	beq.n	80094b8 <_printf_common+0xa4>
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7d9      	b.n	80094a2 <_printf_common+0x8e>
	...

080094f0 <_printf_i>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	7e0f      	ldrb	r7, [r1, #24]
 80094f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094f8:	2f78      	cmp	r7, #120	@ 0x78
 80094fa:	4691      	mov	r9, r2
 80094fc:	4680      	mov	r8, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	469a      	mov	sl, r3
 8009502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009506:	d807      	bhi.n	8009518 <_printf_i+0x28>
 8009508:	2f62      	cmp	r7, #98	@ 0x62
 800950a:	d80a      	bhi.n	8009522 <_printf_i+0x32>
 800950c:	2f00      	cmp	r7, #0
 800950e:	f000 80d2 	beq.w	80096b6 <_printf_i+0x1c6>
 8009512:	2f58      	cmp	r7, #88	@ 0x58
 8009514:	f000 80b9 	beq.w	800968a <_printf_i+0x19a>
 8009518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800951c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009520:	e03a      	b.n	8009598 <_printf_i+0xa8>
 8009522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009526:	2b15      	cmp	r3, #21
 8009528:	d8f6      	bhi.n	8009518 <_printf_i+0x28>
 800952a:	a101      	add	r1, pc, #4	@ (adr r1, 8009530 <_printf_i+0x40>)
 800952c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009530:	08009589 	.word	0x08009589
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009519 	.word	0x08009519
 800953c:	08009519 	.word	0x08009519
 8009540:	08009519 	.word	0x08009519
 8009544:	08009519 	.word	0x08009519
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009519 	.word	0x08009519
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	0800969d 	.word	0x0800969d
 8009560:	080095c7 	.word	0x080095c7
 8009564:	08009657 	.word	0x08009657
 8009568:	08009519 	.word	0x08009519
 800956c:	08009519 	.word	0x08009519
 8009570:	080096bf 	.word	0x080096bf
 8009574:	08009519 	.word	0x08009519
 8009578:	080095c7 	.word	0x080095c7
 800957c:	08009519 	.word	0x08009519
 8009580:	08009519 	.word	0x08009519
 8009584:	0800965f 	.word	0x0800965f
 8009588:	6833      	ldr	r3, [r6, #0]
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6032      	str	r2, [r6, #0]
 8009590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009598:	2301      	movs	r3, #1
 800959a:	e09d      	b.n	80096d8 <_printf_i+0x1e8>
 800959c:	6833      	ldr	r3, [r6, #0]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	1d19      	adds	r1, r3, #4
 80095a2:	6031      	str	r1, [r6, #0]
 80095a4:	0606      	lsls	r6, r0, #24
 80095a6:	d501      	bpl.n	80095ac <_printf_i+0xbc>
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	e003      	b.n	80095b4 <_printf_i+0xc4>
 80095ac:	0645      	lsls	r5, r0, #25
 80095ae:	d5fb      	bpl.n	80095a8 <_printf_i+0xb8>
 80095b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	da03      	bge.n	80095c0 <_printf_i+0xd0>
 80095b8:	232d      	movs	r3, #45	@ 0x2d
 80095ba:	426d      	negs	r5, r5
 80095bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c0:	4859      	ldr	r0, [pc, #356]	@ (8009728 <_printf_i+0x238>)
 80095c2:	230a      	movs	r3, #10
 80095c4:	e011      	b.n	80095ea <_printf_i+0xfa>
 80095c6:	6821      	ldr	r1, [r4, #0]
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	0608      	lsls	r0, r1, #24
 80095cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095d0:	d402      	bmi.n	80095d8 <_printf_i+0xe8>
 80095d2:	0649      	lsls	r1, r1, #25
 80095d4:	bf48      	it	mi
 80095d6:	b2ad      	uxthmi	r5, r5
 80095d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095da:	4853      	ldr	r0, [pc, #332]	@ (8009728 <_printf_i+0x238>)
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	bf14      	ite	ne
 80095e0:	230a      	movne	r3, #10
 80095e2:	2308      	moveq	r3, #8
 80095e4:	2100      	movs	r1, #0
 80095e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ea:	6866      	ldr	r6, [r4, #4]
 80095ec:	60a6      	str	r6, [r4, #8]
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	bfa2      	ittt	ge
 80095f2:	6821      	ldrge	r1, [r4, #0]
 80095f4:	f021 0104 	bicge.w	r1, r1, #4
 80095f8:	6021      	strge	r1, [r4, #0]
 80095fa:	b90d      	cbnz	r5, 8009600 <_printf_i+0x110>
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	d04b      	beq.n	8009698 <_printf_i+0x1a8>
 8009600:	4616      	mov	r6, r2
 8009602:	fbb5 f1f3 	udiv	r1, r5, r3
 8009606:	fb03 5711 	mls	r7, r3, r1, r5
 800960a:	5dc7      	ldrb	r7, [r0, r7]
 800960c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009610:	462f      	mov	r7, r5
 8009612:	42bb      	cmp	r3, r7
 8009614:	460d      	mov	r5, r1
 8009616:	d9f4      	bls.n	8009602 <_printf_i+0x112>
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <_printf_i+0x144>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07df      	lsls	r7, r3, #31
 8009620:	d508      	bpl.n	8009634 <_printf_i+0x144>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	bfde      	ittt	le
 800962a:	2330      	movle	r3, #48	@ 0x30
 800962c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009630:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009634:	1b92      	subs	r2, r2, r6
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	f8cd a000 	str.w	sl, [sp]
 800963c:	464b      	mov	r3, r9
 800963e:	aa03      	add	r2, sp, #12
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fee6 	bl	8009414 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	d14a      	bne.n	80096e2 <_printf_i+0x1f2>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b004      	add	sp, #16
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	4833      	ldr	r0, [pc, #204]	@ (800972c <_printf_i+0x23c>)
 8009660:	2778      	movs	r7, #120	@ 0x78
 8009662:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6831      	ldr	r1, [r6, #0]
 800966a:	061f      	lsls	r7, r3, #24
 800966c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009670:	d402      	bmi.n	8009678 <_printf_i+0x188>
 8009672:	065f      	lsls	r7, r3, #25
 8009674:	bf48      	it	mi
 8009676:	b2ad      	uxthmi	r5, r5
 8009678:	6031      	str	r1, [r6, #0]
 800967a:	07d9      	lsls	r1, r3, #31
 800967c:	bf44      	itt	mi
 800967e:	f043 0320 	orrmi.w	r3, r3, #32
 8009682:	6023      	strmi	r3, [r4, #0]
 8009684:	b11d      	cbz	r5, 800968e <_printf_i+0x19e>
 8009686:	2310      	movs	r3, #16
 8009688:	e7ac      	b.n	80095e4 <_printf_i+0xf4>
 800968a:	4827      	ldr	r0, [pc, #156]	@ (8009728 <_printf_i+0x238>)
 800968c:	e7e9      	b.n	8009662 <_printf_i+0x172>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f023 0320 	bic.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	e7f6      	b.n	8009686 <_printf_i+0x196>
 8009698:	4616      	mov	r6, r2
 800969a:	e7bd      	b.n	8009618 <_printf_i+0x128>
 800969c:	6833      	ldr	r3, [r6, #0]
 800969e:	6825      	ldr	r5, [r4, #0]
 80096a0:	6961      	ldr	r1, [r4, #20]
 80096a2:	1d18      	adds	r0, r3, #4
 80096a4:	6030      	str	r0, [r6, #0]
 80096a6:	062e      	lsls	r6, r5, #24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0x1c0>
 80096ac:	6019      	str	r1, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0x1c6>
 80096b0:	0668      	lsls	r0, r5, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0x1bc>
 80096b4:	8019      	strh	r1, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	4616      	mov	r6, r2
 80096bc:	e7bc      	b.n	8009638 <_printf_i+0x148>
 80096be:	6833      	ldr	r3, [r6, #0]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	6032      	str	r2, [r6, #0]
 80096c4:	681e      	ldr	r6, [r3, #0]
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7f6 fe20 	bl	8000310 <memchr>
 80096d0:	b108      	cbz	r0, 80096d6 <_printf_i+0x1e6>
 80096d2:	1b80      	subs	r0, r0, r6
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	2300      	movs	r3, #0
 80096dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096e0:	e7aa      	b.n	8009638 <_printf_i+0x148>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	4632      	mov	r2, r6
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0ad      	beq.n	800964c <_printf_i+0x15c>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	d413      	bmi.n	800971e <_printf_i+0x22e>
 80096f6:	68e0      	ldr	r0, [r4, #12]
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bfb8      	it	lt
 80096fe:	4618      	movlt	r0, r3
 8009700:	e7a6      	b.n	8009650 <_printf_i+0x160>
 8009702:	2301      	movs	r3, #1
 8009704:	4632      	mov	r2, r6
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d09d      	beq.n	800964c <_printf_i+0x15c>
 8009710:	3501      	adds	r5, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	9903      	ldr	r1, [sp, #12]
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	42ab      	cmp	r3, r5
 800971a:	dcf2      	bgt.n	8009702 <_printf_i+0x212>
 800971c:	e7eb      	b.n	80096f6 <_printf_i+0x206>
 800971e:	2500      	movs	r5, #0
 8009720:	f104 0619 	add.w	r6, r4, #25
 8009724:	e7f5      	b.n	8009712 <_printf_i+0x222>
 8009726:	bf00      	nop
 8009728:	0800b8ba 	.word	0x0800b8ba
 800972c:	0800b8cb 	.word	0x0800b8cb

08009730 <std>:
 8009730:	2300      	movs	r3, #0
 8009732:	b510      	push	{r4, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	e9c0 3300 	strd	r3, r3, [r0]
 800973a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800973e:	6083      	str	r3, [r0, #8]
 8009740:	8181      	strh	r1, [r0, #12]
 8009742:	6643      	str	r3, [r0, #100]	@ 0x64
 8009744:	81c2      	strh	r2, [r0, #14]
 8009746:	6183      	str	r3, [r0, #24]
 8009748:	4619      	mov	r1, r3
 800974a:	2208      	movs	r2, #8
 800974c:	305c      	adds	r0, #92	@ 0x5c
 800974e:	f000 f9f9 	bl	8009b44 <memset>
 8009752:	4b0d      	ldr	r3, [pc, #52]	@ (8009788 <std+0x58>)
 8009754:	6263      	str	r3, [r4, #36]	@ 0x24
 8009756:	4b0d      	ldr	r3, [pc, #52]	@ (800978c <std+0x5c>)
 8009758:	62a3      	str	r3, [r4, #40]	@ 0x28
 800975a:	4b0d      	ldr	r3, [pc, #52]	@ (8009790 <std+0x60>)
 800975c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800975e:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <std+0x64>)
 8009760:	6323      	str	r3, [r4, #48]	@ 0x30
 8009762:	4b0d      	ldr	r3, [pc, #52]	@ (8009798 <std+0x68>)
 8009764:	6224      	str	r4, [r4, #32]
 8009766:	429c      	cmp	r4, r3
 8009768:	d006      	beq.n	8009778 <std+0x48>
 800976a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800976e:	4294      	cmp	r4, r2
 8009770:	d002      	beq.n	8009778 <std+0x48>
 8009772:	33d0      	adds	r3, #208	@ 0xd0
 8009774:	429c      	cmp	r4, r3
 8009776:	d105      	bne.n	8009784 <std+0x54>
 8009778:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	f000 ba5c 	b.w	8009c3c <__retarget_lock_init_recursive>
 8009784:	bd10      	pop	{r4, pc}
 8009786:	bf00      	nop
 8009788:	08009995 	.word	0x08009995
 800978c:	080099b7 	.word	0x080099b7
 8009790:	080099ef 	.word	0x080099ef
 8009794:	08009a13 	.word	0x08009a13
 8009798:	240004b0 	.word	0x240004b0

0800979c <stdio_exit_handler>:
 800979c:	4a02      	ldr	r2, [pc, #8]	@ (80097a8 <stdio_exit_handler+0xc>)
 800979e:	4903      	ldr	r1, [pc, #12]	@ (80097ac <stdio_exit_handler+0x10>)
 80097a0:	4803      	ldr	r0, [pc, #12]	@ (80097b0 <stdio_exit_handler+0x14>)
 80097a2:	f000 b869 	b.w	8009878 <_fwalk_sglue>
 80097a6:	bf00      	nop
 80097a8:	24000010 	.word	0x24000010
 80097ac:	0800b495 	.word	0x0800b495
 80097b0:	24000020 	.word	0x24000020

080097b4 <cleanup_stdio>:
 80097b4:	6841      	ldr	r1, [r0, #4]
 80097b6:	4b0c      	ldr	r3, [pc, #48]	@ (80097e8 <cleanup_stdio+0x34>)
 80097b8:	4299      	cmp	r1, r3
 80097ba:	b510      	push	{r4, lr}
 80097bc:	4604      	mov	r4, r0
 80097be:	d001      	beq.n	80097c4 <cleanup_stdio+0x10>
 80097c0:	f001 fe68 	bl	800b494 <_fflush_r>
 80097c4:	68a1      	ldr	r1, [r4, #8]
 80097c6:	4b09      	ldr	r3, [pc, #36]	@ (80097ec <cleanup_stdio+0x38>)
 80097c8:	4299      	cmp	r1, r3
 80097ca:	d002      	beq.n	80097d2 <cleanup_stdio+0x1e>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f001 fe61 	bl	800b494 <_fflush_r>
 80097d2:	68e1      	ldr	r1, [r4, #12]
 80097d4:	4b06      	ldr	r3, [pc, #24]	@ (80097f0 <cleanup_stdio+0x3c>)
 80097d6:	4299      	cmp	r1, r3
 80097d8:	d004      	beq.n	80097e4 <cleanup_stdio+0x30>
 80097da:	4620      	mov	r0, r4
 80097dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e0:	f001 be58 	b.w	800b494 <_fflush_r>
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	bf00      	nop
 80097e8:	240004b0 	.word	0x240004b0
 80097ec:	24000518 	.word	0x24000518
 80097f0:	24000580 	.word	0x24000580

080097f4 <global_stdio_init.part.0>:
 80097f4:	b510      	push	{r4, lr}
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <global_stdio_init.part.0+0x30>)
 80097f8:	4c0b      	ldr	r4, [pc, #44]	@ (8009828 <global_stdio_init.part.0+0x34>)
 80097fa:	4a0c      	ldr	r2, [pc, #48]	@ (800982c <global_stdio_init.part.0+0x38>)
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	4620      	mov	r0, r4
 8009800:	2200      	movs	r2, #0
 8009802:	2104      	movs	r1, #4
 8009804:	f7ff ff94 	bl	8009730 <std>
 8009808:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800980c:	2201      	movs	r2, #1
 800980e:	2109      	movs	r1, #9
 8009810:	f7ff ff8e 	bl	8009730 <std>
 8009814:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009818:	2202      	movs	r2, #2
 800981a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981e:	2112      	movs	r1, #18
 8009820:	f7ff bf86 	b.w	8009730 <std>
 8009824:	240005e8 	.word	0x240005e8
 8009828:	240004b0 	.word	0x240004b0
 800982c:	0800979d 	.word	0x0800979d

08009830 <__sfp_lock_acquire>:
 8009830:	4801      	ldr	r0, [pc, #4]	@ (8009838 <__sfp_lock_acquire+0x8>)
 8009832:	f000 ba04 	b.w	8009c3e <__retarget_lock_acquire_recursive>
 8009836:	bf00      	nop
 8009838:	240005f1 	.word	0x240005f1

0800983c <__sfp_lock_release>:
 800983c:	4801      	ldr	r0, [pc, #4]	@ (8009844 <__sfp_lock_release+0x8>)
 800983e:	f000 b9ff 	b.w	8009c40 <__retarget_lock_release_recursive>
 8009842:	bf00      	nop
 8009844:	240005f1 	.word	0x240005f1

08009848 <__sinit>:
 8009848:	b510      	push	{r4, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	f7ff fff0 	bl	8009830 <__sfp_lock_acquire>
 8009850:	6a23      	ldr	r3, [r4, #32]
 8009852:	b11b      	cbz	r3, 800985c <__sinit+0x14>
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f7ff bff0 	b.w	800983c <__sfp_lock_release>
 800985c:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <__sinit+0x28>)
 800985e:	6223      	str	r3, [r4, #32]
 8009860:	4b04      	ldr	r3, [pc, #16]	@ (8009874 <__sinit+0x2c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1f5      	bne.n	8009854 <__sinit+0xc>
 8009868:	f7ff ffc4 	bl	80097f4 <global_stdio_init.part.0>
 800986c:	e7f2      	b.n	8009854 <__sinit+0xc>
 800986e:	bf00      	nop
 8009870:	080097b5 	.word	0x080097b5
 8009874:	240005e8 	.word	0x240005e8

08009878 <_fwalk_sglue>:
 8009878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800987c:	4607      	mov	r7, r0
 800987e:	4688      	mov	r8, r1
 8009880:	4614      	mov	r4, r2
 8009882:	2600      	movs	r6, #0
 8009884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009888:	f1b9 0901 	subs.w	r9, r9, #1
 800988c:	d505      	bpl.n	800989a <_fwalk_sglue+0x22>
 800988e:	6824      	ldr	r4, [r4, #0]
 8009890:	2c00      	cmp	r4, #0
 8009892:	d1f7      	bne.n	8009884 <_fwalk_sglue+0xc>
 8009894:	4630      	mov	r0, r6
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d907      	bls.n	80098b0 <_fwalk_sglue+0x38>
 80098a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098a4:	3301      	adds	r3, #1
 80098a6:	d003      	beq.n	80098b0 <_fwalk_sglue+0x38>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4638      	mov	r0, r7
 80098ac:	47c0      	blx	r8
 80098ae:	4306      	orrs	r6, r0
 80098b0:	3568      	adds	r5, #104	@ 0x68
 80098b2:	e7e9      	b.n	8009888 <_fwalk_sglue+0x10>

080098b4 <iprintf>:
 80098b4:	b40f      	push	{r0, r1, r2, r3}
 80098b6:	b507      	push	{r0, r1, r2, lr}
 80098b8:	4906      	ldr	r1, [pc, #24]	@ (80098d4 <iprintf+0x20>)
 80098ba:	ab04      	add	r3, sp, #16
 80098bc:	6808      	ldr	r0, [r1, #0]
 80098be:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c2:	6881      	ldr	r1, [r0, #8]
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	f001 fc49 	bl	800b15c <_vfiprintf_r>
 80098ca:	b003      	add	sp, #12
 80098cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098d0:	b004      	add	sp, #16
 80098d2:	4770      	bx	lr
 80098d4:	2400001c 	.word	0x2400001c

080098d8 <_puts_r>:
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b570      	push	{r4, r5, r6, lr}
 80098dc:	6884      	ldr	r4, [r0, #8]
 80098de:	4605      	mov	r5, r0
 80098e0:	460e      	mov	r6, r1
 80098e2:	b90b      	cbnz	r3, 80098e8 <_puts_r+0x10>
 80098e4:	f7ff ffb0 	bl	8009848 <__sinit>
 80098e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098ea:	07db      	lsls	r3, r3, #31
 80098ec:	d405      	bmi.n	80098fa <_puts_r+0x22>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	0598      	lsls	r0, r3, #22
 80098f2:	d402      	bmi.n	80098fa <_puts_r+0x22>
 80098f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f6:	f000 f9a2 	bl	8009c3e <__retarget_lock_acquire_recursive>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	0719      	lsls	r1, r3, #28
 80098fe:	d502      	bpl.n	8009906 <_puts_r+0x2e>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d135      	bne.n	8009972 <_puts_r+0x9a>
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	f000 f8c5 	bl	8009a98 <__swsetup_r>
 800990e:	b380      	cbz	r0, 8009972 <_puts_r+0x9a>
 8009910:	f04f 35ff 	mov.w	r5, #4294967295
 8009914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009916:	07da      	lsls	r2, r3, #31
 8009918:	d405      	bmi.n	8009926 <_puts_r+0x4e>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	059b      	lsls	r3, r3, #22
 800991e:	d402      	bmi.n	8009926 <_puts_r+0x4e>
 8009920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009922:	f000 f98d 	bl	8009c40 <__retarget_lock_release_recursive>
 8009926:	4628      	mov	r0, r5
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	2b00      	cmp	r3, #0
 800992c:	da04      	bge.n	8009938 <_puts_r+0x60>
 800992e:	69a2      	ldr	r2, [r4, #24]
 8009930:	429a      	cmp	r2, r3
 8009932:	dc17      	bgt.n	8009964 <_puts_r+0x8c>
 8009934:	290a      	cmp	r1, #10
 8009936:	d015      	beq.n	8009964 <_puts_r+0x8c>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	7019      	strb	r1, [r3, #0]
 8009940:	68a3      	ldr	r3, [r4, #8]
 8009942:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009946:	3b01      	subs	r3, #1
 8009948:	60a3      	str	r3, [r4, #8]
 800994a:	2900      	cmp	r1, #0
 800994c:	d1ed      	bne.n	800992a <_puts_r+0x52>
 800994e:	2b00      	cmp	r3, #0
 8009950:	da11      	bge.n	8009976 <_puts_r+0x9e>
 8009952:	4622      	mov	r2, r4
 8009954:	210a      	movs	r1, #10
 8009956:	4628      	mov	r0, r5
 8009958:	f000 f85f 	bl	8009a1a <__swbuf_r>
 800995c:	3001      	adds	r0, #1
 800995e:	d0d7      	beq.n	8009910 <_puts_r+0x38>
 8009960:	250a      	movs	r5, #10
 8009962:	e7d7      	b.n	8009914 <_puts_r+0x3c>
 8009964:	4622      	mov	r2, r4
 8009966:	4628      	mov	r0, r5
 8009968:	f000 f857 	bl	8009a1a <__swbuf_r>
 800996c:	3001      	adds	r0, #1
 800996e:	d1e7      	bne.n	8009940 <_puts_r+0x68>
 8009970:	e7ce      	b.n	8009910 <_puts_r+0x38>
 8009972:	3e01      	subs	r6, #1
 8009974:	e7e4      	b.n	8009940 <_puts_r+0x68>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	220a      	movs	r2, #10
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e7ee      	b.n	8009960 <_puts_r+0x88>
	...

08009984 <puts>:
 8009984:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <puts+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f7ff bfa5 	b.w	80098d8 <_puts_r>
 800998e:	bf00      	nop
 8009990:	2400001c 	.word	0x2400001c

08009994 <__sread>:
 8009994:	b510      	push	{r4, lr}
 8009996:	460c      	mov	r4, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	f000 f900 	bl	8009ba0 <_read_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	bfab      	itete	ge
 80099a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099a6:	89a3      	ldrhlt	r3, [r4, #12]
 80099a8:	181b      	addge	r3, r3, r0
 80099aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ae:	bfac      	ite	ge
 80099b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099b2:	81a3      	strhlt	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__swrite>:
 80099b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	461f      	mov	r7, r3
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	05db      	lsls	r3, r3, #23
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	4616      	mov	r6, r2
 80099c6:	d505      	bpl.n	80099d4 <__swrite+0x1e>
 80099c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099cc:	2302      	movs	r3, #2
 80099ce:	2200      	movs	r2, #0
 80099d0:	f000 f8d4 	bl	8009b7c <_lseek_r>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	4632      	mov	r2, r6
 80099e2:	463b      	mov	r3, r7
 80099e4:	4628      	mov	r0, r5
 80099e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ea:	f000 b8eb 	b.w	8009bc4 <_write_r>

080099ee <__sseek>:
 80099ee:	b510      	push	{r4, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f6:	f000 f8c1 	bl	8009b7c <_lseek_r>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	bf15      	itete	ne
 8009a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a0a:	81a3      	strheq	r3, [r4, #12]
 8009a0c:	bf18      	it	ne
 8009a0e:	81a3      	strhne	r3, [r4, #12]
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <__sclose>:
 8009a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a16:	f000 b8a1 	b.w	8009b5c <_close_r>

08009a1a <__swbuf_r>:
 8009a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1c:	460e      	mov	r6, r1
 8009a1e:	4614      	mov	r4, r2
 8009a20:	4605      	mov	r5, r0
 8009a22:	b118      	cbz	r0, 8009a2c <__swbuf_r+0x12>
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	b90b      	cbnz	r3, 8009a2c <__swbuf_r+0x12>
 8009a28:	f7ff ff0e 	bl	8009848 <__sinit>
 8009a2c:	69a3      	ldr	r3, [r4, #24]
 8009a2e:	60a3      	str	r3, [r4, #8]
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	071a      	lsls	r2, r3, #28
 8009a34:	d501      	bpl.n	8009a3a <__swbuf_r+0x20>
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	b943      	cbnz	r3, 8009a4c <__swbuf_r+0x32>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 f82b 	bl	8009a98 <__swsetup_r>
 8009a42:	b118      	cbz	r0, 8009a4c <__swbuf_r+0x32>
 8009a44:	f04f 37ff 	mov.w	r7, #4294967295
 8009a48:	4638      	mov	r0, r7
 8009a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	6922      	ldr	r2, [r4, #16]
 8009a50:	1a98      	subs	r0, r3, r2
 8009a52:	6963      	ldr	r3, [r4, #20]
 8009a54:	b2f6      	uxtb	r6, r6
 8009a56:	4283      	cmp	r3, r0
 8009a58:	4637      	mov	r7, r6
 8009a5a:	dc05      	bgt.n	8009a68 <__swbuf_r+0x4e>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f001 fd18 	bl	800b494 <_fflush_r>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1ed      	bne.n	8009a44 <__swbuf_r+0x2a>
 8009a68:	68a3      	ldr	r3, [r4, #8]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	6022      	str	r2, [r4, #0]
 8009a74:	701e      	strb	r6, [r3, #0]
 8009a76:	6962      	ldr	r2, [r4, #20]
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d004      	beq.n	8009a88 <__swbuf_r+0x6e>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d5e1      	bpl.n	8009a48 <__swbuf_r+0x2e>
 8009a84:	2e0a      	cmp	r6, #10
 8009a86:	d1df      	bne.n	8009a48 <__swbuf_r+0x2e>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f001 fd02 	bl	800b494 <_fflush_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d0d9      	beq.n	8009a48 <__swbuf_r+0x2e>
 8009a94:	e7d6      	b.n	8009a44 <__swbuf_r+0x2a>
	...

08009a98 <__swsetup_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4b29      	ldr	r3, [pc, #164]	@ (8009b40 <__swsetup_r+0xa8>)
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	b118      	cbz	r0, 8009aac <__swsetup_r+0x14>
 8009aa4:	6a03      	ldr	r3, [r0, #32]
 8009aa6:	b90b      	cbnz	r3, 8009aac <__swsetup_r+0x14>
 8009aa8:	f7ff fece 	bl	8009848 <__sinit>
 8009aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab0:	0719      	lsls	r1, r3, #28
 8009ab2:	d422      	bmi.n	8009afa <__swsetup_r+0x62>
 8009ab4:	06da      	lsls	r2, r3, #27
 8009ab6:	d407      	bmi.n	8009ac8 <__swsetup_r+0x30>
 8009ab8:	2209      	movs	r2, #9
 8009aba:	602a      	str	r2, [r5, #0]
 8009abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac6:	e033      	b.n	8009b30 <__swsetup_r+0x98>
 8009ac8:	0758      	lsls	r0, r3, #29
 8009aca:	d512      	bpl.n	8009af2 <__swsetup_r+0x5a>
 8009acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ace:	b141      	cbz	r1, 8009ae2 <__swsetup_r+0x4a>
 8009ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	d002      	beq.n	8009ade <__swsetup_r+0x46>
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 fe93 	bl	800a804 <_free_r>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ae8:	81a3      	strh	r3, [r4, #12]
 8009aea:	2300      	movs	r3, #0
 8009aec:	6063      	str	r3, [r4, #4]
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f043 0308 	orr.w	r3, r3, #8
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	b94b      	cbnz	r3, 8009b12 <__swsetup_r+0x7a>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b08:	d003      	beq.n	8009b12 <__swsetup_r+0x7a>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f001 fd0f 	bl	800b530 <__smakebuf_r>
 8009b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b16:	f013 0201 	ands.w	r2, r3, #1
 8009b1a:	d00a      	beq.n	8009b32 <__swsetup_r+0x9a>
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	60a2      	str	r2, [r4, #8]
 8009b20:	6962      	ldr	r2, [r4, #20]
 8009b22:	4252      	negs	r2, r2
 8009b24:	61a2      	str	r2, [r4, #24]
 8009b26:	6922      	ldr	r2, [r4, #16]
 8009b28:	b942      	cbnz	r2, 8009b3c <__swsetup_r+0xa4>
 8009b2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b2e:	d1c5      	bne.n	8009abc <__swsetup_r+0x24>
 8009b30:	bd38      	pop	{r3, r4, r5, pc}
 8009b32:	0799      	lsls	r1, r3, #30
 8009b34:	bf58      	it	pl
 8009b36:	6962      	ldrpl	r2, [r4, #20]
 8009b38:	60a2      	str	r2, [r4, #8]
 8009b3a:	e7f4      	b.n	8009b26 <__swsetup_r+0x8e>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e7f7      	b.n	8009b30 <__swsetup_r+0x98>
 8009b40:	2400001c 	.word	0x2400001c

08009b44 <memset>:
 8009b44:	4402      	add	r2, r0
 8009b46:	4603      	mov	r3, r0
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d100      	bne.n	8009b4e <memset+0xa>
 8009b4c:	4770      	bx	lr
 8009b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b52:	e7f9      	b.n	8009b48 <memset+0x4>

08009b54 <_localeconv_r>:
 8009b54:	4800      	ldr	r0, [pc, #0]	@ (8009b58 <_localeconv_r+0x4>)
 8009b56:	4770      	bx	lr
 8009b58:	2400015c 	.word	0x2400015c

08009b5c <_close_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4d06      	ldr	r5, [pc, #24]	@ (8009b78 <_close_r+0x1c>)
 8009b60:	2300      	movs	r3, #0
 8009b62:	4604      	mov	r4, r0
 8009b64:	4608      	mov	r0, r1
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	f7f7 fb47 	bl	80011fa <_close>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_close_r+0x1a>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_close_r+0x1a>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	240005ec 	.word	0x240005ec

08009b7c <_lseek_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d07      	ldr	r5, [pc, #28]	@ (8009b9c <_lseek_r+0x20>)
 8009b80:	4604      	mov	r4, r0
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	602a      	str	r2, [r5, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f7f7 fb5c 	bl	8001248 <_lseek>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_lseek_r+0x1e>
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_lseek_r+0x1e>
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	240005ec 	.word	0x240005ec

08009ba0 <_read_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	@ (8009bc0 <_read_r+0x20>)
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	4608      	mov	r0, r1
 8009ba8:	4611      	mov	r1, r2
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f7f7 fb06 	bl	80011c0 <_read>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_read_r+0x1e>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_read_r+0x1e>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	240005ec 	.word	0x240005ec

08009bc4 <_write_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d07      	ldr	r5, [pc, #28]	@ (8009be4 <_write_r+0x20>)
 8009bc8:	4604      	mov	r4, r0
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	602a      	str	r2, [r5, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f7f6 fd6c 	bl	80006b0 <_write>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_write_r+0x1e>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_write_r+0x1e>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	240005ec 	.word	0x240005ec

08009be8 <__errno>:
 8009be8:	4b01      	ldr	r3, [pc, #4]	@ (8009bf0 <__errno+0x8>)
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	2400001c 	.word	0x2400001c

08009bf4 <__libc_init_array>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8009c2c <__libc_init_array+0x38>)
 8009bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8009c30 <__libc_init_array+0x3c>)
 8009bfa:	1b64      	subs	r4, r4, r5
 8009bfc:	10a4      	asrs	r4, r4, #2
 8009bfe:	2600      	movs	r6, #0
 8009c00:	42a6      	cmp	r6, r4
 8009c02:	d109      	bne.n	8009c18 <__libc_init_array+0x24>
 8009c04:	4d0b      	ldr	r5, [pc, #44]	@ (8009c34 <__libc_init_array+0x40>)
 8009c06:	4c0c      	ldr	r4, [pc, #48]	@ (8009c38 <__libc_init_array+0x44>)
 8009c08:	f001 fdbe 	bl	800b788 <_init>
 8009c0c:	1b64      	subs	r4, r4, r5
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	2600      	movs	r6, #0
 8009c12:	42a6      	cmp	r6, r4
 8009c14:	d105      	bne.n	8009c22 <__libc_init_array+0x2e>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c1c:	4798      	blx	r3
 8009c1e:	3601      	adds	r6, #1
 8009c20:	e7ee      	b.n	8009c00 <__libc_init_array+0xc>
 8009c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c26:	4798      	blx	r3
 8009c28:	3601      	adds	r6, #1
 8009c2a:	e7f2      	b.n	8009c12 <__libc_init_array+0x1e>
 8009c2c:	0800bc20 	.word	0x0800bc20
 8009c30:	0800bc20 	.word	0x0800bc20
 8009c34:	0800bc20 	.word	0x0800bc20
 8009c38:	0800bc24 	.word	0x0800bc24

08009c3c <__retarget_lock_init_recursive>:
 8009c3c:	4770      	bx	lr

08009c3e <__retarget_lock_acquire_recursive>:
 8009c3e:	4770      	bx	lr

08009c40 <__retarget_lock_release_recursive>:
 8009c40:	4770      	bx	lr

08009c42 <quorem>:
 8009c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c46:	6903      	ldr	r3, [r0, #16]
 8009c48:	690c      	ldr	r4, [r1, #16]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	db7e      	blt.n	8009d4e <quorem+0x10c>
 8009c50:	3c01      	subs	r4, #1
 8009c52:	f101 0814 	add.w	r8, r1, #20
 8009c56:	00a3      	lsls	r3, r4, #2
 8009c58:	f100 0514 	add.w	r5, r0, #20
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c78:	d32e      	bcc.n	8009cd8 <quorem+0x96>
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	46c4      	mov	ip, r8
 8009c80:	46ae      	mov	lr, r5
 8009c82:	46d3      	mov	fp, sl
 8009c84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c88:	b298      	uxth	r0, r3
 8009c8a:	fb06 a000 	mla	r0, r6, r0, sl
 8009c8e:	0c02      	lsrs	r2, r0, #16
 8009c90:	0c1b      	lsrs	r3, r3, #16
 8009c92:	fb06 2303 	mla	r3, r6, r3, r2
 8009c96:	f8de 2000 	ldr.w	r2, [lr]
 8009c9a:	b280      	uxth	r0, r0
 8009c9c:	b292      	uxth	r2, r2
 8009c9e:	1a12      	subs	r2, r2, r0
 8009ca0:	445a      	add	r2, fp
 8009ca2:	f8de 0000 	ldr.w	r0, [lr]
 8009ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009cb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009cb4:	b292      	uxth	r2, r2
 8009cb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cba:	45e1      	cmp	r9, ip
 8009cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8009cc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cc4:	d2de      	bcs.n	8009c84 <quorem+0x42>
 8009cc6:	9b00      	ldr	r3, [sp, #0]
 8009cc8:	58eb      	ldr	r3, [r5, r3]
 8009cca:	b92b      	cbnz	r3, 8009cd8 <quorem+0x96>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	3b04      	subs	r3, #4
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	d32f      	bcc.n	8009d36 <quorem+0xf4>
 8009cd6:	613c      	str	r4, [r7, #16]
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f001 f90d 	bl	800aef8 <__mcmp>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	db25      	blt.n	8009d2e <quorem+0xec>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cea:	f8d1 c000 	ldr.w	ip, [r1]
 8009cee:	fa1f fe82 	uxth.w	lr, r2
 8009cf2:	fa1f f38c 	uxth.w	r3, ip
 8009cf6:	eba3 030e 	sub.w	r3, r3, lr
 8009cfa:	4403      	add	r3, r0
 8009cfc:	0c12      	lsrs	r2, r2, #16
 8009cfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d0c:	45c1      	cmp	r9, r8
 8009d0e:	f841 3b04 	str.w	r3, [r1], #4
 8009d12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d16:	d2e6      	bcs.n	8009ce6 <quorem+0xa4>
 8009d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d20:	b922      	cbnz	r2, 8009d2c <quorem+0xea>
 8009d22:	3b04      	subs	r3, #4
 8009d24:	429d      	cmp	r5, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	d30b      	bcc.n	8009d42 <quorem+0x100>
 8009d2a:	613c      	str	r4, [r7, #16]
 8009d2c:	3601      	adds	r6, #1
 8009d2e:	4630      	mov	r0, r6
 8009d30:	b003      	add	sp, #12
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	d1cb      	bne.n	8009cd6 <quorem+0x94>
 8009d3e:	3c01      	subs	r4, #1
 8009d40:	e7c6      	b.n	8009cd0 <quorem+0x8e>
 8009d42:	6812      	ldr	r2, [r2, #0]
 8009d44:	3b04      	subs	r3, #4
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	d1ef      	bne.n	8009d2a <quorem+0xe8>
 8009d4a:	3c01      	subs	r4, #1
 8009d4c:	e7ea      	b.n	8009d24 <quorem+0xe2>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e7ee      	b.n	8009d30 <quorem+0xee>
 8009d52:	0000      	movs	r0, r0
 8009d54:	0000      	movs	r0, r0
	...

08009d58 <_dtoa_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	ed2d 8b02 	vpush	{d8}
 8009d60:	69c7      	ldr	r7, [r0, #28]
 8009d62:	b091      	sub	sp, #68	@ 0x44
 8009d64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d68:	ec55 4b10 	vmov	r4, r5, d0
 8009d6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009d6e:	9107      	str	r1, [sp, #28]
 8009d70:	4681      	mov	r9, r0
 8009d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d74:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d76:	b97f      	cbnz	r7, 8009d98 <_dtoa_r+0x40>
 8009d78:	2010      	movs	r0, #16
 8009d7a:	f000 fd8d 	bl	800a898 <malloc>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	f8c9 001c 	str.w	r0, [r9, #28]
 8009d84:	b920      	cbnz	r0, 8009d90 <_dtoa_r+0x38>
 8009d86:	4ba0      	ldr	r3, [pc, #640]	@ (800a008 <_dtoa_r+0x2b0>)
 8009d88:	21ef      	movs	r1, #239	@ 0xef
 8009d8a:	48a0      	ldr	r0, [pc, #640]	@ (800a00c <_dtoa_r+0x2b4>)
 8009d8c:	f001 fc4c 	bl	800b628 <__assert_func>
 8009d90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d94:	6007      	str	r7, [r0, #0]
 8009d96:	60c7      	str	r7, [r0, #12]
 8009d98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d9c:	6819      	ldr	r1, [r3, #0]
 8009d9e:	b159      	cbz	r1, 8009db8 <_dtoa_r+0x60>
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	604a      	str	r2, [r1, #4]
 8009da4:	2301      	movs	r3, #1
 8009da6:	4093      	lsls	r3, r2
 8009da8:	608b      	str	r3, [r1, #8]
 8009daa:	4648      	mov	r0, r9
 8009dac:	f000 fe6a 	bl	800aa84 <_Bfree>
 8009db0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	1e2b      	subs	r3, r5, #0
 8009dba:	bfbb      	ittet	lt
 8009dbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dc0:	9303      	strlt	r3, [sp, #12]
 8009dc2:	2300      	movge	r3, #0
 8009dc4:	2201      	movlt	r2, #1
 8009dc6:	bfac      	ite	ge
 8009dc8:	6033      	strge	r3, [r6, #0]
 8009dca:	6032      	strlt	r2, [r6, #0]
 8009dcc:	4b90      	ldr	r3, [pc, #576]	@ (800a010 <_dtoa_r+0x2b8>)
 8009dce:	9e03      	ldr	r6, [sp, #12]
 8009dd0:	43b3      	bics	r3, r6
 8009dd2:	d110      	bne.n	8009df6 <_dtoa_r+0x9e>
 8009dd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009dd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009de0:	4323      	orrs	r3, r4
 8009de2:	f000 84de 	beq.w	800a7a2 <_dtoa_r+0xa4a>
 8009de6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009de8:	4f8a      	ldr	r7, [pc, #552]	@ (800a014 <_dtoa_r+0x2bc>)
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 84e0 	beq.w	800a7b0 <_dtoa_r+0xa58>
 8009df0:	1cfb      	adds	r3, r7, #3
 8009df2:	f000 bcdb 	b.w	800a7ac <_dtoa_r+0xa54>
 8009df6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009dfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e02:	d10a      	bne.n	8009e1a <_dtoa_r+0xc2>
 8009e04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e06:	2301      	movs	r3, #1
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e0c:	b113      	cbz	r3, 8009e14 <_dtoa_r+0xbc>
 8009e0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009e10:	4b81      	ldr	r3, [pc, #516]	@ (800a018 <_dtoa_r+0x2c0>)
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	4f81      	ldr	r7, [pc, #516]	@ (800a01c <_dtoa_r+0x2c4>)
 8009e16:	f000 bccb 	b.w	800a7b0 <_dtoa_r+0xa58>
 8009e1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009e1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8009e1e:	4648      	mov	r0, r9
 8009e20:	eeb0 0b48 	vmov.f64	d0, d8
 8009e24:	f001 f918 	bl	800b058 <__d2b>
 8009e28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e2e:	9001      	str	r0, [sp, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d045      	beq.n	8009ec0 <_dtoa_r+0x168>
 8009e34:	eeb0 7b48 	vmov.f64	d7, d8
 8009e38:	ee18 1a90 	vmov	r1, s17
 8009e3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009e40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009e44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009e48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	ee07 1a90 	vmov	s15, r1
 8009e52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009e56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009ff0 <_dtoa_r+0x298>
 8009e5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009ff8 <_dtoa_r+0x2a0>
 8009e62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a000 <_dtoa_r+0x2a8>
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009e72:	eeb0 7b46 	vmov.f64	d7, d6
 8009e76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009e7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009e7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e86:	ee16 8a90 	vmov	r8, s13
 8009e8a:	d508      	bpl.n	8009e9e <_dtoa_r+0x146>
 8009e8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009e90:	eeb4 6b47 	vcmp.f64	d6, d7
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	bf18      	it	ne
 8009e9a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009e9e:	f1b8 0f16 	cmp.w	r8, #22
 8009ea2:	d82b      	bhi.n	8009efc <_dtoa_r+0x1a4>
 8009ea4:	495e      	ldr	r1, [pc, #376]	@ (800a020 <_dtoa_r+0x2c8>)
 8009ea6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009eaa:	ed91 7b00 	vldr	d7, [r1]
 8009eae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb6:	d501      	bpl.n	8009ebc <_dtoa_r+0x164>
 8009eb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	e01e      	b.n	8009efe <_dtoa_r+0x1a6>
 8009ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009ec8:	2920      	cmp	r1, #32
 8009eca:	bfc1      	itttt	gt
 8009ecc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009ed0:	408e      	lslgt	r6, r1
 8009ed2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009ed6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009eda:	bfd6      	itet	le
 8009edc:	f1c1 0120 	rsble	r1, r1, #32
 8009ee0:	4331      	orrgt	r1, r6
 8009ee2:	fa04 f101 	lslle.w	r1, r4, r1
 8009ee6:	ee07 1a90 	vmov	s15, r1
 8009eea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	ee17 1a90 	vmov	r1, s15
 8009ef4:	2501      	movs	r5, #1
 8009ef6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009efa:	e7a8      	b.n	8009e4e <_dtoa_r+0xf6>
 8009efc:	2101      	movs	r1, #1
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	1e53      	subs	r3, r2, #1
 8009f02:	9306      	str	r3, [sp, #24]
 8009f04:	bf45      	ittet	mi
 8009f06:	f1c2 0301 	rsbmi	r3, r2, #1
 8009f0a:	9305      	strmi	r3, [sp, #20]
 8009f0c:	2300      	movpl	r3, #0
 8009f0e:	2300      	movmi	r3, #0
 8009f10:	bf4c      	ite	mi
 8009f12:	9306      	strmi	r3, [sp, #24]
 8009f14:	9305      	strpl	r3, [sp, #20]
 8009f16:	f1b8 0f00 	cmp.w	r8, #0
 8009f1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009f1c:	db18      	blt.n	8009f50 <_dtoa_r+0x1f8>
 8009f1e:	9b06      	ldr	r3, [sp, #24]
 8009f20:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009f24:	4443      	add	r3, r8
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9a07      	ldr	r2, [sp, #28]
 8009f2c:	2a09      	cmp	r2, #9
 8009f2e:	d849      	bhi.n	8009fc4 <_dtoa_r+0x26c>
 8009f30:	2a05      	cmp	r2, #5
 8009f32:	bfc4      	itt	gt
 8009f34:	3a04      	subgt	r2, #4
 8009f36:	9207      	strgt	r2, [sp, #28]
 8009f38:	9a07      	ldr	r2, [sp, #28]
 8009f3a:	f1a2 0202 	sub.w	r2, r2, #2
 8009f3e:	bfcc      	ite	gt
 8009f40:	2400      	movgt	r4, #0
 8009f42:	2401      	movle	r4, #1
 8009f44:	2a03      	cmp	r2, #3
 8009f46:	d848      	bhi.n	8009fda <_dtoa_r+0x282>
 8009f48:	e8df f002 	tbb	[pc, r2]
 8009f4c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009f50:	9b05      	ldr	r3, [sp, #20]
 8009f52:	2200      	movs	r2, #0
 8009f54:	eba3 0308 	sub.w	r3, r3, r8
 8009f58:	9305      	str	r3, [sp, #20]
 8009f5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f5c:	f1c8 0300 	rsb	r3, r8, #0
 8009f60:	e7e3      	b.n	8009f2a <_dtoa_r+0x1d2>
 8009f62:	2200      	movs	r2, #0
 8009f64:	9208      	str	r2, [sp, #32]
 8009f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	dc39      	bgt.n	8009fe0 <_dtoa_r+0x288>
 8009f6c:	f04f 0b01 	mov.w	fp, #1
 8009f70:	46da      	mov	sl, fp
 8009f72:	465a      	mov	r2, fp
 8009f74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009f78:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	2004      	movs	r0, #4
 8009f80:	f100 0614 	add.w	r6, r0, #20
 8009f84:	4296      	cmp	r6, r2
 8009f86:	d930      	bls.n	8009fea <_dtoa_r+0x292>
 8009f88:	6079      	str	r1, [r7, #4]
 8009f8a:	4648      	mov	r0, r9
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	f000 fd39 	bl	800aa04 <_Balloc>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	4607      	mov	r7, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d146      	bne.n	800a028 <_dtoa_r+0x2d0>
 8009f9a:	4b22      	ldr	r3, [pc, #136]	@ (800a024 <_dtoa_r+0x2cc>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fa2:	e6f2      	b.n	8009d8a <_dtoa_r+0x32>
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	e7dd      	b.n	8009f64 <_dtoa_r+0x20c>
 8009fa8:	2200      	movs	r2, #0
 8009faa:	9208      	str	r2, [sp, #32]
 8009fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fae:	eb08 0b02 	add.w	fp, r8, r2
 8009fb2:	f10b 0a01 	add.w	sl, fp, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	2a01      	cmp	r2, #1
 8009fba:	bfb8      	it	lt
 8009fbc:	2201      	movlt	r2, #1
 8009fbe:	e7db      	b.n	8009f78 <_dtoa_r+0x220>
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	e7f2      	b.n	8009faa <_dtoa_r+0x252>
 8009fc4:	2401      	movs	r4, #1
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009fcc:	f04f 3bff 	mov.w	fp, #4294967295
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	46da      	mov	sl, fp
 8009fd4:	2212      	movs	r2, #18
 8009fd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fd8:	e7ce      	b.n	8009f78 <_dtoa_r+0x220>
 8009fda:	2201      	movs	r2, #1
 8009fdc:	9208      	str	r2, [sp, #32]
 8009fde:	e7f5      	b.n	8009fcc <_dtoa_r+0x274>
 8009fe0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009fe4:	46da      	mov	sl, fp
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	e7c6      	b.n	8009f78 <_dtoa_r+0x220>
 8009fea:	3101      	adds	r1, #1
 8009fec:	0040      	lsls	r0, r0, #1
 8009fee:	e7c7      	b.n	8009f80 <_dtoa_r+0x228>
 8009ff0:	636f4361 	.word	0x636f4361
 8009ff4:	3fd287a7 	.word	0x3fd287a7
 8009ff8:	8b60c8b3 	.word	0x8b60c8b3
 8009ffc:	3fc68a28 	.word	0x3fc68a28
 800a000:	509f79fb 	.word	0x509f79fb
 800a004:	3fd34413 	.word	0x3fd34413
 800a008:	0800b8e9 	.word	0x0800b8e9
 800a00c:	0800b900 	.word	0x0800b900
 800a010:	7ff00000 	.word	0x7ff00000
 800a014:	0800b8e5 	.word	0x0800b8e5
 800a018:	0800b8b9 	.word	0x0800b8b9
 800a01c:	0800b8b8 	.word	0x0800b8b8
 800a020:	0800b9f8 	.word	0x0800b9f8
 800a024:	0800b958 	.word	0x0800b958
 800a028:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a02c:	f1ba 0f0e 	cmp.w	sl, #14
 800a030:	6010      	str	r0, [r2, #0]
 800a032:	d86f      	bhi.n	800a114 <_dtoa_r+0x3bc>
 800a034:	2c00      	cmp	r4, #0
 800a036:	d06d      	beq.n	800a114 <_dtoa_r+0x3bc>
 800a038:	f1b8 0f00 	cmp.w	r8, #0
 800a03c:	f340 80c2 	ble.w	800a1c4 <_dtoa_r+0x46c>
 800a040:	4aca      	ldr	r2, [pc, #808]	@ (800a36c <_dtoa_r+0x614>)
 800a042:	f008 010f 	and.w	r1, r8, #15
 800a046:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a04a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a04e:	ed92 7b00 	vldr	d7, [r2]
 800a052:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a056:	f000 80a9 	beq.w	800a1ac <_dtoa_r+0x454>
 800a05a:	4ac5      	ldr	r2, [pc, #788]	@ (800a370 <_dtoa_r+0x618>)
 800a05c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a060:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a064:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a068:	f001 010f 	and.w	r1, r1, #15
 800a06c:	2203      	movs	r2, #3
 800a06e:	48c0      	ldr	r0, [pc, #768]	@ (800a370 <_dtoa_r+0x618>)
 800a070:	2900      	cmp	r1, #0
 800a072:	f040 809d 	bne.w	800a1b0 <_dtoa_r+0x458>
 800a076:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a07a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a07e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a082:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a084:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a088:	2900      	cmp	r1, #0
 800a08a:	f000 80c1 	beq.w	800a210 <_dtoa_r+0x4b8>
 800a08e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a092:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09a:	f140 80b9 	bpl.w	800a210 <_dtoa_r+0x4b8>
 800a09e:	f1ba 0f00 	cmp.w	sl, #0
 800a0a2:	f000 80b5 	beq.w	800a210 <_dtoa_r+0x4b8>
 800a0a6:	f1bb 0f00 	cmp.w	fp, #0
 800a0aa:	dd31      	ble.n	800a110 <_dtoa_r+0x3b8>
 800a0ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a0b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0b8:	f108 31ff 	add.w	r1, r8, #4294967295
 800a0bc:	9104      	str	r1, [sp, #16]
 800a0be:	3201      	adds	r2, #1
 800a0c0:	465c      	mov	r4, fp
 800a0c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a0ca:	ee07 2a90 	vmov	s15, r2
 800a0ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a0d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a0d6:	ee15 2a90 	vmov	r2, s11
 800a0da:	ec51 0b15 	vmov	r0, r1, d5
 800a0de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a0e2:	2c00      	cmp	r4, #0
 800a0e4:	f040 8098 	bne.w	800a218 <_dtoa_r+0x4c0>
 800a0e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a0ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a0f0:	ec41 0b17 	vmov	d7, r0, r1
 800a0f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	f300 8261 	bgt.w	800a5c2 <_dtoa_r+0x86a>
 800a100:	eeb1 7b47 	vneg.f64	d7, d7
 800a104:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	f100 80f5 	bmi.w	800a2fa <_dtoa_r+0x5a2>
 800a110:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a114:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a116:	2a00      	cmp	r2, #0
 800a118:	f2c0 812c 	blt.w	800a374 <_dtoa_r+0x61c>
 800a11c:	f1b8 0f0e 	cmp.w	r8, #14
 800a120:	f300 8128 	bgt.w	800a374 <_dtoa_r+0x61c>
 800a124:	4b91      	ldr	r3, [pc, #580]	@ (800a36c <_dtoa_r+0x614>)
 800a126:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a12a:	ed93 6b00 	vldr	d6, [r3]
 800a12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	da03      	bge.n	800a13c <_dtoa_r+0x3e4>
 800a134:	f1ba 0f00 	cmp.w	sl, #0
 800a138:	f340 80d2 	ble.w	800a2e0 <_dtoa_r+0x588>
 800a13c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a140:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a144:	463e      	mov	r6, r7
 800a146:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a14a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a14e:	ee15 3a10 	vmov	r3, s10
 800a152:	3330      	adds	r3, #48	@ 0x30
 800a154:	f806 3b01 	strb.w	r3, [r6], #1
 800a158:	1bf3      	subs	r3, r6, r7
 800a15a:	459a      	cmp	sl, r3
 800a15c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a160:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a164:	f040 80f8 	bne.w	800a358 <_dtoa_r+0x600>
 800a168:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a16c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a174:	f300 80dd 	bgt.w	800a332 <_dtoa_r+0x5da>
 800a178:	eeb4 7b46 	vcmp.f64	d7, d6
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d104      	bne.n	800a18c <_dtoa_r+0x434>
 800a182:	ee15 3a10 	vmov	r3, s10
 800a186:	07db      	lsls	r3, r3, #31
 800a188:	f100 80d3 	bmi.w	800a332 <_dtoa_r+0x5da>
 800a18c:	9901      	ldr	r1, [sp, #4]
 800a18e:	4648      	mov	r0, r9
 800a190:	f000 fc78 	bl	800aa84 <_Bfree>
 800a194:	2300      	movs	r3, #0
 800a196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a198:	7033      	strb	r3, [r6, #0]
 800a19a:	f108 0301 	add.w	r3, r8, #1
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 8304 	beq.w	800a7b0 <_dtoa_r+0xa58>
 800a1a8:	601e      	str	r6, [r3, #0]
 800a1aa:	e301      	b.n	800a7b0 <_dtoa_r+0xa58>
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	e75e      	b.n	800a06e <_dtoa_r+0x316>
 800a1b0:	07cc      	lsls	r4, r1, #31
 800a1b2:	d504      	bpl.n	800a1be <_dtoa_r+0x466>
 800a1b4:	ed90 6b00 	vldr	d6, [r0]
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1be:	1049      	asrs	r1, r1, #1
 800a1c0:	3008      	adds	r0, #8
 800a1c2:	e755      	b.n	800a070 <_dtoa_r+0x318>
 800a1c4:	d022      	beq.n	800a20c <_dtoa_r+0x4b4>
 800a1c6:	f1c8 0100 	rsb	r1, r8, #0
 800a1ca:	4a68      	ldr	r2, [pc, #416]	@ (800a36c <_dtoa_r+0x614>)
 800a1cc:	f001 000f 	and.w	r0, r1, #15
 800a1d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a1d4:	ed92 7b00 	vldr	d7, [r2]
 800a1d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a1dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1e0:	4863      	ldr	r0, [pc, #396]	@ (800a370 <_dtoa_r+0x618>)
 800a1e2:	1109      	asrs	r1, r1, #4
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	b929      	cbnz	r1, 800a1f6 <_dtoa_r+0x49e>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	f43f af49 	beq.w	800a082 <_dtoa_r+0x32a>
 800a1f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1f4:	e745      	b.n	800a082 <_dtoa_r+0x32a>
 800a1f6:	07ce      	lsls	r6, r1, #31
 800a1f8:	d505      	bpl.n	800a206 <_dtoa_r+0x4ae>
 800a1fa:	ed90 6b00 	vldr	d6, [r0]
 800a1fe:	3201      	adds	r2, #1
 800a200:	2401      	movs	r4, #1
 800a202:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a206:	1049      	asrs	r1, r1, #1
 800a208:	3008      	adds	r0, #8
 800a20a:	e7ed      	b.n	800a1e8 <_dtoa_r+0x490>
 800a20c:	2202      	movs	r2, #2
 800a20e:	e738      	b.n	800a082 <_dtoa_r+0x32a>
 800a210:	f8cd 8010 	str.w	r8, [sp, #16]
 800a214:	4654      	mov	r4, sl
 800a216:	e754      	b.n	800a0c2 <_dtoa_r+0x36a>
 800a218:	4a54      	ldr	r2, [pc, #336]	@ (800a36c <_dtoa_r+0x614>)
 800a21a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a21e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a222:	9a08      	ldr	r2, [sp, #32]
 800a224:	ec41 0b17 	vmov	d7, r0, r1
 800a228:	443c      	add	r4, r7
 800a22a:	b34a      	cbz	r2, 800a280 <_dtoa_r+0x528>
 800a22c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a230:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a234:	463e      	mov	r6, r7
 800a236:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a23a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a23e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a242:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a246:	ee14 2a90 	vmov	r2, s9
 800a24a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a24e:	3230      	adds	r2, #48	@ 0x30
 800a250:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a254:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25c:	f806 2b01 	strb.w	r2, [r6], #1
 800a260:	d438      	bmi.n	800a2d4 <_dtoa_r+0x57c>
 800a262:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a266:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26e:	d462      	bmi.n	800a336 <_dtoa_r+0x5de>
 800a270:	42a6      	cmp	r6, r4
 800a272:	f43f af4d 	beq.w	800a110 <_dtoa_r+0x3b8>
 800a276:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a27a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a27e:	e7e0      	b.n	800a242 <_dtoa_r+0x4ea>
 800a280:	4621      	mov	r1, r4
 800a282:	463e      	mov	r6, r7
 800a284:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a288:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a28c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a290:	ee14 2a90 	vmov	r2, s9
 800a294:	3230      	adds	r2, #48	@ 0x30
 800a296:	f806 2b01 	strb.w	r2, [r6], #1
 800a29a:	42a6      	cmp	r6, r4
 800a29c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a2a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a2a4:	d119      	bne.n	800a2da <_dtoa_r+0x582>
 800a2a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a2aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a2ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b6:	dc3e      	bgt.n	800a336 <_dtoa_r+0x5de>
 800a2b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a2bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c4:	f57f af24 	bpl.w	800a110 <_dtoa_r+0x3b8>
 800a2c8:	460e      	mov	r6, r1
 800a2ca:	3901      	subs	r1, #1
 800a2cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2d0:	2b30      	cmp	r3, #48	@ 0x30
 800a2d2:	d0f9      	beq.n	800a2c8 <_dtoa_r+0x570>
 800a2d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a2d8:	e758      	b.n	800a18c <_dtoa_r+0x434>
 800a2da:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2de:	e7d5      	b.n	800a28c <_dtoa_r+0x534>
 800a2e0:	d10b      	bne.n	800a2fa <_dtoa_r+0x5a2>
 800a2e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a2e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f6:	f2c0 8161 	blt.w	800a5bc <_dtoa_r+0x864>
 800a2fa:	2400      	movs	r4, #0
 800a2fc:	4625      	mov	r5, r4
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	43db      	mvns	r3, r3
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	463e      	mov	r6, r7
 800a306:	f04f 0800 	mov.w	r8, #0
 800a30a:	4621      	mov	r1, r4
 800a30c:	4648      	mov	r0, r9
 800a30e:	f000 fbb9 	bl	800aa84 <_Bfree>
 800a312:	2d00      	cmp	r5, #0
 800a314:	d0de      	beq.n	800a2d4 <_dtoa_r+0x57c>
 800a316:	f1b8 0f00 	cmp.w	r8, #0
 800a31a:	d005      	beq.n	800a328 <_dtoa_r+0x5d0>
 800a31c:	45a8      	cmp	r8, r5
 800a31e:	d003      	beq.n	800a328 <_dtoa_r+0x5d0>
 800a320:	4641      	mov	r1, r8
 800a322:	4648      	mov	r0, r9
 800a324:	f000 fbae 	bl	800aa84 <_Bfree>
 800a328:	4629      	mov	r1, r5
 800a32a:	4648      	mov	r0, r9
 800a32c:	f000 fbaa 	bl	800aa84 <_Bfree>
 800a330:	e7d0      	b.n	800a2d4 <_dtoa_r+0x57c>
 800a332:	f8cd 8010 	str.w	r8, [sp, #16]
 800a336:	4633      	mov	r3, r6
 800a338:	461e      	mov	r6, r3
 800a33a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a33e:	2a39      	cmp	r2, #57	@ 0x39
 800a340:	d106      	bne.n	800a350 <_dtoa_r+0x5f8>
 800a342:	429f      	cmp	r7, r3
 800a344:	d1f8      	bne.n	800a338 <_dtoa_r+0x5e0>
 800a346:	9a04      	ldr	r2, [sp, #16]
 800a348:	3201      	adds	r2, #1
 800a34a:	9204      	str	r2, [sp, #16]
 800a34c:	2230      	movs	r2, #48	@ 0x30
 800a34e:	703a      	strb	r2, [r7, #0]
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	3201      	adds	r2, #1
 800a354:	701a      	strb	r2, [r3, #0]
 800a356:	e7bd      	b.n	800a2d4 <_dtoa_r+0x57c>
 800a358:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a35c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a364:	f47f aeef 	bne.w	800a146 <_dtoa_r+0x3ee>
 800a368:	e710      	b.n	800a18c <_dtoa_r+0x434>
 800a36a:	bf00      	nop
 800a36c:	0800b9f8 	.word	0x0800b9f8
 800a370:	0800b9d0 	.word	0x0800b9d0
 800a374:	9908      	ldr	r1, [sp, #32]
 800a376:	2900      	cmp	r1, #0
 800a378:	f000 80e3 	beq.w	800a542 <_dtoa_r+0x7ea>
 800a37c:	9907      	ldr	r1, [sp, #28]
 800a37e:	2901      	cmp	r1, #1
 800a380:	f300 80c8 	bgt.w	800a514 <_dtoa_r+0x7bc>
 800a384:	2d00      	cmp	r5, #0
 800a386:	f000 80c1 	beq.w	800a50c <_dtoa_r+0x7b4>
 800a38a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a38e:	9e05      	ldr	r6, [sp, #20]
 800a390:	461c      	mov	r4, r3
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	9b05      	ldr	r3, [sp, #20]
 800a396:	4413      	add	r3, r2
 800a398:	9305      	str	r3, [sp, #20]
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	2101      	movs	r1, #1
 800a39e:	4413      	add	r3, r2
 800a3a0:	4648      	mov	r0, r9
 800a3a2:	9306      	str	r3, [sp, #24]
 800a3a4:	f000 fc22 	bl	800abec <__i2b>
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	b166      	cbz	r6, 800a3c8 <_dtoa_r+0x670>
 800a3ae:	9a06      	ldr	r2, [sp, #24]
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	dd09      	ble.n	800a3c8 <_dtoa_r+0x670>
 800a3b4:	42b2      	cmp	r2, r6
 800a3b6:	9905      	ldr	r1, [sp, #20]
 800a3b8:	bfa8      	it	ge
 800a3ba:	4632      	movge	r2, r6
 800a3bc:	1a89      	subs	r1, r1, r2
 800a3be:	9105      	str	r1, [sp, #20]
 800a3c0:	9906      	ldr	r1, [sp, #24]
 800a3c2:	1ab6      	subs	r6, r6, r2
 800a3c4:	1a8a      	subs	r2, r1, r2
 800a3c6:	9206      	str	r2, [sp, #24]
 800a3c8:	b1fb      	cbz	r3, 800a40a <_dtoa_r+0x6b2>
 800a3ca:	9a08      	ldr	r2, [sp, #32]
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	f000 80bc 	beq.w	800a54a <_dtoa_r+0x7f2>
 800a3d2:	b19c      	cbz	r4, 800a3fc <_dtoa_r+0x6a4>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4648      	mov	r0, r9
 800a3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3dc:	f000 fcc6 	bl	800ad6c <__pow5mult>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	4648      	mov	r0, r9
 800a3e8:	f000 fc16 	bl	800ac18 <__multiply>
 800a3ec:	9901      	ldr	r1, [sp, #4]
 800a3ee:	9004      	str	r0, [sp, #16]
 800a3f0:	4648      	mov	r0, r9
 800a3f2:	f000 fb47 	bl	800aa84 <_Bfree>
 800a3f6:	9a04      	ldr	r2, [sp, #16]
 800a3f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3fa:	9201      	str	r2, [sp, #4]
 800a3fc:	1b1a      	subs	r2, r3, r4
 800a3fe:	d004      	beq.n	800a40a <_dtoa_r+0x6b2>
 800a400:	9901      	ldr	r1, [sp, #4]
 800a402:	4648      	mov	r0, r9
 800a404:	f000 fcb2 	bl	800ad6c <__pow5mult>
 800a408:	9001      	str	r0, [sp, #4]
 800a40a:	2101      	movs	r1, #1
 800a40c:	4648      	mov	r0, r9
 800a40e:	f000 fbed 	bl	800abec <__i2b>
 800a412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a414:	4604      	mov	r4, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 81d0 	beq.w	800a7bc <_dtoa_r+0xa64>
 800a41c:	461a      	mov	r2, r3
 800a41e:	4601      	mov	r1, r0
 800a420:	4648      	mov	r0, r9
 800a422:	f000 fca3 	bl	800ad6c <__pow5mult>
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	4604      	mov	r4, r0
 800a42c:	f300 8095 	bgt.w	800a55a <_dtoa_r+0x802>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	f040 808b 	bne.w	800a54e <_dtoa_r+0x7f6>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a43e:	2a00      	cmp	r2, #0
 800a440:	f040 8087 	bne.w	800a552 <_dtoa_r+0x7fa>
 800a444:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a448:	0d12      	lsrs	r2, r2, #20
 800a44a:	0512      	lsls	r2, r2, #20
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	f000 8082 	beq.w	800a556 <_dtoa_r+0x7fe>
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	3301      	adds	r3, #1
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	9b06      	ldr	r3, [sp, #24]
 800a45a:	3301      	adds	r3, #1
 800a45c:	9306      	str	r3, [sp, #24]
 800a45e:	2301      	movs	r3, #1
 800a460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 81af 	beq.w	800a7c8 <_dtoa_r+0xa70>
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a470:	6910      	ldr	r0, [r2, #16]
 800a472:	f000 fb6f 	bl	800ab54 <__hi0bits>
 800a476:	f1c0 0020 	rsb	r0, r0, #32
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	4418      	add	r0, r3
 800a47e:	f010 001f 	ands.w	r0, r0, #31
 800a482:	d076      	beq.n	800a572 <_dtoa_r+0x81a>
 800a484:	f1c0 0220 	rsb	r2, r0, #32
 800a488:	2a04      	cmp	r2, #4
 800a48a:	dd69      	ble.n	800a560 <_dtoa_r+0x808>
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	f1c0 001c 	rsb	r0, r0, #28
 800a492:	4403      	add	r3, r0
 800a494:	9305      	str	r3, [sp, #20]
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	4406      	add	r6, r0
 800a49a:	4403      	add	r3, r0
 800a49c:	9306      	str	r3, [sp, #24]
 800a49e:	9b05      	ldr	r3, [sp, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dd05      	ble.n	800a4b0 <_dtoa_r+0x758>
 800a4a4:	9901      	ldr	r1, [sp, #4]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	4648      	mov	r0, r9
 800a4aa:	f000 fcb9 	bl	800ae20 <__lshift>
 800a4ae:	9001      	str	r0, [sp, #4]
 800a4b0:	9b06      	ldr	r3, [sp, #24]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	dd05      	ble.n	800a4c2 <_dtoa_r+0x76a>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f000 fcb0 	bl	800ae20 <__lshift>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d056      	beq.n	800a576 <_dtoa_r+0x81e>
 800a4c8:	9801      	ldr	r0, [sp, #4]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	f000 fd14 	bl	800aef8 <__mcmp>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	da50      	bge.n	800a576 <_dtoa_r+0x81e>
 800a4d4:	f108 33ff 	add.w	r3, r8, #4294967295
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	9901      	ldr	r1, [sp, #4]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	220a      	movs	r2, #10
 800a4e0:	4648      	mov	r0, r9
 800a4e2:	f000 faf1 	bl	800aac8 <__multadd>
 800a4e6:	9b08      	ldr	r3, [sp, #32]
 800a4e8:	9001      	str	r0, [sp, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 816e 	beq.w	800a7cc <_dtoa_r+0xa74>
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	4648      	mov	r0, r9
 800a4f8:	f000 fae6 	bl	800aac8 <__multadd>
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	4605      	mov	r5, r0
 800a502:	dc64      	bgt.n	800a5ce <_dtoa_r+0x876>
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	2b02      	cmp	r3, #2
 800a508:	dc3e      	bgt.n	800a588 <_dtoa_r+0x830>
 800a50a:	e060      	b.n	800a5ce <_dtoa_r+0x876>
 800a50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a50e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a512:	e73c      	b.n	800a38e <_dtoa_r+0x636>
 800a514:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a518:	42a3      	cmp	r3, r4
 800a51a:	bfbf      	itttt	lt
 800a51c:	1ae2      	sublt	r2, r4, r3
 800a51e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a520:	189b      	addlt	r3, r3, r2
 800a522:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a524:	bfae      	itee	ge
 800a526:	1b1c      	subge	r4, r3, r4
 800a528:	4623      	movlt	r3, r4
 800a52a:	2400      	movlt	r4, #0
 800a52c:	f1ba 0f00 	cmp.w	sl, #0
 800a530:	bfb5      	itete	lt
 800a532:	9a05      	ldrlt	r2, [sp, #20]
 800a534:	9e05      	ldrge	r6, [sp, #20]
 800a536:	eba2 060a 	sublt.w	r6, r2, sl
 800a53a:	4652      	movge	r2, sl
 800a53c:	bfb8      	it	lt
 800a53e:	2200      	movlt	r2, #0
 800a540:	e727      	b.n	800a392 <_dtoa_r+0x63a>
 800a542:	9e05      	ldr	r6, [sp, #20]
 800a544:	9d08      	ldr	r5, [sp, #32]
 800a546:	461c      	mov	r4, r3
 800a548:	e730      	b.n	800a3ac <_dtoa_r+0x654>
 800a54a:	461a      	mov	r2, r3
 800a54c:	e758      	b.n	800a400 <_dtoa_r+0x6a8>
 800a54e:	2300      	movs	r3, #0
 800a550:	e786      	b.n	800a460 <_dtoa_r+0x708>
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	e784      	b.n	800a460 <_dtoa_r+0x708>
 800a556:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a558:	e783      	b.n	800a462 <_dtoa_r+0x70a>
 800a55a:	2300      	movs	r3, #0
 800a55c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a55e:	e784      	b.n	800a46a <_dtoa_r+0x712>
 800a560:	d09d      	beq.n	800a49e <_dtoa_r+0x746>
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	321c      	adds	r2, #28
 800a566:	4413      	add	r3, r2
 800a568:	9305      	str	r3, [sp, #20]
 800a56a:	9b06      	ldr	r3, [sp, #24]
 800a56c:	4416      	add	r6, r2
 800a56e:	4413      	add	r3, r2
 800a570:	e794      	b.n	800a49c <_dtoa_r+0x744>
 800a572:	4602      	mov	r2, r0
 800a574:	e7f5      	b.n	800a562 <_dtoa_r+0x80a>
 800a576:	f1ba 0f00 	cmp.w	sl, #0
 800a57a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a57e:	46d3      	mov	fp, sl
 800a580:	dc21      	bgt.n	800a5c6 <_dtoa_r+0x86e>
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	2b02      	cmp	r3, #2
 800a586:	dd1e      	ble.n	800a5c6 <_dtoa_r+0x86e>
 800a588:	f1bb 0f00 	cmp.w	fp, #0
 800a58c:	f47f aeb7 	bne.w	800a2fe <_dtoa_r+0x5a6>
 800a590:	4621      	mov	r1, r4
 800a592:	465b      	mov	r3, fp
 800a594:	2205      	movs	r2, #5
 800a596:	4648      	mov	r0, r9
 800a598:	f000 fa96 	bl	800aac8 <__multadd>
 800a59c:	4601      	mov	r1, r0
 800a59e:	4604      	mov	r4, r0
 800a5a0:	9801      	ldr	r0, [sp, #4]
 800a5a2:	f000 fca9 	bl	800aef8 <__mcmp>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f77f aea9 	ble.w	800a2fe <_dtoa_r+0x5a6>
 800a5ac:	463e      	mov	r6, r7
 800a5ae:	2331      	movs	r3, #49	@ 0x31
 800a5b0:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b4:	9b04      	ldr	r3, [sp, #16]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	e6a4      	b.n	800a306 <_dtoa_r+0x5ae>
 800a5bc:	f8cd 8010 	str.w	r8, [sp, #16]
 800a5c0:	4654      	mov	r4, sl
 800a5c2:	4625      	mov	r5, r4
 800a5c4:	e7f2      	b.n	800a5ac <_dtoa_r+0x854>
 800a5c6:	9b08      	ldr	r3, [sp, #32]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8103 	beq.w	800a7d4 <_dtoa_r+0xa7c>
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	dd05      	ble.n	800a5de <_dtoa_r+0x886>
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	4648      	mov	r0, r9
 800a5d8:	f000 fc22 	bl	800ae20 <__lshift>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d058      	beq.n	800a696 <_dtoa_r+0x93e>
 800a5e4:	6869      	ldr	r1, [r5, #4]
 800a5e6:	4648      	mov	r0, r9
 800a5e8:	f000 fa0c 	bl	800aa04 <_Balloc>
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	b928      	cbnz	r0, 800a5fc <_dtoa_r+0x8a4>
 800a5f0:	4b82      	ldr	r3, [pc, #520]	@ (800a7fc <_dtoa_r+0xaa4>)
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5f8:	f7ff bbc7 	b.w	8009d8a <_dtoa_r+0x32>
 800a5fc:	692a      	ldr	r2, [r5, #16]
 800a5fe:	3202      	adds	r2, #2
 800a600:	0092      	lsls	r2, r2, #2
 800a602:	f105 010c 	add.w	r1, r5, #12
 800a606:	300c      	adds	r0, #12
 800a608:	f001 f800 	bl	800b60c <memcpy>
 800a60c:	2201      	movs	r2, #1
 800a60e:	4631      	mov	r1, r6
 800a610:	4648      	mov	r0, r9
 800a612:	f000 fc05 	bl	800ae20 <__lshift>
 800a616:	1c7b      	adds	r3, r7, #1
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	eb07 030b 	add.w	r3, r7, fp
 800a61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	46a8      	mov	r8, r5
 800a628:	9308      	str	r3, [sp, #32]
 800a62a:	4605      	mov	r5, r0
 800a62c:	9b05      	ldr	r3, [sp, #20]
 800a62e:	9801      	ldr	r0, [sp, #4]
 800a630:	4621      	mov	r1, r4
 800a632:	f103 3bff 	add.w	fp, r3, #4294967295
 800a636:	f7ff fb04 	bl	8009c42 <quorem>
 800a63a:	4641      	mov	r1, r8
 800a63c:	9002      	str	r0, [sp, #8]
 800a63e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a642:	9801      	ldr	r0, [sp, #4]
 800a644:	f000 fc58 	bl	800aef8 <__mcmp>
 800a648:	462a      	mov	r2, r5
 800a64a:	9006      	str	r0, [sp, #24]
 800a64c:	4621      	mov	r1, r4
 800a64e:	4648      	mov	r0, r9
 800a650:	f000 fc6e 	bl	800af30 <__mdiff>
 800a654:	68c2      	ldr	r2, [r0, #12]
 800a656:	4606      	mov	r6, r0
 800a658:	b9fa      	cbnz	r2, 800a69a <_dtoa_r+0x942>
 800a65a:	4601      	mov	r1, r0
 800a65c:	9801      	ldr	r0, [sp, #4]
 800a65e:	f000 fc4b 	bl	800aef8 <__mcmp>
 800a662:	4602      	mov	r2, r0
 800a664:	4631      	mov	r1, r6
 800a666:	4648      	mov	r0, r9
 800a668:	920a      	str	r2, [sp, #40]	@ 0x28
 800a66a:	f000 fa0b 	bl	800aa84 <_Bfree>
 800a66e:	9b07      	ldr	r3, [sp, #28]
 800a670:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a672:	9e05      	ldr	r6, [sp, #20]
 800a674:	ea43 0102 	orr.w	r1, r3, r2
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	4319      	orrs	r1, r3
 800a67c:	d10f      	bne.n	800a69e <_dtoa_r+0x946>
 800a67e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a682:	d028      	beq.n	800a6d6 <_dtoa_r+0x97e>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd02      	ble.n	800a690 <_dtoa_r+0x938>
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a690:	f88b a000 	strb.w	sl, [fp]
 800a694:	e639      	b.n	800a30a <_dtoa_r+0x5b2>
 800a696:	4628      	mov	r0, r5
 800a698:	e7bd      	b.n	800a616 <_dtoa_r+0x8be>
 800a69a:	2201      	movs	r2, #1
 800a69c:	e7e2      	b.n	800a664 <_dtoa_r+0x90c>
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	db04      	blt.n	800a6ae <_dtoa_r+0x956>
 800a6a4:	9907      	ldr	r1, [sp, #28]
 800a6a6:	430b      	orrs	r3, r1
 800a6a8:	9908      	ldr	r1, [sp, #32]
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	d120      	bne.n	800a6f0 <_dtoa_r+0x998>
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	ddee      	ble.n	800a690 <_dtoa_r+0x938>
 800a6b2:	9901      	ldr	r1, [sp, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	4648      	mov	r0, r9
 800a6b8:	f000 fbb2 	bl	800ae20 <__lshift>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	9001      	str	r0, [sp, #4]
 800a6c0:	f000 fc1a 	bl	800aef8 <__mcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	dc03      	bgt.n	800a6d0 <_dtoa_r+0x978>
 800a6c8:	d1e2      	bne.n	800a690 <_dtoa_r+0x938>
 800a6ca:	f01a 0f01 	tst.w	sl, #1
 800a6ce:	d0df      	beq.n	800a690 <_dtoa_r+0x938>
 800a6d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a6d4:	d1d9      	bne.n	800a68a <_dtoa_r+0x932>
 800a6d6:	2339      	movs	r3, #57	@ 0x39
 800a6d8:	f88b 3000 	strb.w	r3, [fp]
 800a6dc:	4633      	mov	r3, r6
 800a6de:	461e      	mov	r6, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6e6:	2a39      	cmp	r2, #57	@ 0x39
 800a6e8:	d053      	beq.n	800a792 <_dtoa_r+0xa3a>
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	e60c      	b.n	800a30a <_dtoa_r+0x5b2>
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	dd07      	ble.n	800a704 <_dtoa_r+0x9ac>
 800a6f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a6f8:	d0ed      	beq.n	800a6d6 <_dtoa_r+0x97e>
 800a6fa:	f10a 0301 	add.w	r3, sl, #1
 800a6fe:	f88b 3000 	strb.w	r3, [fp]
 800a702:	e602      	b.n	800a30a <_dtoa_r+0x5b2>
 800a704:	9b05      	ldr	r3, [sp, #20]
 800a706:	9a05      	ldr	r2, [sp, #20]
 800a708:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70e:	4293      	cmp	r3, r2
 800a710:	d029      	beq.n	800a766 <_dtoa_r+0xa0e>
 800a712:	9901      	ldr	r1, [sp, #4]
 800a714:	2300      	movs	r3, #0
 800a716:	220a      	movs	r2, #10
 800a718:	4648      	mov	r0, r9
 800a71a:	f000 f9d5 	bl	800aac8 <__multadd>
 800a71e:	45a8      	cmp	r8, r5
 800a720:	9001      	str	r0, [sp, #4]
 800a722:	f04f 0300 	mov.w	r3, #0
 800a726:	f04f 020a 	mov.w	r2, #10
 800a72a:	4641      	mov	r1, r8
 800a72c:	4648      	mov	r0, r9
 800a72e:	d107      	bne.n	800a740 <_dtoa_r+0x9e8>
 800a730:	f000 f9ca 	bl	800aac8 <__multadd>
 800a734:	4680      	mov	r8, r0
 800a736:	4605      	mov	r5, r0
 800a738:	9b05      	ldr	r3, [sp, #20]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	e775      	b.n	800a62c <_dtoa_r+0x8d4>
 800a740:	f000 f9c2 	bl	800aac8 <__multadd>
 800a744:	4629      	mov	r1, r5
 800a746:	4680      	mov	r8, r0
 800a748:	2300      	movs	r3, #0
 800a74a:	220a      	movs	r2, #10
 800a74c:	4648      	mov	r0, r9
 800a74e:	f000 f9bb 	bl	800aac8 <__multadd>
 800a752:	4605      	mov	r5, r0
 800a754:	e7f0      	b.n	800a738 <_dtoa_r+0x9e0>
 800a756:	f1bb 0f00 	cmp.w	fp, #0
 800a75a:	bfcc      	ite	gt
 800a75c:	465e      	movgt	r6, fp
 800a75e:	2601      	movle	r6, #1
 800a760:	443e      	add	r6, r7
 800a762:	f04f 0800 	mov.w	r8, #0
 800a766:	9901      	ldr	r1, [sp, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	4648      	mov	r0, r9
 800a76c:	f000 fb58 	bl	800ae20 <__lshift>
 800a770:	4621      	mov	r1, r4
 800a772:	9001      	str	r0, [sp, #4]
 800a774:	f000 fbc0 	bl	800aef8 <__mcmp>
 800a778:	2800      	cmp	r0, #0
 800a77a:	dcaf      	bgt.n	800a6dc <_dtoa_r+0x984>
 800a77c:	d102      	bne.n	800a784 <_dtoa_r+0xa2c>
 800a77e:	f01a 0f01 	tst.w	sl, #1
 800a782:	d1ab      	bne.n	800a6dc <_dtoa_r+0x984>
 800a784:	4633      	mov	r3, r6
 800a786:	461e      	mov	r6, r3
 800a788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a78c:	2a30      	cmp	r2, #48	@ 0x30
 800a78e:	d0fa      	beq.n	800a786 <_dtoa_r+0xa2e>
 800a790:	e5bb      	b.n	800a30a <_dtoa_r+0x5b2>
 800a792:	429f      	cmp	r7, r3
 800a794:	d1a3      	bne.n	800a6de <_dtoa_r+0x986>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	3301      	adds	r3, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	2331      	movs	r3, #49	@ 0x31
 800a79e:	703b      	strb	r3, [r7, #0]
 800a7a0:	e5b3      	b.n	800a30a <_dtoa_r+0x5b2>
 800a7a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7a4:	4f16      	ldr	r7, [pc, #88]	@ (800a800 <_dtoa_r+0xaa8>)
 800a7a6:	b11b      	cbz	r3, 800a7b0 <_dtoa_r+0xa58>
 800a7a8:	f107 0308 	add.w	r3, r7, #8
 800a7ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	b011      	add	sp, #68	@ 0x44
 800a7b4:	ecbd 8b02 	vpop	{d8}
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	9b07      	ldr	r3, [sp, #28]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	f77f ae36 	ble.w	800a430 <_dtoa_r+0x6d8>
 800a7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e656      	b.n	800a47a <_dtoa_r+0x722>
 800a7cc:	f1bb 0f00 	cmp.w	fp, #0
 800a7d0:	f77f aed7 	ble.w	800a582 <_dtoa_r+0x82a>
 800a7d4:	463e      	mov	r6, r7
 800a7d6:	9801      	ldr	r0, [sp, #4]
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f7ff fa32 	bl	8009c42 <quorem>
 800a7de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a7e2:	f806 ab01 	strb.w	sl, [r6], #1
 800a7e6:	1bf2      	subs	r2, r6, r7
 800a7e8:	4593      	cmp	fp, r2
 800a7ea:	ddb4      	ble.n	800a756 <_dtoa_r+0x9fe>
 800a7ec:	9901      	ldr	r1, [sp, #4]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	220a      	movs	r2, #10
 800a7f2:	4648      	mov	r0, r9
 800a7f4:	f000 f968 	bl	800aac8 <__multadd>
 800a7f8:	9001      	str	r0, [sp, #4]
 800a7fa:	e7ec      	b.n	800a7d6 <_dtoa_r+0xa7e>
 800a7fc:	0800b958 	.word	0x0800b958
 800a800:	0800b8dc 	.word	0x0800b8dc

0800a804 <_free_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4605      	mov	r5, r0
 800a808:	2900      	cmp	r1, #0
 800a80a:	d041      	beq.n	800a890 <_free_r+0x8c>
 800a80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a810:	1f0c      	subs	r4, r1, #4
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfb8      	it	lt
 800a816:	18e4      	addlt	r4, r4, r3
 800a818:	f000 f8e8 	bl	800a9ec <__malloc_lock>
 800a81c:	4a1d      	ldr	r2, [pc, #116]	@ (800a894 <_free_r+0x90>)
 800a81e:	6813      	ldr	r3, [r2, #0]
 800a820:	b933      	cbnz	r3, 800a830 <_free_r+0x2c>
 800a822:	6063      	str	r3, [r4, #4]
 800a824:	6014      	str	r4, [r2, #0]
 800a826:	4628      	mov	r0, r5
 800a828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a82c:	f000 b8e4 	b.w	800a9f8 <__malloc_unlock>
 800a830:	42a3      	cmp	r3, r4
 800a832:	d908      	bls.n	800a846 <_free_r+0x42>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	1821      	adds	r1, r4, r0
 800a838:	428b      	cmp	r3, r1
 800a83a:	bf01      	itttt	eq
 800a83c:	6819      	ldreq	r1, [r3, #0]
 800a83e:	685b      	ldreq	r3, [r3, #4]
 800a840:	1809      	addeq	r1, r1, r0
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	e7ed      	b.n	800a822 <_free_r+0x1e>
 800a846:	461a      	mov	r2, r3
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	b10b      	cbz	r3, 800a850 <_free_r+0x4c>
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	d9fa      	bls.n	800a846 <_free_r+0x42>
 800a850:	6811      	ldr	r1, [r2, #0]
 800a852:	1850      	adds	r0, r2, r1
 800a854:	42a0      	cmp	r0, r4
 800a856:	d10b      	bne.n	800a870 <_free_r+0x6c>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	4401      	add	r1, r0
 800a85c:	1850      	adds	r0, r2, r1
 800a85e:	4283      	cmp	r3, r0
 800a860:	6011      	str	r1, [r2, #0]
 800a862:	d1e0      	bne.n	800a826 <_free_r+0x22>
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	6053      	str	r3, [r2, #4]
 800a86a:	4408      	add	r0, r1
 800a86c:	6010      	str	r0, [r2, #0]
 800a86e:	e7da      	b.n	800a826 <_free_r+0x22>
 800a870:	d902      	bls.n	800a878 <_free_r+0x74>
 800a872:	230c      	movs	r3, #12
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	e7d6      	b.n	800a826 <_free_r+0x22>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	1821      	adds	r1, r4, r0
 800a87c:	428b      	cmp	r3, r1
 800a87e:	bf04      	itt	eq
 800a880:	6819      	ldreq	r1, [r3, #0]
 800a882:	685b      	ldreq	r3, [r3, #4]
 800a884:	6063      	str	r3, [r4, #4]
 800a886:	bf04      	itt	eq
 800a888:	1809      	addeq	r1, r1, r0
 800a88a:	6021      	streq	r1, [r4, #0]
 800a88c:	6054      	str	r4, [r2, #4]
 800a88e:	e7ca      	b.n	800a826 <_free_r+0x22>
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	bf00      	nop
 800a894:	240005f8 	.word	0x240005f8

0800a898 <malloc>:
 800a898:	4b02      	ldr	r3, [pc, #8]	@ (800a8a4 <malloc+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f000 b825 	b.w	800a8ec <_malloc_r>
 800a8a2:	bf00      	nop
 800a8a4:	2400001c 	.word	0x2400001c

0800a8a8 <sbrk_aligned>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a8e8 <sbrk_aligned+0x40>)
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	6831      	ldr	r1, [r6, #0]
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	b911      	cbnz	r1, 800a8ba <sbrk_aligned+0x12>
 800a8b4:	f000 fe9a 	bl	800b5ec <_sbrk_r>
 800a8b8:	6030      	str	r0, [r6, #0]
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f000 fe95 	bl	800b5ec <_sbrk_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d103      	bne.n	800a8ce <sbrk_aligned+0x26>
 800a8c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
 800a8ce:	1cc4      	adds	r4, r0, #3
 800a8d0:	f024 0403 	bic.w	r4, r4, #3
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d0f8      	beq.n	800a8ca <sbrk_aligned+0x22>
 800a8d8:	1a21      	subs	r1, r4, r0
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 fe86 	bl	800b5ec <_sbrk_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d1f2      	bne.n	800a8ca <sbrk_aligned+0x22>
 800a8e4:	e7ef      	b.n	800a8c6 <sbrk_aligned+0x1e>
 800a8e6:	bf00      	nop
 800a8e8:	240005f4 	.word	0x240005f4

0800a8ec <_malloc_r>:
 800a8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f0:	1ccd      	adds	r5, r1, #3
 800a8f2:	f025 0503 	bic.w	r5, r5, #3
 800a8f6:	3508      	adds	r5, #8
 800a8f8:	2d0c      	cmp	r5, #12
 800a8fa:	bf38      	it	cc
 800a8fc:	250c      	movcc	r5, #12
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	4606      	mov	r6, r0
 800a902:	db01      	blt.n	800a908 <_malloc_r+0x1c>
 800a904:	42a9      	cmp	r1, r5
 800a906:	d904      	bls.n	800a912 <_malloc_r+0x26>
 800a908:	230c      	movs	r3, #12
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	2000      	movs	r0, #0
 800a90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9e8 <_malloc_r+0xfc>
 800a916:	f000 f869 	bl	800a9ec <__malloc_lock>
 800a91a:	f8d8 3000 	ldr.w	r3, [r8]
 800a91e:	461c      	mov	r4, r3
 800a920:	bb44      	cbnz	r4, 800a974 <_malloc_r+0x88>
 800a922:	4629      	mov	r1, r5
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ffbf 	bl	800a8a8 <sbrk_aligned>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	4604      	mov	r4, r0
 800a92e:	d158      	bne.n	800a9e2 <_malloc_r+0xf6>
 800a930:	f8d8 4000 	ldr.w	r4, [r8]
 800a934:	4627      	mov	r7, r4
 800a936:	2f00      	cmp	r7, #0
 800a938:	d143      	bne.n	800a9c2 <_malloc_r+0xd6>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	d04b      	beq.n	800a9d6 <_malloc_r+0xea>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	4639      	mov	r1, r7
 800a942:	4630      	mov	r0, r6
 800a944:	eb04 0903 	add.w	r9, r4, r3
 800a948:	f000 fe50 	bl	800b5ec <_sbrk_r>
 800a94c:	4581      	cmp	r9, r0
 800a94e:	d142      	bne.n	800a9d6 <_malloc_r+0xea>
 800a950:	6821      	ldr	r1, [r4, #0]
 800a952:	1a6d      	subs	r5, r5, r1
 800a954:	4629      	mov	r1, r5
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ffa6 	bl	800a8a8 <sbrk_aligned>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d03a      	beq.n	800a9d6 <_malloc_r+0xea>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	442b      	add	r3, r5
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	f8d8 3000 	ldr.w	r3, [r8]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	bb62      	cbnz	r2, 800a9c8 <_malloc_r+0xdc>
 800a96e:	f8c8 7000 	str.w	r7, [r8]
 800a972:	e00f      	b.n	800a994 <_malloc_r+0xa8>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	1b52      	subs	r2, r2, r5
 800a978:	d420      	bmi.n	800a9bc <_malloc_r+0xd0>
 800a97a:	2a0b      	cmp	r2, #11
 800a97c:	d917      	bls.n	800a9ae <_malloc_r+0xc2>
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	42a3      	cmp	r3, r4
 800a982:	6025      	str	r5, [r4, #0]
 800a984:	bf18      	it	ne
 800a986:	6059      	strne	r1, [r3, #4]
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	bf08      	it	eq
 800a98c:	f8c8 1000 	streq.w	r1, [r8]
 800a990:	5162      	str	r2, [r4, r5]
 800a992:	604b      	str	r3, [r1, #4]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f82f 	bl	800a9f8 <__malloc_unlock>
 800a99a:	f104 000b 	add.w	r0, r4, #11
 800a99e:	1d23      	adds	r3, r4, #4
 800a9a0:	f020 0007 	bic.w	r0, r0, #7
 800a9a4:	1ac2      	subs	r2, r0, r3
 800a9a6:	bf1c      	itt	ne
 800a9a8:	1a1b      	subne	r3, r3, r0
 800a9aa:	50a3      	strne	r3, [r4, r2]
 800a9ac:	e7af      	b.n	800a90e <_malloc_r+0x22>
 800a9ae:	6862      	ldr	r2, [r4, #4]
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	bf0c      	ite	eq
 800a9b4:	f8c8 2000 	streq.w	r2, [r8]
 800a9b8:	605a      	strne	r2, [r3, #4]
 800a9ba:	e7eb      	b.n	800a994 <_malloc_r+0xa8>
 800a9bc:	4623      	mov	r3, r4
 800a9be:	6864      	ldr	r4, [r4, #4]
 800a9c0:	e7ae      	b.n	800a920 <_malloc_r+0x34>
 800a9c2:	463c      	mov	r4, r7
 800a9c4:	687f      	ldr	r7, [r7, #4]
 800a9c6:	e7b6      	b.n	800a936 <_malloc_r+0x4a>
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d1fb      	bne.n	800a9c8 <_malloc_r+0xdc>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6053      	str	r3, [r2, #4]
 800a9d4:	e7de      	b.n	800a994 <_malloc_r+0xa8>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f000 f80c 	bl	800a9f8 <__malloc_unlock>
 800a9e0:	e794      	b.n	800a90c <_malloc_r+0x20>
 800a9e2:	6005      	str	r5, [r0, #0]
 800a9e4:	e7d6      	b.n	800a994 <_malloc_r+0xa8>
 800a9e6:	bf00      	nop
 800a9e8:	240005f8 	.word	0x240005f8

0800a9ec <__malloc_lock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_lock+0x8>)
 800a9ee:	f7ff b926 	b.w	8009c3e <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	240005f0 	.word	0x240005f0

0800a9f8 <__malloc_unlock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_unlock+0x8>)
 800a9fa:	f7ff b921 	b.w	8009c40 <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	240005f0 	.word	0x240005f0

0800aa04 <_Balloc>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	69c6      	ldr	r6, [r0, #28]
 800aa08:	4604      	mov	r4, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	b976      	cbnz	r6, 800aa2c <_Balloc+0x28>
 800aa0e:	2010      	movs	r0, #16
 800aa10:	f7ff ff42 	bl	800a898 <malloc>
 800aa14:	4602      	mov	r2, r0
 800aa16:	61e0      	str	r0, [r4, #28]
 800aa18:	b920      	cbnz	r0, 800aa24 <_Balloc+0x20>
 800aa1a:	4b18      	ldr	r3, [pc, #96]	@ (800aa7c <_Balloc+0x78>)
 800aa1c:	4818      	ldr	r0, [pc, #96]	@ (800aa80 <_Balloc+0x7c>)
 800aa1e:	216b      	movs	r1, #107	@ 0x6b
 800aa20:	f000 fe02 	bl	800b628 <__assert_func>
 800aa24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa28:	6006      	str	r6, [r0, #0]
 800aa2a:	60c6      	str	r6, [r0, #12]
 800aa2c:	69e6      	ldr	r6, [r4, #28]
 800aa2e:	68f3      	ldr	r3, [r6, #12]
 800aa30:	b183      	cbz	r3, 800aa54 <_Balloc+0x50>
 800aa32:	69e3      	ldr	r3, [r4, #28]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa3a:	b9b8      	cbnz	r0, 800aa6c <_Balloc+0x68>
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	fa01 f605 	lsl.w	r6, r1, r5
 800aa42:	1d72      	adds	r2, r6, #5
 800aa44:	0092      	lsls	r2, r2, #2
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 fe0c 	bl	800b664 <_calloc_r>
 800aa4c:	b160      	cbz	r0, 800aa68 <_Balloc+0x64>
 800aa4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa52:	e00e      	b.n	800aa72 <_Balloc+0x6e>
 800aa54:	2221      	movs	r2, #33	@ 0x21
 800aa56:	2104      	movs	r1, #4
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fe03 	bl	800b664 <_calloc_r>
 800aa5e:	69e3      	ldr	r3, [r4, #28]
 800aa60:	60f0      	str	r0, [r6, #12]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e4      	bne.n	800aa32 <_Balloc+0x2e>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	6802      	ldr	r2, [r0, #0]
 800aa6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa72:	2300      	movs	r3, #0
 800aa74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa78:	e7f7      	b.n	800aa6a <_Balloc+0x66>
 800aa7a:	bf00      	nop
 800aa7c:	0800b8e9 	.word	0x0800b8e9
 800aa80:	0800b969 	.word	0x0800b969

0800aa84 <_Bfree>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	69c6      	ldr	r6, [r0, #28]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	b976      	cbnz	r6, 800aaac <_Bfree+0x28>
 800aa8e:	2010      	movs	r0, #16
 800aa90:	f7ff ff02 	bl	800a898 <malloc>
 800aa94:	4602      	mov	r2, r0
 800aa96:	61e8      	str	r0, [r5, #28]
 800aa98:	b920      	cbnz	r0, 800aaa4 <_Bfree+0x20>
 800aa9a:	4b09      	ldr	r3, [pc, #36]	@ (800aac0 <_Bfree+0x3c>)
 800aa9c:	4809      	ldr	r0, [pc, #36]	@ (800aac4 <_Bfree+0x40>)
 800aa9e:	218f      	movs	r1, #143	@ 0x8f
 800aaa0:	f000 fdc2 	bl	800b628 <__assert_func>
 800aaa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaa8:	6006      	str	r6, [r0, #0]
 800aaaa:	60c6      	str	r6, [r0, #12]
 800aaac:	b13c      	cbz	r4, 800aabe <_Bfree+0x3a>
 800aaae:	69eb      	ldr	r3, [r5, #28]
 800aab0:	6862      	ldr	r2, [r4, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aab8:	6021      	str	r1, [r4, #0]
 800aaba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	0800b8e9 	.word	0x0800b8e9
 800aac4:	0800b969 	.word	0x0800b969

0800aac8 <__multadd>:
 800aac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aacc:	690d      	ldr	r5, [r1, #16]
 800aace:	4607      	mov	r7, r0
 800aad0:	460c      	mov	r4, r1
 800aad2:	461e      	mov	r6, r3
 800aad4:	f101 0c14 	add.w	ip, r1, #20
 800aad8:	2000      	movs	r0, #0
 800aada:	f8dc 3000 	ldr.w	r3, [ip]
 800aade:	b299      	uxth	r1, r3
 800aae0:	fb02 6101 	mla	r1, r2, r1, r6
 800aae4:	0c1e      	lsrs	r6, r3, #16
 800aae6:	0c0b      	lsrs	r3, r1, #16
 800aae8:	fb02 3306 	mla	r3, r2, r6, r3
 800aaec:	b289      	uxth	r1, r1
 800aaee:	3001      	adds	r0, #1
 800aaf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aaf4:	4285      	cmp	r5, r0
 800aaf6:	f84c 1b04 	str.w	r1, [ip], #4
 800aafa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aafe:	dcec      	bgt.n	800aada <__multadd+0x12>
 800ab00:	b30e      	cbz	r6, 800ab46 <__multadd+0x7e>
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dc19      	bgt.n	800ab3c <__multadd+0x74>
 800ab08:	6861      	ldr	r1, [r4, #4]
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	3101      	adds	r1, #1
 800ab0e:	f7ff ff79 	bl	800aa04 <_Balloc>
 800ab12:	4680      	mov	r8, r0
 800ab14:	b928      	cbnz	r0, 800ab22 <__multadd+0x5a>
 800ab16:	4602      	mov	r2, r0
 800ab18:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <__multadd+0x84>)
 800ab1a:	480d      	ldr	r0, [pc, #52]	@ (800ab50 <__multadd+0x88>)
 800ab1c:	21ba      	movs	r1, #186	@ 0xba
 800ab1e:	f000 fd83 	bl	800b628 <__assert_func>
 800ab22:	6922      	ldr	r2, [r4, #16]
 800ab24:	3202      	adds	r2, #2
 800ab26:	f104 010c 	add.w	r1, r4, #12
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	300c      	adds	r0, #12
 800ab2e:	f000 fd6d 	bl	800b60c <memcpy>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7ff ffa5 	bl	800aa84 <_Bfree>
 800ab3a:	4644      	mov	r4, r8
 800ab3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab40:	3501      	adds	r5, #1
 800ab42:	615e      	str	r6, [r3, #20]
 800ab44:	6125      	str	r5, [r4, #16]
 800ab46:	4620      	mov	r0, r4
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4c:	0800b958 	.word	0x0800b958
 800ab50:	0800b969 	.word	0x0800b969

0800ab54 <__hi0bits>:
 800ab54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab58:	4603      	mov	r3, r0
 800ab5a:	bf36      	itet	cc
 800ab5c:	0403      	lslcc	r3, r0, #16
 800ab5e:	2000      	movcs	r0, #0
 800ab60:	2010      	movcc	r0, #16
 800ab62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab66:	bf3c      	itt	cc
 800ab68:	021b      	lslcc	r3, r3, #8
 800ab6a:	3008      	addcc	r0, #8
 800ab6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab70:	bf3c      	itt	cc
 800ab72:	011b      	lslcc	r3, r3, #4
 800ab74:	3004      	addcc	r0, #4
 800ab76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab7a:	bf3c      	itt	cc
 800ab7c:	009b      	lslcc	r3, r3, #2
 800ab7e:	3002      	addcc	r0, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	db05      	blt.n	800ab90 <__hi0bits+0x3c>
 800ab84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab88:	f100 0001 	add.w	r0, r0, #1
 800ab8c:	bf08      	it	eq
 800ab8e:	2020      	moveq	r0, #32
 800ab90:	4770      	bx	lr

0800ab92 <__lo0bits>:
 800ab92:	6803      	ldr	r3, [r0, #0]
 800ab94:	4602      	mov	r2, r0
 800ab96:	f013 0007 	ands.w	r0, r3, #7
 800ab9a:	d00b      	beq.n	800abb4 <__lo0bits+0x22>
 800ab9c:	07d9      	lsls	r1, r3, #31
 800ab9e:	d421      	bmi.n	800abe4 <__lo0bits+0x52>
 800aba0:	0798      	lsls	r0, r3, #30
 800aba2:	bf49      	itett	mi
 800aba4:	085b      	lsrmi	r3, r3, #1
 800aba6:	089b      	lsrpl	r3, r3, #2
 800aba8:	2001      	movmi	r0, #1
 800abaa:	6013      	strmi	r3, [r2, #0]
 800abac:	bf5c      	itt	pl
 800abae:	6013      	strpl	r3, [r2, #0]
 800abb0:	2002      	movpl	r0, #2
 800abb2:	4770      	bx	lr
 800abb4:	b299      	uxth	r1, r3
 800abb6:	b909      	cbnz	r1, 800abbc <__lo0bits+0x2a>
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	2010      	movs	r0, #16
 800abbc:	b2d9      	uxtb	r1, r3
 800abbe:	b909      	cbnz	r1, 800abc4 <__lo0bits+0x32>
 800abc0:	3008      	adds	r0, #8
 800abc2:	0a1b      	lsrs	r3, r3, #8
 800abc4:	0719      	lsls	r1, r3, #28
 800abc6:	bf04      	itt	eq
 800abc8:	091b      	lsreq	r3, r3, #4
 800abca:	3004      	addeq	r0, #4
 800abcc:	0799      	lsls	r1, r3, #30
 800abce:	bf04      	itt	eq
 800abd0:	089b      	lsreq	r3, r3, #2
 800abd2:	3002      	addeq	r0, #2
 800abd4:	07d9      	lsls	r1, r3, #31
 800abd6:	d403      	bmi.n	800abe0 <__lo0bits+0x4e>
 800abd8:	085b      	lsrs	r3, r3, #1
 800abda:	f100 0001 	add.w	r0, r0, #1
 800abde:	d003      	beq.n	800abe8 <__lo0bits+0x56>
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	4770      	bx	lr
 800abe4:	2000      	movs	r0, #0
 800abe6:	4770      	bx	lr
 800abe8:	2020      	movs	r0, #32
 800abea:	4770      	bx	lr

0800abec <__i2b>:
 800abec:	b510      	push	{r4, lr}
 800abee:	460c      	mov	r4, r1
 800abf0:	2101      	movs	r1, #1
 800abf2:	f7ff ff07 	bl	800aa04 <_Balloc>
 800abf6:	4602      	mov	r2, r0
 800abf8:	b928      	cbnz	r0, 800ac06 <__i2b+0x1a>
 800abfa:	4b05      	ldr	r3, [pc, #20]	@ (800ac10 <__i2b+0x24>)
 800abfc:	4805      	ldr	r0, [pc, #20]	@ (800ac14 <__i2b+0x28>)
 800abfe:	f240 1145 	movw	r1, #325	@ 0x145
 800ac02:	f000 fd11 	bl	800b628 <__assert_func>
 800ac06:	2301      	movs	r3, #1
 800ac08:	6144      	str	r4, [r0, #20]
 800ac0a:	6103      	str	r3, [r0, #16]
 800ac0c:	bd10      	pop	{r4, pc}
 800ac0e:	bf00      	nop
 800ac10:	0800b958 	.word	0x0800b958
 800ac14:	0800b969 	.word	0x0800b969

0800ac18 <__multiply>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	4614      	mov	r4, r2
 800ac1e:	690a      	ldr	r2, [r1, #16]
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	bfa8      	it	ge
 800ac26:	4623      	movge	r3, r4
 800ac28:	460f      	mov	r7, r1
 800ac2a:	bfa4      	itt	ge
 800ac2c:	460c      	movge	r4, r1
 800ac2e:	461f      	movge	r7, r3
 800ac30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac38:	68a3      	ldr	r3, [r4, #8]
 800ac3a:	6861      	ldr	r1, [r4, #4]
 800ac3c:	eb0a 0609 	add.w	r6, sl, r9
 800ac40:	42b3      	cmp	r3, r6
 800ac42:	b085      	sub	sp, #20
 800ac44:	bfb8      	it	lt
 800ac46:	3101      	addlt	r1, #1
 800ac48:	f7ff fedc 	bl	800aa04 <_Balloc>
 800ac4c:	b930      	cbnz	r0, 800ac5c <__multiply+0x44>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	4b44      	ldr	r3, [pc, #272]	@ (800ad64 <__multiply+0x14c>)
 800ac52:	4845      	ldr	r0, [pc, #276]	@ (800ad68 <__multiply+0x150>)
 800ac54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac58:	f000 fce6 	bl	800b628 <__assert_func>
 800ac5c:	f100 0514 	add.w	r5, r0, #20
 800ac60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac64:	462b      	mov	r3, r5
 800ac66:	2200      	movs	r2, #0
 800ac68:	4543      	cmp	r3, r8
 800ac6a:	d321      	bcc.n	800acb0 <__multiply+0x98>
 800ac6c:	f107 0114 	add.w	r1, r7, #20
 800ac70:	f104 0214 	add.w	r2, r4, #20
 800ac74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac7c:	9302      	str	r3, [sp, #8]
 800ac7e:	1b13      	subs	r3, r2, r4
 800ac80:	3b15      	subs	r3, #21
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	3304      	adds	r3, #4
 800ac88:	f104 0715 	add.w	r7, r4, #21
 800ac8c:	42ba      	cmp	r2, r7
 800ac8e:	bf38      	it	cc
 800ac90:	2304      	movcc	r3, #4
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	9103      	str	r1, [sp, #12]
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	d80c      	bhi.n	800acb6 <__multiply+0x9e>
 800ac9c:	2e00      	cmp	r6, #0
 800ac9e:	dd03      	ble.n	800aca8 <__multiply+0x90>
 800aca0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d05b      	beq.n	800ad60 <__multiply+0x148>
 800aca8:	6106      	str	r6, [r0, #16]
 800acaa:	b005      	add	sp, #20
 800acac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb0:	f843 2b04 	str.w	r2, [r3], #4
 800acb4:	e7d8      	b.n	800ac68 <__multiply+0x50>
 800acb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800acba:	f1ba 0f00 	cmp.w	sl, #0
 800acbe:	d024      	beq.n	800ad0a <__multiply+0xf2>
 800acc0:	f104 0e14 	add.w	lr, r4, #20
 800acc4:	46a9      	mov	r9, r5
 800acc6:	f04f 0c00 	mov.w	ip, #0
 800acca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acce:	f8d9 3000 	ldr.w	r3, [r9]
 800acd2:	fa1f fb87 	uxth.w	fp, r7
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800acdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ace0:	f8d9 7000 	ldr.w	r7, [r9]
 800ace4:	4463      	add	r3, ip
 800ace6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acea:	fb0a c70b 	mla	r7, sl, fp, ip
 800acee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acf8:	4572      	cmp	r2, lr
 800acfa:	f849 3b04 	str.w	r3, [r9], #4
 800acfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad02:	d8e2      	bhi.n	800acca <__multiply+0xb2>
 800ad04:	9b01      	ldr	r3, [sp, #4]
 800ad06:	f845 c003 	str.w	ip, [r5, r3]
 800ad0a:	9b03      	ldr	r3, [sp, #12]
 800ad0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad10:	3104      	adds	r1, #4
 800ad12:	f1b9 0f00 	cmp.w	r9, #0
 800ad16:	d021      	beq.n	800ad5c <__multiply+0x144>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	f104 0c14 	add.w	ip, r4, #20
 800ad1e:	46ae      	mov	lr, r5
 800ad20:	f04f 0a00 	mov.w	sl, #0
 800ad24:	f8bc b000 	ldrh.w	fp, [ip]
 800ad28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad2c:	fb09 770b 	mla	r7, r9, fp, r7
 800ad30:	4457      	add	r7, sl
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad38:	f84e 3b04 	str.w	r3, [lr], #4
 800ad3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad44:	f8be 3000 	ldrh.w	r3, [lr]
 800ad48:	fb09 330a 	mla	r3, r9, sl, r3
 800ad4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad50:	4562      	cmp	r2, ip
 800ad52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad56:	d8e5      	bhi.n	800ad24 <__multiply+0x10c>
 800ad58:	9f01      	ldr	r7, [sp, #4]
 800ad5a:	51eb      	str	r3, [r5, r7]
 800ad5c:	3504      	adds	r5, #4
 800ad5e:	e799      	b.n	800ac94 <__multiply+0x7c>
 800ad60:	3e01      	subs	r6, #1
 800ad62:	e79b      	b.n	800ac9c <__multiply+0x84>
 800ad64:	0800b958 	.word	0x0800b958
 800ad68:	0800b969 	.word	0x0800b969

0800ad6c <__pow5mult>:
 800ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad70:	4615      	mov	r5, r2
 800ad72:	f012 0203 	ands.w	r2, r2, #3
 800ad76:	4607      	mov	r7, r0
 800ad78:	460e      	mov	r6, r1
 800ad7a:	d007      	beq.n	800ad8c <__pow5mult+0x20>
 800ad7c:	4c25      	ldr	r4, [pc, #148]	@ (800ae14 <__pow5mult+0xa8>)
 800ad7e:	3a01      	subs	r2, #1
 800ad80:	2300      	movs	r3, #0
 800ad82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad86:	f7ff fe9f 	bl	800aac8 <__multadd>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	10ad      	asrs	r5, r5, #2
 800ad8e:	d03d      	beq.n	800ae0c <__pow5mult+0xa0>
 800ad90:	69fc      	ldr	r4, [r7, #28]
 800ad92:	b97c      	cbnz	r4, 800adb4 <__pow5mult+0x48>
 800ad94:	2010      	movs	r0, #16
 800ad96:	f7ff fd7f 	bl	800a898 <malloc>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	61f8      	str	r0, [r7, #28]
 800ad9e:	b928      	cbnz	r0, 800adac <__pow5mult+0x40>
 800ada0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae18 <__pow5mult+0xac>)
 800ada2:	481e      	ldr	r0, [pc, #120]	@ (800ae1c <__pow5mult+0xb0>)
 800ada4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ada8:	f000 fc3e 	bl	800b628 <__assert_func>
 800adac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb0:	6004      	str	r4, [r0, #0]
 800adb2:	60c4      	str	r4, [r0, #12]
 800adb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adbc:	b94c      	cbnz	r4, 800add2 <__pow5mult+0x66>
 800adbe:	f240 2171 	movw	r1, #625	@ 0x271
 800adc2:	4638      	mov	r0, r7
 800adc4:	f7ff ff12 	bl	800abec <__i2b>
 800adc8:	2300      	movs	r3, #0
 800adca:	f8c8 0008 	str.w	r0, [r8, #8]
 800adce:	4604      	mov	r4, r0
 800add0:	6003      	str	r3, [r0, #0]
 800add2:	f04f 0900 	mov.w	r9, #0
 800add6:	07eb      	lsls	r3, r5, #31
 800add8:	d50a      	bpl.n	800adf0 <__pow5mult+0x84>
 800adda:	4631      	mov	r1, r6
 800addc:	4622      	mov	r2, r4
 800adde:	4638      	mov	r0, r7
 800ade0:	f7ff ff1a 	bl	800ac18 <__multiply>
 800ade4:	4631      	mov	r1, r6
 800ade6:	4680      	mov	r8, r0
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff fe4b 	bl	800aa84 <_Bfree>
 800adee:	4646      	mov	r6, r8
 800adf0:	106d      	asrs	r5, r5, #1
 800adf2:	d00b      	beq.n	800ae0c <__pow5mult+0xa0>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	b938      	cbnz	r0, 800ae08 <__pow5mult+0x9c>
 800adf8:	4622      	mov	r2, r4
 800adfa:	4621      	mov	r1, r4
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff ff0b 	bl	800ac18 <__multiply>
 800ae02:	6020      	str	r0, [r4, #0]
 800ae04:	f8c0 9000 	str.w	r9, [r0]
 800ae08:	4604      	mov	r4, r0
 800ae0a:	e7e4      	b.n	800add6 <__pow5mult+0x6a>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae12:	bf00      	nop
 800ae14:	0800b9c4 	.word	0x0800b9c4
 800ae18:	0800b8e9 	.word	0x0800b8e9
 800ae1c:	0800b969 	.word	0x0800b969

0800ae20 <__lshift>:
 800ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	460c      	mov	r4, r1
 800ae26:	6849      	ldr	r1, [r1, #4]
 800ae28:	6923      	ldr	r3, [r4, #16]
 800ae2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	4607      	mov	r7, r0
 800ae32:	4691      	mov	r9, r2
 800ae34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae38:	f108 0601 	add.w	r6, r8, #1
 800ae3c:	42b3      	cmp	r3, r6
 800ae3e:	db0b      	blt.n	800ae58 <__lshift+0x38>
 800ae40:	4638      	mov	r0, r7
 800ae42:	f7ff fddf 	bl	800aa04 <_Balloc>
 800ae46:	4605      	mov	r5, r0
 800ae48:	b948      	cbnz	r0, 800ae5e <__lshift+0x3e>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4b28      	ldr	r3, [pc, #160]	@ (800aef0 <__lshift+0xd0>)
 800ae4e:	4829      	ldr	r0, [pc, #164]	@ (800aef4 <__lshift+0xd4>)
 800ae50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae54:	f000 fbe8 	bl	800b628 <__assert_func>
 800ae58:	3101      	adds	r1, #1
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	e7ee      	b.n	800ae3c <__lshift+0x1c>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f100 0114 	add.w	r1, r0, #20
 800ae64:	f100 0210 	add.w	r2, r0, #16
 800ae68:	4618      	mov	r0, r3
 800ae6a:	4553      	cmp	r3, sl
 800ae6c:	db33      	blt.n	800aed6 <__lshift+0xb6>
 800ae6e:	6920      	ldr	r0, [r4, #16]
 800ae70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae74:	f104 0314 	add.w	r3, r4, #20
 800ae78:	f019 091f 	ands.w	r9, r9, #31
 800ae7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae84:	d02b      	beq.n	800aede <__lshift+0xbe>
 800ae86:	f1c9 0e20 	rsb	lr, r9, #32
 800ae8a:	468a      	mov	sl, r1
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	fa00 f009 	lsl.w	r0, r0, r9
 800ae94:	4310      	orrs	r0, r2
 800ae96:	f84a 0b04 	str.w	r0, [sl], #4
 800ae9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9e:	459c      	cmp	ip, r3
 800aea0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aea4:	d8f3      	bhi.n	800ae8e <__lshift+0x6e>
 800aea6:	ebac 0304 	sub.w	r3, ip, r4
 800aeaa:	3b15      	subs	r3, #21
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	f104 0015 	add.w	r0, r4, #21
 800aeb6:	4584      	cmp	ip, r0
 800aeb8:	bf38      	it	cc
 800aeba:	2304      	movcc	r3, #4
 800aebc:	50ca      	str	r2, [r1, r3]
 800aebe:	b10a      	cbz	r2, 800aec4 <__lshift+0xa4>
 800aec0:	f108 0602 	add.w	r6, r8, #2
 800aec4:	3e01      	subs	r6, #1
 800aec6:	4638      	mov	r0, r7
 800aec8:	612e      	str	r6, [r5, #16]
 800aeca:	4621      	mov	r1, r4
 800aecc:	f7ff fdda 	bl	800aa84 <_Bfree>
 800aed0:	4628      	mov	r0, r5
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeda:	3301      	adds	r3, #1
 800aedc:	e7c5      	b.n	800ae6a <__lshift+0x4a>
 800aede:	3904      	subs	r1, #4
 800aee0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aee8:	459c      	cmp	ip, r3
 800aeea:	d8f9      	bhi.n	800aee0 <__lshift+0xc0>
 800aeec:	e7ea      	b.n	800aec4 <__lshift+0xa4>
 800aeee:	bf00      	nop
 800aef0:	0800b958 	.word	0x0800b958
 800aef4:	0800b969 	.word	0x0800b969

0800aef8 <__mcmp>:
 800aef8:	690a      	ldr	r2, [r1, #16]
 800aefa:	4603      	mov	r3, r0
 800aefc:	6900      	ldr	r0, [r0, #16]
 800aefe:	1a80      	subs	r0, r0, r2
 800af00:	b530      	push	{r4, r5, lr}
 800af02:	d10e      	bne.n	800af22 <__mcmp+0x2a>
 800af04:	3314      	adds	r3, #20
 800af06:	3114      	adds	r1, #20
 800af08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af18:	4295      	cmp	r5, r2
 800af1a:	d003      	beq.n	800af24 <__mcmp+0x2c>
 800af1c:	d205      	bcs.n	800af2a <__mcmp+0x32>
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	bd30      	pop	{r4, r5, pc}
 800af24:	42a3      	cmp	r3, r4
 800af26:	d3f3      	bcc.n	800af10 <__mcmp+0x18>
 800af28:	e7fb      	b.n	800af22 <__mcmp+0x2a>
 800af2a:	2001      	movs	r0, #1
 800af2c:	e7f9      	b.n	800af22 <__mcmp+0x2a>
	...

0800af30 <__mdiff>:
 800af30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	4689      	mov	r9, r1
 800af36:	4606      	mov	r6, r0
 800af38:	4611      	mov	r1, r2
 800af3a:	4648      	mov	r0, r9
 800af3c:	4614      	mov	r4, r2
 800af3e:	f7ff ffdb 	bl	800aef8 <__mcmp>
 800af42:	1e05      	subs	r5, r0, #0
 800af44:	d112      	bne.n	800af6c <__mdiff+0x3c>
 800af46:	4629      	mov	r1, r5
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff fd5b 	bl	800aa04 <_Balloc>
 800af4e:	4602      	mov	r2, r0
 800af50:	b928      	cbnz	r0, 800af5e <__mdiff+0x2e>
 800af52:	4b3f      	ldr	r3, [pc, #252]	@ (800b050 <__mdiff+0x120>)
 800af54:	f240 2137 	movw	r1, #567	@ 0x237
 800af58:	483e      	ldr	r0, [pc, #248]	@ (800b054 <__mdiff+0x124>)
 800af5a:	f000 fb65 	bl	800b628 <__assert_func>
 800af5e:	2301      	movs	r3, #1
 800af60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af64:	4610      	mov	r0, r2
 800af66:	b003      	add	sp, #12
 800af68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6c:	bfbc      	itt	lt
 800af6e:	464b      	movlt	r3, r9
 800af70:	46a1      	movlt	r9, r4
 800af72:	4630      	mov	r0, r6
 800af74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af78:	bfba      	itte	lt
 800af7a:	461c      	movlt	r4, r3
 800af7c:	2501      	movlt	r5, #1
 800af7e:	2500      	movge	r5, #0
 800af80:	f7ff fd40 	bl	800aa04 <_Balloc>
 800af84:	4602      	mov	r2, r0
 800af86:	b918      	cbnz	r0, 800af90 <__mdiff+0x60>
 800af88:	4b31      	ldr	r3, [pc, #196]	@ (800b050 <__mdiff+0x120>)
 800af8a:	f240 2145 	movw	r1, #581	@ 0x245
 800af8e:	e7e3      	b.n	800af58 <__mdiff+0x28>
 800af90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af94:	6926      	ldr	r6, [r4, #16]
 800af96:	60c5      	str	r5, [r0, #12]
 800af98:	f109 0310 	add.w	r3, r9, #16
 800af9c:	f109 0514 	add.w	r5, r9, #20
 800afa0:	f104 0e14 	add.w	lr, r4, #20
 800afa4:	f100 0b14 	add.w	fp, r0, #20
 800afa8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	46d9      	mov	r9, fp
 800afb4:	f04f 0c00 	mov.w	ip, #0
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afc2:	9301      	str	r3, [sp, #4]
 800afc4:	fa1f f38a 	uxth.w	r3, sl
 800afc8:	4619      	mov	r1, r3
 800afca:	b283      	uxth	r3, r0
 800afcc:	1acb      	subs	r3, r1, r3
 800afce:	0c00      	lsrs	r0, r0, #16
 800afd0:	4463      	add	r3, ip
 800afd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afda:	b29b      	uxth	r3, r3
 800afdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afe0:	4576      	cmp	r6, lr
 800afe2:	f849 3b04 	str.w	r3, [r9], #4
 800afe6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afea:	d8e5      	bhi.n	800afb8 <__mdiff+0x88>
 800afec:	1b33      	subs	r3, r6, r4
 800afee:	3b15      	subs	r3, #21
 800aff0:	f023 0303 	bic.w	r3, r3, #3
 800aff4:	3415      	adds	r4, #21
 800aff6:	3304      	adds	r3, #4
 800aff8:	42a6      	cmp	r6, r4
 800affa:	bf38      	it	cc
 800affc:	2304      	movcc	r3, #4
 800affe:	441d      	add	r5, r3
 800b000:	445b      	add	r3, fp
 800b002:	461e      	mov	r6, r3
 800b004:	462c      	mov	r4, r5
 800b006:	4544      	cmp	r4, r8
 800b008:	d30e      	bcc.n	800b028 <__mdiff+0xf8>
 800b00a:	f108 0103 	add.w	r1, r8, #3
 800b00e:	1b49      	subs	r1, r1, r5
 800b010:	f021 0103 	bic.w	r1, r1, #3
 800b014:	3d03      	subs	r5, #3
 800b016:	45a8      	cmp	r8, r5
 800b018:	bf38      	it	cc
 800b01a:	2100      	movcc	r1, #0
 800b01c:	440b      	add	r3, r1
 800b01e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b022:	b191      	cbz	r1, 800b04a <__mdiff+0x11a>
 800b024:	6117      	str	r7, [r2, #16]
 800b026:	e79d      	b.n	800af64 <__mdiff+0x34>
 800b028:	f854 1b04 	ldr.w	r1, [r4], #4
 800b02c:	46e6      	mov	lr, ip
 800b02e:	0c08      	lsrs	r0, r1, #16
 800b030:	fa1c fc81 	uxtah	ip, ip, r1
 800b034:	4471      	add	r1, lr
 800b036:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b03a:	b289      	uxth	r1, r1
 800b03c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b040:	f846 1b04 	str.w	r1, [r6], #4
 800b044:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b048:	e7dd      	b.n	800b006 <__mdiff+0xd6>
 800b04a:	3f01      	subs	r7, #1
 800b04c:	e7e7      	b.n	800b01e <__mdiff+0xee>
 800b04e:	bf00      	nop
 800b050:	0800b958 	.word	0x0800b958
 800b054:	0800b969 	.word	0x0800b969

0800b058 <__d2b>:
 800b058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b05c:	460f      	mov	r7, r1
 800b05e:	2101      	movs	r1, #1
 800b060:	ec59 8b10 	vmov	r8, r9, d0
 800b064:	4616      	mov	r6, r2
 800b066:	f7ff fccd 	bl	800aa04 <_Balloc>
 800b06a:	4604      	mov	r4, r0
 800b06c:	b930      	cbnz	r0, 800b07c <__d2b+0x24>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b23      	ldr	r3, [pc, #140]	@ (800b100 <__d2b+0xa8>)
 800b072:	4824      	ldr	r0, [pc, #144]	@ (800b104 <__d2b+0xac>)
 800b074:	f240 310f 	movw	r1, #783	@ 0x30f
 800b078:	f000 fad6 	bl	800b628 <__assert_func>
 800b07c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b084:	b10d      	cbz	r5, 800b08a <__d2b+0x32>
 800b086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	f1b8 0300 	subs.w	r3, r8, #0
 800b090:	d023      	beq.n	800b0da <__d2b+0x82>
 800b092:	4668      	mov	r0, sp
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	f7ff fd7c 	bl	800ab92 <__lo0bits>
 800b09a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b09e:	b1d0      	cbz	r0, 800b0d6 <__d2b+0x7e>
 800b0a0:	f1c0 0320 	rsb	r3, r0, #32
 800b0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	40c2      	lsrs	r2, r0
 800b0ac:	6163      	str	r3, [r4, #20]
 800b0ae:	9201      	str	r2, [sp, #4]
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	61a3      	str	r3, [r4, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2201      	moveq	r2, #1
 800b0ba:	2202      	movne	r2, #2
 800b0bc:	6122      	str	r2, [r4, #16]
 800b0be:	b1a5      	cbz	r5, 800b0ea <__d2b+0x92>
 800b0c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0c4:	4405      	add	r5, r0
 800b0c6:	603d      	str	r5, [r7, #0]
 800b0c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0cc:	6030      	str	r0, [r6, #0]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d6:	6161      	str	r1, [r4, #20]
 800b0d8:	e7ea      	b.n	800b0b0 <__d2b+0x58>
 800b0da:	a801      	add	r0, sp, #4
 800b0dc:	f7ff fd59 	bl	800ab92 <__lo0bits>
 800b0e0:	9b01      	ldr	r3, [sp, #4]
 800b0e2:	6163      	str	r3, [r4, #20]
 800b0e4:	3020      	adds	r0, #32
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	e7e8      	b.n	800b0bc <__d2b+0x64>
 800b0ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0f2:	6038      	str	r0, [r7, #0]
 800b0f4:	6918      	ldr	r0, [r3, #16]
 800b0f6:	f7ff fd2d 	bl	800ab54 <__hi0bits>
 800b0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0fe:	e7e5      	b.n	800b0cc <__d2b+0x74>
 800b100:	0800b958 	.word	0x0800b958
 800b104:	0800b969 	.word	0x0800b969

0800b108 <__sfputc_r>:
 800b108:	6893      	ldr	r3, [r2, #8]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	b410      	push	{r4}
 800b110:	6093      	str	r3, [r2, #8]
 800b112:	da08      	bge.n	800b126 <__sfputc_r+0x1e>
 800b114:	6994      	ldr	r4, [r2, #24]
 800b116:	42a3      	cmp	r3, r4
 800b118:	db01      	blt.n	800b11e <__sfputc_r+0x16>
 800b11a:	290a      	cmp	r1, #10
 800b11c:	d103      	bne.n	800b126 <__sfputc_r+0x1e>
 800b11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b122:	f7fe bc7a 	b.w	8009a1a <__swbuf_r>
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	1c58      	adds	r0, r3, #1
 800b12a:	6010      	str	r0, [r2, #0]
 800b12c:	7019      	strb	r1, [r3, #0]
 800b12e:	4608      	mov	r0, r1
 800b130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <__sfputs_r>:
 800b136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b138:	4606      	mov	r6, r0
 800b13a:	460f      	mov	r7, r1
 800b13c:	4614      	mov	r4, r2
 800b13e:	18d5      	adds	r5, r2, r3
 800b140:	42ac      	cmp	r4, r5
 800b142:	d101      	bne.n	800b148 <__sfputs_r+0x12>
 800b144:	2000      	movs	r0, #0
 800b146:	e007      	b.n	800b158 <__sfputs_r+0x22>
 800b148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14c:	463a      	mov	r2, r7
 800b14e:	4630      	mov	r0, r6
 800b150:	f7ff ffda 	bl	800b108 <__sfputc_r>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d1f3      	bne.n	800b140 <__sfputs_r+0xa>
 800b158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b15c <_vfiprintf_r>:
 800b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	460d      	mov	r5, r1
 800b162:	b09d      	sub	sp, #116	@ 0x74
 800b164:	4614      	mov	r4, r2
 800b166:	4698      	mov	r8, r3
 800b168:	4606      	mov	r6, r0
 800b16a:	b118      	cbz	r0, 800b174 <_vfiprintf_r+0x18>
 800b16c:	6a03      	ldr	r3, [r0, #32]
 800b16e:	b90b      	cbnz	r3, 800b174 <_vfiprintf_r+0x18>
 800b170:	f7fe fb6a 	bl	8009848 <__sinit>
 800b174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b176:	07d9      	lsls	r1, r3, #31
 800b178:	d405      	bmi.n	800b186 <_vfiprintf_r+0x2a>
 800b17a:	89ab      	ldrh	r3, [r5, #12]
 800b17c:	059a      	lsls	r2, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_vfiprintf_r+0x2a>
 800b180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b182:	f7fe fd5c 	bl	8009c3e <__retarget_lock_acquire_recursive>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	071b      	lsls	r3, r3, #28
 800b18a:	d501      	bpl.n	800b190 <_vfiprintf_r+0x34>
 800b18c:	692b      	ldr	r3, [r5, #16]
 800b18e:	b99b      	cbnz	r3, 800b1b8 <_vfiprintf_r+0x5c>
 800b190:	4629      	mov	r1, r5
 800b192:	4630      	mov	r0, r6
 800b194:	f7fe fc80 	bl	8009a98 <__swsetup_r>
 800b198:	b170      	cbz	r0, 800b1b8 <_vfiprintf_r+0x5c>
 800b19a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b19c:	07dc      	lsls	r4, r3, #31
 800b19e:	d504      	bpl.n	800b1aa <_vfiprintf_r+0x4e>
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	b01d      	add	sp, #116	@ 0x74
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	0598      	lsls	r0, r3, #22
 800b1ae:	d4f7      	bmi.n	800b1a0 <_vfiprintf_r+0x44>
 800b1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b2:	f7fe fd45 	bl	8009c40 <__retarget_lock_release_recursive>
 800b1b6:	e7f3      	b.n	800b1a0 <_vfiprintf_r+0x44>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1bc:	2320      	movs	r3, #32
 800b1be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1c6:	2330      	movs	r3, #48	@ 0x30
 800b1c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b378 <_vfiprintf_r+0x21c>
 800b1cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1d0:	f04f 0901 	mov.w	r9, #1
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	469a      	mov	sl, r3
 800b1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1dc:	b10a      	cbz	r2, 800b1e2 <_vfiprintf_r+0x86>
 800b1de:	2a25      	cmp	r2, #37	@ 0x25
 800b1e0:	d1f9      	bne.n	800b1d6 <_vfiprintf_r+0x7a>
 800b1e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1e6:	d00b      	beq.n	800b200 <_vfiprintf_r+0xa4>
 800b1e8:	465b      	mov	r3, fp
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ffa1 	bl	800b136 <__sfputs_r>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	f000 80a7 	beq.w	800b348 <_vfiprintf_r+0x1ec>
 800b1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1fc:	445a      	add	r2, fp
 800b1fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b200:	f89a 3000 	ldrb.w	r3, [sl]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 809f 	beq.w	800b348 <_vfiprintf_r+0x1ec>
 800b20a:	2300      	movs	r3, #0
 800b20c:	f04f 32ff 	mov.w	r2, #4294967295
 800b210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b214:	f10a 0a01 	add.w	sl, sl, #1
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	9307      	str	r3, [sp, #28]
 800b21c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b220:	931a      	str	r3, [sp, #104]	@ 0x68
 800b222:	4654      	mov	r4, sl
 800b224:	2205      	movs	r2, #5
 800b226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22a:	4853      	ldr	r0, [pc, #332]	@ (800b378 <_vfiprintf_r+0x21c>)
 800b22c:	f7f5 f870 	bl	8000310 <memchr>
 800b230:	9a04      	ldr	r2, [sp, #16]
 800b232:	b9d8      	cbnz	r0, 800b26c <_vfiprintf_r+0x110>
 800b234:	06d1      	lsls	r1, r2, #27
 800b236:	bf44      	itt	mi
 800b238:	2320      	movmi	r3, #32
 800b23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b23e:	0713      	lsls	r3, r2, #28
 800b240:	bf44      	itt	mi
 800b242:	232b      	movmi	r3, #43	@ 0x2b
 800b244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b248:	f89a 3000 	ldrb.w	r3, [sl]
 800b24c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b24e:	d015      	beq.n	800b27c <_vfiprintf_r+0x120>
 800b250:	9a07      	ldr	r2, [sp, #28]
 800b252:	4654      	mov	r4, sl
 800b254:	2000      	movs	r0, #0
 800b256:	f04f 0c0a 	mov.w	ip, #10
 800b25a:	4621      	mov	r1, r4
 800b25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b260:	3b30      	subs	r3, #48	@ 0x30
 800b262:	2b09      	cmp	r3, #9
 800b264:	d94b      	bls.n	800b2fe <_vfiprintf_r+0x1a2>
 800b266:	b1b0      	cbz	r0, 800b296 <_vfiprintf_r+0x13a>
 800b268:	9207      	str	r2, [sp, #28]
 800b26a:	e014      	b.n	800b296 <_vfiprintf_r+0x13a>
 800b26c:	eba0 0308 	sub.w	r3, r0, r8
 800b270:	fa09 f303 	lsl.w	r3, r9, r3
 800b274:	4313      	orrs	r3, r2
 800b276:	9304      	str	r3, [sp, #16]
 800b278:	46a2      	mov	sl, r4
 800b27a:	e7d2      	b.n	800b222 <_vfiprintf_r+0xc6>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	1d19      	adds	r1, r3, #4
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	9103      	str	r1, [sp, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	bfbb      	ittet	lt
 800b288:	425b      	neglt	r3, r3
 800b28a:	f042 0202 	orrlt.w	r2, r2, #2
 800b28e:	9307      	strge	r3, [sp, #28]
 800b290:	9307      	strlt	r3, [sp, #28]
 800b292:	bfb8      	it	lt
 800b294:	9204      	strlt	r2, [sp, #16]
 800b296:	7823      	ldrb	r3, [r4, #0]
 800b298:	2b2e      	cmp	r3, #46	@ 0x2e
 800b29a:	d10a      	bne.n	800b2b2 <_vfiprintf_r+0x156>
 800b29c:	7863      	ldrb	r3, [r4, #1]
 800b29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2a0:	d132      	bne.n	800b308 <_vfiprintf_r+0x1ac>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	1d1a      	adds	r2, r3, #4
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	9203      	str	r2, [sp, #12]
 800b2aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2ae:	3402      	adds	r4, #2
 800b2b0:	9305      	str	r3, [sp, #20]
 800b2b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b388 <_vfiprintf_r+0x22c>
 800b2b6:	7821      	ldrb	r1, [r4, #0]
 800b2b8:	2203      	movs	r2, #3
 800b2ba:	4650      	mov	r0, sl
 800b2bc:	f7f5 f828 	bl	8000310 <memchr>
 800b2c0:	b138      	cbz	r0, 800b2d2 <_vfiprintf_r+0x176>
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	eba0 000a 	sub.w	r0, r0, sl
 800b2c8:	2240      	movs	r2, #64	@ 0x40
 800b2ca:	4082      	lsls	r2, r0
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	3401      	adds	r4, #1
 800b2d0:	9304      	str	r3, [sp, #16]
 800b2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d6:	4829      	ldr	r0, [pc, #164]	@ (800b37c <_vfiprintf_r+0x220>)
 800b2d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2dc:	2206      	movs	r2, #6
 800b2de:	f7f5 f817 	bl	8000310 <memchr>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d03f      	beq.n	800b366 <_vfiprintf_r+0x20a>
 800b2e6:	4b26      	ldr	r3, [pc, #152]	@ (800b380 <_vfiprintf_r+0x224>)
 800b2e8:	bb1b      	cbnz	r3, 800b332 <_vfiprintf_r+0x1d6>
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	3307      	adds	r3, #7
 800b2ee:	f023 0307 	bic.w	r3, r3, #7
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	9303      	str	r3, [sp, #12]
 800b2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f8:	443b      	add	r3, r7
 800b2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2fc:	e76a      	b.n	800b1d4 <_vfiprintf_r+0x78>
 800b2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b302:	460c      	mov	r4, r1
 800b304:	2001      	movs	r0, #1
 800b306:	e7a8      	b.n	800b25a <_vfiprintf_r+0xfe>
 800b308:	2300      	movs	r3, #0
 800b30a:	3401      	adds	r4, #1
 800b30c:	9305      	str	r3, [sp, #20]
 800b30e:	4619      	mov	r1, r3
 800b310:	f04f 0c0a 	mov.w	ip, #10
 800b314:	4620      	mov	r0, r4
 800b316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b31a:	3a30      	subs	r2, #48	@ 0x30
 800b31c:	2a09      	cmp	r2, #9
 800b31e:	d903      	bls.n	800b328 <_vfiprintf_r+0x1cc>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0c6      	beq.n	800b2b2 <_vfiprintf_r+0x156>
 800b324:	9105      	str	r1, [sp, #20]
 800b326:	e7c4      	b.n	800b2b2 <_vfiprintf_r+0x156>
 800b328:	fb0c 2101 	mla	r1, ip, r1, r2
 800b32c:	4604      	mov	r4, r0
 800b32e:	2301      	movs	r3, #1
 800b330:	e7f0      	b.n	800b314 <_vfiprintf_r+0x1b8>
 800b332:	ab03      	add	r3, sp, #12
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	462a      	mov	r2, r5
 800b338:	4b12      	ldr	r3, [pc, #72]	@ (800b384 <_vfiprintf_r+0x228>)
 800b33a:	a904      	add	r1, sp, #16
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7fd fe4f 	bl	8008fe0 <_printf_float>
 800b342:	4607      	mov	r7, r0
 800b344:	1c78      	adds	r0, r7, #1
 800b346:	d1d6      	bne.n	800b2f6 <_vfiprintf_r+0x19a>
 800b348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b34a:	07d9      	lsls	r1, r3, #31
 800b34c:	d405      	bmi.n	800b35a <_vfiprintf_r+0x1fe>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	059a      	lsls	r2, r3, #22
 800b352:	d402      	bmi.n	800b35a <_vfiprintf_r+0x1fe>
 800b354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b356:	f7fe fc73 	bl	8009c40 <__retarget_lock_release_recursive>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	065b      	lsls	r3, r3, #25
 800b35e:	f53f af1f 	bmi.w	800b1a0 <_vfiprintf_r+0x44>
 800b362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b364:	e71e      	b.n	800b1a4 <_vfiprintf_r+0x48>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4b05      	ldr	r3, [pc, #20]	@ (800b384 <_vfiprintf_r+0x228>)
 800b36e:	a904      	add	r1, sp, #16
 800b370:	4630      	mov	r0, r6
 800b372:	f7fe f8bd 	bl	80094f0 <_printf_i>
 800b376:	e7e4      	b.n	800b342 <_vfiprintf_r+0x1e6>
 800b378:	0800bac0 	.word	0x0800bac0
 800b37c:	0800baca 	.word	0x0800baca
 800b380:	08008fe1 	.word	0x08008fe1
 800b384:	0800b137 	.word	0x0800b137
 800b388:	0800bac6 	.word	0x0800bac6

0800b38c <__sflush_r>:
 800b38c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b394:	0716      	lsls	r6, r2, #28
 800b396:	4605      	mov	r5, r0
 800b398:	460c      	mov	r4, r1
 800b39a:	d454      	bmi.n	800b446 <__sflush_r+0xba>
 800b39c:	684b      	ldr	r3, [r1, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dc02      	bgt.n	800b3a8 <__sflush_r+0x1c>
 800b3a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd48      	ble.n	800b43a <__sflush_r+0xae>
 800b3a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	d045      	beq.n	800b43a <__sflush_r+0xae>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3b4:	682f      	ldr	r7, [r5, #0]
 800b3b6:	6a21      	ldr	r1, [r4, #32]
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	d030      	beq.n	800b41e <__sflush_r+0x92>
 800b3bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	0759      	lsls	r1, r3, #29
 800b3c2:	d505      	bpl.n	800b3d0 <__sflush_r+0x44>
 800b3c4:	6863      	ldr	r3, [r4, #4]
 800b3c6:	1ad2      	subs	r2, r2, r3
 800b3c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3ca:	b10b      	cbz	r3, 800b3d0 <__sflush_r+0x44>
 800b3cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3ce:	1ad2      	subs	r2, r2, r3
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3d4:	6a21      	ldr	r1, [r4, #32]
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	47b0      	blx	r6
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	d106      	bne.n	800b3ee <__sflush_r+0x62>
 800b3e0:	6829      	ldr	r1, [r5, #0]
 800b3e2:	291d      	cmp	r1, #29
 800b3e4:	d82b      	bhi.n	800b43e <__sflush_r+0xb2>
 800b3e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b490 <__sflush_r+0x104>)
 800b3e8:	410a      	asrs	r2, r1
 800b3ea:	07d6      	lsls	r6, r2, #31
 800b3ec:	d427      	bmi.n	800b43e <__sflush_r+0xb2>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	6062      	str	r2, [r4, #4]
 800b3f2:	04d9      	lsls	r1, r3, #19
 800b3f4:	6922      	ldr	r2, [r4, #16]
 800b3f6:	6022      	str	r2, [r4, #0]
 800b3f8:	d504      	bpl.n	800b404 <__sflush_r+0x78>
 800b3fa:	1c42      	adds	r2, r0, #1
 800b3fc:	d101      	bne.n	800b402 <__sflush_r+0x76>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	b903      	cbnz	r3, 800b404 <__sflush_r+0x78>
 800b402:	6560      	str	r0, [r4, #84]	@ 0x54
 800b404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b406:	602f      	str	r7, [r5, #0]
 800b408:	b1b9      	cbz	r1, 800b43a <__sflush_r+0xae>
 800b40a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b40e:	4299      	cmp	r1, r3
 800b410:	d002      	beq.n	800b418 <__sflush_r+0x8c>
 800b412:	4628      	mov	r0, r5
 800b414:	f7ff f9f6 	bl	800a804 <_free_r>
 800b418:	2300      	movs	r3, #0
 800b41a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b41c:	e00d      	b.n	800b43a <__sflush_r+0xae>
 800b41e:	2301      	movs	r3, #1
 800b420:	4628      	mov	r0, r5
 800b422:	47b0      	blx	r6
 800b424:	4602      	mov	r2, r0
 800b426:	1c50      	adds	r0, r2, #1
 800b428:	d1c9      	bne.n	800b3be <__sflush_r+0x32>
 800b42a:	682b      	ldr	r3, [r5, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d0c6      	beq.n	800b3be <__sflush_r+0x32>
 800b430:	2b1d      	cmp	r3, #29
 800b432:	d001      	beq.n	800b438 <__sflush_r+0xac>
 800b434:	2b16      	cmp	r3, #22
 800b436:	d11e      	bne.n	800b476 <__sflush_r+0xea>
 800b438:	602f      	str	r7, [r5, #0]
 800b43a:	2000      	movs	r0, #0
 800b43c:	e022      	b.n	800b484 <__sflush_r+0xf8>
 800b43e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b442:	b21b      	sxth	r3, r3
 800b444:	e01b      	b.n	800b47e <__sflush_r+0xf2>
 800b446:	690f      	ldr	r7, [r1, #16]
 800b448:	2f00      	cmp	r7, #0
 800b44a:	d0f6      	beq.n	800b43a <__sflush_r+0xae>
 800b44c:	0793      	lsls	r3, r2, #30
 800b44e:	680e      	ldr	r6, [r1, #0]
 800b450:	bf08      	it	eq
 800b452:	694b      	ldreq	r3, [r1, #20]
 800b454:	600f      	str	r7, [r1, #0]
 800b456:	bf18      	it	ne
 800b458:	2300      	movne	r3, #0
 800b45a:	eba6 0807 	sub.w	r8, r6, r7
 800b45e:	608b      	str	r3, [r1, #8]
 800b460:	f1b8 0f00 	cmp.w	r8, #0
 800b464:	dde9      	ble.n	800b43a <__sflush_r+0xae>
 800b466:	6a21      	ldr	r1, [r4, #32]
 800b468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b46a:	4643      	mov	r3, r8
 800b46c:	463a      	mov	r2, r7
 800b46e:	4628      	mov	r0, r5
 800b470:	47b0      	blx	r6
 800b472:	2800      	cmp	r0, #0
 800b474:	dc08      	bgt.n	800b488 <__sflush_r+0xfc>
 800b476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b488:	4407      	add	r7, r0
 800b48a:	eba8 0800 	sub.w	r8, r8, r0
 800b48e:	e7e7      	b.n	800b460 <__sflush_r+0xd4>
 800b490:	dfbffffe 	.word	0xdfbffffe

0800b494 <_fflush_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	690b      	ldr	r3, [r1, #16]
 800b498:	4605      	mov	r5, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	b913      	cbnz	r3, 800b4a4 <_fflush_r+0x10>
 800b49e:	2500      	movs	r5, #0
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	b118      	cbz	r0, 800b4ae <_fflush_r+0x1a>
 800b4a6:	6a03      	ldr	r3, [r0, #32]
 800b4a8:	b90b      	cbnz	r3, 800b4ae <_fflush_r+0x1a>
 800b4aa:	f7fe f9cd 	bl	8009848 <__sinit>
 800b4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d0f3      	beq.n	800b49e <_fflush_r+0xa>
 800b4b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4b8:	07d0      	lsls	r0, r2, #31
 800b4ba:	d404      	bmi.n	800b4c6 <_fflush_r+0x32>
 800b4bc:	0599      	lsls	r1, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_fflush_r+0x32>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c2:	f7fe fbbc 	bl	8009c3e <__retarget_lock_acquire_recursive>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	f7ff ff5f 	bl	800b38c <__sflush_r>
 800b4ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4d0:	07da      	lsls	r2, r3, #31
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	d4e4      	bmi.n	800b4a0 <_fflush_r+0xc>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	059b      	lsls	r3, r3, #22
 800b4da:	d4e1      	bmi.n	800b4a0 <_fflush_r+0xc>
 800b4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4de:	f7fe fbaf 	bl	8009c40 <__retarget_lock_release_recursive>
 800b4e2:	e7dd      	b.n	800b4a0 <_fflush_r+0xc>

0800b4e4 <__swhatbuf_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	b096      	sub	sp, #88	@ 0x58
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	461e      	mov	r6, r3
 800b4f4:	da0d      	bge.n	800b512 <__swhatbuf_r+0x2e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	bf14      	ite	ne
 800b502:	2340      	movne	r3, #64	@ 0x40
 800b504:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b508:	2000      	movs	r0, #0
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	b016      	add	sp, #88	@ 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	466a      	mov	r2, sp
 800b514:	f000 f848 	bl	800b5a8 <_fstat_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dbec      	blt.n	800b4f6 <__swhatbuf_r+0x12>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b522:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b526:	4259      	negs	r1, r3
 800b528:	4159      	adcs	r1, r3
 800b52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b52e:	e7eb      	b.n	800b508 <__swhatbuf_r+0x24>

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b003      	add	sp, #12
 800b54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc8 	bl	800b4e4 <__swhatbuf_r>
 800b554:	9f00      	ldr	r7, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4639      	mov	r1, r7
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff f9c6 	bl	800a8ec <_malloc_r>
 800b560:	b948      	cbnz	r0, 800b576 <__smakebuf_r+0x46>
 800b562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b566:	059a      	lsls	r2, r3, #22
 800b568:	d4ee      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b56a:	f023 0303 	bic.w	r3, r3, #3
 800b56e:	f043 0302 	orr.w	r3, r3, #2
 800b572:	81a3      	strh	r3, [r4, #12]
 800b574:	e7e2      	b.n	800b53c <__smakebuf_r+0xc>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	6020      	str	r0, [r4, #0]
 800b57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b586:	b15b      	cbz	r3, 800b5a0 <__smakebuf_r+0x70>
 800b588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 f81d 	bl	800b5cc <_isatty_r>
 800b592:	b128      	cbz	r0, 800b5a0 <__smakebuf_r+0x70>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f023 0303 	bic.w	r3, r3, #3
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	431d      	orrs	r5, r3
 800b5a4:	81a5      	strh	r5, [r4, #12]
 800b5a6:	e7cf      	b.n	800b548 <__smakebuf_r+0x18>

0800b5a8 <_fstat_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	@ (800b5c8 <_fstat_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f5 fe2c 	bl	8001212 <_fstat>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_fstat_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_fstat_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	240005ec 	.word	0x240005ec

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	@ (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f5 fe2b 	bl	8001232 <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	240005ec 	.word	0x240005ec

0800b5ec <_sbrk_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	@ (800b608 <_sbrk_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f5 fe34 	bl	8001264 <_sbrk>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_sbrk_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_sbrk_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	240005ec 	.word	0x240005ec

0800b60c <memcpy>:
 800b60c:	440a      	add	r2, r1
 800b60e:	4291      	cmp	r1, r2
 800b610:	f100 33ff 	add.w	r3, r0, #4294967295
 800b614:	d100      	bne.n	800b618 <memcpy+0xc>
 800b616:	4770      	bx	lr
 800b618:	b510      	push	{r4, lr}
 800b61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b622:	4291      	cmp	r1, r2
 800b624:	d1f9      	bne.n	800b61a <memcpy+0xe>
 800b626:	bd10      	pop	{r4, pc}

0800b628 <__assert_func>:
 800b628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b62a:	4614      	mov	r4, r2
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b09      	ldr	r3, [pc, #36]	@ (800b654 <__assert_func+0x2c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4605      	mov	r5, r0
 800b634:	68d8      	ldr	r0, [r3, #12]
 800b636:	b954      	cbnz	r4, 800b64e <__assert_func+0x26>
 800b638:	4b07      	ldr	r3, [pc, #28]	@ (800b658 <__assert_func+0x30>)
 800b63a:	461c      	mov	r4, r3
 800b63c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b640:	9100      	str	r1, [sp, #0]
 800b642:	462b      	mov	r3, r5
 800b644:	4905      	ldr	r1, [pc, #20]	@ (800b65c <__assert_func+0x34>)
 800b646:	f000 f841 	bl	800b6cc <fiprintf>
 800b64a:	f000 f851 	bl	800b6f0 <abort>
 800b64e:	4b04      	ldr	r3, [pc, #16]	@ (800b660 <__assert_func+0x38>)
 800b650:	e7f4      	b.n	800b63c <__assert_func+0x14>
 800b652:	bf00      	nop
 800b654:	2400001c 	.word	0x2400001c
 800b658:	0800bb16 	.word	0x0800bb16
 800b65c:	0800bae8 	.word	0x0800bae8
 800b660:	0800badb 	.word	0x0800badb

0800b664 <_calloc_r>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	fba1 5402 	umull	r5, r4, r1, r2
 800b66a:	b93c      	cbnz	r4, 800b67c <_calloc_r+0x18>
 800b66c:	4629      	mov	r1, r5
 800b66e:	f7ff f93d 	bl	800a8ec <_malloc_r>
 800b672:	4606      	mov	r6, r0
 800b674:	b928      	cbnz	r0, 800b682 <_calloc_r+0x1e>
 800b676:	2600      	movs	r6, #0
 800b678:	4630      	mov	r0, r6
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	220c      	movs	r2, #12
 800b67e:	6002      	str	r2, [r0, #0]
 800b680:	e7f9      	b.n	800b676 <_calloc_r+0x12>
 800b682:	462a      	mov	r2, r5
 800b684:	4621      	mov	r1, r4
 800b686:	f7fe fa5d 	bl	8009b44 <memset>
 800b68a:	e7f5      	b.n	800b678 <_calloc_r+0x14>

0800b68c <__ascii_mbtowc>:
 800b68c:	b082      	sub	sp, #8
 800b68e:	b901      	cbnz	r1, 800b692 <__ascii_mbtowc+0x6>
 800b690:	a901      	add	r1, sp, #4
 800b692:	b142      	cbz	r2, 800b6a6 <__ascii_mbtowc+0x1a>
 800b694:	b14b      	cbz	r3, 800b6aa <__ascii_mbtowc+0x1e>
 800b696:	7813      	ldrb	r3, [r2, #0]
 800b698:	600b      	str	r3, [r1, #0]
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	1e10      	subs	r0, r2, #0
 800b69e:	bf18      	it	ne
 800b6a0:	2001      	movne	r0, #1
 800b6a2:	b002      	add	sp, #8
 800b6a4:	4770      	bx	lr
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	e7fb      	b.n	800b6a2 <__ascii_mbtowc+0x16>
 800b6aa:	f06f 0001 	mvn.w	r0, #1
 800b6ae:	e7f8      	b.n	800b6a2 <__ascii_mbtowc+0x16>

0800b6b0 <__ascii_wctomb>:
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	b141      	cbz	r1, 800b6c8 <__ascii_wctomb+0x18>
 800b6b6:	2aff      	cmp	r2, #255	@ 0xff
 800b6b8:	d904      	bls.n	800b6c4 <__ascii_wctomb+0x14>
 800b6ba:	228a      	movs	r2, #138	@ 0x8a
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	4770      	bx	lr
 800b6c4:	700a      	strb	r2, [r1, #0]
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	4770      	bx	lr
	...

0800b6cc <fiprintf>:
 800b6cc:	b40e      	push	{r1, r2, r3}
 800b6ce:	b503      	push	{r0, r1, lr}
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	ab03      	add	r3, sp, #12
 800b6d4:	4805      	ldr	r0, [pc, #20]	@ (800b6ec <fiprintf+0x20>)
 800b6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6da:	6800      	ldr	r0, [r0, #0]
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f7ff fd3d 	bl	800b15c <_vfiprintf_r>
 800b6e2:	b002      	add	sp, #8
 800b6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e8:	b003      	add	sp, #12
 800b6ea:	4770      	bx	lr
 800b6ec:	2400001c 	.word	0x2400001c

0800b6f0 <abort>:
 800b6f0:	b508      	push	{r3, lr}
 800b6f2:	2006      	movs	r0, #6
 800b6f4:	f000 f82c 	bl	800b750 <raise>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7f5 fd56 	bl	80011aa <_exit>

0800b6fe <_raise_r>:
 800b6fe:	291f      	cmp	r1, #31
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	460c      	mov	r4, r1
 800b706:	d904      	bls.n	800b712 <_raise_r+0x14>
 800b708:	2316      	movs	r3, #22
 800b70a:	6003      	str	r3, [r0, #0]
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295
 800b710:	bd38      	pop	{r3, r4, r5, pc}
 800b712:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b714:	b112      	cbz	r2, 800b71c <_raise_r+0x1e>
 800b716:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b71a:	b94b      	cbnz	r3, 800b730 <_raise_r+0x32>
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 f831 	bl	800b784 <_getpid_r>
 800b722:	4622      	mov	r2, r4
 800b724:	4601      	mov	r1, r0
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b72c:	f000 b818 	b.w	800b760 <_kill_r>
 800b730:	2b01      	cmp	r3, #1
 800b732:	d00a      	beq.n	800b74a <_raise_r+0x4c>
 800b734:	1c59      	adds	r1, r3, #1
 800b736:	d103      	bne.n	800b740 <_raise_r+0x42>
 800b738:	2316      	movs	r3, #22
 800b73a:	6003      	str	r3, [r0, #0]
 800b73c:	2001      	movs	r0, #1
 800b73e:	e7e7      	b.n	800b710 <_raise_r+0x12>
 800b740:	2100      	movs	r1, #0
 800b742:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b746:	4620      	mov	r0, r4
 800b748:	4798      	blx	r3
 800b74a:	2000      	movs	r0, #0
 800b74c:	e7e0      	b.n	800b710 <_raise_r+0x12>
	...

0800b750 <raise>:
 800b750:	4b02      	ldr	r3, [pc, #8]	@ (800b75c <raise+0xc>)
 800b752:	4601      	mov	r1, r0
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	f7ff bfd2 	b.w	800b6fe <_raise_r>
 800b75a:	bf00      	nop
 800b75c:	2400001c 	.word	0x2400001c

0800b760 <_kill_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_kill_r+0x20>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f7f5 fd0c 	bl	800118a <_kill>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d102      	bne.n	800b77c <_kill_r+0x1c>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b103      	cbz	r3, 800b77c <_kill_r+0x1c>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	bf00      	nop
 800b780:	240005ec 	.word	0x240005ec

0800b784 <_getpid_r>:
 800b784:	f7f5 bcf9 	b.w	800117a <_getpid>

0800b788 <_init>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr

0800b794 <_fini>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	bf00      	nop
 800b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79a:	bc08      	pop	{r3}
 800b79c:	469e      	mov	lr, r3
 800b79e:	4770      	bx	lr
