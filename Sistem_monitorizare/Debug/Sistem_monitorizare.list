
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f8a0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000366c  0801fb70  0801fb70  00020b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080231dc  080231dc  000241dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080231e4  080231e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080231e8  080231e8  000241e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  080231ec  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000200  080233ec  00025200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004b84  08027d6f  00029b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004be4  08027dcf  00029be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000082d0  24004c44  08027e2f  00029c44  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400cf14  08027e2f  00029f14  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00029c44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040008  00000000  00000000  00029c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a9a  00000000  00000000  00069c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d48  00000000  00000000  00072718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023ba  00000000  00000000  00075460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000479e7  00000000  00000000  0007781a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004644f  00000000  00000000  000bf201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a1e0  00000000  00000000  00105650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0028f830  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ce8c  00000000  00000000  0028f874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0029c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004c44 	.word	0x24004c44
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801fb58 	.word	0x0801fb58

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004c48 	.word	0x24004c48
 800030c:	0801fb58 	.word	0x0801fb58

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <Fan_ON>:
volatile float lm35_1_temp = 0.0f;
volatile float lm35_2_temp = 0.0f;
volatile float dust_density = 0.0f;

// Turn on the fan
void Fan_ON(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Fan_ON+0x14>)
 80006ba:	f005 f9cf 	bl	8005a5c <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58020000 	.word	0x58020000

080006c8 <Fan_OFF>:

// Turn off the fan
void Fan_OFF(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <Fan_OFF+0x14>)
 80006d2:	f005 f9c3 	bl	8005a5c <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020000 	.word	0x58020000

080006e0 <ReadSensors>:

// Read sensor values
void ReadSensors(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af04      	add	r7, sp, #16
    uint32_t raw_value;

    // Start ADC
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006e6:	4844      	ldr	r0, [pc, #272]	@ (80007f8 <ReadSensors+0x118>)
 80006e8:	f002 f81a 	bl	8002720 <HAL_ADC_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <ReadSensors+0x1a>
        printf("Error: ADC Start failed!\r\n");
 80006f2:	4842      	ldr	r0, [pc, #264]	@ (80007fc <ReadSensors+0x11c>)
 80006f4:	f01d f8f6 	bl	801d8e4 <puts>
        return;
 80006f8:	e07a      	b.n	80007f0 <ReadSensors+0x110>
    }

    // LM35_1 (Channel 10)
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <ReadSensors+0x118>)
 8000700:	f002 f90c 	bl	800291c <HAL_ADC_PollForConversion>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d117      	bne.n	800073a <ReadSensors+0x5a>
        raw_value = HAL_ADC_GetValue(&hadc1);
 800070a:	483b      	ldr	r0, [pc, #236]	@ (80007f8 <ReadSensors+0x118>)
 800070c:	f002 f9fa 	bl	8002b04 <HAL_ADC_GetValue>
 8000710:	6078      	str	r0, [r7, #4]
        lm35_1_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000800 <ReadSensors+0x120>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000804 <ReadSensors+0x124>
 8000728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800072c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8000808 <ReadSensors+0x128>
 8000730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <ReadSensors+0x12c>)
 8000736:	edc3 7a00 	vstr	s15, [r3]
    }

    // LM35_2 (Channel 15)
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800073a:	f04f 31ff 	mov.w	r1, #4294967295
 800073e:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <ReadSensors+0x118>)
 8000740:	f002 f8ec 	bl	800291c <HAL_ADC_PollForConversion>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d117      	bne.n	800077a <ReadSensors+0x9a>
        raw_value = HAL_ADC_GetValue(&hadc1);
 800074a:	482b      	ldr	r0, [pc, #172]	@ (80007f8 <ReadSensors+0x118>)
 800074c:	f002 f9da 	bl	8002b04 <HAL_ADC_GetValue>
 8000750:	6078      	str	r0, [r7, #4]
        lm35_2_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000800 <ReadSensors+0x120>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000804 <ReadSensors+0x124>
 8000768:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000808 <ReadSensors+0x128>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <ReadSensors+0x130>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
    }

    // Dust Sensor (Channel 5)
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800077a:	f04f 31ff 	mov.w	r1, #4294967295
 800077e:	481e      	ldr	r0, [pc, #120]	@ (80007f8 <ReadSensors+0x118>)
 8000780:	f002 f8cc 	bl	800291c <HAL_ADC_PollForConversion>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d117      	bne.n	80007ba <ReadSensors+0xda>
        raw_value = HAL_ADC_GetValue(&hadc1);
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <ReadSensors+0x118>)
 800078c:	f002 f9ba 	bl	8002b04 <HAL_ADC_GetValue>
 8000790:	6078      	str	r0, [r7, #4]
        dust_density = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE * 100.0f; // Adjust scaling factor if needed
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000800 <ReadSensors+0x120>
 80007a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000804 <ReadSensors+0x124>
 80007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000814 <ReadSensors+0x134>
 80007b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <ReadSensors+0x138>)
 80007b6:	edc3 7a00 	vstr	s15, [r3]
    }

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <ReadSensors+0x118>)
 80007bc:	f002 f87a 	bl	80028b4 <HAL_ADC_Stop>

    // Display sensor readings
    printf("LM35_1: %.2f C | LM35_2: %.2f C | Dust: %.2f μg/m^3\r\n", lm35_1_temp, lm35_2_temp, dust_density);
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <ReadSensors+0x12c>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <ReadSensors+0x130>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ReadSensors+0x138>)
 80007d6:	edd3 6a00 	vldr	s13, [r3]
 80007da:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007e2:	ed8d 7b00 	vstr	d7, [sp]
 80007e6:	ec53 2b15 	vmov	r2, r3, d5
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <ReadSensors+0x13c>)
 80007ec:	f01d f812 	bl	801d814 <iprintf>
}
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24004c6c 	.word	0x24004c6c
 80007fc:	0801fb70 	.word	0x0801fb70
 8000800:	457ff000 	.word	0x457ff000
 8000804:	40533333 	.word	0x40533333
 8000808:	3c23d70a 	.word	0x3c23d70a
 800080c:	24004c60 	.word	0x24004c60
 8000810:	24004c64 	.word	0x24004c64
 8000814:	42c80000 	.word	0x42c80000
 8000818:	24004c68 	.word	0x24004c68
 800081c:	0801fb8c 	.word	0x0801fb8c

08000820 <SendDustAlert>:

// Send alert if dust density exceeds threshold via Bluetooth (USART1)
void SendDustAlert(float dustDensity) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b09e      	sub	sp, #120	@ 0x78
 8000824:	af02      	add	r7, sp, #8
 8000826:	ed87 0a01 	vstr	s0, [r7, #4]
    char message[100];
    snprintf(message, sizeof(message), "ALERT: Dust level exceeded! %.2f μg/m^3\n", dustDensity);
 800082a:	edd7 7a01 	vldr	s15, [r7, #4]
 800082e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	ed8d 7b00 	vstr	d7, [sp]
 800083a:	4a11      	ldr	r2, [pc, #68]	@ (8000880 <SendDustAlert+0x60>)
 800083c:	2164      	movs	r1, #100	@ 0x64
 800083e:	4618      	mov	r0, r3
 8000840:	f01d f858 	bl	801d8f4 <sniprintf>

    // Transmit message via Bluetooth
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *)message, strlen(message)) != HAL_OK) {
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fdb1 	bl	80003b0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	480a      	ldr	r0, [pc, #40]	@ (8000884 <SendDustAlert+0x64>)
 800085a:	f009 fec7 	bl	800a5ec <HAL_UART_Transmit_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <SendDustAlert+0x4c>
        printf("Error: Bluetooth transmission failed!\r\n");
 8000864:	4808      	ldr	r0, [pc, #32]	@ (8000888 <SendDustAlert+0x68>)
 8000866:	f01d f83d 	bl	801d8e4 <puts>
    } else {
        printf("Bluetooth message sent: %s\r\n", message);
    }
}
 800086a:	e005      	b.n	8000878 <SendDustAlert+0x58>
        printf("Bluetooth message sent: %s\r\n", message);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <SendDustAlert+0x6c>)
 8000874:	f01c ffce 	bl	801d814 <iprintf>
}
 8000878:	bf00      	nop
 800087a:	3770      	adds	r7, #112	@ 0x70
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	0801fbc4 	.word	0x0801fbc4
 8000884:	24004d28 	.word	0x24004d28
 8000888:	0801fbf0 	.word	0x0801fbf0
 800088c:	0801fc18 	.word	0x0801fc18

08000890 <mainTask>:

// Task for reading sensors and controlling the fan
void mainTask(void *argument) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    for (;;) {
        printf("Starting measurement cycle...\r\n");
 8000898:	4824      	ldr	r0, [pc, #144]	@ (800092c <mainTask+0x9c>)
 800089a:	f01d f823 	bl	801d8e4 <puts>
        ReadSensors();  // Perform sensor measurements
 800089e:	f7ff ff1f 	bl	80006e0 <ReadSensors>

        // Control fan based on average temperature
        float avg_temp = (lm35_1_temp + lm35_2_temp) / 2.0f;
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <mainTask+0xa0>)
 80008a4:	ed93 7a00 	vldr	s14, [r3]
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <mainTask+0xa4>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80008b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ba:	edc7 7a03 	vstr	s15, [r7, #12]
        if (avg_temp > FAN_THRESHOLD) {
 80008be:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000938 <mainTask+0xa8>
 80008c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ce:	dd0b      	ble.n	80008e8 <mainTask+0x58>
            Fan_ON();
 80008d0:	f7ff feee 	bl	80006b0 <Fan_ON>
            printf("Fan ON (Avg Temp: %.2f C)\r\n", avg_temp);
 80008d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008dc:	ec53 2b17 	vmov	r2, r3, d7
 80008e0:	4816      	ldr	r0, [pc, #88]	@ (800093c <mainTask+0xac>)
 80008e2:	f01c ff97 	bl	801d814 <iprintf>
 80008e6:	e00a      	b.n	80008fe <mainTask+0x6e>
        } else {
            Fan_OFF();
 80008e8:	f7ff feee 	bl	80006c8 <Fan_OFF>
            printf("Fan OFF (Avg Temp: %.2f C)\r\n", avg_temp);
 80008ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008f4:	ec53 2b17 	vmov	r2, r3, d7
 80008f8:	4811      	ldr	r0, [pc, #68]	@ (8000940 <mainTask+0xb0>)
 80008fa:	f01c ff8b 	bl	801d814 <iprintf>
        }

        // Release semaphore if dust density exceeds threshold
        if (dust_density > DUST_THRESHOLD) {
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <mainTask+0xb4>)
 8000900:	edd3 7a00 	vldr	s15, [r3]
 8000904:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000910:	dd07      	ble.n	8000922 <mainTask+0x92>
            printf("Dust density exceeded threshold! Releasing semaphore...\r\n");
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <mainTask+0xb8>)
 8000914:	f01c ffe6 	bl	801d8e4 <puts>
            osSemaphoreRelease(alertSemaphoreHandle);
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <mainTask+0xbc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f00c fb2b 	bl	800cf78 <osSemaphoreRelease>
        }

        osDelay(2000);  // Delay for 2 seconds
 8000922:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000926:	f00c f890 	bl	800ca4a <osDelay>
    for (;;) {
 800092a:	e7b5      	b.n	8000898 <mainTask+0x8>
 800092c:	0801fc38 	.word	0x0801fc38
 8000930:	24004c60 	.word	0x24004c60
 8000934:	24004c64 	.word	0x24004c64
 8000938:	42480000 	.word	0x42480000
 800093c:	0801fc58 	.word	0x0801fc58
 8000940:	0801fc74 	.word	0x0801fc74
 8000944:	24004c68 	.word	0x24004c68
 8000948:	0801fc94 	.word	0x0801fc94
 800094c:	24004ef4 	.word	0x24004ef4

08000950 <secondTask>:
    }
}

// Task for sending alerts via Bluetooth
void secondTask(void *argument) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    for (;;) {
        // Wait for semaphore to be released
        if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <secondTask+0x34>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	4618      	mov	r0, r3
 8000962:	f00c fab7 	bl	800ced4 <osSemaphoreAcquire>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d106      	bne.n	800097a <secondTask+0x2a>
            SendDustAlert(dust_density); // Send alert via Bluetooth
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <secondTask+0x38>)
 800096e:	edd3 7a00 	vldr	s15, [r3]
 8000972:	eeb0 0a67 	vmov.f32	s0, s15
 8000976:	f7ff ff53 	bl	8000820 <SendDustAlert>
        }
        osDelay(100); // Allow other tasks to run
 800097a:	2064      	movs	r0, #100	@ 0x64
 800097c:	f00c f865 	bl	800ca4a <osDelay>
        if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000980:	e7ea      	b.n	8000958 <secondTask+0x8>
 8000982:	bf00      	nop
 8000984:	24004ef4 	.word	0x24004ef4
 8000988:	24004c68 	.word	0x24004c68

0800098c <_write>:
/* USER CODE BEGIN 0 */
// Redirecționare printf -> UART3


int _write(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	b29a      	uxth	r2, r3
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <_write+0x28>)
 80009a4:	f009 fd94 	bl	800a4d0 <HAL_UART_Transmit>
	return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24004e50 	.word	0x24004e50

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f001 f94c 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f878 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 fac8 	bl	8000f58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 fa72 	bl	8000eb0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009cc:	f000 fabc 	bl	8000f48 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80009d0:	f000 f8e0 	bl	8000b94 <MX_ADC1_Init>
  MX_TIM2_Init();
 80009d4:	f000 f978 	bl	8000cc8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 fa1e 	bl	8000e18 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009dc:	f000 f9d0 	bl	8000d80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	printf("Sistem pornit. Începe monitorizarea..\r\n");
 80009e0:	4823      	ldr	r0, [pc, #140]	@ (8000a70 <main+0xb8>)
 80009e2:	f01c ff7f 	bl	801d8e4 <puts>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009e6:	2100      	movs	r1, #0
 80009e8:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <main+0xbc>)
 80009ea:	f008 fd59 	bl	80094a0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ee:	f00b ff3b 	bl	800c868 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of alertSemaphore */
  alertSemaphoreHandle = osSemaphoreNew(1, 1, &alertSemaphore_attributes);
 80009f2:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <main+0xc0>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	2001      	movs	r0, #1
 80009f8:	f00c f9e2 	bl	800cdc0 <osSemaphoreNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <main+0xc4>)
 8000a00:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorTimer */
  SensorTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &SensorTimer_attributes);
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <main+0xc8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	2101      	movs	r1, #1
 8000a08:	481e      	ldr	r0, [pc, #120]	@ (8000a84 <main+0xcc>)
 8000a0a:	f00c f84f 	bl	800caac <osTimerNew>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <main+0xd0>)
 8000a12:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <main+0xd4>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	481d      	ldr	r0, [pc, #116]	@ (8000a90 <main+0xd8>)
 8000a1a:	f00b ff84 	bl	800c926 <osThreadNew>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a1c      	ldr	r2, [pc, #112]	@ (8000a94 <main+0xdc>)
 8000a22:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(mainTask, NULL, &SensorTask_attributes);
 8000a24:	4a1c      	ldr	r2, [pc, #112]	@ (8000a98 <main+0xe0>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	481c      	ldr	r0, [pc, #112]	@ (8000a9c <main+0xe4>)
 8000a2a:	f00b ff7c 	bl	800c926 <osThreadNew>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <main+0xe8>)
 8000a32:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(secondTask, NULL, &CommTask_attributes);
 8000a34:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa4 <main+0xec>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	481b      	ldr	r0, [pc, #108]	@ (8000aa8 <main+0xf0>)
 8000a3a:	f00b ff74 	bl	800c926 <osThreadNew>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a1a      	ldr	r2, [pc, #104]	@ (8000aac <main+0xf4>)
 8000a42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	alertSemaphoreHandle = osSemaphoreNew(1, 0, NULL);  // Binary semaphore
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f00c f9b9 	bl	800cdc0 <osSemaphoreNew>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <main+0xc4>)
 8000a52:	6013      	str	r3, [r2, #0]
	    if (alertSemaphoreHandle == NULL) {
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <main+0xc4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d104      	bne.n	8000a66 <main+0xae>
	        printf("Error: Semaphore initialization failed!\r\n");
 8000a5c:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <main+0xf8>)
 8000a5e:	f01c ff41 	bl	801d8e4 <puts>
	        while (1);  // Halt the program if semaphore initialization fails
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <main+0xaa>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a66:	f00b ff23 	bl	800c8b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a6a:	bf00      	nop
 8000a6c:	e7fd      	b.n	8000a6a <main+0xb2>
 8000a6e:	bf00      	nop
 8000a70:	0801fd10 	.word	0x0801fd10
 8000a74:	24004cdc 	.word	0x24004cdc
 8000a78:	08022c84 	.word	0x08022c84
 8000a7c:	24004ef4 	.word	0x24004ef4
 8000a80:	08022c74 	.word	0x08022c74
 8000a84:	08001189 	.word	0x08001189
 8000a88:	24004ef0 	.word	0x24004ef0
 8000a8c:	08022c08 	.word	0x08022c08
 8000a90:	08001175 	.word	0x08001175
 8000a94:	24004ee4 	.word	0x24004ee4
 8000a98:	08022c2c 	.word	0x08022c2c
 8000a9c:	08000891 	.word	0x08000891
 8000aa0:	24004ee8 	.word	0x24004ee8
 8000aa4:	08022c50 	.word	0x08022c50
 8000aa8:	08000951 	.word	0x08000951
 8000aac:	24004eec 	.word	0x24004eec
 8000ab0:	0801fd38 	.word	0x0801fd38

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	@ 0x70
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	224c      	movs	r2, #76	@ 0x4c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f01d f84c 	bl	801db60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f01d f846 	bl	801db60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f004 ffdb 	bl	8005a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000ae4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af6:	bf00      	nop
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b04:	d1f8      	bne.n	8000af8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b06:	2321      	movs	r3, #33	@ 0x21
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b0a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b20:	f240 1313 	movw	r3, #275	@ 0x113
 8000b24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b32:	2304      	movs	r3, #4
 8000b34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 ffde 	bl	8005b04 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b4e:	f000 fb39 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	233f      	movs	r3, #63	@ 0x3f
 8000b54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2303      	movs	r3, #3
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b66:	2340      	movs	r3, #64	@ 0x40
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2103      	movs	r1, #3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fb9d 	bl	80062b8 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b84:	f000 fb1e 	bl	80011c4 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3770      	adds	r7, #112	@ 0x70
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024800 	.word	0x58024800

08000b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2224      	movs	r2, #36	@ 0x24
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f01c ffd7 	bl	801db60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b40      	ldr	r3, [pc, #256]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bb4:	4a40      	ldr	r2, [pc, #256]	@ (8000cb8 <MX_ADC1_Init+0x124>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bca:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bd0:	4b38      	ldr	r3, [pc, #224]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c16:	4827      	ldr	r0, [pc, #156]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c18:	f001 fb7a 	bl	8002310 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c22:	f000 facf 	bl	80011c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4820      	ldr	r0, [pc, #128]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c32:	f002 ff5f 	bl	8003af4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c3c:	f000 fac2 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_ADC1_Init+0x128>)
 8000c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c44:	2306      	movs	r3, #6
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c4c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c52:	2304      	movs	r3, #4
 8000c54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c66:	f001 ff5b 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c70:	f000 faa8 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_ADC1_Init+0x12c>)
 8000c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c78:	230c      	movs	r3, #12
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c82:	f001 ff4d 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000c8c:	f000 fa9a 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_ADC1_Init+0x130>)
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c94:	2312      	movs	r3, #18
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_ADC1_Init+0x120>)
 8000c9e:	f001 ff3f 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ca8:	f000 fa8c 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	@ 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24004c6c 	.word	0x24004c6c
 8000cb8:	40022000 	.word	0x40022000
 8000cbc:	2a000400 	.word	0x2a000400
 8000cc0:	3ef08000 	.word	0x3ef08000
 8000cc4:	14f00020 	.word	0x14f00020

08000cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000cf6:	f240 3247 	movw	r2, #839	@ 0x347
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d16:	4819      	ldr	r0, [pc, #100]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d18:	f008 fb6a 	bl	80093f0 <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000d22:	f000 fa4f 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d36:	f009 fac1 	bl	800a2bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 fa40 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	@ 0x60
 8000d46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 320;
 8000d48:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d5e:	f008 fdc3 	bl	80098e8 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d68:	f000 fa2c 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <MX_TIM2_Init+0xb4>)
 8000d6e:	f000 fb21 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	24004cdc 	.word	0x24004cdc

08000d80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000d86:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <MX_USART1_UART_Init+0x94>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000d8c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc8:	4811      	ldr	r0, [pc, #68]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dca:	f009 fb31 	bl	800a430 <HAL_UART_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f000 f9f6 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000ddc:	f00a ff01 	bl	800bbe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 f9ed 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dee:	f00a ff36 	bl	800bc5e <HAL_UARTEx_SetRxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 f9e4 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_USART1_UART_Init+0x90>)
 8000dfe:	f00a feb7 	bl	800bb70 <HAL_UARTEx_DisableFifoMode>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f000 f9dc 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	24004d28 	.word	0x24004d28
 8000e14:	40011000 	.word	0x40011000

08000e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <MX_USART2_UART_Init+0x94>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e60:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e62:	f009 fae5 	bl	800a430 <HAL_UART_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e6c:	f000 f9aa 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e74:	f00a feb5 	bl	800bbe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e7e:	f000 f9a1 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e86:	f00a feea 	bl	800bc5e <HAL_UARTEx_SetRxFifoThreshold>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e90:	f000 f998 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_USART2_UART_Init+0x90>)
 8000e96:	f00a fe6b 	bl	800bb70 <HAL_UARTEx_DisableFifoMode>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f000 f990 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	24004dbc 	.word	0x24004dbc
 8000eac:	40004400 	.word	0x40004400

08000eb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000eb6:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <MX_USART3_UART_Init+0x94>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef8:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000efa:	f009 fa99 	bl	800a430 <HAL_UART_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f04:	f000 f95e 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000f0c:	f00a fe69 	bl	800bbe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f16:	f000 f955 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f00a fe9e 	bl	800bc5e <HAL_UARTEx_SetRxFifoThreshold>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f28:	f000 f94c 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <MX_USART3_UART_Init+0x90>)
 8000f2e:	f00a fe1f 	bl	800bb70 <HAL_UARTEx_DisableFifoMode>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f944 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	24004e50 	.word	0x24004e50
 8000f44:	40004800 	.word	0x40004800

08000f48 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	@ 0x30
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a78      	ldr	r2, [pc, #480]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b76      	ldr	r3, [pc, #472]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8c:	4b72      	ldr	r3, [pc, #456]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a71      	ldr	r2, [pc, #452]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b6b      	ldr	r3, [pc, #428]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	4a69      	ldr	r2, [pc, #420]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fba:	4b67      	ldr	r3, [pc, #412]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	4a62      	ldr	r2, [pc, #392]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <MX_GPIO_Init+0x200>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001004:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <MX_GPIO_Init+0x200>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	4a53      	ldr	r2, [pc, #332]	@ (8001158 <MX_GPIO_Init+0x200>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001014:	4b50      	ldr	r3, [pc, #320]	@ (8001158 <MX_GPIO_Init+0x200>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <MX_GPIO_Init+0x200>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <MX_GPIO_Init+0x200>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b49      	ldr	r3, [pc, #292]	@ (8001158 <MX_GPIO_Init+0x200>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	4845      	ldr	r0, [pc, #276]	@ (800115c <MX_GPIO_Init+0x204>)
 8001046:	f004 fd09 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001050:	4843      	ldr	r0, [pc, #268]	@ (8001160 <MX_GPIO_Init+0x208>)
 8001052:	f004 fd03 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105c:	4841      	ldr	r0, [pc, #260]	@ (8001164 <MX_GPIO_Init+0x20c>)
 800105e:	f004 fcfd 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2102      	movs	r1, #2
 8001066:	4840      	ldr	r0, [pc, #256]	@ (8001168 <MX_GPIO_Init+0x210>)
 8001068:	f004 fcf8 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	483a      	ldr	r0, [pc, #232]	@ (800116c <MX_GPIO_Init+0x214>)
 8001082:	f004 fb43 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001086:	2340      	movs	r3, #64	@ 0x40
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	482f      	ldr	r0, [pc, #188]	@ (800115c <MX_GPIO_Init+0x204>)
 800109e:	f004 fb35 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80010a2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4829      	ldr	r0, [pc, #164]	@ (8001160 <MX_GPIO_Init+0x208>)
 80010bc:	f004 fb26 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4822      	ldr	r0, [pc, #136]	@ (8001164 <MX_GPIO_Init+0x20c>)
 80010da:	f004 fb17 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	481f      	ldr	r0, [pc, #124]	@ (8001170 <MX_GPIO_Init+0x218>)
 80010f4:	f004 fb0a 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <MX_GPIO_Init+0x204>)
 800110e:	f004 fafd 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001124:	230a      	movs	r3, #10
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	@ (800115c <MX_GPIO_Init+0x204>)
 8001130:	f004 faec 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4807      	ldr	r0, [pc, #28]	@ (8001168 <MX_GPIO_Init+0x210>)
 800114c:	f004 fade 	bl	800570c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58024400 	.word	0x58024400
 800115c:	58020000 	.word	0x58020000
 8001160:	58020400 	.word	0x58020400
 8001164:	58020c00 	.word	0x58020c00
 8001168:	58021000 	.word	0x58021000
 800116c:	58020800 	.word	0x58020800
 8001170:	58021800 	.word	0x58021800

08001174 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800117c:	f00a fdfc 	bl	800bd78 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f00b fc62 	bl	800ca4a <osDelay>
 8001186:	e7fb      	b.n	8001180 <StartDefaultTask+0xc>

08001188 <Callback01>:
/* USER CODE END Header_mainTask */


/* Callback01 function */
void Callback01(void *argument)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	60fb      	str	r3, [r7, #12]
	        printf("Bluetooth transmission complete.\r\n");
	    }
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 80011b4:	f000 fd8c 	bl	8001cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40001000 	.word	0x40001000

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_MspInit+0x38>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_MspInit+0x38>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_MspInit+0x38>)
 80011e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	210f      	movs	r1, #15
 80011f8:	f06f 0001 	mvn.w	r0, #1
 80011fc:	f002 fe14 	bl	8003e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58024400 	.word	0x58024400

0800120c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	@ 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	22b8      	movs	r2, #184	@ 0xb8
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f01c fc97 	bl	801db60 <memset>
  if(hadc->Instance==ADC1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_ADC_MspInit+0x154>)
 8001238:	4293      	cmp	r3, r2
 800123a:	f040 808c 	bne.w	8001356 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800123e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 800124e:	2318      	movs	r3, #24
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800125e:	23c0      	movs	r3, #192	@ 0xc0
 8001260:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001262:	2300      	movs	r3, #0
 8001264:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	4618      	mov	r0, r3
 8001276:	f005 fbed 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001280:	f7ff ffa0 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001284:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 8001286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800128a:	4a36      	ldr	r2, [pc, #216]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001294:	4b33      	ldr	r3, [pc, #204]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 8001296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_ADC_MspInit+0x158>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001312:	4619      	mov	r1, r3
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <HAL_ADC_MspInit+0x15c>)
 8001316:	f004 f9f9 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800131a:	2308      	movs	r3, #8
 800131c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001330:	4619      	mov	r1, r3
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <HAL_ADC_MspInit+0x160>)
 8001334:	f004 f9ea 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <HAL_ADC_MspInit+0x164>)
 8001352:	f004 f9db 	bl	800570c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	37e8      	adds	r7, #232	@ 0xe8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000
 8001364:	58024400 	.word	0x58024400
 8001368:	58020800 	.word	0x58020800
 800136c:	58020000 	.word	0x58020000
 8001370:	58020400 	.word	0x58020400

08001374 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001384:	d10e      	bne.n	80013a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800138c:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	58024400 	.word	0x58024400

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d4:	d11e      	bne.n	8001414 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_TIM_MspPostInit+0x68>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_TIM_MspPostInit+0x68>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_TIM_MspPostInit+0x68>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	4804      	ldr	r0, [pc, #16]	@ (8001420 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	f004 f97c 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	58024400 	.word	0x58024400
 8001420:	58020000 	.word	0x58020000

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0bc      	sub	sp, #240	@ 0xf0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	22b8      	movs	r2, #184	@ 0xb8
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f01c fb8b 	bl	801db60 <memset>
  if(huart->Instance==USART1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a88      	ldr	r2, [pc, #544]	@ (8001670 <HAL_UART_MspInit+0x24c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d15c      	bne.n	800150e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001454:	f04f 0201 	mov.w	r2, #1
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4618      	mov	r0, r3
 800146c:	f005 faf2 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001476:	f7ff fea5 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147a:	4b7e      	ldr	r3, [pc, #504]	@ (8001674 <HAL_UART_MspInit+0x250>)
 800147c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001480:	4a7c      	ldr	r2, [pc, #496]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800148a:	4b7a      	ldr	r3, [pc, #488]	@ (8001674 <HAL_UART_MspInit+0x250>)
 800148c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b76      	ldr	r3, [pc, #472]	@ (8001674 <HAL_UART_MspInit+0x250>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a75      	ldr	r2, [pc, #468]	@ (8001674 <HAL_UART_MspInit+0x250>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b72      	ldr	r3, [pc, #456]	@ (8001674 <HAL_UART_MspInit+0x250>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014d0:	2304      	movs	r3, #4
 80014d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014da:	4619      	mov	r1, r3
 80014dc:	4866      	ldr	r0, [pc, #408]	@ (8001678 <HAL_UART_MspInit+0x254>)
 80014de:	f004 f915 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e2:	2340      	movs	r3, #64	@ 0x40
 80014e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014fa:	2307      	movs	r3, #7
 80014fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001504:	4619      	mov	r1, r3
 8001506:	485c      	ldr	r0, [pc, #368]	@ (8001678 <HAL_UART_MspInit+0x254>)
 8001508:	f004 f900 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150c:	e0ac      	b.n	8001668 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a5a      	ldr	r2, [pc, #360]	@ (800167c <HAL_UART_MspInit+0x258>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d15b      	bne.n	80015d0 <HAL_UART_MspInit+0x1ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001518:	f04f 0202 	mov.w	r2, #2
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fa90 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800153a:	f7ff fe43 	bl	80011c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	4b4d      	ldr	r3, [pc, #308]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001544:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154e:	4b49      	ldr	r3, [pc, #292]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b45      	ldr	r3, [pc, #276]	@ (8001674 <HAL_UART_MspInit+0x250>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a44      	ldr	r2, [pc, #272]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_UART_MspInit+0x250>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800157a:	2320      	movs	r3, #32
 800157c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800159c:	4619      	mov	r1, r3
 800159e:	4838      	ldr	r0, [pc, #224]	@ (8001680 <HAL_UART_MspInit+0x25c>)
 80015a0:	f004 f8b4 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a4:	2340      	movs	r3, #64	@ 0x40
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c6:	4619      	mov	r1, r3
 80015c8:	482d      	ldr	r0, [pc, #180]	@ (8001680 <HAL_UART_MspInit+0x25c>)
 80015ca:	f004 f89f 	bl	800570c <HAL_GPIO_Init>
}
 80015ce:	e04b      	b.n	8001668 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001684 <HAL_UART_MspInit+0x260>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d146      	bne.n	8001668 <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015da:	f04f 0202 	mov.w	r2, #2
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fa2f 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80015fc:	f7ff fde2 	bl	80011c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001606:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0x250>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800163c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001640:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001656:	2307      	movs	r3, #7
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001660:	4619      	mov	r1, r3
 8001662:	4807      	ldr	r0, [pc, #28]	@ (8001680 <HAL_UART_MspInit+0x25c>)
 8001664:	f004 f852 	bl	800570c <HAL_GPIO_Init>
}
 8001668:	bf00      	nop
 800166a:	37f0      	adds	r7, #240	@ 0xf0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40011000 	.word	0x40011000
 8001674:	58024400 	.word	0x58024400
 8001678:	58020400 	.word	0x58020400
 800167c:	40004400 	.word	0x40004400
 8001680:	58020c00 	.word	0x58020c00
 8001684:	40004800 	.word	0x40004800

08001688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	@ 0x40
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d827      	bhi.n	80016e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001696:	2200      	movs	r2, #0
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	2036      	movs	r0, #54	@ 0x36
 800169c:	f002 fbc4 	bl	8003e28 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016a0:	2036      	movs	r0, #54	@ 0x36
 80016a2:	f002 fbdb 	bl	8003e5c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80016a6:	4a29      	ldr	r2, [pc, #164]	@ (800174c <HAL_InitTick+0xc4>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016ac:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <HAL_InitTick+0xc8>)
 80016ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b2:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <HAL_InitTick+0xc8>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_InitTick+0xc8>)
 80016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ca:	f107 0210 	add.w	r2, r7, #16
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 f97b 	bl	80069d0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <HAL_InitTick+0x6a>
 80016e4:	e001      	b.n	80016ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e02b      	b.n	8001742 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ea:	f005 f945 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 80016ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80016f0:	e004      	b.n	80016fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f2:	f005 f941 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 80016f6:	4603      	mov	r3, r0
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016fe:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <HAL_InitTick+0xcc>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3b01      	subs	r3, #1
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_InitTick+0xd0>)
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_InitTick+0xd4>)
 800170e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_InitTick+0xd0>)
 8001712:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001716:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001718:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <HAL_InitTick+0xd0>)
 800171a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800171c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_InitTick+0xd0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_InitTick+0xd0>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800172a:	480b      	ldr	r0, [pc, #44]	@ (8001758 <HAL_InitTick+0xd0>)
 800172c:	f007 fd78 	bl	8009220 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001736:	4808      	ldr	r0, [pc, #32]	@ (8001758 <HAL_InitTick+0xd0>)
 8001738:	f007 fdd4 	bl	80092e4 <HAL_TIM_Base_Start_IT>
 800173c:	4603      	mov	r3, r0
 800173e:	e000      	b.n	8001742 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	24000008 	.word	0x24000008
 8001750:	58024400 	.word	0x58024400
 8001754:	431bde83 	.word	0x431bde83
 8001758:	24004f48 	.word	0x24004f48
 800175c:	40001000 	.word	0x40001000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <TIM6_DAC_IRQHandler+0x10>)
 800179e:	f007 ff9b 	bl	80096d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24004f48 	.word	0x24004f48

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <_kill+0x20>)
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
  return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	2400cf04 	.word	0x2400cf04

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe5 	bl	80017bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <_exit+0x12>

080017f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e00a      	b.n	800181e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001808:	f3af 8000 	nop.w
 800180c:	4601      	mov	r1, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	b2ca      	uxtb	r2, r1
 8001816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf0      	blt.n	8001808 <_read+0x12>
  }

  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001858:	605a      	str	r2, [r3, #4]
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d205      	bcs.n	80018d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <_sbrk+0x6c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	24050000 	.word	0x24050000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	24004f94 	.word	0x24004f94
 8001900:	2400cf18 	.word	0x2400cf18
 8001904:	2400cf04 	.word	0x2400cf04

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800190c:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <SystemInit+0xd0>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a31      	ldr	r2, [pc, #196]	@ (80019d8 <SystemInit+0xd0>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <SystemInit+0xd4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	2b06      	cmp	r3, #6
 8001926:	d807      	bhi.n	8001938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <SystemInit+0xd4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	4a2a      	ldr	r2, [pc, #168]	@ (80019dc <SystemInit+0xd4>)
 8001932:	f043 0307 	orr.w	r3, r3, #7
 8001936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <SystemInit+0xd8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <SystemInit+0xd8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001944:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <SystemInit+0xd8>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <SystemInit+0xd8>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4924      	ldr	r1, [pc, #144]	@ (80019e0 <SystemInit+0xd8>)
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <SystemInit+0xdc>)
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <SystemInit+0xd4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <SystemInit+0xd4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 030f 	bic.w	r3, r3, #15
 800196a:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <SystemInit+0xd4>)
 800196c:	f043 0307 	orr.w	r3, r3, #7
 8001970:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <SystemInit+0xd8>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <SystemInit+0xd8>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <SystemInit+0xd8>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <SystemInit+0xd8>)
 8001986:	4a18      	ldr	r2, [pc, #96]	@ (80019e8 <SystemInit+0xe0>)
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <SystemInit+0xd8>)
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <SystemInit+0xe4>)
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <SystemInit+0xd8>)
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <SystemInit+0xe8>)
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <SystemInit+0xd8>)
 8001998:	2200      	movs	r2, #0
 800199a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <SystemInit+0xd8>)
 800199e:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <SystemInit+0xe8>)
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <SystemInit+0xd8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <SystemInit+0xd8>)
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <SystemInit+0xe8>)
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <SystemInit+0xd8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <SystemInit+0xd8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <SystemInit+0xd8>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <SystemInit+0xd8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <SystemInit+0xec>)
 80019c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	52002000 	.word	0x52002000
 80019e0:	58024400 	.word	0x58024400
 80019e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019e8:	02020200 	.word	0x02020200
 80019ec:	01ff0000 	.word	0x01ff0000
 80019f0:	01010280 	.word	0x01010280
 80019f4:	52004000 	.word	0x52004000

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019fc:	f7ff ff84 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	@ (8001a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	@ (8001a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f01c f943 	bl	801dcb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7fe ffc5 	bl	80009b8 <main>
  bx  lr
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a38:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 8001a3c:	080231ec 	.word	0x080231ec
  ldr r2, =_sbss
 8001a40:	24004c44 	.word	0x24004c44
  ldr r4, =_ebss
 8001a44:	2400cf14 	.word	0x2400cf14

08001a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC3_IRQHandler>

08001a4a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <LAN8742_RegisterBusIO+0x28>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <LAN8742_RegisterBusIO+0x28>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <LAN8742_RegisterBusIO+0x28>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e014      	b.n	8001aa2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d139      	bne.n	8001b3e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e01c      	b.n	8001b1e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f107 020c 	add.w	r2, r7, #12
 8001aec:	2112      	movs	r1, #18
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	4798      	blx	r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da03      	bge.n	8001b00 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001af8:	f06f 0304 	mvn.w	r3, #4
 8001afc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001afe:	e00b      	b.n	8001b18 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d105      	bne.n	8001b18 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
         break;
 8001b16:	e005      	b.n	8001b24 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b1f      	cmp	r3, #31
 8001b22:	d9df      	bls.n	8001ae4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	d902      	bls.n	8001b32 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b2c:	f06f 0302 	mvn.w	r3, #2
 8001b30:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 }
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6810      	ldr	r0, [r2, #0]
 8001b5c:	f107 020c 	add.w	r2, r7, #12
 8001b60:	2101      	movs	r1, #1
 8001b62:	4798      	blx	r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da02      	bge.n	8001b70 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b6a:	f06f 0304 	mvn.w	r3, #4
 8001b6e:	e06e      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4798      	blx	r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da02      	bge.n	8001b8c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b86:	f06f 0304 	mvn.w	r3, #4
 8001b8a:	e060      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e059      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6810      	ldr	r0, [r2, #0]
 8001ba2:	f107 020c 	add.w	r2, r7, #12
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4798      	blx	r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da02      	bge.n	8001bb6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bb0:	f06f 0304 	mvn.w	r3, #4
 8001bb4:	e04b      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11b      	bne.n	8001bf8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <LAN8742_GetLinkState+0x90>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e03a      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e033      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	e02c      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	e02a      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6810      	ldr	r0, [r2, #0]
 8001c00:	f107 020c 	add.w	r2, r7, #12
 8001c04:	211f      	movs	r1, #31
 8001c06:	4798      	blx	r3
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da02      	bge.n	8001c14 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c0e:	f06f 0304 	mvn.w	r3, #4
 8001c12:	e01c      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e015      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 031c 	and.w	r3, r3, #28
 8001c28:	2b18      	cmp	r3, #24
 8001c2a:	d101      	bne.n	8001c30 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e00e      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 031c 	and.w	r3, r3, #28
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d101      	bne.n	8001c3e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e007      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 031c 	and.w	r3, r3, #28
 8001c44:	2b14      	cmp	r3, #20
 8001c46:	d101      	bne.n	8001c4c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e000      	b.n	8001c4e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c4c:	2305      	movs	r3, #5
    }
  }
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5e:	2003      	movs	r0, #3
 8001c60:	f002 f8d7 	bl	8003e12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c64:	f004 fcde 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_Init+0x68>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4913      	ldr	r1, [pc, #76]	@ (8001cc4 <HAL_Init+0x6c>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_Init+0x68>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <HAL_Init+0x6c>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_Init+0x70>)
 8001c9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_Init+0x74>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f7ff fcf0 	bl	8001688 <HAL_InitTick>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e002      	b.n	8001cb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb2:	f7ff fa8d 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	08022c94 	.word	0x08022c94
 8001cc8:	24000004 	.word	0x24000004
 8001ccc:	24000000 	.word	0x24000000

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2400000c 	.word	0x2400000c
 8001cf4:	24004f98 	.word	0x24004f98

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24004f98 	.word	0x24004f98

08001d10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001d20:	4904      	ldr	r1, [pc, #16]	@ (8001d34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58000400 	.word	0x58000400

08001d38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3360      	adds	r3, #96	@ 0x60
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a10      	ldr	r2, [pc, #64]	@ (8001e00 <LL_ADC_SetOffset+0x60>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10b      	bne.n	8001ddc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dda:	e00b      	b.n	8001df4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]
}
 8001df4:	bf00      	nop
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	58026000 	.word	0x58026000

08001e04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3360      	adds	r3, #96	@ 0x60
 8001e12:	461a      	mov	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	611a      	str	r2, [r3, #16]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00e      	beq.n	8001e96 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3360      	adds	r3, #96	@ 0x60
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
  }
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	58026000 	.word	0x58026000

08001ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <LL_ADC_SetOffsetSaturation+0x40>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10e      	bne.n	8001eda <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3360      	adds	r3, #96	@ 0x60
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	58026000 	.word	0x58026000

08001eec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <LL_ADC_SetOffsetSign+0x40>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d10e      	bne.n	8001f1e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3360      	adds	r3, #96	@ 0x60
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	58026000 	.word	0x58026000

08001f30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3360      	adds	r3, #96	@ 0x60
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <LL_ADC_SetOffsetState+0x50>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001f62:	e007      	b.n	8001f74 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	58026000 	.word	0x58026000

08001f84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3330      	adds	r3, #48	@ 0x30
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	211f      	movs	r1, #31
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 011f 	and.w	r1, r3, #31
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002002:	b480      	push	{r7}
 8002004:	b087      	sub	sp, #28
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3314      	adds	r3, #20
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	0e5b      	lsrs	r3, r3, #25
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	4413      	add	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	0d1b      	lsrs	r3, r3, #20
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2107      	movs	r1, #7
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0d1b      	lsrs	r3, r3, #20
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a1a      	ldr	r2, [pc, #104]	@ (80020d0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d115      	bne.n	8002098 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002078:	43db      	mvns	r3, r3
 800207a:	401a      	ands	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0318 	and.w	r3, r3, #24
 8002082:	4914      	ldr	r1, [pc, #80]	@ (80020d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002084:	40d9      	lsrs	r1, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	400b      	ands	r3, r1
 800208a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208e:	431a      	orrs	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002096:	e014      	b.n	80020c2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0318 	and.w	r3, r3, #24
 80020ae:	4909      	ldr	r1, [pc, #36]	@ (80020d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	400b      	ands	r3, r1
 80020b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	58026000 	.word	0x58026000
 80020d4:	000fffff 	.word	0x000fffff

080020d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 031f 	and.w	r3, r3, #31
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <LL_ADC_DisableDeepPowerDown+0x20>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6093      	str	r3, [r2, #8]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	5fffffc0 	.word	0x5fffffc0

08002134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002148:	d101      	bne.n	800214e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <LL_ADC_EnableInternalRegulator+0x24>)
 800216a:	4013      	ands	r3, r2
 800216c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	6fffffc0 	.word	0x6fffffc0

08002184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002198:	d101      	bne.n	800219e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <LL_ADC_Enable+0x24>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	7fffffc0 	.word	0x7fffffc0

080021d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <LL_ADC_Disable+0x24>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	7fffffc0 	.word	0x7fffffc0

080021fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <LL_ADC_IsEnabled+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_IsEnabled+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d101      	bne.n	800223a <LL_ADC_IsDisableOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsDisableOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <LL_ADC_REG_StartConversion+0x24>)
 8002256:	4013      	ands	r3, r2
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	7fffffc0 	.word	0x7fffffc0

08002270 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <LL_ADC_REG_StopConversion+0x24>)
 800227e:	4013      	ands	r3, r2
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	7fffffc0 	.word	0x7fffffc0

08002298 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d101      	bne.n	80022b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <LL_ADC_INJ_StopConversion+0x24>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	7fffffc0 	.word	0x7fffffc0

080022e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d101      	bne.n	8002300 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1ee      	b.n	8002708 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe ff67 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff feef 	bl	8002134 <LL_ADC_IsDeepPowerDownEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fed5 	bl	8002110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff0a 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d114      	bne.n	80023a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff feee 	bl	800215c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002380:	4b8e      	ldr	r3, [pc, #568]	@ (80025bc <HAL_ADC_Init+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	4a8e      	ldr	r2, [pc, #568]	@ (80025c0 <HAL_ADC_Init+0x2b0>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	3301      	adds	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002392:	e002      	b.n	800239a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff feed 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	f043 0210 	orr.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff61 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 8188 	bne.w	80026f6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8184 	bne.w	80026f6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fefa 	bl	80021fc <LL_ADC_IsEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d136      	bne.n	800247c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	@ (80025c4 <HAL_ADC_Init+0x2b4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x112>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	@ (80025c8 <HAL_ADC_Init+0x2b8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10e      	bne.n	8002440 <HAL_ADC_Init+0x130>
 8002422:	4868      	ldr	r0, [pc, #416]	@ (80025c4 <HAL_ADC_Init+0x2b4>)
 8002424:	f7ff feea 	bl	80021fc <LL_ADC_IsEnabled>
 8002428:	4604      	mov	r4, r0
 800242a:	4867      	ldr	r0, [pc, #412]	@ (80025c8 <HAL_ADC_Init+0x2b8>)
 800242c:	f7ff fee6 	bl	80021fc <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	4323      	orrs	r3, r4
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e008      	b.n	8002452 <HAL_ADC_Init+0x142>
 8002440:	4862      	ldr	r0, [pc, #392]	@ (80025cc <HAL_ADC_Init+0x2bc>)
 8002442:	f7ff fedb 	bl	80021fc <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5a      	ldr	r2, [pc, #360]	@ (80025c4 <HAL_ADC_Init+0x2b4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_ADC_Init+0x15a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a58      	ldr	r2, [pc, #352]	@ (80025c8 <HAL_ADC_Init+0x2b8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_ADC_Init+0x15e>
 800246a:	4a59      	ldr	r2, [pc, #356]	@ (80025d0 <HAL_ADC_Init+0x2c0>)
 800246c:	e000      	b.n	8002470 <HAL_ADC_Init+0x160>
 800246e:	4a59      	ldr	r2, [pc, #356]	@ (80025d4 <HAL_ADC_Init+0x2c4>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff fc5e 	bl	8001d38 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_ADC_Init+0x2bc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d129      	bne.n	80024da <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e5b      	ldrb	r3, [r3, #25]
 800248a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002490:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002496:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d013      	beq.n	80024c8 <HAL_ADC_Init+0x1b8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d00d      	beq.n	80024c4 <HAL_ADC_Init+0x1b4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b1c      	cmp	r3, #28
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Init+0x1b0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b18      	cmp	r3, #24
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_Init+0x1ac>
 80024b8:	2318      	movs	r3, #24
 80024ba:	e006      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024bc:	2300      	movs	r3, #0
 80024be:	e004      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c0:	2310      	movs	r3, #16
 80024c2:	e002      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c4:	2308      	movs	r3, #8
 80024c6:	e000      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80024ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e00e      	b.n	80024f8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7e5b      	ldrb	r3, [r3, #25]
 80024de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	045b      	lsls	r3, r3, #17
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002524:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a26      	ldr	r2, [pc, #152]	@ (80025cc <HAL_ADC_Init+0x2bc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d115      	bne.n	8002562 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b26      	ldr	r3, [pc, #152]	@ (80025d8 <HAL_ADC_Init+0x2c8>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	69b9      	ldr	r1, [r7, #24]
 8002546:	430b      	orrs	r3, r1
 8002548:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	e009      	b.n	8002576 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <HAL_ADC_Init+0x2cc>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	430b      	orrs	r3, r1
 8002574:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fe8c 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 8002580:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff feae 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 800258c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 808e 	bne.w	80026b2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 808a 	bne.w	80026b2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <HAL_ADC_Init+0x2bc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11b      	bne.n	80025e0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e1b      	ldrb	r3, [r3, #24]
 80025ac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025b4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e018      	b.n	80025ee <HAL_ADC_Init+0x2de>
 80025bc:	24000000 	.word	0x24000000
 80025c0:	053e2d63 	.word	0x053e2d63
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40022100 	.word	0x40022100
 80025cc:	58026000 	.word	0x58026000
 80025d0:	40022300 	.word	0x40022300
 80025d4:	58026300 	.word	0x58026300
 80025d8:	fff04007 	.word	0xfff04007
 80025dc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7e1b      	ldrb	r3, [r3, #24]
 80025e4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b46      	ldr	r3, [pc, #280]	@ (8002710 <HAL_ADC_Init+0x400>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	69b9      	ldr	r1, [r7, #24]
 80025fe:	430b      	orrs	r3, r1
 8002600:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002608:	2b01      	cmp	r3, #1
 800260a:	d137      	bne.n	800267c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3f      	ldr	r2, [pc, #252]	@ (8002714 <HAL_ADC_Init+0x404>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d116      	bne.n	800264a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <HAL_ADC_Init+0x408>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800263a:	430a      	orrs	r2, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	e020      	b.n	800268c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b32      	ldr	r3, [pc, #200]	@ (800271c <HAL_ADC_Init+0x40c>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002658:	3a01      	subs	r2, #1
 800265a:	0411      	lsls	r1, r2, #16
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800266c:	430a      	orrs	r2, r1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e007      	b.n	800268c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <HAL_ADC_Init+0x404>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 f90d 	bl	80038cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	f023 010f 	bic.w	r1, r3, #15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d2:	e007      	b.n	80026e4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020f 	bic.w	r2, r2, #15
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e8:	f023 0303 	bic.w	r3, r3, #3
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80026f4:	e007      	b.n	8002706 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002706:	7ffb      	ldrb	r3, [r7, #31]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	@ 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	ffffbffc 	.word	0xffffbffc
 8002714:	58026000 	.word	0x58026000
 8002718:	fc00f81f 	.word	0xfc00f81f
 800271c:	fc00f81e 	.word	0xfc00f81e

08002720 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5c      	ldr	r2, [pc, #368]	@ (80028a0 <HAL_ADC_Start+0x180>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_ADC_Start+0x1c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <HAL_ADC_Start+0x184>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_ADC_Start+0x20>
 800273c:	4b5a      	ldr	r3, [pc, #360]	@ (80028a8 <HAL_ADC_Start+0x188>)
 800273e:	e000      	b.n	8002742 <HAL_ADC_Start+0x22>
 8002740:	4b5a      	ldr	r3, [pc, #360]	@ (80028ac <HAL_ADC_Start+0x18c>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fcc8 	bl	80020d8 <LL_ADC_GetMultimode>
 8002748:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fda2 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 809a 	bne.w	8002890 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_Start+0x4a>
 8002766:	2302      	movs	r3, #2
 8002768:	e095      	b.n	8002896 <HAL_ADC_Start+0x176>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 ffc0 	bl	80036f8 <ADC_Enable>
 8002778:	4603      	mov	r3, r0
 800277a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8081 	bne.w	8002886 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002788:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <HAL_ADC_Start+0x190>)
 800278a:	4013      	ands	r3, r2
 800278c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a42      	ldr	r2, [pc, #264]	@ (80028a4 <HAL_ADC_Start+0x184>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_Start+0x84>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_Start+0x86>
 80027a4:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_ADC_Start+0x180>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d002      	beq.n	80027b4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027cc:	d106      	bne.n	80027dc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d2:	f023 0206 	bic.w	r2, r3, #6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	665a      	str	r2, [r3, #100]	@ 0x64
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	221c      	movs	r2, #28
 80027e8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2b      	ldr	r2, [pc, #172]	@ (80028a4 <HAL_ADC_Start+0x184>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d002      	beq.n	8002802 <HAL_ADC_Start+0xe2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	e000      	b.n	8002804 <HAL_ADC_Start+0xe4>
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_ADC_Start+0x180>)
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	4293      	cmp	r3, r2
 800280a:	d008      	beq.n	800281e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d002      	beq.n	800281e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b09      	cmp	r3, #9
 800281c:	d114      	bne.n	8002848 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002834:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd01 	bl	8002248 <LL_ADC_REG_StartConversion>
 8002846:	e025      	b.n	8002894 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <HAL_ADC_Start+0x184>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d002      	beq.n	8002864 <HAL_ADC_Start+0x144>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e000      	b.n	8002866 <HAL_ADC_Start+0x146>
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_ADC_Start+0x180>)
 8002866:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00f      	beq.n	8002894 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002878:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800287c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	661a      	str	r2, [r3, #96]	@ 0x60
 8002884:	e006      	b.n	8002894 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800288e:	e001      	b.n	8002894 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022100 	.word	0x40022100
 80028a8:	40022300 	.word	0x40022300
 80028ac:	58026300 	.word	0x58026300
 80028b0:	fffff0fe 	.word	0xfffff0fe

080028b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e021      	b.n	800290e <HAL_ADC_Stop+0x5a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028d2:	2103      	movs	r1, #3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fe53 	bl	8003580 <ADC_ConversionStop>
 80028da:	4603      	mov	r3, r0
 80028dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 ff91 	bl	800380c <ADC_Disable>
 80028ea:	4603      	mov	r3, r0
 80028ec:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028f8:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_ADC_Stop+0x64>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	ffffeefe 	.word	0xffffeefe

0800291c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a72      	ldr	r2, [pc, #456]	@ (8002af4 <HAL_ADC_PollForConversion+0x1d8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_ADC_PollForConversion+0x1e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a70      	ldr	r2, [pc, #448]	@ (8002af8 <HAL_ADC_PollForConversion+0x1dc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_ADC_PollForConversion+0x22>
 800293a:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <HAL_ADC_PollForConversion+0x1e0>)
 800293c:	e000      	b.n	8002940 <HAL_ADC_PollForConversion+0x24>
 800293e:	4b70      	ldr	r3, [pc, #448]	@ (8002b00 <HAL_ADC_PollForConversion+0x1e4>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fbc9 	bl	80020d8 <LL_ADC_GetMultimode>
 8002946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d102      	bne.n	8002956 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002950:	2308      	movs	r3, #8
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e037      	b.n	80029c6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d002      	beq.n	8002968 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d111      	bne.n	800298c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0b1      	b.n	8002aea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002986:	2304      	movs	r3, #4
 8002988:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800298a:	e01c      	b.n	80029c6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a58      	ldr	r2, [pc, #352]	@ (8002af4 <HAL_ADC_PollForConversion+0x1d8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x84>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a57      	ldr	r2, [pc, #348]	@ (8002af8 <HAL_ADC_PollForConversion+0x1dc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x88>
 80029a0:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_ADC_PollForConversion+0x1e0>)
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_PollForConversion+0x8a>
 80029a4:	4b56      	ldr	r3, [pc, #344]	@ (8002b00 <HAL_ADC_PollForConversion+0x1e4>)
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fba4 	bl	80020f4 <LL_ADC_GetMultiDMATransfer>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e093      	b.n	8002aea <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029c2:	2304      	movs	r3, #4
 80029c4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029c6:	f7ff f997 	bl	8001cf8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029cc:	e021      	b.n	8002a12 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d01d      	beq.n	8002a12 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029d6:	f7ff f98f 	bl	8001cf8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <HAL_ADC_PollForConversion+0xd0>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d112      	bne.n	8002a12 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e06b      	b.n	8002aea <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0d6      	beq.n	80029ce <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff faa7 	bl	8001f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7e5b      	ldrb	r3, [r3, #25]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d118      	bne.n	8002a76 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d111      	bne.n	8002a76 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <HAL_ADC_PollForConversion+0x1dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d002      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x16a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e000      	b.n	8002a88 <HAL_ADC_PollForConversion+0x16c>
 8002a86:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_ADC_PollForConversion+0x1d8>)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d002      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d104      	bne.n	8002aac <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e00c      	b.n	8002ac6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a11      	ldr	r2, [pc, #68]	@ (8002af8 <HAL_ADC_PollForConversion+0x1dc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d002      	beq.n	8002abc <HAL_ADC_PollForConversion+0x1a0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e000      	b.n	8002abe <HAL_ADC_PollForConversion+0x1a2>
 8002abc:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_ADC_PollForConversion+0x1d8>)
 8002abe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d104      	bne.n	8002ad6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e008      	b.n	8002ae8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	220c      	movs	r2, #12
 8002ae6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	58026300 	.word	0x58026300

08002b04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b0b9      	sub	sp, #228	@ 0xe4
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b3a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4aab      	ldr	r2, [pc, #684]	@ (8002df0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002b42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x34>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f000 bcfe 	b.w	8003550 <HAL_ADC_ConfigChannel+0xa30>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fb99 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 84e2 	bne.w	8003532 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db38      	blt.n	8002be8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a9e      	ldr	r2, [pc, #632]	@ (8002df4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d033      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x7e>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2201      	movs	r2, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	e01d      	b.n	8002bda <HAL_ADC_ConfigChannel+0xba>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	69d1      	ldr	r1, [r2, #28]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f7ff f9d8 	bl	8001faa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb4a 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 8002c04:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb6b 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 8002c12:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 8270 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 826b 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff f9e3 	bl	8002002 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6c      	ldr	r2, [pc, #432]	@ (8002df4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c60:	e032      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c62:	4b65      	ldr	r3, [pc, #404]	@ (8002df8 <HAL_ADC_ConfigChannel+0x2d8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x168>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	e01d      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x1a4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x18e>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	e00a      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x1a4>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d048      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6919      	ldr	r1, [r3, #16]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ce0:	f7ff f85e 	bl	8001da0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	@ (8002df4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d119      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff f8f6 	bl	8001eec <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1f8>
 8002d12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d16:	e000      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x1fa>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f7ff f8c4 	bl	8001ea8 <LL_ADC_SetOffsetSaturation>
 8002d20:	e1ee      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6919      	ldr	r1, [r3, #16]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x21a>
 8002d34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d38:	e000      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x21c>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f7ff f891 	bl	8001e64 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	7e1b      	ldrb	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x238>
 8002d52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x23a>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7ff f868 	bl	8001e30 <LL_ADC_SetDataRightShift>
 8002d60:	e1ce      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f040 8181 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f845 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x27a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f83a 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	e01e      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x2b8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f82f 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e004      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x2dc>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	e01e      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x30e>
 8002df0:	47ff0000 	.word	0x47ff0000
 8002df4:	58026000 	.word	0x58026000
 8002df8:	5c001000 	.word	0x5c001000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e004      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d106      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f878 	bl	8001f30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe ffdc 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x34c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe ffd1 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	e01e      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x38a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ffc6 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x3a2>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	e018      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x3d4>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f815 	bl	8001f30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe ff79 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x412>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2102      	movs	r1, #2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe ff6e 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x450>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff63 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e004      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x468>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	e014      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x492>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e004      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe ffb6 	bl	8001f30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2103      	movs	r1, #3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe ff1a 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x4d0>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2103      	movs	r1, #3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ff0f 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	e017      	b.n	8003020 <HAL_ADC_ConfigChannel+0x500>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ff04 	bl	8001e04 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800300c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x518>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	e011      	b.n	800305c <HAL_ADC_ConfigChannel+0x53c>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003048:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800304a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e003      	b.n	800305c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	429a      	cmp	r2, r3
 800305e:	d14f      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe ff61 	bl	8001f30 <LL_ADC_SetOffsetState>
 800306e:	e047      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	069b      	lsls	r3, r3, #26
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003092:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800309a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	069b      	lsls	r3, r3, #26
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d107      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030b6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030da:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	069b      	lsls	r3, r3, #26
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f879 	bl	80021fc <LL_ADC_IsEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 8219 	bne.w	8003544 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	f7fe ff9a 	bl	8002058 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4aa1      	ldr	r2, [pc, #644]	@ (80033b0 <HAL_ADC_ConfigChannel+0x890>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f040 812e 	bne.w	800338c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x638>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2b09      	cmp	r3, #9
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e019      	b.n	800318c <HAL_ADC_ConfigChannel+0x66c>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800316a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e003      	b.n	800317c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2b09      	cmp	r3, #9
 8003184:	bf94      	ite	ls
 8003186:	2301      	movls	r3, #1
 8003188:	2300      	movhi	r3, #0
 800318a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800318c:	2b00      	cmp	r3, #0
 800318e:	d079      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x68c>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	3301      	adds	r3, #1
 80031a4:	069b      	lsls	r3, r3, #26
 80031a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031aa:	e015      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x6b8>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e003      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80031c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	069b      	lsls	r3, r3, #26
 80031d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x6d8>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	e017      	b.n	8003228 <HAL_ADC_ConfigChannel+0x708>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800320a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	ea42 0103 	orr.w	r1, r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_ADC_ConfigChannel+0x72e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	3301      	adds	r3, #1
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	051b      	lsls	r3, r3, #20
 800324c:	e018      	b.n	8003280 <HAL_ADC_ConfigChannel+0x760>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003280:	430b      	orrs	r3, r1
 8003282:	e07e      	b.n	8003382 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x780>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	069b      	lsls	r3, r3, #26
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800329e:	e015      	b.n	80032cc <HAL_ADC_ConfigChannel+0x7ac>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	069b      	lsls	r3, r3, #26
 80032c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x7cc>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	3301      	adds	r3, #1
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	e017      	b.n	800331c <HAL_ADC_ConfigChannel+0x7fc>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	61bb      	str	r3, [r7, #24]
  return result;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	ea42 0103 	orr.w	r1, r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10d      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x828>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	3b1e      	subs	r3, #30
 8003340:	051b      	lsls	r3, r3, #20
 8003342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003346:	e01b      	b.n	8003380 <HAL_ADC_ConfigChannel+0x860>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	60fb      	str	r3, [r7, #12]
  return result;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	3b1e      	subs	r3, #30
 800337a:	051b      	lsls	r3, r3, #20
 800337c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003380:	430b      	orrs	r3, r1
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	6892      	ldr	r2, [r2, #8]
 8003386:	4619      	mov	r1, r3
 8003388:	f7fe fe3b 	bl	8002002 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f280 80d7 	bge.w	8003544 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a06      	ldr	r2, [pc, #24]	@ (80033b4 <HAL_ADC_ConfigChannel+0x894>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_ADC_ConfigChannel+0x88a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_ADC_ConfigChannel+0x898>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10a      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x8a0>
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <HAL_ADC_ConfigChannel+0x89c>)
 80033ac:	e009      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x8a2>
 80033ae:	bf00      	nop
 80033b0:	47ff0000 	.word	0x47ff0000
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40022100 	.word	0x40022100
 80033bc:	40022300 	.word	0x40022300
 80033c0:	4b65      	ldr	r3, [pc, #404]	@ (8003558 <HAL_ADC_ConfigChannel+0xa38>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fcde 	bl	8001d84 <LL_ADC_GetCommonPathInternalCh>
 80033c8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a62      	ldr	r2, [pc, #392]	@ (800355c <HAL_ADC_ConfigChannel+0xa3c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x8c0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a61      	ldr	r2, [pc, #388]	@ (8003560 <HAL_ADC_ConfigChannel+0xa40>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10e      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x8de>
 80033e0:	485e      	ldr	r0, [pc, #376]	@ (800355c <HAL_ADC_ConfigChannel+0xa3c>)
 80033e2:	f7fe ff0b 	bl	80021fc <LL_ADC_IsEnabled>
 80033e6:	4604      	mov	r4, r0
 80033e8:	485d      	ldr	r0, [pc, #372]	@ (8003560 <HAL_ADC_ConfigChannel+0xa40>)
 80033ea:	f7fe ff07 	bl	80021fc <LL_ADC_IsEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4323      	orrs	r3, r4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e008      	b.n	8003410 <HAL_ADC_ConfigChannel+0x8f0>
 80033fe:	4859      	ldr	r0, [pc, #356]	@ (8003564 <HAL_ADC_ConfigChannel+0xa44>)
 8003400:	f7fe fefc 	bl	80021fc <LL_ADC_IsEnabled>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8084 	beq.w	800351e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a53      	ldr	r2, [pc, #332]	@ (8003568 <HAL_ADC_ConfigChannel+0xa48>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d132      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x966>
 8003420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d12c      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4c      	ldr	r2, [pc, #304]	@ (8003564 <HAL_ADC_ConfigChannel+0xa44>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f040 8086 	bne.w	8003544 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a47      	ldr	r2, [pc, #284]	@ (800355c <HAL_ADC_ConfigChannel+0xa3c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_ADC_ConfigChannel+0x92c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a46      	ldr	r2, [pc, #280]	@ (8003560 <HAL_ADC_ConfigChannel+0xa40>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x930>
 800344c:	4a47      	ldr	r2, [pc, #284]	@ (800356c <HAL_ADC_ConfigChannel+0xa4c>)
 800344e:	e000      	b.n	8003452 <HAL_ADC_ConfigChannel+0x932>
 8003450:	4a41      	ldr	r2, [pc, #260]	@ (8003558 <HAL_ADC_ConfigChannel+0xa38>)
 8003452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7fe fc7e 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003462:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <HAL_ADC_ConfigChannel+0xa50>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	4a42      	ldr	r2, [pc, #264]	@ (8003574 <HAL_ADC_ConfigChannel+0xa54>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	3301      	adds	r3, #1
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003476:	e002      	b.n	800347e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3b01      	subs	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003484:	e05e      	b.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3b      	ldr	r2, [pc, #236]	@ (8003578 <HAL_ADC_ConfigChannel+0xa58>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d120      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x9b2>
 8003490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11a      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a30      	ldr	r2, [pc, #192]	@ (8003564 <HAL_ADC_ConfigChannel+0xa44>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d14e      	bne.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	@ (800355c <HAL_ADC_ConfigChannel+0xa3c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_ADC_ConfigChannel+0x99a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003560 <HAL_ADC_ConfigChannel+0xa40>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x99e>
 80034ba:	4a2c      	ldr	r2, [pc, #176]	@ (800356c <HAL_ADC_ConfigChannel+0xa4c>)
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x9a0>
 80034be:	4a26      	ldr	r2, [pc, #152]	@ (8003558 <HAL_ADC_ConfigChannel+0xa38>)
 80034c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7fe fc47 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d0:	e038      	b.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_ADC_ConfigChannel+0xa5c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d133      	bne.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
 80034dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d12d      	bne.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_ADC_ConfigChannel+0xa44>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d128      	bne.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_ADC_ConfigChannel+0xa3c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x9e6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <HAL_ADC_ConfigChannel+0xa40>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x9ea>
 8003506:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_ADC_ConfigChannel+0xa4c>)
 8003508:	e000      	b.n	800350c <HAL_ADC_ConfigChannel+0x9ec>
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <HAL_ADC_ConfigChannel+0xa38>)
 800350c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7fe fc21 	bl	8001d5e <LL_ADC_SetCommonPathInternalCh>
 800351c:	e012      	b.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003530:	e008      	b.n	8003544 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800354c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003550:	4618      	mov	r0, r3
 8003552:	37e4      	adds	r7, #228	@ 0xe4
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	58026300 	.word	0x58026300
 800355c:	40022000 	.word	0x40022000
 8003560:	40022100 	.word	0x40022100
 8003564:	58026000 	.word	0x58026000
 8003568:	c7520000 	.word	0xc7520000
 800356c:	40022300 	.word	0x40022300
 8003570:	24000000 	.word	0x24000000
 8003574:	053e2d63 	.word	0x053e2d63
 8003578:	c3210000 	.word	0xc3210000
 800357c:	cb840000 	.word	0xcb840000

08003580 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fe7e 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 800359c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fea0 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 80035a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d103      	bne.n	80035b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8098 	beq.w	80036e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02a      	beq.n	800361c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7e5b      	ldrb	r3, [r3, #25]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d126      	bne.n	800361c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7e1b      	ldrb	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d122      	bne.n	800361c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035da:	e014      	b.n	8003606 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4a45      	ldr	r2, [pc, #276]	@ (80036f4 <ADC_ConversionStop+0x174>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d90d      	bls.n	8003600 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e074      	b.n	80036ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d1e3      	bne.n	80035dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2240      	movs	r2, #64	@ 0x40
 800361a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d014      	beq.n	800364c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fe36 	bl	8002298 <LL_ADC_REG_IsConversionOngoing>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fdf3 	bl	8002222 <LL_ADC_IsDisableOngoing>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fe12 	bl	8002270 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d014      	beq.n	800367c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe46 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fddb 	bl	8002222 <LL_ADC_IsDisableOngoing>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fe22 	bl	80022c0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d005      	beq.n	800368e <ADC_ConversionStop+0x10e>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d105      	bne.n	8003694 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003688:	230c      	movs	r3, #12
 800368a:	617b      	str	r3, [r7, #20]
        break;
 800368c:	e005      	b.n	800369a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800368e:	2308      	movs	r3, #8
 8003690:	617b      	str	r3, [r7, #20]
        break;
 8003692:	e002      	b.n	800369a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003694:	2304      	movs	r3, #4
 8003696:	617b      	str	r3, [r7, #20]
        break;
 8003698:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800369a:	f7fe fb2d 	bl	8001cf8 <HAL_GetTick>
 800369e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036a0:	e01b      	b.n	80036da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036a2:	f7fe fb29 	bl	8001cf8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d914      	bls.n	80036da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e007      	b.n	80036ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1dc      	bne.n	80036a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	000cdbff 	.word	0x000cdbff

080036f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fd79 	bl	80021fc <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d16e      	bne.n	80037ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <ADC_Enable+0x100>)
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e05a      	b.n	80037f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fd34 	bl	80021ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003744:	f7fe fad8 	bl	8001cf8 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2b      	ldr	r2, [pc, #172]	@ (80037fc <ADC_Enable+0x104>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <ADC_Enable+0x66>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a29      	ldr	r2, [pc, #164]	@ (8003800 <ADC_Enable+0x108>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <ADC_Enable+0x6a>
 800375e:	4b29      	ldr	r3, [pc, #164]	@ (8003804 <ADC_Enable+0x10c>)
 8003760:	e000      	b.n	8003764 <ADC_Enable+0x6c>
 8003762:	4b29      	ldr	r3, [pc, #164]	@ (8003808 <ADC_Enable+0x110>)
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fcb7 	bl	80020d8 <LL_ADC_GetMultimode>
 800376a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	@ (8003800 <ADC_Enable+0x108>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d002      	beq.n	800377c <ADC_Enable+0x84>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e000      	b.n	800377e <ADC_Enable+0x86>
 800377c:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <ADC_Enable+0x104>)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	4293      	cmp	r3, r2
 8003784:	d02c      	beq.n	80037e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d130      	bne.n	80037ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800378c:	e028      	b.n	80037e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fd32 	bl	80021fc <LL_ADC_IsEnabled>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fd02 	bl	80021ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037a8:	f7fe faa6 	bl	8001cf8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d914      	bls.n	80037e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00d      	beq.n	80037e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c8:	f043 0210 	orr.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e007      	b.n	80037f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d1cf      	bne.n	800378e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	8000003f 	.word	0x8000003f
 80037fc:	40022000 	.word	0x40022000
 8003800:	40022100 	.word	0x40022100
 8003804:	40022300 	.word	0x40022300
 8003808:	58026300 	.word	0x58026300

0800380c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fd02 	bl	8002222 <LL_ADC_IsDisableOngoing>
 800381e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fce9 	bl	80021fc <LL_ADC_IsEnabled>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d047      	beq.n	80038c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d144      	bne.n	80038c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030d 	and.w	r3, r3, #13
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10c      	bne.n	800385e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fcc3 	bl	80021d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2203      	movs	r2, #3
 8003854:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003856:	f7fe fa4f 	bl	8001cf8 <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800385c:	e029      	b.n	80038b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003862:	f043 0210 	orr.w	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e023      	b.n	80038c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800387a:	f7fe fa3d 	bl	8001cf8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d914      	bls.n	80038b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e007      	b.n	80038c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1dc      	bne.n	800387a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6c      	ldr	r2, [pc, #432]	@ (8003a8c <ADC_ConfigureBoostMode+0x1c0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <ADC_ConfigureBoostMode+0x1c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003a90 <ADC_ConfigureBoostMode+0x1c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d109      	bne.n	80038fc <ADC_ConfigureBoostMode+0x30>
 80038e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <ADC_ConfigureBoostMode+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e008      	b.n	800390e <ADC_ConfigureBoostMode+0x42>
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <ADC_ConfigureBoostMode+0x1cc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01c      	beq.n	800394c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003912:	f003 f801 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8003916:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003920:	d010      	beq.n	8003944 <ADC_ConfigureBoostMode+0x78>
 8003922:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003926:	d873      	bhi.n	8003a10 <ADC_ConfigureBoostMode+0x144>
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392c:	d002      	beq.n	8003934 <ADC_ConfigureBoostMode+0x68>
 800392e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003932:	d16d      	bne.n	8003a10 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	60fb      	str	r3, [r7, #12]
        break;
 8003942:	e068      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	60fb      	str	r3, [r7, #12]
        break;
 800394a:	e064      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800394c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	f004 fa1e 	bl	8007d94 <HAL_RCCEx_GetPeriphCLKFreq>
 8003958:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003962:	d051      	beq.n	8003a08 <ADC_ConfigureBoostMode+0x13c>
 8003964:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003968:	d854      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 800396a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800396e:	d047      	beq.n	8003a00 <ADC_ConfigureBoostMode+0x134>
 8003970:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003974:	d84e      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 8003976:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800397a:	d03d      	beq.n	80039f8 <ADC_ConfigureBoostMode+0x12c>
 800397c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003980:	d848      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 8003982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003986:	d033      	beq.n	80039f0 <ADC_ConfigureBoostMode+0x124>
 8003988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800398c:	d842      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 800398e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003992:	d029      	beq.n	80039e8 <ADC_ConfigureBoostMode+0x11c>
 8003994:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003998:	d83c      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 800399a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800399e:	d01a      	beq.n	80039d6 <ADC_ConfigureBoostMode+0x10a>
 80039a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039a4:	d836      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 80039a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039aa:	d014      	beq.n	80039d6 <ADC_ConfigureBoostMode+0x10a>
 80039ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039b0:	d830      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b6:	d00e      	beq.n	80039d6 <ADC_ConfigureBoostMode+0x10a>
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039bc:	d82a      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 80039be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039c2:	d008      	beq.n	80039d6 <ADC_ConfigureBoostMode+0x10a>
 80039c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039c8:	d824      	bhi.n	8003a14 <ADC_ConfigureBoostMode+0x148>
 80039ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ce:	d002      	beq.n	80039d6 <ADC_ConfigureBoostMode+0x10a>
 80039d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039d4:	d11e      	bne.n	8003a14 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	60fb      	str	r3, [r7, #12]
        break;
 80039e6:	e016      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
        break;
 80039ee:	e012      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	60fb      	str	r3, [r7, #12]
        break;
 80039f6:	e00e      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	60fb      	str	r3, [r7, #12]
        break;
 80039fe:	e00a      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	09db      	lsrs	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
        break;
 8003a06:	e006      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	60fb      	str	r3, [r7, #12]
        break;
 8003a0e:	e002      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a10:	bf00      	nop
 8003a12:	e000      	b.n	8003a16 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a14:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <ADC_ConfigureBoostMode+0x1d0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d808      	bhi.n	8003a36 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a34:	e025      	b.n	8003a82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <ADC_ConfigureBoostMode+0x1d4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d80a      	bhi.n	8003a54 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	e016      	b.n	8003a82 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <ADC_ConfigureBoostMode+0x1d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d80a      	bhi.n	8003a72 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	e007      	b.n	8003a82 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a80:	609a      	str	r2, [r3, #8]
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40022100 	.word	0x40022100
 8003a94:	40022300 	.word	0x40022300
 8003a98:	58026300 	.word	0x58026300
 8003a9c:	005f5e10 	.word	0x005f5e10
 8003aa0:	00bebc20 	.word	0x00bebc20
 8003aa4:	017d7840 	.word	0x017d7840

08003aa8 <LL_ADC_IsEnabled>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <LL_ADC_IsEnabled+0x18>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <LL_ADC_IsEnabled+0x1a>
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_ADC_REG_IsConversionOngoing>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d101      	bne.n	8003ae6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b0a3      	sub	sp, #140	@ 0x8c
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0c1      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0a0      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ffb9 	bl	8003ace <LL_ADC_REG_IsConversionOngoing>
 8003b5c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ffb2 	bl	8003ace <LL_ADC_REG_IsConversionOngoing>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f040 8081 	bne.w	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d17c      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a46      	ldr	r2, [pc, #280]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003b8e:	4b46      	ldr	r3, [pc, #280]	@ (8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b90:	e000      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003b92:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b94:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d039      	beq.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a39      	ldr	r2, [pc, #228]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10e      	bne.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003bc4:	4836      	ldr	r0, [pc, #216]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bc6:	f7ff ff6f 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4835      	ldr	r0, [pc, #212]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bce:	f7ff ff6b 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4323      	orrs	r3, r4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e008      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003be2:	4833      	ldr	r0, [pc, #204]	@ (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003be4:	f7ff ff60 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d047      	beq.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	6811      	ldr	r1, [r2, #0]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c10:	e03a      	b.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10e      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c32:	481b      	ldr	r0, [pc, #108]	@ (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c34:	f7ff ff38 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	481a      	ldr	r0, [pc, #104]	@ (8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c3c:	f7ff ff34 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4323      	orrs	r3, r4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e008      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c50:	4817      	ldr	r0, [pc, #92]	@ (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c52:	f7ff ff29 	bl	8003aa8 <LL_ADC_IsEnabled>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d010      	beq.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c72:	e009      	b.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003c86:	e000      	b.n	8003c8a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	378c      	adds	r7, #140	@ 0x8c
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40022100 	.word	0x40022100
 8003ca8:	40022300 	.word	0x40022300
 8003cac:	58026300 	.word	0x58026300
 8003cb0:	58026000 	.word	0x58026000
 8003cb4:	fffff0e0 	.word	0xfffff0e0

08003cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <__NVIC_SetPriorityGrouping+0x44>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00
 8003cfc:	05fa0000 	.word	0x05fa0000

08003d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <__NVIC_GetPriorityGrouping+0x18>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f003 0307 	and.w	r3, r3, #7
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db0b      	blt.n	8003d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	4907      	ldr	r1, [pc, #28]	@ (8003d54 <__NVIC_EnableIRQ+0x38>)
 8003d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000e100 	.word	0xe000e100

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	@ (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	@ (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf28      	it	cs
 8003dca:	2304      	movcs	r3, #4
 8003dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d902      	bls.n	8003ddc <NVIC_EncodePriority+0x30>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b03      	subs	r3, #3
 8003dda:	e000      	b.n	8003dde <NVIC_EncodePriority+0x32>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	4313      	orrs	r3, r2
         );
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	@ 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff4c 	bl	8003cb8 <__NVIC_SetPriorityGrouping>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e36:	f7ff ff63 	bl	8003d00 <__NVIC_GetPriorityGrouping>
 8003e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f7ff ffb3 	bl	8003dac <NVIC_EncodePriority>
 8003e46:	4602      	mov	r2, r0
 8003e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff82 	bl	8003d58 <__NVIC_SetPriority>
}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff56 	bl	8003d1c <__NVIC_EnableIRQ>
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0e3      	b.n	8004052 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2223      	movs	r2, #35	@ 0x23
 8003e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f008 fa51 	bl	800c344 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800405c <HAL_ETH_Init+0x1e4>)
 8003ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	@ (800405c <HAL_ETH_Init+0x1e4>)
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800405c <HAL_ETH_Init+0x1e4>)
 8003eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7a1b      	ldrb	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fd ff21 	bl	8001d10 <HAL_SYSCFG_ETHInterfaceSelect>
 8003ece:	e003      	b.n	8003ed8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ed0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003ed4:	f7fd ff1c 	bl	8001d10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003ed8:	4b61      	ldr	r3, [pc, #388]	@ (8004060 <HAL_ETH_Init+0x1e8>)
 8003eda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ef2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef4:	f7fd ff00 	bl	8001cf8 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003efa:	e011      	b.n	8003f20 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003efc:	f7fd fefc 	bl	8001cf8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003f0a:	d909      	bls.n	8003f20 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22e0      	movs	r2, #224	@ 0xe0
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e098      	b.n	8004052 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e4      	bne.n	8003efc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fe0a 	bl	8004b4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f38:	f002 fcee 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4a49      	ldr	r2, [pc, #292]	@ (8004064 <HAL_ETH_Init+0x1ec>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9a      	lsrs	r2, r3, #18
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3a01      	subs	r2, #1
 8003f4c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fffb 	bl	8004f4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f62:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f72:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	22e0      	movs	r2, #224	@ 0xe0
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e05d      	b.n	8004052 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003fa2:	4b31      	ldr	r3, [pc, #196]	@ (8004068 <HAL_ETH_Init+0x1f0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6952      	ldr	r2, [r2, #20]
 8003faa:	0051      	lsls	r1, r2, #1
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fb6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f001 f863 	bl	8005086 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f001 f8a9 	bl	8005118 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	3305      	adds	r3, #5
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	021a      	lsls	r2, r3, #8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	3303      	adds	r3, #3
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	061a      	lsls	r2, r3, #24
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	3301      	adds	r3, #1
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004004:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004012:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004014:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b11      	ldr	r3, [pc, #68]	@ (800406c <HAL_ETH_Init+0x1f4>)
 8004026:	430b      	orrs	r3, r1
 8004028:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <HAL_ETH_Init+0x1f8>)
 800403a:	430b      	orrs	r3, r1
 800403c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2210      	movs	r2, #16
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
 8004060:	58000400 	.word	0x58000400
 8004064:	431bde83 	.word	0x431bde83
 8004068:	ffff8001 	.word	0xffff8001
 800406c:	0c020060 	.word	0x0c020060
 8004070:	0c20c000 	.word	0x0c20c000

08004074 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	2b10      	cmp	r3, #16
 8004084:	d165      	bne.n	8004152 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2223      	movs	r2, #35	@ 0x23
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2204      	movs	r2, #4
 8004098:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9e4 	bl	8004468 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040b8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040d4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80040ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040f0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0202 	orr.w	r2, r2, #2
 8004116:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004130:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 800413c:	430b      	orrs	r3, r1
 800413e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004142:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2223      	movs	r2, #35	@ 0x23
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416a:	2b23      	cmp	r3, #35	@ 0x23
 800416c:	d165      	bne.n	800423a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2223      	movs	r2, #35	@ 0x23
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800417e:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b30      	ldr	r3, [pc, #192]	@ (8004248 <HAL_ETH_Stop_IT+0xec>)
 8004188:	400b      	ands	r3, r1
 800418a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800418e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0202 	bic.w	r2, r2, #2
 80041fc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e00e      	b.n	8004222 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	3212      	adds	r2, #18
 800420a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d9ed      	bls.n	8004204 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2210      	movs	r2, #16
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	ffff2f3e 	.word	0xffff2f3e

0800424c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e03a      	b.n	80042e6 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	2b23      	cmp	r3, #35	@ 0x23
 8004278:	d134      	bne.n	80042e4 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004282:	2201      	movs	r2, #1
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 ffa4 	bl	80051d4 <ETH_Prepare_Tx_Descriptors>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f043 0202 	orr.w	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01f      	b.n	80042e6 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80042a6:	f3bf 8f4f 	dsb	sy
}
 80042aa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d904      	bls.n	80042c8 <HAL_ETH_Transmit_IT+0x7c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	1f1a      	subs	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3106      	adds	r1, #6
 80042d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042dc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f043 0201 	orr.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0a2      	b.n	8004460 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004320:	2b23      	cmp	r3, #35	@ 0x23
 8004322:	d001      	beq.n	8004328 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e09b      	b.n	8004460 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	3212      	adds	r2, #18
 8004334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004338:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433e:	f1c3 0304 	rsb	r3, r3, #4
 8004342:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004344:	e064      	b.n	8004410 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_ETH_ReadData+0x88>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03a      	beq.n	80043ec <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f008 f994 	bl	800c6f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2200      	movs	r2, #0
 80043ea:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d902      	bls.n	80043fe <HAL_ETH_ReadData+0x110>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3b04      	subs	r3, #4
 80043fc:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	3212      	adds	r2, #18
 8004404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004408:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3301      	adds	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004414:	2b00      	cmp	r3, #0
 8004416:	db06      	blt.n	8004426 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d202      	bcs.n	8004426 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d08f      	beq.n	8004346 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f814 	bl	8004468 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	3212      	adds	r2, #18
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004488:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004490:	e038      	b.n	8004504 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d112      	bne.n	80044c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4618      	mov	r0, r3
 80044a0:	f008 f8fa 	bl	800c698 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	74fb      	strb	r3, [r7, #19]
 80044ae:	e007      	b.n	80044c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	461a      	mov	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	461a      	mov	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01e      	beq.n	8004504 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e003      	b.n	80044e0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80044de:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d902      	bls.n	80044f2 <ETH_UpdateDescriptor+0x8a>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3b04      	subs	r3, #4
 80044f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	3212      	adds	r2, #18
 80044f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3b01      	subs	r3, #1
 8004502:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <ETH_UpdateDescriptor+0xa8>
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1c0      	bne.n	8004492 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d01b      	beq.n	8004552 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3301      	adds	r3, #1
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004524:	f3bf 8f5f 	dmb	sy
}
 8004528:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6919      	ldr	r1, [r3, #16]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	18ca      	adds	r2, r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004542:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3318      	adds	r3, #24
 8004566:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004578:	e047      	b.n	800460a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800457a:	2301      	movs	r3, #1
 800457c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3b01      	subs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3304      	adds	r3, #4
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3301      	adds	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d902      	bls.n	80045a6 <HAL_ETH_ReleaseTxPacket+0x4c>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3b04      	subs	r3, #4
 80045a4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02c      	beq.n	800460a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	440b      	add	r3, r1
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	db1f      	blt.n	8004606 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	3304      	adds	r3, #4
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f008 f8f8 	bl	800c7c8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3304      	adds	r3, #4
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	2200      	movs	r2, #0
 80045e4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3301      	adds	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d902      	bls.n	80045f8 <HAL_ETH_ReleaseTxPacket+0x9e>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3b04      	subs	r3, #4
 80045f6:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004604:	e001      	b.n	800460a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1b1      	bne.n	800457a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e03e      	b.n	80046c0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800464a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	055b      	lsls	r3, r3, #21
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f043 030c 	orr.w	r3, r3, #12
 800466e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004682:	f7fd fb39 	bl	8001cf8 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004688:	e009      	b.n	800469e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800468a:	f7fd fb35 	bl	8001cf8 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004698:	d901      	bls.n	800469e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e010      	b.n	80046c0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ed      	bne.n	800468a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e03c      	b.n	8004764 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046f2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	055b      	lsls	r3, r3, #21
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 030c 	bic.w	r3, r3, #12
 8004716:	f043 0304 	orr.w	r3, r3, #4
 800471a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b10      	ldr	r3, [pc, #64]	@ (800476c <HAL_ETH_WritePHYRegister+0xa4>)
 800472a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800472e:	4a0f      	ldr	r2, [pc, #60]	@ (800476c <HAL_ETH_WritePHYRegister+0xa4>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004736:	f7fd fadf 	bl	8001cf8 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800473c:	e009      	b.n	8004752 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800473e:	f7fd fadb 	bl	8001cf8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800474c:	d901      	bls.n	8004752 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e008      	b.n	8004764 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ed      	bne.n	800473e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40028000 	.word	0x40028000

08004770 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e1c3      	b.n	8004b0c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 020c 	and.w	r2, r3, #12
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bf14      	ite	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	2300      	moveq	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800489a:	2b00      	cmp	r3, #0
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80048fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0e5b      	lsrs	r3, r3, #25
 80049ce:	f003 021f 	and.w	r2, r3, #31
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004a98:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004aa8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e00b      	b.n	8004b44 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d105      	bne.n	8004b42 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f865 	bl	8004c08 <ETH_SetMACConfig>

    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b66:	f001 fed7 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8004b6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d804      	bhi.n	8004b7e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	e022      	b.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a16      	ldr	r2, [pc, #88]	@ (8004bdc <HAL_ETH_SetMDIOClockRange+0x90>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d204      	bcs.n	8004b90 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e019      	b.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a13      	ldr	r2, [pc, #76]	@ (8004be0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d915      	bls.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a12      	ldr	r2, [pc, #72]	@ (8004be4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d804      	bhi.n	8004baa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e00c      	b.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4a0e      	ldr	r2, [pc, #56]	@ (8004be8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d804      	bhi.n	8004bbc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e003      	b.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	02160ebf 	.word	0x02160ebf
 8004bdc:	03938700 	.word	0x03938700
 8004be0:	05f5e0ff 	.word	0x05f5e0ff
 8004be4:	08f0d17f 	.word	0x08f0d17f
 8004be8:	0ee6b27f 	.word	0x0ee6b27f

08004bec <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	791b      	ldrb	r3, [r3, #4]
 8004c20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004c22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
 8004c28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	7b5b      	ldrb	r3, [r3, #13]
 8004c30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	7b9b      	ldrb	r3, [r3, #14]
 8004c38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7bdb      	ldrb	r3, [r3, #15]
 8004c40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	7c12      	ldrb	r2, [r2, #16]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d102      	bne.n	8004c52 <ETH_SetMACConfig+0x4a>
 8004c4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c50:	e000      	b.n	8004c54 <ETH_SetMACConfig+0x4c>
 8004c52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	7c52      	ldrb	r2, [r2, #17]
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d102      	bne.n	8004c64 <ETH_SetMACConfig+0x5c>
 8004c5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c62:	e000      	b.n	8004c66 <ETH_SetMACConfig+0x5e>
 8004c64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	7c9b      	ldrb	r3, [r3, #18]
 8004c6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c6e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7f1b      	ldrb	r3, [r3, #28]
 8004c80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	7f5b      	ldrb	r3, [r3, #29]
 8004c88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	7f92      	ldrb	r2, [r2, #30]
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d102      	bne.n	8004c9a <ETH_SetMACConfig+0x92>
 8004c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c98:	e000      	b.n	8004c9c <ETH_SetMACConfig+0x94>
 8004c9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	7fdb      	ldrb	r3, [r3, #31]
 8004ca2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ca4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d102      	bne.n	8004cb6 <ETH_SetMACConfig+0xae>
 8004cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cb4:	e000      	b.n	8004cb8 <ETH_SetMACConfig+0xb0>
 8004cb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004cb8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004cc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b56      	ldr	r3, [pc, #344]	@ (8004e34 <ETH_SetMACConfig+0x22c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004cf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004d08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d102      	bne.n	8004d1a <ETH_SetMACConfig+0x112>
 8004d14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d18:	e000      	b.n	8004d1c <ETH_SetMACConfig+0x114>
 8004d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b42      	ldr	r3, [pc, #264]	@ (8004e38 <ETH_SetMACConfig+0x230>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	4b3a      	ldr	r3, [pc, #232]	@ (8004e3c <ETH_SetMACConfig+0x234>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d101      	bne.n	8004d7a <ETH_SetMACConfig+0x172>
 8004d76:	2280      	movs	r2, #128	@ 0x80
 8004d78:	e000      	b.n	8004d7c <ETH_SetMACConfig+0x174>
 8004d7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004d7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d8e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004da4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004dac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	f023 0103 	bic.w	r1, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004dd2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004dee:	2a00      	cmp	r2, #0
 8004df0:	d101      	bne.n	8004df6 <ETH_SetMACConfig+0x1ee>
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	e000      	b.n	8004df8 <ETH_SetMACConfig+0x1f0>
 8004df6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004df8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004e00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004e0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004e18:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	00048083 	.word	0x00048083
 8004e38:	c0f88000 	.word	0xc0f88000
 8004e3c:	fffffef0 	.word	0xfffffef0

08004e40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b38      	ldr	r3, [pc, #224]	@ (8004f38 <ETH_SetDMAConfig+0xf8>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	6811      	ldr	r1, [r2, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b2c      	ldr	r3, [pc, #176]	@ (8004f3c <ETH_SetDMAConfig+0xfc>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	7b5b      	ldrb	r3, [r3, #13]
 8004e9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004eb4:	4b22      	ldr	r3, [pc, #136]	@ (8004f40 <ETH_SetDMAConfig+0x100>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ec4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7d1b      	ldrb	r3, [r3, #20]
 8004ed0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ed2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7f5b      	ldrb	r3, [r3, #29]
 8004ed8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ee6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004eea:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <ETH_SetDMAConfig+0x104>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004efa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7f1b      	ldrb	r3, [r3, #28]
 8004f02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f14:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <ETH_SetDMAConfig+0x108>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f28:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	ffff87fd 	.word	0xffff87fd
 8004f3c:	ffff2ffe 	.word	0xffff2ffe
 8004f40:	fffec000 	.word	0xfffec000
 8004f44:	ffc0efef 	.word	0xffc0efef
 8004f48:	7fc0ffff 	.word	0x7fc0ffff

08004f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b0a4      	sub	sp, #144	@ 0x90
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004fa4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004ff6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005008:	2302      	movs	r3, #2
 800500a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005026:	2300      	movs	r3, #0
 8005028:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005030:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fde6 	bl	8004c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800503c:	2301      	movs	r3, #1
 800503e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800504e:	2300      	movs	r3, #0
 8005050:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005052:	2300      	movs	r3, #0
 8005054:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005056:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800505a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800505c:	2300      	movs	r3, #0
 800505e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005060:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005064:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800506c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fee1 	bl	8004e40 <ETH_SetDMAConfig>
}
 800507e:	bf00      	nop
 8005080:	3790      	adds	r7, #144	@ 0x90
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e01d      	b.n	80050d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68d9      	ldr	r1, [r3, #12]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	3206      	adds	r2, #6
 80050c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d9de      	bls.n	8005094 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e4:	461a      	mov	r2, r3
 80050e6:	2303      	movs	r3, #3
 80050e8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005108:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e023      	b.n	800516e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6919      	ldr	r1, [r3, #16]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2200      	movs	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	3212      	adds	r2, #18
 8005164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d9d8      	bls.n	8005126 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800519a:	461a      	mov	r2, r3
 800519c:	2303      	movs	r3, #3
 800519e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b091      	sub	sp, #68	@ 0x44
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3318      	adds	r3, #24
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005212:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005216:	d007      	beq.n	8005228 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521c:	3304      	adds	r3, #4
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005228:	2302      	movs	r3, #2
 800522a:	e266      	b.n	80056fa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d044      	beq.n	80052c2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	4b75      	ldr	r3, [pc, #468]	@ (8005414 <ETH_Prepare_Tx_Descriptors+0x240>)
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005244:	431a      	orrs	r2, r3
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005264:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d027      	beq.n	80052c2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	b29a      	uxth	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	431a      	orrs	r2, r3
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80052b0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80052c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	4b51      	ldr	r3, [pc, #324]	@ (8005418 <ETH_Prepare_Tx_Descriptors+0x244>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	6992      	ldr	r2, [r2, #24]
 80052da:	431a      	orrs	r2, r3
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d036      	beq.n	8005372 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005310:	f3bf 8f5f 	dmb	sy
}
 8005314:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005324:	3301      	adds	r3, #1
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532a:	2b03      	cmp	r3, #3
 800532c:	d902      	bls.n	8005334 <ETH_Prepare_Tx_Descriptors+0x160>
 800532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005330:	3b04      	subs	r3, #4
 8005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800533e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005340:	3301      	adds	r3, #1
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800534c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005350:	d10f      	bne.n	8005372 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800535c:	f3bf 8f5f 	dmb	sy
}
 8005360:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800536e:	2302      	movs	r3, #2
 8005370:	e1c3      	b.n	80056fa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	3301      	adds	r3, #1
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005388:	4013      	ands	r3, r2
 800538a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d012      	beq.n	80053c2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b1a      	ldr	r3, [pc, #104]	@ (800541c <ETH_Prepare_Tx_Descriptors+0x248>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b6:	6852      	ldr	r2, [r2, #4]
 80053b8:	0412      	lsls	r2, r2, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	e008      	b.n	80053d4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <ETH_Prepare_Tx_Descriptors+0x248>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d021      	beq.n	8005424 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	04db      	lsls	r3, r3, #19
 80053ee:	431a      	orrs	r2, r3
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	69d2      	ldr	r2, [r2, #28]
 8005400:	431a      	orrs	r2, r3
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e02e      	b.n	8005472 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005414:	ffff0000 	.word	0xffff0000
 8005418:	ffffc000 	.word	0xffffc000
 800541c:	c000ffff 	.word	0xc000ffff
 8005420:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	4b7b      	ldr	r3, [pc, #492]	@ (8005618 <ETH_Prepare_Tx_Descriptors+0x444>)
 800542a:	4013      	ands	r3, r2
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	6852      	ldr	r2, [r2, #4]
 8005430:	431a      	orrs	r2, r3
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	431a      	orrs	r2, r3
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80054a8:	f3bf 8f5f 	dmb	sy
}
 80054ac:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80da 	beq.w	800567c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054da:	e0cf      	b.n	800567c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80054e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ea:	3301      	adds	r3, #1
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d902      	bls.n	80054fa <ETH_Prepare_Tx_Descriptors+0x326>
 80054f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f6:	3b04      	subs	r3, #4
 80054f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800551c:	d007      	beq.n	800552e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800551e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005522:	3304      	adds	r3, #4
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d029      	beq.n	8005582 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800553c:	2300      	movs	r3, #0
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005540:	e019      	b.n	8005576 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005542:	f3bf 8f5f 	dmb	sy
}
 8005546:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005556:	3301      	adds	r3, #1
 8005558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	2b03      	cmp	r3, #3
 800555e:	d902      	bls.n	8005566 <ETH_Prepare_Tx_Descriptors+0x392>
 8005560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005562:	3b04      	subs	r3, #4
 8005564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005572:	3301      	adds	r3, #1
 8005574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005576:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	429a      	cmp	r2, r3
 800557c:	d3e1      	bcc.n	8005542 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	e0bb      	b.n	80056fa <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	3301      	adds	r3, #1
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	4b1f      	ldr	r3, [pc, #124]	@ (800561c <ETH_Prepare_Tx_Descriptors+0x448>)
 800559e:	4013      	ands	r3, r2
 80055a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a2:	6852      	ldr	r2, [r2, #4]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80055aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055cc:	6852      	ldr	r2, [r2, #4]
 80055ce:	0412      	lsls	r2, r2, #16
 80055d0:	431a      	orrs	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e008      	b.n	80055ea <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80055de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <ETH_Prepare_Tx_Descriptors+0x450>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	69d2      	ldr	r2, [r2, #28]
 8005602:	431a      	orrs	r2, r3
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	e020      	b.n	8005658 <ETH_Prepare_Tx_Descriptors+0x484>
 8005616:	bf00      	nop
 8005618:	ffff8000 	.word	0xffff8000
 800561c:	ffffc000 	.word	0xffffc000
 8005620:	c000ffff 	.word	0xc000ffff
 8005624:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	4b36      	ldr	r3, [pc, #216]	@ (8005708 <ETH_Prepare_Tx_Descriptors+0x534>)
 800562e:	4013      	ands	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	431a      	orrs	r2, r3
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	3301      	adds	r3, #1
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800565e:	f3bf 8f5f 	dmb	sy
}
 8005662:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f47f af2b 	bne.w	80054dc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	e005      	b.n	80056a6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ba:	3304      	adds	r3, #4
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c8:	f3ef 8310 	mrs	r3, PRIMASK
 80056cc:	613b      	str	r3, [r7, #16]
  return(result);
 80056ce:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	2301      	movs	r3, #1
 80056d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	4413      	add	r3, r2
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f383 8810 	msr	PRIMASK, r3
}
 80056f6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3744      	adds	r7, #68	@ 0x44
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	ffff8000 	.word	0xffff8000

0800570c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	@ 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800571a:	4b86      	ldr	r3, [pc, #536]	@ (8005934 <HAL_GPIO_Init+0x228>)
 800571c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800571e:	e18c      	b.n	8005a3a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	2101      	movs	r1, #1
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 817e 	beq.w	8005a34 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d005      	beq.n	8005750 <HAL_GPIO_Init+0x44>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d130      	bne.n	80057b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	2203      	movs	r2, #3
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005786:	2201      	movs	r2, #1
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	f003 0201 	and.w	r2, r3, #1
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d017      	beq.n	80057ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	2203      	movs	r2, #3
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d123      	bne.n	8005842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	08da      	lsrs	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3208      	adds	r2, #8
 8005802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	220f      	movs	r2, #15
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	08da      	lsrs	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3208      	adds	r2, #8
 800583c:	69b9      	ldr	r1, [r7, #24]
 800583e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	2203      	movs	r2, #3
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0203 	and.w	r2, r3, #3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80d8 	beq.w	8005a34 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005884:	4b2c      	ldr	r3, [pc, #176]	@ (8005938 <HAL_GPIO_Init+0x22c>)
 8005886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800588a:	4a2b      	ldr	r2, [pc, #172]	@ (8005938 <HAL_GPIO_Init+0x22c>)
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005894:	4b28      	ldr	r3, [pc, #160]	@ (8005938 <HAL_GPIO_Init+0x22c>)
 8005896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a2:	4a26      	ldr	r2, [pc, #152]	@ (800593c <HAL_GPIO_Init+0x230>)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3302      	adds	r3, #2
 80058aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <HAL_GPIO_Init+0x234>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d04a      	beq.n	8005964 <HAL_GPIO_Init+0x258>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005944 <HAL_GPIO_Init+0x238>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02b      	beq.n	800592e <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005948 <HAL_GPIO_Init+0x23c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d025      	beq.n	800592a <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1a      	ldr	r2, [pc, #104]	@ (800594c <HAL_GPIO_Init+0x240>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01f      	beq.n	8005926 <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a19      	ldr	r2, [pc, #100]	@ (8005950 <HAL_GPIO_Init+0x244>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d019      	beq.n	8005922 <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <HAL_GPIO_Init+0x248>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_GPIO_Init+0x24c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00d      	beq.n	800591a <HAL_GPIO_Init+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a16      	ldr	r2, [pc, #88]	@ (800595c <HAL_GPIO_Init+0x250>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <HAL_GPIO_Init+0x20a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <HAL_GPIO_Init+0x254>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_GPIO_Init+0x206>
 800590e:	2309      	movs	r3, #9
 8005910:	e029      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 8005912:	230a      	movs	r3, #10
 8005914:	e027      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 8005916:	2307      	movs	r3, #7
 8005918:	e025      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 800591a:	2306      	movs	r3, #6
 800591c:	e023      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 800591e:	2305      	movs	r3, #5
 8005920:	e021      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 8005922:	2304      	movs	r3, #4
 8005924:	e01f      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 8005926:	2303      	movs	r3, #3
 8005928:	e01d      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 800592a:	2302      	movs	r3, #2
 800592c:	e01b      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 800592e:	2301      	movs	r3, #1
 8005930:	e019      	b.n	8005966 <HAL_GPIO_Init+0x25a>
 8005932:	bf00      	nop
 8005934:	58000080 	.word	0x58000080
 8005938:	58024400 	.word	0x58024400
 800593c:	58000400 	.word	0x58000400
 8005940:	58020000 	.word	0x58020000
 8005944:	58020400 	.word	0x58020400
 8005948:	58020800 	.word	0x58020800
 800594c:	58020c00 	.word	0x58020c00
 8005950:	58021000 	.word	0x58021000
 8005954:	58021400 	.word	0x58021400
 8005958:	58021800 	.word	0x58021800
 800595c:	58021c00 	.word	0x58021c00
 8005960:	58022400 	.word	0x58022400
 8005964:	2300      	movs	r3, #0
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	f002 0203 	and.w	r2, r2, #3
 800596c:	0092      	lsls	r2, r2, #2
 800596e:	4093      	lsls	r3, r2
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005976:	4938      	ldr	r1, [pc, #224]	@ (8005a58 <HAL_GPIO_Init+0x34c>)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	3302      	adds	r3, #2
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f ae6b 	bne.w	8005720 <HAL_GPIO_Init+0x14>
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	3724      	adds	r7, #36	@ 0x24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	58000400 	.word	0x58000400

08005a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a6c:	787b      	ldrb	r3, [r7, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a78:	e003      	b.n	8005a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a7a:	887b      	ldrh	r3, [r7, #2]
 8005a7c:	041a      	lsls	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	619a      	str	r2, [r3, #24]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a98:	4b19      	ldr	r3, [pc, #100]	@ (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d00a      	beq.n	8005aba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005aa4:	4b16      	ldr	r3, [pc, #88]	@ (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e01f      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e01d      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 0207 	bic.w	r2, r3, #7
 8005ac2:	490f      	ldr	r1, [pc, #60]	@ (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aca:	f7fc f915 	bl	8001cf8 <HAL_GetTick>
 8005ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ad0:	e009      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ad2:	f7fc f911 	bl	8001cf8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ae0:	d901      	bls.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e007      	b.n	8005af6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <HAL_PWREx_ConfigSupply+0x70>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	58024800 	.word	0x58024800

08005b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	@ 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e3c8      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8087 	beq.w	8005c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b24:	4b88      	ldr	r3, [pc, #544]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b2e:	4b86      	ldr	r3, [pc, #536]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d007      	beq.n	8005b4a <HAL_RCC_OscConfig+0x46>
 8005b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3c:	2b18      	cmp	r3, #24
 8005b3e:	d110      	bne.n	8005b62 <HAL_RCC_OscConfig+0x5e>
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d06c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x12c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d168      	bne.n	8005c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e3a2      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6a:	d106      	bne.n	8005b7a <HAL_RCC_OscConfig+0x76>
 8005b6c:	4b76      	ldr	r3, [pc, #472]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a75      	ldr	r2, [pc, #468]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e02e      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x98>
 8005b82:	4b71      	ldr	r3, [pc, #452]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a70      	ldr	r2, [pc, #448]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6d      	ldr	r2, [pc, #436]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e01d      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0xbc>
 8005ba6:	4b68      	ldr	r3, [pc, #416]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a67      	ldr	r2, [pc, #412]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b65      	ldr	r3, [pc, #404]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a64      	ldr	r2, [pc, #400]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005bc0:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a60      	ldr	r2, [pc, #384]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d013      	beq.n	8005c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fc f88a 	bl	8001cf8 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be8:	f7fc f886 	bl	8001cf8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	@ 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e356      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfa:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0xe4>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fc f876 	bl	8001cf8 <HAL_GetTick>
 8005c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c10:	f7fc f872 	bl	8001cf8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b64      	cmp	r3, #100	@ 0x64
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e342      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c22:	4b49      	ldr	r3, [pc, #292]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x10c>
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 808c 	beq.w	8005d58 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c40:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_RCC_OscConfig+0x162>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b18      	cmp	r3, #24
 8005c5a:	d137      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1c8>
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d132      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c66:	4b38      	ldr	r3, [pc, #224]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCC_OscConfig+0x17a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e314      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c7e:	4b32      	ldr	r3, [pc, #200]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 0219 	bic.w	r2, r3, #25
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	492f      	ldr	r1, [pc, #188]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fc f832 	bl	8001cf8 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c98:	f7fc f82e 	bl	8001cf8 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e2fe      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005caa:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	4920      	ldr	r1, [pc, #128]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cca:	e045      	b.n	8005d58 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d026      	beq.n	8005d22 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 0219 	bic.w	r2, r3, #25
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4919      	ldr	r1, [pc, #100]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc f807 	bl	8001cf8 <HAL_GetTick>
 8005cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fc f803 	bl	8001cf8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e2d3      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d00:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	490b      	ldr	r1, [pc, #44]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
 8005d20:	e01a      	b.n	8005d58 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d22:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a08      	ldr	r2, [pc, #32]	@ (8005d48 <HAL_RCC_OscConfig+0x244>)
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7fb ffe3 	bl	8001cf8 <HAL_GetTick>
 8005d32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d36:	f7fb ffdf 	bl	8001cf8 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d903      	bls.n	8005d4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e2af      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
 8005d48:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d4c:	4b96      	ldr	r3, [pc, #600]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ee      	bne.n	8005d36 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d06a      	beq.n	8005e3a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d64:	4b90      	ldr	r3, [pc, #576]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d6e:	4b8e      	ldr	r3, [pc, #568]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d007      	beq.n	8005d8a <HAL_RCC_OscConfig+0x286>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b18      	cmp	r3, #24
 8005d7e:	d11b      	bne.n	8005db8 <HAL_RCC_OscConfig+0x2b4>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d116      	bne.n	8005db8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d8a:	4b87      	ldr	r3, [pc, #540]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_RCC_OscConfig+0x29e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	2b80      	cmp	r3, #128	@ 0x80
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e282      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005da2:	4b81      	ldr	r3, [pc, #516]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	497d      	ldr	r1, [pc, #500]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005db6:	e040      	b.n	8005e3a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d023      	beq.n	8005e08 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005dc0:	4b79      	ldr	r3, [pc, #484]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a78      	ldr	r2, [pc, #480]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fb ff94 	bl	8001cf8 <HAL_GetTick>
 8005dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dd4:	f7fb ff90 	bl	8001cf8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e260      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005de6:	4b70      	ldr	r3, [pc, #448]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005df2:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	4969      	ldr	r1, [pc, #420]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60cb      	str	r3, [r1, #12]
 8005e06:	e018      	b.n	8005e3a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e08:	4b67      	ldr	r3, [pc, #412]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a66      	ldr	r2, [pc, #408]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fb ff70 	bl	8001cf8 <HAL_GetTick>
 8005e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e1c:	f7fb ff6c 	bl	8001cf8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e23c      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d036      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d019      	beq.n	8005e82 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4e:	4b56      	ldr	r3, [pc, #344]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e52:	4a55      	ldr	r2, [pc, #340]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5a:	f7fb ff4d 	bl	8001cf8 <HAL_GetTick>
 8005e5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e62:	f7fb ff49 	bl	8001cf8 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e219      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e74:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCC_OscConfig+0x35e>
 8005e80:	e018      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e82:	4b49      	ldr	r3, [pc, #292]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e86:	4a48      	ldr	r2, [pc, #288]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8e:	f7fb ff33 	bl	8001cf8 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e96:	f7fb ff2f 	bl	8001cf8 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e1ff      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f0      	bne.n	8005e96 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d036      	beq.n	8005f2e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d019      	beq.n	8005efc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec8:	4b37      	ldr	r3, [pc, #220]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a36      	ldr	r2, [pc, #216]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005ece:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ed4:	f7fb ff10 	bl	8001cf8 <HAL_GetTick>
 8005ed8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005edc:	f7fb ff0c 	bl	8001cf8 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1dc      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eee:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x3d8>
 8005efa:	e018      	b.n	8005f2e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005efc:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a29      	ldr	r2, [pc, #164]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f08:	f7fb fef6 	bl	8001cf8 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f10:	f7fb fef2 	bl	8001cf8 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1c2      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f22:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8086 	beq.w	8006048 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fac <HAL_RCC_OscConfig+0x4a8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1a      	ldr	r2, [pc, #104]	@ (8005fac <HAL_RCC_OscConfig+0x4a8>)
 8005f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f48:	f7fb fed6 	bl	8001cf8 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f50:	f7fb fed2 	bl	8001cf8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b64      	cmp	r3, #100	@ 0x64
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e1a2      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f62:	4b12      	ldr	r3, [pc, #72]	@ (8005fac <HAL_RCC_OscConfig+0x4a8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d106      	bne.n	8005f84 <HAL_RCC_OscConfig+0x480>
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f82:	e032      	b.n	8005fea <HAL_RCC_OscConfig+0x4e6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d111      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4ac>
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	4a05      	ldr	r2, [pc, #20]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f98:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9c:	4a02      	ldr	r2, [pc, #8]	@ (8005fa8 <HAL_RCC_OscConfig+0x4a4>)
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa4:	e021      	b.n	8005fea <HAL_RCC_OscConfig+0x4e6>
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	58024800 	.word	0x58024800
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x4ce>
 8005fb8:	4b83      	ldr	r3, [pc, #524]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbc:	4a82      	ldr	r2, [pc, #520]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc4:	4b80      	ldr	r3, [pc, #512]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc8:	4a7f      	ldr	r2, [pc, #508]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd0:	e00b      	b.n	8005fea <HAL_RCC_OscConfig+0x4e6>
 8005fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fde:	4b7a      	ldr	r3, [pc, #488]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	4a79      	ldr	r2, [pc, #484]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fe81 	bl	8001cf8 <HAL_GetTick>
 8005ff6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fb fe7d 	bl	8001cf8 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e14b      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006010:	4b6d      	ldr	r3, [pc, #436]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ee      	beq.n	8005ffa <HAL_RCC_OscConfig+0x4f6>
 800601c:	e014      	b.n	8006048 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601e:	f7fb fe6b 	bl	8001cf8 <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006024:	e00a      	b.n	800603c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fb fe67 	bl	8001cf8 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e135      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800603c:	4b62      	ldr	r3, [pc, #392]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ee      	bne.n	8006026 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 812a 	beq.w	80062a6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006052:	4b5d      	ldr	r3, [pc, #372]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800605a:	2b18      	cmp	r3, #24
 800605c:	f000 80ba 	beq.w	80061d4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	2b02      	cmp	r3, #2
 8006066:	f040 8095 	bne.w	8006194 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606a:	4b57      	ldr	r3, [pc, #348]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a56      	ldr	r2, [pc, #344]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fb fe3f 	bl	8001cf8 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607e:	f7fb fe3b 	bl	8001cf8 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e10b      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006090:	4b4d      	ldr	r3, [pc, #308]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800609c:	4b4a      	ldr	r3, [pc, #296]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800609e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a0:	4b4a      	ldr	r3, [pc, #296]	@ (80061cc <HAL_RCC_OscConfig+0x6c8>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060ac:	0112      	lsls	r2, r2, #4
 80060ae:	430a      	orrs	r2, r1
 80060b0:	4945      	ldr	r1, [pc, #276]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	3b01      	subs	r3, #1
 80060bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c4:	3b01      	subs	r3, #1
 80060c6:	025b      	lsls	r3, r3, #9
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d0:	3b01      	subs	r3, #1
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060de:	3b01      	subs	r3, #1
 80060e0:	061b      	lsls	r3, r3, #24
 80060e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060e6:	4938      	ldr	r1, [pc, #224]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060ec:	4b36      	ldr	r3, [pc, #216]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060f8:	4b33      	ldr	r3, [pc, #204]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80060fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060fc:	4b34      	ldr	r3, [pc, #208]	@ (80061d0 <HAL_RCC_OscConfig+0x6cc>)
 80060fe:	4013      	ands	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006104:	00d2      	lsls	r2, r2, #3
 8006106:	4930      	ldr	r1, [pc, #192]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006108:	4313      	orrs	r3, r2
 800610a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800610c:	4b2e      	ldr	r3, [pc, #184]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	f023 020c 	bic.w	r2, r3, #12
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	492b      	ldr	r1, [pc, #172]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800611a:	4313      	orrs	r3, r2
 800611c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800611e:	4b2a      	ldr	r3, [pc, #168]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	f023 0202 	bic.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	4927      	ldr	r1, [pc, #156]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006130:	4b25      	ldr	r3, [pc, #148]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	4a24      	ldr	r2, [pc, #144]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613c:	4b22      	ldr	r3, [pc, #136]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	4a21      	ldr	r2, [pc, #132]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006148:	4b1f      	ldr	r3, [pc, #124]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	4a1e      	ldr	r2, [pc, #120]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800614e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006154:	4b1c      	ldr	r3, [pc, #112]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4a1b      	ldr	r2, [pc, #108]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006160:	4b19      	ldr	r3, [pc, #100]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a18      	ldr	r2, [pc, #96]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800616a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fb fdc4 	bl	8001cf8 <HAL_GetTick>
 8006170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fb fdc0 	bl	8001cf8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e090      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006186:	4b10      	ldr	r3, [pc, #64]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x670>
 8006192:	e088      	b.n	80062a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006194:	4b0c      	ldr	r3, [pc, #48]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a0b      	ldr	r2, [pc, #44]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fb fdaa 	bl	8001cf8 <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fb fda6 	bl	8001cf8 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e076      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ba:	4b03      	ldr	r3, [pc, #12]	@ (80061c8 <HAL_RCC_OscConfig+0x6c4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x6a4>
 80061c6:	e06e      	b.n	80062a6 <HAL_RCC_OscConfig+0x7a2>
 80061c8:	58024400 	.word	0x58024400
 80061cc:	fffffc0c 	.word	0xfffffc0c
 80061d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061d4:	4b36      	ldr	r3, [pc, #216]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061da:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d031      	beq.n	800624c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f003 0203 	and.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d12a      	bne.n	800624c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d122      	bne.n	800624c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d108      	bne.n	800624c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e02b      	b.n	80062a8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006250:	4b17      	ldr	r3, [pc, #92]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 8006252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d01f      	beq.n	80062a6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006272:	f7fb fd41 	bl	8001cf8 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006278:	bf00      	nop
 800627a:	f7fb fd3d 	bl	8001cf8 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	4293      	cmp	r3, r2
 8006284:	d0f9      	beq.n	800627a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 8006288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800628a:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <HAL_RCC_OscConfig+0x7b0>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4906      	ldr	r1, [pc, #24]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 8006296:	4313      	orrs	r3, r2
 8006298:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800629a:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	4a04      	ldr	r2, [pc, #16]	@ (80062b0 <HAL_RCC_OscConfig+0x7ac>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3730      	adds	r7, #48	@ 0x30
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	58024400 	.word	0x58024400
 80062b4:	ffff0007 	.word	0xffff0007

080062b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e19c      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b8a      	ldr	r3, [pc, #552]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b87      	ldr	r3, [pc, #540]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 020f 	bic.w	r2, r3, #15
 80062e2:	4985      	ldr	r1, [pc, #532]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b83      	ldr	r3, [pc, #524]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e184      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	4b7b      	ldr	r3, [pc, #492]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006318:	4b78      	ldr	r3, [pc, #480]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4975      	ldr	r1, [pc, #468]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	4b70      	ldr	r3, [pc, #448]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006342:	429a      	cmp	r2, r3
 8006344:	d908      	bls.n	8006358 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006346:	4b6d      	ldr	r3, [pc, #436]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	496a      	ldr	r1, [pc, #424]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	4b64      	ldr	r3, [pc, #400]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006370:	429a      	cmp	r2, r3
 8006372:	d908      	bls.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006374:	4b61      	ldr	r3, [pc, #388]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	495e      	ldr	r1, [pc, #376]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006382:	4313      	orrs	r3, r2
 8006384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	4b59      	ldr	r3, [pc, #356]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639e:	429a      	cmp	r2, r3
 80063a0:	d908      	bls.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063a2:	4b56      	ldr	r3, [pc, #344]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4953      	ldr	r1, [pc, #332]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	4b4d      	ldr	r3, [pc, #308]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d908      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d0:	4b4a      	ldr	r3, [pc, #296]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f023 020f 	bic.w	r2, r3, #15
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4947      	ldr	r1, [pc, #284]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d055      	beq.n	800649a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ee:	4b43      	ldr	r3, [pc, #268]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4940      	ldr	r1, [pc, #256]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d107      	bne.n	8006418 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006408:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d121      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0f6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006420:	4b36      	ldr	r3, [pc, #216]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d115      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0ea      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006438:	4b30      	ldr	r3, [pc, #192]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0de      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	4b2c      	ldr	r3, [pc, #176]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0d6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f023 0207 	bic.w	r2, r3, #7
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4925      	ldr	r1, [pc, #148]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006466:	4313      	orrs	r3, r2
 8006468:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fb fc45 	bl	8001cf8 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006470:	e00a      	b.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006472:	f7fb fc41 	bl	8001cf8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e0be      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006488:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	429a      	cmp	r2, r3
 8006498:	d1eb      	bne.n	8006472 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d208      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b6:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f023 020f 	bic.w	r2, r3, #15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	490e      	ldr	r1, [pc, #56]	@ (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c8:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d214      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020f 	bic.w	r2, r3, #15
 80064de:	4906      	ldr	r1, [pc, #24]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e086      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
 80064f8:	52002000 	.word	0x52002000
 80064fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d010      	beq.n	800652e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	4b3f      	ldr	r3, [pc, #252]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006518:	429a      	cmp	r2, r3
 800651a:	d208      	bcs.n	800652e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800651c:	4b3c      	ldr	r3, [pc, #240]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	4939      	ldr	r1, [pc, #228]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800652a:	4313      	orrs	r3, r2
 800652c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695a      	ldr	r2, [r3, #20]
 800653e:	4b34      	ldr	r3, [pc, #208]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006546:	429a      	cmp	r2, r3
 8006548:	d208      	bcs.n	800655c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800654a:	4b31      	ldr	r3, [pc, #196]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	492e      	ldr	r1, [pc, #184]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006558:	4313      	orrs	r3, r2
 800655a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006574:	429a      	cmp	r2, r3
 8006576:	d208      	bcs.n	800658a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006578:	4b25      	ldr	r3, [pc, #148]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4922      	ldr	r1, [pc, #136]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006586:	4313      	orrs	r3, r2
 8006588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d208      	bcs.n	80065b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4917      	ldr	r1, [pc, #92]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b8:	f000 f834 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	4912      	ldr	r1, [pc, #72]	@ (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	4a0d      	ldr	r2, [pc, #52]	@ (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065e0:	5cd3      	ldrb	r3, [r2, r3]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x360>)
 80065ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065f0:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <HAL_RCC_ClockConfig+0x364>)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <HAL_RCC_ClockConfig+0x368>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fb f844 	bl	8001688 <HAL_InitTick>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	58024400 	.word	0x58024400
 8006614:	08022c94 	.word	0x08022c94
 8006618:	24000004 	.word	0x24000004
 800661c:	24000000 	.word	0x24000000
 8006620:	24000008 	.word	0x24000008

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	@ 0x24
 8006628:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800662a:	4bb3      	ldr	r3, [pc, #716]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006632:	2b18      	cmp	r3, #24
 8006634:	f200 8155 	bhi.w	80068e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006638:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <HAL_RCC_GetSysClockFreq+0x1c>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080068e3 	.word	0x080068e3
 8006648:	080068e3 	.word	0x080068e3
 800664c:	080068e3 	.word	0x080068e3
 8006650:	080068e3 	.word	0x080068e3
 8006654:	080068e3 	.word	0x080068e3
 8006658:	080068e3 	.word	0x080068e3
 800665c:	080068e3 	.word	0x080068e3
 8006660:	080066cb 	.word	0x080066cb
 8006664:	080068e3 	.word	0x080068e3
 8006668:	080068e3 	.word	0x080068e3
 800666c:	080068e3 	.word	0x080068e3
 8006670:	080068e3 	.word	0x080068e3
 8006674:	080068e3 	.word	0x080068e3
 8006678:	080068e3 	.word	0x080068e3
 800667c:	080068e3 	.word	0x080068e3
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080068e3 	.word	0x080068e3
 8006688:	080068e3 	.word	0x080068e3
 800668c:	080068e3 	.word	0x080068e3
 8006690:	080068e3 	.word	0x080068e3
 8006694:	080068e3 	.word	0x080068e3
 8006698:	080068e3 	.word	0x080068e3
 800669c:	080068e3 	.word	0x080068e3
 80066a0:	080066d7 	.word	0x080066d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b94      	ldr	r3, [pc, #592]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b91      	ldr	r3, [pc, #580]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a90      	ldr	r2, [pc, #576]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066c2:	e111      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066c4:	4b8d      	ldr	r3, [pc, #564]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066c6:	61bb      	str	r3, [r7, #24]
      break;
 80066c8:	e10e      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066cc:	61bb      	str	r3, [r7, #24]
      break;
 80066ce:	e10b      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066d2:	61bb      	str	r3, [r7, #24]
      break;
 80066d4:	e108      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d6:	4b88      	ldr	r3, [pc, #544]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066e0:	4b85      	ldr	r3, [pc, #532]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066ec:	4b82      	ldr	r3, [pc, #520]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066f6:	4b80      	ldr	r3, [pc, #512]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80e1 	beq.w	80068dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b02      	cmp	r3, #2
 800671e:	f000 8083 	beq.w	8006828 <HAL_RCC_GetSysClockFreq+0x204>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b02      	cmp	r3, #2
 8006726:	f200 80a1 	bhi.w	800686c <HAL_RCC_GetSysClockFreq+0x248>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x114>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d056      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006736:	e099      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006738:	4b6f      	ldr	r3, [pc, #444]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006744:	4b6c      	ldr	r3, [pc, #432]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a6b      	ldr	r2, [pc, #428]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b62      	ldr	r3, [pc, #392]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006782:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800679e:	e087      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800690c <HAL_RCC_GetSysClockFreq+0x2e8>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b51      	ldr	r3, [pc, #324]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067e2:	e065      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b40      	ldr	r3, [pc, #256]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a02 	vldr	s12, [r7, #8]
 800680a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006826:	e043      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006914 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b2f      	ldr	r3, [pc, #188]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a02 	vldr	s12, [r7, #8]
 800684e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800686a:	e021      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b1e      	ldr	r3, [pc, #120]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006892:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068b0:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ba:	3301      	adds	r3, #1
 80068bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d4:	ee17 3a90 	vmov	r3, s15
 80068d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068da:	e005      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
      break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068e2:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068e4:	61bb      	str	r3, [r7, #24]
      break;
 80068e6:	bf00      	nop
  }

  return sysclockfreq;
 80068e8:	69bb      	ldr	r3, [r7, #24]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3724      	adds	r7, #36	@ 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	003d0900 	.word	0x003d0900
 8006904:	007a1200 	.word	0x007a1200
 8006908:	46000000 	.word	0x46000000
 800690c:	4c742400 	.word	0x4c742400
 8006910:	4a742400 	.word	0x4a742400
 8006914:	4af42400 	.word	0x4af42400

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800691e:	f7ff fe81 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8006922:	4602      	mov	r2, r0
 8006924:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	490f      	ldr	r1, [pc, #60]	@ (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006930:	5ccb      	ldrb	r3, [r1, r3]
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	4a09      	ldr	r2, [pc, #36]	@ (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006946:	5cd3      	ldrb	r3, [r2, r3]
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4a07      	ldr	r2, [pc, #28]	@ (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 8006954:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006956:	4a07      	ldr	r2, [pc, #28]	@ (8006974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	08022c94 	.word	0x08022c94
 8006970:	24000004 	.word	0x24000004
 8006974:	24000000 	.word	0x24000000

08006978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800697c:	f7ff ffcc 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4904      	ldr	r1, [pc, #16]	@ (80069a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}
 800699c:	58024400 	.word	0x58024400
 80069a0:	08022c94 	.word	0x08022c94

080069a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069a8:	f7ff ffb6 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	4904      	ldr	r1, [pc, #16]	@ (80069cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80069ba:	5ccb      	ldrb	r3, [r1, r3]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	58024400 	.word	0x58024400
 80069cc:	08022c94 	.word	0x08022c94

080069d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	223f      	movs	r2, #63	@ 0x3f
 80069de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069e0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f003 0207 	and.w	r2, r3, #7
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80069ec:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80069f8:	4b14      	ldr	r3, [pc, #80]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006a04:	4b11      	ldr	r3, [pc, #68]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006a10:	4b0e      	ldr	r3, [pc, #56]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006a28:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <HAL_RCC_GetClockConfig+0x7c>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <HAL_RCC_GetClockConfig+0x80>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	601a      	str	r2, [r3, #0]
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	52002000 	.word	0x52002000

08006a54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b0c6      	sub	sp, #280	@ 0x118
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a78:	2500      	movs	r5, #0
 8006a7a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a7e:	d049      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a8a:	d02f      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a90:	d828      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a96:	d01a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a9c:	d822      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa6:	d007      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006aa8:	e01c      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aaa:	4bab      	ldr	r3, [pc, #684]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4aaa      	ldr	r2, [pc, #680]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab6:	e01a      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	3308      	adds	r3, #8
 8006abe:	2102      	movs	r1, #2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 fa49 	bl	8008f58 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006acc:	e00f      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	3328      	adds	r3, #40	@ 0x28
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f002 faf0 	bl	80090bc <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006af6:	4b98      	ldr	r3, [pc, #608]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b04:	4a94      	ldr	r2, [pc, #592]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b20:	f04f 0900 	mov.w	r9, #0
 8006b24:	ea58 0309 	orrs.w	r3, r8, r9
 8006b28:	d047      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d82a      	bhi.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b34:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b51 	.word	0x08006b51
 8006b40:	08006b5f 	.word	0x08006b5f
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006b93 	.word	0x08006b93
 8006b4c:	08006b93 	.word	0x08006b93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b81      	ldr	r3, [pc, #516]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4a80      	ldr	r2, [pc, #512]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b5c:	e01a      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	3308      	adds	r3, #8
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 f9f6 	bl	8008f58 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b72:	e00f      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	3328      	adds	r3, #40	@ 0x28
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 fa9d 	bl	80090bc <RCCEx_PLL3_Config>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b88:	e004      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	f023 0107 	bic.w	r1, r3, #7
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006baa:	4a6b      	ldr	r2, [pc, #428]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006bc6:	f04f 0b00 	mov.w	fp, #0
 8006bca:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bce:	d05b      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bd8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bdc:	d03b      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bde:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006be2:	d834      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006be4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006be8:	d037      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bee:	d82e      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bf0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bf4:	d033      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006bf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bfa:	d828      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c00:	d01a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c06:	d822      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c10:	d007      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006c12:	e01c      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b50      	ldr	r3, [pc, #320]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	4a4f      	ldr	r2, [pc, #316]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e01e      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c26:	3308      	adds	r3, #8
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 f994 	bl	8008f58 <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c36:	e013      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	3328      	adds	r3, #40	@ 0x28
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f002 fa3b 	bl	80090bc <RCCEx_PLL3_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c4c:	e008      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c54:	e004      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c56:	bf00      	nop
 8006c58:	e002      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e000      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c68:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c7e:	e003      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d05d      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cb0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cb4:	d03b      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006cb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cba:	d834      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc0:	d037      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc6:	d82e      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ccc:	d033      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cd2:	d828      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cd8:	d01a      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cde:	d822      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cea:	e01c      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cf8:	e01e      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f002 f928 	bl	8008f58 <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d0e:	e013      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	3328      	adds	r3, #40	@ 0x28
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 f9cf 	bl	80090bc <RCCEx_PLL3_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d24:	e008      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d2c:	e004      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d50:	4a01      	ldr	r2, [pc, #4]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d56:	e005      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d03a      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d01f      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006d8e:	2b30      	cmp	r3, #48	@ 0x30
 8006d90:	d819      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d00c      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d815      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d019      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d111      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da2:	4baa      	ldr	r3, [pc, #680]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	4aa9      	ldr	r2, [pc, #676]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dae:	e011      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db4:	3308      	adds	r3, #8
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f002 f8cd 	bl	8008f58 <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dc4:	e006      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dea:	4a98      	ldr	r2, [pc, #608]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dec:	430b      	orrs	r3, r1
 8006dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006df0:	e003      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d051      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e24:	d035      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e2a:	d82e      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e30:	d031      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e36:	d828      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e3c:	d01a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e42:	d822      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e4c:	d007      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e4e:	e01c      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e50:	4b7e      	ldr	r3, [pc, #504]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	4a7d      	ldr	r2, [pc, #500]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e5c:	e01c      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	3308      	adds	r3, #8
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f002 f876 	bl	8008f58 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e72:	e011      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	3328      	adds	r3, #40	@ 0x28
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 f91d 	bl	80090bc <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e88:	e006      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eae:	4a67      	ldr	r2, [pc, #412]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eb4:	e003      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006eca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ed4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4313      	orrs	r3, r2
 8006edc:	d053      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ee8:	d033      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eee:	d82c      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ef4:	d02f      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006efa:	d826      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f00:	d02b      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f06:	d820      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d012      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d81a      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d022      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d115      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f22:	3308      	adds	r3, #8
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 f816 	bl	8008f58 <RCCEx_PLL2_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f32:	e015      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	3328      	adds	r3, #40	@ 0x28
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 f8bd 	bl	80090bc <RCCEx_PLL3_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f48:	e00a      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f50:	e006      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f52:	bf00      	nop
 8006f54:	e004      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f56:	bf00      	nop
 8006f58:	e002      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f68:	4b38      	ldr	r3, [pc, #224]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f76:	4a35      	ldr	r2, [pc, #212]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f7c:	e003      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d058      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb2:	d033      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb8:	d82c      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d02f      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc4:	d826      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fca:	d02b      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fd0:	d820      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd6:	d012      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fdc:	d81a      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d022      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fe6:	d115      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fec:	3308      	adds	r3, #8
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 ffb1 	bl	8008f58 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ffc:	e015      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2101      	movs	r1, #1
 8007006:	4618      	mov	r0, r3
 8007008:	f002 f858 	bl	80090bc <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007012:	e00a      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800701a:	e006      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800701c:	bf00      	nop
 800701e:	e004      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10e      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007036:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007042:	4a02      	ldr	r2, [pc, #8]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007044:	430b      	orrs	r3, r1
 8007046:	6593      	str	r3, [r2, #88]	@ 0x58
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800706e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d037      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007082:	d00e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007088:	d816      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d018      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d111      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4bc4      	ldr	r3, [pc, #784]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007098:	4ac3      	ldr	r2, [pc, #780]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070a0:	e00f      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a6:	3308      	adds	r3, #8
 80070a8:	2101      	movs	r1, #1
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 ff54 	bl	8008f58 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070ca:	4bb7      	ldr	r3, [pc, #732]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d8:	4ab3      	ldr	r2, [pc, #716]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d039      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710e:	2b03      	cmp	r3, #3
 8007110:	d81c      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007155 	.word	0x08007155
 800711c:	08007129 	.word	0x08007129
 8007120:	08007137 	.word	0x08007137
 8007124:	08007155 	.word	0x08007155
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4b9f      	ldr	r3, [pc, #636]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4a9e      	ldr	r2, [pc, #632]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	3308      	adds	r3, #8
 800713c:	2102      	movs	r1, #2
 800713e:	4618      	mov	r0, r3
 8007140:	f001 ff0a 	bl	8008f58 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800715e:	4b92      	ldr	r3, [pc, #584]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	f023 0103 	bic.w	r1, r3, #3
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716c:	4a8e      	ldr	r2, [pc, #568]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800716e:	430b      	orrs	r3, r1
 8007170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007172:	e003      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007192:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	f000 8099 	beq.w	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800719e:	4b83      	ldr	r3, [pc, #524]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a82      	ldr	r2, [pc, #520]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071aa:	f7fa fda5 	bl	8001cf8 <HAL_GetTick>
 80071ae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b2:	e00b      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b4:	f7fa fda0 	bl	8001cf8 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b64      	cmp	r3, #100	@ 0x64
 80071c2:	d903      	bls.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071ca:	e005      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071cc:	4b77      	ldr	r3, [pc, #476]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0ed      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d173      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071e0:	4b71      	ldr	r3, [pc, #452]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071ec:	4053      	eors	r3, r2
 80071ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d015      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071f6:	4b6c      	ldr	r3, [pc, #432]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007202:	4b69      	ldr	r3, [pc, #420]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007206:	4a68      	ldr	r2, [pc, #416]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800720e:	4b66      	ldr	r3, [pc, #408]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007212:	4a65      	ldr	r2, [pc, #404]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007218:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800721a:	4a63      	ldr	r2, [pc, #396]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800721c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007220:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800722a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722e:	d118      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fa fd62 	bl	8001cf8 <HAL_GetTick>
 8007234:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007238:	e00d      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723a:	f7fa fd5d 	bl	8001cf8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	f241 3388 	movw	r3, #5000	@ 0x1388
 800724a:	429a      	cmp	r2, r3
 800724c:	d903      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007254:	e005      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007256:	4b54      	ldr	r3, [pc, #336]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0eb      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007266:	2b00      	cmp	r3, #0
 8007268:	d129      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800727a:	d10e      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800727c:	4b4a      	ldr	r3, [pc, #296]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800728c:	091a      	lsrs	r2, r3, #4
 800728e:	4b48      	ldr	r3, [pc, #288]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007290:	4013      	ands	r3, r2
 8007292:	4a45      	ldr	r2, [pc, #276]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6113      	str	r3, [r2, #16]
 8007298:	e005      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800729a:	4b43      	ldr	r3, [pc, #268]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4a42      	ldr	r2, [pc, #264]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072a4:	6113      	str	r3, [r2, #16]
 80072a6:	4b40      	ldr	r3, [pc, #256]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b6:	4a3c      	ldr	r2, [pc, #240]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	e008      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f002 0301 	and.w	r3, r2, #1
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f000 808f 	beq.w	8007410 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072f8:	2b28      	cmp	r3, #40	@ 0x28
 80072fa:	d871      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	080073e9 	.word	0x080073e9
 8007308:	080073e1 	.word	0x080073e1
 800730c:	080073e1 	.word	0x080073e1
 8007310:	080073e1 	.word	0x080073e1
 8007314:	080073e1 	.word	0x080073e1
 8007318:	080073e1 	.word	0x080073e1
 800731c:	080073e1 	.word	0x080073e1
 8007320:	080073e1 	.word	0x080073e1
 8007324:	080073b5 	.word	0x080073b5
 8007328:	080073e1 	.word	0x080073e1
 800732c:	080073e1 	.word	0x080073e1
 8007330:	080073e1 	.word	0x080073e1
 8007334:	080073e1 	.word	0x080073e1
 8007338:	080073e1 	.word	0x080073e1
 800733c:	080073e1 	.word	0x080073e1
 8007340:	080073e1 	.word	0x080073e1
 8007344:	080073cb 	.word	0x080073cb
 8007348:	080073e1 	.word	0x080073e1
 800734c:	080073e1 	.word	0x080073e1
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073e1 	.word	0x080073e1
 8007358:	080073e1 	.word	0x080073e1
 800735c:	080073e1 	.word	0x080073e1
 8007360:	080073e1 	.word	0x080073e1
 8007364:	080073e9 	.word	0x080073e9
 8007368:	080073e1 	.word	0x080073e1
 800736c:	080073e1 	.word	0x080073e1
 8007370:	080073e1 	.word	0x080073e1
 8007374:	080073e1 	.word	0x080073e1
 8007378:	080073e1 	.word	0x080073e1
 800737c:	080073e1 	.word	0x080073e1
 8007380:	080073e1 	.word	0x080073e1
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073e1 	.word	0x080073e1
 8007390:	080073e1 	.word	0x080073e1
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073e1 	.word	0x080073e1
 800739c:	080073e1 	.word	0x080073e1
 80073a0:	080073e1 	.word	0x080073e1
 80073a4:	080073e9 	.word	0x080073e9
 80073a8:	58024400 	.word	0x58024400
 80073ac:	58024800 	.word	0x58024800
 80073b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b8:	3308      	adds	r3, #8
 80073ba:	2101      	movs	r1, #1
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fdcb 	bl	8008f58 <RCCEx_PLL2_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073c8:	e00f      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	3328      	adds	r3, #40	@ 0x28
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fe72 	bl	80090bc <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073de:	e004      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073e6:	e000      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073f2:	4bbf      	ldr	r3, [pc, #764]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007400:	4abb      	ldr	r2, [pc, #748]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007402:	430b      	orrs	r3, r1
 8007404:	6553      	str	r3, [r2, #84]	@ 0x54
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f002 0302 	and.w	r3, r2, #2
 800741c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007420:	2300      	movs	r3, #0
 8007422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007426:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800742a:	460b      	mov	r3, r1
 800742c:	4313      	orrs	r3, r2
 800742e:	d041      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007436:	2b05      	cmp	r3, #5
 8007438:	d824      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	0800748d 	.word	0x0800748d
 8007444:	08007459 	.word	0x08007459
 8007448:	0800746f 	.word	0x0800746f
 800744c:	0800748d 	.word	0x0800748d
 8007450:	0800748d 	.word	0x0800748d
 8007454:	0800748d 	.word	0x0800748d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	3308      	adds	r3, #8
 800745e:	2101      	movs	r1, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fd79 	bl	8008f58 <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800746c:	e00f      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	3328      	adds	r3, #40	@ 0x28
 8007474:	2101      	movs	r1, #1
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fe20 	bl	80090bc <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007496:	4b96      	ldr	r3, [pc, #600]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	f023 0107 	bic.w	r1, r3, #7
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a4:	4a92      	ldr	r2, [pc, #584]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074a6:	430b      	orrs	r3, r1
 80074a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f002 0304 	and.w	r3, r2, #4
 80074c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074ce:	460b      	mov	r3, r1
 80074d0:	4313      	orrs	r3, r2
 80074d2:	d044      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d825      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074e0:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007535 	.word	0x08007535
 80074ec:	08007501 	.word	0x08007501
 80074f0:	08007517 	.word	0x08007517
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007535 	.word	0x08007535
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	3308      	adds	r3, #8
 8007506:	2101      	movs	r1, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f001 fd25 	bl	8008f58 <RCCEx_PLL2_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007514:	e00f      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	3328      	adds	r3, #40	@ 0x28
 800751c:	2101      	movs	r1, #1
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fdcc 	bl	80090bc <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800752a:	e004      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007532:	e000      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10b      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800753e:	4b6c      	ldr	r3, [pc, #432]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007542:	f023 0107 	bic.w	r1, r3, #7
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	4a68      	ldr	r2, [pc, #416]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007550:	430b      	orrs	r3, r1
 8007552:	6593      	str	r3, [r2, #88]	@ 0x58
 8007554:	e003      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800755a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f002 0320 	and.w	r3, r2, #32
 800756a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007574:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d055      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800758a:	d033      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007590:	d82c      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007596:	d02f      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759c:	d826      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800759e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a2:	d02b      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80075a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a8:	d820      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ae:	d012      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80075b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b4:	d81a      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d022      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075be:	d115      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	3308      	adds	r3, #8
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fcc5 	bl	8008f58 <RCCEx_PLL2_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075d4:	e015      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	3328      	adds	r3, #40	@ 0x28
 80075dc:	2102      	movs	r1, #2
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fd6c 	bl	80090bc <RCCEx_PLL3_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ea:	e00a      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075f2:	e006      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800760a:	4b39      	ldr	r3, [pc, #228]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800760c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800761a:	4a35      	ldr	r2, [pc, #212]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800761c:	430b      	orrs	r3, r1
 800761e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007636:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007640:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d058      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007652:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007656:	d033      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007658:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800765c:	d82c      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007662:	d02f      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007668:	d826      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800766a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800766e:	d02b      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007674:	d820      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800767a:	d012      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007680:	d81a      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d022      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800768a:	d115      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	3308      	adds	r3, #8
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fc5f 	bl	8008f58 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076a0:	e015      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	3328      	adds	r3, #40	@ 0x28
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fd06 	bl	80090bc <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076b6:	e00a      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10e      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076d6:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076e6:	4a02      	ldr	r2, [pc, #8]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007712:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d055      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007724:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007728:	d033      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800772a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800772e:	d82c      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007734:	d02f      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800773a:	d826      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800773c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007740:	d02b      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007742:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007746:	d820      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800774c:	d012      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800774e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007752:	d81a      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d022      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800775c:	d115      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	3308      	adds	r3, #8
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f001 fbf6 	bl	8008f58 <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007772:	e015      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	3328      	adds	r3, #40	@ 0x28
 800777a:	2102      	movs	r1, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f001 fc9d 	bl	80090bc <RCCEx_PLL3_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007788:	e00a      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007790:	e006      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007792:	bf00      	nop
 8007794:	e004      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007796:	bf00      	nop
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800779e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077a8:	4ba0      	ldr	r3, [pc, #640]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077b8:	4a9c      	ldr	r2, [pc, #624]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077be:	e003      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f002 0308 	and.w	r3, r2, #8
 80077d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077e2:	460b      	mov	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	d01e      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f4:	d10c      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	3328      	adds	r3, #40	@ 0x28
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fc5c 	bl	80090bc <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007810:	4b86      	ldr	r3, [pc, #536]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007814:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007820:	4a82      	ldr	r2, [pc, #520]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007822:	430b      	orrs	r3, r1
 8007824:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f002 0310 	and.w	r3, r2, #16
 8007832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800783c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d01e      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800784e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007852:	d10c      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007858:	3328      	adds	r3, #40	@ 0x28
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fc2d 	bl	80090bc <RCCEx_PLL3_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800786e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800787e:	4a6b      	ldr	r2, [pc, #428]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007880:	430b      	orrs	r3, r1
 8007882:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007892:	2300      	movs	r3, #0
 8007894:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007896:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	d03e      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ac:	d022      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b2:	d81b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d00b      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80078be:	e015      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	3308      	adds	r3, #8
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fb45 	bl	8008f58 <RCCEx_PLL2_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078d4:	e00f      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	3328      	adds	r3, #40	@ 0x28
 80078dc:	2102      	movs	r1, #2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 fbec 	bl	80090bc <RCCEx_PLL3_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078fe:	4b4b      	ldr	r3, [pc, #300]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007902:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800790e:	4a47      	ldr	r2, [pc, #284]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6593      	str	r3, [r2, #88]	@ 0x58
 8007914:	e003      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800791a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800792a:	673b      	str	r3, [r7, #112]	@ 0x70
 800792c:	2300      	movs	r3, #0
 800792e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007930:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007934:	460b      	mov	r3, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	d03b      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007946:	d01f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800794c:	d818      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800794e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007952:	d003      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007958:	d007      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800795a:	e011      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795c:	4b33      	ldr	r3, [pc, #204]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	4a32      	ldr	r2, [pc, #200]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007968:	e00f      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	3328      	adds	r3, #40	@ 0x28
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f001 fba2 	bl	80090bc <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800797e:	e004      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007992:	4b26      	ldr	r3, [pc, #152]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a2:	4a22      	ldr	r2, [pc, #136]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80079be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c0:	2300      	movs	r3, #0
 80079c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079c8:	460b      	mov	r3, r1
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d034      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079dc:	d007      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079de:	e011      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079ec:	e00e      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	3308      	adds	r3, #8
 80079f4:	2102      	movs	r1, #2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 faae 	bl	8008f58 <RCCEx_PLL2_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a22:	4a02      	ldr	r2, [pc, #8]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a28:	e006      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a46:	2300      	movs	r3, #0
 8007a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a4a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d00c      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	3328      	adds	r3, #40	@ 0x28
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fb2d 	bl	80090bc <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d036      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a94:	d018      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a9a:	d811      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d014      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa6:	d80b      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d011      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab6:	4ab6      	ldr	r2, [pc, #728]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007abe:	e008      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ada:	4bad      	ldr	r3, [pc, #692]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ade:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae8:	4aa9      	ldr	r2, [pc, #676]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aea:	430b      	orrs	r3, r1
 8007aec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007aee:	e003      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b06:	2300      	movs	r3, #0
 8007b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d009      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b14:	4b9e      	ldr	r3, [pc, #632]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a9b      	ldr	r2, [pc, #620]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b36:	2300      	movs	r3, #0
 8007b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b44:	4b92      	ldr	r3, [pc, #584]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b48:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b52:	4a8f      	ldr	r2, [pc, #572]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b66:	2300      	movs	r3, #0
 8007b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d00e      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b74:	4b86      	ldr	r3, [pc, #536]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4a85      	ldr	r2, [pc, #532]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b7e:	6113      	str	r3, [r2, #16]
 8007b80:	4b83      	ldr	r3, [pc, #524]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b82:	6919      	ldr	r1, [r3, #16]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b8c:	4a80      	ldr	r2, [pc, #512]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bae:	4b78      	ldr	r3, [pc, #480]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	4a74      	ldr	r2, [pc, #464]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bde:	4b6c      	ldr	r3, [pc, #432]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bee:	4a68      	ldr	r2, [pc, #416]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	d011      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c14:	3308      	adds	r3, #8
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 f99d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6239      	str	r1, [r7, #32]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	d011      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c54:	3308      	adds	r3, #8
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f97d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	61b9      	str	r1, [r7, #24]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	d011      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	3308      	adds	r3, #8
 8007c96:	2102      	movs	r1, #2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f95d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6139      	str	r1, [r7, #16]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d011      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd4:	3328      	adds	r3, #40	@ 0x28
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f9ef 	bl	80090bc <RCCEx_PLL3_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	d011      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	2101      	movs	r1, #1
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f9cf 	bl	80090bc <RCCEx_PLL3_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6039      	str	r1, [r7, #0]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d011      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 f9af 	bl	80090bc <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007d74:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400

08007d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b090      	sub	sp, #64	@ 0x40
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007da6:	430b      	orrs	r3, r1
 8007da8:	f040 8094 	bne.w	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dac:	4b9b      	ldr	r3, [pc, #620]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	f200 8087 	bhi.w	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007e01 	.word	0x08007e01
 8007dcc:	08007e29 	.word	0x08007e29
 8007dd0:	08007ec5 	.word	0x08007ec5
 8007dd4:	08007e51 	.word	0x08007e51
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dd8:	4b90      	ldr	r3, [pc, #576]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de4:	d108      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ff62 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	f000 bc93 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	f000 bc8f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e00:	4b86      	ldr	r3, [pc, #536]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e0c:	d108      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0e:	f107 0318 	add.w	r3, r7, #24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fca6 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1c:	f000 bc7f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e24:	f000 bc7b 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e28:	4b7c      	ldr	r3, [pc, #496]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e34:	d108      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fde6 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e44:	f000 bc6b 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4c:	f000 bc67 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e50:	4b72      	ldr	r3, [pc, #456]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e5a:	4b70      	ldr	r3, [pc, #448]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e6c:	4b6b      	ldr	r3, [pc, #428]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	08db      	lsrs	r3, r3, #3
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	4a6a      	ldr	r2, [pc, #424]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7e:	e01f      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e80:	4b66      	ldr	r3, [pc, #408]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8c:	d106      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e94:	d102      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e96:	4b63      	ldr	r3, [pc, #396]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e9a:	e011      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ea8:	d106      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb0:	d102      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb6:	e003      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ebc:	f000 bc2f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ec0:	f000 bc2d 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ec4:	4b59      	ldr	r3, [pc, #356]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	f000 bc29 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed0:	f000 bc25 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007edc:	430b      	orrs	r3, r1
 8007ede:	f040 80a7 	bne.w	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007eea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ef2:	d054      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007efa:	f200 808b 	bhi.w	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f04:	f000 8083 	beq.w	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f0e:	f200 8081 	bhi.w	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f18:	d02f      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f20:	d878      	bhi.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f2e:	d012      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007f30:	e070      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f32:	4b3a      	ldr	r3, [pc, #232]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 feb5 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4e:	e3e6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f54:	e3e3      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f56:	4b31      	ldr	r3, [pc, #196]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f62:	d107      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f64:	f107 0318 	add.w	r3, r7, #24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fbfb 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f72:	e3d4      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f78:	e3d1      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f7a:	4b28      	ldr	r3, [pc, #160]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fd3d 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f96:	e3c2      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e3bf      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d10c      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d109      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	4a16      	ldr	r2, [pc, #88]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fcc:	e01e      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fce:	4b13      	ldr	r3, [pc, #76]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fda:	d106      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe2:	d102      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe8:	e010      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff6:	d106      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d102      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008000:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008004:	e002      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800800a:	e388      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800800c:	e387      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800800e:	4b07      	ldr	r3, [pc, #28]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008012:	e384      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008018:	e381      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
 8008020:	03d09000 	.word	0x03d09000
 8008024:	003d0900 	.word	0x003d0900
 8008028:	007a1200 	.word	0x007a1200
 800802c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008038:	430b      	orrs	r3, r1
 800803a:	f040 809c 	bne.w	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800803e:	4b9e      	ldr	r3, [pc, #632]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008042:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008046:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800804e:	d054      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008056:	f200 808b 	bhi.w	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008060:	f000 8083 	beq.w	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800806a:	f200 8081 	bhi.w	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008074:	d02f      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800807c:	d878      	bhi.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800808a:	d012      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800808c:	e070      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800808e:	4b8a      	ldr	r3, [pc, #552]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800809c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe07 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080aa:	e338      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b0:	e335      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b2:	4b81      	ldr	r3, [pc, #516]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080be:	d107      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c0:	f107 0318 	add.w	r3, r7, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fb4d 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ce:	e326      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e323      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080d6:	4b78      	ldr	r3, [pc, #480]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e2:	d107      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fc8f 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f2:	e314      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f8:	e311      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080fa:	4b6f      	ldr	r3, [pc, #444]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008102:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008104:	4b6c      	ldr	r3, [pc, #432]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b04      	cmp	r3, #4
 800810e:	d10c      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008116:	4b68      	ldr	r3, [pc, #416]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	08db      	lsrs	r3, r3, #3
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	4a66      	ldr	r2, [pc, #408]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008122:	fa22 f303 	lsr.w	r3, r2, r3
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008128:	e01e      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800812a:	4b63      	ldr	r3, [pc, #396]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008136:	d106      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800813e:	d102      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008140:	4b5f      	ldr	r3, [pc, #380]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008144:	e010      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008146:	4b5c      	ldr	r3, [pc, #368]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800814e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008152:	d106      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815a:	d102      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800815c:	4b59      	ldr	r3, [pc, #356]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008160:	e002      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008166:	e2da      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008168:	e2d9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800816a:	4b57      	ldr	r3, [pc, #348]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800816e:	e2d6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008174:	e2d3      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800817e:	430b      	orrs	r3, r1
 8008180:	f040 80a7 	bne.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008184:	4b4c      	ldr	r3, [pc, #304]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008188:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800818c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008194:	d055      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800819c:	f200 8096 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081a6:	f000 8084 	beq.w	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081b0:	f200 808c 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ba:	d030      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	f200 8083 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d012      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081d4:	e07a      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d6:	4b38      	ldr	r3, [pc, #224]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fd63 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e294      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f8:	e291      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081fa:	4b2f      	ldr	r3, [pc, #188]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008208:	f107 0318 	add.w	r3, r7, #24
 800820c:	4618      	mov	r0, r3
 800820e:	f000 faa9 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008216:	e282      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821c:	e27f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800821e:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822a:	d107      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fbeb 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800823a:	e270      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008240:	e26d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008242:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008246:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800824c:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b04      	cmp	r3, #4
 8008256:	d10c      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800825e:	4b16      	ldr	r3, [pc, #88]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	4a14      	ldr	r2, [pc, #80]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800826a:	fa22 f303 	lsr.w	r3, r2, r3
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008270:	e01e      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008272:	4b11      	ldr	r3, [pc, #68]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827e:	d106      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008286:	d102      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008288:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800828c:	e010      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800828e:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800829a:	d106      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082a2:	d102      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082a4:	4b07      	ldr	r3, [pc, #28]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082ae:	e236      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082b0:	e235      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082b2:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b6:	e232      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082b8:	58024400 	.word	0x58024400
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	003d0900 	.word	0x003d0900
 80082c4:	007a1200 	.word	0x007a1200
 80082c8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d0:	e225      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80082da:	430b      	orrs	r3, r1
 80082dc:	f040 8085 	bne.w	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082e0:	4b9c      	ldr	r3, [pc, #624]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082f0:	d06b      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082f8:	d874      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008300:	d056      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008308:	d86c      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008310:	d03b      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008318:	d864      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008320:	d021      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008328:	d85c      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800832a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d004      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008338:	e054      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800833a:	f7fe fb1d 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 800833e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008340:	e1ed      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008342:	4b84      	ldr	r3, [pc, #528]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800834e:	d107      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008350:	f107 0318 	add.w	r3, r7, #24
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fa05 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835e:	e1de      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008364:	e1db      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008366:	4b7b      	ldr	r3, [pc, #492]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800836e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008372:	d107      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fb47 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008382:	e1cc      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008388:	e1c9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800838a:	4b72      	ldr	r3, [pc, #456]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b04      	cmp	r3, #4
 8008394:	d109      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008396:	4b6f      	ldr	r3, [pc, #444]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	08db      	lsrs	r3, r3, #3
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	4a6d      	ldr	r2, [pc, #436]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80083a2:	fa22 f303 	lsr.w	r3, r2, r3
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a8:	e1b9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ae:	e1b6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083b0:	4b68      	ldr	r3, [pc, #416]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083bc:	d102      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80083be:	4b67      	ldr	r3, [pc, #412]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c2:	e1ac      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e1a9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083ca:	4b62      	ldr	r3, [pc, #392]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d6:	d102      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80083d8:	4b61      	ldr	r3, [pc, #388]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083dc:	e19f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e2:	e19c      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e8:	e199      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ee:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80083f2:	430b      	orrs	r3, r1
 80083f4:	d173      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083f6:	4b57      	ldr	r3, [pc, #348]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008406:	d02f      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840e:	d863      	bhi.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841c:	d012      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800841e:	e05b      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008420:	4b4c      	ldr	r3, [pc, #304]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0318 	add.w	r3, r7, #24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f996 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800843c:	e16f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008442:	e16c      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008444:	4b43      	ldr	r3, [pc, #268]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fad8 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008460:	e15d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008466:	e15a      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008468:	4b3a      	ldr	r3, [pc, #232]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800846a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800846c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008472:	4b38      	ldr	r3, [pc, #224]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d10c      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008484:	4b33      	ldr	r3, [pc, #204]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	4a32      	ldr	r2, [pc, #200]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008490:	fa22 f303 	lsr.w	r3, r2, r3
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008496:	e01e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008498:	4b2e      	ldr	r3, [pc, #184]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ac:	d102      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084ae:	4b2b      	ldr	r3, [pc, #172]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b2:	e010      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084b4:	4b27      	ldr	r3, [pc, #156]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c0:	d106      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80084c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c8:	d102      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ca:	4b25      	ldr	r3, [pc, #148]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80084cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ce:	e002      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084d4:	e123      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084d6:	e122      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084dc:	e11f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80084e6:	430b      	orrs	r3, r1
 80084e8:	d13c      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008500:	d012      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008502:	e023      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008504:	4b13      	ldr	r3, [pc, #76]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008510:	d107      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fbcc 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008520:	e0fd      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008526:	e0fa      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008528:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008534:	d107      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008536:	f107 0318 	add.w	r3, r7, #24
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f912 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008544:	e0eb      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800854a:	e0e8      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008550:	e0e5      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
 8008558:	03d09000 	.word	0x03d09000
 800855c:	003d0900 	.word	0x003d0900
 8008560:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800856c:	430b      	orrs	r3, r1
 800856e:	f040 8085 	bne.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008572:	4b6d      	ldr	r3, [pc, #436]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008576:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800857a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008582:	d06b      	beq.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800858a:	d874      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008592:	d056      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800859a:	d86c      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085a2:	d03b      	beq.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085aa:	d864      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b2:	d021      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d85c      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80085c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c8:	d004      	beq.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085ca:	e054      	b.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085cc:	f000 f8b4 	bl	8008738 <HAL_RCCEx_GetD3PCLK1Freq>
 80085d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085d2:	e0a4      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085d4:	4b54      	ldr	r3, [pc, #336]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e0:	d107      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e2:	f107 0318 	add.w	r3, r7, #24
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f8bc 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f0:	e095      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e092      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008604:	d107      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f9fe 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008614:	e083      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861a:	e080      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800861c:	4b42      	ldr	r3, [pc, #264]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d109      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008628:	4b3f      	ldr	r3, [pc, #252]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	4a3e      	ldr	r2, [pc, #248]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863a:	e070      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e06d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008642:	4b39      	ldr	r3, [pc, #228]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864e:	d102      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008650:	4b37      	ldr	r3, [pc, #220]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008654:	e063      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865a:	e060      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800865c:	4b32      	ldr	r3, [pc, #200]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800866a:	4b32      	ldr	r3, [pc, #200]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e056      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008674:	e053      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	e050      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008684:	430b      	orrs	r3, r1
 8008686:	d148      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008688:	4b27      	ldr	r3, [pc, #156]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800868a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008698:	d02a      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086a0:	d838      	bhi.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ae:	d00d      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80086b0:	e030      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086be:	d102      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80086c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c4:	e02b      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ca:	e028      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086cc:	4b16      	ldr	r3, [pc, #88]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d8:	d107      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fae8 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e8:	e019      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ee:	e016      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086fc:	d107      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fe:	f107 0318 	add.w	r3, r7, #24
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f82e 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870c:	e007      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	e004      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008718:	e001      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800871e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008720:	4618      	mov	r0, r3
 8008722:	3740      	adds	r7, #64	@ 0x40
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	58024400 	.word	0x58024400
 800872c:	03d09000 	.word	0x03d09000
 8008730:	003d0900 	.word	0x003d0900
 8008734:	007a1200 	.word	0x007a1200

08008738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800873c:	f7fe f8ec 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8008740:	4602      	mov	r2, r0
 8008742:	4b06      	ldr	r3, [pc, #24]	@ (800875c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	091b      	lsrs	r3, r3, #4
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	4904      	ldr	r1, [pc, #16]	@ (8008760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800874e:	5ccb      	ldrb	r3, [r1, r3]
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	58024400 	.word	0x58024400
 8008760:	08022c94 	.word	0x08022c94

08008764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008764:	b480      	push	{r7}
 8008766:	b089      	sub	sp, #36	@ 0x24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800876c:	4ba1      	ldr	r3, [pc, #644]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008776:	4b9f      	ldr	r3, [pc, #636]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	0b1b      	lsrs	r3, r3, #12
 800877c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008782:	4b9c      	ldr	r3, [pc, #624]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800878e:	4b99      	ldr	r3, [pc, #612]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008792:	08db      	lsrs	r3, r3, #3
 8008794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8111 	beq.w	80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	f000 8083 	beq.w	80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	f200 80a1 	bhi.w	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d056      	beq.n	800887c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087ce:	e099      	b.n	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087d0:	4b88      	ldr	r3, [pc, #544]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02d      	beq.n	8008838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087dc:	4b85      	ldr	r3, [pc, #532]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	08db      	lsrs	r3, r3, #3
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	4a84      	ldr	r2, [pc, #528]	@ (80089f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	ee07 3a90 	vmov	s15, r3
 80087f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008806:	4b7b      	ldr	r3, [pc, #492]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008816:	ed97 6a03 	vldr	s12, [r7, #12]
 800881a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800881e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008832:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008836:	e087      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b6a      	ldr	r3, [pc, #424]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a03 	vldr	s12, [r7, #12]
 800885e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800887a:	e065      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b59      	ldr	r3, [pc, #356]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088be:	e043      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b48      	ldr	r3, [pc, #288]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008902:	e021      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b37      	ldr	r3, [pc, #220]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a03 	vldr	s12, [r7, #12]
 800892a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008948:	4b2a      	ldr	r3, [pc, #168]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894c:	0a5b      	lsrs	r3, r3, #9
 800894e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800895e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008962:	edd7 6a07 	vldr	s13, [r7, #28]
 8008966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800896e:	ee17 2a90 	vmov	r2, s15
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008976:	4b1f      	ldr	r3, [pc, #124]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897a:	0c1b      	lsrs	r3, r3, #16
 800897c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800898c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008990:	edd7 6a07 	vldr	s13, [r7, #28]
 8008994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899c:	ee17 2a90 	vmov	r2, s15
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089a4:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	0e1b      	lsrs	r3, r3, #24
 80089aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089be:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ca:	ee17 2a90 	vmov	r2, s15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089d2:	e008      	b.n	80089e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
}
 80089e6:	bf00      	nop
 80089e8:	3724      	adds	r7, #36	@ 0x24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	58024400 	.word	0x58024400
 80089f8:	03d09000 	.word	0x03d09000
 80089fc:	46000000 	.word	0x46000000
 8008a00:	4c742400 	.word	0x4c742400
 8008a04:	4a742400 	.word	0x4a742400
 8008a08:	4af42400 	.word	0x4af42400

08008a0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b089      	sub	sp, #36	@ 0x24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a14:	4ba1      	ldr	r3, [pc, #644]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a36:	4b99      	ldr	r3, [pc, #612]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3a:	08db      	lsrs	r3, r3, #3
 8008a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8111 	beq.w	8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	f000 8083 	beq.w	8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	f200 80a1 	bhi.w	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d056      	beq.n	8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a76:	e099      	b.n	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a78:	4b88      	ldr	r3, [pc, #544]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02d      	beq.n	8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a84:	4b85      	ldr	r3, [pc, #532]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	4a84      	ldr	r2, [pc, #528]	@ (8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a90:	fa22 f303 	lsr.w	r3, r2, r3
 8008a94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aae:	4b7b      	ldr	r3, [pc, #492]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ade:	e087      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b22:	e065      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b59      	ldr	r3, [pc, #356]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b66:	e043      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b48      	ldr	r3, [pc, #288]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008baa:	e021      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b37      	ldr	r3, [pc, #220]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	0a5b      	lsrs	r3, r3, #9
 8008bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c16:	ee17 2a90 	vmov	r2, s15
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c44:	ee17 2a90 	vmov	r2, s15
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c4c:	4b13      	ldr	r3, [pc, #76]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c50:	0e1b      	lsrs	r3, r3, #24
 8008c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c72:	ee17 2a90 	vmov	r2, s15
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c7a:	e008      	b.n	8008c8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	3724      	adds	r7, #36	@ 0x24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	03d09000 	.word	0x03d09000
 8008ca4:	46000000 	.word	0x46000000
 8008ca8:	4c742400 	.word	0x4c742400
 8008cac:	4a742400 	.word	0x4a742400
 8008cb0:	4af42400 	.word	0x4af42400

08008cb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b089      	sub	sp, #36	@ 0x24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cdc:	4b98      	ldr	r3, [pc, #608]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	08db      	lsrs	r3, r3, #3
 8008ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8111 	beq.w	8008f22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	f000 8083 	beq.w	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	f200 80a1 	bhi.w	8008e52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d056      	beq.n	8008dca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d1c:	e099      	b.n	8008e52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1e:	4b88      	ldr	r3, [pc, #544]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d02d      	beq.n	8008d86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d2a:	4b85      	ldr	r3, [pc, #532]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	4a83      	ldr	r2, [pc, #524]	@ (8008f44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d54:	4b7a      	ldr	r3, [pc, #488]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d84:	e087      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	ee07 3a90 	vmov	s15, r3
 8008d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008f4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d98:	4b69      	ldr	r3, [pc, #420]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc8:	e065      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008f50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ddc:	4b58      	ldr	r3, [pc, #352]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e0c:	e043      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e18:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e20:	4b47      	ldr	r3, [pc, #284]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e34:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e50:	e021      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008f4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e64:	4b36      	ldr	r3, [pc, #216]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e78:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e96:	4b2a      	ldr	r3, [pc, #168]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	0a5b      	lsrs	r3, r3, #9
 8008e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ebc:	ee17 2a90 	vmov	r2, s15
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eea:	ee17 2a90 	vmov	r2, s15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	0e1b      	lsrs	r3, r3, #24
 8008ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f18:	ee17 2a90 	vmov	r2, s15
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f20:	e008      	b.n	8008f34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	609a      	str	r2, [r3, #8]
}
 8008f34:	bf00      	nop
 8008f36:	3724      	adds	r7, #36	@ 0x24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	58024400 	.word	0x58024400
 8008f44:	03d09000 	.word	0x03d09000
 8008f48:	46000000 	.word	0x46000000
 8008f4c:	4c742400 	.word	0x4c742400
 8008f50:	4a742400 	.word	0x4a742400
 8008f54:	4af42400 	.word	0x4af42400

08008f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f66:	4b53      	ldr	r3, [pc, #332]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d101      	bne.n	8008f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e099      	b.n	80090aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f76:	4b4f      	ldr	r3, [pc, #316]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f82:	f7f8 feb9 	bl	8001cf8 <HAL_GetTick>
 8008f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f88:	e008      	b.n	8008f9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f8a:	f7f8 feb5 	bl	8001cf8 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e086      	b.n	80090aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f9c:	4b45      	ldr	r3, [pc, #276]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1f0      	bne.n	8008f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fa8:	4b42      	ldr	r3, [pc, #264]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	031b      	lsls	r3, r3, #12
 8008fb6:	493f      	ldr	r1, [pc, #252]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	628b      	str	r3, [r1, #40]	@ 0x28
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	025b      	lsls	r3, r3, #9
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	041b      	lsls	r3, r3, #16
 8008fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	061b      	lsls	r3, r3, #24
 8008fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fec:	4931      	ldr	r1, [pc, #196]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ff2:	4b30      	ldr	r3, [pc, #192]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	492d      	ldr	r1, [pc, #180]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009000:	4313      	orrs	r3, r2
 8009002:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009004:	4b2b      	ldr	r3, [pc, #172]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	f023 0220 	bic.w	r2, r3, #32
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	4928      	ldr	r1, [pc, #160]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009016:	4b27      	ldr	r3, [pc, #156]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	4a26      	ldr	r2, [pc, #152]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800901c:	f023 0310 	bic.w	r3, r3, #16
 8009020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009022:	4b24      	ldr	r3, [pc, #144]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009026:	4b24      	ldr	r3, [pc, #144]	@ (80090b8 <RCCEx_PLL2_Config+0x160>)
 8009028:	4013      	ands	r3, r2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	69d2      	ldr	r2, [r2, #28]
 800902e:	00d2      	lsls	r2, r2, #3
 8009030:	4920      	ldr	r1, [pc, #128]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009032:	4313      	orrs	r3, r2
 8009034:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009036:	4b1f      	ldr	r3, [pc, #124]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	4a1e      	ldr	r2, [pc, #120]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800903c:	f043 0310 	orr.w	r3, r3, #16
 8009040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009048:	4b1a      	ldr	r3, [pc, #104]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904c:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800904e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009054:	e00f      	b.n	8009076 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d106      	bne.n	800906a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800905c:	4b15      	ldr	r3, [pc, #84]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	4a14      	ldr	r2, [pc, #80]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009068:	e005      	b.n	8009076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800906a:	4b12      	ldr	r3, [pc, #72]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800906c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906e:	4a11      	ldr	r2, [pc, #68]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009074:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009076:	4b0f      	ldr	r3, [pc, #60]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a0e      	ldr	r2, [pc, #56]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800907c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009082:	f7f8 fe39 	bl	8001cf8 <HAL_GetTick>
 8009086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009088:	e008      	b.n	800909c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800908a:	f7f8 fe35 	bl	8001cf8 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d901      	bls.n	800909c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800909c:	4b05      	ldr	r3, [pc, #20]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0f0      	beq.n	800908a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	58024400 	.word	0x58024400
 80090b8:	ffff0007 	.word	0xffff0007

080090bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ca:	4b53      	ldr	r3, [pc, #332]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d101      	bne.n	80090da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e099      	b.n	800920e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090da:	4b4f      	ldr	r3, [pc, #316]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a4e      	ldr	r2, [pc, #312]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e6:	f7f8 fe07 	bl	8001cf8 <HAL_GetTick>
 80090ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090ec:	e008      	b.n	8009100 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ee:	f7f8 fe03 	bl	8001cf8 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d901      	bls.n	8009100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e086      	b.n	800920e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009100:	4b45      	ldr	r3, [pc, #276]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f0      	bne.n	80090ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800910c:	4b42      	ldr	r3, [pc, #264]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	051b      	lsls	r3, r3, #20
 800911a:	493f      	ldr	r1, [pc, #252]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800911c:	4313      	orrs	r3, r2
 800911e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	3b01      	subs	r3, #1
 8009126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	025b      	lsls	r3, r3, #9
 8009132:	b29b      	uxth	r3, r3
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	3b01      	subs	r3, #1
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	3b01      	subs	r3, #1
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009150:	4931      	ldr	r1, [pc, #196]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009156:	4b30      	ldr	r3, [pc, #192]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	492d      	ldr	r1, [pc, #180]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009164:	4313      	orrs	r3, r2
 8009166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009168:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	4928      	ldr	r1, [pc, #160]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800917a:	4b27      	ldr	r3, [pc, #156]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a26      	ldr	r2, [pc, #152]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009186:	4b24      	ldr	r3, [pc, #144]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <RCCEx_PLL3_Config+0x160>)
 800918c:	4013      	ands	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	69d2      	ldr	r2, [r2, #28]
 8009192:	00d2      	lsls	r2, r2, #3
 8009194:	4920      	ldr	r1, [pc, #128]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800919a:	4b1f      	ldr	r3, [pc, #124]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	4a1e      	ldr	r2, [pc, #120]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	4a19      	ldr	r2, [pc, #100]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80091b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091b8:	e00f      	b.n	80091da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d106      	bne.n	80091ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091c0:	4b15      	ldr	r3, [pc, #84]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	4a14      	ldr	r2, [pc, #80]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091cc:	e005      	b.n	80091da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091ce:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	4a11      	ldr	r2, [pc, #68]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091da:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a0e      	ldr	r2, [pc, #56]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e6:	f7f8 fd87 	bl	8001cf8 <HAL_GetTick>
 80091ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091ec:	e008      	b.n	8009200 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091ee:	f7f8 fd83 	bl	8001cf8 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e006      	b.n	800920e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009200:	4b05      	ldr	r3, [pc, #20]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0f0      	beq.n	80091ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
 800921c:	ffff0007 	.word	0xffff0007

08009220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e049      	b.n	80092c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f841 	bl	80092ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f000 fc7e 	bl	8009b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d001      	beq.n	80092fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e05e      	b.n	80093ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0201 	orr.w	r2, r2, #1
 8009312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a2b      	ldr	r2, [pc, #172]	@ (80093c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d02c      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009326:	d027      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a27      	ldr	r2, [pc, #156]	@ (80093cc <HAL_TIM_Base_Start_IT+0xe8>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d022      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a26      	ldr	r2, [pc, #152]	@ (80093d0 <HAL_TIM_Base_Start_IT+0xec>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d01d      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a24      	ldr	r2, [pc, #144]	@ (80093d4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d018      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a23      	ldr	r2, [pc, #140]	@ (80093d8 <HAL_TIM_Base_Start_IT+0xf4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d013      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a21      	ldr	r2, [pc, #132]	@ (80093dc <HAL_TIM_Base_Start_IT+0xf8>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00e      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a20      	ldr	r2, [pc, #128]	@ (80093e0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d009      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a1e      	ldr	r2, [pc, #120]	@ (80093e4 <HAL_TIM_Base_Start_IT+0x100>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x94>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a1d      	ldr	r2, [pc, #116]	@ (80093e8 <HAL_TIM_Base_Start_IT+0x104>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d115      	bne.n	80093a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	4b1b      	ldr	r3, [pc, #108]	@ (80093ec <HAL_TIM_Base_Start_IT+0x108>)
 8009380:	4013      	ands	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b06      	cmp	r3, #6
 8009388:	d015      	beq.n	80093b6 <HAL_TIM_Base_Start_IT+0xd2>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009390:	d011      	beq.n	80093b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	e008      	b.n	80093b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e000      	b.n	80093b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	40010000 	.word	0x40010000
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40000800 	.word	0x40000800
 80093d4:	40000c00 	.word	0x40000c00
 80093d8:	40010400 	.word	0x40010400
 80093dc:	40001800 	.word	0x40001800
 80093e0:	40014000 	.word	0x40014000
 80093e4:	4000e000 	.word	0x4000e000
 80093e8:	4000e400 	.word	0x4000e400
 80093ec:	00010007 	.word	0x00010007

080093f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e049      	b.n	8009496 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7f7 ffac 	bl	8001374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f000 fb96 	bl	8009b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <HAL_TIM_PWM_Start+0x24>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	bf14      	ite	ne
 80094bc:	2301      	movne	r3, #1
 80094be:	2300      	moveq	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	e03c      	b.n	800953e <HAL_TIM_PWM_Start+0x9e>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d109      	bne.n	80094de <HAL_TIM_PWM_Start+0x3e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	e02f      	b.n	800953e <HAL_TIM_PWM_Start+0x9e>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d109      	bne.n	80094f8 <HAL_TIM_PWM_Start+0x58>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	bf14      	ite	ne
 80094f0:	2301      	movne	r3, #1
 80094f2:	2300      	moveq	r3, #0
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	e022      	b.n	800953e <HAL_TIM_PWM_Start+0x9e>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b0c      	cmp	r3, #12
 80094fc:	d109      	bne.n	8009512 <HAL_TIM_PWM_Start+0x72>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b01      	cmp	r3, #1
 8009508:	bf14      	ite	ne
 800950a:	2301      	movne	r3, #1
 800950c:	2300      	moveq	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	e015      	b.n	800953e <HAL_TIM_PWM_Start+0x9e>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b10      	cmp	r3, #16
 8009516:	d109      	bne.n	800952c <HAL_TIM_PWM_Start+0x8c>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	bf14      	ite	ne
 8009524:	2301      	movne	r3, #1
 8009526:	2300      	moveq	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	e008      	b.n	800953e <HAL_TIM_PWM_Start+0x9e>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	bf14      	ite	ne
 8009538:	2301      	movne	r3, #1
 800953a:	2300      	moveq	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e0ab      	b.n	800969e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <HAL_TIM_PWM_Start+0xb6>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009554:	e023      	b.n	800959e <HAL_TIM_PWM_Start+0xfe>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b04      	cmp	r3, #4
 800955a:	d104      	bne.n	8009566 <HAL_TIM_PWM_Start+0xc6>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009564:	e01b      	b.n	800959e <HAL_TIM_PWM_Start+0xfe>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b08      	cmp	r3, #8
 800956a:	d104      	bne.n	8009576 <HAL_TIM_PWM_Start+0xd6>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009574:	e013      	b.n	800959e <HAL_TIM_PWM_Start+0xfe>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b0c      	cmp	r3, #12
 800957a:	d104      	bne.n	8009586 <HAL_TIM_PWM_Start+0xe6>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009584:	e00b      	b.n	800959e <HAL_TIM_PWM_Start+0xfe>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b10      	cmp	r3, #16
 800958a:	d104      	bne.n	8009596 <HAL_TIM_PWM_Start+0xf6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009594:	e003      	b.n	800959e <HAL_TIM_PWM_Start+0xfe>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2201      	movs	r2, #1
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fe62 	bl	800a270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a3d      	ldr	r2, [pc, #244]	@ (80096a8 <HAL_TIM_PWM_Start+0x208>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d013      	beq.n	80095de <HAL_TIM_PWM_Start+0x13e>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a3c      	ldr	r2, [pc, #240]	@ (80096ac <HAL_TIM_PWM_Start+0x20c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00e      	beq.n	80095de <HAL_TIM_PWM_Start+0x13e>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a3a      	ldr	r2, [pc, #232]	@ (80096b0 <HAL_TIM_PWM_Start+0x210>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d009      	beq.n	80095de <HAL_TIM_PWM_Start+0x13e>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a39      	ldr	r2, [pc, #228]	@ (80096b4 <HAL_TIM_PWM_Start+0x214>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d004      	beq.n	80095de <HAL_TIM_PWM_Start+0x13e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a37      	ldr	r2, [pc, #220]	@ (80096b8 <HAL_TIM_PWM_Start+0x218>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d101      	bne.n	80095e2 <HAL_TIM_PWM_Start+0x142>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <HAL_TIM_PWM_Start+0x144>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d007      	beq.n	80095f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a2a      	ldr	r2, [pc, #168]	@ (80096a8 <HAL_TIM_PWM_Start+0x208>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d02c      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960a:	d027      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a2a      	ldr	r2, [pc, #168]	@ (80096bc <HAL_TIM_PWM_Start+0x21c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d022      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a29      	ldr	r2, [pc, #164]	@ (80096c0 <HAL_TIM_PWM_Start+0x220>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d01d      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a27      	ldr	r2, [pc, #156]	@ (80096c4 <HAL_TIM_PWM_Start+0x224>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d018      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <HAL_TIM_PWM_Start+0x20c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d013      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a23      	ldr	r2, [pc, #140]	@ (80096c8 <HAL_TIM_PWM_Start+0x228>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00e      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1b      	ldr	r2, [pc, #108]	@ (80096b0 <HAL_TIM_PWM_Start+0x210>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d009      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1f      	ldr	r2, [pc, #124]	@ (80096cc <HAL_TIM_PWM_Start+0x22c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d004      	beq.n	800965c <HAL_TIM_PWM_Start+0x1bc>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a1e      	ldr	r2, [pc, #120]	@ (80096d0 <HAL_TIM_PWM_Start+0x230>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d115      	bne.n	8009688 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	4b1c      	ldr	r3, [pc, #112]	@ (80096d4 <HAL_TIM_PWM_Start+0x234>)
 8009664:	4013      	ands	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b06      	cmp	r3, #6
 800966c:	d015      	beq.n	800969a <HAL_TIM_PWM_Start+0x1fa>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009674:	d011      	beq.n	800969a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009686:	e008      	b.n	800969a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0201 	orr.w	r2, r2, #1
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	e000      	b.n	800969c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800969a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40010000 	.word	0x40010000
 80096ac:	40010400 	.word	0x40010400
 80096b0:	40014000 	.word	0x40014000
 80096b4:	40014400 	.word	0x40014400
 80096b8:	40014800 	.word	0x40014800
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40001800 	.word	0x40001800
 80096cc:	4000e000 	.word	0x4000e000
 80096d0:	4000e400 	.word	0x4000e400
 80096d4:	00010007 	.word	0x00010007

080096d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d020      	beq.n	800973c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b00      	cmp	r3, #0
 8009702:	d01b      	beq.n	800973c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0202 	mvn.w	r2, #2
 800970c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f9fe 	bl	8009b24 <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f9f0 	bl	8009b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa01 	bl	8009b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d020      	beq.n	8009788 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01b      	beq.n	8009788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f06f 0204 	mvn.w	r2, #4
 8009758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2202      	movs	r2, #2
 800975e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9d8 	bl	8009b24 <HAL_TIM_IC_CaptureCallback>
 8009774:	e005      	b.n	8009782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f9ca 	bl	8009b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f9db 	bl	8009b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d020      	beq.n	80097d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01b      	beq.n	80097d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0208 	mvn.w	r2, #8
 80097a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2204      	movs	r2, #4
 80097aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9b2 	bl	8009b24 <HAL_TIM_IC_CaptureCallback>
 80097c0:	e005      	b.n	80097ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f9a4 	bl	8009b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f9b5 	bl	8009b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d020      	beq.n	8009820 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01b      	beq.n	8009820 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0210 	mvn.w	r2, #16
 80097f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2208      	movs	r2, #8
 80097f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f98c 	bl	8009b24 <HAL_TIM_IC_CaptureCallback>
 800980c:	e005      	b.n	800981a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f97e 	bl	8009b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f98f 	bl	8009b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00c      	beq.n	8009844 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d007      	beq.n	8009844 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f06f 0201 	mvn.w	r2, #1
 800983c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7f7 fcac 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00c      	beq.n	8009872 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800985e:	2b00      	cmp	r3, #0
 8009860:	d007      	beq.n	8009872 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800986a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fdcb 	bl	800a408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00c      	beq.n	8009896 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009882:	2b00      	cmp	r3, #0
 8009884:	d007      	beq.n	8009896 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800988e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fdc3 	bl	800a41c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00c      	beq.n	80098ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f949 	bl	8009b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f003 0320 	and.w	r3, r3, #32
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f06f 0220 	mvn.w	r2, #32
 80098d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fd8b 	bl	800a3f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098de:	bf00      	nop
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009902:	2302      	movs	r3, #2
 8009904:	e0ff      	b.n	8009b06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b14      	cmp	r3, #20
 8009912:	f200 80f0 	bhi.w	8009af6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009916:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009971 	.word	0x08009971
 8009920:	08009af7 	.word	0x08009af7
 8009924:	08009af7 	.word	0x08009af7
 8009928:	08009af7 	.word	0x08009af7
 800992c:	080099b1 	.word	0x080099b1
 8009930:	08009af7 	.word	0x08009af7
 8009934:	08009af7 	.word	0x08009af7
 8009938:	08009af7 	.word	0x08009af7
 800993c:	080099f3 	.word	0x080099f3
 8009940:	08009af7 	.word	0x08009af7
 8009944:	08009af7 	.word	0x08009af7
 8009948:	08009af7 	.word	0x08009af7
 800994c:	08009a33 	.word	0x08009a33
 8009950:	08009af7 	.word	0x08009af7
 8009954:	08009af7 	.word	0x08009af7
 8009958:	08009af7 	.word	0x08009af7
 800995c:	08009a75 	.word	0x08009a75
 8009960:	08009af7 	.word	0x08009af7
 8009964:	08009af7 	.word	0x08009af7
 8009968:	08009af7 	.word	0x08009af7
 800996c:	08009ab5 	.word	0x08009ab5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f9a4 	bl	8009cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699a      	ldr	r2, [r3, #24]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0208 	orr.w	r2, r2, #8
 800998a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0204 	bic.w	r2, r2, #4
 800999a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6999      	ldr	r1, [r3, #24]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	619a      	str	r2, [r3, #24]
      break;
 80099ae:	e0a5      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fa14 	bl	8009de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	699a      	ldr	r2, [r3, #24]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6999      	ldr	r1, [r3, #24]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	021a      	lsls	r2, r3, #8
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	619a      	str	r2, [r3, #24]
      break;
 80099f0:	e084      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fa7d 	bl	8009ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69da      	ldr	r2, [r3, #28]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0208 	orr.w	r2, r2, #8
 8009a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69da      	ldr	r2, [r3, #28]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0204 	bic.w	r2, r2, #4
 8009a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69d9      	ldr	r1, [r3, #28]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	61da      	str	r2, [r3, #28]
      break;
 8009a30:	e064      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fae5 	bl	800a008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69da      	ldr	r2, [r3, #28]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69d9      	ldr	r1, [r3, #28]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	021a      	lsls	r2, r3, #8
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	61da      	str	r2, [r3, #28]
      break;
 8009a72:	e043      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fb2e 	bl	800a0dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0208 	orr.w	r2, r2, #8
 8009a8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0204 	bic.w	r2, r2, #4
 8009a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ab2:	e023      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68b9      	ldr	r1, [r7, #8]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fb72 	bl	800a1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ace:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ade:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	021a      	lsls	r2, r3, #8
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009af4:	e002      	b.n	8009afc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	75fb      	strb	r3, [r7, #23]
      break;
 8009afa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop

08009b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a4a      	ldr	r2, [pc, #296]	@ (8009c9c <TIM_Base_SetConfig+0x13c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d013      	beq.n	8009ba0 <TIM_Base_SetConfig+0x40>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b7e:	d00f      	beq.n	8009ba0 <TIM_Base_SetConfig+0x40>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a47      	ldr	r2, [pc, #284]	@ (8009ca0 <TIM_Base_SetConfig+0x140>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00b      	beq.n	8009ba0 <TIM_Base_SetConfig+0x40>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a46      	ldr	r2, [pc, #280]	@ (8009ca4 <TIM_Base_SetConfig+0x144>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d007      	beq.n	8009ba0 <TIM_Base_SetConfig+0x40>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a45      	ldr	r2, [pc, #276]	@ (8009ca8 <TIM_Base_SetConfig+0x148>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_Base_SetConfig+0x40>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a44      	ldr	r2, [pc, #272]	@ (8009cac <TIM_Base_SetConfig+0x14c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d108      	bne.n	8009bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a39      	ldr	r2, [pc, #228]	@ (8009c9c <TIM_Base_SetConfig+0x13c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d027      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc0:	d023      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a36      	ldr	r2, [pc, #216]	@ (8009ca0 <TIM_Base_SetConfig+0x140>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01f      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a35      	ldr	r2, [pc, #212]	@ (8009ca4 <TIM_Base_SetConfig+0x144>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d01b      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a34      	ldr	r2, [pc, #208]	@ (8009ca8 <TIM_Base_SetConfig+0x148>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d017      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a33      	ldr	r2, [pc, #204]	@ (8009cac <TIM_Base_SetConfig+0x14c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d013      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a32      	ldr	r2, [pc, #200]	@ (8009cb0 <TIM_Base_SetConfig+0x150>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00f      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a31      	ldr	r2, [pc, #196]	@ (8009cb4 <TIM_Base_SetConfig+0x154>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d00b      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a30      	ldr	r2, [pc, #192]	@ (8009cb8 <TIM_Base_SetConfig+0x158>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d007      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8009cbc <TIM_Base_SetConfig+0x15c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <TIM_Base_SetConfig+0xaa>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a2e      	ldr	r2, [pc, #184]	@ (8009cc0 <TIM_Base_SetConfig+0x160>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d108      	bne.n	8009c1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689a      	ldr	r2, [r3, #8]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a16      	ldr	r2, [pc, #88]	@ (8009c9c <TIM_Base_SetConfig+0x13c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00f      	beq.n	8009c68 <TIM_Base_SetConfig+0x108>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <TIM_Base_SetConfig+0x14c>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00b      	beq.n	8009c68 <TIM_Base_SetConfig+0x108>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a17      	ldr	r2, [pc, #92]	@ (8009cb0 <TIM_Base_SetConfig+0x150>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <TIM_Base_SetConfig+0x108>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a16      	ldr	r2, [pc, #88]	@ (8009cb4 <TIM_Base_SetConfig+0x154>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <TIM_Base_SetConfig+0x108>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a15      	ldr	r2, [pc, #84]	@ (8009cb8 <TIM_Base_SetConfig+0x158>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d103      	bne.n	8009c70 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d105      	bne.n	8009c8e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	f023 0201 	bic.w	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	611a      	str	r2, [r3, #16]
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40010000 	.word	0x40010000
 8009ca0:	40000400 	.word	0x40000400
 8009ca4:	40000800 	.word	0x40000800
 8009ca8:	40000c00 	.word	0x40000c00
 8009cac:	40010400 	.word	0x40010400
 8009cb0:	40014000 	.word	0x40014000
 8009cb4:	40014400 	.word	0x40014400
 8009cb8:	40014800 	.word	0x40014800
 8009cbc:	4000e000 	.word	0x4000e000
 8009cc0:	4000e400 	.word	0x4000e400

08009cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	f023 0201 	bic.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4b37      	ldr	r3, [pc, #220]	@ (8009dcc <TIM_OC1_SetConfig+0x108>)
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0303 	bic.w	r3, r3, #3
 8009cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f023 0302 	bic.w	r3, r3, #2
 8009d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd0 <TIM_OC1_SetConfig+0x10c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00f      	beq.n	8009d40 <TIM_OC1_SetConfig+0x7c>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a2c      	ldr	r2, [pc, #176]	@ (8009dd4 <TIM_OC1_SetConfig+0x110>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00b      	beq.n	8009d40 <TIM_OC1_SetConfig+0x7c>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009dd8 <TIM_OC1_SetConfig+0x114>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d007      	beq.n	8009d40 <TIM_OC1_SetConfig+0x7c>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a2a      	ldr	r2, [pc, #168]	@ (8009ddc <TIM_OC1_SetConfig+0x118>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d003      	beq.n	8009d40 <TIM_OC1_SetConfig+0x7c>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a29      	ldr	r2, [pc, #164]	@ (8009de0 <TIM_OC1_SetConfig+0x11c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d10c      	bne.n	8009d5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f023 0308 	bic.w	r3, r3, #8
 8009d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f023 0304 	bic.w	r3, r3, #4
 8009d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009dd0 <TIM_OC1_SetConfig+0x10c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00f      	beq.n	8009d82 <TIM_OC1_SetConfig+0xbe>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd4 <TIM_OC1_SetConfig+0x110>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d00b      	beq.n	8009d82 <TIM_OC1_SetConfig+0xbe>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd8 <TIM_OC1_SetConfig+0x114>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d007      	beq.n	8009d82 <TIM_OC1_SetConfig+0xbe>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a19      	ldr	r2, [pc, #100]	@ (8009ddc <TIM_OC1_SetConfig+0x118>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d003      	beq.n	8009d82 <TIM_OC1_SetConfig+0xbe>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a18      	ldr	r2, [pc, #96]	@ (8009de0 <TIM_OC1_SetConfig+0x11c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d111      	bne.n	8009da6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	621a      	str	r2, [r3, #32]
}
 8009dc0:	bf00      	nop
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	fffeff8f 	.word	0xfffeff8f
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40010400 	.word	0x40010400
 8009dd8:	40014000 	.word	0x40014000
 8009ddc:	40014400 	.word	0x40014400
 8009de0:	40014800 	.word	0x40014800

08009de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f023 0210 	bic.w	r2, r3, #16
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4b34      	ldr	r3, [pc, #208]	@ (8009ee0 <TIM_OC2_SetConfig+0xfc>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f023 0320 	bic.w	r3, r3, #32
 8009e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a29      	ldr	r2, [pc, #164]	@ (8009ee4 <TIM_OC2_SetConfig+0x100>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d003      	beq.n	8009e4c <TIM_OC2_SetConfig+0x68>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a28      	ldr	r2, [pc, #160]	@ (8009ee8 <TIM_OC2_SetConfig+0x104>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d10d      	bne.n	8009e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ee4 <TIM_OC2_SetConfig+0x100>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00f      	beq.n	8009e90 <TIM_OC2_SetConfig+0xac>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee8 <TIM_OC2_SetConfig+0x104>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_OC2_SetConfig+0xac>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eec <TIM_OC2_SetConfig+0x108>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d007      	beq.n	8009e90 <TIM_OC2_SetConfig+0xac>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a1b      	ldr	r2, [pc, #108]	@ (8009ef0 <TIM_OC2_SetConfig+0x10c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_OC2_SetConfig+0xac>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef4 <TIM_OC2_SetConfig+0x110>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d113      	bne.n	8009eb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	621a      	str	r2, [r3, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	feff8fff 	.word	0xfeff8fff
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40010400 	.word	0x40010400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40014400 	.word	0x40014400
 8009ef4:	40014800 	.word	0x40014800

08009ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4b33      	ldr	r3, [pc, #204]	@ (8009ff0 <TIM_OC3_SetConfig+0xf8>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a28      	ldr	r2, [pc, #160]	@ (8009ff4 <TIM_OC3_SetConfig+0xfc>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d003      	beq.n	8009f5e <TIM_OC3_SetConfig+0x66>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a27      	ldr	r2, [pc, #156]	@ (8009ff8 <TIM_OC3_SetConfig+0x100>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d10d      	bne.n	8009f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <TIM_OC3_SetConfig+0xfc>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xaa>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff8 <TIM_OC3_SetConfig+0x100>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xaa>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ffc <TIM_OC3_SetConfig+0x104>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xaa>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a1a      	ldr	r2, [pc, #104]	@ (800a000 <TIM_OC3_SetConfig+0x108>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_OC3_SetConfig+0xaa>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a19      	ldr	r2, [pc, #100]	@ (800a004 <TIM_OC3_SetConfig+0x10c>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d113      	bne.n	8009fca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	621a      	str	r2, [r3, #32]
}
 8009fe4:	bf00      	nop
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	fffeff8f 	.word	0xfffeff8f
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40014400 	.word	0x40014400
 800a004:	40014800 	.word	0x40014800

0800a008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4b24      	ldr	r3, [pc, #144]	@ (800a0c4 <TIM_OC4_SetConfig+0xbc>)
 800a034:	4013      	ands	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	031b      	lsls	r3, r3, #12
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a19      	ldr	r2, [pc, #100]	@ (800a0c8 <TIM_OC4_SetConfig+0xc0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d00f      	beq.n	800a088 <TIM_OC4_SetConfig+0x80>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a18      	ldr	r2, [pc, #96]	@ (800a0cc <TIM_OC4_SetConfig+0xc4>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d00b      	beq.n	800a088 <TIM_OC4_SetConfig+0x80>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a17      	ldr	r2, [pc, #92]	@ (800a0d0 <TIM_OC4_SetConfig+0xc8>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d007      	beq.n	800a088 <TIM_OC4_SetConfig+0x80>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a16      	ldr	r2, [pc, #88]	@ (800a0d4 <TIM_OC4_SetConfig+0xcc>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d003      	beq.n	800a088 <TIM_OC4_SetConfig+0x80>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a15      	ldr	r2, [pc, #84]	@ (800a0d8 <TIM_OC4_SetConfig+0xd0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d109      	bne.n	800a09c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a08e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	019b      	lsls	r3, r3, #6
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	4313      	orrs	r3, r2
 800a09a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	feff8fff 	.word	0xfeff8fff
 800a0c8:	40010000 	.word	0x40010000
 800a0cc:	40010400 	.word	0x40010400
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	40014400 	.word	0x40014400
 800a0d8:	40014800 	.word	0x40014800

0800a0dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4b21      	ldr	r3, [pc, #132]	@ (800a18c <TIM_OC5_SetConfig+0xb0>)
 800a108:	4013      	ands	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a11c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a18      	ldr	r2, [pc, #96]	@ (800a190 <TIM_OC5_SetConfig+0xb4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00f      	beq.n	800a152 <TIM_OC5_SetConfig+0x76>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a17      	ldr	r2, [pc, #92]	@ (800a194 <TIM_OC5_SetConfig+0xb8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00b      	beq.n	800a152 <TIM_OC5_SetConfig+0x76>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a16      	ldr	r2, [pc, #88]	@ (800a198 <TIM_OC5_SetConfig+0xbc>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d007      	beq.n	800a152 <TIM_OC5_SetConfig+0x76>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a15      	ldr	r2, [pc, #84]	@ (800a19c <TIM_OC5_SetConfig+0xc0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d003      	beq.n	800a152 <TIM_OC5_SetConfig+0x76>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a14      	ldr	r2, [pc, #80]	@ (800a1a0 <TIM_OC5_SetConfig+0xc4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d109      	bne.n	800a166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	621a      	str	r2, [r3, #32]
}
 800a180:	bf00      	nop
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	fffeff8f 	.word	0xfffeff8f
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400
 800a198:	40014000 	.word	0x40014000
 800a19c:	40014400 	.word	0x40014400
 800a1a0:	40014800 	.word	0x40014800

0800a1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4b22      	ldr	r3, [pc, #136]	@ (800a258 <TIM_OC6_SetConfig+0xb4>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a19      	ldr	r2, [pc, #100]	@ (800a25c <TIM_OC6_SetConfig+0xb8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00f      	beq.n	800a21c <TIM_OC6_SetConfig+0x78>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <TIM_OC6_SetConfig+0xbc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00b      	beq.n	800a21c <TIM_OC6_SetConfig+0x78>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a17      	ldr	r2, [pc, #92]	@ (800a264 <TIM_OC6_SetConfig+0xc0>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d007      	beq.n	800a21c <TIM_OC6_SetConfig+0x78>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a16      	ldr	r2, [pc, #88]	@ (800a268 <TIM_OC6_SetConfig+0xc4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_OC6_SetConfig+0x78>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a15      	ldr	r2, [pc, #84]	@ (800a26c <TIM_OC6_SetConfig+0xc8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d109      	bne.n	800a230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	029b      	lsls	r3, r3, #10
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	feff8fff 	.word	0xfeff8fff
 800a25c:	40010000 	.word	0x40010000
 800a260:	40010400 	.word	0x40010400
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800

0800a270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	2201      	movs	r2, #1
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a1a      	ldr	r2, [r3, #32]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	43db      	mvns	r3, r3
 800a292:	401a      	ands	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a1a      	ldr	r2, [r3, #32]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f003 031f 	and.w	r3, r3, #31
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e077      	b.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a35      	ldr	r2, [pc, #212]	@ (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d004      	beq.n	800a308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a34      	ldr	r2, [pc, #208]	@ (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d108      	bne.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a30e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a25      	ldr	r2, [pc, #148]	@ (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d02c      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a346:	d027      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a22      	ldr	r2, [pc, #136]	@ (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d022      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a21      	ldr	r2, [pc, #132]	@ (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d01d      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a1f      	ldr	r2, [pc, #124]	@ (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d018      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a1a      	ldr	r2, [pc, #104]	@ (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d013      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00e      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a1a      	ldr	r2, [pc, #104]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d009      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a18      	ldr	r2, [pc, #96]	@ (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d004      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a17      	ldr	r2, [pc, #92]	@ (800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d10c      	bne.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a39e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	40010000 	.word	0x40010000
 800a3d4:	40010400 	.word	0x40010400
 800a3d8:	40000400 	.word	0x40000400
 800a3dc:	40000800 	.word	0x40000800
 800a3e0:	40000c00 	.word	0x40000c00
 800a3e4:	40001800 	.word	0x40001800
 800a3e8:	40014000 	.word	0x40014000
 800a3ec:	4000e000 	.word	0x4000e000
 800a3f0:	4000e400 	.word	0x4000e400

0800a3f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e042      	b.n	800a4c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d106      	bne.n	800a45a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7f6 ffe5 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2224      	movs	r2, #36	@ 0x24
 800a45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 0201 	bic.w	r2, r2, #1
 800a470:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 ffb6 	bl	800b3ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f947 	bl	800a714 <UART_SetConfig>
 800a486:	4603      	mov	r3, r0
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e01b      	b.n	800a4c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a49e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0201 	orr.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 f835 	bl	800b530 <UART_CheckIdleState>
 800a4c6:	4603      	mov	r3, r0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	@ 0x28
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d17b      	bne.n	800a5e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_UART_Transmit+0x26>
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e074      	b.n	800a5e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2221      	movs	r2, #33	@ 0x21
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a50a:	f7f7 fbf5 	bl	8001cf8 <HAL_GetTick>
 800a50e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	88fa      	ldrh	r2, [r7, #6]
 800a514:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	88fa      	ldrh	r2, [r7, #6]
 800a51c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a528:	d108      	bne.n	800a53c <HAL_UART_Transmit+0x6c>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d104      	bne.n	800a53c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	e003      	b.n	800a544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a544:	e030      	b.n	800a5a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2180      	movs	r1, #128	@ 0x80
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 f897 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2220      	movs	r2, #32
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e03d      	b.n	800a5e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a57c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	3302      	adds	r3, #2
 800a582:	61bb      	str	r3, [r7, #24]
 800a584:	e007      	b.n	800a596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	3301      	adds	r3, #1
 800a594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1c8      	bne.n	800a546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2140      	movs	r1, #64	@ 0x40
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f001 f860 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e006      	b.n	800a5e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e000      	b.n	800a5e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a5e2:	2302      	movs	r3, #2
  }
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b091      	sub	sp, #68	@ 0x44
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a600:	2b20      	cmp	r3, #32
 800a602:	d178      	bne.n	800a6f6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_UART_Transmit_IT+0x24>
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e071      	b.n	800a6f8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	88fa      	ldrh	r2, [r7, #6]
 800a626:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2221      	movs	r2, #33	@ 0x21
 800a63c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a648:	d12a      	bne.n	800a6a0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a652:	d107      	bne.n	800a664 <HAL_UART_Transmit_IT+0x78>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4a29      	ldr	r2, [pc, #164]	@ (800a704 <HAL_UART_Transmit_IT+0x118>)
 800a660:	679a      	str	r2, [r3, #120]	@ 0x78
 800a662:	e002      	b.n	800a66a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4a28      	ldr	r2, [pc, #160]	@ (800a708 <HAL_UART_Transmit_IT+0x11c>)
 800a668:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a680:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3308      	adds	r3, #8
 800a688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a68a:	637a      	str	r2, [r7, #52]	@ 0x34
 800a68c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <HAL_UART_Transmit_IT+0x7e>
 800a69e:	e028      	b.n	800a6f2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6a8:	d107      	bne.n	800a6ba <HAL_UART_Transmit_IT+0xce>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a15      	ldr	r2, [pc, #84]	@ (800a70c <HAL_UART_Transmit_IT+0x120>)
 800a6b6:	679a      	str	r2, [r3, #120]	@ 0x78
 800a6b8:	e002      	b.n	800a6c0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4a14      	ldr	r2, [pc, #80]	@ (800a710 <HAL_UART_Transmit_IT+0x124>)
 800a6be:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6de:	623b      	str	r3, [r7, #32]
 800a6e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	69f9      	ldr	r1, [r7, #28]
 800a6e4:	6a3a      	ldr	r2, [r7, #32]
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e6      	bne.n	800a6c0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e000      	b.n	800a6f8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a6f6:	2302      	movs	r3, #2
  }
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3744      	adds	r7, #68	@ 0x44
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	0800ba87 	.word	0x0800ba87
 800a708:	0800b9a7 	.word	0x0800b9a7
 800a70c:	0800b8e5 	.word	0x0800b8e5
 800a710:	0800b82d 	.word	0x0800b82d

0800a714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a718:	b092      	sub	sp, #72	@ 0x48
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	431a      	orrs	r2, r3
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	431a      	orrs	r2, r3
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	4313      	orrs	r3, r2
 800a73a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4bbe      	ldr	r3, [pc, #760]	@ (800aa3c <UART_SetConfig+0x328>)
 800a744:	4013      	ands	r3, r2
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	6812      	ldr	r2, [r2, #0]
 800a74a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a74c:	430b      	orrs	r3, r1
 800a74e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4ab3      	ldr	r2, [pc, #716]	@ (800aa40 <UART_SetConfig+0x32c>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d004      	beq.n	800a780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a77c:	4313      	orrs	r3, r2
 800a77e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689a      	ldr	r2, [r3, #8]
 800a786:	4baf      	ldr	r3, [pc, #700]	@ (800aa44 <UART_SetConfig+0x330>)
 800a788:	4013      	ands	r3, r2
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a790:	430b      	orrs	r3, r1
 800a792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79a:	f023 010f 	bic.w	r1, r3, #15
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4aa6      	ldr	r2, [pc, #664]	@ (800aa48 <UART_SetConfig+0x334>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d177      	bne.n	800a8a4 <UART_SetConfig+0x190>
 800a7b4:	4ba5      	ldr	r3, [pc, #660]	@ (800aa4c <UART_SetConfig+0x338>)
 800a7b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7bc:	2b28      	cmp	r3, #40	@ 0x28
 800a7be:	d86d      	bhi.n	800a89c <UART_SetConfig+0x188>
 800a7c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c8 <UART_SetConfig+0xb4>)
 800a7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c6:	bf00      	nop
 800a7c8:	0800a86d 	.word	0x0800a86d
 800a7cc:	0800a89d 	.word	0x0800a89d
 800a7d0:	0800a89d 	.word	0x0800a89d
 800a7d4:	0800a89d 	.word	0x0800a89d
 800a7d8:	0800a89d 	.word	0x0800a89d
 800a7dc:	0800a89d 	.word	0x0800a89d
 800a7e0:	0800a89d 	.word	0x0800a89d
 800a7e4:	0800a89d 	.word	0x0800a89d
 800a7e8:	0800a875 	.word	0x0800a875
 800a7ec:	0800a89d 	.word	0x0800a89d
 800a7f0:	0800a89d 	.word	0x0800a89d
 800a7f4:	0800a89d 	.word	0x0800a89d
 800a7f8:	0800a89d 	.word	0x0800a89d
 800a7fc:	0800a89d 	.word	0x0800a89d
 800a800:	0800a89d 	.word	0x0800a89d
 800a804:	0800a89d 	.word	0x0800a89d
 800a808:	0800a87d 	.word	0x0800a87d
 800a80c:	0800a89d 	.word	0x0800a89d
 800a810:	0800a89d 	.word	0x0800a89d
 800a814:	0800a89d 	.word	0x0800a89d
 800a818:	0800a89d 	.word	0x0800a89d
 800a81c:	0800a89d 	.word	0x0800a89d
 800a820:	0800a89d 	.word	0x0800a89d
 800a824:	0800a89d 	.word	0x0800a89d
 800a828:	0800a885 	.word	0x0800a885
 800a82c:	0800a89d 	.word	0x0800a89d
 800a830:	0800a89d 	.word	0x0800a89d
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a89d 	.word	0x0800a89d
 800a83c:	0800a89d 	.word	0x0800a89d
 800a840:	0800a89d 	.word	0x0800a89d
 800a844:	0800a89d 	.word	0x0800a89d
 800a848:	0800a88d 	.word	0x0800a88d
 800a84c:	0800a89d 	.word	0x0800a89d
 800a850:	0800a89d 	.word	0x0800a89d
 800a854:	0800a89d 	.word	0x0800a89d
 800a858:	0800a89d 	.word	0x0800a89d
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a89d 	.word	0x0800a89d
 800a864:	0800a89d 	.word	0x0800a89d
 800a868:	0800a895 	.word	0x0800a895
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e326      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a874:	2304      	movs	r3, #4
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e322      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e31e      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a884:	2310      	movs	r3, #16
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e31a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a88c:	2320      	movs	r3, #32
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e316      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a894:	2340      	movs	r3, #64	@ 0x40
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e312      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a89c:	2380      	movs	r3, #128	@ 0x80
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e30e      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a69      	ldr	r2, [pc, #420]	@ (800aa50 <UART_SetConfig+0x33c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d130      	bne.n	800a910 <UART_SetConfig+0x1fc>
 800a8ae:	4b67      	ldr	r3, [pc, #412]	@ (800aa4c <UART_SetConfig+0x338>)
 800a8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d826      	bhi.n	800a908 <UART_SetConfig+0x1f4>
 800a8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c0 <UART_SetConfig+0x1ac>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a8d9 	.word	0x0800a8d9
 800a8c4:	0800a8e1 	.word	0x0800a8e1
 800a8c8:	0800a8e9 	.word	0x0800a8e9
 800a8cc:	0800a8f1 	.word	0x0800a8f1
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a901 	.word	0x0800a901
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8de:	e2f0      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a8e0:	2304      	movs	r3, #4
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e2ec      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a8e8:	2308      	movs	r3, #8
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e2e8      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a8f0:	2310      	movs	r3, #16
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e2e4      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e2e0      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a900:	2340      	movs	r3, #64	@ 0x40
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e2dc      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a908:	2380      	movs	r3, #128	@ 0x80
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e2d8      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a4f      	ldr	r2, [pc, #316]	@ (800aa54 <UART_SetConfig+0x340>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d130      	bne.n	800a97c <UART_SetConfig+0x268>
 800a91a:	4b4c      	ldr	r3, [pc, #304]	@ (800aa4c <UART_SetConfig+0x338>)
 800a91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91e:	f003 0307 	and.w	r3, r3, #7
 800a922:	2b05      	cmp	r3, #5
 800a924:	d826      	bhi.n	800a974 <UART_SetConfig+0x260>
 800a926:	a201      	add	r2, pc, #4	@ (adr r2, 800a92c <UART_SetConfig+0x218>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a945 	.word	0x0800a945
 800a930:	0800a94d 	.word	0x0800a94d
 800a934:	0800a955 	.word	0x0800a955
 800a938:	0800a95d 	.word	0x0800a95d
 800a93c:	0800a965 	.word	0x0800a965
 800a940:	0800a96d 	.word	0x0800a96d
 800a944:	2300      	movs	r3, #0
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e2ba      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a94c:	2304      	movs	r3, #4
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e2b6      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a954:	2308      	movs	r3, #8
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e2b2      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a95c:	2310      	movs	r3, #16
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e2ae      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a964:	2320      	movs	r3, #32
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e2aa      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a96c:	2340      	movs	r3, #64	@ 0x40
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e2a6      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a974:	2380      	movs	r3, #128	@ 0x80
 800a976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97a:	e2a2      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a35      	ldr	r2, [pc, #212]	@ (800aa58 <UART_SetConfig+0x344>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d130      	bne.n	800a9e8 <UART_SetConfig+0x2d4>
 800a986:	4b31      	ldr	r3, [pc, #196]	@ (800aa4c <UART_SetConfig+0x338>)
 800a988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d826      	bhi.n	800a9e0 <UART_SetConfig+0x2cc>
 800a992:	a201      	add	r2, pc, #4	@ (adr r2, 800a998 <UART_SetConfig+0x284>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9b9 	.word	0x0800a9b9
 800a9a0:	0800a9c1 	.word	0x0800a9c1
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9d1 	.word	0x0800a9d1
 800a9ac:	0800a9d9 	.word	0x0800a9d9
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e284      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e280      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c6:	e27c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ce:	e278      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	e274      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9d8:	2340      	movs	r3, #64	@ 0x40
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9de:	e270      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9e0:	2380      	movs	r3, #128	@ 0x80
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e26c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	@ (800aa5c <UART_SetConfig+0x348>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d142      	bne.n	800aa78 <UART_SetConfig+0x364>
 800a9f2:	4b16      	ldr	r3, [pc, #88]	@ (800aa4c <UART_SetConfig+0x338>)
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d838      	bhi.n	800aa70 <UART_SetConfig+0x35c>
 800a9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800aa04 <UART_SetConfig+0x2f0>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa1d 	.word	0x0800aa1d
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	0800aa35 	.word	0x0800aa35
 800aa14:	0800aa61 	.word	0x0800aa61
 800aa18:	0800aa69 	.word	0x0800aa69
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa22:	e24e      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa24:	2304      	movs	r3, #4
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e24a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e246      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e242      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa3c:	cfff69f3 	.word	0xcfff69f3
 800aa40:	58000c00 	.word	0x58000c00
 800aa44:	11fff4ff 	.word	0x11fff4ff
 800aa48:	40011000 	.word	0x40011000
 800aa4c:	58024400 	.word	0x58024400
 800aa50:	40004400 	.word	0x40004400
 800aa54:	40004800 	.word	0x40004800
 800aa58:	40004c00 	.word	0x40004c00
 800aa5c:	40005000 	.word	0x40005000
 800aa60:	2320      	movs	r3, #32
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa66:	e22c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa68:	2340      	movs	r3, #64	@ 0x40
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6e:	e228      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa70:	2380      	movs	r3, #128	@ 0x80
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa76:	e224      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4ab1      	ldr	r2, [pc, #708]	@ (800ad44 <UART_SetConfig+0x630>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d176      	bne.n	800ab70 <UART_SetConfig+0x45c>
 800aa82:	4bb1      	ldr	r3, [pc, #708]	@ (800ad48 <UART_SetConfig+0x634>)
 800aa84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa8a:	2b28      	cmp	r3, #40	@ 0x28
 800aa8c:	d86c      	bhi.n	800ab68 <UART_SetConfig+0x454>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <UART_SetConfig+0x380>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800ab39 	.word	0x0800ab39
 800aa98:	0800ab69 	.word	0x0800ab69
 800aa9c:	0800ab69 	.word	0x0800ab69
 800aaa0:	0800ab69 	.word	0x0800ab69
 800aaa4:	0800ab69 	.word	0x0800ab69
 800aaa8:	0800ab69 	.word	0x0800ab69
 800aaac:	0800ab69 	.word	0x0800ab69
 800aab0:	0800ab69 	.word	0x0800ab69
 800aab4:	0800ab41 	.word	0x0800ab41
 800aab8:	0800ab69 	.word	0x0800ab69
 800aabc:	0800ab69 	.word	0x0800ab69
 800aac0:	0800ab69 	.word	0x0800ab69
 800aac4:	0800ab69 	.word	0x0800ab69
 800aac8:	0800ab69 	.word	0x0800ab69
 800aacc:	0800ab69 	.word	0x0800ab69
 800aad0:	0800ab69 	.word	0x0800ab69
 800aad4:	0800ab49 	.word	0x0800ab49
 800aad8:	0800ab69 	.word	0x0800ab69
 800aadc:	0800ab69 	.word	0x0800ab69
 800aae0:	0800ab69 	.word	0x0800ab69
 800aae4:	0800ab69 	.word	0x0800ab69
 800aae8:	0800ab69 	.word	0x0800ab69
 800aaec:	0800ab69 	.word	0x0800ab69
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab51 	.word	0x0800ab51
 800aaf8:	0800ab69 	.word	0x0800ab69
 800aafc:	0800ab69 	.word	0x0800ab69
 800ab00:	0800ab69 	.word	0x0800ab69
 800ab04:	0800ab69 	.word	0x0800ab69
 800ab08:	0800ab69 	.word	0x0800ab69
 800ab0c:	0800ab69 	.word	0x0800ab69
 800ab10:	0800ab69 	.word	0x0800ab69
 800ab14:	0800ab59 	.word	0x0800ab59
 800ab18:	0800ab69 	.word	0x0800ab69
 800ab1c:	0800ab69 	.word	0x0800ab69
 800ab20:	0800ab69 	.word	0x0800ab69
 800ab24:	0800ab69 	.word	0x0800ab69
 800ab28:	0800ab69 	.word	0x0800ab69
 800ab2c:	0800ab69 	.word	0x0800ab69
 800ab30:	0800ab69 	.word	0x0800ab69
 800ab34:	0800ab61 	.word	0x0800ab61
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e1c0      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab40:	2304      	movs	r3, #4
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e1bc      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab48:	2308      	movs	r3, #8
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e1b8      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab50:	2310      	movs	r3, #16
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e1b4      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab58:	2320      	movs	r3, #32
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e1b0      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab60:	2340      	movs	r3, #64	@ 0x40
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab66:	e1ac      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab68:	2380      	movs	r3, #128	@ 0x80
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6e:	e1a8      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a75      	ldr	r2, [pc, #468]	@ (800ad4c <UART_SetConfig+0x638>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d130      	bne.n	800abdc <UART_SetConfig+0x4c8>
 800ab7a:	4b73      	ldr	r3, [pc, #460]	@ (800ad48 <UART_SetConfig+0x634>)
 800ab7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	2b05      	cmp	r3, #5
 800ab84:	d826      	bhi.n	800abd4 <UART_SetConfig+0x4c0>
 800ab86:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <UART_SetConfig+0x478>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800aba5 	.word	0x0800aba5
 800ab90:	0800abad 	.word	0x0800abad
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800abbd 	.word	0x0800abbd
 800ab9c:	0800abc5 	.word	0x0800abc5
 800aba0:	0800abcd 	.word	0x0800abcd
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e18a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abac:	2304      	movs	r3, #4
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e186      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abb4:	2308      	movs	r3, #8
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e182      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abbc:	2310      	movs	r3, #16
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc2:	e17e      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abc4:	2320      	movs	r3, #32
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e17a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abcc:	2340      	movs	r3, #64	@ 0x40
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e176      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abd4:	2380      	movs	r3, #128	@ 0x80
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e172      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a5b      	ldr	r2, [pc, #364]	@ (800ad50 <UART_SetConfig+0x63c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d130      	bne.n	800ac48 <UART_SetConfig+0x534>
 800abe6:	4b58      	ldr	r3, [pc, #352]	@ (800ad48 <UART_SetConfig+0x634>)
 800abe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abea:	f003 0307 	and.w	r3, r3, #7
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d826      	bhi.n	800ac40 <UART_SetConfig+0x52c>
 800abf2:	a201      	add	r2, pc, #4	@ (adr r2, 800abf8 <UART_SetConfig+0x4e4>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac19 	.word	0x0800ac19
 800ac00:	0800ac21 	.word	0x0800ac21
 800ac04:	0800ac29 	.word	0x0800ac29
 800ac08:	0800ac31 	.word	0x0800ac31
 800ac0c:	0800ac39 	.word	0x0800ac39
 800ac10:	2300      	movs	r3, #0
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e154      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e150      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac20:	2308      	movs	r3, #8
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e14c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e148      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac30:	2320      	movs	r3, #32
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e144      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac38:	2340      	movs	r3, #64	@ 0x40
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e140      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac40:	2380      	movs	r3, #128	@ 0x80
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac46:	e13c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a41      	ldr	r2, [pc, #260]	@ (800ad54 <UART_SetConfig+0x640>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	f040 8082 	bne.w	800ad58 <UART_SetConfig+0x644>
 800ac54:	4b3c      	ldr	r3, [pc, #240]	@ (800ad48 <UART_SetConfig+0x634>)
 800ac56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac5c:	2b28      	cmp	r3, #40	@ 0x28
 800ac5e:	d86d      	bhi.n	800ad3c <UART_SetConfig+0x628>
 800ac60:	a201      	add	r2, pc, #4	@ (adr r2, 800ac68 <UART_SetConfig+0x554>)
 800ac62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac66:	bf00      	nop
 800ac68:	0800ad0d 	.word	0x0800ad0d
 800ac6c:	0800ad3d 	.word	0x0800ad3d
 800ac70:	0800ad3d 	.word	0x0800ad3d
 800ac74:	0800ad3d 	.word	0x0800ad3d
 800ac78:	0800ad3d 	.word	0x0800ad3d
 800ac7c:	0800ad3d 	.word	0x0800ad3d
 800ac80:	0800ad3d 	.word	0x0800ad3d
 800ac84:	0800ad3d 	.word	0x0800ad3d
 800ac88:	0800ad15 	.word	0x0800ad15
 800ac8c:	0800ad3d 	.word	0x0800ad3d
 800ac90:	0800ad3d 	.word	0x0800ad3d
 800ac94:	0800ad3d 	.word	0x0800ad3d
 800ac98:	0800ad3d 	.word	0x0800ad3d
 800ac9c:	0800ad3d 	.word	0x0800ad3d
 800aca0:	0800ad3d 	.word	0x0800ad3d
 800aca4:	0800ad3d 	.word	0x0800ad3d
 800aca8:	0800ad1d 	.word	0x0800ad1d
 800acac:	0800ad3d 	.word	0x0800ad3d
 800acb0:	0800ad3d 	.word	0x0800ad3d
 800acb4:	0800ad3d 	.word	0x0800ad3d
 800acb8:	0800ad3d 	.word	0x0800ad3d
 800acbc:	0800ad3d 	.word	0x0800ad3d
 800acc0:	0800ad3d 	.word	0x0800ad3d
 800acc4:	0800ad3d 	.word	0x0800ad3d
 800acc8:	0800ad25 	.word	0x0800ad25
 800accc:	0800ad3d 	.word	0x0800ad3d
 800acd0:	0800ad3d 	.word	0x0800ad3d
 800acd4:	0800ad3d 	.word	0x0800ad3d
 800acd8:	0800ad3d 	.word	0x0800ad3d
 800acdc:	0800ad3d 	.word	0x0800ad3d
 800ace0:	0800ad3d 	.word	0x0800ad3d
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad2d 	.word	0x0800ad2d
 800acec:	0800ad3d 	.word	0x0800ad3d
 800acf0:	0800ad3d 	.word	0x0800ad3d
 800acf4:	0800ad3d 	.word	0x0800ad3d
 800acf8:	0800ad3d 	.word	0x0800ad3d
 800acfc:	0800ad3d 	.word	0x0800ad3d
 800ad00:	0800ad3d 	.word	0x0800ad3d
 800ad04:	0800ad3d 	.word	0x0800ad3d
 800ad08:	0800ad35 	.word	0x0800ad35
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e0d6      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad14:	2304      	movs	r3, #4
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e0d2      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e0ce      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad24:	2310      	movs	r3, #16
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e0ca      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad2c:	2320      	movs	r3, #32
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e0c6      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad34:	2340      	movs	r3, #64	@ 0x40
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e0c2      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad3c:	2380      	movs	r3, #128	@ 0x80
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e0be      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ad44:	40011400 	.word	0x40011400
 800ad48:	58024400 	.word	0x58024400
 800ad4c:	40007800 	.word	0x40007800
 800ad50:	40007c00 	.word	0x40007c00
 800ad54:	40011800 	.word	0x40011800
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4aad      	ldr	r2, [pc, #692]	@ (800b014 <UART_SetConfig+0x900>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d176      	bne.n	800ae50 <UART_SetConfig+0x73c>
 800ad62:	4bad      	ldr	r3, [pc, #692]	@ (800b018 <UART_SetConfig+0x904>)
 800ad64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad6a:	2b28      	cmp	r3, #40	@ 0x28
 800ad6c:	d86c      	bhi.n	800ae48 <UART_SetConfig+0x734>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <UART_SetConfig+0x660>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ae19 	.word	0x0800ae19
 800ad78:	0800ae49 	.word	0x0800ae49
 800ad7c:	0800ae49 	.word	0x0800ae49
 800ad80:	0800ae49 	.word	0x0800ae49
 800ad84:	0800ae49 	.word	0x0800ae49
 800ad88:	0800ae49 	.word	0x0800ae49
 800ad8c:	0800ae49 	.word	0x0800ae49
 800ad90:	0800ae49 	.word	0x0800ae49
 800ad94:	0800ae21 	.word	0x0800ae21
 800ad98:	0800ae49 	.word	0x0800ae49
 800ad9c:	0800ae49 	.word	0x0800ae49
 800ada0:	0800ae49 	.word	0x0800ae49
 800ada4:	0800ae49 	.word	0x0800ae49
 800ada8:	0800ae49 	.word	0x0800ae49
 800adac:	0800ae49 	.word	0x0800ae49
 800adb0:	0800ae49 	.word	0x0800ae49
 800adb4:	0800ae29 	.word	0x0800ae29
 800adb8:	0800ae49 	.word	0x0800ae49
 800adbc:	0800ae49 	.word	0x0800ae49
 800adc0:	0800ae49 	.word	0x0800ae49
 800adc4:	0800ae49 	.word	0x0800ae49
 800adc8:	0800ae49 	.word	0x0800ae49
 800adcc:	0800ae49 	.word	0x0800ae49
 800add0:	0800ae49 	.word	0x0800ae49
 800add4:	0800ae31 	.word	0x0800ae31
 800add8:	0800ae49 	.word	0x0800ae49
 800addc:	0800ae49 	.word	0x0800ae49
 800ade0:	0800ae49 	.word	0x0800ae49
 800ade4:	0800ae49 	.word	0x0800ae49
 800ade8:	0800ae49 	.word	0x0800ae49
 800adec:	0800ae49 	.word	0x0800ae49
 800adf0:	0800ae49 	.word	0x0800ae49
 800adf4:	0800ae39 	.word	0x0800ae39
 800adf8:	0800ae49 	.word	0x0800ae49
 800adfc:	0800ae49 	.word	0x0800ae49
 800ae00:	0800ae49 	.word	0x0800ae49
 800ae04:	0800ae49 	.word	0x0800ae49
 800ae08:	0800ae49 	.word	0x0800ae49
 800ae0c:	0800ae49 	.word	0x0800ae49
 800ae10:	0800ae49 	.word	0x0800ae49
 800ae14:	0800ae41 	.word	0x0800ae41
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	e050      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae20:	2304      	movs	r3, #4
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae26:	e04c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae28:	2308      	movs	r3, #8
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2e:	e048      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae30:	2310      	movs	r3, #16
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae36:	e044      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae38:	2320      	movs	r3, #32
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	e040      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae40:	2340      	movs	r3, #64	@ 0x40
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae46:	e03c      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae48:	2380      	movs	r3, #128	@ 0x80
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e038      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a71      	ldr	r2, [pc, #452]	@ (800b01c <UART_SetConfig+0x908>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d130      	bne.n	800aebc <UART_SetConfig+0x7a8>
 800ae5a:	4b6f      	ldr	r3, [pc, #444]	@ (800b018 <UART_SetConfig+0x904>)
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d826      	bhi.n	800aeb4 <UART_SetConfig+0x7a0>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <UART_SetConfig+0x758>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800ae85 	.word	0x0800ae85
 800ae70:	0800ae8d 	.word	0x0800ae8d
 800ae74:	0800ae95 	.word	0x0800ae95
 800ae78:	0800ae9d 	.word	0x0800ae9d
 800ae7c:	0800aea5 	.word	0x0800aea5
 800ae80:	0800aead 	.word	0x0800aead
 800ae84:	2302      	movs	r3, #2
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8a:	e01a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae92:	e016      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae94:	2308      	movs	r3, #8
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9a:	e012      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea2:	e00e      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aea4:	2320      	movs	r3, #32
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeaa:	e00a      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aeac:	2340      	movs	r3, #64	@ 0x40
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e006      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aeb4:	2380      	movs	r3, #128	@ 0x80
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeba:	e002      	b.n	800aec2 <UART_SetConfig+0x7ae>
 800aebc:	2380      	movs	r3, #128	@ 0x80
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a55      	ldr	r2, [pc, #340]	@ (800b01c <UART_SetConfig+0x908>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	f040 80f8 	bne.w	800b0be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aece:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	dc46      	bgt.n	800af64 <UART_SetConfig+0x850>
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	db75      	blt.n	800afc6 <UART_SetConfig+0x8b2>
 800aeda:	3b02      	subs	r3, #2
 800aedc:	2b1e      	cmp	r3, #30
 800aede:	d872      	bhi.n	800afc6 <UART_SetConfig+0x8b2>
 800aee0:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <UART_SetConfig+0x7d4>)
 800aee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee6:	bf00      	nop
 800aee8:	0800af6b 	.word	0x0800af6b
 800aeec:	0800afc7 	.word	0x0800afc7
 800aef0:	0800af73 	.word	0x0800af73
 800aef4:	0800afc7 	.word	0x0800afc7
 800aef8:	0800afc7 	.word	0x0800afc7
 800aefc:	0800afc7 	.word	0x0800afc7
 800af00:	0800af83 	.word	0x0800af83
 800af04:	0800afc7 	.word	0x0800afc7
 800af08:	0800afc7 	.word	0x0800afc7
 800af0c:	0800afc7 	.word	0x0800afc7
 800af10:	0800afc7 	.word	0x0800afc7
 800af14:	0800afc7 	.word	0x0800afc7
 800af18:	0800afc7 	.word	0x0800afc7
 800af1c:	0800afc7 	.word	0x0800afc7
 800af20:	0800af93 	.word	0x0800af93
 800af24:	0800afc7 	.word	0x0800afc7
 800af28:	0800afc7 	.word	0x0800afc7
 800af2c:	0800afc7 	.word	0x0800afc7
 800af30:	0800afc7 	.word	0x0800afc7
 800af34:	0800afc7 	.word	0x0800afc7
 800af38:	0800afc7 	.word	0x0800afc7
 800af3c:	0800afc7 	.word	0x0800afc7
 800af40:	0800afc7 	.word	0x0800afc7
 800af44:	0800afc7 	.word	0x0800afc7
 800af48:	0800afc7 	.word	0x0800afc7
 800af4c:	0800afc7 	.word	0x0800afc7
 800af50:	0800afc7 	.word	0x0800afc7
 800af54:	0800afc7 	.word	0x0800afc7
 800af58:	0800afc7 	.word	0x0800afc7
 800af5c:	0800afc7 	.word	0x0800afc7
 800af60:	0800afb9 	.word	0x0800afb9
 800af64:	2b40      	cmp	r3, #64	@ 0x40
 800af66:	d02a      	beq.n	800afbe <UART_SetConfig+0x8aa>
 800af68:	e02d      	b.n	800afc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800af6a:	f7fd fbe5 	bl	8008738 <HAL_RCCEx_GetD3PCLK1Freq>
 800af6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af70:	e02f      	b.n	800afd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af76:	4618      	mov	r0, r3
 800af78:	f7fd fbf4 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e027      	b.n	800afd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af82:	f107 0318 	add.w	r3, r7, #24
 800af86:	4618      	mov	r0, r3
 800af88:	f7fd fd40 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af90:	e01f      	b.n	800afd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af92:	4b21      	ldr	r3, [pc, #132]	@ (800b018 <UART_SetConfig+0x904>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0320 	and.w	r3, r3, #32
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d009      	beq.n	800afb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af9e:	4b1e      	ldr	r3, [pc, #120]	@ (800b018 <UART_SetConfig+0x904>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	08db      	lsrs	r3, r3, #3
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	4a1d      	ldr	r2, [pc, #116]	@ (800b020 <UART_SetConfig+0x90c>)
 800afaa:	fa22 f303 	lsr.w	r3, r2, r3
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afb0:	e00f      	b.n	800afd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800afb2:	4b1b      	ldr	r3, [pc, #108]	@ (800b020 <UART_SetConfig+0x90c>)
 800afb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb6:	e00c      	b.n	800afd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afb8:	4b1a      	ldr	r3, [pc, #104]	@ (800b024 <UART_SetConfig+0x910>)
 800afba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afbc:	e009      	b.n	800afd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc4:	e005      	b.n	800afd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800afd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 81ee 	beq.w	800b3b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afde:	4a12      	ldr	r2, [pc, #72]	@ (800b028 <UART_SetConfig+0x914>)
 800afe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afe4:	461a      	mov	r2, r3
 800afe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800afec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800affa:	429a      	cmp	r2, r3
 800affc:	d305      	bcc.n	800b00a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b006:	429a      	cmp	r2, r3
 800b008:	d910      	bls.n	800b02c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b010:	e1d1      	b.n	800b3b6 <UART_SetConfig+0xca2>
 800b012:	bf00      	nop
 800b014:	40011c00 	.word	0x40011c00
 800b018:	58024400 	.word	0x58024400
 800b01c:	58000c00 	.word	0x58000c00
 800b020:	03d09000 	.word	0x03d09000
 800b024:	003d0900 	.word	0x003d0900
 800b028:	08022ca4 	.word	0x08022ca4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02e:	2200      	movs	r2, #0
 800b030:	60bb      	str	r3, [r7, #8]
 800b032:	60fa      	str	r2, [r7, #12]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b038:	4ac0      	ldr	r2, [pc, #768]	@ (800b33c <UART_SetConfig+0xc28>)
 800b03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2200      	movs	r2, #0
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	607a      	str	r2, [r7, #4]
 800b046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b04a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b04e:	f7f5 f9b7 	bl	80003c0 <__aeabi_uldivmod>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4610      	mov	r0, r2
 800b058:	4619      	mov	r1, r3
 800b05a:	f04f 0200 	mov.w	r2, #0
 800b05e:	f04f 0300 	mov.w	r3, #0
 800b062:	020b      	lsls	r3, r1, #8
 800b064:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b068:	0202      	lsls	r2, r0, #8
 800b06a:	6979      	ldr	r1, [r7, #20]
 800b06c:	6849      	ldr	r1, [r1, #4]
 800b06e:	0849      	lsrs	r1, r1, #1
 800b070:	2000      	movs	r0, #0
 800b072:	460c      	mov	r4, r1
 800b074:	4605      	mov	r5, r0
 800b076:	eb12 0804 	adds.w	r8, r2, r4
 800b07a:	eb43 0905 	adc.w	r9, r3, r5
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	469a      	mov	sl, r3
 800b086:	4693      	mov	fp, r2
 800b088:	4652      	mov	r2, sl
 800b08a:	465b      	mov	r3, fp
 800b08c:	4640      	mov	r0, r8
 800b08e:	4649      	mov	r1, r9
 800b090:	f7f5 f996 	bl	80003c0 <__aeabi_uldivmod>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4613      	mov	r3, r2
 800b09a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0a2:	d308      	bcc.n	800b0b6 <UART_SetConfig+0x9a2>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0aa:	d204      	bcs.n	800b0b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0b2:	60da      	str	r2, [r3, #12]
 800b0b4:	e17f      	b.n	800b3b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b0bc:	e17b      	b.n	800b3b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0c6:	f040 80bd 	bne.w	800b244 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b0ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	dc48      	bgt.n	800b164 <UART_SetConfig+0xa50>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	db7b      	blt.n	800b1ce <UART_SetConfig+0xaba>
 800b0d6:	2b20      	cmp	r3, #32
 800b0d8:	d879      	bhi.n	800b1ce <UART_SetConfig+0xaba>
 800b0da:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e0 <UART_SetConfig+0x9cc>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b16b 	.word	0x0800b16b
 800b0e4:	0800b173 	.word	0x0800b173
 800b0e8:	0800b1cf 	.word	0x0800b1cf
 800b0ec:	0800b1cf 	.word	0x0800b1cf
 800b0f0:	0800b17b 	.word	0x0800b17b
 800b0f4:	0800b1cf 	.word	0x0800b1cf
 800b0f8:	0800b1cf 	.word	0x0800b1cf
 800b0fc:	0800b1cf 	.word	0x0800b1cf
 800b100:	0800b18b 	.word	0x0800b18b
 800b104:	0800b1cf 	.word	0x0800b1cf
 800b108:	0800b1cf 	.word	0x0800b1cf
 800b10c:	0800b1cf 	.word	0x0800b1cf
 800b110:	0800b1cf 	.word	0x0800b1cf
 800b114:	0800b1cf 	.word	0x0800b1cf
 800b118:	0800b1cf 	.word	0x0800b1cf
 800b11c:	0800b1cf 	.word	0x0800b1cf
 800b120:	0800b19b 	.word	0x0800b19b
 800b124:	0800b1cf 	.word	0x0800b1cf
 800b128:	0800b1cf 	.word	0x0800b1cf
 800b12c:	0800b1cf 	.word	0x0800b1cf
 800b130:	0800b1cf 	.word	0x0800b1cf
 800b134:	0800b1cf 	.word	0x0800b1cf
 800b138:	0800b1cf 	.word	0x0800b1cf
 800b13c:	0800b1cf 	.word	0x0800b1cf
 800b140:	0800b1cf 	.word	0x0800b1cf
 800b144:	0800b1cf 	.word	0x0800b1cf
 800b148:	0800b1cf 	.word	0x0800b1cf
 800b14c:	0800b1cf 	.word	0x0800b1cf
 800b150:	0800b1cf 	.word	0x0800b1cf
 800b154:	0800b1cf 	.word	0x0800b1cf
 800b158:	0800b1cf 	.word	0x0800b1cf
 800b15c:	0800b1cf 	.word	0x0800b1cf
 800b160:	0800b1c1 	.word	0x0800b1c1
 800b164:	2b40      	cmp	r3, #64	@ 0x40
 800b166:	d02e      	beq.n	800b1c6 <UART_SetConfig+0xab2>
 800b168:	e031      	b.n	800b1ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b16a:	f7fb fc05 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 800b16e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b170:	e033      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b172:	f7fb fc17 	bl	80069a4 <HAL_RCC_GetPCLK2Freq>
 800b176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b178:	e02f      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b17a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fd faf0 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b188:	e027      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b18a:	f107 0318 	add.w	r3, r7, #24
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fd fc3c 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b198:	e01f      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b19a:	4b69      	ldr	r3, [pc, #420]	@ (800b340 <UART_SetConfig+0xc2c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d009      	beq.n	800b1ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1a6:	4b66      	ldr	r3, [pc, #408]	@ (800b340 <UART_SetConfig+0xc2c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	08db      	lsrs	r3, r3, #3
 800b1ac:	f003 0303 	and.w	r3, r3, #3
 800b1b0:	4a64      	ldr	r2, [pc, #400]	@ (800b344 <UART_SetConfig+0xc30>)
 800b1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1b8:	e00f      	b.n	800b1da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b1ba:	4b62      	ldr	r3, [pc, #392]	@ (800b344 <UART_SetConfig+0xc30>)
 800b1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1be:	e00c      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1c0:	4b61      	ldr	r3, [pc, #388]	@ (800b348 <UART_SetConfig+0xc34>)
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c4:	e009      	b.n	800b1da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1cc:	e005      	b.n	800b1da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b1d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 80ea 	beq.w	800b3b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e6:	4a55      	ldr	r2, [pc, #340]	@ (800b33c <UART_SetConfig+0xc28>)
 800b1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1f4:	005a      	lsls	r2, r3, #1
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	441a      	add	r2, r3
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	fbb2 f3f3 	udiv	r3, r2, r3
 800b206:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20a:	2b0f      	cmp	r3, #15
 800b20c:	d916      	bls.n	800b23c <UART_SetConfig+0xb28>
 800b20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b214:	d212      	bcs.n	800b23c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	b29b      	uxth	r3, r3
 800b21a:	f023 030f 	bic.w	r3, r3, #15
 800b21e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b222:	085b      	lsrs	r3, r3, #1
 800b224:	b29b      	uxth	r3, r3
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b22e:	4313      	orrs	r3, r2
 800b230:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b238:	60da      	str	r2, [r3, #12]
 800b23a:	e0bc      	b.n	800b3b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b242:	e0b8      	b.n	800b3b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b244:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b248:	2b20      	cmp	r3, #32
 800b24a:	dc4b      	bgt.n	800b2e4 <UART_SetConfig+0xbd0>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f2c0 8087 	blt.w	800b360 <UART_SetConfig+0xc4c>
 800b252:	2b20      	cmp	r3, #32
 800b254:	f200 8084 	bhi.w	800b360 <UART_SetConfig+0xc4c>
 800b258:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <UART_SetConfig+0xb4c>)
 800b25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25e:	bf00      	nop
 800b260:	0800b2eb 	.word	0x0800b2eb
 800b264:	0800b2f3 	.word	0x0800b2f3
 800b268:	0800b361 	.word	0x0800b361
 800b26c:	0800b361 	.word	0x0800b361
 800b270:	0800b2fb 	.word	0x0800b2fb
 800b274:	0800b361 	.word	0x0800b361
 800b278:	0800b361 	.word	0x0800b361
 800b27c:	0800b361 	.word	0x0800b361
 800b280:	0800b30b 	.word	0x0800b30b
 800b284:	0800b361 	.word	0x0800b361
 800b288:	0800b361 	.word	0x0800b361
 800b28c:	0800b361 	.word	0x0800b361
 800b290:	0800b361 	.word	0x0800b361
 800b294:	0800b361 	.word	0x0800b361
 800b298:	0800b361 	.word	0x0800b361
 800b29c:	0800b361 	.word	0x0800b361
 800b2a0:	0800b31b 	.word	0x0800b31b
 800b2a4:	0800b361 	.word	0x0800b361
 800b2a8:	0800b361 	.word	0x0800b361
 800b2ac:	0800b361 	.word	0x0800b361
 800b2b0:	0800b361 	.word	0x0800b361
 800b2b4:	0800b361 	.word	0x0800b361
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b361 	.word	0x0800b361
 800b2c0:	0800b361 	.word	0x0800b361
 800b2c4:	0800b361 	.word	0x0800b361
 800b2c8:	0800b361 	.word	0x0800b361
 800b2cc:	0800b361 	.word	0x0800b361
 800b2d0:	0800b361 	.word	0x0800b361
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b361 	.word	0x0800b361
 800b2dc:	0800b361 	.word	0x0800b361
 800b2e0:	0800b353 	.word	0x0800b353
 800b2e4:	2b40      	cmp	r3, #64	@ 0x40
 800b2e6:	d037      	beq.n	800b358 <UART_SetConfig+0xc44>
 800b2e8:	e03a      	b.n	800b360 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ea:	f7fb fb45 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 800b2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e03c      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f2:	f7fb fb57 	bl	80069a4 <HAL_RCC_GetPCLK2Freq>
 800b2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b2f8:	e038      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fd fa30 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b308:	e030      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b30a:	f107 0318 	add.w	r3, r7, #24
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fb7c 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b318:	e028      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b31a:	4b09      	ldr	r3, [pc, #36]	@ (800b340 <UART_SetConfig+0xc2c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	d012      	beq.n	800b34c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <UART_SetConfig+0xc2c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	08db      	lsrs	r3, r3, #3
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	4a04      	ldr	r2, [pc, #16]	@ (800b344 <UART_SetConfig+0xc30>)
 800b332:	fa22 f303 	lsr.w	r3, r2, r3
 800b336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b338:	e018      	b.n	800b36c <UART_SetConfig+0xc58>
 800b33a:	bf00      	nop
 800b33c:	08022ca4 	.word	0x08022ca4
 800b340:	58024400 	.word	0x58024400
 800b344:	03d09000 	.word	0x03d09000
 800b348:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b34c:	4b24      	ldr	r3, [pc, #144]	@ (800b3e0 <UART_SetConfig+0xccc>)
 800b34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b350:	e00c      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b352:	4b24      	ldr	r3, [pc, #144]	@ (800b3e4 <UART_SetConfig+0xcd0>)
 800b354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b356:	e009      	b.n	800b36c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b35e:	e005      	b.n	800b36c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b360:	2300      	movs	r3, #0
 800b362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b36a:	bf00      	nop
    }

    if (pclk != 0U)
 800b36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d021      	beq.n	800b3b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	4a1c      	ldr	r2, [pc, #112]	@ (800b3e8 <UART_SetConfig+0xcd4>)
 800b378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b37c:	461a      	mov	r2, r3
 800b37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b380:	fbb3 f2f2 	udiv	r2, r3, r2
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	085b      	lsrs	r3, r3, #1
 800b38a:	441a      	add	r2, r3
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	fbb2 f3f3 	udiv	r3, r2, r3
 800b394:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	d909      	bls.n	800b3b0 <UART_SetConfig+0xc9c>
 800b39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3a2:	d205      	bcs.n	800b3b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60da      	str	r2, [r3, #12]
 800b3ae:	e002      	b.n	800b3b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3748      	adds	r7, #72	@ 0x48
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3e0:	03d09000 	.word	0x03d09000
 800b3e4:	003d0900 	.word	0x003d0900
 800b3e8:	08022ca4 	.word	0x08022ca4

0800b3ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f8:	f003 0308 	and.w	r3, r3, #8
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01a      	beq.n	800b502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4ea:	d10a      	bne.n	800b502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b098      	sub	sp, #96	@ 0x60
 800b534:	af02      	add	r7, sp, #8
 800b536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b540:	f7f6 fbda 	bl	8001cf8 <HAL_GetTick>
 800b544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0308 	and.w	r3, r3, #8
 800b550:	2b08      	cmp	r3, #8
 800b552:	d12f      	bne.n	800b5b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b55c:	2200      	movs	r2, #0
 800b55e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f88e 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d022      	beq.n	800b5b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	e853 3f00 	ldrex	r3, [r3]
 800b57a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b582:	653b      	str	r3, [r7, #80]	@ 0x50
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b58e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b594:	e841 2300 	strex	r3, r2, [r1]
 800b598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e6      	bne.n	800b56e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2220      	movs	r2, #32
 800b5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e063      	b.n	800b67c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0304 	and.w	r3, r3, #4
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d149      	bne.n	800b656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f857 	bl	800b684 <UART_WaitOnFlagUntilTimeout>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d03c      	beq.n	800b656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e6      	bne.n	800b5dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3308      	adds	r3, #8
 800b614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3308      	adds	r3, #8
 800b62c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b62e:	61fa      	str	r2, [r7, #28]
 800b630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	69b9      	ldr	r1, [r7, #24]
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	617b      	str	r3, [r7, #20]
   return(result);
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e5      	bne.n	800b60e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e012      	b.n	800b67c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3758      	adds	r7, #88	@ 0x58
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	4613      	mov	r3, r2
 800b692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b694:	e04f      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69c:	d04b      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b69e:	f7f6 fb2b 	bl	8001cf8 <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d302      	bcc.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e04e      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0304 	and.w	r3, r3, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d037      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b80      	cmp	r3, #128	@ 0x80
 800b6ca:	d034      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2b40      	cmp	r3, #64	@ 0x40
 800b6d0:	d031      	beq.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d110      	bne.n	800b702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2208      	movs	r2, #8
 800b6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f839 	bl	800b760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e029      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b70c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b710:	d111      	bne.n	800b736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b71a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f81f 	bl	800b760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e00f      	b.n	800b756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4013      	ands	r3, r2
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	bf0c      	ite	eq
 800b746:	2301      	moveq	r3, #1
 800b748:	2300      	movne	r3, #0
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	429a      	cmp	r2, r3
 800b752:	d0a0      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b760:	b480      	push	{r7}
 800b762:	b095      	sub	sp, #84	@ 0x54
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b786:	643b      	str	r3, [r7, #64]	@ 0x40
 800b788:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b78c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e6      	bne.n	800b768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3308      	adds	r3, #8
 800b7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7aa:	69fa      	ldr	r2, [r7, #28]
 800b7ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b828 <UART_EndRxTransfer+0xc8>)
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e5      	bne.n	800b79a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d118      	bne.n	800b808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f023 0310 	bic.w	r3, r3, #16
 800b7ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	613b      	str	r3, [r7, #16]
   return(result);
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e6      	bne.n	800b7d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b81c:	bf00      	nop
 800b81e:	3754      	adds	r7, #84	@ 0x54
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	effffffe 	.word	0xeffffffe

0800b82c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b08f      	sub	sp, #60	@ 0x3c
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b83a:	2b21      	cmp	r3, #33	@ 0x21
 800b83c:	d14c      	bne.n	800b8d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b844:	b29b      	uxth	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d132      	bne.n	800b8b0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	61fb      	str	r3, [r7, #28]
   return(result);
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b86a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b86e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e6      	bne.n	800b84a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	60bb      	str	r3, [r7, #8]
   return(result);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b890:	633b      	str	r3, [r7, #48]	@ 0x30
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89a:	61bb      	str	r3, [r7, #24]
 800b89c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6979      	ldr	r1, [r7, #20]
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e6      	bne.n	800b87c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b8ae:	e013      	b.n	800b8d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b8d8:	bf00      	nop
 800b8da:	373c      	adds	r7, #60	@ 0x3c
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b091      	sub	sp, #68	@ 0x44
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8f2:	2b21      	cmp	r3, #33	@ 0x21
 800b8f4:	d151      	bne.n	800b99a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d132      	bne.n	800b968 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	623b      	str	r3, [r7, #32]
   return(result);
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b916:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	461a      	mov	r2, r3
 800b91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b920:	633b      	str	r3, [r7, #48]	@ 0x30
 800b922:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e6      	bne.n	800b902 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	e853 3f00 	ldrex	r3, [r3]
 800b940:	60fb      	str	r3, [r7, #12]
   return(result);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b948:	637b      	str	r3, [r7, #52]	@ 0x34
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	69b9      	ldr	r1, [r7, #24]
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	617b      	str	r3, [r7, #20]
   return(result);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e6      	bne.n	800b934 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b966:	e018      	b.n	800b99a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b97c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b982:	1c9a      	adds	r2, r3, #2
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b98e:	b29b      	uxth	r3, r3
 800b990:	3b01      	subs	r3, #1
 800b992:	b29a      	uxth	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800b99a:	bf00      	nop
 800b99c:	3744      	adds	r7, #68	@ 0x44
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b091      	sub	sp, #68	@ 0x44
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9b4:	2b21      	cmp	r3, #33	@ 0x21
 800b9b6:	d160      	bne.n	800ba7a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b9c0:	e057      	b.n	800ba72 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d133      	bne.n	800ba36 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e5      	bne.n	800b9ce <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	69b9      	ldr	r1, [r7, #24]
 800ba26:	69fa      	ldr	r2, [r7, #28]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ba34:	e021      	b.n	800ba7a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69db      	ldr	r3, [r3, #28]
 800ba3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d013      	beq.n	800ba6c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba48:	781a      	ldrb	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ba72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1a4      	bne.n	800b9c2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba78:	e7ff      	b.n	800ba7a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ba7a:	bf00      	nop
 800ba7c:	3744      	adds	r7, #68	@ 0x44
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b091      	sub	sp, #68	@ 0x44
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba94:	2b21      	cmp	r3, #33	@ 0x21
 800ba96:	d165      	bne.n	800bb64 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800baa0:	e05c      	b.n	800bb5c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d133      	bne.n	800bb16 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3308      	adds	r3, #8
 800bab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	e853 3f00 	ldrex	r3, [r3]
 800babc:	61fb      	str	r3, [r7, #28]
   return(result);
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3308      	adds	r3, #8
 800bacc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bad6:	e841 2300 	strex	r3, r2, [r1]
 800bada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1e5      	bne.n	800baae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	e853 3f00 	ldrex	r3, [r3]
 800baee:	60bb      	str	r3, [r7, #8]
   return(result);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	461a      	mov	r2, r3
 800bafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb00:	61bb      	str	r3, [r7, #24]
 800bb02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb04:	6979      	ldr	r1, [r7, #20]
 800bb06:	69ba      	ldr	r2, [r7, #24]
 800bb08:	e841 2300 	strex	r3, r2, [r1]
 800bb0c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1e6      	bne.n	800bae2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bb14:	e026      	b.n	800bb64 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d018      	beq.n	800bb56 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb28:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb38:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb3e:	1c9a      	adds	r2, r3, #2
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bb5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d19f      	bne.n	800baa2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bb62:	e7ff      	b.n	800bb64 <UART_TxISR_16BIT_FIFOEN+0xde>
 800bb64:	bf00      	nop
 800bb66:	3744      	adds	r7, #68	@ 0x44
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d101      	bne.n	800bb86 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb82:	2302      	movs	r3, #2
 800bb84:	e027      	b.n	800bbd6 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2224      	movs	r2, #36	@ 0x24
 800bb92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bbb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d101      	bne.n	800bbfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e02d      	b.n	800bc56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2224      	movs	r2, #36	@ 0x24
 800bc06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0201 	bic.w	r2, r2, #1
 800bc20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f850 	bl	800bcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e02d      	b.n	800bcd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2224      	movs	r2, #36	@ 0x24
 800bc82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0201 	bic.w	r2, r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f812 	bl	800bcdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
	...

0800bcdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d108      	bne.n	800bcfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcfc:	e031      	b.n	800bd62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcfe:	2310      	movs	r3, #16
 800bd00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd02:	2310      	movs	r3, #16
 800bd04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	0e5b      	lsrs	r3, r3, #25
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 0307 	and.w	r3, r3, #7
 800bd14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	0f5b      	lsrs	r3, r3, #29
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd26:	7bbb      	ldrb	r3, [r7, #14]
 800bd28:	7b3a      	ldrb	r2, [r7, #12]
 800bd2a:	4911      	ldr	r1, [pc, #68]	@ (800bd70 <UARTEx_SetNbDataToProcess+0x94>)
 800bd2c:	5c8a      	ldrb	r2, [r1, r2]
 800bd2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd32:	7b3a      	ldrb	r2, [r7, #12]
 800bd34:	490f      	ldr	r1, [pc, #60]	@ (800bd74 <UARTEx_SetNbDataToProcess+0x98>)
 800bd36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	7b7a      	ldrb	r2, [r7, #13]
 800bd48:	4909      	ldr	r1, [pc, #36]	@ (800bd70 <UARTEx_SetNbDataToProcess+0x94>)
 800bd4a:	5c8a      	ldrb	r2, [r1, r2]
 800bd4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd50:	7b7a      	ldrb	r2, [r7, #13]
 800bd52:	4908      	ldr	r1, [pc, #32]	@ (800bd74 <UARTEx_SetNbDataToProcess+0x98>)
 800bd54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd56:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd62:	bf00      	nop
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	08022cbc 	.word	0x08022cbc
 800bd74:	08022cc4 	.word	0x08022cc4

0800bd78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bd7e:	2100      	movs	r1, #0
 800bd80:	2000      	movs	r0, #0
 800bd82:	f004 fe49 	bl	8010a18 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bd86:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf8 <MX_LWIP_Init+0x80>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bd8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bdfc <MX_LWIP_Init+0x84>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bd92:	4b1b      	ldr	r3, [pc, #108]	@ (800be00 <MX_LWIP_Init+0x88>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bd98:	4b1a      	ldr	r3, [pc, #104]	@ (800be04 <MX_LWIP_Init+0x8c>)
 800bd9a:	9302      	str	r3, [sp, #8]
 800bd9c:	4b1a      	ldr	r3, [pc, #104]	@ (800be08 <MX_LWIP_Init+0x90>)
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	2300      	movs	r3, #0
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	4b16      	ldr	r3, [pc, #88]	@ (800be00 <MX_LWIP_Init+0x88>)
 800bda6:	4a15      	ldr	r2, [pc, #84]	@ (800bdfc <MX_LWIP_Init+0x84>)
 800bda8:	4913      	ldr	r1, [pc, #76]	@ (800bdf8 <MX_LWIP_Init+0x80>)
 800bdaa:	4818      	ldr	r0, [pc, #96]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bdac:	f005 fcb6 	bl	801171c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bdb0:	4816      	ldr	r0, [pc, #88]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bdb2:	f005 fe6d 	bl	8011a90 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bdb6:	4815      	ldr	r0, [pc, #84]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bdb8:	f005 fe7a 	bl	8011ab0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bdbc:	4914      	ldr	r1, [pc, #80]	@ (800be10 <MX_LWIP_Init+0x98>)
 800bdbe:	4813      	ldr	r0, [pc, #76]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bdc0:	f005 ff7c 	bl	8011cbc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bdc4:	2224      	movs	r2, #36	@ 0x24
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4812      	ldr	r0, [pc, #72]	@ (800be14 <MX_LWIP_Init+0x9c>)
 800bdca:	f011 fec9 	bl	801db60 <memset>
  attributes.name = "EthLink";
 800bdce:	4b11      	ldr	r3, [pc, #68]	@ (800be14 <MX_LWIP_Init+0x9c>)
 800bdd0:	4a11      	ldr	r2, [pc, #68]	@ (800be18 <MX_LWIP_Init+0xa0>)
 800bdd2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <MX_LWIP_Init+0x9c>)
 800bdd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bdda:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bddc:	4b0d      	ldr	r3, [pc, #52]	@ (800be14 <MX_LWIP_Init+0x9c>)
 800bdde:	2210      	movs	r2, #16
 800bde0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bde2:	4a0c      	ldr	r2, [pc, #48]	@ (800be14 <MX_LWIP_Init+0x9c>)
 800bde4:	4909      	ldr	r1, [pc, #36]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bde6:	480d      	ldr	r0, [pc, #52]	@ (800be1c <MX_LWIP_Init+0xa4>)
 800bde8:	f000 fd9d 	bl	800c926 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bdec:	4807      	ldr	r0, [pc, #28]	@ (800be0c <MX_LWIP_Init+0x94>)
 800bdee:	f00d f8c9 	bl	8018f84 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bdf2:	bf00      	nop
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	24004fd4 	.word	0x24004fd4
 800bdfc:	24004fd8 	.word	0x24004fd8
 800be00:	24004fdc 	.word	0x24004fdc
 800be04:	08010955 	.word	0x08010955
 800be08:	0800c299 	.word	0x0800c299
 800be0c:	24004f9c 	.word	0x24004f9c
 800be10:	0800be21 	.word	0x0800be21
 800be14:	24004fe0 	.word	0x24004fe0
 800be18:	0801fd64 	.word	0x0801fd64
 800be1c:	0800c57d 	.word	0x0800c57d

0800be20 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b0aa      	sub	sp, #168	@ 0xa8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800be4e:	f107 0310 	add.w	r3, r7, #16
 800be52:	2264      	movs	r2, #100	@ 0x64
 800be54:	2100      	movs	r1, #0
 800be56:	4618      	mov	r0, r3
 800be58:	f011 fe82 	bl	801db60 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800be5c:	4b89      	ldr	r3, [pc, #548]	@ (800c084 <low_level_init+0x250>)
 800be5e:	4a8a      	ldr	r2, [pc, #552]	@ (800c088 <low_level_init+0x254>)
 800be60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800be62:	2300      	movs	r3, #0
 800be64:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800be66:	2380      	movs	r3, #128	@ 0x80
 800be68:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800be6a:	23e1      	movs	r3, #225	@ 0xe1
 800be6c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800be6e:	2300      	movs	r3, #0
 800be70:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800be72:	2300      	movs	r3, #0
 800be74:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800be76:	2300      	movs	r3, #0
 800be78:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800be7a:	4a82      	ldr	r2, [pc, #520]	@ (800c084 <low_level_init+0x250>)
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800be82:	4b80      	ldr	r3, [pc, #512]	@ (800c084 <low_level_init+0x250>)
 800be84:	2201      	movs	r2, #1
 800be86:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800be88:	4b7e      	ldr	r3, [pc, #504]	@ (800c084 <low_level_init+0x250>)
 800be8a:	4a80      	ldr	r2, [pc, #512]	@ (800c08c <low_level_init+0x258>)
 800be8c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800be8e:	4b7d      	ldr	r3, [pc, #500]	@ (800c084 <low_level_init+0x250>)
 800be90:	4a7f      	ldr	r2, [pc, #508]	@ (800c090 <low_level_init+0x25c>)
 800be92:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800be94:	4b7b      	ldr	r3, [pc, #492]	@ (800c084 <low_level_init+0x250>)
 800be96:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800be9a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800be9c:	4879      	ldr	r0, [pc, #484]	@ (800c084 <low_level_init+0x250>)
 800be9e:	f7f7 ffeb 	bl	8003e78 <HAL_ETH_Init>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bea8:	2238      	movs	r2, #56	@ 0x38
 800beaa:	2100      	movs	r1, #0
 800beac:	4879      	ldr	r0, [pc, #484]	@ (800c094 <low_level_init+0x260>)
 800beae:	f011 fe57 	bl	801db60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800beb2:	4b78      	ldr	r3, [pc, #480]	@ (800c094 <low_level_init+0x260>)
 800beb4:	2221      	movs	r2, #33	@ 0x21
 800beb6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800beb8:	4b76      	ldr	r3, [pc, #472]	@ (800c094 <low_level_init+0x260>)
 800beba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800bebe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bec0:	4b74      	ldr	r3, [pc, #464]	@ (800c094 <low_level_init+0x260>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bec6:	4874      	ldr	r0, [pc, #464]	@ (800c098 <low_level_init+0x264>)
 800bec8:	f005 fae2 	bl	8011490 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2206      	movs	r2, #6
 800bed0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bed4:	4b6b      	ldr	r3, [pc, #428]	@ (800c084 <low_level_init+0x250>)
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bee0:	4b68      	ldr	r3, [pc, #416]	@ (800c084 <low_level_init+0x250>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	785a      	ldrb	r2, [r3, #1]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800beec:	4b65      	ldr	r3, [pc, #404]	@ (800c084 <low_level_init+0x250>)
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	789a      	ldrb	r2, [r3, #2]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bef8:	4b62      	ldr	r3, [pc, #392]	@ (800c084 <low_level_init+0x250>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	78da      	ldrb	r2, [r3, #3]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf04:	4b5f      	ldr	r3, [pc, #380]	@ (800c084 <low_level_init+0x250>)
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	791a      	ldrb	r2, [r3, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf10:	4b5c      	ldr	r3, [pc, #368]	@ (800c084 <low_level_init+0x250>)
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	795a      	ldrb	r2, [r3, #5]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bf22:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf2a:	f043 030a 	orr.w	r3, r3, #10
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bf36:	2200      	movs	r2, #0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	f000 ff40 	bl	800cdc0 <osSemaphoreNew>
 800bf40:	4603      	mov	r3, r0
 800bf42:	4a56      	ldr	r2, [pc, #344]	@ (800c09c <low_level_init+0x268>)
 800bf44:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bf46:	2200      	movs	r2, #0
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	f000 ff38 	bl	800cdc0 <osSemaphoreNew>
 800bf50:	4603      	mov	r3, r0
 800bf52:	4a53      	ldr	r2, [pc, #332]	@ (800c0a0 <low_level_init+0x26c>)
 800bf54:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bf56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bf5a:	2224      	movs	r2, #36	@ 0x24
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f011 fdfe 	bl	801db60 <memset>
  attributes.name = "EthIf";
 800bf64:	4b4f      	ldr	r3, [pc, #316]	@ (800c0a4 <low_level_init+0x270>)
 800bf66:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bf68:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800bf6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bf70:	2330      	movs	r3, #48	@ 0x30
 800bf72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bf76:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	484a      	ldr	r0, [pc, #296]	@ (800c0a8 <low_level_init+0x274>)
 800bf80:	f000 fcd1 	bl	800c926 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bf84:	4949      	ldr	r1, [pc, #292]	@ (800c0ac <low_level_init+0x278>)
 800bf86:	484a      	ldr	r0, [pc, #296]	@ (800c0b0 <low_level_init+0x27c>)
 800bf88:	f7f5 fd5f 	bl	8001a4a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bf8c:	4848      	ldr	r0, [pc, #288]	@ (800c0b0 <low_level_init+0x27c>)
 800bf8e:	f7f5 fd8e 	bl	8001aae <LAN8742_Init>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d006      	beq.n	800bfa6 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f005 fe5f 	bl	8011c5c <netif_set_link_down>
    netif_set_down(netif);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f005 fdf2 	bl	8011b88 <netif_set_down>
 800bfa4:	e06b      	b.n	800c07e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bfa6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d165      	bne.n	800c07a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bfae:	4840      	ldr	r0, [pc, #256]	@ (800c0b0 <low_level_init+0x27c>)
 800bfb0:	f7f5 fdca 	bl	8001b48 <LAN8742_GetLinkState>
 800bfb4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bfb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	dc06      	bgt.n	800bfce <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f005 fe4b 	bl	8011c5c <netif_set_link_down>
      netif_set_down(netif);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f005 fdde 	bl	8011b88 <netif_set_down>
 800bfcc:	e057      	b.n	800c07e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bfce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfd2:	3b02      	subs	r3, #2
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d82b      	bhi.n	800c030 <low_level_init+0x1fc>
 800bfd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe0 <low_level_init+0x1ac>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800bff1 	.word	0x0800bff1
 800bfe4:	0800c003 	.word	0x0800c003
 800bfe8:	0800c013 	.word	0x0800c013
 800bfec:	0800c023 	.word	0x0800c023
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bff0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bff8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bffc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c000:	e01f      	b.n	800c042 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c002:	2300      	movs	r3, #0
 800c004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c00c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c010:	e017      	b.n	800c042 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c020:	e00f      	b.n	800c042 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c022:	2300      	movs	r3, #0
 800c024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c02e:	e008      	b.n	800c042 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c038:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c03c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c040:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c042:	f107 0310 	add.w	r3, r7, #16
 800c046:	4619      	mov	r1, r3
 800c048:	480e      	ldr	r0, [pc, #56]	@ (800c084 <low_level_init+0x250>)
 800c04a:	f7f8 fb91 	bl	8004770 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c04e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c052:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c05a:	f107 0310 	add.w	r3, r7, #16
 800c05e:	4619      	mov	r1, r3
 800c060:	4808      	ldr	r0, [pc, #32]	@ (800c084 <low_level_init+0x250>)
 800c062:	f7f8 fd59 	bl	8004b18 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c066:	4807      	ldr	r0, [pc, #28]	@ (800c084 <low_level_init+0x250>)
 800c068:	f7f8 f804 	bl	8004074 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f005 fd1f 	bl	8011ab0 <netif_set_up>
    netif_set_link_up(netif);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f005 fdba 	bl	8011bec <netif_set_link_up>
 800c078:	e001      	b.n	800c07e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c07a:	f7f5 f8a3 	bl	80011c4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c07e:	37a8      	adds	r7, #168	@ 0xa8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	24005014 	.word	0x24005014
 800c088:	40028000 	.word	0x40028000
 800c08c:	24004be4 	.word	0x24004be4
 800c090:	24004b84 	.word	0x24004b84
 800c094:	240050c4 	.word	0x240050c4
 800c098:	08022ccc 	.word	0x08022ccc
 800c09c:	2400500c 	.word	0x2400500c
 800c0a0:	24005010 	.word	0x24005010
 800c0a4:	0801fd6c 	.word	0x0801fd6c
 800c0a8:	0800c245 	.word	0x0800c245
 800c0ac:	24000010 	.word	0x24000010
 800c0b0:	240050fc 	.word	0x240050fc

0800c0b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b092      	sub	sp, #72	@ 0x48
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c0cc:	f107 030c 	add.w	r3, r7, #12
 800c0d0:	2230      	movs	r2, #48	@ 0x30
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f011 fd43 	bl	801db60 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c0da:	f107 030c 	add.w	r3, r7, #12
 800c0de:	2230      	movs	r2, #48	@ 0x30
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f011 fd3c 	bl	801db60 <memset>

  for(q = p; q != NULL; q = q->next)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0ec:	e045      	b.n	800c17a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c0ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d902      	bls.n	800c0fa <low_level_output+0x46>
      return ERR_IF;
 800c0f4:	f06f 030b 	mvn.w	r3, #11
 800c0f8:	e07f      	b.n	800c1fa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c0fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0fc:	6859      	ldr	r1, [r3, #4]
 800c0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c100:	4613      	mov	r3, r2
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	3348      	adds	r3, #72	@ 0x48
 800c10a:	443b      	add	r3, r7
 800c10c:	3b3c      	subs	r3, #60	@ 0x3c
 800c10e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c112:	895b      	ldrh	r3, [r3, #10]
 800c114:	4619      	mov	r1, r3
 800c116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c118:	4613      	mov	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	3348      	adds	r3, #72	@ 0x48
 800c122:	443b      	add	r3, r7
 800c124:	3b38      	subs	r3, #56	@ 0x38
 800c126:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d011      	beq.n	800c152 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c130:	1e5a      	subs	r2, r3, #1
 800c132:	f107 000c 	add.w	r0, r7, #12
 800c136:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c138:	460b      	mov	r3, r1
 800c13a:	005b      	lsls	r3, r3, #1
 800c13c:	440b      	add	r3, r1
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	18c1      	adds	r1, r0, r3
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	3348      	adds	r3, #72	@ 0x48
 800c14c:	443b      	add	r3, r7
 800c14e:	3b34      	subs	r3, #52	@ 0x34
 800c150:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d109      	bne.n	800c16e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c15c:	4613      	mov	r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	3348      	adds	r3, #72	@ 0x48
 800c166:	443b      	add	r3, r7
 800c168:	3b34      	subs	r3, #52	@ 0x34
 800c16a:	2200      	movs	r2, #0
 800c16c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c16e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c170:	3301      	adds	r3, #1
 800c172:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	643b      	str	r3, [r7, #64]	@ 0x40
 800c17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1b6      	bne.n	800c0ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	891b      	ldrh	r3, [r3, #8]
 800c184:	461a      	mov	r2, r3
 800c186:	4b1f      	ldr	r3, [pc, #124]	@ (800c204 <low_level_output+0x150>)
 800c188:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c18a:	4a1e      	ldr	r2, [pc, #120]	@ (800c204 <low_level_output+0x150>)
 800c18c:	f107 030c 	add.w	r3, r7, #12
 800c190:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c192:	4a1c      	ldr	r2, [pc, #112]	@ (800c204 <low_level_output+0x150>)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c198:	6838      	ldr	r0, [r7, #0]
 800c19a:	f006 f9e3 	bl	8012564 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c19e:	4919      	ldr	r1, [pc, #100]	@ (800c204 <low_level_output+0x150>)
 800c1a0:	4819      	ldr	r0, [pc, #100]	@ (800c208 <low_level_output+0x154>)
 800c1a2:	f7f8 f853 	bl	800424c <HAL_ETH_Transmit_IT>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d103      	bne.n	800c1b4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c1b2:	e01b      	b.n	800c1ec <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c1b4:	4814      	ldr	r0, [pc, #80]	@ (800c208 <low_level_output+0x154>)
 800c1b6:	f7f8 fd19 	bl	8004bec <HAL_ETH_GetError>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00d      	beq.n	800c1e0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c1c4:	4b11      	ldr	r3, [pc, #68]	@ (800c20c <low_level_output+0x158>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fe81 	bl	800ced4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c1d2:	480d      	ldr	r0, [pc, #52]	@ (800c208 <low_level_output+0x154>)
 800c1d4:	f7f8 f9c1 	bl	800455a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c1d8:	23fe      	movs	r3, #254	@ 0xfe
 800c1da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c1de:	e005      	b.n	800c1ec <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c1e0:	6838      	ldr	r0, [r7, #0]
 800c1e2:	f006 f919 	bl	8012418 <pbuf_free>
        errval =  ERR_IF;
 800c1e6:	23f4      	movs	r3, #244	@ 0xf4
 800c1e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c1ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c1f0:	f113 0f02 	cmn.w	r3, #2
 800c1f4:	d0d3      	beq.n	800c19e <low_level_output+0xea>

  return errval;
 800c1f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3748      	adds	r7, #72	@ 0x48
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	240050c4 	.word	0x240050c4
 800c208:	24005014 	.word	0x24005014
 800c20c:	24005010 	.word	0x24005010

0800c210 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c21c:	4b07      	ldr	r3, [pc, #28]	@ (800c23c <low_level_input+0x2c>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d105      	bne.n	800c230 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c224:	f107 030c 	add.w	r3, r7, #12
 800c228:	4619      	mov	r1, r3
 800c22a:	4805      	ldr	r0, [pc, #20]	@ (800c240 <low_level_input+0x30>)
 800c22c:	f7f8 f85f 	bl	80042ee <HAL_ETH_ReadData>
  }

  return p;
 800c230:	68fb      	ldr	r3, [r7, #12]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	24005008 	.word	0x24005008
 800c240:	24005014 	.word	0x24005014

0800c244 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c254:	4b0f      	ldr	r3, [pc, #60]	@ (800c294 <ethernetif_input+0x50>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f04f 31ff 	mov.w	r1, #4294967295
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fe39 	bl	800ced4 <osSemaphoreAcquire>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1f5      	bne.n	800c254 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c268:	68b8      	ldr	r0, [r7, #8]
 800c26a:	f7ff ffd1 	bl	800c210 <low_level_input>
 800c26e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	4798      	blx	r3
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f006 f8c6 	bl	8012418 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1ea      	bne.n	800c268 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c292:	e7df      	b.n	800c254 <ethernetif_input+0x10>
 800c294:	2400500c 	.word	0x2400500c

0800c298 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d106      	bne.n	800c2b4 <ethernetif_init+0x1c>
 800c2a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c2e0 <ethernetif_init+0x48>)
 800c2a8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c2ac:	490d      	ldr	r1, [pc, #52]	@ (800c2e4 <ethernetif_init+0x4c>)
 800c2ae:	480e      	ldr	r0, [pc, #56]	@ (800c2e8 <ethernetif_init+0x50>)
 800c2b0:	f011 fab0 	bl	801d814 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2273      	movs	r2, #115	@ 0x73
 800c2b8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2274      	movs	r2, #116	@ 0x74
 800c2c0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a09      	ldr	r2, [pc, #36]	@ (800c2ec <ethernetif_init+0x54>)
 800c2c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a08      	ldr	r2, [pc, #32]	@ (800c2f0 <ethernetif_init+0x58>)
 800c2ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff fdaf 	bl	800be34 <low_level_init>

  return ERR_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	0801fd74 	.word	0x0801fd74
 800c2e4:	0801fd90 	.word	0x0801fd90
 800c2e8:	0801fda0 	.word	0x0801fda0
 800c2ec:	0801ae45 	.word	0x0801ae45
 800c2f0:	0800c0b5 	.word	0x0800c0b5

0800c2f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c300:	68f9      	ldr	r1, [r7, #12]
 800c302:	4809      	ldr	r0, [pc, #36]	@ (800c328 <pbuf_free_custom+0x34>)
 800c304:	f005 f9b4 	bl	8011670 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c308:	4b08      	ldr	r3, [pc, #32]	@ (800c32c <pbuf_free_custom+0x38>)
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d107      	bne.n	800c320 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c310:	4b06      	ldr	r3, [pc, #24]	@ (800c32c <pbuf_free_custom+0x38>)
 800c312:	2200      	movs	r2, #0
 800c314:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c316:	4b06      	ldr	r3, [pc, #24]	@ (800c330 <pbuf_free_custom+0x3c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fe2c 	bl	800cf78 <osSemaphoreRelease>
  }
}
 800c320:	bf00      	nop
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08022ccc 	.word	0x08022ccc
 800c32c:	24005008 	.word	0x24005008
 800c330:	2400500c 	.word	0x2400500c

0800c334 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c338:	f7f5 fcde 	bl	8001cf8 <HAL_GetTick>
 800c33c:	4603      	mov	r3, r0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	bd80      	pop	{r7, pc}
	...

0800c344 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	@ 0x38
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c34c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	605a      	str	r2, [r3, #4]
 800c356:	609a      	str	r2, [r3, #8]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a59      	ldr	r2, [pc, #356]	@ (800c4c8 <HAL_ETH_MspInit+0x184>)
 800c362:	4293      	cmp	r3, r2
 800c364:	f040 80ab 	bne.w	800c4be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800c368:	4b58      	ldr	r3, [pc, #352]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c36a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c36e:	4a57      	ldr	r2, [pc, #348]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c374:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c378:	4b54      	ldr	r3, [pc, #336]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c37a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c37e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c382:	623b      	str	r3, [r7, #32]
 800c384:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800c386:	4b51      	ldr	r3, [pc, #324]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c38c:	4a4f      	ldr	r2, [pc, #316]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c38e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c392:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c396:	4b4d      	ldr	r3, [pc, #308]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c39c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800c3a4:	4b49      	ldr	r3, [pc, #292]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c3aa:	4a48      	ldr	r2, [pc, #288]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800c3b4:	4b45      	ldr	r3, [pc, #276]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c3ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3be:	61bb      	str	r3, [r7, #24]
 800c3c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3c2:	4b42      	ldr	r3, [pc, #264]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3c8:	4a40      	ldr	r2, [pc, #256]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3ca:	f043 0304 	orr.w	r3, r3, #4
 800c3ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c3d2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	617b      	str	r3, [r7, #20]
 800c3de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3e0:	4b3a      	ldr	r3, [pc, #232]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3e6:	4a39      	ldr	r2, [pc, #228]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c3f0:	4b36      	ldr	r3, [pc, #216]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c3fe:	4b33      	ldr	r3, [pc, #204]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c404:	4a31      	ldr	r2, [pc, #196]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c406:	f043 0302 	orr.w	r3, r3, #2
 800c40a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c40e:	4b2f      	ldr	r3, [pc, #188]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	60fb      	str	r3, [r7, #12]
 800c41a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c41c:	4b2b      	ldr	r3, [pc, #172]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c41e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c422:	4a2a      	ldr	r2, [pc, #168]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c42c:	4b27      	ldr	r3, [pc, #156]	@ (800c4cc <HAL_ETH_MspInit+0x188>)
 800c42e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c436:	60bb      	str	r3, [r7, #8]
 800c438:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c43a:	2332      	movs	r3, #50	@ 0x32
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c43e:	2302      	movs	r3, #2
 800c440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c442:	2300      	movs	r3, #0
 800c444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c446:	2300      	movs	r3, #0
 800c448:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c44a:	230b      	movs	r3, #11
 800c44c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c44e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c452:	4619      	mov	r1, r3
 800c454:	481e      	ldr	r0, [pc, #120]	@ (800c4d0 <HAL_ETH_MspInit+0x18c>)
 800c456:	f7f9 f959 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c45a:	2386      	movs	r3, #134	@ 0x86
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c45e:	2302      	movs	r3, #2
 800c460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c462:	2300      	movs	r3, #0
 800c464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c466:	2300      	movs	r3, #0
 800c468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c46a:	230b      	movs	r3, #11
 800c46c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c46e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c472:	4619      	mov	r1, r3
 800c474:	4817      	ldr	r0, [pc, #92]	@ (800c4d4 <HAL_ETH_MspInit+0x190>)
 800c476:	f7f9 f949 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c47a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c47e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c480:	2302      	movs	r3, #2
 800c482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c484:	2300      	movs	r3, #0
 800c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c488:	2300      	movs	r3, #0
 800c48a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c48c:	230b      	movs	r3, #11
 800c48e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c494:	4619      	mov	r1, r3
 800c496:	4810      	ldr	r0, [pc, #64]	@ (800c4d8 <HAL_ETH_MspInit+0x194>)
 800c498:	f7f9 f938 	bl	800570c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c49c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c4a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c4ae:	230b      	movs	r3, #11
 800c4b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c4b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4808      	ldr	r0, [pc, #32]	@ (800c4dc <HAL_ETH_MspInit+0x198>)
 800c4ba:	f7f9 f927 	bl	800570c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c4be:	bf00      	nop
 800c4c0:	3738      	adds	r7, #56	@ 0x38
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	40028000 	.word	0x40028000
 800c4cc:	58024400 	.word	0x58024400
 800c4d0:	58020800 	.word	0x58020800
 800c4d4:	58020000 	.word	0x58020000
 800c4d8:	58020400 	.word	0x58020400
 800c4dc:	58021800 	.word	0x58021800

0800c4e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c4e4:	4802      	ldr	r0, [pc, #8]	@ (800c4f0 <ETH_PHY_IO_Init+0x10>)
 800c4e6:	f7f8 fb31 	bl	8004b4c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	24005014 	.word	0x24005014

0800c4f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
  return 0;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	68f9      	ldr	r1, [r7, #12]
 800c516:	4807      	ldr	r0, [pc, #28]	@ (800c534 <ETH_PHY_IO_ReadReg+0x30>)
 800c518:	f7f8 f882 	bl	8004620 <HAL_ETH_ReadPHYRegister>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c522:	f04f 33ff 	mov.w	r3, #4294967295
 800c526:	e000      	b.n	800c52a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	24005014 	.word	0x24005014

0800c538 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	68f9      	ldr	r1, [r7, #12]
 800c54a:	4807      	ldr	r0, [pc, #28]	@ (800c568 <ETH_PHY_IO_WriteReg+0x30>)
 800c54c:	f7f8 f8bc 	bl	80046c8 <HAL_ETH_WritePHYRegister>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
 800c55a:	e000      	b.n	800c55e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	24005014 	.word	0x24005014

0800c56c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c570:	f7f5 fbc2 	bl	8001cf8 <HAL_GetTick>
 800c574:	4603      	mov	r3, r0
}
 800c576:	4618      	mov	r0, r3
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b0a0      	sub	sp, #128	@ 0x80
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	2264      	movs	r2, #100	@ 0x64
 800c58a:	2100      	movs	r1, #0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f011 fae7 	bl	801db60 <memset>
  int32_t PHYLinkState = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c596:	2300      	movs	r3, #0
 800c598:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c59a:	2300      	movs	r3, #0
 800c59c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c59e:	2300      	movs	r3, #0
 800c5a0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c5a6:	483a      	ldr	r0, [pc, #232]	@ (800c690 <ethernet_link_thread+0x114>)
 800c5a8:	f7f5 face 	bl	8001b48 <LAN8742_GetLinkState>
 800c5ac:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c5ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5b4:	089b      	lsrs	r3, r3, #2
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00c      	beq.n	800c5da <ethernet_link_thread+0x5e>
 800c5c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	dc09      	bgt.n	800c5da <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c5c6:	4833      	ldr	r0, [pc, #204]	@ (800c694 <ethernet_link_thread+0x118>)
 800c5c8:	f7f7 fdc8 	bl	800415c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c5cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5ce:	f005 fadb 	bl	8011b88 <netif_set_down>
    netif_set_link_down(netif);
 800c5d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5d4:	f005 fb42 	bl	8011c5c <netif_set_link_down>
 800c5d8:	e055      	b.n	800c686 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d14e      	bne.n	800c686 <ethernet_link_thread+0x10a>
 800c5e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	dd4b      	ble.n	800c686 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c5ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5f0:	3b02      	subs	r3, #2
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d82a      	bhi.n	800c64c <ethernet_link_thread+0xd0>
 800c5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5fc <ethernet_link_thread+0x80>)
 800c5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c61f 	.word	0x0800c61f
 800c604:	0800c62f 	.word	0x0800c62f
 800c608:	0800c63f 	.word	0x0800c63f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c60c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c610:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c612:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c616:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c618:	2301      	movs	r3, #1
 800c61a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c61c:	e017      	b.n	800c64e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c61e:	2300      	movs	r3, #0
 800c620:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c622:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c626:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c628:	2301      	movs	r3, #1
 800c62a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c62c:	e00f      	b.n	800c64e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c62e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c632:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c634:	2300      	movs	r3, #0
 800c636:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c638:	2301      	movs	r3, #1
 800c63a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c63c:	e007      	b.n	800c64e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c63e:	2300      	movs	r3, #0
 800c640:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c642:	2300      	movs	r3, #0
 800c644:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c646:	2301      	movs	r3, #1
 800c648:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c64a:	e000      	b.n	800c64e <ethernet_link_thread+0xd2>
    default:
      break;
 800c64c:	bf00      	nop
    }

    if(linkchanged)
 800c64e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d018      	beq.n	800c686 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c654:	f107 0308 	add.w	r3, r7, #8
 800c658:	4619      	mov	r1, r3
 800c65a:	480e      	ldr	r0, [pc, #56]	@ (800c694 <ethernet_link_thread+0x118>)
 800c65c:	f7f8 f888 	bl	8004770 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c662:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c666:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c668:	f107 0308 	add.w	r3, r7, #8
 800c66c:	4619      	mov	r1, r3
 800c66e:	4809      	ldr	r0, [pc, #36]	@ (800c694 <ethernet_link_thread+0x118>)
 800c670:	f7f8 fa52 	bl	8004b18 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c674:	4807      	ldr	r0, [pc, #28]	@ (800c694 <ethernet_link_thread+0x118>)
 800c676:	f7f7 fcfd 	bl	8004074 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c67a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c67c:	f005 fa18 	bl	8011ab0 <netif_set_up>
      netif_set_link_up(netif);
 800c680:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c682:	f005 fab3 	bl	8011bec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c686:	2064      	movs	r0, #100	@ 0x64
 800c688:	f000 f9df 	bl	800ca4a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c68c:	e78b      	b.n	800c5a6 <ethernet_link_thread+0x2a>
 800c68e:	bf00      	nop
 800c690:	240050fc 	.word	0x240050fc
 800c694:	24005014 	.word	0x24005014

0800c698 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c6a0:	4812      	ldr	r0, [pc, #72]	@ (800c6ec <HAL_ETH_RxAllocateCallback+0x54>)
 800c6a2:	f004 ff71 	bl	8011588 <memp_malloc_pool>
 800c6a6:	60f8      	str	r0, [r7, #12]
  if (p)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d014      	beq.n	800c6d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f103 0220 	add.w	r2, r3, #32
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	4a0d      	ldr	r2, [pc, #52]	@ (800c6f0 <HAL_ETH_RxAllocateCallback+0x58>)
 800c6bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c6c6:	9201      	str	r2, [sp, #4]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2241      	movs	r2, #65	@ 0x41
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f005 fce7 	bl	80120a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c6d6:	e005      	b.n	800c6e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c6d8:	4b06      	ldr	r3, [pc, #24]	@ (800c6f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	08022ccc 	.word	0x08022ccc
 800c6f0:	0800c2f5 	.word	0x0800c2f5
 800c6f4:	24005008 	.word	0x24005008

0800c6f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b08d      	sub	sp, #52	@ 0x34
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
 800c704:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3b20      	subs	r3, #32
 800c716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c720:	2200      	movs	r2, #0
 800c722:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c726:	887a      	ldrh	r2, [r7, #2]
 800c728:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d103      	bne.n	800c73a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	e003      	b.n	800c742 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c740:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c746:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c74e:	e009      	b.n	800c764 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c752:	891a      	ldrh	r2, [r3, #8]
 800c754:	887b      	ldrh	r3, [r7, #2]
 800c756:	4413      	add	r3, r2
 800c758:	b29a      	uxth	r2, r3
 800c75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f2      	bne.n	800c750 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c76a:	887b      	ldrh	r3, [r7, #2]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	623a      	str	r2, [r7, #32]
 800c770:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	2b00      	cmp	r3, #0
 800c776:	dd1d      	ble.n	800c7b4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	f003 021f 	and.w	r2, r3, #31
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	4413      	add	r3, r2
 800c782:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c784:	6a3b      	ldr	r3, [r7, #32]
 800c786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c788:	f3bf 8f4f 	dsb	sy
}
 800c78c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c78e:	4a0d      	ldr	r2, [pc, #52]	@ (800c7c4 <HAL_ETH_RxLinkCallback+0xcc>)
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	3320      	adds	r3, #32
 800c79a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	3b20      	subs	r3, #32
 800c7a0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dcf2      	bgt.n	800c78e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c7a8:	f3bf 8f4f 	dsb	sy
}
 800c7ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c7ae:	f3bf 8f6f 	isb	sy
}
 800c7b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c7b4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c7b6:	bf00      	nop
 800c7b8:	3734      	adds	r7, #52	@ 0x34
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	e000ed00 	.word	0xe000ed00

0800c7c8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f005 fe21 	bl	8012418 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <__NVIC_SetPriority>:
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c7ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	db0a      	blt.n	800c80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	490c      	ldr	r1, [pc, #48]	@ (800c82c <__NVIC_SetPriority+0x4c>)
 800c7fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7fe:	0112      	lsls	r2, r2, #4
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	440b      	add	r3, r1
 800c804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c808:	e00a      	b.n	800c820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	4908      	ldr	r1, [pc, #32]	@ (800c830 <__NVIC_SetPriority+0x50>)
 800c810:	88fb      	ldrh	r3, [r7, #6]
 800c812:	f003 030f 	and.w	r3, r3, #15
 800c816:	3b04      	subs	r3, #4
 800c818:	0112      	lsls	r2, r2, #4
 800c81a:	b2d2      	uxtb	r2, r2
 800c81c:	440b      	add	r3, r1
 800c81e:	761a      	strb	r2, [r3, #24]
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	e000e100 	.word	0xe000e100
 800c830:	e000ed00 	.word	0xe000ed00

0800c834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c838:	4b05      	ldr	r3, [pc, #20]	@ (800c850 <SysTick_Handler+0x1c>)
 800c83a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c83c:	f002 fd58 	bl	800f2f0 <xTaskGetSchedulerState>
 800c840:	4603      	mov	r3, r0
 800c842:	2b01      	cmp	r3, #1
 800c844:	d001      	beq.n	800c84a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c846:	f003 fd0f 	bl	8010268 <xPortSysTickHandler>
  }
}
 800c84a:	bf00      	nop
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	e000e010 	.word	0xe000e010

0800c854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c858:	2100      	movs	r1, #0
 800c85a:	f06f 0004 	mvn.w	r0, #4
 800c85e:	f7ff ffbf 	bl	800c7e0 <__NVIC_SetPriority>
#endif
}
 800c862:	bf00      	nop
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c86e:	f3ef 8305 	mrs	r3, IPSR
 800c872:	603b      	str	r3, [r7, #0]
  return(result);
 800c874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c87a:	f06f 0305 	mvn.w	r3, #5
 800c87e:	607b      	str	r3, [r7, #4]
 800c880:	e00c      	b.n	800c89c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c882:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ac <osKernelInitialize+0x44>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d105      	bne.n	800c896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c88a:	4b08      	ldr	r3, [pc, #32]	@ (800c8ac <osKernelInitialize+0x44>)
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c890:	2300      	movs	r3, #0
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	e002      	b.n	800c89c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c896:	f04f 33ff 	mov.w	r3, #4294967295
 800c89a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c89c:	687b      	ldr	r3, [r7, #4]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	2400511c 	.word	0x2400511c

0800c8b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8b6:	f3ef 8305 	mrs	r3, IPSR
 800c8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c8bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c8c2:	f06f 0305 	mvn.w	r3, #5
 800c8c6:	607b      	str	r3, [r7, #4]
 800c8c8:	e010      	b.n	800c8ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <osKernelStart+0x48>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d109      	bne.n	800c8e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8d2:	f7ff ffbf 	bl	800c854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8d6:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <osKernelStart+0x48>)
 800c8d8:	2202      	movs	r2, #2
 800c8da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8dc:	f002 f882 	bl	800e9e4 <vTaskStartScheduler>
      stat = osOK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	607b      	str	r3, [r7, #4]
 800c8e4:	e002      	b.n	800c8ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8ec:	687b      	ldr	r3, [r7, #4]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	2400511c 	.word	0x2400511c

0800c8fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c902:	f3ef 8305 	mrs	r3, IPSR
 800c906:	603b      	str	r3, [r7, #0]
  return(result);
 800c908:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c90e:	f002 f995 	bl	800ec3c <xTaskGetTickCountFromISR>
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	e002      	b.n	800c91c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c916:	f002 f981 	bl	800ec1c <xTaskGetTickCount>
 800c91a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c91c:	687b      	ldr	r3, [r7, #4]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c926:	b580      	push	{r7, lr}
 800c928:	b08e      	sub	sp, #56	@ 0x38
 800c92a:	af04      	add	r7, sp, #16
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c936:	f3ef 8305 	mrs	r3, IPSR
 800c93a:	617b      	str	r3, [r7, #20]
  return(result);
 800c93c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d17e      	bne.n	800ca40 <osThreadNew+0x11a>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d07b      	beq.n	800ca40 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c948:	2380      	movs	r3, #128	@ 0x80
 800c94a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c94c:	2318      	movs	r3, #24
 800c94e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c950:	2300      	movs	r3, #0
 800c952:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d045      	beq.n	800c9ec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <osThreadNew+0x48>
        name = attr->name;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d008      	beq.n	800c994 <osThreadNew+0x6e>
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	2b38      	cmp	r3, #56	@ 0x38
 800c986:	d805      	bhi.n	800c994 <osThreadNew+0x6e>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <osThreadNew+0x72>
        return (NULL);
 800c994:	2300      	movs	r3, #0
 800c996:	e054      	b.n	800ca42 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	089b      	lsrs	r3, r3, #2
 800c9a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00e      	beq.n	800c9ce <osThreadNew+0xa8>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	2ba7      	cmp	r3, #167	@ 0xa7
 800c9b6:	d90a      	bls.n	800c9ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <osThreadNew+0xa8>
        mem = 1;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	61bb      	str	r3, [r7, #24]
 800c9cc:	e010      	b.n	800c9f0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10c      	bne.n	800c9f0 <osThreadNew+0xca>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d108      	bne.n	800c9f0 <osThreadNew+0xca>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <osThreadNew+0xca>
          mem = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	61bb      	str	r3, [r7, #24]
 800c9ea:	e001      	b.n	800c9f0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d110      	bne.n	800ca18 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9fe:	9202      	str	r2, [sp, #8]
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	6a3a      	ldr	r2, [r7, #32]
 800ca0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f001 fdf5 	bl	800e5fc <xTaskCreateStatic>
 800ca12:	4603      	mov	r3, r0
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	e013      	b.n	800ca40 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d110      	bne.n	800ca40 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	f107 0310 	add.w	r3, r7, #16
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f001 fe43 	bl	800e6bc <xTaskCreate>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d001      	beq.n	800ca40 <osThreadNew+0x11a>
            hTask = NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ca40:	693b      	ldr	r3, [r7, #16]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3728      	adds	r7, #40	@ 0x28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca52:	f3ef 8305 	mrs	r3, IPSR
 800ca56:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <osDelay+0x1c>
    stat = osErrorISR;
 800ca5e:	f06f 0305 	mvn.w	r3, #5
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e007      	b.n	800ca76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 ff81 	bl	800e978 <vTaskDelay>
    }
  }

  return (stat);
 800ca76:	68fb      	ldr	r3, [r7, #12]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f003 fa0b 	bl	800fea4 <pvTimerGetTimerID>
 800ca8e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d005      	beq.n	800caa2 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	6852      	ldr	r2, [r2, #4]
 800ca9e:	4610      	mov	r0, r2
 800caa0:	4798      	blx	r3
  }
}
 800caa2:	bf00      	nop
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b08c      	sub	sp, #48	@ 0x30
 800cab0:	af02      	add	r7, sp, #8
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	460b      	mov	r3, r1
 800caba:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cac0:	f3ef 8305 	mrs	r3, IPSR
 800cac4:	613b      	str	r3, [r7, #16]
  return(result);
 800cac6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d163      	bne.n	800cb94 <osTimerNew+0xe8>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d060      	beq.n	800cb94 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800cad2:	2008      	movs	r0, #8
 800cad4:	f003 fc5a 	bl	801038c <pvPortMalloc>
 800cad8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d059      	beq.n	800cb94 <osTimerNew+0xe8>
      callb->func = func;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800caec:	7afb      	ldrb	r3, [r7, #11]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61fb      	str	r3, [r7, #28]
 800caf6:	e001      	b.n	800cafc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800caf8:	2301      	movs	r3, #1
 800cafa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800cafc:	f04f 33ff 	mov.w	r3, #4294967295
 800cb00:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01c      	beq.n	800cb46 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <osTimerNew+0x6e>
          name = attr->name;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d006      	beq.n	800cb30 <osTimerNew+0x84>
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb28:	d902      	bls.n	800cb30 <osTimerNew+0x84>
          mem = 1;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	61bb      	str	r3, [r7, #24]
 800cb2e:	e00c      	b.n	800cb4a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d108      	bne.n	800cb4a <osTimerNew+0x9e>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <osTimerNew+0x9e>
            mem = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	e001      	b.n	800cb4a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d10c      	bne.n	800cb6a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	4b12      	ldr	r3, [pc, #72]	@ (800cba0 <osTimerNew+0xf4>)
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	2101      	movs	r1, #1
 800cb60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb62:	f002 fe12 	bl	800f78a <xTimerCreateStatic>
 800cb66:	6238      	str	r0, [r7, #32]
 800cb68:	e00b      	b.n	800cb82 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d108      	bne.n	800cb82 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800cb70:	4b0b      	ldr	r3, [pc, #44]	@ (800cba0 <osTimerNew+0xf4>)
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	2101      	movs	r1, #1
 800cb7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb7c:	f002 fde4 	bl	800f748 <xTimerCreate>
 800cb80:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800cb82:	6a3b      	ldr	r3, [r7, #32]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d105      	bne.n	800cb94 <osTimerNew+0xe8>
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <osTimerNew+0xe8>
        vPortFree (callb);
 800cb8e:	6978      	ldr	r0, [r7, #20]
 800cb90:	f003 fcca 	bl	8010528 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800cb94:	6a3b      	ldr	r3, [r7, #32]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3728      	adds	r7, #40	@ 0x28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0800ca81 	.word	0x0800ca81

0800cba4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbb0:	f3ef 8305 	mrs	r3, IPSR
 800cbb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbb6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d174      	bne.n	800cca6 <osMutexNew+0x102>
    if (attr != NULL) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <osMutexNew+0x26>
      type = attr->attr_bits;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	61bb      	str	r3, [r7, #24]
 800cbc8:	e001      	b.n	800cbce <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <osMutexNew+0x3a>
      rmtx = 1U;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e001      	b.n	800cbe2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	f003 0308 	and.w	r3, r3, #8
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d15c      	bne.n	800cca6 <osMutexNew+0x102>
      mem = -1;
 800cbec:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d015      	beq.n	800cc24 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d006      	beq.n	800cc0e <osMutexNew+0x6a>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	2b4f      	cmp	r3, #79	@ 0x4f
 800cc06:	d902      	bls.n	800cc0e <osMutexNew+0x6a>
          mem = 1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	613b      	str	r3, [r7, #16]
 800cc0c:	e00c      	b.n	800cc28 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d108      	bne.n	800cc28 <osMutexNew+0x84>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d104      	bne.n	800cc28 <osMutexNew+0x84>
            mem = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]
 800cc22:	e001      	b.n	800cc28 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d112      	bne.n	800cc54 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d007      	beq.n	800cc44 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	4619      	mov	r1, r3
 800cc3a:	2004      	movs	r0, #4
 800cc3c:	f000 fd71 	bl	800d722 <xQueueCreateMutexStatic>
 800cc40:	61f8      	str	r0, [r7, #28]
 800cc42:	e016      	b.n	800cc72 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	f000 fd69 	bl	800d722 <xQueueCreateMutexStatic>
 800cc50:	61f8      	str	r0, [r7, #28]
 800cc52:	e00e      	b.n	800cc72 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10b      	bne.n	800cc72 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d004      	beq.n	800cc6a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cc60:	2004      	movs	r0, #4
 800cc62:	f000 fd46 	bl	800d6f2 <xQueueCreateMutex>
 800cc66:	61f8      	str	r0, [r7, #28]
 800cc68:	e003      	b.n	800cc72 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	f000 fd41 	bl	800d6f2 <xQueueCreateMutex>
 800cc70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00c      	beq.n	800cc92 <osMutexNew+0xee>
        if (attr != NULL) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <osMutexNew+0xe2>
          name = attr->name;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e001      	b.n	800cc8a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	69f8      	ldr	r0, [r7, #28]
 800cc8e:	f001 fc2d 	bl	800e4ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d006      	beq.n	800cca6 <osMutexNew+0x102>
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	f043 0301 	orr.w	r3, r3, #1
 800cca4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cca6:	69fb      	ldr	r3, [r7, #28]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f023 0301 	bic.w	r3, r3, #1
 800ccc0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccce:	f3ef 8305 	mrs	r3, IPSR
 800ccd2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccd4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ccda:	f06f 0305 	mvn.w	r3, #5
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e02c      	b.n	800cd3c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d103      	bne.n	800ccf0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cce8:	f06f 0303 	mvn.w	r3, #3
 800ccec:	617b      	str	r3, [r7, #20]
 800ccee:	e025      	b.n	800cd3c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d011      	beq.n	800cd1a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6938      	ldr	r0, [r7, #16]
 800ccfa:	f000 fd62 	bl	800d7c2 <xQueueTakeMutexRecursive>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d01b      	beq.n	800cd3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cd0a:	f06f 0301 	mvn.w	r3, #1
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	e014      	b.n	800cd3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cd12:	f06f 0302 	mvn.w	r3, #2
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e010      	b.n	800cd3c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6938      	ldr	r0, [r7, #16]
 800cd1e:	f001 f907 	bl	800df30 <xQueueSemaphoreTake>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d009      	beq.n	800cd3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cd2e:	f06f 0301 	mvn.w	r3, #1
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	e002      	b.n	800cd3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cd36:	f06f 0302 	mvn.w	r3, #2
 800cd3a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cd3c:	697b      	ldr	r3, [r7, #20]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b086      	sub	sp, #24
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f023 0301 	bic.w	r3, r3, #1
 800cd54:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd62:	f3ef 8305 	mrs	r3, IPSR
 800cd66:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd68:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cd6e:	f06f 0305 	mvn.w	r3, #5
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e01f      	b.n	800cdb6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d103      	bne.n	800cd84 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cd7c:	f06f 0303 	mvn.w	r3, #3
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	e018      	b.n	800cdb6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cd8a:	6938      	ldr	r0, [r7, #16]
 800cd8c:	f000 fce4 	bl	800d758 <xQueueGiveMutexRecursive>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d00f      	beq.n	800cdb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cd96:	f06f 0302 	mvn.w	r3, #2
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	e00b      	b.n	800cdb6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2200      	movs	r2, #0
 800cda2:	2100      	movs	r1, #0
 800cda4:	6938      	ldr	r0, [r7, #16]
 800cda6:	f000 fdb1 	bl	800d90c <xQueueGenericSend>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d002      	beq.n	800cdb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cdb0:	f06f 0302 	mvn.w	r3, #2
 800cdb4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cdb6:	697b      	ldr	r3, [r7, #20]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	@ 0x28
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdd0:	f3ef 8305 	mrs	r3, IPSR
 800cdd4:	613b      	str	r3, [r7, #16]
  return(result);
 800cdd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d175      	bne.n	800cec8 <osSemaphoreNew+0x108>
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d072      	beq.n	800cec8 <osSemaphoreNew+0x108>
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d86e      	bhi.n	800cec8 <osSemaphoreNew+0x108>
    mem = -1;
 800cdea:	f04f 33ff 	mov.w	r3, #4294967295
 800cdee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d015      	beq.n	800ce22 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d006      	beq.n	800ce0c <osSemaphoreNew+0x4c>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	2b4f      	cmp	r3, #79	@ 0x4f
 800ce04:	d902      	bls.n	800ce0c <osSemaphoreNew+0x4c>
        mem = 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	61bb      	str	r3, [r7, #24]
 800ce0a:	e00c      	b.n	800ce26 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d108      	bne.n	800ce26 <osSemaphoreNew+0x66>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <osSemaphoreNew+0x66>
          mem = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61bb      	str	r3, [r7, #24]
 800ce20:	e001      	b.n	800ce26 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d04c      	beq.n	800cec8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d128      	bne.n	800ce86 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d10a      	bne.n	800ce50 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	2203      	movs	r2, #3
 800ce40:	9200      	str	r2, [sp, #0]
 800ce42:	2200      	movs	r2, #0
 800ce44:	2100      	movs	r1, #0
 800ce46:	2001      	movs	r0, #1
 800ce48:	f000 fb5e 	bl	800d508 <xQueueGenericCreateStatic>
 800ce4c:	61f8      	str	r0, [r7, #28]
 800ce4e:	e005      	b.n	800ce5c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ce50:	2203      	movs	r2, #3
 800ce52:	2100      	movs	r1, #0
 800ce54:	2001      	movs	r0, #1
 800ce56:	f000 fbd4 	bl	800d602 <xQueueGenericCreate>
 800ce5a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d022      	beq.n	800cea8 <osSemaphoreNew+0xe8>
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01f      	beq.n	800cea8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ce68:	2300      	movs	r3, #0
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	69f8      	ldr	r0, [r7, #28]
 800ce70:	f000 fd4c 	bl	800d90c <xQueueGenericSend>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d016      	beq.n	800cea8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ce7a:	69f8      	ldr	r0, [r7, #28]
 800ce7c:	f001 f9ea 	bl	800e254 <vQueueDelete>
            hSemaphore = NULL;
 800ce80:	2300      	movs	r3, #0
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e010      	b.n	800cea8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d108      	bne.n	800ce9e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	461a      	mov	r2, r3
 800ce92:	68b9      	ldr	r1, [r7, #8]
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 fccb 	bl	800d830 <xQueueCreateCountingSemaphoreStatic>
 800ce9a:	61f8      	str	r0, [r7, #28]
 800ce9c:	e004      	b.n	800cea8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 fcfe 	bl	800d8a2 <xQueueCreateCountingSemaphore>
 800cea6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00c      	beq.n	800cec8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d003      	beq.n	800cebc <osSemaphoreNew+0xfc>
          name = attr->name;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	617b      	str	r3, [r7, #20]
 800ceba:	e001      	b.n	800cec0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cebc:	2300      	movs	r3, #0
 800cebe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cec0:	6979      	ldr	r1, [r7, #20]
 800cec2:	69f8      	ldr	r0, [r7, #28]
 800cec4:	f001 fb12 	bl	800e4ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cec8:	69fb      	ldr	r3, [r7, #28]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3720      	adds	r7, #32
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d103      	bne.n	800cef4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ceec:	f06f 0303 	mvn.w	r3, #3
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	e039      	b.n	800cf68 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cef4:	f3ef 8305 	mrs	r3, IPSR
 800cef8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cefa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d022      	beq.n	800cf46 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cf06:	f06f 0303 	mvn.w	r3, #3
 800cf0a:	617b      	str	r3, [r7, #20]
 800cf0c:	e02c      	b.n	800cf68 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cf12:	f107 0308 	add.w	r3, r7, #8
 800cf16:	461a      	mov	r2, r3
 800cf18:	2100      	movs	r1, #0
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f001 f918 	bl	800e150 <xQueueReceiveFromISR>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d003      	beq.n	800cf2e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cf26:	f06f 0302 	mvn.w	r3, #2
 800cf2a:	617b      	str	r3, [r7, #20]
 800cf2c:	e01c      	b.n	800cf68 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d019      	beq.n	800cf68 <osSemaphoreAcquire+0x94>
 800cf34:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <osSemaphoreAcquire+0xa0>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	e010      	b.n	800cf68 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6938      	ldr	r0, [r7, #16]
 800cf4a:	f000 fff1 	bl	800df30 <xQueueSemaphoreTake>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d009      	beq.n	800cf68 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cf5a:	f06f 0301 	mvn.w	r3, #1
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e002      	b.n	800cf68 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cf62:	f06f 0302 	mvn.w	r3, #2
 800cf66:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cf68:	697b      	ldr	r3, [r7, #20]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d103      	bne.n	800cf96 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cf8e:	f06f 0303 	mvn.w	r3, #3
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	e02c      	b.n	800cff0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf96:	f3ef 8305 	mrs	r3, IPSR
 800cf9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d01a      	beq.n	800cfd8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cfa6:	f107 0308 	add.w	r3, r7, #8
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6938      	ldr	r0, [r7, #16]
 800cfae:	f000 fe4d 	bl	800dc4c <xQueueGiveFromISR>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d003      	beq.n	800cfc0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cfb8:	f06f 0302 	mvn.w	r3, #2
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	e017      	b.n	800cff0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d014      	beq.n	800cff0 <osSemaphoreRelease+0x78>
 800cfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <osSemaphoreRelease+0x84>)
 800cfc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfcc:	601a      	str	r2, [r3, #0]
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	e00b      	b.n	800cff0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6938      	ldr	r0, [r7, #16]
 800cfe0:	f000 fc94 	bl	800d90c <xQueueGenericSend>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d002      	beq.n	800cff0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cfea:	f06f 0302 	mvn.w	r3, #2
 800cfee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cff0:	697b      	ldr	r3, [r7, #20]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	e000ed04 	.word	0xe000ed04

0800d000 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d000:	b580      	push	{r7, lr}
 800d002:	b08a      	sub	sp, #40	@ 0x28
 800d004:	af02      	add	r7, sp, #8
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d010:	f3ef 8305 	mrs	r3, IPSR
 800d014:	613b      	str	r3, [r7, #16]
  return(result);
 800d016:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d15f      	bne.n	800d0dc <osMessageQueueNew+0xdc>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d05c      	beq.n	800d0dc <osMessageQueueNew+0xdc>
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d059      	beq.n	800d0dc <osMessageQueueNew+0xdc>
    mem = -1;
 800d028:	f04f 33ff 	mov.w	r3, #4294967295
 800d02c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d029      	beq.n	800d088 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d012      	beq.n	800d062 <osMessageQueueNew+0x62>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	2b4f      	cmp	r3, #79	@ 0x4f
 800d042:	d90e      	bls.n	800d062 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00a      	beq.n	800d062 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	695a      	ldr	r2, [r3, #20]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	fb01 f303 	mul.w	r3, r1, r3
 800d058:	429a      	cmp	r2, r3
 800d05a:	d302      	bcc.n	800d062 <osMessageQueueNew+0x62>
        mem = 1;
 800d05c:	2301      	movs	r3, #1
 800d05e:	61bb      	str	r3, [r7, #24]
 800d060:	e014      	b.n	800d08c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d110      	bne.n	800d08c <osMessageQueueNew+0x8c>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10c      	bne.n	800d08c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d076:	2b00      	cmp	r3, #0
 800d078:	d108      	bne.n	800d08c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <osMessageQueueNew+0x8c>
          mem = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	61bb      	str	r3, [r7, #24]
 800d086:	e001      	b.n	800d08c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d10b      	bne.n	800d0aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	691a      	ldr	r2, [r3, #16]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	2100      	movs	r1, #0
 800d09c:	9100      	str	r1, [sp, #0]
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fa31 	bl	800d508 <xQueueGenericCreateStatic>
 800d0a6:	61f8      	str	r0, [r7, #28]
 800d0a8:	e008      	b.n	800d0bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d105      	bne.n	800d0bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	68b9      	ldr	r1, [r7, #8]
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 faa4 	bl	800d602 <xQueueGenericCreate>
 800d0ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00c      	beq.n	800d0dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d003      	beq.n	800d0d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	e001      	b.n	800d0d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d0d4:	6979      	ldr	r1, [r7, #20]
 800d0d6:	69f8      	ldr	r0, [r7, #28]
 800d0d8:	f001 fa08 	bl	800e4ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d0dc:	69fb      	ldr	r3, [r7, #28]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d100:	f3ef 8305 	mrs	r3, IPSR
 800d104:	617b      	str	r3, [r7, #20]
  return(result);
 800d106:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d028      	beq.n	800d15e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d005      	beq.n	800d11e <osMessageQueuePut+0x36>
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <osMessageQueuePut+0x36>
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d11e:	f06f 0303 	mvn.w	r3, #3
 800d122:	61fb      	str	r3, [r7, #28]
 800d124:	e038      	b.n	800d198 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d12a:	f107 0210 	add.w	r2, r7, #16
 800d12e:	2300      	movs	r3, #0
 800d130:	68b9      	ldr	r1, [r7, #8]
 800d132:	69b8      	ldr	r0, [r7, #24]
 800d134:	f000 fcec 	bl	800db10 <xQueueGenericSendFromISR>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d003      	beq.n	800d146 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d13e:	f06f 0302 	mvn.w	r3, #2
 800d142:	61fb      	str	r3, [r7, #28]
 800d144:	e028      	b.n	800d198 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d025      	beq.n	800d198 <osMessageQueuePut+0xb0>
 800d14c:	4b15      	ldr	r3, [pc, #84]	@ (800d1a4 <osMessageQueuePut+0xbc>)
 800d14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	e01c      	b.n	800d198 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <osMessageQueuePut+0x82>
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d103      	bne.n	800d172 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d16a:	f06f 0303 	mvn.w	r3, #3
 800d16e:	61fb      	str	r3, [r7, #28]
 800d170:	e012      	b.n	800d198 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d172:	2300      	movs	r3, #0
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	69b8      	ldr	r0, [r7, #24]
 800d17a:	f000 fbc7 	bl	800d90c <xQueueGenericSend>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b01      	cmp	r3, #1
 800d182:	d009      	beq.n	800d198 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d18a:	f06f 0301 	mvn.w	r3, #1
 800d18e:	61fb      	str	r3, [r7, #28]
 800d190:	e002      	b.n	800d198 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d192:	f06f 0302 	mvn.w	r3, #2
 800d196:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d198:	69fb      	ldr	r3, [r7, #28]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3720      	adds	r7, #32
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1be:	f3ef 8305 	mrs	r3, IPSR
 800d1c2:	617b      	str	r3, [r7, #20]
  return(result);
 800d1c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d028      	beq.n	800d21c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <osMessageQueueGet+0x34>
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <osMessageQueueGet+0x34>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d1dc:	f06f 0303 	mvn.w	r3, #3
 800d1e0:	61fb      	str	r3, [r7, #28]
 800d1e2:	e037      	b.n	800d254 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d1e8:	f107 0310 	add.w	r3, r7, #16
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	69b8      	ldr	r0, [r7, #24]
 800d1f2:	f000 ffad 	bl	800e150 <xQueueReceiveFromISR>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d003      	beq.n	800d204 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d1fc:	f06f 0302 	mvn.w	r3, #2
 800d200:	61fb      	str	r3, [r7, #28]
 800d202:	e027      	b.n	800d254 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d024      	beq.n	800d254 <osMessageQueueGet+0xac>
 800d20a:	4b15      	ldr	r3, [pc, #84]	@ (800d260 <osMessageQueueGet+0xb8>)
 800d20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	e01b      	b.n	800d254 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d002      	beq.n	800d228 <osMessageQueueGet+0x80>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d103      	bne.n	800d230 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d228:	f06f 0303 	mvn.w	r3, #3
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	e011      	b.n	800d254 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	68b9      	ldr	r1, [r7, #8]
 800d234:	69b8      	ldr	r0, [r7, #24]
 800d236:	f000 fd99 	bl	800dd6c <xQueueReceive>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d009      	beq.n	800d254 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d246:	f06f 0301 	mvn.w	r3, #1
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	e002      	b.n	800d254 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d24e:	f06f 0302 	mvn.w	r3, #2
 800d252:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d254:	69fb      	ldr	r3, [r7, #28]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3720      	adds	r7, #32
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4a07      	ldr	r2, [pc, #28]	@ (800d290 <vApplicationGetIdleTaskMemory+0x2c>)
 800d274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	4a06      	ldr	r2, [pc, #24]	@ (800d294 <vApplicationGetIdleTaskMemory+0x30>)
 800d27a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2280      	movs	r2, #128	@ 0x80
 800d280:	601a      	str	r2, [r3, #0]
}
 800d282:	bf00      	nop
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	24005120 	.word	0x24005120
 800d294:	240051c8 	.word	0x240051c8

0800d298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4a07      	ldr	r2, [pc, #28]	@ (800d2c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d2a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	4a06      	ldr	r2, [pc, #24]	@ (800d2c8 <vApplicationGetTimerTaskMemory+0x30>)
 800d2ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d2b6:	601a      	str	r2, [r3, #0]
}
 800d2b8:	bf00      	nop
 800d2ba:	3714      	adds	r7, #20
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	240053c8 	.word	0x240053c8
 800d2c8:	24005470 	.word	0x24005470

0800d2cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f103 0208 	add.w	r2, r3, #8
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f103 0208 	add.w	r2, r3, #8
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f103 0208 	add.w	r2, r3, #8
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d31a:	bf00      	nop
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d326:	b480      	push	{r7}
 800d328:	b085      	sub	sp, #20
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689a      	ldr	r2, [r3, #8]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	601a      	str	r2, [r3, #0]
}
 800d362:	bf00      	nop
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d36e:	b480      	push	{r7}
 800d370:	b085      	sub	sp, #20
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d384:	d103      	bne.n	800d38e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	e00c      	b.n	800d3a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3308      	adds	r3, #8
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	e002      	b.n	800d39c <vListInsert+0x2e>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	60fb      	str	r3, [r7, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d2f6      	bcs.n	800d396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	601a      	str	r2, [r3, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	6892      	ldr	r2, [r2, #8]
 800d3f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	6852      	ldr	r2, [r2, #4]
 800d400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d103      	bne.n	800d414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689a      	ldr	r2, [r3, #8]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	1e5a      	subs	r2, r3, #1
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10b      	bne.n	800d460 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d45a:	bf00      	nop
 800d45c:	bf00      	nop
 800d45e:	e7fd      	b.n	800d45c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d460:	f002 fe72 	bl	8010148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d46c:	68f9      	ldr	r1, [r7, #12]
 800d46e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d470:	fb01 f303 	mul.w	r3, r1, r3
 800d474:	441a      	add	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d490:	3b01      	subs	r3, #1
 800d492:	68f9      	ldr	r1, [r7, #12]
 800d494:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d496:	fb01 f303 	mul.w	r3, r1, r3
 800d49a:	441a      	add	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	22ff      	movs	r2, #255	@ 0xff
 800d4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	22ff      	movs	r2, #255	@ 0xff
 800d4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d114      	bne.n	800d4e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01a      	beq.n	800d4f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3310      	adds	r3, #16
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 fd3e 	bl	800ef44 <xTaskRemoveFromEventList>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d012      	beq.n	800d4f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <xQueueGenericReset+0xd0>)
 800d4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	e009      	b.n	800d4f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3310      	adds	r3, #16
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fef1 	bl	800d2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3324      	adds	r3, #36	@ 0x24
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff feec 	bl	800d2cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d4f4:	f002 fe5a 	bl	80101ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d4f8:	2301      	movs	r3, #1
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	e000ed04 	.word	0xe000ed04

0800d508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08e      	sub	sp, #56	@ 0x38
 800d50c:	af02      	add	r7, sp, #8
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10b      	bne.n	800d534 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d52e:	bf00      	nop
 800d530:	bf00      	nop
 800d532:	e7fd      	b.n	800d530 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10b      	bne.n	800d552 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d54c:	bf00      	nop
 800d54e:	bf00      	nop
 800d550:	e7fd      	b.n	800d54e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <xQueueGenericCreateStatic+0x56>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <xQueueGenericCreateStatic+0x5a>
 800d55e:	2301      	movs	r3, #1
 800d560:	e000      	b.n	800d564 <xQueueGenericCreateStatic+0x5c>
 800d562:	2300      	movs	r3, #0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10b      	bne.n	800d580 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	623b      	str	r3, [r7, #32]
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	e7fd      	b.n	800d57c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <xQueueGenericCreateStatic+0x84>
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <xQueueGenericCreateStatic+0x88>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <xQueueGenericCreateStatic+0x8a>
 800d590:	2300      	movs	r3, #0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	61fb      	str	r3, [r7, #28]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d5ae:	2350      	movs	r3, #80	@ 0x50
 800d5b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b50      	cmp	r3, #80	@ 0x50
 800d5b6:	d00b      	beq.n	800d5d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	61bb      	str	r3, [r7, #24]
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d5d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00d      	beq.n	800d5f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 f840 	bl	800d678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3730      	adds	r7, #48	@ 0x30
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d602:	b580      	push	{r7, lr}
 800d604:	b08a      	sub	sp, #40	@ 0x28
 800d606:	af02      	add	r7, sp, #8
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	60b9      	str	r1, [r7, #8]
 800d60c:	4613      	mov	r3, r2
 800d60e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <xQueueGenericCreate+0x2c>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	613b      	str	r3, [r7, #16]
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	3350      	adds	r3, #80	@ 0x50
 800d63c:	4618      	mov	r0, r3
 800d63e:	f002 fea5 	bl	801038c <pvPortMalloc>
 800d642:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d011      	beq.n	800d66e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	3350      	adds	r3, #80	@ 0x50
 800d652:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d65c:	79fa      	ldrb	r2, [r7, #7]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	4613      	mov	r3, r2
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 f805 	bl	800d678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d66e:	69bb      	ldr	r3, [r7, #24]
	}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d103      	bne.n	800d694 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	e002      	b.n	800d69a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	69b8      	ldr	r0, [r7, #24]
 800d6aa:	f7ff fec3 	bl	800d434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	78fa      	ldrb	r2, [r7, #3]
 800d6b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6b6:	bf00      	nop
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00e      	beq.n	800d6ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f911 	bl	800d90c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b086      	sub	sp, #24
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	2300      	movs	r3, #0
 800d702:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d704:	79fb      	ldrb	r3, [r7, #7]
 800d706:	461a      	mov	r2, r3
 800d708:	6939      	ldr	r1, [r7, #16]
 800d70a:	6978      	ldr	r0, [r7, #20]
 800d70c:	f7ff ff79 	bl	800d602 <xQueueGenericCreate>
 800d710:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff ffd3 	bl	800d6be <prvInitialiseMutex>

		return xNewQueue;
 800d718:	68fb      	ldr	r3, [r7, #12]
	}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d722:	b580      	push	{r7, lr}
 800d724:	b088      	sub	sp, #32
 800d726:	af02      	add	r7, sp, #8
 800d728:	4603      	mov	r3, r0
 800d72a:	6039      	str	r1, [r7, #0]
 800d72c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d72e:	2301      	movs	r3, #1
 800d730:	617b      	str	r3, [r7, #20]
 800d732:	2300      	movs	r3, #0
 800d734:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2200      	movs	r2, #0
 800d73e:	6939      	ldr	r1, [r7, #16]
 800d740:	6978      	ldr	r0, [r7, #20]
 800d742:	f7ff fee1 	bl	800d508 <xQueueGenericCreateStatic>
 800d746:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff ffb8 	bl	800d6be <prvInitialiseMutex>

		return xNewQueue;
 800d74e:	68fb      	ldr	r3, [r7, #12]
	}
 800d750:	4618      	mov	r0, r3
 800d752:	3718      	adds	r7, #24
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10b      	bne.n	800d782 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	60fb      	str	r3, [r7, #12]
}
 800d77c:	bf00      	nop
 800d77e:	bf00      	nop
 800d780:	e7fd      	b.n	800d77e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	689c      	ldr	r4, [r3, #8]
 800d786:	f001 fda3 	bl	800f2d0 <xTaskGetCurrentTaskHandle>
 800d78a:	4603      	mov	r3, r0
 800d78c:	429c      	cmp	r4, r3
 800d78e:	d111      	bne.n	800d7b4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	1e5a      	subs	r2, r3, #1
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d105      	bne.n	800d7ae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6938      	ldr	r0, [r7, #16]
 800d7aa:	f000 f8af 	bl	800d90c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	617b      	str	r3, [r7, #20]
 800d7b2:	e001      	b.n	800d7b8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d7b8:	697b      	ldr	r3, [r7, #20]
	}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd90      	pop	{r4, r7, pc}

0800d7c2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d7c2:	b590      	push	{r4, r7, lr}
 800d7c4:	b087      	sub	sp, #28
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10b      	bne.n	800d7ee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	60fb      	str	r3, [r7, #12]
}
 800d7e8:	bf00      	nop
 800d7ea:	bf00      	nop
 800d7ec:	e7fd      	b.n	800d7ea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	689c      	ldr	r4, [r3, #8]
 800d7f2:	f001 fd6d 	bl	800f2d0 <xTaskGetCurrentTaskHandle>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	d107      	bne.n	800d80c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d806:	2301      	movs	r3, #1
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e00c      	b.n	800d826 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6938      	ldr	r0, [r7, #16]
 800d810:	f000 fb8e 	bl	800df30 <xQueueSemaphoreTake>
 800d814:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d004      	beq.n	800d826 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d826:	697b      	ldr	r3, [r7, #20]
	}
 800d828:	4618      	mov	r0, r3
 800d82a:	371c      	adds	r7, #28
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}

0800d830 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	@ 0x28
 800d834:	af02      	add	r7, sp, #8
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10b      	bne.n	800d85a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	61bb      	str	r3, [r7, #24]
}
 800d854:	bf00      	nop
 800d856:	bf00      	nop
 800d858:	e7fd      	b.n	800d856 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d90b      	bls.n	800d87a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	617b      	str	r3, [r7, #20]
}
 800d874:	bf00      	nop
 800d876:	bf00      	nop
 800d878:	e7fd      	b.n	800d876 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d87a:	2302      	movs	r3, #2
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	2100      	movs	r1, #0
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7ff fe3f 	bl	800d508 <xQueueGenericCreateStatic>
 800d88a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d898:	69fb      	ldr	r3, [r7, #28]
	}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3720      	adds	r7, #32
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b086      	sub	sp, #24
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10b      	bne.n	800d8ca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	613b      	str	r3, [r7, #16]
}
 800d8c4:	bf00      	nop
 800d8c6:	bf00      	nop
 800d8c8:	e7fd      	b.n	800d8c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d90b      	bls.n	800d8ea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d6:	f383 8811 	msr	BASEPRI, r3
 800d8da:	f3bf 8f6f 	isb	sy
 800d8de:	f3bf 8f4f 	dsb	sy
 800d8e2:	60fb      	str	r3, [r7, #12]
}
 800d8e4:	bf00      	nop
 800d8e6:	bf00      	nop
 800d8e8:	e7fd      	b.n	800d8e6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fe87 	bl	800d602 <xQueueGenericCreate>
 800d8f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d902:	697b      	ldr	r3, [r7, #20]
	}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08e      	sub	sp, #56	@ 0x38
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d91a:	2300      	movs	r3, #0
 800d91c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10b      	bne.n	800d940 <xQueueGenericSend+0x34>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d93a:	bf00      	nop
 800d93c:	bf00      	nop
 800d93e:	e7fd      	b.n	800d93c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d103      	bne.n	800d94e <xQueueGenericSend+0x42>
 800d946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <xQueueGenericSend+0x46>
 800d94e:	2301      	movs	r3, #1
 800d950:	e000      	b.n	800d954 <xQueueGenericSend+0x48>
 800d952:	2300      	movs	r3, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10b      	bne.n	800d970 <xQueueGenericSend+0x64>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d96a:	bf00      	nop
 800d96c:	bf00      	nop
 800d96e:	e7fd      	b.n	800d96c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b02      	cmp	r3, #2
 800d974:	d103      	bne.n	800d97e <xQueueGenericSend+0x72>
 800d976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d101      	bne.n	800d982 <xQueueGenericSend+0x76>
 800d97e:	2301      	movs	r3, #1
 800d980:	e000      	b.n	800d984 <xQueueGenericSend+0x78>
 800d982:	2300      	movs	r3, #0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10b      	bne.n	800d9a0 <xQueueGenericSend+0x94>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	623b      	str	r3, [r7, #32]
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	e7fd      	b.n	800d99c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9a0:	f001 fca6 	bl	800f2f0 <xTaskGetSchedulerState>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <xQueueGenericSend+0xa4>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <xQueueGenericSend+0xa8>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e000      	b.n	800d9b6 <xQueueGenericSend+0xaa>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10b      	bne.n	800d9d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9be:	f383 8811 	msr	BASEPRI, r3
 800d9c2:	f3bf 8f6f 	isb	sy
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	61fb      	str	r3, [r7, #28]
}
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
 800d9d0:	e7fd      	b.n	800d9ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9d2:	f002 fbb9 	bl	8010148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d302      	bcc.n	800d9e8 <xQueueGenericSend+0xdc>
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d129      	bne.n	800da3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9ee:	f000 fc6d 	bl	800e2cc <prvCopyDataToQueue>
 800d9f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d010      	beq.n	800da1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fe:	3324      	adds	r3, #36	@ 0x24
 800da00:	4618      	mov	r0, r3
 800da02:	f001 fa9f 	bl	800ef44 <xTaskRemoveFromEventList>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d013      	beq.n	800da34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da0c:	4b3f      	ldr	r3, [pc, #252]	@ (800db0c <xQueueGenericSend+0x200>)
 800da0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	e00a      	b.n	800da34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d007      	beq.n	800da34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da24:	4b39      	ldr	r3, [pc, #228]	@ (800db0c <xQueueGenericSend+0x200>)
 800da26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da34:	f002 fbba 	bl	80101ac <vPortExitCritical>
				return pdPASS;
 800da38:	2301      	movs	r3, #1
 800da3a:	e063      	b.n	800db04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d103      	bne.n	800da4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da42:	f002 fbb3 	bl	80101ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da46:	2300      	movs	r3, #0
 800da48:	e05c      	b.n	800db04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da50:	f107 0314 	add.w	r3, r7, #20
 800da54:	4618      	mov	r0, r3
 800da56:	f001 fad9 	bl	800f00c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da5a:	2301      	movs	r3, #1
 800da5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da5e:	f002 fba5 	bl	80101ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da62:	f001 f82f 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da66:	f002 fb6f 	bl	8010148 <vPortEnterCritical>
 800da6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da70:	b25b      	sxtb	r3, r3
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da76:	d103      	bne.n	800da80 <xQueueGenericSend+0x174>
 800da78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da86:	b25b      	sxtb	r3, r3
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8c:	d103      	bne.n	800da96 <xQueueGenericSend+0x18a>
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da96:	f002 fb89 	bl	80101ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da9a:	1d3a      	adds	r2, r7, #4
 800da9c:	f107 0314 	add.w	r3, r7, #20
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f001 fac8 	bl	800f038 <xTaskCheckForTimeOut>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d124      	bne.n	800daf8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800daae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dab0:	f000 fd04 	bl	800e4bc <prvIsQueueFull>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d018      	beq.n	800daec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800daba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dabc:	3310      	adds	r3, #16
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	4611      	mov	r1, r2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f001 f9ec 	bl	800eea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daca:	f000 fc8f 	bl	800e3ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dace:	f001 f807 	bl	800eae0 <xTaskResumeAll>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f47f af7c 	bne.w	800d9d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dada:	4b0c      	ldr	r3, [pc, #48]	@ (800db0c <xQueueGenericSend+0x200>)
 800dadc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dae0:	601a      	str	r2, [r3, #0]
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	e772      	b.n	800d9d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800daec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daee:	f000 fc7d 	bl	800e3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800daf2:	f000 fff5 	bl	800eae0 <xTaskResumeAll>
 800daf6:	e76c      	b.n	800d9d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800daf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dafa:	f000 fc77 	bl	800e3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dafe:	f000 ffef 	bl	800eae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db04:	4618      	mov	r0, r3
 800db06:	3738      	adds	r7, #56	@ 0x38
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	e000ed04 	.word	0xe000ed04

0800db10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b090      	sub	sp, #64	@ 0x40
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800db22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10b      	bne.n	800db40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800db3a:	bf00      	nop
 800db3c:	bf00      	nop
 800db3e:	e7fd      	b.n	800db3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d103      	bne.n	800db4e <xQueueGenericSendFromISR+0x3e>
 800db46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <xQueueGenericSendFromISR+0x42>
 800db4e:	2301      	movs	r3, #1
 800db50:	e000      	b.n	800db54 <xQueueGenericSendFromISR+0x44>
 800db52:	2300      	movs	r3, #0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10b      	bne.n	800db70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	e7fd      	b.n	800db6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b02      	cmp	r3, #2
 800db74:	d103      	bne.n	800db7e <xQueueGenericSendFromISR+0x6e>
 800db76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d101      	bne.n	800db82 <xQueueGenericSendFromISR+0x72>
 800db7e:	2301      	movs	r3, #1
 800db80:	e000      	b.n	800db84 <xQueueGenericSendFromISR+0x74>
 800db82:	2300      	movs	r3, #0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10b      	bne.n	800dba0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	623b      	str	r3, [r7, #32]
}
 800db9a:	bf00      	nop
 800db9c:	bf00      	nop
 800db9e:	e7fd      	b.n	800db9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dba0:	f002 fbb2 	bl	8010308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dba4:	f3ef 8211 	mrs	r2, BASEPRI
 800dba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	61fa      	str	r2, [r7, #28]
 800dbba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbbc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbbe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d302      	bcc.n	800dbd2 <xQueueGenericSendFromISR+0xc2>
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d12f      	bne.n	800dc32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbe8:	f000 fb70 	bl	800e2cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf4:	d112      	bne.n	800dc1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d016      	beq.n	800dc2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc00:	3324      	adds	r3, #36	@ 0x24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f001 f99e 	bl	800ef44 <xTaskRemoveFromEventList>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00e      	beq.n	800dc2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00b      	beq.n	800dc2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	e007      	b.n	800dc2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc20:	3301      	adds	r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	b25a      	sxtb	r2, r3
 800dc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dc30:	e001      	b.n	800dc36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3740      	adds	r7, #64	@ 0x40
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08e      	sub	sp, #56	@ 0x38
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10b      	bne.n	800dc78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800dc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	623b      	str	r3, [r7, #32]
}
 800dc72:	bf00      	nop
 800dc74:	bf00      	nop
 800dc76:	e7fd      	b.n	800dc74 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	61fb      	str	r3, [r7, #28]
}
 800dc92:	bf00      	nop
 800dc94:	bf00      	nop
 800dc96:	e7fd      	b.n	800dc94 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d103      	bne.n	800dca8 <xQueueGiveFromISR+0x5c>
 800dca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <xQueueGiveFromISR+0x60>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e000      	b.n	800dcae <xQueueGiveFromISR+0x62>
 800dcac:	2300      	movs	r3, #0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10b      	bne.n	800dcca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	61bb      	str	r3, [r7, #24]
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop
 800dcc8:	e7fd      	b.n	800dcc6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcca:	f002 fb1d 	bl	8010308 <vPortValidateInterruptPriority>
	__asm volatile
 800dcce:	f3ef 8211 	mrs	r2, BASEPRI
 800dcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	617a      	str	r2, [r7, #20]
 800dce4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dce6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d22b      	bcs.n	800dd52 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd14:	d112      	bne.n	800dd3c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d016      	beq.n	800dd4c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd20:	3324      	adds	r3, #36	@ 0x24
 800dd22:	4618      	mov	r0, r3
 800dd24:	f001 f90e 	bl	800ef44 <xTaskRemoveFromEventList>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00e      	beq.n	800dd4c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00b      	beq.n	800dd4c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2201      	movs	r2, #1
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	e007      	b.n	800dd4c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd40:	3301      	adds	r3, #1
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	b25a      	sxtb	r2, r3
 800dd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd50:	e001      	b.n	800dd56 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f383 8811 	msr	BASEPRI, r3
}
 800dd60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3738      	adds	r7, #56	@ 0x38
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	@ 0x30
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10b      	bne.n	800dd9e <xQueueReceive+0x32>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	623b      	str	r3, [r7, #32]
}
 800dd98:	bf00      	nop
 800dd9a:	bf00      	nop
 800dd9c:	e7fd      	b.n	800dd9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d103      	bne.n	800ddac <xQueueReceive+0x40>
 800dda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <xQueueReceive+0x44>
 800ddac:	2301      	movs	r3, #1
 800ddae:	e000      	b.n	800ddb2 <xQueueReceive+0x46>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10b      	bne.n	800ddce <xQueueReceive+0x62>
	__asm volatile
 800ddb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	61fb      	str	r3, [r7, #28]
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	e7fd      	b.n	800ddca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddce:	f001 fa8f 	bl	800f2f0 <xTaskGetSchedulerState>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d102      	bne.n	800ddde <xQueueReceive+0x72>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <xQueueReceive+0x76>
 800ddde:	2301      	movs	r3, #1
 800dde0:	e000      	b.n	800dde4 <xQueueReceive+0x78>
 800dde2:	2300      	movs	r3, #0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10b      	bne.n	800de00 <xQueueReceive+0x94>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	61bb      	str	r3, [r7, #24]
}
 800ddfa:	bf00      	nop
 800ddfc:	bf00      	nop
 800ddfe:	e7fd      	b.n	800ddfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de00:	f002 f9a2 	bl	8010148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d01f      	beq.n	800de50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de10:	68b9      	ldr	r1, [r7, #8]
 800de12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de14:	f000 fac4 	bl	800e3a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1a:	1e5a      	subs	r2, r3, #1
 800de1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00f      	beq.n	800de48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	3310      	adds	r3, #16
 800de2c:	4618      	mov	r0, r3
 800de2e:	f001 f889 	bl	800ef44 <xTaskRemoveFromEventList>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de38:	4b3c      	ldr	r3, [pc, #240]	@ (800df2c <xQueueReceive+0x1c0>)
 800de3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de48:	f002 f9b0 	bl	80101ac <vPortExitCritical>
				return pdPASS;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e069      	b.n	800df24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d103      	bne.n	800de5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de56:	f002 f9a9 	bl	80101ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de5a:	2300      	movs	r3, #0
 800de5c:	e062      	b.n	800df24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d106      	bne.n	800de72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de64:	f107 0310 	add.w	r3, r7, #16
 800de68:	4618      	mov	r0, r3
 800de6a:	f001 f8cf 	bl	800f00c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de6e:	2301      	movs	r3, #1
 800de70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de72:	f002 f99b 	bl	80101ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de76:	f000 fe25 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de7a:	f002 f965 	bl	8010148 <vPortEnterCritical>
 800de7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de84:	b25b      	sxtb	r3, r3
 800de86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8a:	d103      	bne.n	800de94 <xQueueReceive+0x128>
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de9a:	b25b      	sxtb	r3, r3
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea0:	d103      	bne.n	800deaa <xQueueReceive+0x13e>
 800dea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deaa:	f002 f97f 	bl	80101ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deae:	1d3a      	adds	r2, r7, #4
 800deb0:	f107 0310 	add.w	r3, r7, #16
 800deb4:	4611      	mov	r1, r2
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 f8be 	bl	800f038 <xTaskCheckForTimeOut>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d123      	bne.n	800df0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec4:	f000 fae4 	bl	800e490 <prvIsQueueEmpty>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d017      	beq.n	800defe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded0:	3324      	adds	r3, #36	@ 0x24
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 ffe2 	bl	800eea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dedc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dede:	f000 fa85 	bl	800e3ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dee2:	f000 fdfd 	bl	800eae0 <xTaskResumeAll>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d189      	bne.n	800de00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800deec:	4b0f      	ldr	r3, [pc, #60]	@ (800df2c <xQueueReceive+0x1c0>)
 800deee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	f3bf 8f4f 	dsb	sy
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	e780      	b.n	800de00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800defe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df00:	f000 fa74 	bl	800e3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df04:	f000 fdec 	bl	800eae0 <xTaskResumeAll>
 800df08:	e77a      	b.n	800de00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df0c:	f000 fa6e 	bl	800e3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df10:	f000 fde6 	bl	800eae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df16:	f000 fabb 	bl	800e490 <prvIsQueueEmpty>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f43f af6f 	beq.w	800de00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df24:	4618      	mov	r0, r3
 800df26:	3730      	adds	r7, #48	@ 0x30
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	e000ed04 	.word	0xe000ed04

0800df30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b08e      	sub	sp, #56	@ 0x38
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df3a:	2300      	movs	r3, #0
 800df3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df42:	2300      	movs	r3, #0
 800df44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10b      	bne.n	800df64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	623b      	str	r3, [r7, #32]
}
 800df5e:	bf00      	nop
 800df60:	bf00      	nop
 800df62:	e7fd      	b.n	800df60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00b      	beq.n	800df84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	61fb      	str	r3, [r7, #28]
}
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	e7fd      	b.n	800df80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df84:	f001 f9b4 	bl	800f2f0 <xTaskGetSchedulerState>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d102      	bne.n	800df94 <xQueueSemaphoreTake+0x64>
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d101      	bne.n	800df98 <xQueueSemaphoreTake+0x68>
 800df94:	2301      	movs	r3, #1
 800df96:	e000      	b.n	800df9a <xQueueSemaphoreTake+0x6a>
 800df98:	2300      	movs	r3, #0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10b      	bne.n	800dfb6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	61bb      	str	r3, [r7, #24]
}
 800dfb0:	bf00      	nop
 800dfb2:	bf00      	nop
 800dfb4:	e7fd      	b.n	800dfb2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfb6:	f002 f8c7 	bl	8010148 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d024      	beq.n	800e010 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc8:	1e5a      	subs	r2, r3, #1
 800dfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfcc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfd6:	f001 fb05 	bl	800f5e4 <pvTaskIncrementMutexHeldCount>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00f      	beq.n	800e008 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfea:	3310      	adds	r3, #16
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 ffa9 	bl	800ef44 <xTaskRemoveFromEventList>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d007      	beq.n	800e008 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dff8:	4b54      	ldr	r3, [pc, #336]	@ (800e14c <xQueueSemaphoreTake+0x21c>)
 800dffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dffe:	601a      	str	r2, [r3, #0]
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e008:	f002 f8d0 	bl	80101ac <vPortExitCritical>
				return pdPASS;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e098      	b.n	800e142 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d112      	bne.n	800e03c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	617b      	str	r3, [r7, #20]
}
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
 800e032:	e7fd      	b.n	800e030 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e034:	f002 f8ba 	bl	80101ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e038:	2300      	movs	r3, #0
 800e03a:	e082      	b.n	800e142 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d106      	bne.n	800e050 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e042:	f107 030c 	add.w	r3, r7, #12
 800e046:	4618      	mov	r0, r3
 800e048:	f000 ffe0 	bl	800f00c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e050:	f002 f8ac 	bl	80101ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e054:	f000 fd36 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e058:	f002 f876 	bl	8010148 <vPortEnterCritical>
 800e05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e062:	b25b      	sxtb	r3, r3
 800e064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e068:	d103      	bne.n	800e072 <xQueueSemaphoreTake+0x142>
 800e06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e078:	b25b      	sxtb	r3, r3
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07e:	d103      	bne.n	800e088 <xQueueSemaphoreTake+0x158>
 800e080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e088:	f002 f890 	bl	80101ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e08c:	463a      	mov	r2, r7
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	4611      	mov	r1, r2
 800e094:	4618      	mov	r0, r3
 800e096:	f000 ffcf 	bl	800f038 <xTaskCheckForTimeOut>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d132      	bne.n	800e106 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0a2:	f000 f9f5 	bl	800e490 <prvIsQueueEmpty>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d026      	beq.n	800e0fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d109      	bne.n	800e0c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e0b4:	f002 f848 	bl	8010148 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f001 f935 	bl	800f32c <xTaskPriorityInherit>
 800e0c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e0c4:	f002 f872 	bl	80101ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ca:	3324      	adds	r3, #36	@ 0x24
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f000 fee5 	bl	800eea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0d8:	f000 f988 	bl	800e3ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0dc:	f000 fd00 	bl	800eae0 <xTaskResumeAll>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f47f af67 	bne.w	800dfb6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e0e8:	4b18      	ldr	r3, [pc, #96]	@ (800e14c <xQueueSemaphoreTake+0x21c>)
 800e0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	e75d      	b.n	800dfb6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0fc:	f000 f976 	bl	800e3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e100:	f000 fcee 	bl	800eae0 <xTaskResumeAll>
 800e104:	e757      	b.n	800dfb6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e108:	f000 f970 	bl	800e3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e10c:	f000 fce8 	bl	800eae0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e112:	f000 f9bd 	bl	800e490 <prvIsQueueEmpty>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f43f af4c 	beq.w	800dfb6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00d      	beq.n	800e140 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e124:	f002 f810 	bl	8010148 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e12a:	f000 f8b7 	bl	800e29c <prvGetDisinheritPriorityAfterTimeout>
 800e12e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e136:	4618      	mov	r0, r3
 800e138:	f001 f9d0 	bl	800f4dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e13c:	f002 f836 	bl	80101ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e142:	4618      	mov	r0, r3
 800e144:	3738      	adds	r7, #56	@ 0x38
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	e000ed04 	.word	0xe000ed04

0800e150 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08e      	sub	sp, #56	@ 0x38
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10b      	bne.n	800e17e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	623b      	str	r3, [r7, #32]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d103      	bne.n	800e18c <xQueueReceiveFromISR+0x3c>
 800e184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <xQueueReceiveFromISR+0x40>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e000      	b.n	800e192 <xQueueReceiveFromISR+0x42>
 800e190:	2300      	movs	r3, #0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10b      	bne.n	800e1ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	61fb      	str	r3, [r7, #28]
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	e7fd      	b.n	800e1aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1ae:	f002 f8ab 	bl	8010308 <vPortValidateInterruptPriority>
	__asm volatile
 800e1b2:	f3ef 8211 	mrs	r2, BASEPRI
 800e1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	61ba      	str	r2, [r7, #24]
 800e1c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d02f      	beq.n	800e23a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1e4:	68b9      	ldr	r1, [r7, #8]
 800e1e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1e8:	f000 f8da 	bl	800e3a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ee:	1e5a      	subs	r2, r3, #1
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fc:	d112      	bne.n	800e224 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d016      	beq.n	800e234 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e208:	3310      	adds	r3, #16
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 fe9a 	bl	800ef44 <xTaskRemoveFromEventList>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00e      	beq.n	800e234 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	e007      	b.n	800e234 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e228:	3301      	adds	r3, #1
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	b25a      	sxtb	r2, r3
 800e22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e234:	2301      	movs	r3, #1
 800e236:	637b      	str	r3, [r7, #52]	@ 0x34
 800e238:	e001      	b.n	800e23e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e240:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	f383 8811 	msr	BASEPRI, r3
}
 800e248:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3738      	adds	r7, #56	@ 0x38
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10b      	bne.n	800e27e <vQueueDelete+0x2a>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	60bb      	str	r3, [r7, #8]
}
 800e278:	bf00      	nop
 800e27a:	bf00      	nop
 800e27c:	e7fd      	b.n	800e27a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f000 f95e 	bl	800e540 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f002 f94a 	bl	8010528 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e294:	bf00      	nop
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d006      	beq.n	800e2ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	e001      	b.n	800e2be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e2be:	68fb      	ldr	r3, [r7, #12]
	}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10d      	bne.n	800e306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d14d      	bne.n	800e38e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f001 f880 	bl	800f3fc <xTaskPriorityDisinherit>
 800e2fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	609a      	str	r2, [r3, #8]
 800e304:	e043      	b.n	800e38e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d119      	bne.n	800e340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6858      	ldr	r0, [r3, #4]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e314:	461a      	mov	r2, r3
 800e316:	68b9      	ldr	r1, [r7, #8]
 800e318:	f00f fcf1 	bl	801dcfe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e324:	441a      	add	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	429a      	cmp	r2, r3
 800e334:	d32b      	bcc.n	800e38e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	e026      	b.n	800e38e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68d8      	ldr	r0, [r3, #12]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e348:	461a      	mov	r2, r3
 800e34a:	68b9      	ldr	r1, [r7, #8]
 800e34c:	f00f fcd7 	bl	801dcfe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68da      	ldr	r2, [r3, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e358:	425b      	negs	r3, r3
 800e35a:	441a      	add	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	68da      	ldr	r2, [r3, #12]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d207      	bcs.n	800e37c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e374:	425b      	negs	r3, r3
 800e376:	441a      	add	r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d105      	bne.n	800e38e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e396:	697b      	ldr	r3, [r7, #20]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d018      	beq.n	800e3e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	68da      	ldr	r2, [r3, #12]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ba:	441a      	add	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68da      	ldr	r2, [r3, #12]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d303      	bcc.n	800e3d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68d9      	ldr	r1, [r3, #12]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3dc:	461a      	mov	r2, r3
 800e3de:	6838      	ldr	r0, [r7, #0]
 800e3e0:	f00f fc8d 	bl	801dcfe <memcpy>
	}
}
 800e3e4:	bf00      	nop
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e3f4:	f001 fea8 	bl	8010148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e400:	e011      	b.n	800e426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e406:	2b00      	cmp	r3, #0
 800e408:	d012      	beq.n	800e430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3324      	adds	r3, #36	@ 0x24
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 fd98 	bl	800ef44 <xTaskRemoveFromEventList>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e41a:	f000 fe71 	bl	800f100 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
 800e420:	3b01      	subs	r3, #1
 800e422:	b2db      	uxtb	r3, r3
 800e424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	dce9      	bgt.n	800e402 <prvUnlockQueue+0x16>
 800e42e:	e000      	b.n	800e432 <prvUnlockQueue+0x46>
					break;
 800e430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	22ff      	movs	r2, #255	@ 0xff
 800e436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e43a:	f001 feb7 	bl	80101ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e43e:	f001 fe83 	bl	8010148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e44a:	e011      	b.n	800e470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d012      	beq.n	800e47a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3310      	adds	r3, #16
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 fd73 	bl	800ef44 <xTaskRemoveFromEventList>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e464:	f000 fe4c 	bl	800f100 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e474:	2b00      	cmp	r3, #0
 800e476:	dce9      	bgt.n	800e44c <prvUnlockQueue+0x60>
 800e478:	e000      	b.n	800e47c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e47a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	22ff      	movs	r2, #255	@ 0xff
 800e480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e484:	f001 fe92 	bl	80101ac <vPortExitCritical>
}
 800e488:	bf00      	nop
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e498:	f001 fe56 	bl	8010148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	60fb      	str	r3, [r7, #12]
 800e4a8:	e001      	b.n	800e4ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4ae:	f001 fe7d 	bl	80101ac <vPortExitCritical>

	return xReturn;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e4c4:	f001 fe40 	bl	8010148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d102      	bne.n	800e4da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e001      	b.n	800e4de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4de:	f001 fe65 	bl	80101ac <vPortExitCritical>

	return xReturn;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	e014      	b.n	800e526 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e4fc:	4a0f      	ldr	r2, [pc, #60]	@ (800e53c <vQueueAddToRegistry+0x50>)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10b      	bne.n	800e520 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e508:	490c      	ldr	r1, [pc, #48]	@ (800e53c <vQueueAddToRegistry+0x50>)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e512:	4a0a      	ldr	r2, [pc, #40]	@ (800e53c <vQueueAddToRegistry+0x50>)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	4413      	add	r3, r2
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e51e:	e006      	b.n	800e52e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	3301      	adds	r3, #1
 800e524:	60fb      	str	r3, [r7, #12]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b07      	cmp	r3, #7
 800e52a:	d9e7      	bls.n	800e4fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e52c:	bf00      	nop
 800e52e:	bf00      	nop
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop
 800e53c:	24005870 	.word	0x24005870

0800e540 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e548:	2300      	movs	r3, #0
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	e016      	b.n	800e57c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e54e:	4a10      	ldr	r2, [pc, #64]	@ (800e590 <vQueueUnregisterQueue+0x50>)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	4413      	add	r3, r2
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d10b      	bne.n	800e576 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e55e:	4a0c      	ldr	r2, [pc, #48]	@ (800e590 <vQueueUnregisterQueue+0x50>)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2100      	movs	r1, #0
 800e564:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e568:	4a09      	ldr	r2, [pc, #36]	@ (800e590 <vQueueUnregisterQueue+0x50>)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	4413      	add	r3, r2
 800e570:	2200      	movs	r2, #0
 800e572:	605a      	str	r2, [r3, #4]
				break;
 800e574:	e006      	b.n	800e584 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3301      	adds	r3, #1
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b07      	cmp	r3, #7
 800e580:	d9e5      	bls.n	800e54e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e582:	bf00      	nop
 800e584:	bf00      	nop
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	24005870 	.word	0x24005870

0800e594 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e5a4:	f001 fdd0 	bl	8010148 <vPortEnterCritical>
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5ae:	b25b      	sxtb	r3, r3
 800e5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b4:	d103      	bne.n	800e5be <vQueueWaitForMessageRestricted+0x2a>
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5c4:	b25b      	sxtb	r3, r3
 800e5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ca:	d103      	bne.n	800e5d4 <vQueueWaitForMessageRestricted+0x40>
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5d4:	f001 fdea 	bl	80101ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d106      	bne.n	800e5ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	3324      	adds	r3, #36	@ 0x24
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f000 fc7f 	bl	800eeec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e5ee:	6978      	ldr	r0, [r7, #20]
 800e5f0:	f7ff fefc 	bl	800e3ec <prvUnlockQueue>
	}
 800e5f4:	bf00      	nop
 800e5f6:	3718      	adds	r7, #24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08e      	sub	sp, #56	@ 0x38
 800e600:	af04      	add	r7, sp, #16
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10b      	bne.n	800e628 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	623b      	str	r3, [r7, #32]
}
 800e622:	bf00      	nop
 800e624:	bf00      	nop
 800e626:	e7fd      	b.n	800e624 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10b      	bne.n	800e646 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	61fb      	str	r3, [r7, #28]
}
 800e640:	bf00      	nop
 800e642:	bf00      	nop
 800e644:	e7fd      	b.n	800e642 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e646:	23a8      	movs	r3, #168	@ 0xa8
 800e648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e64e:	d00b      	beq.n	800e668 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	61bb      	str	r3, [r7, #24]
}
 800e662:	bf00      	nop
 800e664:	bf00      	nop
 800e666:	e7fd      	b.n	800e664 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e668:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d01e      	beq.n	800e6ae <xTaskCreateStatic+0xb2>
 800e670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e672:	2b00      	cmp	r3, #0
 800e674:	d01b      	beq.n	800e6ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e678:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e67e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e682:	2202      	movs	r2, #2
 800e684:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e688:	2300      	movs	r3, #0
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68e:	9302      	str	r3, [sp, #8]
 800e690:	f107 0314 	add.w	r3, r7, #20
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f000 f851 	bl	800e748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e6a8:	f000 f8f6 	bl	800e898 <prvAddNewTaskToReadyList>
 800e6ac:	e001      	b.n	800e6b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e6b2:	697b      	ldr	r3, [r7, #20]
	}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3728      	adds	r7, #40	@ 0x28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08c      	sub	sp, #48	@ 0x30
 800e6c0:	af04      	add	r7, sp, #16
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e6cc:	88fb      	ldrh	r3, [r7, #6]
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f001 fe5b 	bl	801038c <pvPortMalloc>
 800e6d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e6de:	20a8      	movs	r0, #168	@ 0xa8
 800e6e0:	f001 fe54 	bl	801038c <pvPortMalloc>
 800e6e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d003      	beq.n	800e6f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6f2:	e005      	b.n	800e700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e6f4:	6978      	ldr	r0, [r7, #20]
 800e6f6:	f001 ff17 	bl	8010528 <vPortFree>
 800e6fa:	e001      	b.n	800e700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d017      	beq.n	800e736 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e70e:	88fa      	ldrh	r2, [r7, #6]
 800e710:	2300      	movs	r3, #0
 800e712:	9303      	str	r3, [sp, #12]
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	9302      	str	r3, [sp, #8]
 800e718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71a:	9301      	str	r3, [sp, #4]
 800e71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68b9      	ldr	r1, [r7, #8]
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 f80f 	bl	800e748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e72a:	69f8      	ldr	r0, [r7, #28]
 800e72c:	f000 f8b4 	bl	800e898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	e002      	b.n	800e73c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e736:	f04f 33ff 	mov.w	r3, #4294967295
 800e73a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e73c:	69bb      	ldr	r3, [r7, #24]
	}
 800e73e:	4618      	mov	r0, r3
 800e740:	3720      	adds	r7, #32
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b088      	sub	sp, #32
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
 800e754:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e758:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	461a      	mov	r2, r3
 800e760:	21a5      	movs	r1, #165	@ 0xa5
 800e762:	f00f f9fd 	bl	801db60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e76a:	6879      	ldr	r1, [r7, #4]
 800e76c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e770:	440b      	add	r3, r1
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f023 0307 	bic.w	r3, r3, #7
 800e77e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00b      	beq.n	800e7a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	617b      	str	r3, [r7, #20]
}
 800e79c:	bf00      	nop
 800e79e:	bf00      	nop
 800e7a0:	e7fd      	b.n	800e79e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d01f      	beq.n	800e7e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61fb      	str	r3, [r7, #28]
 800e7ac:	e012      	b.n	800e7d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	7819      	ldrb	r1, [r3, #0]
 800e7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	3334      	adds	r3, #52	@ 0x34
 800e7be:	460a      	mov	r2, r1
 800e7c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d006      	beq.n	800e7dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	61fb      	str	r3, [r7, #28]
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	2b0f      	cmp	r3, #15
 800e7d8:	d9e9      	bls.n	800e7ae <prvInitialiseNewTask+0x66>
 800e7da:	e000      	b.n	800e7de <prvInitialiseNewTask+0x96>
			{
				break;
 800e7dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e7e6:	e003      	b.n	800e7f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f2:	2b37      	cmp	r3, #55	@ 0x37
 800e7f4:	d901      	bls.n	800e7fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e7f6:	2337      	movs	r3, #55	@ 0x37
 800e7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e804:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e808:	2200      	movs	r2, #0
 800e80a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80e:	3304      	adds	r3, #4
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe fd7b 	bl	800d30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e818:	3318      	adds	r3, #24
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe fd76 	bl	800d30c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e828:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e834:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e838:	2200      	movs	r2, #0
 800e83a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	2200      	movs	r2, #0
 800e842:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e848:	3354      	adds	r3, #84	@ 0x54
 800e84a:	224c      	movs	r2, #76	@ 0x4c
 800e84c:	2100      	movs	r1, #0
 800e84e:	4618      	mov	r0, r3
 800e850:	f00f f986 	bl	801db60 <memset>
 800e854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e856:	4a0d      	ldr	r2, [pc, #52]	@ (800e88c <prvInitialiseNewTask+0x144>)
 800e858:	659a      	str	r2, [r3, #88]	@ 0x58
 800e85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e85c:	4a0c      	ldr	r2, [pc, #48]	@ (800e890 <prvInitialiseNewTask+0x148>)
 800e85e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e862:	4a0c      	ldr	r2, [pc, #48]	@ (800e894 <prvInitialiseNewTask+0x14c>)
 800e864:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	68f9      	ldr	r1, [r7, #12]
 800e86a:	69b8      	ldr	r0, [r7, #24]
 800e86c:	f001 fb3c 	bl	800fee8 <pxPortInitialiseStack>
 800e870:	4602      	mov	r2, r0
 800e872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e882:	bf00      	nop
 800e884:	3720      	adds	r7, #32
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	2400cdc8 	.word	0x2400cdc8
 800e890:	2400ce30 	.word	0x2400ce30
 800e894:	2400ce98 	.word	0x2400ce98

0800e898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e8a0:	f001 fc52 	bl	8010148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e8a4:	4b2d      	ldr	r3, [pc, #180]	@ (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4a2c      	ldr	r2, [pc, #176]	@ (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e8ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d109      	bne.n	800e8ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e8b6:	4a2a      	ldr	r2, [pc, #168]	@ (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e8bc:	4b27      	ldr	r3, [pc, #156]	@ (800e95c <prvAddNewTaskToReadyList+0xc4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d110      	bne.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e8c4:	f000 fc40 	bl	800f148 <prvInitialiseTaskLists>
 800e8c8:	e00d      	b.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e8ca:	4b26      	ldr	r3, [pc, #152]	@ (800e964 <prvAddNewTaskToReadyList+0xcc>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e8d2:	4b23      	ldr	r3, [pc, #140]	@ (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d802      	bhi.n	800e8e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e8e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8e6:	4b20      	ldr	r3, [pc, #128]	@ (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	4a1e      	ldr	r2, [pc, #120]	@ (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e968 <prvAddNewTaskToReadyList+0xd0>)
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8fc:	4b1b      	ldr	r3, [pc, #108]	@ (800e96c <prvAddNewTaskToReadyList+0xd4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d903      	bls.n	800e90c <prvAddNewTaskToReadyList+0x74>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e908:	4a18      	ldr	r2, [pc, #96]	@ (800e96c <prvAddNewTaskToReadyList+0xd4>)
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4a15      	ldr	r2, [pc, #84]	@ (800e970 <prvAddNewTaskToReadyList+0xd8>)
 800e91a:	441a      	add	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7fe fcff 	bl	800d326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e928:	f001 fc40 	bl	80101ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e92c:	4b0d      	ldr	r3, [pc, #52]	@ (800e964 <prvAddNewTaskToReadyList+0xcc>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00e      	beq.n	800e952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e934:	4b0a      	ldr	r3, [pc, #40]	@ (800e960 <prvAddNewTaskToReadyList+0xc8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e93e:	429a      	cmp	r2, r3
 800e940:	d207      	bcs.n	800e952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e942:	4b0c      	ldr	r3, [pc, #48]	@ (800e974 <prvAddNewTaskToReadyList+0xdc>)
 800e944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e952:	bf00      	nop
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	24005d84 	.word	0x24005d84
 800e960:	240058b0 	.word	0x240058b0
 800e964:	24005d90 	.word	0x24005d90
 800e968:	24005da0 	.word	0x24005da0
 800e96c:	24005d8c 	.word	0x24005d8c
 800e970:	240058b4 	.word	0x240058b4
 800e974:	e000ed04 	.word	0xe000ed04

0800e978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e980:	2300      	movs	r3, #0
 800e982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d018      	beq.n	800e9bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e98a:	4b14      	ldr	r3, [pc, #80]	@ (800e9dc <vTaskDelay+0x64>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00b      	beq.n	800e9aa <vTaskDelay+0x32>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	60bb      	str	r3, [r7, #8]
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	e7fd      	b.n	800e9a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e9aa:	f000 f88b 	bl	800eac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 fe2b 	bl	800f60c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e9b6:	f000 f893 	bl	800eae0 <xTaskResumeAll>
 800e9ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d107      	bne.n	800e9d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e9c2:	4b07      	ldr	r3, [pc, #28]	@ (800e9e0 <vTaskDelay+0x68>)
 800e9c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	24005dac 	.word	0x24005dac
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b08a      	sub	sp, #40	@ 0x28
 800e9e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9f2:	463a      	mov	r2, r7
 800e9f4:	1d39      	adds	r1, r7, #4
 800e9f6:	f107 0308 	add.w	r3, r7, #8
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe fc32 	bl	800d264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ea00:	6839      	ldr	r1, [r7, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	9202      	str	r2, [sp, #8]
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	2300      	movs	r3, #0
 800ea10:	460a      	mov	r2, r1
 800ea12:	4924      	ldr	r1, [pc, #144]	@ (800eaa4 <vTaskStartScheduler+0xc0>)
 800ea14:	4824      	ldr	r0, [pc, #144]	@ (800eaa8 <vTaskStartScheduler+0xc4>)
 800ea16:	f7ff fdf1 	bl	800e5fc <xTaskCreateStatic>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	4a23      	ldr	r2, [pc, #140]	@ (800eaac <vTaskStartScheduler+0xc8>)
 800ea1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ea20:	4b22      	ldr	r3, [pc, #136]	@ (800eaac <vTaskStartScheduler+0xc8>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e001      	b.n	800ea32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d102      	bne.n	800ea3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ea38:	f000 fe3c 	bl	800f6b4 <xTimerCreateTimerTask>
 800ea3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d11b      	bne.n	800ea7c <vTaskStartScheduler+0x98>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	613b      	str	r3, [r7, #16]
}
 800ea56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea58:	4b15      	ldr	r3, [pc, #84]	@ (800eab0 <vTaskStartScheduler+0xcc>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3354      	adds	r3, #84	@ 0x54
 800ea5e:	4a15      	ldr	r2, [pc, #84]	@ (800eab4 <vTaskStartScheduler+0xd0>)
 800ea60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea62:	4b15      	ldr	r3, [pc, #84]	@ (800eab8 <vTaskStartScheduler+0xd4>)
 800ea64:	f04f 32ff 	mov.w	r2, #4294967295
 800ea68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea6a:	4b14      	ldr	r3, [pc, #80]	@ (800eabc <vTaskStartScheduler+0xd8>)
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea70:	4b13      	ldr	r3, [pc, #76]	@ (800eac0 <vTaskStartScheduler+0xdc>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea76:	f001 fac3 	bl	8010000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea7a:	e00f      	b.n	800ea9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea82:	d10b      	bne.n	800ea9c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	60fb      	str	r3, [r7, #12]
}
 800ea96:	bf00      	nop
 800ea98:	bf00      	nop
 800ea9a:	e7fd      	b.n	800ea98 <vTaskStartScheduler+0xb4>
}
 800ea9c:	bf00      	nop
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	0801fdc8 	.word	0x0801fdc8
 800eaa8:	0800f119 	.word	0x0800f119
 800eaac:	24005da8 	.word	0x24005da8
 800eab0:	240058b0 	.word	0x240058b0
 800eab4:	24000044 	.word	0x24000044
 800eab8:	24005da4 	.word	0x24005da4
 800eabc:	24005d90 	.word	0x24005d90
 800eac0:	24005d88 	.word	0x24005d88

0800eac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eac8:	4b04      	ldr	r3, [pc, #16]	@ (800eadc <vTaskSuspendAll+0x18>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3301      	adds	r3, #1
 800eace:	4a03      	ldr	r2, [pc, #12]	@ (800eadc <vTaskSuspendAll+0x18>)
 800ead0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ead2:	bf00      	nop
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	24005dac 	.word	0x24005dac

0800eae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eaea:	2300      	movs	r3, #0
 800eaec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eaee:	4b42      	ldr	r3, [pc, #264]	@ (800ebf8 <xTaskResumeAll+0x118>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10b      	bne.n	800eb0e <xTaskResumeAll+0x2e>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	603b      	str	r3, [r7, #0]
}
 800eb08:	bf00      	nop
 800eb0a:	bf00      	nop
 800eb0c:	e7fd      	b.n	800eb0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eb0e:	f001 fb1b 	bl	8010148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eb12:	4b39      	ldr	r3, [pc, #228]	@ (800ebf8 <xTaskResumeAll+0x118>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3b01      	subs	r3, #1
 800eb18:	4a37      	ldr	r2, [pc, #220]	@ (800ebf8 <xTaskResumeAll+0x118>)
 800eb1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb1c:	4b36      	ldr	r3, [pc, #216]	@ (800ebf8 <xTaskResumeAll+0x118>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d162      	bne.n	800ebea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb24:	4b35      	ldr	r3, [pc, #212]	@ (800ebfc <xTaskResumeAll+0x11c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d05e      	beq.n	800ebea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb2c:	e02f      	b.n	800eb8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb2e:	4b34      	ldr	r3, [pc, #208]	@ (800ec00 <xTaskResumeAll+0x120>)
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3318      	adds	r3, #24
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fe fc50 	bl	800d3e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	3304      	adds	r3, #4
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe fc4b 	bl	800d3e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb4e:	4b2d      	ldr	r3, [pc, #180]	@ (800ec04 <xTaskResumeAll+0x124>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d903      	bls.n	800eb5e <xTaskResumeAll+0x7e>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5a:	4a2a      	ldr	r2, [pc, #168]	@ (800ec04 <xTaskResumeAll+0x124>)
 800eb5c:	6013      	str	r3, [r2, #0]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb62:	4613      	mov	r3, r2
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	4a27      	ldr	r2, [pc, #156]	@ (800ec08 <xTaskResumeAll+0x128>)
 800eb6c:	441a      	add	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3304      	adds	r3, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fe fbd6 	bl	800d326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb7e:	4b23      	ldr	r3, [pc, #140]	@ (800ec0c <xTaskResumeAll+0x12c>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d302      	bcc.n	800eb8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800eb88:	4b21      	ldr	r3, [pc, #132]	@ (800ec10 <xTaskResumeAll+0x130>)
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb8e:	4b1c      	ldr	r3, [pc, #112]	@ (800ec00 <xTaskResumeAll+0x120>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1cb      	bne.n	800eb2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb9c:	f000 fb78 	bl	800f290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eba0:	4b1c      	ldr	r3, [pc, #112]	@ (800ec14 <xTaskResumeAll+0x134>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d010      	beq.n	800ebce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ebac:	f000 f858 	bl	800ec60 <xTaskIncrementTick>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ebb6:	4b16      	ldr	r3, [pc, #88]	@ (800ec10 <xTaskResumeAll+0x130>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1f1      	bne.n	800ebac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ebc8:	4b12      	ldr	r3, [pc, #72]	@ (800ec14 <xTaskResumeAll+0x134>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ebce:	4b10      	ldr	r3, [pc, #64]	@ (800ec10 <xTaskResumeAll+0x130>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d009      	beq.n	800ebea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ebda:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <xTaskResumeAll+0x138>)
 800ebdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebea:	f001 fadf 	bl	80101ac <vPortExitCritical>

	return xAlreadyYielded;
 800ebee:	68bb      	ldr	r3, [r7, #8]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	24005dac 	.word	0x24005dac
 800ebfc:	24005d84 	.word	0x24005d84
 800ec00:	24005d44 	.word	0x24005d44
 800ec04:	24005d8c 	.word	0x24005d8c
 800ec08:	240058b4 	.word	0x240058b4
 800ec0c:	240058b0 	.word	0x240058b0
 800ec10:	24005d98 	.word	0x24005d98
 800ec14:	24005d94 	.word	0x24005d94
 800ec18:	e000ed04 	.word	0xe000ed04

0800ec1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ec22:	4b05      	ldr	r3, [pc, #20]	@ (800ec38 <xTaskGetTickCount+0x1c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ec28:	687b      	ldr	r3, [r7, #4]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	24005d88 	.word	0x24005d88

0800ec3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec42:	f001 fb61 	bl	8010308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ec46:	2300      	movs	r3, #0
 800ec48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ec4a:	4b04      	ldr	r3, [pc, #16]	@ (800ec5c <xTaskGetTickCountFromISR+0x20>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec50:	683b      	ldr	r3, [r7, #0]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	24005d88 	.word	0x24005d88

0800ec60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec6a:	4b4f      	ldr	r3, [pc, #316]	@ (800eda8 <xTaskIncrementTick+0x148>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f040 8090 	bne.w	800ed94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec74:	4b4d      	ldr	r3, [pc, #308]	@ (800edac <xTaskIncrementTick+0x14c>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec7c:	4a4b      	ldr	r2, [pc, #300]	@ (800edac <xTaskIncrementTick+0x14c>)
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d121      	bne.n	800eccc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec88:	4b49      	ldr	r3, [pc, #292]	@ (800edb0 <xTaskIncrementTick+0x150>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00b      	beq.n	800ecaa <xTaskIncrementTick+0x4a>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	603b      	str	r3, [r7, #0]
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	e7fd      	b.n	800eca6 <xTaskIncrementTick+0x46>
 800ecaa:	4b41      	ldr	r3, [pc, #260]	@ (800edb0 <xTaskIncrementTick+0x150>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	4b40      	ldr	r3, [pc, #256]	@ (800edb4 <xTaskIncrementTick+0x154>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a3e      	ldr	r2, [pc, #248]	@ (800edb0 <xTaskIncrementTick+0x150>)
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	4a3e      	ldr	r2, [pc, #248]	@ (800edb4 <xTaskIncrementTick+0x154>)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	4b3e      	ldr	r3, [pc, #248]	@ (800edb8 <xTaskIncrementTick+0x158>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	4a3c      	ldr	r2, [pc, #240]	@ (800edb8 <xTaskIncrementTick+0x158>)
 800ecc6:	6013      	str	r3, [r2, #0]
 800ecc8:	f000 fae2 	bl	800f290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eccc:	4b3b      	ldr	r3, [pc, #236]	@ (800edbc <xTaskIncrementTick+0x15c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d349      	bcc.n	800ed6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecd6:	4b36      	ldr	r3, [pc, #216]	@ (800edb0 <xTaskIncrementTick+0x150>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d104      	bne.n	800ecea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ece0:	4b36      	ldr	r3, [pc, #216]	@ (800edbc <xTaskIncrementTick+0x15c>)
 800ece2:	f04f 32ff 	mov.w	r2, #4294967295
 800ece6:	601a      	str	r2, [r3, #0]
					break;
 800ece8:	e03f      	b.n	800ed6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecea:	4b31      	ldr	r3, [pc, #196]	@ (800edb0 <xTaskIncrementTick+0x150>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d203      	bcs.n	800ed0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ed02:	4a2e      	ldr	r2, [pc, #184]	@ (800edbc <xTaskIncrementTick+0x15c>)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ed08:	e02f      	b.n	800ed6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	3304      	adds	r3, #4
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fe fb66 	bl	800d3e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	3318      	adds	r3, #24
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe fb5d 	bl	800d3e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2a:	4b25      	ldr	r3, [pc, #148]	@ (800edc0 <xTaskIncrementTick+0x160>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d903      	bls.n	800ed3a <xTaskIncrementTick+0xda>
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed36:	4a22      	ldr	r2, [pc, #136]	@ (800edc0 <xTaskIncrementTick+0x160>)
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed3e:	4613      	mov	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4a1f      	ldr	r2, [pc, #124]	@ (800edc4 <xTaskIncrementTick+0x164>)
 800ed48:	441a      	add	r2, r3
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	3304      	adds	r3, #4
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4610      	mov	r0, r2
 800ed52:	f7fe fae8 	bl	800d326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5a:	4b1b      	ldr	r3, [pc, #108]	@ (800edc8 <xTaskIncrementTick+0x168>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d3b8      	bcc.n	800ecd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ed64:	2301      	movs	r3, #1
 800ed66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed68:	e7b5      	b.n	800ecd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed6a:	4b17      	ldr	r3, [pc, #92]	@ (800edc8 <xTaskIncrementTick+0x168>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed70:	4914      	ldr	r1, [pc, #80]	@ (800edc4 <xTaskIncrementTick+0x164>)
 800ed72:	4613      	mov	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	4413      	add	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	440b      	add	r3, r1
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d901      	bls.n	800ed86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ed86:	4b11      	ldr	r3, [pc, #68]	@ (800edcc <xTaskIncrementTick+0x16c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e004      	b.n	800ed9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ed94:	4b0e      	ldr	r3, [pc, #56]	@ (800edd0 <xTaskIncrementTick+0x170>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	4a0d      	ldr	r2, [pc, #52]	@ (800edd0 <xTaskIncrementTick+0x170>)
 800ed9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ed9e:	697b      	ldr	r3, [r7, #20]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	24005dac 	.word	0x24005dac
 800edac:	24005d88 	.word	0x24005d88
 800edb0:	24005d3c 	.word	0x24005d3c
 800edb4:	24005d40 	.word	0x24005d40
 800edb8:	24005d9c 	.word	0x24005d9c
 800edbc:	24005da4 	.word	0x24005da4
 800edc0:	24005d8c 	.word	0x24005d8c
 800edc4:	240058b4 	.word	0x240058b4
 800edc8:	240058b0 	.word	0x240058b0
 800edcc:	24005d98 	.word	0x24005d98
 800edd0:	24005d94 	.word	0x24005d94

0800edd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800edda:	4b2b      	ldr	r3, [pc, #172]	@ (800ee88 <vTaskSwitchContext+0xb4>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d003      	beq.n	800edea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ede2:	4b2a      	ldr	r3, [pc, #168]	@ (800ee8c <vTaskSwitchContext+0xb8>)
 800ede4:	2201      	movs	r2, #1
 800ede6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ede8:	e047      	b.n	800ee7a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800edea:	4b28      	ldr	r3, [pc, #160]	@ (800ee8c <vTaskSwitchContext+0xb8>)
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edf0:	4b27      	ldr	r3, [pc, #156]	@ (800ee90 <vTaskSwitchContext+0xbc>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	60fb      	str	r3, [r7, #12]
 800edf6:	e011      	b.n	800ee1c <vTaskSwitchContext+0x48>
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10b      	bne.n	800ee16 <vTaskSwitchContext+0x42>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	607b      	str	r3, [r7, #4]
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	e7fd      	b.n	800ee12 <vTaskSwitchContext+0x3e>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	491d      	ldr	r1, [pc, #116]	@ (800ee94 <vTaskSwitchContext+0xc0>)
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	4613      	mov	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	440b      	add	r3, r1
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d0e3      	beq.n	800edf8 <vTaskSwitchContext+0x24>
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	4613      	mov	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4a16      	ldr	r2, [pc, #88]	@ (800ee94 <vTaskSwitchContext+0xc0>)
 800ee3c:	4413      	add	r3, r2
 800ee3e:	60bb      	str	r3, [r7, #8]
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	605a      	str	r2, [r3, #4]
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	3308      	adds	r3, #8
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d104      	bne.n	800ee60 <vTaskSwitchContext+0x8c>
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	605a      	str	r2, [r3, #4]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	4a0c      	ldr	r2, [pc, #48]	@ (800ee98 <vTaskSwitchContext+0xc4>)
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	4a09      	ldr	r2, [pc, #36]	@ (800ee90 <vTaskSwitchContext+0xbc>)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee70:	4b09      	ldr	r3, [pc, #36]	@ (800ee98 <vTaskSwitchContext+0xc4>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3354      	adds	r3, #84	@ 0x54
 800ee76:	4a09      	ldr	r2, [pc, #36]	@ (800ee9c <vTaskSwitchContext+0xc8>)
 800ee78:	6013      	str	r3, [r2, #0]
}
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	24005dac 	.word	0x24005dac
 800ee8c:	24005d98 	.word	0x24005d98
 800ee90:	24005d8c 	.word	0x24005d8c
 800ee94:	240058b4 	.word	0x240058b4
 800ee98:	240058b0 	.word	0x240058b0
 800ee9c:	24000044 	.word	0x24000044

0800eea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	60fb      	str	r3, [r7, #12]
}
 800eec2:	bf00      	nop
 800eec4:	bf00      	nop
 800eec6:	e7fd      	b.n	800eec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eec8:	4b07      	ldr	r3, [pc, #28]	@ (800eee8 <vTaskPlaceOnEventList+0x48>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3318      	adds	r3, #24
 800eece:	4619      	mov	r1, r3
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7fe fa4c 	bl	800d36e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eed6:	2101      	movs	r1, #1
 800eed8:	6838      	ldr	r0, [r7, #0]
 800eeda:	f000 fb97 	bl	800f60c <prvAddCurrentTaskToDelayedList>
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	240058b0 	.word	0x240058b0

0800eeec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d10b      	bne.n	800ef16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	617b      	str	r3, [r7, #20]
}
 800ef10:	bf00      	nop
 800ef12:	bf00      	nop
 800ef14:	e7fd      	b.n	800ef12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ef16:	4b0a      	ldr	r3, [pc, #40]	@ (800ef40 <vTaskPlaceOnEventListRestricted+0x54>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3318      	adds	r3, #24
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7fe fa01 	bl	800d326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ef2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ef30:	6879      	ldr	r1, [r7, #4]
 800ef32:	68b8      	ldr	r0, [r7, #8]
 800ef34:	f000 fb6a 	bl	800f60c <prvAddCurrentTaskToDelayedList>
	}
 800ef38:	bf00      	nop
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	240058b0 	.word	0x240058b0

0800ef44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10b      	bne.n	800ef72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	60fb      	str	r3, [r7, #12]
}
 800ef6c:	bf00      	nop
 800ef6e:	bf00      	nop
 800ef70:	e7fd      	b.n	800ef6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	3318      	adds	r3, #24
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fa32 	bl	800d3e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef7c:	4b1d      	ldr	r3, [pc, #116]	@ (800eff4 <xTaskRemoveFromEventList+0xb0>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d11d      	bne.n	800efc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	3304      	adds	r3, #4
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fe fa29 	bl	800d3e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef92:	4b19      	ldr	r3, [pc, #100]	@ (800eff8 <xTaskRemoveFromEventList+0xb4>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d903      	bls.n	800efa2 <xTaskRemoveFromEventList+0x5e>
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9e:	4a16      	ldr	r2, [pc, #88]	@ (800eff8 <xTaskRemoveFromEventList+0xb4>)
 800efa0:	6013      	str	r3, [r2, #0]
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa6:	4613      	mov	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	4413      	add	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4a13      	ldr	r2, [pc, #76]	@ (800effc <xTaskRemoveFromEventList+0xb8>)
 800efb0:	441a      	add	r2, r3
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	3304      	adds	r3, #4
 800efb6:	4619      	mov	r1, r3
 800efb8:	4610      	mov	r0, r2
 800efba:	f7fe f9b4 	bl	800d326 <vListInsertEnd>
 800efbe:	e005      	b.n	800efcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	3318      	adds	r3, #24
 800efc4:	4619      	mov	r1, r3
 800efc6:	480e      	ldr	r0, [pc, #56]	@ (800f000 <xTaskRemoveFromEventList+0xbc>)
 800efc8:	f7fe f9ad 	bl	800d326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd0:	4b0c      	ldr	r3, [pc, #48]	@ (800f004 <xTaskRemoveFromEventList+0xc0>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d905      	bls.n	800efe6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800efda:	2301      	movs	r3, #1
 800efdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800efde:	4b0a      	ldr	r3, [pc, #40]	@ (800f008 <xTaskRemoveFromEventList+0xc4>)
 800efe0:	2201      	movs	r2, #1
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	e001      	b.n	800efea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800efe6:	2300      	movs	r3, #0
 800efe8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800efea:	697b      	ldr	r3, [r7, #20]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	24005dac 	.word	0x24005dac
 800eff8:	24005d8c 	.word	0x24005d8c
 800effc:	240058b4 	.word	0x240058b4
 800f000:	24005d44 	.word	0x24005d44
 800f004:	240058b0 	.word	0x240058b0
 800f008:	24005d98 	.word	0x24005d98

0800f00c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f014:	4b06      	ldr	r3, [pc, #24]	@ (800f030 <vTaskInternalSetTimeOutState+0x24>)
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f01c:	4b05      	ldr	r3, [pc, #20]	@ (800f034 <vTaskInternalSetTimeOutState+0x28>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	605a      	str	r2, [r3, #4]
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr
 800f030:	24005d9c 	.word	0x24005d9c
 800f034:	24005d88 	.word	0x24005d88

0800f038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b088      	sub	sp, #32
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10b      	bne.n	800f060 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	613b      	str	r3, [r7, #16]
}
 800f05a:	bf00      	nop
 800f05c:	bf00      	nop
 800f05e:	e7fd      	b.n	800f05c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10b      	bne.n	800f07e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	60fb      	str	r3, [r7, #12]
}
 800f078:	bf00      	nop
 800f07a:	bf00      	nop
 800f07c:	e7fd      	b.n	800f07a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f07e:	f001 f863 	bl	8010148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f082:	4b1d      	ldr	r3, [pc, #116]	@ (800f0f8 <xTaskCheckForTimeOut+0xc0>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	69ba      	ldr	r2, [r7, #24]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09a:	d102      	bne.n	800f0a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f09c:	2300      	movs	r3, #0
 800f09e:	61fb      	str	r3, [r7, #28]
 800f0a0:	e023      	b.n	800f0ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	4b15      	ldr	r3, [pc, #84]	@ (800f0fc <xTaskCheckForTimeOut+0xc4>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d007      	beq.n	800f0be <xTaskCheckForTimeOut+0x86>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d302      	bcc.n	800f0be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	61fb      	str	r3, [r7, #28]
 800f0bc:	e015      	b.n	800f0ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	697a      	ldr	r2, [r7, #20]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d20b      	bcs.n	800f0e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff ff99 	bl	800f00c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
 800f0de:	e004      	b.n	800f0ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f0ea:	f001 f85f 	bl	80101ac <vPortExitCritical>

	return xReturn;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3720      	adds	r7, #32
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	24005d88 	.word	0x24005d88
 800f0fc:	24005d9c 	.word	0x24005d9c

0800f100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f100:	b480      	push	{r7}
 800f102:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f104:	4b03      	ldr	r3, [pc, #12]	@ (800f114 <vTaskMissedYield+0x14>)
 800f106:	2201      	movs	r2, #1
 800f108:	601a      	str	r2, [r3, #0]
}
 800f10a:	bf00      	nop
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	24005d98 	.word	0x24005d98

0800f118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f120:	f000 f852 	bl	800f1c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f124:	4b06      	ldr	r3, [pc, #24]	@ (800f140 <prvIdleTask+0x28>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d9f9      	bls.n	800f120 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f12c:	4b05      	ldr	r3, [pc, #20]	@ (800f144 <prvIdleTask+0x2c>)
 800f12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f13c:	e7f0      	b.n	800f120 <prvIdleTask+0x8>
 800f13e:	bf00      	nop
 800f140:	240058b4 	.word	0x240058b4
 800f144:	e000ed04 	.word	0xe000ed04

0800f148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f14e:	2300      	movs	r3, #0
 800f150:	607b      	str	r3, [r7, #4]
 800f152:	e00c      	b.n	800f16e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4a12      	ldr	r2, [pc, #72]	@ (800f1a8 <prvInitialiseTaskLists+0x60>)
 800f160:	4413      	add	r3, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7fe f8b2 	bl	800d2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	3301      	adds	r3, #1
 800f16c:	607b      	str	r3, [r7, #4]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b37      	cmp	r3, #55	@ 0x37
 800f172:	d9ef      	bls.n	800f154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f174:	480d      	ldr	r0, [pc, #52]	@ (800f1ac <prvInitialiseTaskLists+0x64>)
 800f176:	f7fe f8a9 	bl	800d2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f17a:	480d      	ldr	r0, [pc, #52]	@ (800f1b0 <prvInitialiseTaskLists+0x68>)
 800f17c:	f7fe f8a6 	bl	800d2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f180:	480c      	ldr	r0, [pc, #48]	@ (800f1b4 <prvInitialiseTaskLists+0x6c>)
 800f182:	f7fe f8a3 	bl	800d2cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f186:	480c      	ldr	r0, [pc, #48]	@ (800f1b8 <prvInitialiseTaskLists+0x70>)
 800f188:	f7fe f8a0 	bl	800d2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f18c:	480b      	ldr	r0, [pc, #44]	@ (800f1bc <prvInitialiseTaskLists+0x74>)
 800f18e:	f7fe f89d 	bl	800d2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f192:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c0 <prvInitialiseTaskLists+0x78>)
 800f194:	4a05      	ldr	r2, [pc, #20]	@ (800f1ac <prvInitialiseTaskLists+0x64>)
 800f196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f198:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c4 <prvInitialiseTaskLists+0x7c>)
 800f19a:	4a05      	ldr	r2, [pc, #20]	@ (800f1b0 <prvInitialiseTaskLists+0x68>)
 800f19c:	601a      	str	r2, [r3, #0]
}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	240058b4 	.word	0x240058b4
 800f1ac:	24005d14 	.word	0x24005d14
 800f1b0:	24005d28 	.word	0x24005d28
 800f1b4:	24005d44 	.word	0x24005d44
 800f1b8:	24005d58 	.word	0x24005d58
 800f1bc:	24005d70 	.word	0x24005d70
 800f1c0:	24005d3c 	.word	0x24005d3c
 800f1c4:	24005d40 	.word	0x24005d40

0800f1c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1ce:	e019      	b.n	800f204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f1d0:	f000 ffba 	bl	8010148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d4:	4b10      	ldr	r3, [pc, #64]	@ (800f218 <prvCheckTasksWaitingTermination+0x50>)
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fe f8fd 	bl	800d3e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f21c <prvCheckTasksWaitingTermination+0x54>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800f21c <prvCheckTasksWaitingTermination+0x54>)
 800f1ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800f220 <prvCheckTasksWaitingTermination+0x58>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f220 <prvCheckTasksWaitingTermination+0x58>)
 800f1f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f1fa:	f000 ffd7 	bl	80101ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 f810 	bl	800f224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f204:	4b06      	ldr	r3, [pc, #24]	@ (800f220 <prvCheckTasksWaitingTermination+0x58>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e1      	bne.n	800f1d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f20c:	bf00      	nop
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	24005d58 	.word	0x24005d58
 800f21c:	24005d84 	.word	0x24005d84
 800f220:	24005d6c 	.word	0x24005d6c

0800f224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3354      	adds	r3, #84	@ 0x54
 800f230:	4618      	mov	r0, r3
 800f232:	f00e fcb1 	bl	801db98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d108      	bne.n	800f252 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f244:	4618      	mov	r0, r3
 800f246:	f001 f96f 	bl	8010528 <vPortFree>
				vPortFree( pxTCB );
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f001 f96c 	bl	8010528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f250:	e019      	b.n	800f286 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d103      	bne.n	800f264 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 f963 	bl	8010528 <vPortFree>
	}
 800f262:	e010      	b.n	800f286 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d00b      	beq.n	800f286 <prvDeleteTCB+0x62>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	60fb      	str	r3, [r7, #12]
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	e7fd      	b.n	800f282 <prvDeleteTCB+0x5e>
	}
 800f286:	bf00      	nop
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f296:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c8 <prvResetNextTaskUnblockTime+0x38>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d104      	bne.n	800f2aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2cc <prvResetNextTaskUnblockTime+0x3c>)
 800f2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f2a8:	e008      	b.n	800f2bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2aa:	4b07      	ldr	r3, [pc, #28]	@ (800f2c8 <prvResetNextTaskUnblockTime+0x38>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	4a04      	ldr	r2, [pc, #16]	@ (800f2cc <prvResetNextTaskUnblockTime+0x3c>)
 800f2ba:	6013      	str	r3, [r2, #0]
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	24005d3c 	.word	0x24005d3c
 800f2cc:	24005da4 	.word	0x24005da4

0800f2d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f2d6:	4b05      	ldr	r3, [pc, #20]	@ (800f2ec <xTaskGetCurrentTaskHandle+0x1c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f2dc:	687b      	ldr	r3, [r7, #4]
	}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	240058b0 	.word	0x240058b0

0800f2f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f324 <xTaskGetSchedulerState+0x34>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d102      	bne.n	800f304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f2fe:	2301      	movs	r3, #1
 800f300:	607b      	str	r3, [r7, #4]
 800f302:	e008      	b.n	800f316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f304:	4b08      	ldr	r3, [pc, #32]	@ (800f328 <xTaskGetSchedulerState+0x38>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f30c:	2302      	movs	r3, #2
 800f30e:	607b      	str	r3, [r7, #4]
 800f310:	e001      	b.n	800f316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f312:	2300      	movs	r3, #0
 800f314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f316:	687b      	ldr	r3, [r7, #4]
	}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr
 800f324:	24005d90 	.word	0x24005d90
 800f328:	24005dac 	.word	0x24005dac

0800f32c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f338:	2300      	movs	r3, #0
 800f33a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d051      	beq.n	800f3e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f346:	4b2a      	ldr	r3, [pc, #168]	@ (800f3f0 <xTaskPriorityInherit+0xc4>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d241      	bcs.n	800f3d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	699b      	ldr	r3, [r3, #24]
 800f354:	2b00      	cmp	r3, #0
 800f356:	db06      	blt.n	800f366 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f358:	4b25      	ldr	r3, [pc, #148]	@ (800f3f0 <xTaskPriorityInherit+0xc4>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f35e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	6959      	ldr	r1, [r3, #20]
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f36e:	4613      	mov	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4413      	add	r3, r2
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	4a1f      	ldr	r2, [pc, #124]	@ (800f3f4 <xTaskPriorityInherit+0xc8>)
 800f378:	4413      	add	r3, r2
 800f37a:	4299      	cmp	r1, r3
 800f37c:	d122      	bne.n	800f3c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	3304      	adds	r3, #4
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe f82c 	bl	800d3e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f388:	4b19      	ldr	r3, [pc, #100]	@ (800f3f0 <xTaskPriorityInherit+0xc4>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f396:	4b18      	ldr	r3, [pc, #96]	@ (800f3f8 <xTaskPriorityInherit+0xcc>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d903      	bls.n	800f3a6 <xTaskPriorityInherit+0x7a>
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a2:	4a15      	ldr	r2, [pc, #84]	@ (800f3f8 <xTaskPriorityInherit+0xcc>)
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	4413      	add	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4a10      	ldr	r2, [pc, #64]	@ (800f3f4 <xTaskPriorityInherit+0xc8>)
 800f3b4:	441a      	add	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f7fd ffb2 	bl	800d326 <vListInsertEnd>
 800f3c2:	e004      	b.n	800f3ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f0 <xTaskPriorityInherit+0xc4>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	60fb      	str	r3, [r7, #12]
 800f3d2:	e008      	b.n	800f3e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f3d8:	4b05      	ldr	r3, [pc, #20]	@ (800f3f0 <xTaskPriorityInherit+0xc4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d201      	bcs.n	800f3e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
	}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	240058b0 	.word	0x240058b0
 800f3f4:	240058b4 	.word	0x240058b4
 800f3f8:	24005d8c 	.word	0x24005d8c

0800f3fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f408:	2300      	movs	r3, #0
 800f40a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d058      	beq.n	800f4c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f412:	4b2f      	ldr	r3, [pc, #188]	@ (800f4d0 <xTaskPriorityDisinherit+0xd4>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d00b      	beq.n	800f434 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	60fb      	str	r3, [r7, #12]
}
 800f42e:	bf00      	nop
 800f430:	bf00      	nop
 800f432:	e7fd      	b.n	800f430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10b      	bne.n	800f454 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	60bb      	str	r3, [r7, #8]
}
 800f44e:	bf00      	nop
 800f450:	bf00      	nop
 800f452:	e7fd      	b.n	800f450 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f458:	1e5a      	subs	r2, r3, #1
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f466:	429a      	cmp	r2, r3
 800f468:	d02c      	beq.n	800f4c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d128      	bne.n	800f4c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	3304      	adds	r3, #4
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd ffb2 	bl	800d3e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f488:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f494:	4b0f      	ldr	r3, [pc, #60]	@ (800f4d4 <xTaskPriorityDisinherit+0xd8>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d903      	bls.n	800f4a4 <xTaskPriorityDisinherit+0xa8>
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f4d4 <xTaskPriorityDisinherit+0xd8>)
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	4a09      	ldr	r2, [pc, #36]	@ (800f4d8 <xTaskPriorityDisinherit+0xdc>)
 800f4b2:	441a      	add	r2, r3
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	f7fd ff33 	bl	800d326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f4c4:	697b      	ldr	r3, [r7, #20]
	}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	240058b0 	.word	0x240058b0
 800f4d4:	24005d8c 	.word	0x24005d8c
 800f4d8:	240058b4 	.word	0x240058b4

0800f4dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d06c      	beq.n	800f5ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10b      	bne.n	800f514 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f500:	f383 8811 	msr	BASEPRI, r3
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	f3bf 8f4f 	dsb	sy
 800f50c:	60fb      	str	r3, [r7, #12]
}
 800f50e:	bf00      	nop
 800f510:	bf00      	nop
 800f512:	e7fd      	b.n	800f510 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f518:	683a      	ldr	r2, [r7, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d902      	bls.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	61fb      	str	r3, [r7, #28]
 800f522:	e002      	b.n	800f52a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f528:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f52e:	69fa      	ldr	r2, [r7, #28]
 800f530:	429a      	cmp	r2, r3
 800f532:	d04c      	beq.n	800f5ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d147      	bne.n	800f5ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f53e:	4b26      	ldr	r3, [pc, #152]	@ (800f5d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	69ba      	ldr	r2, [r7, #24]
 800f544:	429a      	cmp	r2, r3
 800f546:	d10b      	bne.n	800f560 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	60bb      	str	r3, [r7, #8]
}
 800f55a:	bf00      	nop
 800f55c:	bf00      	nop
 800f55e:	e7fd      	b.n	800f55c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f564:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	69fa      	ldr	r2, [r7, #28]
 800f56a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	699b      	ldr	r3, [r3, #24]
 800f570:	2b00      	cmp	r3, #0
 800f572:	db04      	blt.n	800f57e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	6959      	ldr	r1, [r3, #20]
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	4613      	mov	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	4a13      	ldr	r2, [pc, #76]	@ (800f5dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f58e:	4413      	add	r3, r2
 800f590:	4299      	cmp	r1, r3
 800f592:	d11c      	bne.n	800f5ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	3304      	adds	r3, #4
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd ff21 	bl	800d3e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f5e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d903      	bls.n	800f5b2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ae:	4a0c      	ldr	r2, [pc, #48]	@ (800f5e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f5b0:	6013      	str	r3, [r2, #0]
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	4413      	add	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	4a07      	ldr	r2, [pc, #28]	@ (800f5dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f5c0:	441a      	add	r2, r3
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	4610      	mov	r0, r2
 800f5ca:	f7fd feac 	bl	800d326 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5ce:	bf00      	nop
 800f5d0:	3720      	adds	r7, #32
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	240058b0 	.word	0x240058b0
 800f5dc:	240058b4 	.word	0x240058b4
 800f5e0:	24005d8c 	.word	0x24005d8c

0800f5e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f5e4:	b480      	push	{r7}
 800f5e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f5e8:	4b07      	ldr	r3, [pc, #28]	@ (800f608 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d004      	beq.n	800f5fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f5f0:	4b05      	ldr	r3, [pc, #20]	@ (800f608 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f5f6:	3201      	adds	r2, #1
 800f5f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f5fa:	4b03      	ldr	r3, [pc, #12]	@ (800f608 <pvTaskIncrementMutexHeldCount+0x24>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
	}
 800f5fe:	4618      	mov	r0, r3
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	240058b0 	.word	0x240058b0

0800f60c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f616:	4b21      	ldr	r3, [pc, #132]	@ (800f69c <prvAddCurrentTaskToDelayedList+0x90>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f61c:	4b20      	ldr	r3, [pc, #128]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3304      	adds	r3, #4
 800f622:	4618      	mov	r0, r3
 800f624:	f7fd fedc 	bl	800d3e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62e:	d10a      	bne.n	800f646 <prvAddCurrentTaskToDelayedList+0x3a>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d007      	beq.n	800f646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f636:	4b1a      	ldr	r3, [pc, #104]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	3304      	adds	r3, #4
 800f63c:	4619      	mov	r1, r3
 800f63e:	4819      	ldr	r0, [pc, #100]	@ (800f6a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f640:	f7fd fe71 	bl	800d326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f644:	e026      	b.n	800f694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4413      	add	r3, r2
 800f64c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f64e:	4b14      	ldr	r3, [pc, #80]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d209      	bcs.n	800f672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f65e:	4b12      	ldr	r3, [pc, #72]	@ (800f6a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	4b0f      	ldr	r3, [pc, #60]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3304      	adds	r3, #4
 800f668:	4619      	mov	r1, r3
 800f66a:	4610      	mov	r0, r2
 800f66c:	f7fd fe7f 	bl	800d36e <vListInsert>
}
 800f670:	e010      	b.n	800f694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f672:	4b0e      	ldr	r3, [pc, #56]	@ (800f6ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3304      	adds	r3, #4
 800f67c:	4619      	mov	r1, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	f7fd fe75 	bl	800d36e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f684:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d202      	bcs.n	800f694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f68e:	4a08      	ldr	r2, [pc, #32]	@ (800f6b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	6013      	str	r3, [r2, #0]
}
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	24005d88 	.word	0x24005d88
 800f6a0:	240058b0 	.word	0x240058b0
 800f6a4:	24005d70 	.word	0x24005d70
 800f6a8:	24005d40 	.word	0x24005d40
 800f6ac:	24005d3c 	.word	0x24005d3c
 800f6b0:	24005da4 	.word	0x24005da4

0800f6b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b08a      	sub	sp, #40	@ 0x28
 800f6b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f6be:	f000 fbb1 	bl	800fe24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f6c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f738 <xTimerCreateTimerTask+0x84>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d021      	beq.n	800f70e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f6d2:	1d3a      	adds	r2, r7, #4
 800f6d4:	f107 0108 	add.w	r1, r7, #8
 800f6d8:	f107 030c 	add.w	r3, r7, #12
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fd fddb 	bl	800d298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f6e2:	6879      	ldr	r1, [r7, #4]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	9202      	str	r2, [sp, #8]
 800f6ea:	9301      	str	r3, [sp, #4]
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	9300      	str	r3, [sp, #0]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	460a      	mov	r2, r1
 800f6f4:	4911      	ldr	r1, [pc, #68]	@ (800f73c <xTimerCreateTimerTask+0x88>)
 800f6f6:	4812      	ldr	r0, [pc, #72]	@ (800f740 <xTimerCreateTimerTask+0x8c>)
 800f6f8:	f7fe ff80 	bl	800e5fc <xTaskCreateStatic>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	4a11      	ldr	r2, [pc, #68]	@ (800f744 <xTimerCreateTimerTask+0x90>)
 800f700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f702:	4b10      	ldr	r3, [pc, #64]	@ (800f744 <xTimerCreateTimerTask+0x90>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f70a:	2301      	movs	r3, #1
 800f70c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10b      	bne.n	800f72c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	613b      	str	r3, [r7, #16]
}
 800f726:	bf00      	nop
 800f728:	bf00      	nop
 800f72a:	e7fd      	b.n	800f728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f72c:	697b      	ldr	r3, [r7, #20]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	24005de0 	.word	0x24005de0
 800f73c:	0801fdd0 	.word	0x0801fdd0
 800f740:	0800f9bd 	.word	0x0800f9bd
 800f744:	24005de4 	.word	0x24005de4

0800f748 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b088      	sub	sp, #32
 800f74c:	af02      	add	r7, sp, #8
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f756:	202c      	movs	r0, #44	@ 0x2c
 800f758:	f000 fe18 	bl	801038c <pvPortMalloc>
 800f75c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00d      	beq.n	800f780 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	9301      	str	r3, [sp, #4]
 800f770:	6a3b      	ldr	r3, [r7, #32]
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	68b9      	ldr	r1, [r7, #8]
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 f845 	bl	800f80a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f780:	697b      	ldr	r3, [r7, #20]
	}
 800f782:	4618      	mov	r0, r3
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b08a      	sub	sp, #40	@ 0x28
 800f78e:	af02      	add	r7, sp, #8
 800f790:	60f8      	str	r0, [r7, #12]
 800f792:	60b9      	str	r1, [r7, #8]
 800f794:	607a      	str	r2, [r7, #4]
 800f796:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f798:	232c      	movs	r3, #44	@ 0x2c
 800f79a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	2b2c      	cmp	r3, #44	@ 0x2c
 800f7a0:	d00b      	beq.n	800f7ba <xTimerCreateStatic+0x30>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	61bb      	str	r3, [r7, #24]
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	e7fd      	b.n	800f7b6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d10b      	bne.n	800f7da <xTimerCreateStatic+0x50>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	617b      	str	r3, [r7, #20]
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop
 800f7d8:	e7fd      	b.n	800f7d6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00d      	beq.n	800f800 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	9301      	str	r3, [sp, #4]
 800f7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	68b9      	ldr	r1, [r7, #8]
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 f805 	bl	800f80a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f800:	69fb      	ldr	r3, [r7, #28]
	}
 800f802:	4618      	mov	r0, r3
 800f804:	3720      	adds	r7, #32
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b086      	sub	sp, #24
 800f80e:	af00      	add	r7, sp, #0
 800f810:	60f8      	str	r0, [r7, #12]
 800f812:	60b9      	str	r1, [r7, #8]
 800f814:	607a      	str	r2, [r7, #4]
 800f816:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10b      	bne.n	800f836 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	617b      	str	r3, [r7, #20]
}
 800f830:	bf00      	nop
 800f832:	bf00      	nop
 800f834:	e7fd      	b.n	800f832 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d01e      	beq.n	800f87a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f83c:	f000 faf2 	bl	800fe24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84e:	683a      	ldr	r2, [r7, #0]
 800f850:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f854:	6a3a      	ldr	r2, [r7, #32]
 800f856:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85a:	3304      	adds	r3, #4
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fd fd55 	bl	800d30c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d008      	beq.n	800f87a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f86e:	f043 0304 	orr.w	r3, r3, #4
 800f872:	b2da      	uxtb	r2, r3
 800f874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f87a:	bf00      	nop
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
	...

0800f884 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b08a      	sub	sp, #40	@ 0x28
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
 800f890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f892:	2300      	movs	r3, #0
 800f894:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d10b      	bne.n	800f8b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	623b      	str	r3, [r7, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	e7fd      	b.n	800f8b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f8b4:	4b19      	ldr	r3, [pc, #100]	@ (800f91c <xTimerGenericCommand+0x98>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d02a      	beq.n	800f912 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	2b05      	cmp	r3, #5
 800f8cc:	dc18      	bgt.n	800f900 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f8ce:	f7ff fd0f 	bl	800f2f0 <xTaskGetSchedulerState>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d109      	bne.n	800f8ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f8d8:	4b10      	ldr	r3, [pc, #64]	@ (800f91c <xTimerGenericCommand+0x98>)
 800f8da:	6818      	ldr	r0, [r3, #0]
 800f8dc:	f107 0110 	add.w	r1, r7, #16
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8e4:	f7fe f812 	bl	800d90c <xQueueGenericSend>
 800f8e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f8ea:	e012      	b.n	800f912 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f91c <xTimerGenericCommand+0x98>)
 800f8ee:	6818      	ldr	r0, [r3, #0]
 800f8f0:	f107 0110 	add.w	r1, r7, #16
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f7fe f808 	bl	800d90c <xQueueGenericSend>
 800f8fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800f8fe:	e008      	b.n	800f912 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f900:	4b06      	ldr	r3, [pc, #24]	@ (800f91c <xTimerGenericCommand+0x98>)
 800f902:	6818      	ldr	r0, [r3, #0]
 800f904:	f107 0110 	add.w	r1, r7, #16
 800f908:	2300      	movs	r3, #0
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	f7fe f900 	bl	800db10 <xQueueGenericSendFromISR>
 800f910:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f914:	4618      	mov	r0, r3
 800f916:	3728      	adds	r7, #40	@ 0x28
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	24005de0 	.word	0x24005de0

0800f920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b088      	sub	sp, #32
 800f924:	af02      	add	r7, sp, #8
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f92a:	4b23      	ldr	r3, [pc, #140]	@ (800f9b8 <prvProcessExpiredTimer+0x98>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	3304      	adds	r3, #4
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fd fd51 	bl	800d3e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f944:	f003 0304 	and.w	r3, r3, #4
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d023      	beq.n	800f994 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	699a      	ldr	r2, [r3, #24]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	18d1      	adds	r1, r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	6978      	ldr	r0, [r7, #20]
 800f95a:	f000 f8d5 	bl	800fb08 <prvInsertTimerInActiveList>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d020      	beq.n	800f9a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f964:	2300      	movs	r3, #0
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	2300      	movs	r3, #0
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	2100      	movs	r1, #0
 800f96e:	6978      	ldr	r0, [r7, #20]
 800f970:	f7ff ff88 	bl	800f884 <xTimerGenericCommand>
 800f974:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d114      	bne.n	800f9a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	60fb      	str	r3, [r7, #12]
}
 800f98e:	bf00      	nop
 800f990:	bf00      	nop
 800f992:	e7fd      	b.n	800f990 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f99a:	f023 0301 	bic.w	r3, r3, #1
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	6978      	ldr	r0, [r7, #20]
 800f9ac:	4798      	blx	r3
}
 800f9ae:	bf00      	nop
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	24005dd8 	.word	0x24005dd8

0800f9bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9c4:	f107 0308 	add.w	r3, r7, #8
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f000 f859 	bl	800fa80 <prvGetNextExpireTime>
 800f9ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f000 f805 	bl	800f9e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f9da:	f000 f8d7 	bl	800fb8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9de:	bf00      	nop
 800f9e0:	e7f0      	b.n	800f9c4 <prvTimerTask+0x8>
	...

0800f9e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f9ee:	f7ff f869 	bl	800eac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9f2:	f107 0308 	add.w	r3, r7, #8
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f000 f866 	bl	800fac8 <prvSampleTimeNow>
 800f9fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d130      	bne.n	800fa66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10a      	bne.n	800fa20 <prvProcessTimerOrBlockTask+0x3c>
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d806      	bhi.n	800fa20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fa12:	f7ff f865 	bl	800eae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa16:	68f9      	ldr	r1, [r7, #12]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7ff ff81 	bl	800f920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fa1e:	e024      	b.n	800fa6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d008      	beq.n	800fa38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fa26:	4b13      	ldr	r3, [pc, #76]	@ (800fa74 <prvProcessTimerOrBlockTask+0x90>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d101      	bne.n	800fa34 <prvProcessTimerOrBlockTask+0x50>
 800fa30:	2301      	movs	r3, #1
 800fa32:	e000      	b.n	800fa36 <prvProcessTimerOrBlockTask+0x52>
 800fa34:	2300      	movs	r3, #0
 800fa36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa38:	4b0f      	ldr	r3, [pc, #60]	@ (800fa78 <prvProcessTimerOrBlockTask+0x94>)
 800fa3a:	6818      	ldr	r0, [r3, #0]
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	683a      	ldr	r2, [r7, #0]
 800fa44:	4619      	mov	r1, r3
 800fa46:	f7fe fda5 	bl	800e594 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa4a:	f7ff f849 	bl	800eae0 <xTaskResumeAll>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10a      	bne.n	800fa6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa54:	4b09      	ldr	r3, [pc, #36]	@ (800fa7c <prvProcessTimerOrBlockTask+0x98>)
 800fa56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa5a:	601a      	str	r2, [r3, #0]
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	f3bf 8f6f 	isb	sy
}
 800fa64:	e001      	b.n	800fa6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa66:	f7ff f83b 	bl	800eae0 <xTaskResumeAll>
}
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	24005ddc 	.word	0x24005ddc
 800fa78:	24005de0 	.word	0x24005de0
 800fa7c:	e000ed04 	.word	0xe000ed04

0800fa80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa88:	4b0e      	ldr	r3, [pc, #56]	@ (800fac4 <prvGetNextExpireTime+0x44>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d101      	bne.n	800fa96 <prvGetNextExpireTime+0x16>
 800fa92:	2201      	movs	r2, #1
 800fa94:	e000      	b.n	800fa98 <prvGetNextExpireTime+0x18>
 800fa96:	2200      	movs	r2, #0
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d105      	bne.n	800fab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800faa4:	4b07      	ldr	r3, [pc, #28]	@ (800fac4 <prvGetNextExpireTime+0x44>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60fb      	str	r3, [r7, #12]
 800faae:	e001      	b.n	800fab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fab0:	2300      	movs	r3, #0
 800fab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fab4:	68fb      	ldr	r3, [r7, #12]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3714      	adds	r7, #20
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	24005dd8 	.word	0x24005dd8

0800fac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fad0:	f7ff f8a4 	bl	800ec1c <xTaskGetTickCount>
 800fad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fad6:	4b0b      	ldr	r3, [pc, #44]	@ (800fb04 <prvSampleTimeNow+0x3c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d205      	bcs.n	800faec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fae0:	f000 f93a 	bl	800fd58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	e002      	b.n	800faf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800faf2:	4a04      	ldr	r2, [pc, #16]	@ (800fb04 <prvSampleTimeNow+0x3c>)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800faf8:	68fb      	ldr	r3, [r7, #12]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	24005de8 	.word	0x24005de8

0800fb08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b086      	sub	sp, #24
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fb16:	2300      	movs	r3, #0
 800fb18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68fa      	ldr	r2, [r7, #12]
 800fb24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d812      	bhi.n	800fb54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	1ad2      	subs	r2, r2, r3
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	699b      	ldr	r3, [r3, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d302      	bcc.n	800fb42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	617b      	str	r3, [r7, #20]
 800fb40:	e01b      	b.n	800fb7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb42:	4b10      	ldr	r3, [pc, #64]	@ (800fb84 <prvInsertTimerInActiveList+0x7c>)
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3304      	adds	r3, #4
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7fd fc0e 	bl	800d36e <vListInsert>
 800fb52:	e012      	b.n	800fb7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d206      	bcs.n	800fb6a <prvInsertTimerInActiveList+0x62>
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d302      	bcc.n	800fb6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb64:	2301      	movs	r3, #1
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	e007      	b.n	800fb7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb6a:	4b07      	ldr	r3, [pc, #28]	@ (800fb88 <prvInsertTimerInActiveList+0x80>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3304      	adds	r3, #4
 800fb72:	4619      	mov	r1, r3
 800fb74:	4610      	mov	r0, r2
 800fb76:	f7fd fbfa 	bl	800d36e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb7a:	697b      	ldr	r3, [r7, #20]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	24005ddc 	.word	0x24005ddc
 800fb88:	24005dd8 	.word	0x24005dd8

0800fb8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08e      	sub	sp, #56	@ 0x38
 800fb90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb92:	e0ce      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	da19      	bge.n	800fbce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb9a:	1d3b      	adds	r3, r7, #4
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10b      	bne.n	800fbbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	61fb      	str	r3, [r7, #28]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbc4:	6850      	ldr	r0, [r2, #4]
 800fbc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbc8:	6892      	ldr	r2, [r2, #8]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f2c0 80ae 	blt.w	800fd32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbdc:	695b      	ldr	r3, [r3, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d004      	beq.n	800fbec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fd fbfa 	bl	800d3e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbec:	463b      	mov	r3, r7
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff ff6a 	bl	800fac8 <prvSampleTimeNow>
 800fbf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b09      	cmp	r3, #9
 800fbfa:	f200 8097 	bhi.w	800fd2c <prvProcessReceivedCommands+0x1a0>
 800fbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800fc04 <prvProcessReceivedCommands+0x78>)
 800fc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc04:	0800fc2d 	.word	0x0800fc2d
 800fc08:	0800fc2d 	.word	0x0800fc2d
 800fc0c:	0800fc2d 	.word	0x0800fc2d
 800fc10:	0800fca3 	.word	0x0800fca3
 800fc14:	0800fcb7 	.word	0x0800fcb7
 800fc18:	0800fd03 	.word	0x0800fd03
 800fc1c:	0800fc2d 	.word	0x0800fc2d
 800fc20:	0800fc2d 	.word	0x0800fc2d
 800fc24:	0800fca3 	.word	0x0800fca3
 800fc28:	0800fcb7 	.word	0x0800fcb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc32:	f043 0301 	orr.w	r3, r3, #1
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	18d1      	adds	r1, r2, r3
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc4c:	f7ff ff5c 	bl	800fb08 <prvInsertTimerInActiveList>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d06c      	beq.n	800fd30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc64:	f003 0304 	and.w	r3, r3, #4
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d061      	beq.n	800fd30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc70:	699b      	ldr	r3, [r3, #24]
 800fc72:	441a      	add	r2, r3
 800fc74:	2300      	movs	r3, #0
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	2300      	movs	r3, #0
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc7e:	f7ff fe01 	bl	800f884 <xTimerGenericCommand>
 800fc82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d152      	bne.n	800fd30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	61bb      	str	r3, [r7, #24]
}
 800fc9c:	bf00      	nop
 800fc9e:	bf00      	nop
 800fca0:	e7fd      	b.n	800fc9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fca8:	f023 0301 	bic.w	r3, r3, #1
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fcb4:	e03d      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcbc:	f043 0301 	orr.w	r3, r3, #1
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fccc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10b      	bne.n	800fcee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	617b      	str	r3, [r7, #20]
}
 800fce8:	bf00      	nop
 800fcea:	bf00      	nop
 800fcec:	e7fd      	b.n	800fcea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf0:	699a      	ldr	r2, [r3, #24]
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf4:	18d1      	adds	r1, r2, r3
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcfc:	f7ff ff04 	bl	800fb08 <prvInsertTimerInActiveList>
					break;
 800fd00:	e017      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd08:	f003 0302 	and.w	r3, r3, #2
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d103      	bne.n	800fd18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fd10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd12:	f000 fc09 	bl	8010528 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd16:	e00c      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fd2a:	e002      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fd2c:	bf00      	nop
 800fd2e:	e000      	b.n	800fd32 <prvProcessReceivedCommands+0x1a6>
					break;
 800fd30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd32:	4b08      	ldr	r3, [pc, #32]	@ (800fd54 <prvProcessReceivedCommands+0x1c8>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	1d39      	adds	r1, r7, #4
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe f816 	bl	800dd6c <xQueueReceive>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f47f af26 	bne.w	800fb94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fd48:	bf00      	nop
 800fd4a:	bf00      	nop
 800fd4c:	3730      	adds	r7, #48	@ 0x30
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	24005de0 	.word	0x24005de0

0800fd58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd5e:	e049      	b.n	800fdf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd60:	4b2e      	ldr	r3, [pc, #184]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd6a:	4b2c      	ldr	r3, [pc, #176]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	3304      	adds	r3, #4
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fd fb31 	bl	800d3e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd8c:	f003 0304 	and.w	r3, r3, #4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d02f      	beq.n	800fdf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	699b      	ldr	r3, [r3, #24]
 800fd98:	693a      	ldr	r2, [r7, #16]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d90e      	bls.n	800fdc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	68ba      	ldr	r2, [r7, #8]
 800fdaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdb2:	4b1a      	ldr	r3, [pc, #104]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	f7fd fad6 	bl	800d36e <vListInsert>
 800fdc2:	e017      	b.n	800fdf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	2100      	movs	r1, #0
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7ff fd58 	bl	800f884 <xTimerGenericCommand>
 800fdd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10b      	bne.n	800fdf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	603b      	str	r3, [r7, #0]
}
 800fdee:	bf00      	nop
 800fdf0:	bf00      	nop
 800fdf2:	e7fd      	b.n	800fdf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdf4:	4b09      	ldr	r3, [pc, #36]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1b0      	bne.n	800fd60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fdfe:	4b07      	ldr	r3, [pc, #28]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fe04:	4b06      	ldr	r3, [pc, #24]	@ (800fe20 <prvSwitchTimerLists+0xc8>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a04      	ldr	r2, [pc, #16]	@ (800fe1c <prvSwitchTimerLists+0xc4>)
 800fe0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fe0c:	4a04      	ldr	r2, [pc, #16]	@ (800fe20 <prvSwitchTimerLists+0xc8>)
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	6013      	str	r3, [r2, #0]
}
 800fe12:	bf00      	nop
 800fe14:	3718      	adds	r7, #24
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	24005dd8 	.word	0x24005dd8
 800fe20:	24005ddc 	.word	0x24005ddc

0800fe24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fe2a:	f000 f98d 	bl	8010148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fe2e:	4b15      	ldr	r3, [pc, #84]	@ (800fe84 <prvCheckForValidListAndQueue+0x60>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d120      	bne.n	800fe78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fe36:	4814      	ldr	r0, [pc, #80]	@ (800fe88 <prvCheckForValidListAndQueue+0x64>)
 800fe38:	f7fd fa48 	bl	800d2cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe3c:	4813      	ldr	r0, [pc, #76]	@ (800fe8c <prvCheckForValidListAndQueue+0x68>)
 800fe3e:	f7fd fa45 	bl	800d2cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe42:	4b13      	ldr	r3, [pc, #76]	@ (800fe90 <prvCheckForValidListAndQueue+0x6c>)
 800fe44:	4a10      	ldr	r2, [pc, #64]	@ (800fe88 <prvCheckForValidListAndQueue+0x64>)
 800fe46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe48:	4b12      	ldr	r3, [pc, #72]	@ (800fe94 <prvCheckForValidListAndQueue+0x70>)
 800fe4a:	4a10      	ldr	r2, [pc, #64]	@ (800fe8c <prvCheckForValidListAndQueue+0x68>)
 800fe4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe4e:	2300      	movs	r3, #0
 800fe50:	9300      	str	r3, [sp, #0]
 800fe52:	4b11      	ldr	r3, [pc, #68]	@ (800fe98 <prvCheckForValidListAndQueue+0x74>)
 800fe54:	4a11      	ldr	r2, [pc, #68]	@ (800fe9c <prvCheckForValidListAndQueue+0x78>)
 800fe56:	2110      	movs	r1, #16
 800fe58:	200a      	movs	r0, #10
 800fe5a:	f7fd fb55 	bl	800d508 <xQueueGenericCreateStatic>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	4a08      	ldr	r2, [pc, #32]	@ (800fe84 <prvCheckForValidListAndQueue+0x60>)
 800fe62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe64:	4b07      	ldr	r3, [pc, #28]	@ (800fe84 <prvCheckForValidListAndQueue+0x60>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d005      	beq.n	800fe78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe6c:	4b05      	ldr	r3, [pc, #20]	@ (800fe84 <prvCheckForValidListAndQueue+0x60>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	490b      	ldr	r1, [pc, #44]	@ (800fea0 <prvCheckForValidListAndQueue+0x7c>)
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fb3a 	bl	800e4ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe78:	f000 f998 	bl	80101ac <vPortExitCritical>
}
 800fe7c:	bf00      	nop
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	24005de0 	.word	0x24005de0
 800fe88:	24005db0 	.word	0x24005db0
 800fe8c:	24005dc4 	.word	0x24005dc4
 800fe90:	24005dd8 	.word	0x24005dd8
 800fe94:	24005ddc 	.word	0x24005ddc
 800fe98:	24005e8c 	.word	0x24005e8c
 800fe9c:	24005dec 	.word	0x24005dec
 800fea0:	0801fdd8 	.word	0x0801fdd8

0800fea4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10b      	bne.n	800fece <pvTimerGetTimerID+0x2a>
	__asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	60fb      	str	r3, [r7, #12]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800fece:	f000 f93b 	bl	8010148 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800fed8:	f000 f968 	bl	80101ac <vPortExitCritical>

	return pvReturn;
 800fedc:	693b      	ldr	r3, [r7, #16]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
	...

0800fee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3b04      	subs	r3, #4
 800fef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ff00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	3b04      	subs	r3, #4
 800ff06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	f023 0201 	bic.w	r2, r3, #1
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3b04      	subs	r3, #4
 800ff16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff18:	4a0c      	ldr	r2, [pc, #48]	@ (800ff4c <pxPortInitialiseStack+0x64>)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3b14      	subs	r3, #20
 800ff22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	3b04      	subs	r3, #4
 800ff2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f06f 0202 	mvn.w	r2, #2
 800ff36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	3b20      	subs	r3, #32
 800ff3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	0800ff51 	.word	0x0800ff51

0800ff50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff5a:	4b13      	ldr	r3, [pc, #76]	@ (800ffa8 <prvTaskExitError+0x58>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff62:	d00b      	beq.n	800ff7c <prvTaskExitError+0x2c>
	__asm volatile
 800ff64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	60fb      	str	r3, [r7, #12]
}
 800ff76:	bf00      	nop
 800ff78:	bf00      	nop
 800ff7a:	e7fd      	b.n	800ff78 <prvTaskExitError+0x28>
	__asm volatile
 800ff7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff80:	f383 8811 	msr	BASEPRI, r3
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	f3bf 8f4f 	dsb	sy
 800ff8c:	60bb      	str	r3, [r7, #8]
}
 800ff8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff90:	bf00      	nop
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d0fc      	beq.n	800ff92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff98:	bf00      	nop
 800ff9a:	bf00      	nop
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	24000024 	.word	0x24000024
 800ffac:	00000000 	.word	0x00000000

0800ffb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ffb0:	4b07      	ldr	r3, [pc, #28]	@ (800ffd0 <pxCurrentTCBConst2>)
 800ffb2:	6819      	ldr	r1, [r3, #0]
 800ffb4:	6808      	ldr	r0, [r1, #0]
 800ffb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffba:	f380 8809 	msr	PSP, r0
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f04f 0000 	mov.w	r0, #0
 800ffc6:	f380 8811 	msr	BASEPRI, r0
 800ffca:	4770      	bx	lr
 800ffcc:	f3af 8000 	nop.w

0800ffd0 <pxCurrentTCBConst2>:
 800ffd0:	240058b0 	.word	0x240058b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ffd4:	bf00      	nop
 800ffd6:	bf00      	nop

0800ffd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ffd8:	4808      	ldr	r0, [pc, #32]	@ (800fffc <prvPortStartFirstTask+0x24>)
 800ffda:	6800      	ldr	r0, [r0, #0]
 800ffdc:	6800      	ldr	r0, [r0, #0]
 800ffde:	f380 8808 	msr	MSP, r0
 800ffe2:	f04f 0000 	mov.w	r0, #0
 800ffe6:	f380 8814 	msr	CONTROL, r0
 800ffea:	b662      	cpsie	i
 800ffec:	b661      	cpsie	f
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	df00      	svc	0
 800fff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fffa:	bf00      	nop
 800fffc:	e000ed08 	.word	0xe000ed08

08010000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010006:	4b47      	ldr	r3, [pc, #284]	@ (8010124 <xPortStartScheduler+0x124>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a47      	ldr	r2, [pc, #284]	@ (8010128 <xPortStartScheduler+0x128>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d10b      	bne.n	8010028 <xPortStartScheduler+0x28>
	__asm volatile
 8010010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	613b      	str	r3, [r7, #16]
}
 8010022:	bf00      	nop
 8010024:	bf00      	nop
 8010026:	e7fd      	b.n	8010024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010028:	4b3e      	ldr	r3, [pc, #248]	@ (8010124 <xPortStartScheduler+0x124>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a3f      	ldr	r2, [pc, #252]	@ (801012c <xPortStartScheduler+0x12c>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d10b      	bne.n	801004a <xPortStartScheduler+0x4a>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010036:	f383 8811 	msr	BASEPRI, r3
 801003a:	f3bf 8f6f 	isb	sy
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	60fb      	str	r3, [r7, #12]
}
 8010044:	bf00      	nop
 8010046:	bf00      	nop
 8010048:	e7fd      	b.n	8010046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801004a:	4b39      	ldr	r3, [pc, #228]	@ (8010130 <xPortStartScheduler+0x130>)
 801004c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	b2db      	uxtb	r3, r3
 8010054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	22ff      	movs	r2, #255	@ 0xff
 801005a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	b2db      	uxtb	r3, r3
 8010062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010064:	78fb      	ldrb	r3, [r7, #3]
 8010066:	b2db      	uxtb	r3, r3
 8010068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801006c:	b2da      	uxtb	r2, r3
 801006e:	4b31      	ldr	r3, [pc, #196]	@ (8010134 <xPortStartScheduler+0x134>)
 8010070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010072:	4b31      	ldr	r3, [pc, #196]	@ (8010138 <xPortStartScheduler+0x138>)
 8010074:	2207      	movs	r2, #7
 8010076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010078:	e009      	b.n	801008e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801007a:	4b2f      	ldr	r3, [pc, #188]	@ (8010138 <xPortStartScheduler+0x138>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3b01      	subs	r3, #1
 8010080:	4a2d      	ldr	r2, [pc, #180]	@ (8010138 <xPortStartScheduler+0x138>)
 8010082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010084:	78fb      	ldrb	r3, [r7, #3]
 8010086:	b2db      	uxtb	r3, r3
 8010088:	005b      	lsls	r3, r3, #1
 801008a:	b2db      	uxtb	r3, r3
 801008c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801008e:	78fb      	ldrb	r3, [r7, #3]
 8010090:	b2db      	uxtb	r3, r3
 8010092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010096:	2b80      	cmp	r3, #128	@ 0x80
 8010098:	d0ef      	beq.n	801007a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801009a:	4b27      	ldr	r3, [pc, #156]	@ (8010138 <xPortStartScheduler+0x138>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f1c3 0307 	rsb	r3, r3, #7
 80100a2:	2b04      	cmp	r3, #4
 80100a4:	d00b      	beq.n	80100be <xPortStartScheduler+0xbe>
	__asm volatile
 80100a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	60bb      	str	r3, [r7, #8]
}
 80100b8:	bf00      	nop
 80100ba:	bf00      	nop
 80100bc:	e7fd      	b.n	80100ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80100be:	4b1e      	ldr	r3, [pc, #120]	@ (8010138 <xPortStartScheduler+0x138>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	021b      	lsls	r3, r3, #8
 80100c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010138 <xPortStartScheduler+0x138>)
 80100c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80100c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010138 <xPortStartScheduler+0x138>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80100d0:	4a19      	ldr	r2, [pc, #100]	@ (8010138 <xPortStartScheduler+0x138>)
 80100d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	b2da      	uxtb	r2, r3
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80100dc:	4b17      	ldr	r3, [pc, #92]	@ (801013c <xPortStartScheduler+0x13c>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a16      	ldr	r2, [pc, #88]	@ (801013c <xPortStartScheduler+0x13c>)
 80100e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80100e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80100e8:	4b14      	ldr	r3, [pc, #80]	@ (801013c <xPortStartScheduler+0x13c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a13      	ldr	r2, [pc, #76]	@ (801013c <xPortStartScheduler+0x13c>)
 80100ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80100f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80100f4:	f000 f8da 	bl	80102ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80100f8:	4b11      	ldr	r3, [pc, #68]	@ (8010140 <xPortStartScheduler+0x140>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80100fe:	f000 f8f9 	bl	80102f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010102:	4b10      	ldr	r3, [pc, #64]	@ (8010144 <xPortStartScheduler+0x144>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a0f      	ldr	r2, [pc, #60]	@ (8010144 <xPortStartScheduler+0x144>)
 8010108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801010c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801010e:	f7ff ff63 	bl	800ffd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010112:	f7fe fe5f 	bl	800edd4 <vTaskSwitchContext>
	prvTaskExitError();
 8010116:	f7ff ff1b 	bl	800ff50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	e000ed00 	.word	0xe000ed00
 8010128:	410fc271 	.word	0x410fc271
 801012c:	410fc270 	.word	0x410fc270
 8010130:	e000e400 	.word	0xe000e400
 8010134:	24005edc 	.word	0x24005edc
 8010138:	24005ee0 	.word	0x24005ee0
 801013c:	e000ed20 	.word	0xe000ed20
 8010140:	24000024 	.word	0x24000024
 8010144:	e000ef34 	.word	0xe000ef34

08010148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
	__asm volatile
 801014e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	607b      	str	r3, [r7, #4]
}
 8010160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010162:	4b10      	ldr	r3, [pc, #64]	@ (80101a4 <vPortEnterCritical+0x5c>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3301      	adds	r3, #1
 8010168:	4a0e      	ldr	r2, [pc, #56]	@ (80101a4 <vPortEnterCritical+0x5c>)
 801016a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801016c:	4b0d      	ldr	r3, [pc, #52]	@ (80101a4 <vPortEnterCritical+0x5c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d110      	bne.n	8010196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010174:	4b0c      	ldr	r3, [pc, #48]	@ (80101a8 <vPortEnterCritical+0x60>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00b      	beq.n	8010196 <vPortEnterCritical+0x4e>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	603b      	str	r3, [r7, #0]
}
 8010190:	bf00      	nop
 8010192:	bf00      	nop
 8010194:	e7fd      	b.n	8010192 <vPortEnterCritical+0x4a>
	}
}
 8010196:	bf00      	nop
 8010198:	370c      	adds	r7, #12
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	24000024 	.word	0x24000024
 80101a8:	e000ed04 	.word	0xe000ed04

080101ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80101b2:	4b12      	ldr	r3, [pc, #72]	@ (80101fc <vPortExitCritical+0x50>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10b      	bne.n	80101d2 <vPortExitCritical+0x26>
	__asm volatile
 80101ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	607b      	str	r3, [r7, #4]
}
 80101cc:	bf00      	nop
 80101ce:	bf00      	nop
 80101d0:	e7fd      	b.n	80101ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80101d2:	4b0a      	ldr	r3, [pc, #40]	@ (80101fc <vPortExitCritical+0x50>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	4a08      	ldr	r2, [pc, #32]	@ (80101fc <vPortExitCritical+0x50>)
 80101da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80101dc:	4b07      	ldr	r3, [pc, #28]	@ (80101fc <vPortExitCritical+0x50>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d105      	bne.n	80101f0 <vPortExitCritical+0x44>
 80101e4:	2300      	movs	r3, #0
 80101e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	f383 8811 	msr	BASEPRI, r3
}
 80101ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	24000024 	.word	0x24000024

08010200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010200:	f3ef 8009 	mrs	r0, PSP
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	4b15      	ldr	r3, [pc, #84]	@ (8010260 <pxCurrentTCBConst>)
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	f01e 0f10 	tst.w	lr, #16
 8010210:	bf08      	it	eq
 8010212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021a:	6010      	str	r0, [r2, #0]
 801021c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010224:	f380 8811 	msr	BASEPRI, r0
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	f3bf 8f6f 	isb	sy
 8010230:	f7fe fdd0 	bl	800edd4 <vTaskSwitchContext>
 8010234:	f04f 0000 	mov.w	r0, #0
 8010238:	f380 8811 	msr	BASEPRI, r0
 801023c:	bc09      	pop	{r0, r3}
 801023e:	6819      	ldr	r1, [r3, #0]
 8010240:	6808      	ldr	r0, [r1, #0]
 8010242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010246:	f01e 0f10 	tst.w	lr, #16
 801024a:	bf08      	it	eq
 801024c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010250:	f380 8809 	msr	PSP, r0
 8010254:	f3bf 8f6f 	isb	sy
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	f3af 8000 	nop.w

08010260 <pxCurrentTCBConst>:
 8010260:	240058b0 	.word	0x240058b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop

08010268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	607b      	str	r3, [r7, #4]
}
 8010280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010282:	f7fe fced 	bl	800ec60 <xTaskIncrementTick>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d003      	beq.n	8010294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801028c:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <xPortSysTickHandler+0x40>)
 801028e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010292:	601a      	str	r2, [r3, #0]
 8010294:	2300      	movs	r3, #0
 8010296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	f383 8811 	msr	BASEPRI, r3
}
 801029e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80102a0:	bf00      	nop
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	e000ed04 	.word	0xe000ed04

080102ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80102ac:	b480      	push	{r7}
 80102ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102b0:	4b0b      	ldr	r3, [pc, #44]	@ (80102e0 <vPortSetupTimerInterrupt+0x34>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102b6:	4b0b      	ldr	r3, [pc, #44]	@ (80102e4 <vPortSetupTimerInterrupt+0x38>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102bc:	4b0a      	ldr	r3, [pc, #40]	@ (80102e8 <vPortSetupTimerInterrupt+0x3c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4a0a      	ldr	r2, [pc, #40]	@ (80102ec <vPortSetupTimerInterrupt+0x40>)
 80102c2:	fba2 2303 	umull	r2, r3, r2, r3
 80102c6:	099b      	lsrs	r3, r3, #6
 80102c8:	4a09      	ldr	r2, [pc, #36]	@ (80102f0 <vPortSetupTimerInterrupt+0x44>)
 80102ca:	3b01      	subs	r3, #1
 80102cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80102ce:	4b04      	ldr	r3, [pc, #16]	@ (80102e0 <vPortSetupTimerInterrupt+0x34>)
 80102d0:	2207      	movs	r2, #7
 80102d2:	601a      	str	r2, [r3, #0]
}
 80102d4:	bf00      	nop
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	e000e010 	.word	0xe000e010
 80102e4:	e000e018 	.word	0xe000e018
 80102e8:	24000000 	.word	0x24000000
 80102ec:	10624dd3 	.word	0x10624dd3
 80102f0:	e000e014 	.word	0xe000e014

080102f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80102f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010304 <vPortEnableVFP+0x10>
 80102f8:	6801      	ldr	r1, [r0, #0]
 80102fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80102fe:	6001      	str	r1, [r0, #0]
 8010300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010302:	bf00      	nop
 8010304:	e000ed88 	.word	0xe000ed88

08010308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801030e:	f3ef 8305 	mrs	r3, IPSR
 8010312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b0f      	cmp	r3, #15
 8010318:	d915      	bls.n	8010346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801031a:	4a18      	ldr	r2, [pc, #96]	@ (801037c <vPortValidateInterruptPriority+0x74>)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	4413      	add	r3, r2
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010324:	4b16      	ldr	r3, [pc, #88]	@ (8010380 <vPortValidateInterruptPriority+0x78>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	7afa      	ldrb	r2, [r7, #11]
 801032a:	429a      	cmp	r2, r3
 801032c:	d20b      	bcs.n	8010346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801032e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010332:	f383 8811 	msr	BASEPRI, r3
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	607b      	str	r3, [r7, #4]
}
 8010340:	bf00      	nop
 8010342:	bf00      	nop
 8010344:	e7fd      	b.n	8010342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010346:	4b0f      	ldr	r3, [pc, #60]	@ (8010384 <vPortValidateInterruptPriority+0x7c>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801034e:	4b0e      	ldr	r3, [pc, #56]	@ (8010388 <vPortValidateInterruptPriority+0x80>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	429a      	cmp	r2, r3
 8010354:	d90b      	bls.n	801036e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	603b      	str	r3, [r7, #0]
}
 8010368:	bf00      	nop
 801036a:	bf00      	nop
 801036c:	e7fd      	b.n	801036a <vPortValidateInterruptPriority+0x62>
	}
 801036e:	bf00      	nop
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	e000e3f0 	.word	0xe000e3f0
 8010380:	24005edc 	.word	0x24005edc
 8010384:	e000ed0c 	.word	0xe000ed0c
 8010388:	24005ee0 	.word	0x24005ee0

0801038c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b08a      	sub	sp, #40	@ 0x28
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010394:	2300      	movs	r3, #0
 8010396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010398:	f7fe fb94 	bl	800eac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801039c:	4b5c      	ldr	r3, [pc, #368]	@ (8010510 <pvPortMalloc+0x184>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80103a4:	f000 f924 	bl	80105f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80103a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010514 <pvPortMalloc+0x188>)
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4013      	ands	r3, r2
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f040 8095 	bne.w	80104e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d01e      	beq.n	80103fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80103bc:	2208      	movs	r2, #8
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4413      	add	r3, r2
 80103c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f003 0307 	and.w	r3, r3, #7
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d015      	beq.n	80103fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f023 0307 	bic.w	r3, r3, #7
 80103d4:	3308      	adds	r3, #8
 80103d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f003 0307 	and.w	r3, r3, #7
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d00b      	beq.n	80103fa <pvPortMalloc+0x6e>
	__asm volatile
 80103e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	617b      	str	r3, [r7, #20]
}
 80103f4:	bf00      	nop
 80103f6:	bf00      	nop
 80103f8:	e7fd      	b.n	80103f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d06f      	beq.n	80104e0 <pvPortMalloc+0x154>
 8010400:	4b45      	ldr	r3, [pc, #276]	@ (8010518 <pvPortMalloc+0x18c>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	429a      	cmp	r2, r3
 8010408:	d86a      	bhi.n	80104e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801040a:	4b44      	ldr	r3, [pc, #272]	@ (801051c <pvPortMalloc+0x190>)
 801040c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801040e:	4b43      	ldr	r3, [pc, #268]	@ (801051c <pvPortMalloc+0x190>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010414:	e004      	b.n	8010420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801041a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	429a      	cmp	r2, r3
 8010428:	d903      	bls.n	8010432 <pvPortMalloc+0xa6>
 801042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1f1      	bne.n	8010416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010432:	4b37      	ldr	r3, [pc, #220]	@ (8010510 <pvPortMalloc+0x184>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010438:	429a      	cmp	r2, r3
 801043a:	d051      	beq.n	80104e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801043c:	6a3b      	ldr	r3, [r7, #32]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2208      	movs	r2, #8
 8010442:	4413      	add	r3, r2
 8010444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801044e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	1ad2      	subs	r2, r2, r3
 8010456:	2308      	movs	r3, #8
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	429a      	cmp	r2, r3
 801045c:	d920      	bls.n	80104a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801045e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4413      	add	r3, r2
 8010464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f003 0307 	and.w	r3, r3, #7
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00b      	beq.n	8010488 <pvPortMalloc+0xfc>
	__asm volatile
 8010470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010474:	f383 8811 	msr	BASEPRI, r3
 8010478:	f3bf 8f6f 	isb	sy
 801047c:	f3bf 8f4f 	dsb	sy
 8010480:	613b      	str	r3, [r7, #16]
}
 8010482:	bf00      	nop
 8010484:	bf00      	nop
 8010486:	e7fd      	b.n	8010484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048a:	685a      	ldr	r2, [r3, #4]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	1ad2      	subs	r2, r2, r3
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801049a:	69b8      	ldr	r0, [r7, #24]
 801049c:	f000 f90a 	bl	80106b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80104a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010518 <pvPortMalloc+0x18c>)
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010518 <pvPortMalloc+0x18c>)
 80104ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80104ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010518 <pvPortMalloc+0x18c>)
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010520 <pvPortMalloc+0x194>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d203      	bcs.n	80104c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80104ba:	4b17      	ldr	r3, [pc, #92]	@ (8010518 <pvPortMalloc+0x18c>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4a18      	ldr	r2, [pc, #96]	@ (8010520 <pvPortMalloc+0x194>)
 80104c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80104c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	4b13      	ldr	r3, [pc, #76]	@ (8010514 <pvPortMalloc+0x188>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	431a      	orrs	r2, r3
 80104cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80104d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d2:	2200      	movs	r2, #0
 80104d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80104d6:	4b13      	ldr	r3, [pc, #76]	@ (8010524 <pvPortMalloc+0x198>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3301      	adds	r3, #1
 80104dc:	4a11      	ldr	r2, [pc, #68]	@ (8010524 <pvPortMalloc+0x198>)
 80104de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80104e0:	f7fe fafe 	bl	800eae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00b      	beq.n	8010506 <pvPortMalloc+0x17a>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	60fb      	str	r3, [r7, #12]
}
 8010500:	bf00      	nop
 8010502:	bf00      	nop
 8010504:	e7fd      	b.n	8010502 <pvPortMalloc+0x176>
	return pvReturn;
 8010506:	69fb      	ldr	r3, [r7, #28]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3728      	adds	r7, #40	@ 0x28
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	24009aec 	.word	0x24009aec
 8010514:	24009b00 	.word	0x24009b00
 8010518:	24009af0 	.word	0x24009af0
 801051c:	24009ae4 	.word	0x24009ae4
 8010520:	24009af4 	.word	0x24009af4
 8010524:	24009af8 	.word	0x24009af8

08010528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d04f      	beq.n	80105da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801053a:	2308      	movs	r3, #8
 801053c:	425b      	negs	r3, r3
 801053e:	697a      	ldr	r2, [r7, #20]
 8010540:	4413      	add	r3, r2
 8010542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	4b25      	ldr	r3, [pc, #148]	@ (80105e4 <vPortFree+0xbc>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4013      	ands	r3, r2
 8010552:	2b00      	cmp	r3, #0
 8010554:	d10b      	bne.n	801056e <vPortFree+0x46>
	__asm volatile
 8010556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801055a:	f383 8811 	msr	BASEPRI, r3
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f3bf 8f4f 	dsb	sy
 8010566:	60fb      	str	r3, [r7, #12]
}
 8010568:	bf00      	nop
 801056a:	bf00      	nop
 801056c:	e7fd      	b.n	801056a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00b      	beq.n	801058e <vPortFree+0x66>
	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	60bb      	str	r3, [r7, #8]
}
 8010588:	bf00      	nop
 801058a:	bf00      	nop
 801058c:	e7fd      	b.n	801058a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	685a      	ldr	r2, [r3, #4]
 8010592:	4b14      	ldr	r3, [pc, #80]	@ (80105e4 <vPortFree+0xbc>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4013      	ands	r3, r2
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01e      	beq.n	80105da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d11a      	bne.n	80105da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	4b0e      	ldr	r3, [pc, #56]	@ (80105e4 <vPortFree+0xbc>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	43db      	mvns	r3, r3
 80105ae:	401a      	ands	r2, r3
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80105b4:	f7fe fa86 	bl	800eac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	4b0a      	ldr	r3, [pc, #40]	@ (80105e8 <vPortFree+0xc0>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4413      	add	r3, r2
 80105c2:	4a09      	ldr	r2, [pc, #36]	@ (80105e8 <vPortFree+0xc0>)
 80105c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80105c6:	6938      	ldr	r0, [r7, #16]
 80105c8:	f000 f874 	bl	80106b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80105cc:	4b07      	ldr	r3, [pc, #28]	@ (80105ec <vPortFree+0xc4>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3301      	adds	r3, #1
 80105d2:	4a06      	ldr	r2, [pc, #24]	@ (80105ec <vPortFree+0xc4>)
 80105d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80105d6:	f7fe fa83 	bl	800eae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80105da:	bf00      	nop
 80105dc:	3718      	adds	r7, #24
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	24009b00 	.word	0x24009b00
 80105e8:	24009af0 	.word	0x24009af0
 80105ec:	24009afc 	.word	0x24009afc

080105f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80105f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80105fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80105fc:	4b27      	ldr	r3, [pc, #156]	@ (801069c <prvHeapInit+0xac>)
 80105fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f003 0307 	and.w	r3, r3, #7
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00c      	beq.n	8010624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	3307      	adds	r3, #7
 801060e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f023 0307 	bic.w	r3, r3, #7
 8010616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	4a1f      	ldr	r2, [pc, #124]	@ (801069c <prvHeapInit+0xac>)
 8010620:	4413      	add	r3, r2
 8010622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010628:	4a1d      	ldr	r2, [pc, #116]	@ (80106a0 <prvHeapInit+0xb0>)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801062e:	4b1c      	ldr	r3, [pc, #112]	@ (80106a0 <prvHeapInit+0xb0>)
 8010630:	2200      	movs	r2, #0
 8010632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	68ba      	ldr	r2, [r7, #8]
 8010638:	4413      	add	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801063c:	2208      	movs	r2, #8
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f023 0307 	bic.w	r3, r3, #7
 801064a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4a15      	ldr	r2, [pc, #84]	@ (80106a4 <prvHeapInit+0xb4>)
 8010650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010652:	4b14      	ldr	r3, [pc, #80]	@ (80106a4 <prvHeapInit+0xb4>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2200      	movs	r2, #0
 8010658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801065a:	4b12      	ldr	r3, [pc, #72]	@ (80106a4 <prvHeapInit+0xb4>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2200      	movs	r2, #0
 8010660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	1ad2      	subs	r2, r2, r3
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010670:	4b0c      	ldr	r3, [pc, #48]	@ (80106a4 <prvHeapInit+0xb4>)
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	4a0a      	ldr	r2, [pc, #40]	@ (80106a8 <prvHeapInit+0xb8>)
 801067e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	4a09      	ldr	r2, [pc, #36]	@ (80106ac <prvHeapInit+0xbc>)
 8010686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010688:	4b09      	ldr	r3, [pc, #36]	@ (80106b0 <prvHeapInit+0xc0>)
 801068a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801068e:	601a      	str	r2, [r3, #0]
}
 8010690:	bf00      	nop
 8010692:	3714      	adds	r7, #20
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr
 801069c:	24005ee4 	.word	0x24005ee4
 80106a0:	24009ae4 	.word	0x24009ae4
 80106a4:	24009aec 	.word	0x24009aec
 80106a8:	24009af4 	.word	0x24009af4
 80106ac:	24009af0 	.word	0x24009af0
 80106b0:	24009b00 	.word	0x24009b00

080106b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106bc:	4b28      	ldr	r3, [pc, #160]	@ (8010760 <prvInsertBlockIntoFreeList+0xac>)
 80106be:	60fb      	str	r3, [r7, #12]
 80106c0:	e002      	b.n	80106c8 <prvInsertBlockIntoFreeList+0x14>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	60fb      	str	r3, [r7, #12]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d8f7      	bhi.n	80106c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	4413      	add	r3, r2
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d108      	bne.n	80106f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	441a      	add	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	441a      	add	r2, r3
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	429a      	cmp	r2, r3
 8010708:	d118      	bne.n	801073c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	4b15      	ldr	r3, [pc, #84]	@ (8010764 <prvInsertBlockIntoFreeList+0xb0>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	429a      	cmp	r2, r3
 8010714:	d00d      	beq.n	8010732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	441a      	add	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	601a      	str	r2, [r3, #0]
 8010730:	e008      	b.n	8010744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010732:	4b0c      	ldr	r3, [pc, #48]	@ (8010764 <prvInsertBlockIntoFreeList+0xb0>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	e003      	b.n	8010744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010744:	68fa      	ldr	r2, [r7, #12]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	429a      	cmp	r2, r3
 801074a:	d002      	beq.n	8010752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010752:	bf00      	nop
 8010754:	3714      	adds	r7, #20
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	24009ae4 	.word	0x24009ae4
 8010764:	24009aec 	.word	0x24009aec

08010768 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010772:	f007 fb95 	bl	8017ea0 <sys_timeouts_sleeptime>
 8010776:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077e:	d10b      	bne.n	8010798 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010780:	4813      	ldr	r0, [pc, #76]	@ (80107d0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010782:	f00c fac4 	bl	801cd0e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010786:	2200      	movs	r2, #0
 8010788:	6839      	ldr	r1, [r7, #0]
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f00c fa4c 	bl	801cc28 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010790:	480f      	ldr	r0, [pc, #60]	@ (80107d0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010792:	f00c faad 	bl	801ccf0 <sys_mutex_lock>
    return;
 8010796:	e018      	b.n	80107ca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801079e:	f007 fb45 	bl	8017e2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80107a2:	e7e6      	b.n	8010772 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80107a4:	480a      	ldr	r0, [pc, #40]	@ (80107d0 <tcpip_timeouts_mbox_fetch+0x68>)
 80107a6:	f00c fab2 	bl	801cd0e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	6839      	ldr	r1, [r7, #0]
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f00c fa3a 	bl	801cc28 <sys_arch_mbox_fetch>
 80107b4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80107b6:	4806      	ldr	r0, [pc, #24]	@ (80107d0 <tcpip_timeouts_mbox_fetch+0x68>)
 80107b8:	f00c fa9a 	bl	801ccf0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c2:	d102      	bne.n	80107ca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80107c4:	f007 fb32 	bl	8017e2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80107c8:	e7d3      	b.n	8010772 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	24009b10 	.word	0x24009b10

080107d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80107dc:	4810      	ldr	r0, [pc, #64]	@ (8010820 <tcpip_thread+0x4c>)
 80107de:	f00c fa87 	bl	801ccf0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80107e2:	4b10      	ldr	r3, [pc, #64]	@ (8010824 <tcpip_thread+0x50>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d005      	beq.n	80107f6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80107ea:	4b0e      	ldr	r3, [pc, #56]	@ (8010824 <tcpip_thread+0x50>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4a0e      	ldr	r2, [pc, #56]	@ (8010828 <tcpip_thread+0x54>)
 80107f0:	6812      	ldr	r2, [r2, #0]
 80107f2:	4610      	mov	r0, r2
 80107f4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80107f6:	f107 030c 	add.w	r3, r7, #12
 80107fa:	4619      	mov	r1, r3
 80107fc:	480b      	ldr	r0, [pc, #44]	@ (801082c <tcpip_thread+0x58>)
 80107fe:	f7ff ffb3 	bl	8010768 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d106      	bne.n	8010816 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010808:	4b09      	ldr	r3, [pc, #36]	@ (8010830 <tcpip_thread+0x5c>)
 801080a:	2291      	movs	r2, #145	@ 0x91
 801080c:	4909      	ldr	r1, [pc, #36]	@ (8010834 <tcpip_thread+0x60>)
 801080e:	480a      	ldr	r0, [pc, #40]	@ (8010838 <tcpip_thread+0x64>)
 8010810:	f00d f800 	bl	801d814 <iprintf>
      continue;
 8010814:	e003      	b.n	801081e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4618      	mov	r0, r3
 801081a:	f000 f80f 	bl	801083c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801081e:	e7ea      	b.n	80107f6 <tcpip_thread+0x22>
 8010820:	24009b10 	.word	0x24009b10
 8010824:	24009b04 	.word	0x24009b04
 8010828:	24009b08 	.word	0x24009b08
 801082c:	24009b0c 	.word	0x24009b0c
 8010830:	0801fde0 	.word	0x0801fde0
 8010834:	0801fe10 	.word	0x0801fe10
 8010838:	0801fe30 	.word	0x0801fe30

0801083c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	2b02      	cmp	r3, #2
 801084a:	d026      	beq.n	801089a <tcpip_thread_handle_msg+0x5e>
 801084c:	2b02      	cmp	r3, #2
 801084e:	dc2b      	bgt.n	80108a8 <tcpip_thread_handle_msg+0x6c>
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <tcpip_thread_handle_msg+0x1e>
 8010854:	2b01      	cmp	r3, #1
 8010856:	d015      	beq.n	8010884 <tcpip_thread_handle_msg+0x48>
 8010858:	e026      	b.n	80108a8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	6850      	ldr	r0, [r2, #4]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	6892      	ldr	r2, [r2, #8]
 8010866:	4611      	mov	r1, r2
 8010868:	4798      	blx	r3
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d004      	beq.n	801087a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	f001 fdcf 	bl	8012418 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801087a:	6879      	ldr	r1, [r7, #4]
 801087c:	2009      	movs	r0, #9
 801087e:	f000 ff1b 	bl	80116b8 <memp_free>
      break;
 8010882:	e018      	b.n	80108b6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	6892      	ldr	r2, [r2, #8]
 801088c:	4610      	mov	r0, r2
 801088e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010890:	6879      	ldr	r1, [r7, #4]
 8010892:	2008      	movs	r0, #8
 8010894:	f000 ff10 	bl	80116b8 <memp_free>
      break;
 8010898:	e00d      	b.n	80108b6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	6892      	ldr	r2, [r2, #8]
 80108a2:	4610      	mov	r0, r2
 80108a4:	4798      	blx	r3
      break;
 80108a6:	e006      	b.n	80108b6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80108a8:	4b05      	ldr	r3, [pc, #20]	@ (80108c0 <tcpip_thread_handle_msg+0x84>)
 80108aa:	22cf      	movs	r2, #207	@ 0xcf
 80108ac:	4905      	ldr	r1, [pc, #20]	@ (80108c4 <tcpip_thread_handle_msg+0x88>)
 80108ae:	4806      	ldr	r0, [pc, #24]	@ (80108c8 <tcpip_thread_handle_msg+0x8c>)
 80108b0:	f00c ffb0 	bl	801d814 <iprintf>
      break;
 80108b4:	bf00      	nop
  }
}
 80108b6:	bf00      	nop
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	0801fde0 	.word	0x0801fde0
 80108c4:	0801fe10 	.word	0x0801fe10
 80108c8:	0801fe30 	.word	0x0801fe30

080108cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80108d8:	481a      	ldr	r0, [pc, #104]	@ (8010944 <tcpip_inpkt+0x78>)
 80108da:	f00c f9d6 	bl	801cc8a <sys_mbox_valid>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d105      	bne.n	80108f0 <tcpip_inpkt+0x24>
 80108e4:	4b18      	ldr	r3, [pc, #96]	@ (8010948 <tcpip_inpkt+0x7c>)
 80108e6:	22fc      	movs	r2, #252	@ 0xfc
 80108e8:	4918      	ldr	r1, [pc, #96]	@ (801094c <tcpip_inpkt+0x80>)
 80108ea:	4819      	ldr	r0, [pc, #100]	@ (8010950 <tcpip_inpkt+0x84>)
 80108ec:	f00c ff92 	bl	801d814 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80108f0:	2009      	movs	r0, #9
 80108f2:	f000 fe6b 	bl	80115cc <memp_malloc>
 80108f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d102      	bne.n	8010904 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80108fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010902:	e01a      	b.n	801093a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	2200      	movs	r2, #0
 8010908:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801091c:	6979      	ldr	r1, [r7, #20]
 801091e:	4809      	ldr	r0, [pc, #36]	@ (8010944 <tcpip_inpkt+0x78>)
 8010920:	f00c f968 	bl	801cbf4 <sys_mbox_trypost>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d006      	beq.n	8010938 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801092a:	6979      	ldr	r1, [r7, #20]
 801092c:	2009      	movs	r0, #9
 801092e:	f000 fec3 	bl	80116b8 <memp_free>
    return ERR_MEM;
 8010932:	f04f 33ff 	mov.w	r3, #4294967295
 8010936:	e000      	b.n	801093a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010938:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801093a:	4618      	mov	r0, r3
 801093c:	3718      	adds	r7, #24
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	24009b0c 	.word	0x24009b0c
 8010948:	0801fde0 	.word	0x0801fde0
 801094c:	0801fe58 	.word	0x0801fe58
 8010950:	0801fe30 	.word	0x0801fe30

08010954 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010964:	f003 0318 	and.w	r3, r3, #24
 8010968:	2b00      	cmp	r3, #0
 801096a:	d006      	beq.n	801097a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801096c:	4a08      	ldr	r2, [pc, #32]	@ (8010990 <tcpip_input+0x3c>)
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff ffab 	bl	80108cc <tcpip_inpkt>
 8010976:	4603      	mov	r3, r0
 8010978:	e005      	b.n	8010986 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801097a:	4a06      	ldr	r2, [pc, #24]	@ (8010994 <tcpip_input+0x40>)
 801097c:	6839      	ldr	r1, [r7, #0]
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7ff ffa4 	bl	80108cc <tcpip_inpkt>
 8010984:	4603      	mov	r3, r0
}
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	0801ca15 	.word	0x0801ca15
 8010994:	0801b8e1 	.word	0x0801b8e1

08010998 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80109a2:	4819      	ldr	r0, [pc, #100]	@ (8010a08 <tcpip_try_callback+0x70>)
 80109a4:	f00c f971 	bl	801cc8a <sys_mbox_valid>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <tcpip_try_callback+0x24>
 80109ae:	4b17      	ldr	r3, [pc, #92]	@ (8010a0c <tcpip_try_callback+0x74>)
 80109b0:	f240 125d 	movw	r2, #349	@ 0x15d
 80109b4:	4916      	ldr	r1, [pc, #88]	@ (8010a10 <tcpip_try_callback+0x78>)
 80109b6:	4817      	ldr	r0, [pc, #92]	@ (8010a14 <tcpip_try_callback+0x7c>)
 80109b8:	f00c ff2c 	bl	801d814 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80109bc:	2008      	movs	r0, #8
 80109be:	f000 fe05 	bl	80115cc <memp_malloc>
 80109c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d102      	bne.n	80109d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80109ca:	f04f 33ff 	mov.w	r3, #4294967295
 80109ce:	e017      	b.n	8010a00 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2201      	movs	r2, #1
 80109d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	683a      	ldr	r2, [r7, #0]
 80109e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80109e2:	68f9      	ldr	r1, [r7, #12]
 80109e4:	4808      	ldr	r0, [pc, #32]	@ (8010a08 <tcpip_try_callback+0x70>)
 80109e6:	f00c f905 	bl	801cbf4 <sys_mbox_trypost>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80109f0:	68f9      	ldr	r1, [r7, #12]
 80109f2:	2008      	movs	r0, #8
 80109f4:	f000 fe60 	bl	80116b8 <memp_free>
    return ERR_MEM;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	e000      	b.n	8010a00 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80109fe:	2300      	movs	r3, #0
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	24009b0c 	.word	0x24009b0c
 8010a0c:	0801fde0 	.word	0x0801fde0
 8010a10:	0801fe58 	.word	0x0801fe58
 8010a14:	0801fe30 	.word	0x0801fe30

08010a18 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010a22:	f000 f92d 	bl	8010c80 <lwip_init>

  tcpip_init_done = initfunc;
 8010a26:	4a17      	ldr	r2, [pc, #92]	@ (8010a84 <tcpip_init+0x6c>)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010a2c:	4a16      	ldr	r2, [pc, #88]	@ (8010a88 <tcpip_init+0x70>)
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010a32:	2106      	movs	r1, #6
 8010a34:	4815      	ldr	r0, [pc, #84]	@ (8010a8c <tcpip_init+0x74>)
 8010a36:	f00c f8c3 	bl	801cbc0 <sys_mbox_new>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d006      	beq.n	8010a4e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010a40:	4b13      	ldr	r3, [pc, #76]	@ (8010a90 <tcpip_init+0x78>)
 8010a42:	f240 2261 	movw	r2, #609	@ 0x261
 8010a46:	4913      	ldr	r1, [pc, #76]	@ (8010a94 <tcpip_init+0x7c>)
 8010a48:	4813      	ldr	r0, [pc, #76]	@ (8010a98 <tcpip_init+0x80>)
 8010a4a:	f00c fee3 	bl	801d814 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010a4e:	4813      	ldr	r0, [pc, #76]	@ (8010a9c <tcpip_init+0x84>)
 8010a50:	f00c f938 	bl	801ccc4 <sys_mutex_new>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d006      	beq.n	8010a68 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010a90 <tcpip_init+0x78>)
 8010a5c:	f240 2265 	movw	r2, #613	@ 0x265
 8010a60:	490f      	ldr	r1, [pc, #60]	@ (8010aa0 <tcpip_init+0x88>)
 8010a62:	480d      	ldr	r0, [pc, #52]	@ (8010a98 <tcpip_init+0x80>)
 8010a64:	f00c fed6 	bl	801d814 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010a68:	2318      	movs	r3, #24
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a70:	2200      	movs	r2, #0
 8010a72:	490c      	ldr	r1, [pc, #48]	@ (8010aa4 <tcpip_init+0x8c>)
 8010a74:	480c      	ldr	r0, [pc, #48]	@ (8010aa8 <tcpip_init+0x90>)
 8010a76:	f00c f957 	bl	801cd28 <sys_thread_new>
}
 8010a7a:	bf00      	nop
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	24009b04 	.word	0x24009b04
 8010a88:	24009b08 	.word	0x24009b08
 8010a8c:	24009b0c 	.word	0x24009b0c
 8010a90:	0801fde0 	.word	0x0801fde0
 8010a94:	0801fe68 	.word	0x0801fe68
 8010a98:	0801fe30 	.word	0x0801fe30
 8010a9c:	24009b10 	.word	0x24009b10
 8010aa0:	0801fe8c 	.word	0x0801fe8c
 8010aa4:	080107d5 	.word	0x080107d5
 8010aa8:	0801feb0 	.word	0x0801feb0

08010aac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010ab6:	88fb      	ldrh	r3, [r7, #6]
 8010ab8:	021b      	lsls	r3, r3, #8
 8010aba:	b21a      	sxth	r2, r3
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	0a1b      	lsrs	r3, r3, #8
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	b21b      	sxth	r3, r3
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	b21b      	sxth	r3, r3
 8010ac8:	b29b      	uxth	r3, r3
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010ad6:	b480      	push	{r7}
 8010ad8:	b083      	sub	sp, #12
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	061a      	lsls	r2, r3, #24
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	021b      	lsls	r3, r3, #8
 8010ae6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010aea:	431a      	orrs	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	0a1b      	lsrs	r3, r3, #8
 8010af0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010af4:	431a      	orrs	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	0e1b      	lsrs	r3, r3, #24
 8010afa:	4313      	orrs	r3, r2
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b089      	sub	sp, #36	@ 0x24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010b16:	2300      	movs	r3, #0
 8010b18:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	f003 0301 	and.w	r3, r3, #1
 8010b24:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d00d      	beq.n	8010b48 <lwip_standard_chksum+0x40>
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	dd0a      	ble.n	8010b48 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010b32:	69fa      	ldr	r2, [r7, #28]
 8010b34:	1c53      	adds	r3, r2, #1
 8010b36:	61fb      	str	r3, [r7, #28]
 8010b38:	f107 030e 	add.w	r3, r7, #14
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	7812      	ldrb	r2, [r2, #0]
 8010b40:	701a      	strb	r2, [r3, #0]
    len--;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	3b01      	subs	r3, #1
 8010b46:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010b4c:	e00a      	b.n	8010b64 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	1c9a      	adds	r2, r3, #2
 8010b52:	61ba      	str	r2, [r7, #24]
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	461a      	mov	r2, r3
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	3b02      	subs	r3, #2
 8010b62:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	dcf1      	bgt.n	8010b4e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd04      	ble.n	8010b7a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010b70:	f107 030e 	add.w	r3, r7, #14
 8010b74:	69ba      	ldr	r2, [r7, #24]
 8010b76:	7812      	ldrb	r2, [r2, #0]
 8010b78:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010b7a:	89fb      	ldrh	r3, [r7, #14]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	4413      	add	r3, r2
 8010b82:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	0c1a      	lsrs	r2, r3, #16
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	4413      	add	r3, r2
 8010b8e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	0c1a      	lsrs	r2, r3, #16
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	4413      	add	r3, r2
 8010b9a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d007      	beq.n	8010bb2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	021b      	lsls	r3, r3, #8
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	0a1b      	lsrs	r3, r3, #8
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	b29b      	uxth	r3, r3
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3724      	adds	r7, #36	@ 0x24
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	460b      	mov	r3, r1
 8010bcc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010bce:	887b      	ldrh	r3, [r7, #2]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff ff98 	bl	8010b08 <lwip_standard_chksum>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	43db      	mvns	r3, r3
 8010bdc:	b29b      	uxth	r3, r3
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b086      	sub	sp, #24
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	613b      	str	r3, [r7, #16]
 8010bfa:	e02b      	b.n	8010c54 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	685a      	ldr	r2, [r3, #4]
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	895b      	ldrh	r3, [r3, #10]
 8010c04:	4619      	mov	r1, r3
 8010c06:	4610      	mov	r0, r2
 8010c08:	f7ff ff7e 	bl	8010b08 <lwip_standard_chksum>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	4413      	add	r3, r2
 8010c14:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	0c1a      	lsrs	r2, r3, #16
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	4413      	add	r3, r2
 8010c20:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	895b      	ldrh	r3, [r3, #10]
 8010c26:	f003 0301 	and.w	r3, r3, #1
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00e      	beq.n	8010c4e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	bf0c      	ite	eq
 8010c36:	2301      	moveq	r3, #1
 8010c38:	2300      	movne	r3, #0
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	021b      	lsls	r3, r3, #8
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	0a1b      	lsrs	r3, r3, #8
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	613b      	str	r3, [r7, #16]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1d0      	bne.n	8010bfc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d007      	beq.n	8010c70 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	021b      	lsls	r3, r3, #8
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	0a1b      	lsrs	r3, r3, #8
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	43db      	mvns	r3, r3
 8010c76:	b29b      	uxth	r3, r3
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3718      	adds	r7, #24
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010c8a:	f00c f80f 	bl	801ccac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010c8e:	f000 f8d5 	bl	8010e3c <mem_init>
  memp_init();
 8010c92:	f000 fc2d 	bl	80114f0 <memp_init>
  pbuf_init();
  netif_init();
 8010c96:	f000 fd39 	bl	801170c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010c9a:	f007 f939 	bl	8017f10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010c9e:	f001 fe65 	bl	801296c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010ca2:	f007 f87b 	bl	8017d9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010ca6:	bf00      	nop
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
	...

08010cb0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010cba:	4b05      	ldr	r3, [pc, #20]	@ (8010cd0 <ptr_to_mem+0x20>)
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	88fb      	ldrh	r3, [r7, #6]
 8010cc0:	4413      	add	r3, r2
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	370c      	adds	r7, #12
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	24009b2c 	.word	0x24009b2c

08010cd4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010cdc:	4b05      	ldr	r3, [pc, #20]	@ (8010cf4 <mem_to_ptr+0x20>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	b29b      	uxth	r3, r3
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	24009b2c 	.word	0x24009b2c

08010cf8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b085      	sub	sp, #20
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010d00:	4b45      	ldr	r3, [pc, #276]	@ (8010e18 <plug_holes+0x120>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d206      	bcs.n	8010d18 <plug_holes+0x20>
 8010d0a:	4b44      	ldr	r3, [pc, #272]	@ (8010e1c <plug_holes+0x124>)
 8010d0c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010d10:	4943      	ldr	r1, [pc, #268]	@ (8010e20 <plug_holes+0x128>)
 8010d12:	4844      	ldr	r0, [pc, #272]	@ (8010e24 <plug_holes+0x12c>)
 8010d14:	f00c fd7e 	bl	801d814 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010d18:	4b43      	ldr	r3, [pc, #268]	@ (8010e28 <plug_holes+0x130>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d306      	bcc.n	8010d30 <plug_holes+0x38>
 8010d22:	4b3e      	ldr	r3, [pc, #248]	@ (8010e1c <plug_holes+0x124>)
 8010d24:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010d28:	4940      	ldr	r1, [pc, #256]	@ (8010e2c <plug_holes+0x134>)
 8010d2a:	483e      	ldr	r0, [pc, #248]	@ (8010e24 <plug_holes+0x12c>)
 8010d2c:	f00c fd72 	bl	801d814 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	791b      	ldrb	r3, [r3, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d006      	beq.n	8010d46 <plug_holes+0x4e>
 8010d38:	4b38      	ldr	r3, [pc, #224]	@ (8010e1c <plug_holes+0x124>)
 8010d3a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010d3e:	493c      	ldr	r1, [pc, #240]	@ (8010e30 <plug_holes+0x138>)
 8010d40:	4838      	ldr	r0, [pc, #224]	@ (8010e24 <plug_holes+0x12c>)
 8010d42:	f00c fd67 	bl	801d814 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d4e:	d906      	bls.n	8010d5e <plug_holes+0x66>
 8010d50:	4b32      	ldr	r3, [pc, #200]	@ (8010e1c <plug_holes+0x124>)
 8010d52:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010d56:	4937      	ldr	r1, [pc, #220]	@ (8010e34 <plug_holes+0x13c>)
 8010d58:	4832      	ldr	r0, [pc, #200]	@ (8010e24 <plug_holes+0x12c>)
 8010d5a:	f00c fd5b 	bl	801d814 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7ff ffa4 	bl	8010cb0 <ptr_to_mem>
 8010d68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d024      	beq.n	8010dbc <plug_holes+0xc4>
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	791b      	ldrb	r3, [r3, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d120      	bne.n	8010dbc <plug_holes+0xc4>
 8010d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8010e28 <plug_holes+0x130>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d01b      	beq.n	8010dbc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010d84:	4b2c      	ldr	r3, [pc, #176]	@ (8010e38 <plug_holes+0x140>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d102      	bne.n	8010d94 <plug_holes+0x9c>
      lfree = mem;
 8010d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010e38 <plug_holes+0x140>)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	881a      	ldrh	r2, [r3, #0]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010da4:	d00a      	beq.n	8010dbc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff ff80 	bl	8010cb0 <ptr_to_mem>
 8010db0:	4604      	mov	r4, r0
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff ff8e 	bl	8010cd4 <mem_to_ptr>
 8010db8:	4603      	mov	r3, r0
 8010dba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	885b      	ldrh	r3, [r3, #2]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff ff75 	bl	8010cb0 <ptr_to_mem>
 8010dc6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d01f      	beq.n	8010e10 <plug_holes+0x118>
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	791b      	ldrb	r3, [r3, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d11b      	bne.n	8010e10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010dd8:	4b17      	ldr	r3, [pc, #92]	@ (8010e38 <plug_holes+0x140>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d102      	bne.n	8010de8 <plug_holes+0xf0>
      lfree = pmem;
 8010de2:	4a15      	ldr	r2, [pc, #84]	@ (8010e38 <plug_holes+0x140>)
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	881a      	ldrh	r2, [r3, #0]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010df8:	d00a      	beq.n	8010e10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff ff56 	bl	8010cb0 <ptr_to_mem>
 8010e04:	4604      	mov	r4, r0
 8010e06:	68b8      	ldr	r0, [r7, #8]
 8010e08:	f7ff ff64 	bl	8010cd4 <mem_to_ptr>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010e10:	bf00      	nop
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd90      	pop	{r4, r7, pc}
 8010e18:	24009b2c 	.word	0x24009b2c
 8010e1c:	0801fec0 	.word	0x0801fec0
 8010e20:	0801fef0 	.word	0x0801fef0
 8010e24:	0801ff08 	.word	0x0801ff08
 8010e28:	24009b30 	.word	0x24009b30
 8010e2c:	0801ff30 	.word	0x0801ff30
 8010e30:	0801ff4c 	.word	0x0801ff4c
 8010e34:	0801ff68 	.word	0x0801ff68
 8010e38:	24009b38 	.word	0x24009b38

08010e3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010e42:	4b1d      	ldr	r3, [pc, #116]	@ (8010eb8 <mem_init+0x7c>)
 8010e44:	4a1d      	ldr	r2, [pc, #116]	@ (8010ebc <mem_init+0x80>)
 8010e46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010e48:	4b1b      	ldr	r3, [pc, #108]	@ (8010eb8 <mem_init+0x7c>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010e54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010e62:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010e66:	f7ff ff23 	bl	8010cb0 <ptr_to_mem>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4a14      	ldr	r2, [pc, #80]	@ (8010ec0 <mem_init+0x84>)
 8010e6e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010e70:	4b13      	ldr	r3, [pc, #76]	@ (8010ec0 <mem_init+0x84>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2201      	movs	r2, #1
 8010e76:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010e78:	4b11      	ldr	r3, [pc, #68]	@ (8010ec0 <mem_init+0x84>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010e80:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010e82:	4b0f      	ldr	r3, [pc, #60]	@ (8010ec0 <mem_init+0x84>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010e8a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb8 <mem_init+0x7c>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a0c      	ldr	r2, [pc, #48]	@ (8010ec4 <mem_init+0x88>)
 8010e92:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010e94:	480c      	ldr	r0, [pc, #48]	@ (8010ec8 <mem_init+0x8c>)
 8010e96:	f00b ff15 	bl	801ccc4 <sys_mutex_new>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d006      	beq.n	8010eae <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8010ecc <mem_init+0x90>)
 8010ea2:	f240 221f 	movw	r2, #543	@ 0x21f
 8010ea6:	490a      	ldr	r1, [pc, #40]	@ (8010ed0 <mem_init+0x94>)
 8010ea8:	480a      	ldr	r0, [pc, #40]	@ (8010ed4 <mem_init+0x98>)
 8010eaa:	f00c fcb3 	bl	801d814 <iprintf>
  }
}
 8010eae:	bf00      	nop
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	24009b2c 	.word	0x24009b2c
 8010ebc:	30004000 	.word	0x30004000
 8010ec0:	24009b30 	.word	0x24009b30
 8010ec4:	24009b38 	.word	0x24009b38
 8010ec8:	24009b34 	.word	0x24009b34
 8010ecc:	0801fec0 	.word	0x0801fec0
 8010ed0:	0801ff94 	.word	0x0801ff94
 8010ed4:	0801ff08 	.word	0x0801ff08

08010ed8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b086      	sub	sp, #24
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7ff fef7 	bl	8010cd4 <mem_to_ptr>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff fede 	bl	8010cb0 <ptr_to_mem>
 8010ef4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	885b      	ldrh	r3, [r3, #2]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7ff fed8 	bl	8010cb0 <ptr_to_mem>
 8010f00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010f0a:	d818      	bhi.n	8010f3e <mem_link_valid+0x66>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	885b      	ldrh	r3, [r3, #2]
 8010f10:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010f14:	d813      	bhi.n	8010f3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010f1a:	8afa      	ldrh	r2, [r7, #22]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d004      	beq.n	8010f2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	8afa      	ldrh	r2, [r7, #22]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d109      	bne.n	8010f3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010f2a:	4b08      	ldr	r3, [pc, #32]	@ (8010f4c <mem_link_valid+0x74>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010f2e:	693a      	ldr	r2, [r7, #16]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d006      	beq.n	8010f42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	885b      	ldrh	r3, [r3, #2]
 8010f38:	8afa      	ldrh	r2, [r7, #22]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d001      	beq.n	8010f42 <mem_link_valid+0x6a>
    return 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e000      	b.n	8010f44 <mem_link_valid+0x6c>
  }
  return 1;
 8010f42:	2301      	movs	r3, #1
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	24009b30 	.word	0x24009b30

08010f50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b088      	sub	sp, #32
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d070      	beq.n	8011040 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f003 0303 	and.w	r3, r3, #3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00d      	beq.n	8010f84 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010f68:	4b37      	ldr	r3, [pc, #220]	@ (8011048 <mem_free+0xf8>)
 8010f6a:	f240 2273 	movw	r2, #627	@ 0x273
 8010f6e:	4937      	ldr	r1, [pc, #220]	@ (801104c <mem_free+0xfc>)
 8010f70:	4837      	ldr	r0, [pc, #220]	@ (8011050 <mem_free+0x100>)
 8010f72:	f00c fc4f 	bl	801d814 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010f76:	f00b fef7 	bl	801cd68 <sys_arch_protect>
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f00b ff01 	bl	801cd84 <sys_arch_unprotect>
    return;
 8010f82:	e05e      	b.n	8011042 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3b08      	subs	r3, #8
 8010f88:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010f8a:	4b32      	ldr	r3, [pc, #200]	@ (8011054 <mem_free+0x104>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	69fa      	ldr	r2, [r7, #28]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d306      	bcc.n	8010fa2 <mem_free+0x52>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f103 020c 	add.w	r2, r3, #12
 8010f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8011058 <mem_free+0x108>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d90d      	bls.n	8010fbe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010fa2:	4b29      	ldr	r3, [pc, #164]	@ (8011048 <mem_free+0xf8>)
 8010fa4:	f240 227f 	movw	r2, #639	@ 0x27f
 8010fa8:	492c      	ldr	r1, [pc, #176]	@ (801105c <mem_free+0x10c>)
 8010faa:	4829      	ldr	r0, [pc, #164]	@ (8011050 <mem_free+0x100>)
 8010fac:	f00c fc32 	bl	801d814 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010fb0:	f00b feda 	bl	801cd68 <sys_arch_protect>
 8010fb4:	6138      	str	r0, [r7, #16]
 8010fb6:	6938      	ldr	r0, [r7, #16]
 8010fb8:	f00b fee4 	bl	801cd84 <sys_arch_unprotect>
    return;
 8010fbc:	e041      	b.n	8011042 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010fbe:	4828      	ldr	r0, [pc, #160]	@ (8011060 <mem_free+0x110>)
 8010fc0:	f00b fe96 	bl	801ccf0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	791b      	ldrb	r3, [r3, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d110      	bne.n	8010fee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8011048 <mem_free+0xf8>)
 8010fce:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010fd2:	4924      	ldr	r1, [pc, #144]	@ (8011064 <mem_free+0x114>)
 8010fd4:	481e      	ldr	r0, [pc, #120]	@ (8011050 <mem_free+0x100>)
 8010fd6:	f00c fc1d 	bl	801d814 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010fda:	4821      	ldr	r0, [pc, #132]	@ (8011060 <mem_free+0x110>)
 8010fdc:	f00b fe97 	bl	801cd0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010fe0:	f00b fec2 	bl	801cd68 <sys_arch_protect>
 8010fe4:	6178      	str	r0, [r7, #20]
 8010fe6:	6978      	ldr	r0, [r7, #20]
 8010fe8:	f00b fecc 	bl	801cd84 <sys_arch_unprotect>
    return;
 8010fec:	e029      	b.n	8011042 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010fee:	69f8      	ldr	r0, [r7, #28]
 8010ff0:	f7ff ff72 	bl	8010ed8 <mem_link_valid>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d110      	bne.n	801101c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010ffa:	4b13      	ldr	r3, [pc, #76]	@ (8011048 <mem_free+0xf8>)
 8010ffc:	f240 2295 	movw	r2, #661	@ 0x295
 8011000:	4919      	ldr	r1, [pc, #100]	@ (8011068 <mem_free+0x118>)
 8011002:	4813      	ldr	r0, [pc, #76]	@ (8011050 <mem_free+0x100>)
 8011004:	f00c fc06 	bl	801d814 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011008:	4815      	ldr	r0, [pc, #84]	@ (8011060 <mem_free+0x110>)
 801100a:	f00b fe80 	bl	801cd0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801100e:	f00b feab 	bl	801cd68 <sys_arch_protect>
 8011012:	61b8      	str	r0, [r7, #24]
 8011014:	69b8      	ldr	r0, [r7, #24]
 8011016:	f00b feb5 	bl	801cd84 <sys_arch_unprotect>
    return;
 801101a:	e012      	b.n	8011042 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	2200      	movs	r2, #0
 8011020:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011022:	4b12      	ldr	r3, [pc, #72]	@ (801106c <mem_free+0x11c>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	69fa      	ldr	r2, [r7, #28]
 8011028:	429a      	cmp	r2, r3
 801102a:	d202      	bcs.n	8011032 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801102c:	4a0f      	ldr	r2, [pc, #60]	@ (801106c <mem_free+0x11c>)
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011032:	69f8      	ldr	r0, [r7, #28]
 8011034:	f7ff fe60 	bl	8010cf8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011038:	4809      	ldr	r0, [pc, #36]	@ (8011060 <mem_free+0x110>)
 801103a:	f00b fe68 	bl	801cd0e <sys_mutex_unlock>
 801103e:	e000      	b.n	8011042 <mem_free+0xf2>
    return;
 8011040:	bf00      	nop
}
 8011042:	3720      	adds	r7, #32
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	0801fec0 	.word	0x0801fec0
 801104c:	0801ffb0 	.word	0x0801ffb0
 8011050:	0801ff08 	.word	0x0801ff08
 8011054:	24009b2c 	.word	0x24009b2c
 8011058:	24009b30 	.word	0x24009b30
 801105c:	0801ffd4 	.word	0x0801ffd4
 8011060:	24009b34 	.word	0x24009b34
 8011064:	0801fff0 	.word	0x0801fff0
 8011068:	08020018 	.word	0x08020018
 801106c:	24009b38 	.word	0x24009b38

08011070 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b088      	sub	sp, #32
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	460b      	mov	r3, r1
 801107a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801107c:	887b      	ldrh	r3, [r7, #2]
 801107e:	3303      	adds	r3, #3
 8011080:	b29b      	uxth	r3, r3
 8011082:	f023 0303 	bic.w	r3, r3, #3
 8011086:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011088:	8bfb      	ldrh	r3, [r7, #30]
 801108a:	2b0b      	cmp	r3, #11
 801108c:	d801      	bhi.n	8011092 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801108e:	230c      	movs	r3, #12
 8011090:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011092:	8bfb      	ldrh	r3, [r7, #30]
 8011094:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011098:	d803      	bhi.n	80110a2 <mem_trim+0x32>
 801109a:	8bfa      	ldrh	r2, [r7, #30]
 801109c:	887b      	ldrh	r3, [r7, #2]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d201      	bcs.n	80110a6 <mem_trim+0x36>
    return NULL;
 80110a2:	2300      	movs	r3, #0
 80110a4:	e0d8      	b.n	8011258 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80110a6:	4b6e      	ldr	r3, [pc, #440]	@ (8011260 <mem_trim+0x1f0>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d304      	bcc.n	80110ba <mem_trim+0x4a>
 80110b0:	4b6c      	ldr	r3, [pc, #432]	@ (8011264 <mem_trim+0x1f4>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d306      	bcc.n	80110c8 <mem_trim+0x58>
 80110ba:	4b6b      	ldr	r3, [pc, #428]	@ (8011268 <mem_trim+0x1f8>)
 80110bc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80110c0:	496a      	ldr	r1, [pc, #424]	@ (801126c <mem_trim+0x1fc>)
 80110c2:	486b      	ldr	r0, [pc, #428]	@ (8011270 <mem_trim+0x200>)
 80110c4:	f00c fba6 	bl	801d814 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80110c8:	4b65      	ldr	r3, [pc, #404]	@ (8011260 <mem_trim+0x1f0>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d304      	bcc.n	80110dc <mem_trim+0x6c>
 80110d2:	4b64      	ldr	r3, [pc, #400]	@ (8011264 <mem_trim+0x1f4>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d307      	bcc.n	80110ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110dc:	f00b fe44 	bl	801cd68 <sys_arch_protect>
 80110e0:	60b8      	str	r0, [r7, #8]
 80110e2:	68b8      	ldr	r0, [r7, #8]
 80110e4:	f00b fe4e 	bl	801cd84 <sys_arch_unprotect>
    return rmem;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	e0b5      	b.n	8011258 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	3b08      	subs	r3, #8
 80110f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80110f2:	69b8      	ldr	r0, [r7, #24]
 80110f4:	f7ff fdee 	bl	8010cd4 <mem_to_ptr>
 80110f8:	4603      	mov	r3, r0
 80110fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	881a      	ldrh	r2, [r3, #0]
 8011100:	8afb      	ldrh	r3, [r7, #22]
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	b29b      	uxth	r3, r3
 8011106:	3b08      	subs	r3, #8
 8011108:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801110a:	8bfa      	ldrh	r2, [r7, #30]
 801110c:	8abb      	ldrh	r3, [r7, #20]
 801110e:	429a      	cmp	r2, r3
 8011110:	d906      	bls.n	8011120 <mem_trim+0xb0>
 8011112:	4b55      	ldr	r3, [pc, #340]	@ (8011268 <mem_trim+0x1f8>)
 8011114:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011118:	4956      	ldr	r1, [pc, #344]	@ (8011274 <mem_trim+0x204>)
 801111a:	4855      	ldr	r0, [pc, #340]	@ (8011270 <mem_trim+0x200>)
 801111c:	f00c fb7a 	bl	801d814 <iprintf>
  if (newsize > size) {
 8011120:	8bfa      	ldrh	r2, [r7, #30]
 8011122:	8abb      	ldrh	r3, [r7, #20]
 8011124:	429a      	cmp	r2, r3
 8011126:	d901      	bls.n	801112c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011128:	2300      	movs	r3, #0
 801112a:	e095      	b.n	8011258 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801112c:	8bfa      	ldrh	r2, [r7, #30]
 801112e:	8abb      	ldrh	r3, [r7, #20]
 8011130:	429a      	cmp	r2, r3
 8011132:	d101      	bne.n	8011138 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	e08f      	b.n	8011258 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011138:	484f      	ldr	r0, [pc, #316]	@ (8011278 <mem_trim+0x208>)
 801113a:	f00b fdd9 	bl	801ccf0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	4618      	mov	r0, r3
 8011144:	f7ff fdb4 	bl	8010cb0 <ptr_to_mem>
 8011148:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	791b      	ldrb	r3, [r3, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d13f      	bne.n	80111d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801115a:	d106      	bne.n	801116a <mem_trim+0xfa>
 801115c:	4b42      	ldr	r3, [pc, #264]	@ (8011268 <mem_trim+0x1f8>)
 801115e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011162:	4946      	ldr	r1, [pc, #280]	@ (801127c <mem_trim+0x20c>)
 8011164:	4842      	ldr	r0, [pc, #264]	@ (8011270 <mem_trim+0x200>)
 8011166:	f00c fb55 	bl	801d814 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	881b      	ldrh	r3, [r3, #0]
 801116e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011170:	8afa      	ldrh	r2, [r7, #22]
 8011172:	8bfb      	ldrh	r3, [r7, #30]
 8011174:	4413      	add	r3, r2
 8011176:	b29b      	uxth	r3, r3
 8011178:	3308      	adds	r3, #8
 801117a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801117c:	4b40      	ldr	r3, [pc, #256]	@ (8011280 <mem_trim+0x210>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	693a      	ldr	r2, [r7, #16]
 8011182:	429a      	cmp	r2, r3
 8011184:	d106      	bne.n	8011194 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011186:	89fb      	ldrh	r3, [r7, #14]
 8011188:	4618      	mov	r0, r3
 801118a:	f7ff fd91 	bl	8010cb0 <ptr_to_mem>
 801118e:	4603      	mov	r3, r0
 8011190:	4a3b      	ldr	r2, [pc, #236]	@ (8011280 <mem_trim+0x210>)
 8011192:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011194:	89fb      	ldrh	r3, [r7, #14]
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff fd8a 	bl	8010cb0 <ptr_to_mem>
 801119c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	2200      	movs	r2, #0
 80111a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	89ba      	ldrh	r2, [r7, #12]
 80111a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	8afa      	ldrh	r2, [r7, #22]
 80111ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	89fa      	ldrh	r2, [r7, #14]
 80111b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80111be:	d047      	beq.n	8011250 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7ff fd73 	bl	8010cb0 <ptr_to_mem>
 80111ca:	4602      	mov	r2, r0
 80111cc:	89fb      	ldrh	r3, [r7, #14]
 80111ce:	8053      	strh	r3, [r2, #2]
 80111d0:	e03e      	b.n	8011250 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80111d2:	8bfb      	ldrh	r3, [r7, #30]
 80111d4:	f103 0214 	add.w	r2, r3, #20
 80111d8:	8abb      	ldrh	r3, [r7, #20]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d838      	bhi.n	8011250 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80111de:	8afa      	ldrh	r2, [r7, #22]
 80111e0:	8bfb      	ldrh	r3, [r7, #30]
 80111e2:	4413      	add	r3, r2
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	3308      	adds	r3, #8
 80111e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80111f2:	d106      	bne.n	8011202 <mem_trim+0x192>
 80111f4:	4b1c      	ldr	r3, [pc, #112]	@ (8011268 <mem_trim+0x1f8>)
 80111f6:	f240 3216 	movw	r2, #790	@ 0x316
 80111fa:	4920      	ldr	r1, [pc, #128]	@ (801127c <mem_trim+0x20c>)
 80111fc:	481c      	ldr	r0, [pc, #112]	@ (8011270 <mem_trim+0x200>)
 80111fe:	f00c fb09 	bl	801d814 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011202:	89fb      	ldrh	r3, [r7, #14]
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff fd53 	bl	8010cb0 <ptr_to_mem>
 801120a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801120c:	4b1c      	ldr	r3, [pc, #112]	@ (8011280 <mem_trim+0x210>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	693a      	ldr	r2, [r7, #16]
 8011212:	429a      	cmp	r2, r3
 8011214:	d202      	bcs.n	801121c <mem_trim+0x1ac>
      lfree = mem2;
 8011216:	4a1a      	ldr	r2, [pc, #104]	@ (8011280 <mem_trim+0x210>)
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	2200      	movs	r2, #0
 8011220:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	881a      	ldrh	r2, [r3, #0]
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	8afa      	ldrh	r2, [r7, #22]
 801122e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	89fa      	ldrh	r2, [r7, #14]
 8011234:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	881b      	ldrh	r3, [r3, #0]
 801123a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801123e:	d007      	beq.n	8011250 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	4618      	mov	r0, r3
 8011246:	f7ff fd33 	bl	8010cb0 <ptr_to_mem>
 801124a:	4602      	mov	r2, r0
 801124c:	89fb      	ldrh	r3, [r7, #14]
 801124e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011250:	4809      	ldr	r0, [pc, #36]	@ (8011278 <mem_trim+0x208>)
 8011252:	f00b fd5c 	bl	801cd0e <sys_mutex_unlock>
  return rmem;
 8011256:	687b      	ldr	r3, [r7, #4]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3720      	adds	r7, #32
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	24009b2c 	.word	0x24009b2c
 8011264:	24009b30 	.word	0x24009b30
 8011268:	0801fec0 	.word	0x0801fec0
 801126c:	0802004c 	.word	0x0802004c
 8011270:	0801ff08 	.word	0x0801ff08
 8011274:	08020064 	.word	0x08020064
 8011278:	24009b34 	.word	0x24009b34
 801127c:	08020084 	.word	0x08020084
 8011280:	24009b38 	.word	0x24009b38

08011284 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b088      	sub	sp, #32
 8011288:	af00      	add	r7, sp, #0
 801128a:	4603      	mov	r3, r0
 801128c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801128e:	88fb      	ldrh	r3, [r7, #6]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d101      	bne.n	8011298 <mem_malloc+0x14>
    return NULL;
 8011294:	2300      	movs	r3, #0
 8011296:	e0e2      	b.n	801145e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011298:	88fb      	ldrh	r3, [r7, #6]
 801129a:	3303      	adds	r3, #3
 801129c:	b29b      	uxth	r3, r3
 801129e:	f023 0303 	bic.w	r3, r3, #3
 80112a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80112a4:	8bbb      	ldrh	r3, [r7, #28]
 80112a6:	2b0b      	cmp	r3, #11
 80112a8:	d801      	bhi.n	80112ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80112aa:	230c      	movs	r3, #12
 80112ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80112ae:	8bbb      	ldrh	r3, [r7, #28]
 80112b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112b4:	d803      	bhi.n	80112be <mem_malloc+0x3a>
 80112b6:	8bba      	ldrh	r2, [r7, #28]
 80112b8:	88fb      	ldrh	r3, [r7, #6]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d201      	bcs.n	80112c2 <mem_malloc+0x3e>
    return NULL;
 80112be:	2300      	movs	r3, #0
 80112c0:	e0cd      	b.n	801145e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80112c2:	4869      	ldr	r0, [pc, #420]	@ (8011468 <mem_malloc+0x1e4>)
 80112c4:	f00b fd14 	bl	801ccf0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80112c8:	4b68      	ldr	r3, [pc, #416]	@ (801146c <mem_malloc+0x1e8>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff fd01 	bl	8010cd4 <mem_to_ptr>
 80112d2:	4603      	mov	r3, r0
 80112d4:	83fb      	strh	r3, [r7, #30]
 80112d6:	e0b7      	b.n	8011448 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80112d8:	8bfb      	ldrh	r3, [r7, #30]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff fce8 	bl	8010cb0 <ptr_to_mem>
 80112e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	791b      	ldrb	r3, [r3, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f040 80a7 	bne.w	801143a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	461a      	mov	r2, r3
 80112f2:	8bfb      	ldrh	r3, [r7, #30]
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	f1a3 0208 	sub.w	r2, r3, #8
 80112fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80112fc:	429a      	cmp	r2, r3
 80112fe:	f0c0 809c 	bcc.w	801143a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	8bfb      	ldrh	r3, [r7, #30]
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	f1a3 0208 	sub.w	r2, r3, #8
 8011310:	8bbb      	ldrh	r3, [r7, #28]
 8011312:	3314      	adds	r3, #20
 8011314:	429a      	cmp	r2, r3
 8011316:	d333      	bcc.n	8011380 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011318:	8bfa      	ldrh	r2, [r7, #30]
 801131a:	8bbb      	ldrh	r3, [r7, #28]
 801131c:	4413      	add	r3, r2
 801131e:	b29b      	uxth	r3, r3
 8011320:	3308      	adds	r3, #8
 8011322:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011324:	8a7b      	ldrh	r3, [r7, #18]
 8011326:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801132a:	d106      	bne.n	801133a <mem_malloc+0xb6>
 801132c:	4b50      	ldr	r3, [pc, #320]	@ (8011470 <mem_malloc+0x1ec>)
 801132e:	f240 3287 	movw	r2, #903	@ 0x387
 8011332:	4950      	ldr	r1, [pc, #320]	@ (8011474 <mem_malloc+0x1f0>)
 8011334:	4850      	ldr	r0, [pc, #320]	@ (8011478 <mem_malloc+0x1f4>)
 8011336:	f00c fa6d 	bl	801d814 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801133a:	8a7b      	ldrh	r3, [r7, #18]
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fcb7 	bl	8010cb0 <ptr_to_mem>
 8011342:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2200      	movs	r2, #0
 8011348:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	881a      	ldrh	r2, [r3, #0]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	8bfa      	ldrh	r2, [r7, #30]
 8011356:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	8a7a      	ldrh	r2, [r7, #18]
 801135c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2201      	movs	r2, #1
 8011362:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801136c:	d00b      	beq.n	8011386 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	881b      	ldrh	r3, [r3, #0]
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff fc9c 	bl	8010cb0 <ptr_to_mem>
 8011378:	4602      	mov	r2, r0
 801137a:	8a7b      	ldrh	r3, [r7, #18]
 801137c:	8053      	strh	r3, [r2, #2]
 801137e:	e002      	b.n	8011386 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	2201      	movs	r2, #1
 8011384:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011386:	4b39      	ldr	r3, [pc, #228]	@ (801146c <mem_malloc+0x1e8>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	697a      	ldr	r2, [r7, #20]
 801138c:	429a      	cmp	r2, r3
 801138e:	d127      	bne.n	80113e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011390:	4b36      	ldr	r3, [pc, #216]	@ (801146c <mem_malloc+0x1e8>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011396:	e005      	b.n	80113a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fc87 	bl	8010cb0 <ptr_to_mem>
 80113a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	791b      	ldrb	r3, [r3, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d004      	beq.n	80113b6 <mem_malloc+0x132>
 80113ac:	4b33      	ldr	r3, [pc, #204]	@ (801147c <mem_malloc+0x1f8>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	69ba      	ldr	r2, [r7, #24]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d1f0      	bne.n	8011398 <mem_malloc+0x114>
          }
          lfree = cur;
 80113b6:	4a2d      	ldr	r2, [pc, #180]	@ (801146c <mem_malloc+0x1e8>)
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80113bc:	4b2b      	ldr	r3, [pc, #172]	@ (801146c <mem_malloc+0x1e8>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	4b2e      	ldr	r3, [pc, #184]	@ (801147c <mem_malloc+0x1f8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d00b      	beq.n	80113e0 <mem_malloc+0x15c>
 80113c8:	4b28      	ldr	r3, [pc, #160]	@ (801146c <mem_malloc+0x1e8>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	791b      	ldrb	r3, [r3, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d006      	beq.n	80113e0 <mem_malloc+0x15c>
 80113d2:	4b27      	ldr	r3, [pc, #156]	@ (8011470 <mem_malloc+0x1ec>)
 80113d4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80113d8:	4929      	ldr	r1, [pc, #164]	@ (8011480 <mem_malloc+0x1fc>)
 80113da:	4827      	ldr	r0, [pc, #156]	@ (8011478 <mem_malloc+0x1f4>)
 80113dc:	f00c fa1a 	bl	801d814 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80113e0:	4821      	ldr	r0, [pc, #132]	@ (8011468 <mem_malloc+0x1e4>)
 80113e2:	f00b fc94 	bl	801cd0e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80113e6:	8bba      	ldrh	r2, [r7, #28]
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	4413      	add	r3, r2
 80113ec:	3308      	adds	r3, #8
 80113ee:	4a23      	ldr	r2, [pc, #140]	@ (801147c <mem_malloc+0x1f8>)
 80113f0:	6812      	ldr	r2, [r2, #0]
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d906      	bls.n	8011404 <mem_malloc+0x180>
 80113f6:	4b1e      	ldr	r3, [pc, #120]	@ (8011470 <mem_malloc+0x1ec>)
 80113f8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80113fc:	4921      	ldr	r1, [pc, #132]	@ (8011484 <mem_malloc+0x200>)
 80113fe:	481e      	ldr	r0, [pc, #120]	@ (8011478 <mem_malloc+0x1f4>)
 8011400:	f00c fa08 	bl	801d814 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	f003 0303 	and.w	r3, r3, #3
 801140a:	2b00      	cmp	r3, #0
 801140c:	d006      	beq.n	801141c <mem_malloc+0x198>
 801140e:	4b18      	ldr	r3, [pc, #96]	@ (8011470 <mem_malloc+0x1ec>)
 8011410:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011414:	491c      	ldr	r1, [pc, #112]	@ (8011488 <mem_malloc+0x204>)
 8011416:	4818      	ldr	r0, [pc, #96]	@ (8011478 <mem_malloc+0x1f4>)
 8011418:	f00c f9fc 	bl	801d814 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	f003 0303 	and.w	r3, r3, #3
 8011422:	2b00      	cmp	r3, #0
 8011424:	d006      	beq.n	8011434 <mem_malloc+0x1b0>
 8011426:	4b12      	ldr	r3, [pc, #72]	@ (8011470 <mem_malloc+0x1ec>)
 8011428:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801142c:	4917      	ldr	r1, [pc, #92]	@ (801148c <mem_malloc+0x208>)
 801142e:	4812      	ldr	r0, [pc, #72]	@ (8011478 <mem_malloc+0x1f4>)
 8011430:	f00c f9f0 	bl	801d814 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	3308      	adds	r3, #8
 8011438:	e011      	b.n	801145e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801143a:	8bfb      	ldrh	r3, [r7, #30]
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff fc37 	bl	8010cb0 <ptr_to_mem>
 8011442:	4603      	mov	r3, r0
 8011444:	881b      	ldrh	r3, [r3, #0]
 8011446:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011448:	8bfa      	ldrh	r2, [r7, #30]
 801144a:	8bbb      	ldrh	r3, [r7, #28]
 801144c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8011450:	429a      	cmp	r2, r3
 8011452:	f4ff af41 	bcc.w	80112d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011456:	4804      	ldr	r0, [pc, #16]	@ (8011468 <mem_malloc+0x1e4>)
 8011458:	f00b fc59 	bl	801cd0e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3720      	adds	r7, #32
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	24009b34 	.word	0x24009b34
 801146c:	24009b38 	.word	0x24009b38
 8011470:	0801fec0 	.word	0x0801fec0
 8011474:	08020084 	.word	0x08020084
 8011478:	0801ff08 	.word	0x0801ff08
 801147c:	24009b30 	.word	0x24009b30
 8011480:	08020098 	.word	0x08020098
 8011484:	080200b4 	.word	0x080200b4
 8011488:	080200e4 	.word	0x080200e4
 801148c:	08020114 	.word	0x08020114

08011490 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	2200      	movs	r2, #0
 801149e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	3303      	adds	r3, #3
 80114a6:	f023 0303 	bic.w	r3, r3, #3
 80114aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80114ac:	2300      	movs	r3, #0
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	e011      	b.n	80114d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	689b      	ldr	r3, [r3, #8]
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	881b      	ldrh	r3, [r3, #0]
 80114c8:	461a      	mov	r2, r3
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	4413      	add	r3, r2
 80114ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	3301      	adds	r3, #1
 80114d4:	60fb      	str	r3, [r7, #12]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	885b      	ldrh	r3, [r3, #2]
 80114da:	461a      	mov	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	4293      	cmp	r3, r2
 80114e0:	dbe7      	blt.n	80114b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80114e2:	bf00      	nop
 80114e4:	bf00      	nop
 80114e6:	3714      	adds	r7, #20
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80114f6:	2300      	movs	r3, #0
 80114f8:	80fb      	strh	r3, [r7, #6]
 80114fa:	e009      	b.n	8011510 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80114fc:	88fb      	ldrh	r3, [r7, #6]
 80114fe:	4a08      	ldr	r2, [pc, #32]	@ (8011520 <memp_init+0x30>)
 8011500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011504:	4618      	mov	r0, r3
 8011506:	f7ff ffc3 	bl	8011490 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801150a:	88fb      	ldrh	r3, [r7, #6]
 801150c:	3301      	adds	r3, #1
 801150e:	80fb      	strh	r3, [r7, #6]
 8011510:	88fb      	ldrh	r3, [r7, #6]
 8011512:	2b0c      	cmp	r3, #12
 8011514:	d9f2      	bls.n	80114fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011516:	bf00      	nop
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	08022d74 	.word	0x08022d74

08011524 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801152c:	f00b fc1c 	bl	801cd68 <sys_arch_protect>
 8011530:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d015      	beq.n	801156c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	6812      	ldr	r2, [r2, #0]
 8011548:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	f003 0303 	and.w	r3, r3, #3
 8011550:	2b00      	cmp	r3, #0
 8011552:	d006      	beq.n	8011562 <do_memp_malloc_pool+0x3e>
 8011554:	4b09      	ldr	r3, [pc, #36]	@ (801157c <do_memp_malloc_pool+0x58>)
 8011556:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801155a:	4909      	ldr	r1, [pc, #36]	@ (8011580 <do_memp_malloc_pool+0x5c>)
 801155c:	4809      	ldr	r0, [pc, #36]	@ (8011584 <do_memp_malloc_pool+0x60>)
 801155e:	f00c f959 	bl	801d814 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f00b fc0e 	bl	801cd84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	e003      	b.n	8011574 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f00b fc09 	bl	801cd84 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	08020138 	.word	0x08020138
 8011580:	08020168 	.word	0x08020168
 8011584:	0802018c 	.word	0x0802018c

08011588 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <memp_malloc_pool+0x1c>
 8011596:	4b0a      	ldr	r3, [pc, #40]	@ (80115c0 <memp_malloc_pool+0x38>)
 8011598:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801159c:	4909      	ldr	r1, [pc, #36]	@ (80115c4 <memp_malloc_pool+0x3c>)
 801159e:	480a      	ldr	r0, [pc, #40]	@ (80115c8 <memp_malloc_pool+0x40>)
 80115a0:	f00c f938 	bl	801d814 <iprintf>
  if (desc == NULL) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d101      	bne.n	80115ae <memp_malloc_pool+0x26>
    return NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	e003      	b.n	80115b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff ffb8 	bl	8011524 <do_memp_malloc_pool>
 80115b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	08020138 	.word	0x08020138
 80115c4:	080201b4 	.word	0x080201b4
 80115c8:	0802018c 	.word	0x0802018c

080115cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80115d6:	79fb      	ldrb	r3, [r7, #7]
 80115d8:	2b0c      	cmp	r3, #12
 80115da:	d908      	bls.n	80115ee <memp_malloc+0x22>
 80115dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011608 <memp_malloc+0x3c>)
 80115de:	f240 1257 	movw	r2, #343	@ 0x157
 80115e2:	490a      	ldr	r1, [pc, #40]	@ (801160c <memp_malloc+0x40>)
 80115e4:	480a      	ldr	r0, [pc, #40]	@ (8011610 <memp_malloc+0x44>)
 80115e6:	f00c f915 	bl	801d814 <iprintf>
 80115ea:	2300      	movs	r3, #0
 80115ec:	e008      	b.n	8011600 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80115ee:	79fb      	ldrb	r3, [r7, #7]
 80115f0:	4a08      	ldr	r2, [pc, #32]	@ (8011614 <memp_malloc+0x48>)
 80115f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7ff ff94 	bl	8011524 <do_memp_malloc_pool>
 80115fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80115fe:	68fb      	ldr	r3, [r7, #12]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	08020138 	.word	0x08020138
 801160c:	080201c8 	.word	0x080201c8
 8011610:	0802018c 	.word	0x0802018c
 8011614:	08022d74 	.word	0x08022d74

08011618 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	f003 0303 	and.w	r3, r3, #3
 8011628:	2b00      	cmp	r3, #0
 801162a:	d006      	beq.n	801163a <do_memp_free_pool+0x22>
 801162c:	4b0d      	ldr	r3, [pc, #52]	@ (8011664 <do_memp_free_pool+0x4c>)
 801162e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011632:	490d      	ldr	r1, [pc, #52]	@ (8011668 <do_memp_free_pool+0x50>)
 8011634:	480d      	ldr	r0, [pc, #52]	@ (801166c <do_memp_free_pool+0x54>)
 8011636:	f00c f8ed 	bl	801d814 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801163e:	f00b fb93 	bl	801cd68 <sys_arch_protect>
 8011642:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011656:	68b8      	ldr	r0, [r7, #8]
 8011658:	f00b fb94 	bl	801cd84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801165c:	bf00      	nop
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	08020138 	.word	0x08020138
 8011668:	080201e8 	.word	0x080201e8
 801166c:	0802018c 	.word	0x0802018c

08011670 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d106      	bne.n	801168e <memp_free_pool+0x1e>
 8011680:	4b0a      	ldr	r3, [pc, #40]	@ (80116ac <memp_free_pool+0x3c>)
 8011682:	f240 1295 	movw	r2, #405	@ 0x195
 8011686:	490a      	ldr	r1, [pc, #40]	@ (80116b0 <memp_free_pool+0x40>)
 8011688:	480a      	ldr	r0, [pc, #40]	@ (80116b4 <memp_free_pool+0x44>)
 801168a:	f00c f8c3 	bl	801d814 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d007      	beq.n	80116a4 <memp_free_pool+0x34>
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d004      	beq.n	80116a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801169a:	6839      	ldr	r1, [r7, #0]
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff ffbb 	bl	8011618 <do_memp_free_pool>
 80116a2:	e000      	b.n	80116a6 <memp_free_pool+0x36>
    return;
 80116a4:	bf00      	nop
}
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	08020138 	.word	0x08020138
 80116b0:	080201b4 	.word	0x080201b4
 80116b4:	0802018c 	.word	0x0802018c

080116b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	6039      	str	r1, [r7, #0]
 80116c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80116c4:	79fb      	ldrb	r3, [r7, #7]
 80116c6:	2b0c      	cmp	r3, #12
 80116c8:	d907      	bls.n	80116da <memp_free+0x22>
 80116ca:	4b0c      	ldr	r3, [pc, #48]	@ (80116fc <memp_free+0x44>)
 80116cc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80116d0:	490b      	ldr	r1, [pc, #44]	@ (8011700 <memp_free+0x48>)
 80116d2:	480c      	ldr	r0, [pc, #48]	@ (8011704 <memp_free+0x4c>)
 80116d4:	f00c f89e 	bl	801d814 <iprintf>
 80116d8:	e00c      	b.n	80116f4 <memp_free+0x3c>

  if (mem == NULL) {
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d008      	beq.n	80116f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80116e0:	79fb      	ldrb	r3, [r7, #7]
 80116e2:	4a09      	ldr	r2, [pc, #36]	@ (8011708 <memp_free+0x50>)
 80116e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116e8:	6839      	ldr	r1, [r7, #0]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7ff ff94 	bl	8011618 <do_memp_free_pool>
 80116f0:	e000      	b.n	80116f4 <memp_free+0x3c>
    return;
 80116f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	08020138 	.word	0x08020138
 8011700:	08020208 	.word	0x08020208
 8011704:	0802018c 	.word	0x0802018c
 8011708:	08022d74 	.word	0x08022d74

0801170c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801170c:	b480      	push	{r7}
 801170e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011710:	bf00      	nop
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
	...

0801171c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d108      	bne.n	8011742 <netif_add+0x26>
 8011730:	4b5b      	ldr	r3, [pc, #364]	@ (80118a0 <netif_add+0x184>)
 8011732:	f240 1227 	movw	r2, #295	@ 0x127
 8011736:	495b      	ldr	r1, [pc, #364]	@ (80118a4 <netif_add+0x188>)
 8011738:	485b      	ldr	r0, [pc, #364]	@ (80118a8 <netif_add+0x18c>)
 801173a:	f00c f86b 	bl	801d814 <iprintf>
 801173e:	2300      	movs	r3, #0
 8011740:	e0a9      	b.n	8011896 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011744:	2b00      	cmp	r3, #0
 8011746:	d108      	bne.n	801175a <netif_add+0x3e>
 8011748:	4b55      	ldr	r3, [pc, #340]	@ (80118a0 <netif_add+0x184>)
 801174a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801174e:	4957      	ldr	r1, [pc, #348]	@ (80118ac <netif_add+0x190>)
 8011750:	4855      	ldr	r0, [pc, #340]	@ (80118a8 <netif_add+0x18c>)
 8011752:	f00c f85f 	bl	801d814 <iprintf>
 8011756:	2300      	movs	r3, #0
 8011758:	e09d      	b.n	8011896 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011760:	4b53      	ldr	r3, [pc, #332]	@ (80118b0 <netif_add+0x194>)
 8011762:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d101      	bne.n	801176e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801176a:	4b51      	ldr	r3, [pc, #324]	@ (80118b0 <netif_add+0x194>)
 801176c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d101      	bne.n	8011778 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011774:	4b4e      	ldr	r3, [pc, #312]	@ (80118b0 <netif_add+0x194>)
 8011776:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2200      	movs	r2, #0
 801177c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2200      	movs	r2, #0
 8011782:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	4a49      	ldr	r2, [pc, #292]	@ (80118b4 <netif_add+0x198>)
 801178e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	3324      	adds	r3, #36	@ 0x24
 80117a2:	2204      	movs	r2, #4
 80117a4:	2100      	movs	r1, #0
 80117a6:	4618      	mov	r0, r3
 80117a8:	f00c f9da 	bl	801db60 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2200      	movs	r2, #0
 80117b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	6a3a      	ldr	r2, [r7, #32]
 80117b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80117b8:	4b3f      	ldr	r3, [pc, #252]	@ (80118b8 <netif_add+0x19c>)
 80117ba:	781a      	ldrb	r2, [r3, #0]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f000 f914 	bl	80119fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80117d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	4798      	blx	r3
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <netif_add+0xc8>
    return NULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	e058      	b.n	8011896 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80117ea:	2bff      	cmp	r3, #255	@ 0xff
 80117ec:	d103      	bne.n	80117f6 <netif_add+0xda>
        netif->num = 0;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80117fa:	4b30      	ldr	r3, [pc, #192]	@ (80118bc <netif_add+0x1a0>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	617b      	str	r3, [r7, #20]
 8011800:	e02b      	b.n	801185a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011802:	697a      	ldr	r2, [r7, #20]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	429a      	cmp	r2, r3
 8011808:	d106      	bne.n	8011818 <netif_add+0xfc>
 801180a:	4b25      	ldr	r3, [pc, #148]	@ (80118a0 <netif_add+0x184>)
 801180c:	f240 128b 	movw	r2, #395	@ 0x18b
 8011810:	492b      	ldr	r1, [pc, #172]	@ (80118c0 <netif_add+0x1a4>)
 8011812:	4825      	ldr	r0, [pc, #148]	@ (80118a8 <netif_add+0x18c>)
 8011814:	f00b fffe 	bl	801d814 <iprintf>
        num_netifs++;
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	3301      	adds	r3, #1
 801181c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	2bff      	cmp	r3, #255	@ 0xff
 8011822:	dd06      	ble.n	8011832 <netif_add+0x116>
 8011824:	4b1e      	ldr	r3, [pc, #120]	@ (80118a0 <netif_add+0x184>)
 8011826:	f240 128d 	movw	r2, #397	@ 0x18d
 801182a:	4926      	ldr	r1, [pc, #152]	@ (80118c4 <netif_add+0x1a8>)
 801182c:	481e      	ldr	r0, [pc, #120]	@ (80118a8 <netif_add+0x18c>)
 801182e:	f00b fff1 	bl	801d814 <iprintf>
        if (netif2->num == netif->num) {
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801183e:	429a      	cmp	r2, r3
 8011840:	d108      	bne.n	8011854 <netif_add+0x138>
          netif->num++;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011848:	3301      	adds	r3, #1
 801184a:	b2da      	uxtb	r2, r3
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8011852:	e005      	b.n	8011860 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	617b      	str	r3, [r7, #20]
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d1d0      	bne.n	8011802 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1be      	bne.n	80117e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801186c:	2bfe      	cmp	r3, #254	@ 0xfe
 801186e:	d103      	bne.n	8011878 <netif_add+0x15c>
    netif_num = 0;
 8011870:	4b11      	ldr	r3, [pc, #68]	@ (80118b8 <netif_add+0x19c>)
 8011872:	2200      	movs	r2, #0
 8011874:	701a      	strb	r2, [r3, #0]
 8011876:	e006      	b.n	8011886 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801187e:	3301      	adds	r3, #1
 8011880:	b2da      	uxtb	r2, r3
 8011882:	4b0d      	ldr	r3, [pc, #52]	@ (80118b8 <netif_add+0x19c>)
 8011884:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011886:	4b0d      	ldr	r3, [pc, #52]	@ (80118bc <netif_add+0x1a0>)
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801188e:	4a0b      	ldr	r2, [pc, #44]	@ (80118bc <netif_add+0x1a0>)
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011894:	68fb      	ldr	r3, [r7, #12]
}
 8011896:	4618      	mov	r0, r3
 8011898:	3718      	adds	r7, #24
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	08020224 	.word	0x08020224
 80118a4:	080202b8 	.word	0x080202b8
 80118a8:	08020274 	.word	0x08020274
 80118ac:	080202d4 	.word	0x080202d4
 80118b0:	08022df8 	.word	0x08022df8
 80118b4:	08011cdf 	.word	0x08011cdf
 80118b8:	2400cc30 	.word	0x2400cc30
 80118bc:	2400cc28 	.word	0x2400cc28
 80118c0:	080202f8 	.word	0x080202f8
 80118c4:	0802030c 	.word	0x0802030c

080118c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f002 fb93 	bl	8014000 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80118da:	6839      	ldr	r1, [r7, #0]
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f006 ffa3 	bl	8018828 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80118e2:	bf00      	nop
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
	...

080118ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d106      	bne.n	801190c <netif_do_set_ipaddr+0x20>
 80118fe:	4b1d      	ldr	r3, [pc, #116]	@ (8011974 <netif_do_set_ipaddr+0x88>)
 8011900:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011904:	491c      	ldr	r1, [pc, #112]	@ (8011978 <netif_do_set_ipaddr+0x8c>)
 8011906:	481d      	ldr	r0, [pc, #116]	@ (801197c <netif_do_set_ipaddr+0x90>)
 8011908:	f00b ff84 	bl	801d814 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <netif_do_set_ipaddr+0x34>
 8011912:	4b18      	ldr	r3, [pc, #96]	@ (8011974 <netif_do_set_ipaddr+0x88>)
 8011914:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011918:	4917      	ldr	r1, [pc, #92]	@ (8011978 <netif_do_set_ipaddr+0x8c>)
 801191a:	4818      	ldr	r0, [pc, #96]	@ (801197c <netif_do_set_ipaddr+0x90>)
 801191c:	f00b ff7a 	bl	801d814 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	3304      	adds	r3, #4
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	429a      	cmp	r2, r3
 801192c:	d01c      	beq.n	8011968 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	3304      	adds	r3, #4
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801193e:	f107 0314 	add.w	r3, r7, #20
 8011942:	4619      	mov	r1, r3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f7ff ffbf 	bl	80118c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <netif_do_set_ipaddr+0x6a>
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	e000      	b.n	8011958 <netif_do_set_ipaddr+0x6c>
 8011956:	2300      	movs	r3, #0
 8011958:	68fa      	ldr	r2, [r7, #12]
 801195a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801195c:	2101      	movs	r1, #1
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f000 f8d2 	bl	8011b08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011968:	2300      	movs	r3, #0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3718      	adds	r7, #24
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08020224 	.word	0x08020224
 8011978:	0802033c 	.word	0x0802033c
 801197c:	08020274 	.word	0x08020274

08011980 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	3308      	adds	r3, #8
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	429a      	cmp	r2, r3
 8011998:	d00a      	beq.n	80119b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <netif_do_set_netmask+0x26>
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	e000      	b.n	80119a8 <netif_do_set_netmask+0x28>
 80119a6:	2300      	movs	r3, #0
 80119a8:	68fa      	ldr	r2, [r7, #12]
 80119aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80119ac:	2301      	movs	r3, #1
 80119ae:	e000      	b.n	80119b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80119be:	b480      	push	{r7}
 80119c0:	b085      	sub	sp, #20
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	60f8      	str	r0, [r7, #12]
 80119c6:	60b9      	str	r1, [r7, #8]
 80119c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	330c      	adds	r3, #12
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d00a      	beq.n	80119ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <netif_do_set_gw+0x26>
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	e000      	b.n	80119e6 <netif_do_set_gw+0x28>
 80119e4:	2300      	movs	r3, #0
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80119ea:	2301      	movs	r3, #1
 80119ec:	e000      	b.n	80119f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80119ee:	2300      	movs	r3, #0
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3714      	adds	r7, #20
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr

080119fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b088      	sub	sp, #32
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
 8011a08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d101      	bne.n	8011a1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011a18:	4b1c      	ldr	r3, [pc, #112]	@ (8011a8c <netif_set_addr+0x90>)
 8011a1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011a22:	4b1a      	ldr	r3, [pc, #104]	@ (8011a8c <netif_set_addr+0x90>)
 8011a24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d101      	bne.n	8011a30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011a2c:	4b17      	ldr	r3, [pc, #92]	@ (8011a8c <netif_set_addr+0x90>)
 8011a2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d003      	beq.n	8011a3e <netif_set_addr+0x42>
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d101      	bne.n	8011a42 <netif_set_addr+0x46>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e000      	b.n	8011a44 <netif_set_addr+0x48>
 8011a42:	2300      	movs	r3, #0
 8011a44:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d006      	beq.n	8011a5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a4c:	f107 0310 	add.w	r3, r7, #16
 8011a50:	461a      	mov	r2, r3
 8011a52:	68b9      	ldr	r1, [r7, #8]
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7ff ff49 	bl	80118ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011a5a:	69fa      	ldr	r2, [r7, #28]
 8011a5c:	6879      	ldr	r1, [r7, #4]
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f7ff ff8e 	bl	8011980 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011a64:	69ba      	ldr	r2, [r7, #24]
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7ff ffa8 	bl	80119be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d106      	bne.n	8011a82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a74:	f107 0310 	add.w	r3, r7, #16
 8011a78:	461a      	mov	r2, r3
 8011a7a:	68b9      	ldr	r1, [r7, #8]
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f7ff ff35 	bl	80118ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011a82:	bf00      	nop
 8011a84:	3720      	adds	r7, #32
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	08022df8 	.word	0x08022df8

08011a90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011a98:	4a04      	ldr	r2, [pc, #16]	@ (8011aac <netif_set_default+0x1c>)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011a9e:	bf00      	nop
 8011aa0:	370c      	adds	r7, #12
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop
 8011aac:	2400cc2c 	.word	0x2400cc2c

08011ab0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d107      	bne.n	8011ace <netif_set_up+0x1e>
 8011abe:	4b0f      	ldr	r3, [pc, #60]	@ (8011afc <netif_set_up+0x4c>)
 8011ac0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011ac4:	490e      	ldr	r1, [pc, #56]	@ (8011b00 <netif_set_up+0x50>)
 8011ac6:	480f      	ldr	r0, [pc, #60]	@ (8011b04 <netif_set_up+0x54>)
 8011ac8:	f00b fea4 	bl	801d814 <iprintf>
 8011acc:	e013      	b.n	8011af6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011ad4:	f003 0301 	and.w	r3, r3, #1
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d10c      	bne.n	8011af6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011ae2:	f043 0301 	orr.w	r3, r3, #1
 8011ae6:	b2da      	uxtb	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011aee:	2103      	movs	r1, #3
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 f809 	bl	8011b08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	08020224 	.word	0x08020224
 8011b00:	080203ac 	.word	0x080203ac
 8011b04:	08020274 	.word	0x08020274

08011b08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	460b      	mov	r3, r1
 8011b12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d106      	bne.n	8011b28 <netif_issue_reports+0x20>
 8011b1a:	4b18      	ldr	r3, [pc, #96]	@ (8011b7c <netif_issue_reports+0x74>)
 8011b1c:	f240 326d 	movw	r2, #877	@ 0x36d
 8011b20:	4917      	ldr	r1, [pc, #92]	@ (8011b80 <netif_issue_reports+0x78>)
 8011b22:	4818      	ldr	r0, [pc, #96]	@ (8011b84 <netif_issue_reports+0x7c>)
 8011b24:	f00b fe76 	bl	801d814 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011b2e:	f003 0304 	and.w	r3, r3, #4
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d01e      	beq.n	8011b74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011b3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d017      	beq.n	8011b74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b44:	78fb      	ldrb	r3, [r7, #3]
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d013      	beq.n	8011b76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	3304      	adds	r3, #4
 8011b52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d00e      	beq.n	8011b76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011b5e:	f003 0308 	and.w	r3, r3, #8
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d007      	beq.n	8011b76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f009 fc57 	bl	801b420 <etharp_request>
 8011b72:	e000      	b.n	8011b76 <netif_issue_reports+0x6e>
    return;
 8011b74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011b76:	3708      	adds	r7, #8
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	08020224 	.word	0x08020224
 8011b80:	080203c8 	.word	0x080203c8
 8011b84:	08020274 	.word	0x08020274

08011b88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d107      	bne.n	8011ba6 <netif_set_down+0x1e>
 8011b96:	4b12      	ldr	r3, [pc, #72]	@ (8011be0 <netif_set_down+0x58>)
 8011b98:	f240 329b 	movw	r2, #923	@ 0x39b
 8011b9c:	4911      	ldr	r1, [pc, #68]	@ (8011be4 <netif_set_down+0x5c>)
 8011b9e:	4812      	ldr	r0, [pc, #72]	@ (8011be8 <netif_set_down+0x60>)
 8011ba0:	f00b fe38 	bl	801d814 <iprintf>
 8011ba4:	e019      	b.n	8011bda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011bac:	f003 0301 	and.w	r3, r3, #1
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d012      	beq.n	8011bda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011bba:	f023 0301 	bic.w	r3, r3, #1
 8011bbe:	b2da      	uxtb	r2, r3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011bcc:	f003 0308 	and.w	r3, r3, #8
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f008 ffdd 	bl	801ab94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011bda:	3708      	adds	r7, #8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	08020224 	.word	0x08020224
 8011be4:	080203ec 	.word	0x080203ec
 8011be8:	08020274 	.word	0x08020274

08011bec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d107      	bne.n	8011c0a <netif_set_link_up+0x1e>
 8011bfa:	4b15      	ldr	r3, [pc, #84]	@ (8011c50 <netif_set_link_up+0x64>)
 8011bfc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011c00:	4914      	ldr	r1, [pc, #80]	@ (8011c54 <netif_set_link_up+0x68>)
 8011c02:	4815      	ldr	r0, [pc, #84]	@ (8011c58 <netif_set_link_up+0x6c>)
 8011c04:	f00b fe06 	bl	801d814 <iprintf>
 8011c08:	e01e      	b.n	8011c48 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c10:	f003 0304 	and.w	r3, r3, #4
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d117      	bne.n	8011c48 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c1e:	f043 0304 	orr.w	r3, r3, #4
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f007 fa28 	bl	8019080 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c30:	2103      	movs	r1, #3
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7ff ff68 	bl	8011b08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	69db      	ldr	r3, [r3, #28]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d003      	beq.n	8011c48 <netif_set_link_up+0x5c>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	08020224 	.word	0x08020224
 8011c54:	0802040c 	.word	0x0802040c
 8011c58:	08020274 	.word	0x08020274

08011c5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d107      	bne.n	8011c7a <netif_set_link_down+0x1e>
 8011c6a:	4b11      	ldr	r3, [pc, #68]	@ (8011cb0 <netif_set_link_down+0x54>)
 8011c6c:	f240 4206 	movw	r2, #1030	@ 0x406
 8011c70:	4910      	ldr	r1, [pc, #64]	@ (8011cb4 <netif_set_link_down+0x58>)
 8011c72:	4811      	ldr	r0, [pc, #68]	@ (8011cb8 <netif_set_link_down+0x5c>)
 8011c74:	f00b fdce 	bl	801d814 <iprintf>
 8011c78:	e017      	b.n	8011caa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c80:	f003 0304 	and.w	r3, r3, #4
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d010      	beq.n	8011caa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011c8e:	f023 0304 	bic.w	r3, r3, #4
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	69db      	ldr	r3, [r3, #28]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d003      	beq.n	8011caa <netif_set_link_down+0x4e>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	69db      	ldr	r3, [r3, #28]
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	08020224 	.word	0x08020224
 8011cb4:	08020430 	.word	0x08020430
 8011cb8:	08020274 	.word	0x08020274

08011cbc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d002      	beq.n	8011cd2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	61da      	str	r2, [r3, #28]
  }
}
 8011cd2:	bf00      	nop
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b085      	sub	sp, #20
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	60b9      	str	r1, [r7, #8]
 8011ce8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011cea:	f06f 030b 	mvn.w	r3, #11
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr
	...

08011cfc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b085      	sub	sp, #20
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011d06:	79fb      	ldrb	r3, [r7, #7]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d013      	beq.n	8011d34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8011d44 <netif_get_by_index+0x48>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	60fb      	str	r3, [r7, #12]
 8011d12:	e00c      	b.n	8011d2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	79fa      	ldrb	r2, [r7, #7]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d101      	bne.n	8011d28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	e006      	b.n	8011d36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1ef      	bne.n	8011d14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	2400cc28 	.word	0x2400cc28

08011d48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011d4e:	f00b f80b 	bl	801cd68 <sys_arch_protect>
 8011d52:	6038      	str	r0, [r7, #0]
 8011d54:	4b0d      	ldr	r3, [pc, #52]	@ (8011d8c <pbuf_free_ooseq+0x44>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	701a      	strb	r2, [r3, #0]
 8011d5a:	6838      	ldr	r0, [r7, #0]
 8011d5c:	f00b f812 	bl	801cd84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011d60:	4b0b      	ldr	r3, [pc, #44]	@ (8011d90 <pbuf_free_ooseq+0x48>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	607b      	str	r3, [r7, #4]
 8011d66:	e00a      	b.n	8011d7e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d003      	beq.n	8011d78 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f002 f983 	bl	801407c <tcp_free_ooseq>
      return;
 8011d76:	e005      	b.n	8011d84 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	607b      	str	r3, [r7, #4]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d1f1      	bne.n	8011d68 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	2400cc31 	.word	0x2400cc31
 8011d90:	2400cc40 	.word	0x2400cc40

08011d94 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011d9c:	f7ff ffd4 	bl	8011d48 <pbuf_free_ooseq>
}
 8011da0:	bf00      	nop
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011dae:	f00a ffdb 	bl	801cd68 <sys_arch_protect>
 8011db2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011db4:	4b0f      	ldr	r3, [pc, #60]	@ (8011df4 <pbuf_pool_is_empty+0x4c>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011dba:	4b0e      	ldr	r3, [pc, #56]	@ (8011df4 <pbuf_pool_is_empty+0x4c>)
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f00a ffdf 	bl	801cd84 <sys_arch_unprotect>

  if (!queued) {
 8011dc6:	78fb      	ldrb	r3, [r7, #3]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10f      	bne.n	8011dec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011dcc:	2100      	movs	r1, #0
 8011dce:	480a      	ldr	r0, [pc, #40]	@ (8011df8 <pbuf_pool_is_empty+0x50>)
 8011dd0:	f7fe fde2 	bl	8010998 <tcpip_try_callback>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d008      	beq.n	8011dec <pbuf_pool_is_empty+0x44>
 8011dda:	f00a ffc5 	bl	801cd68 <sys_arch_protect>
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	4b04      	ldr	r3, [pc, #16]	@ (8011df4 <pbuf_pool_is_empty+0x4c>)
 8011de2:	2200      	movs	r2, #0
 8011de4:	701a      	strb	r2, [r3, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f00a ffcc 	bl	801cd84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011dec:	bf00      	nop
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	2400cc31 	.word	0x2400cc31
 8011df8:	08011d95 	.word	0x08011d95

08011dfc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	4611      	mov	r1, r2
 8011e08:	461a      	mov	r2, r3
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	80fb      	strh	r3, [r7, #6]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	88fa      	ldrh	r2, [r7, #6]
 8011e22:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	88ba      	ldrh	r2, [r7, #4]
 8011e28:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011e2a:	8b3b      	ldrh	r3, [r7, #24]
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	7f3a      	ldrb	r2, [r7, #28]
 8011e36:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	73da      	strb	r2, [r3, #15]
}
 8011e44:	bf00      	nop
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b08c      	sub	sp, #48	@ 0x30
 8011e54:	af02      	add	r7, sp, #8
 8011e56:	4603      	mov	r3, r0
 8011e58:	71fb      	strb	r3, [r7, #7]
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	80bb      	strh	r3, [r7, #4]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011e62:	79fb      	ldrb	r3, [r7, #7]
 8011e64:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011e66:	887b      	ldrh	r3, [r7, #2]
 8011e68:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011e6c:	d07f      	beq.n	8011f6e <pbuf_alloc+0x11e>
 8011e6e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011e72:	f300 80c8 	bgt.w	8012006 <pbuf_alloc+0x1b6>
 8011e76:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011e7a:	d010      	beq.n	8011e9e <pbuf_alloc+0x4e>
 8011e7c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011e80:	f300 80c1 	bgt.w	8012006 <pbuf_alloc+0x1b6>
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d002      	beq.n	8011e8e <pbuf_alloc+0x3e>
 8011e88:	2b41      	cmp	r3, #65	@ 0x41
 8011e8a:	f040 80bc 	bne.w	8012006 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011e8e:	887a      	ldrh	r2, [r7, #2]
 8011e90:	88bb      	ldrh	r3, [r7, #4]
 8011e92:	4619      	mov	r1, r3
 8011e94:	2000      	movs	r0, #0
 8011e96:	f000 f8d1 	bl	801203c <pbuf_alloc_reference>
 8011e9a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011e9c:	e0bd      	b.n	801201a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011ea6:	88bb      	ldrh	r3, [r7, #4]
 8011ea8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011eaa:	200c      	movs	r0, #12
 8011eac:	f7ff fb8e 	bl	80115cc <memp_malloc>
 8011eb0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d109      	bne.n	8011ecc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011eb8:	f7ff ff76 	bl	8011da8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d002      	beq.n	8011ec8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ec4:	f000 faa8 	bl	8012418 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	e0a7      	b.n	801201c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011ecc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ece:	3303      	adds	r3, #3
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	f023 0303 	bic.w	r3, r3, #3
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	8b7a      	ldrh	r2, [r7, #26]
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	bf28      	it	cs
 8011ee4:	4613      	movcs	r3, r2
 8011ee6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011ee8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011eea:	3310      	adds	r3, #16
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	4413      	add	r3, r2
 8011ef0:	3303      	adds	r3, #3
 8011ef2:	f023 0303 	bic.w	r3, r3, #3
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	89f9      	ldrh	r1, [r7, #14]
 8011efa:	8b7a      	ldrh	r2, [r7, #26]
 8011efc:	2300      	movs	r3, #0
 8011efe:	9301      	str	r3, [sp, #4]
 8011f00:	887b      	ldrh	r3, [r7, #2]
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	460b      	mov	r3, r1
 8011f06:	4601      	mov	r1, r0
 8011f08:	6938      	ldr	r0, [r7, #16]
 8011f0a:	f7ff ff77 	bl	8011dfc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	f003 0303 	and.w	r3, r3, #3
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d006      	beq.n	8011f28 <pbuf_alloc+0xd8>
 8011f1a:	4b42      	ldr	r3, [pc, #264]	@ (8012024 <pbuf_alloc+0x1d4>)
 8011f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011f20:	4941      	ldr	r1, [pc, #260]	@ (8012028 <pbuf_alloc+0x1d8>)
 8011f22:	4842      	ldr	r0, [pc, #264]	@ (801202c <pbuf_alloc+0x1dc>)
 8011f24:	f00b fc76 	bl	801d814 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011f28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f2a:	3303      	adds	r3, #3
 8011f2c:	f023 0303 	bic.w	r3, r3, #3
 8011f30:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011f34:	d106      	bne.n	8011f44 <pbuf_alloc+0xf4>
 8011f36:	4b3b      	ldr	r3, [pc, #236]	@ (8012024 <pbuf_alloc+0x1d4>)
 8011f38:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011f3c:	493c      	ldr	r1, [pc, #240]	@ (8012030 <pbuf_alloc+0x1e0>)
 8011f3e:	483b      	ldr	r0, [pc, #236]	@ (801202c <pbuf_alloc+0x1dc>)
 8011f40:	f00b fc68 	bl	801d814 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d102      	bne.n	8011f50 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f4e:	e002      	b.n	8011f56 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	693a      	ldr	r2, [r7, #16]
 8011f54:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011f5a:	8b7a      	ldrh	r2, [r7, #26]
 8011f5c:	89fb      	ldrh	r3, [r7, #14]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011f66:	8b7b      	ldrh	r3, [r7, #26]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d19e      	bne.n	8011eaa <pbuf_alloc+0x5a>
      break;
 8011f6c:	e055      	b.n	801201a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011f6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f70:	3303      	adds	r3, #3
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	f023 0303 	bic.w	r3, r3, #3
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	88bb      	ldrh	r3, [r7, #4]
 8011f7c:	3303      	adds	r3, #3
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	f023 0303 	bic.w	r3, r3, #3
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	4413      	add	r3, r2
 8011f88:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011f8a:	8b3b      	ldrh	r3, [r7, #24]
 8011f8c:	3310      	adds	r3, #16
 8011f8e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011f90:	8b3a      	ldrh	r2, [r7, #24]
 8011f92:	88bb      	ldrh	r3, [r7, #4]
 8011f94:	3303      	adds	r3, #3
 8011f96:	f023 0303 	bic.w	r3, r3, #3
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d306      	bcc.n	8011fac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011f9e:	8afa      	ldrh	r2, [r7, #22]
 8011fa0:	88bb      	ldrh	r3, [r7, #4]
 8011fa2:	3303      	adds	r3, #3
 8011fa4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d201      	bcs.n	8011fb0 <pbuf_alloc+0x160>
        return NULL;
 8011fac:	2300      	movs	r3, #0
 8011fae:	e035      	b.n	801201c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011fb0:	8afb      	ldrh	r3, [r7, #22]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff f966 	bl	8011284 <mem_malloc>
 8011fb8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d101      	bne.n	8011fc4 <pbuf_alloc+0x174>
        return NULL;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e02b      	b.n	801201c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011fc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011fc6:	3310      	adds	r3, #16
 8011fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fca:	4413      	add	r3, r2
 8011fcc:	3303      	adds	r3, #3
 8011fce:	f023 0303 	bic.w	r3, r3, #3
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	88b9      	ldrh	r1, [r7, #4]
 8011fd6:	88ba      	ldrh	r2, [r7, #4]
 8011fd8:	2300      	movs	r3, #0
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	887b      	ldrh	r3, [r7, #2]
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fe6:	f7ff ff09 	bl	8011dfc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	f003 0303 	and.w	r3, r3, #3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d010      	beq.n	8012018 <pbuf_alloc+0x1c8>
 8011ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8012024 <pbuf_alloc+0x1d4>)
 8011ff8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011ffc:	490d      	ldr	r1, [pc, #52]	@ (8012034 <pbuf_alloc+0x1e4>)
 8011ffe:	480b      	ldr	r0, [pc, #44]	@ (801202c <pbuf_alloc+0x1dc>)
 8012000:	f00b fc08 	bl	801d814 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012004:	e008      	b.n	8012018 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012006:	4b07      	ldr	r3, [pc, #28]	@ (8012024 <pbuf_alloc+0x1d4>)
 8012008:	f240 1227 	movw	r2, #295	@ 0x127
 801200c:	490a      	ldr	r1, [pc, #40]	@ (8012038 <pbuf_alloc+0x1e8>)
 801200e:	4807      	ldr	r0, [pc, #28]	@ (801202c <pbuf_alloc+0x1dc>)
 8012010:	f00b fc00 	bl	801d814 <iprintf>
      return NULL;
 8012014:	2300      	movs	r3, #0
 8012016:	e001      	b.n	801201c <pbuf_alloc+0x1cc>
      break;
 8012018:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801201c:	4618      	mov	r0, r3
 801201e:	3728      	adds	r7, #40	@ 0x28
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	08020454 	.word	0x08020454
 8012028:	08020484 	.word	0x08020484
 801202c:	080204b4 	.word	0x080204b4
 8012030:	080204dc 	.word	0x080204dc
 8012034:	08020510 	.word	0x08020510
 8012038:	0802053c 	.word	0x0802053c

0801203c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af02      	add	r7, sp, #8
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	460b      	mov	r3, r1
 8012046:	807b      	strh	r3, [r7, #2]
 8012048:	4613      	mov	r3, r2
 801204a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801204c:	883b      	ldrh	r3, [r7, #0]
 801204e:	2b41      	cmp	r3, #65	@ 0x41
 8012050:	d009      	beq.n	8012066 <pbuf_alloc_reference+0x2a>
 8012052:	883b      	ldrh	r3, [r7, #0]
 8012054:	2b01      	cmp	r3, #1
 8012056:	d006      	beq.n	8012066 <pbuf_alloc_reference+0x2a>
 8012058:	4b0f      	ldr	r3, [pc, #60]	@ (8012098 <pbuf_alloc_reference+0x5c>)
 801205a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801205e:	490f      	ldr	r1, [pc, #60]	@ (801209c <pbuf_alloc_reference+0x60>)
 8012060:	480f      	ldr	r0, [pc, #60]	@ (80120a0 <pbuf_alloc_reference+0x64>)
 8012062:	f00b fbd7 	bl	801d814 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012066:	200b      	movs	r0, #11
 8012068:	f7ff fab0 	bl	80115cc <memp_malloc>
 801206c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012074:	2300      	movs	r3, #0
 8012076:	e00b      	b.n	8012090 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012078:	8879      	ldrh	r1, [r7, #2]
 801207a:	887a      	ldrh	r2, [r7, #2]
 801207c:	2300      	movs	r3, #0
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	883b      	ldrh	r3, [r7, #0]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	460b      	mov	r3, r1
 8012086:	6879      	ldr	r1, [r7, #4]
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f7ff feb7 	bl	8011dfc <pbuf_init_alloced_pbuf>
  return p;
 801208e:	68fb      	ldr	r3, [r7, #12]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	08020454 	.word	0x08020454
 801209c:	08020558 	.word	0x08020558
 80120a0:	080204b4 	.word	0x080204b4

080120a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b088      	sub	sp, #32
 80120a8:	af02      	add	r7, sp, #8
 80120aa:	607b      	str	r3, [r7, #4]
 80120ac:	4603      	mov	r3, r0
 80120ae:	73fb      	strb	r3, [r7, #15]
 80120b0:	460b      	mov	r3, r1
 80120b2:	81bb      	strh	r3, [r7, #12]
 80120b4:	4613      	mov	r3, r2
 80120b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80120b8:	7bfb      	ldrb	r3, [r7, #15]
 80120ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80120bc:	8a7b      	ldrh	r3, [r7, #18]
 80120be:	3303      	adds	r3, #3
 80120c0:	f023 0203 	bic.w	r2, r3, #3
 80120c4:	89bb      	ldrh	r3, [r7, #12]
 80120c6:	441a      	add	r2, r3
 80120c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d901      	bls.n	80120d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80120ce:	2300      	movs	r3, #0
 80120d0:	e018      	b.n	8012104 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80120d2:	6a3b      	ldr	r3, [r7, #32]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d007      	beq.n	80120e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80120d8:	8a7b      	ldrh	r3, [r7, #18]
 80120da:	3303      	adds	r3, #3
 80120dc:	f023 0303 	bic.w	r3, r3, #3
 80120e0:	6a3a      	ldr	r2, [r7, #32]
 80120e2:	4413      	add	r3, r2
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	e001      	b.n	80120ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	89b9      	ldrh	r1, [r7, #12]
 80120f0:	89ba      	ldrh	r2, [r7, #12]
 80120f2:	2302      	movs	r3, #2
 80120f4:	9301      	str	r3, [sp, #4]
 80120f6:	897b      	ldrh	r3, [r7, #10]
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	460b      	mov	r3, r1
 80120fc:	6979      	ldr	r1, [r7, #20]
 80120fe:	f7ff fe7d 	bl	8011dfc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012102:	687b      	ldr	r3, [r7, #4]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3718      	adds	r7, #24
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	460b      	mov	r3, r1
 8012116:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <pbuf_realloc+0x20>
 801211e:	4b3a      	ldr	r3, [pc, #232]	@ (8012208 <pbuf_realloc+0xfc>)
 8012120:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012124:	4939      	ldr	r1, [pc, #228]	@ (801220c <pbuf_realloc+0x100>)
 8012126:	483a      	ldr	r0, [pc, #232]	@ (8012210 <pbuf_realloc+0x104>)
 8012128:	f00b fb74 	bl	801d814 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	891b      	ldrh	r3, [r3, #8]
 8012130:	887a      	ldrh	r2, [r7, #2]
 8012132:	429a      	cmp	r2, r3
 8012134:	d263      	bcs.n	80121fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	891a      	ldrh	r2, [r3, #8]
 801213a:	887b      	ldrh	r3, [r7, #2]
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012140:	887b      	ldrh	r3, [r7, #2]
 8012142:	817b      	strh	r3, [r7, #10]
  q = p;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012148:	e018      	b.n	801217c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	895b      	ldrh	r3, [r3, #10]
 801214e:	897a      	ldrh	r2, [r7, #10]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	891a      	ldrh	r2, [r3, #8]
 8012158:	893b      	ldrh	r3, [r7, #8]
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	b29a      	uxth	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <pbuf_realloc+0x70>
 801216e:	4b26      	ldr	r3, [pc, #152]	@ (8012208 <pbuf_realloc+0xfc>)
 8012170:	f240 12af 	movw	r2, #431	@ 0x1af
 8012174:	4927      	ldr	r1, [pc, #156]	@ (8012214 <pbuf_realloc+0x108>)
 8012176:	4826      	ldr	r0, [pc, #152]	@ (8012210 <pbuf_realloc+0x104>)
 8012178:	f00b fb4c 	bl	801d814 <iprintf>
  while (rem_len > q->len) {
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	895b      	ldrh	r3, [r3, #10]
 8012180:	897a      	ldrh	r2, [r7, #10]
 8012182:	429a      	cmp	r2, r3
 8012184:	d8e1      	bhi.n	801214a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	7b1b      	ldrb	r3, [r3, #12]
 801218a:	f003 030f 	and.w	r3, r3, #15
 801218e:	2b00      	cmp	r3, #0
 8012190:	d121      	bne.n	80121d6 <pbuf_realloc+0xca>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	895b      	ldrh	r3, [r3, #10]
 8012196:	897a      	ldrh	r2, [r7, #10]
 8012198:	429a      	cmp	r2, r3
 801219a:	d01c      	beq.n	80121d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	7b5b      	ldrb	r3, [r3, #13]
 80121a0:	f003 0302 	and.w	r3, r3, #2
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d116      	bne.n	80121d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	685a      	ldr	r2, [r3, #4]
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	1ad3      	subs	r3, r2, r3
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	897b      	ldrh	r3, [r7, #10]
 80121b4:	4413      	add	r3, r2
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4619      	mov	r1, r3
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7fe ff58 	bl	8011070 <mem_trim>
 80121c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d106      	bne.n	80121d6 <pbuf_realloc+0xca>
 80121c8:	4b0f      	ldr	r3, [pc, #60]	@ (8012208 <pbuf_realloc+0xfc>)
 80121ca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80121ce:	4912      	ldr	r1, [pc, #72]	@ (8012218 <pbuf_realloc+0x10c>)
 80121d0:	480f      	ldr	r0, [pc, #60]	@ (8012210 <pbuf_realloc+0x104>)
 80121d2:	f00b fb1f 	bl	801d814 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	897a      	ldrh	r2, [r7, #10]
 80121da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	895a      	ldrh	r2, [r3, #10]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d004      	beq.n	80121f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 f911 	bl	8012418 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2200      	movs	r2, #0
 80121fa:	601a      	str	r2, [r3, #0]
 80121fc:	e000      	b.n	8012200 <pbuf_realloc+0xf4>
    return;
 80121fe:	bf00      	nop

}
 8012200:	3710      	adds	r7, #16
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	08020454 	.word	0x08020454
 801220c:	0802056c 	.word	0x0802056c
 8012210:	080204b4 	.word	0x080204b4
 8012214:	08020584 	.word	0x08020584
 8012218:	0802059c 	.word	0x0802059c

0801221c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	4613      	mov	r3, r2
 8012228:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <pbuf_add_header_impl+0x22>
 8012230:	4b2b      	ldr	r3, [pc, #172]	@ (80122e0 <pbuf_add_header_impl+0xc4>)
 8012232:	f240 12df 	movw	r2, #479	@ 0x1df
 8012236:	492b      	ldr	r1, [pc, #172]	@ (80122e4 <pbuf_add_header_impl+0xc8>)
 8012238:	482b      	ldr	r0, [pc, #172]	@ (80122e8 <pbuf_add_header_impl+0xcc>)
 801223a:	f00b faeb 	bl	801d814 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d003      	beq.n	801224c <pbuf_add_header_impl+0x30>
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801224a:	d301      	bcc.n	8012250 <pbuf_add_header_impl+0x34>
    return 1;
 801224c:	2301      	movs	r3, #1
 801224e:	e043      	b.n	80122d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <pbuf_add_header_impl+0x3e>
    return 0;
 8012256:	2300      	movs	r3, #0
 8012258:	e03e      	b.n	80122d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	891a      	ldrh	r2, [r3, #8]
 8012262:	8a7b      	ldrh	r3, [r7, #18]
 8012264:	4413      	add	r3, r2
 8012266:	b29b      	uxth	r3, r3
 8012268:	8a7a      	ldrh	r2, [r7, #18]
 801226a:	429a      	cmp	r2, r3
 801226c:	d901      	bls.n	8012272 <pbuf_add_header_impl+0x56>
    return 1;
 801226e:	2301      	movs	r3, #1
 8012270:	e032      	b.n	80122d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	7b1b      	ldrb	r3, [r3, #12]
 8012276:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012278:	8a3b      	ldrh	r3, [r7, #16]
 801227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00c      	beq.n	801229c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	685a      	ldr	r2, [r3, #4]
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	425b      	negs	r3, r3
 801228a:	4413      	add	r3, r2
 801228c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	3310      	adds	r3, #16
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	429a      	cmp	r2, r3
 8012296:	d20d      	bcs.n	80122b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012298:	2301      	movs	r3, #1
 801229a:	e01d      	b.n	80122d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801229c:	79fb      	ldrb	r3, [r7, #7]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d006      	beq.n	80122b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	685a      	ldr	r2, [r3, #4]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	425b      	negs	r3, r3
 80122aa:	4413      	add	r3, r2
 80122ac:	617b      	str	r3, [r7, #20]
 80122ae:	e001      	b.n	80122b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80122b0:	2301      	movs	r3, #1
 80122b2:	e011      	b.n	80122d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	697a      	ldr	r2, [r7, #20]
 80122b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	895a      	ldrh	r2, [r3, #10]
 80122be:	8a7b      	ldrh	r3, [r7, #18]
 80122c0:	4413      	add	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	891a      	ldrh	r2, [r3, #8]
 80122cc:	8a7b      	ldrh	r3, [r7, #18]
 80122ce:	4413      	add	r3, r2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3718      	adds	r7, #24
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	08020454 	.word	0x08020454
 80122e4:	080205b8 	.word	0x080205b8
 80122e8:	080204b4 	.word	0x080204b4

080122ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80122f6:	2200      	movs	r2, #0
 80122f8:	6839      	ldr	r1, [r7, #0]
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7ff ff8e 	bl	801221c <pbuf_add_header_impl>
 8012300:	4603      	mov	r3, r0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
	...

0801230c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d106      	bne.n	801232a <pbuf_remove_header+0x1e>
 801231c:	4b20      	ldr	r3, [pc, #128]	@ (80123a0 <pbuf_remove_header+0x94>)
 801231e:	f240 224b 	movw	r2, #587	@ 0x24b
 8012322:	4920      	ldr	r1, [pc, #128]	@ (80123a4 <pbuf_remove_header+0x98>)
 8012324:	4820      	ldr	r0, [pc, #128]	@ (80123a8 <pbuf_remove_header+0x9c>)
 8012326:	f00b fa75 	bl	801d814 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d003      	beq.n	8012338 <pbuf_remove_header+0x2c>
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012336:	d301      	bcc.n	801233c <pbuf_remove_header+0x30>
    return 1;
 8012338:	2301      	movs	r3, #1
 801233a:	e02c      	b.n	8012396 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <pbuf_remove_header+0x3a>
    return 0;
 8012342:	2300      	movs	r3, #0
 8012344:	e027      	b.n	8012396 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	895b      	ldrh	r3, [r3, #10]
 801234e:	89fa      	ldrh	r2, [r7, #14]
 8012350:	429a      	cmp	r2, r3
 8012352:	d908      	bls.n	8012366 <pbuf_remove_header+0x5a>
 8012354:	4b12      	ldr	r3, [pc, #72]	@ (80123a0 <pbuf_remove_header+0x94>)
 8012356:	f240 2255 	movw	r2, #597	@ 0x255
 801235a:	4914      	ldr	r1, [pc, #80]	@ (80123ac <pbuf_remove_header+0xa0>)
 801235c:	4812      	ldr	r0, [pc, #72]	@ (80123a8 <pbuf_remove_header+0x9c>)
 801235e:	f00b fa59 	bl	801d814 <iprintf>
 8012362:	2301      	movs	r3, #1
 8012364:	e017      	b.n	8012396 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685a      	ldr	r2, [r3, #4]
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	441a      	add	r2, r3
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	895a      	ldrh	r2, [r3, #10]
 801237c:	89fb      	ldrh	r3, [r7, #14]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	b29a      	uxth	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	891a      	ldrh	r2, [r3, #8]
 801238a:	89fb      	ldrh	r3, [r7, #14]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	b29a      	uxth	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	08020454 	.word	0x08020454
 80123a4:	080205b8 	.word	0x080205b8
 80123a8:	080204b4 	.word	0x080204b4
 80123ac:	080205c4 	.word	0x080205c4

080123b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	460b      	mov	r3, r1
 80123ba:	807b      	strh	r3, [r7, #2]
 80123bc:	4613      	mov	r3, r2
 80123be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80123c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	da08      	bge.n	80123da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80123c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123cc:	425b      	negs	r3, r3
 80123ce:	4619      	mov	r1, r3
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7ff ff9b 	bl	801230c <pbuf_remove_header>
 80123d6:	4603      	mov	r3, r0
 80123d8:	e007      	b.n	80123ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80123da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123de:	787a      	ldrb	r2, [r7, #1]
 80123e0:	4619      	mov	r1, r3
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7ff ff1a 	bl	801221c <pbuf_add_header_impl>
 80123e8:	4603      	mov	r3, r0
  }
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	460b      	mov	r3, r1
 80123fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80123fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012402:	2201      	movs	r2, #1
 8012404:	4619      	mov	r1, r3
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff ffd2 	bl	80123b0 <pbuf_header_impl>
 801240c:	4603      	mov	r3, r0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b088      	sub	sp, #32
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10b      	bne.n	801243e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d106      	bne.n	801243a <pbuf_free+0x22>
 801242c:	4b3b      	ldr	r3, [pc, #236]	@ (801251c <pbuf_free+0x104>)
 801242e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012432:	493b      	ldr	r1, [pc, #236]	@ (8012520 <pbuf_free+0x108>)
 8012434:	483b      	ldr	r0, [pc, #236]	@ (8012524 <pbuf_free+0x10c>)
 8012436:	f00b f9ed 	bl	801d814 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801243a:	2300      	movs	r3, #0
 801243c:	e069      	b.n	8012512 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012442:	e062      	b.n	801250a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012444:	f00a fc90 	bl	801cd68 <sys_arch_protect>
 8012448:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7b9b      	ldrb	r3, [r3, #14]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d106      	bne.n	8012460 <pbuf_free+0x48>
 8012452:	4b32      	ldr	r3, [pc, #200]	@ (801251c <pbuf_free+0x104>)
 8012454:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012458:	4933      	ldr	r1, [pc, #204]	@ (8012528 <pbuf_free+0x110>)
 801245a:	4832      	ldr	r0, [pc, #200]	@ (8012524 <pbuf_free+0x10c>)
 801245c:	f00b f9da 	bl	801d814 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	7b9b      	ldrb	r3, [r3, #14]
 8012464:	3b01      	subs	r3, #1
 8012466:	b2da      	uxtb	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	739a      	strb	r2, [r3, #14]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	7b9b      	ldrb	r3, [r3, #14]
 8012470:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012472:	69b8      	ldr	r0, [r7, #24]
 8012474:	f00a fc86 	bl	801cd84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012478:	7dfb      	ldrb	r3, [r7, #23]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d143      	bne.n	8012506 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	7b1b      	ldrb	r3, [r3, #12]
 8012488:	f003 030f 	and.w	r3, r3, #15
 801248c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	7b5b      	ldrb	r3, [r3, #13]
 8012492:	f003 0302 	and.w	r3, r3, #2
 8012496:	2b00      	cmp	r3, #0
 8012498:	d011      	beq.n	80124be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	691b      	ldr	r3, [r3, #16]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d106      	bne.n	80124b4 <pbuf_free+0x9c>
 80124a6:	4b1d      	ldr	r3, [pc, #116]	@ (801251c <pbuf_free+0x104>)
 80124a8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80124ac:	491f      	ldr	r1, [pc, #124]	@ (801252c <pbuf_free+0x114>)
 80124ae:	481d      	ldr	r0, [pc, #116]	@ (8012524 <pbuf_free+0x10c>)
 80124b0:	f00b f9b0 	bl	801d814 <iprintf>
        pc->custom_free_function(p);
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	691b      	ldr	r3, [r3, #16]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	4798      	blx	r3
 80124bc:	e01d      	b.n	80124fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80124be:	7bfb      	ldrb	r3, [r7, #15]
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d104      	bne.n	80124ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80124c4:	6879      	ldr	r1, [r7, #4]
 80124c6:	200c      	movs	r0, #12
 80124c8:	f7ff f8f6 	bl	80116b8 <memp_free>
 80124cc:	e015      	b.n	80124fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80124ce:	7bfb      	ldrb	r3, [r7, #15]
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d104      	bne.n	80124de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	200b      	movs	r0, #11
 80124d8:	f7ff f8ee 	bl	80116b8 <memp_free>
 80124dc:	e00d      	b.n	80124fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80124de:	7bfb      	ldrb	r3, [r7, #15]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d103      	bne.n	80124ec <pbuf_free+0xd4>
          mem_free(p);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7fe fd33 	bl	8010f50 <mem_free>
 80124ea:	e006      	b.n	80124fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80124ec:	4b0b      	ldr	r3, [pc, #44]	@ (801251c <pbuf_free+0x104>)
 80124ee:	f240 320f 	movw	r2, #783	@ 0x30f
 80124f2:	490f      	ldr	r1, [pc, #60]	@ (8012530 <pbuf_free+0x118>)
 80124f4:	480b      	ldr	r0, [pc, #44]	@ (8012524 <pbuf_free+0x10c>)
 80124f6:	f00b f98d 	bl	801d814 <iprintf>
        }
      }
      count++;
 80124fa:	7ffb      	ldrb	r3, [r7, #31]
 80124fc:	3301      	adds	r3, #1
 80124fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	607b      	str	r3, [r7, #4]
 8012504:	e001      	b.n	801250a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012506:	2300      	movs	r3, #0
 8012508:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d199      	bne.n	8012444 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012510:	7ffb      	ldrb	r3, [r7, #31]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3720      	adds	r7, #32
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	08020454 	.word	0x08020454
 8012520:	080205b8 	.word	0x080205b8
 8012524:	080204b4 	.word	0x080204b4
 8012528:	080205e4 	.word	0x080205e4
 801252c:	080205fc 	.word	0x080205fc
 8012530:	08020620 	.word	0x08020620

08012534 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012534:	b480      	push	{r7}
 8012536:	b085      	sub	sp, #20
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012540:	e005      	b.n	801254e <pbuf_clen+0x1a>
    ++len;
 8012542:	89fb      	ldrh	r3, [r7, #14]
 8012544:	3301      	adds	r3, #1
 8012546:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1f6      	bne.n	8012542 <pbuf_clen+0xe>
  }
  return len;
 8012554:	89fb      	ldrh	r3, [r7, #14]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3714      	adds	r7, #20
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
	...

08012564 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d016      	beq.n	80125a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012572:	f00a fbf9 	bl	801cd68 <sys_arch_protect>
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	7b9b      	ldrb	r3, [r3, #14]
 801257c:	3301      	adds	r3, #1
 801257e:	b2da      	uxtb	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	739a      	strb	r2, [r3, #14]
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f00a fbfd 	bl	801cd84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	7b9b      	ldrb	r3, [r3, #14]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <pbuf_ref+0x3c>
 8012592:	4b05      	ldr	r3, [pc, #20]	@ (80125a8 <pbuf_ref+0x44>)
 8012594:	f240 3242 	movw	r2, #834	@ 0x342
 8012598:	4904      	ldr	r1, [pc, #16]	@ (80125ac <pbuf_ref+0x48>)
 801259a:	4805      	ldr	r0, [pc, #20]	@ (80125b0 <pbuf_ref+0x4c>)
 801259c:	f00b f93a 	bl	801d814 <iprintf>
  }
}
 80125a0:	bf00      	nop
 80125a2:	3710      	adds	r7, #16
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	08020454 	.word	0x08020454
 80125ac:	08020634 	.word	0x08020634
 80125b0:	080204b4 	.word	0x080204b4

080125b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b084      	sub	sp, #16
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <pbuf_cat+0x16>
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d107      	bne.n	80125da <pbuf_cat+0x26>
 80125ca:	4b20      	ldr	r3, [pc, #128]	@ (801264c <pbuf_cat+0x98>)
 80125cc:	f240 3259 	movw	r2, #857	@ 0x359
 80125d0:	491f      	ldr	r1, [pc, #124]	@ (8012650 <pbuf_cat+0x9c>)
 80125d2:	4820      	ldr	r0, [pc, #128]	@ (8012654 <pbuf_cat+0xa0>)
 80125d4:	f00b f91e 	bl	801d814 <iprintf>
 80125d8:	e034      	b.n	8012644 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	60fb      	str	r3, [r7, #12]
 80125de:	e00a      	b.n	80125f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	891a      	ldrh	r2, [r3, #8]
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	891b      	ldrh	r3, [r3, #8]
 80125e8:	4413      	add	r3, r2
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	60fb      	str	r3, [r7, #12]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d1f0      	bne.n	80125e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	891a      	ldrh	r2, [r3, #8]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	895b      	ldrh	r3, [r3, #10]
 8012606:	429a      	cmp	r2, r3
 8012608:	d006      	beq.n	8012618 <pbuf_cat+0x64>
 801260a:	4b10      	ldr	r3, [pc, #64]	@ (801264c <pbuf_cat+0x98>)
 801260c:	f240 3262 	movw	r2, #866	@ 0x362
 8012610:	4911      	ldr	r1, [pc, #68]	@ (8012658 <pbuf_cat+0xa4>)
 8012612:	4810      	ldr	r0, [pc, #64]	@ (8012654 <pbuf_cat+0xa0>)
 8012614:	f00b f8fe 	bl	801d814 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d006      	beq.n	801262e <pbuf_cat+0x7a>
 8012620:	4b0a      	ldr	r3, [pc, #40]	@ (801264c <pbuf_cat+0x98>)
 8012622:	f240 3263 	movw	r2, #867	@ 0x363
 8012626:	490d      	ldr	r1, [pc, #52]	@ (801265c <pbuf_cat+0xa8>)
 8012628:	480a      	ldr	r0, [pc, #40]	@ (8012654 <pbuf_cat+0xa0>)
 801262a:	f00b f8f3 	bl	801d814 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	891a      	ldrh	r2, [r3, #8]
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	891b      	ldrh	r3, [r3, #8]
 8012636:	4413      	add	r3, r2
 8012638:	b29a      	uxth	r2, r3
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	683a      	ldr	r2, [r7, #0]
 8012642:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	08020454 	.word	0x08020454
 8012650:	08020648 	.word	0x08020648
 8012654:	080204b4 	.word	0x080204b4
 8012658:	08020680 	.word	0x08020680
 801265c:	080206b0 	.word	0x080206b0

08012660 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7ff ffa1 	bl	80125b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012672:	6838      	ldr	r0, [r7, #0]
 8012674:	f7ff ff76 	bl	8012564 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b086      	sub	sp, #24
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801268a:	2300      	movs	r3, #0
 801268c:	617b      	str	r3, [r7, #20]
 801268e:	2300      	movs	r3, #0
 8012690:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d008      	beq.n	80126aa <pbuf_copy+0x2a>
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d005      	beq.n	80126aa <pbuf_copy+0x2a>
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	891a      	ldrh	r2, [r3, #8]
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	891b      	ldrh	r3, [r3, #8]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d209      	bcs.n	80126be <pbuf_copy+0x3e>
 80126aa:	4b57      	ldr	r3, [pc, #348]	@ (8012808 <pbuf_copy+0x188>)
 80126ac:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80126b0:	4956      	ldr	r1, [pc, #344]	@ (801280c <pbuf_copy+0x18c>)
 80126b2:	4857      	ldr	r0, [pc, #348]	@ (8012810 <pbuf_copy+0x190>)
 80126b4:	f00b f8ae 	bl	801d814 <iprintf>
 80126b8:	f06f 030f 	mvn.w	r3, #15
 80126bc:	e09f      	b.n	80127fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	895b      	ldrh	r3, [r3, #10]
 80126c2:	461a      	mov	r2, r3
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	1ad2      	subs	r2, r2, r3
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	895b      	ldrh	r3, [r3, #10]
 80126cc:	4619      	mov	r1, r3
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	1acb      	subs	r3, r1, r3
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d306      	bcc.n	80126e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	895b      	ldrh	r3, [r3, #10]
 80126da:	461a      	mov	r2, r3
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	60fb      	str	r3, [r7, #12]
 80126e2:	e005      	b.n	80126f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	895b      	ldrh	r3, [r3, #10]
 80126e8:	461a      	mov	r2, r3
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	1ad3      	subs	r3, r2, r3
 80126ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685a      	ldr	r2, [r3, #4]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	18d0      	adds	r0, r2, r3
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	4413      	add	r3, r2
 8012700:	68fa      	ldr	r2, [r7, #12]
 8012702:	4619      	mov	r1, r3
 8012704:	f00b fafb 	bl	801dcfe <memcpy>
    offset_to += len;
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	4413      	add	r3, r2
 801270e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012710:	693a      	ldr	r2, [r7, #16]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	4413      	add	r3, r2
 8012716:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	895b      	ldrh	r3, [r3, #10]
 801271c:	461a      	mov	r2, r3
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	4293      	cmp	r3, r2
 8012722:	d906      	bls.n	8012732 <pbuf_copy+0xb2>
 8012724:	4b38      	ldr	r3, [pc, #224]	@ (8012808 <pbuf_copy+0x188>)
 8012726:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801272a:	493a      	ldr	r1, [pc, #232]	@ (8012814 <pbuf_copy+0x194>)
 801272c:	4838      	ldr	r0, [pc, #224]	@ (8012810 <pbuf_copy+0x190>)
 801272e:	f00b f871 	bl	801d814 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	895b      	ldrh	r3, [r3, #10]
 8012736:	461a      	mov	r2, r3
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	4293      	cmp	r3, r2
 801273c:	d906      	bls.n	801274c <pbuf_copy+0xcc>
 801273e:	4b32      	ldr	r3, [pc, #200]	@ (8012808 <pbuf_copy+0x188>)
 8012740:	f240 32da 	movw	r2, #986	@ 0x3da
 8012744:	4934      	ldr	r1, [pc, #208]	@ (8012818 <pbuf_copy+0x198>)
 8012746:	4832      	ldr	r0, [pc, #200]	@ (8012810 <pbuf_copy+0x190>)
 8012748:	f00b f864 	bl	801d814 <iprintf>
    if (offset_from >= p_from->len) {
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	895b      	ldrh	r3, [r3, #10]
 8012750:	461a      	mov	r2, r3
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	4293      	cmp	r3, r2
 8012756:	d304      	bcc.n	8012762 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	895b      	ldrh	r3, [r3, #10]
 8012766:	461a      	mov	r2, r3
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	4293      	cmp	r3, r2
 801276c:	d114      	bne.n	8012798 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801276e:	2300      	movs	r3, #0
 8012770:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d10c      	bne.n	8012798 <pbuf_copy+0x118>
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d009      	beq.n	8012798 <pbuf_copy+0x118>
 8012784:	4b20      	ldr	r3, [pc, #128]	@ (8012808 <pbuf_copy+0x188>)
 8012786:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801278a:	4924      	ldr	r1, [pc, #144]	@ (801281c <pbuf_copy+0x19c>)
 801278c:	4820      	ldr	r0, [pc, #128]	@ (8012810 <pbuf_copy+0x190>)
 801278e:	f00b f841 	bl	801d814 <iprintf>
 8012792:	f06f 030f 	mvn.w	r3, #15
 8012796:	e032      	b.n	80127fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d013      	beq.n	80127c6 <pbuf_copy+0x146>
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	895a      	ldrh	r2, [r3, #10]
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	891b      	ldrh	r3, [r3, #8]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d10d      	bne.n	80127c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d009      	beq.n	80127c6 <pbuf_copy+0x146>
 80127b2:	4b15      	ldr	r3, [pc, #84]	@ (8012808 <pbuf_copy+0x188>)
 80127b4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80127b8:	4919      	ldr	r1, [pc, #100]	@ (8012820 <pbuf_copy+0x1a0>)
 80127ba:	4815      	ldr	r0, [pc, #84]	@ (8012810 <pbuf_copy+0x190>)
 80127bc:	f00b f82a 	bl	801d814 <iprintf>
 80127c0:	f06f 0305 	mvn.w	r3, #5
 80127c4:	e01b      	b.n	80127fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d013      	beq.n	80127f4 <pbuf_copy+0x174>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	895a      	ldrh	r2, [r3, #10]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	891b      	ldrh	r3, [r3, #8]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d10d      	bne.n	80127f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d009      	beq.n	80127f4 <pbuf_copy+0x174>
 80127e0:	4b09      	ldr	r3, [pc, #36]	@ (8012808 <pbuf_copy+0x188>)
 80127e2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80127e6:	490e      	ldr	r1, [pc, #56]	@ (8012820 <pbuf_copy+0x1a0>)
 80127e8:	4809      	ldr	r0, [pc, #36]	@ (8012810 <pbuf_copy+0x190>)
 80127ea:	f00b f813 	bl	801d814 <iprintf>
 80127ee:	f06f 0305 	mvn.w	r3, #5
 80127f2:	e004      	b.n	80127fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f47f af61 	bne.w	80126be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3718      	adds	r7, #24
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	08020454 	.word	0x08020454
 801280c:	080206fc 	.word	0x080206fc
 8012810:	080204b4 	.word	0x080204b4
 8012814:	0802072c 	.word	0x0802072c
 8012818:	08020744 	.word	0x08020744
 801281c:	08020760 	.word	0x08020760
 8012820:	08020770 	.word	0x08020770

08012824 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b088      	sub	sp, #32
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	4611      	mov	r1, r2
 8012830:	461a      	mov	r2, r3
 8012832:	460b      	mov	r3, r1
 8012834:	80fb      	strh	r3, [r7, #6]
 8012836:	4613      	mov	r3, r2
 8012838:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801283a:	2300      	movs	r3, #0
 801283c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d108      	bne.n	801285a <pbuf_copy_partial+0x36>
 8012848:	4b2b      	ldr	r3, [pc, #172]	@ (80128f8 <pbuf_copy_partial+0xd4>)
 801284a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801284e:	492b      	ldr	r1, [pc, #172]	@ (80128fc <pbuf_copy_partial+0xd8>)
 8012850:	482b      	ldr	r0, [pc, #172]	@ (8012900 <pbuf_copy_partial+0xdc>)
 8012852:	f00a ffdf 	bl	801d814 <iprintf>
 8012856:	2300      	movs	r3, #0
 8012858:	e04a      	b.n	80128f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d108      	bne.n	8012872 <pbuf_copy_partial+0x4e>
 8012860:	4b25      	ldr	r3, [pc, #148]	@ (80128f8 <pbuf_copy_partial+0xd4>)
 8012862:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012866:	4927      	ldr	r1, [pc, #156]	@ (8012904 <pbuf_copy_partial+0xe0>)
 8012868:	4825      	ldr	r0, [pc, #148]	@ (8012900 <pbuf_copy_partial+0xdc>)
 801286a:	f00a ffd3 	bl	801d814 <iprintf>
 801286e:	2300      	movs	r3, #0
 8012870:	e03e      	b.n	80128f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	61fb      	str	r3, [r7, #28]
 8012876:	e034      	b.n	80128e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012878:	88bb      	ldrh	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00a      	beq.n	8012894 <pbuf_copy_partial+0x70>
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	895b      	ldrh	r3, [r3, #10]
 8012882:	88ba      	ldrh	r2, [r7, #4]
 8012884:	429a      	cmp	r2, r3
 8012886:	d305      	bcc.n	8012894 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	895b      	ldrh	r3, [r3, #10]
 801288c:	88ba      	ldrh	r2, [r7, #4]
 801288e:	1ad3      	subs	r3, r2, r3
 8012890:	80bb      	strh	r3, [r7, #4]
 8012892:	e023      	b.n	80128dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	895a      	ldrh	r2, [r3, #10]
 8012898:	88bb      	ldrh	r3, [r7, #4]
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801289e:	8b3a      	ldrh	r2, [r7, #24]
 80128a0:	88fb      	ldrh	r3, [r7, #6]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d901      	bls.n	80128aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80128a6:	88fb      	ldrh	r3, [r7, #6]
 80128a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80128aa:	8b7b      	ldrh	r3, [r7, #26]
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	18d0      	adds	r0, r2, r3
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	685a      	ldr	r2, [r3, #4]
 80128b4:	88bb      	ldrh	r3, [r7, #4]
 80128b6:	4413      	add	r3, r2
 80128b8:	8b3a      	ldrh	r2, [r7, #24]
 80128ba:	4619      	mov	r1, r3
 80128bc:	f00b fa1f 	bl	801dcfe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80128c0:	8afa      	ldrh	r2, [r7, #22]
 80128c2:	8b3b      	ldrh	r3, [r7, #24]
 80128c4:	4413      	add	r3, r2
 80128c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80128c8:	8b7a      	ldrh	r2, [r7, #26]
 80128ca:	8b3b      	ldrh	r3, [r7, #24]
 80128cc:	4413      	add	r3, r2
 80128ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80128d0:	88fa      	ldrh	r2, [r7, #6]
 80128d2:	8b3b      	ldrh	r3, [r7, #24]
 80128d4:	1ad3      	subs	r3, r2, r3
 80128d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	61fb      	str	r3, [r7, #28]
 80128e2:	88fb      	ldrh	r3, [r7, #6]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d002      	beq.n	80128ee <pbuf_copy_partial+0xca>
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1c4      	bne.n	8012878 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80128ee:	8afb      	ldrh	r3, [r7, #22]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	08020454 	.word	0x08020454
 80128fc:	0802079c 	.word	0x0802079c
 8012900:	080204b4 	.word	0x080204b4
 8012904:	080207bc 	.word	0x080207bc

08012908 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	4603      	mov	r3, r0
 8012910:	603a      	str	r2, [r7, #0]
 8012912:	71fb      	strb	r3, [r7, #7]
 8012914:	460b      	mov	r3, r1
 8012916:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	8919      	ldrh	r1, [r3, #8]
 801291c:	88ba      	ldrh	r2, [r7, #4]
 801291e:	79fb      	ldrb	r3, [r7, #7]
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff fa95 	bl	8011e50 <pbuf_alloc>
 8012926:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d101      	bne.n	8012932 <pbuf_clone+0x2a>
    return NULL;
 801292e:	2300      	movs	r3, #0
 8012930:	e011      	b.n	8012956 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f7ff fea3 	bl	8012680 <pbuf_copy>
 801293a:	4603      	mov	r3, r0
 801293c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801293e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d006      	beq.n	8012954 <pbuf_clone+0x4c>
 8012946:	4b06      	ldr	r3, [pc, #24]	@ (8012960 <pbuf_clone+0x58>)
 8012948:	f240 5224 	movw	r2, #1316	@ 0x524
 801294c:	4905      	ldr	r1, [pc, #20]	@ (8012964 <pbuf_clone+0x5c>)
 801294e:	4806      	ldr	r0, [pc, #24]	@ (8012968 <pbuf_clone+0x60>)
 8012950:	f00a ff60 	bl	801d814 <iprintf>
  return q;
 8012954:	68fb      	ldr	r3, [r7, #12]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	08020454 	.word	0x08020454
 8012964:	080208c8 	.word	0x080208c8
 8012968:	080204b4 	.word	0x080204b4

0801296c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012970:	f00a fa18 	bl	801cda4 <rand>
 8012974:	4603      	mov	r3, r0
 8012976:	b29b      	uxth	r3, r3
 8012978:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801297c:	b29b      	uxth	r3, r3
 801297e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012982:	b29a      	uxth	r2, r3
 8012984:	4b01      	ldr	r3, [pc, #4]	@ (801298c <tcp_init+0x20>)
 8012986:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012988:	bf00      	nop
 801298a:	bd80      	pop	{r7, pc}
 801298c:	24000028 	.word	0x24000028

08012990 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	7d1b      	ldrb	r3, [r3, #20]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d105      	bne.n	80129ac <tcp_free+0x1c>
 80129a0:	4b06      	ldr	r3, [pc, #24]	@ (80129bc <tcp_free+0x2c>)
 80129a2:	22d4      	movs	r2, #212	@ 0xd4
 80129a4:	4906      	ldr	r1, [pc, #24]	@ (80129c0 <tcp_free+0x30>)
 80129a6:	4807      	ldr	r0, [pc, #28]	@ (80129c4 <tcp_free+0x34>)
 80129a8:	f00a ff34 	bl	801d814 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80129ac:	6879      	ldr	r1, [r7, #4]
 80129ae:	2001      	movs	r0, #1
 80129b0:	f7fe fe82 	bl	80116b8 <memp_free>
}
 80129b4:	bf00      	nop
 80129b6:	3708      	adds	r7, #8
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	08020954 	.word	0x08020954
 80129c0:	08020984 	.word	0x08020984
 80129c4:	08020998 	.word	0x08020998

080129c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7d1b      	ldrb	r3, [r3, #20]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d105      	bne.n	80129e4 <tcp_free_listen+0x1c>
 80129d8:	4b06      	ldr	r3, [pc, #24]	@ (80129f4 <tcp_free_listen+0x2c>)
 80129da:	22df      	movs	r2, #223	@ 0xdf
 80129dc:	4906      	ldr	r1, [pc, #24]	@ (80129f8 <tcp_free_listen+0x30>)
 80129de:	4807      	ldr	r0, [pc, #28]	@ (80129fc <tcp_free_listen+0x34>)
 80129e0:	f00a ff18 	bl	801d814 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80129e4:	6879      	ldr	r1, [r7, #4]
 80129e6:	2002      	movs	r0, #2
 80129e8:	f7fe fe66 	bl	80116b8 <memp_free>
}
 80129ec:	bf00      	nop
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	08020954 	.word	0x08020954
 80129f8:	080209c0 	.word	0x080209c0
 80129fc:	08020998 	.word	0x08020998

08012a00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012a04:	f000 fea4 	bl	8013750 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012a08:	4b07      	ldr	r3, [pc, #28]	@ (8012a28 <tcp_tmr+0x28>)
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	4b05      	ldr	r3, [pc, #20]	@ (8012a28 <tcp_tmr+0x28>)
 8012a12:	701a      	strb	r2, [r3, #0]
 8012a14:	4b04      	ldr	r3, [pc, #16]	@ (8012a28 <tcp_tmr+0x28>)
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012a20:	f000 fb54 	bl	80130cc <tcp_slowtmr>
  }
}
 8012a24:	bf00      	nop
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	2400cc49 	.word	0x2400cc49

08012a2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d105      	bne.n	8012a48 <tcp_remove_listener+0x1c>
 8012a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8012a74 <tcp_remove_listener+0x48>)
 8012a3e:	22ff      	movs	r2, #255	@ 0xff
 8012a40:	490d      	ldr	r1, [pc, #52]	@ (8012a78 <tcp_remove_listener+0x4c>)
 8012a42:	480e      	ldr	r0, [pc, #56]	@ (8012a7c <tcp_remove_listener+0x50>)
 8012a44:	f00a fee6 	bl	801d814 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	60fb      	str	r3, [r7, #12]
 8012a4c:	e00a      	b.n	8012a64 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012a52:	683a      	ldr	r2, [r7, #0]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d102      	bne.n	8012a5e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1f1      	bne.n	8012a4e <tcp_remove_listener+0x22>
    }
  }
}
 8012a6a:	bf00      	nop
 8012a6c:	bf00      	nop
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	08020954 	.word	0x08020954
 8012a78:	080209dc 	.word	0x080209dc
 8012a7c:	08020998 	.word	0x08020998

08012a80 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d106      	bne.n	8012a9c <tcp_listen_closed+0x1c>
 8012a8e:	4b14      	ldr	r3, [pc, #80]	@ (8012ae0 <tcp_listen_closed+0x60>)
 8012a90:	f240 1211 	movw	r2, #273	@ 0x111
 8012a94:	4913      	ldr	r1, [pc, #76]	@ (8012ae4 <tcp_listen_closed+0x64>)
 8012a96:	4814      	ldr	r0, [pc, #80]	@ (8012ae8 <tcp_listen_closed+0x68>)
 8012a98:	f00a febc 	bl	801d814 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	7d1b      	ldrb	r3, [r3, #20]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d006      	beq.n	8012ab2 <tcp_listen_closed+0x32>
 8012aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae0 <tcp_listen_closed+0x60>)
 8012aa6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012aaa:	4910      	ldr	r1, [pc, #64]	@ (8012aec <tcp_listen_closed+0x6c>)
 8012aac:	480e      	ldr	r0, [pc, #56]	@ (8012ae8 <tcp_listen_closed+0x68>)
 8012aae:	f00a feb1 	bl	801d814 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	60fb      	str	r3, [r7, #12]
 8012ab6:	e00b      	b.n	8012ad0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8012af0 <tcp_listen_closed+0x70>)
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	6879      	ldr	r1, [r7, #4]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7ff ffb1 	bl	8012a2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	3301      	adds	r3, #1
 8012ace:	60fb      	str	r3, [r7, #12]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b03      	cmp	r3, #3
 8012ad4:	d9f0      	bls.n	8012ab8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012ad6:	bf00      	nop
 8012ad8:	bf00      	nop
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	08020954 	.word	0x08020954
 8012ae4:	08020a04 	.word	0x08020a04
 8012ae8:	08020998 	.word	0x08020998
 8012aec:	08020a10 	.word	0x08020a10
 8012af0:	08022dc0 	.word	0x08022dc0

08012af4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012af4:	b5b0      	push	{r4, r5, r7, lr}
 8012af6:	b088      	sub	sp, #32
 8012af8:	af04      	add	r7, sp, #16
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d106      	bne.n	8012b14 <tcp_close_shutdown+0x20>
 8012b06:	4b63      	ldr	r3, [pc, #396]	@ (8012c94 <tcp_close_shutdown+0x1a0>)
 8012b08:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012b0c:	4962      	ldr	r1, [pc, #392]	@ (8012c98 <tcp_close_shutdown+0x1a4>)
 8012b0e:	4863      	ldr	r0, [pc, #396]	@ (8012c9c <tcp_close_shutdown+0x1a8>)
 8012b10:	f00a fe80 	bl	801d814 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012b14:	78fb      	ldrb	r3, [r7, #3]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d066      	beq.n	8012be8 <tcp_close_shutdown+0xf4>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
 8012b1e:	2b04      	cmp	r3, #4
 8012b20:	d003      	beq.n	8012b2a <tcp_close_shutdown+0x36>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	7d1b      	ldrb	r3, [r3, #20]
 8012b26:	2b07      	cmp	r3, #7
 8012b28:	d15e      	bne.n	8012be8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d104      	bne.n	8012b3c <tcp_close_shutdown+0x48>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b36:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012b3a:	d055      	beq.n	8012be8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	8b5b      	ldrh	r3, [r3, #26]
 8012b40:	f003 0310 	and.w	r3, r3, #16
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <tcp_close_shutdown+0x62>
 8012b48:	4b52      	ldr	r3, [pc, #328]	@ (8012c94 <tcp_close_shutdown+0x1a0>)
 8012b4a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012b4e:	4954      	ldr	r1, [pc, #336]	@ (8012ca0 <tcp_close_shutdown+0x1ac>)
 8012b50:	4852      	ldr	r0, [pc, #328]	@ (8012c9c <tcp_close_shutdown+0x1a8>)
 8012b52:	f00a fe5f 	bl	801d814 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b5e:	687d      	ldr	r5, [r7, #4]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	3304      	adds	r3, #4
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	8ad2      	ldrh	r2, [r2, #22]
 8012b68:	6879      	ldr	r1, [r7, #4]
 8012b6a:	8b09      	ldrh	r1, [r1, #24]
 8012b6c:	9102      	str	r1, [sp, #8]
 8012b6e:	9201      	str	r2, [sp, #4]
 8012b70:	9300      	str	r3, [sp, #0]
 8012b72:	462b      	mov	r3, r5
 8012b74:	4622      	mov	r2, r4
 8012b76:	4601      	mov	r1, r0
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f004 fe8d 	bl	8017898 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f001 f8c8 	bl	8013d14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012b84:	4b47      	ldr	r3, [pc, #284]	@ (8012ca4 <tcp_close_shutdown+0x1b0>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d105      	bne.n	8012b9a <tcp_close_shutdown+0xa6>
 8012b8e:	4b45      	ldr	r3, [pc, #276]	@ (8012ca4 <tcp_close_shutdown+0x1b0>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	4a43      	ldr	r2, [pc, #268]	@ (8012ca4 <tcp_close_shutdown+0x1b0>)
 8012b96:	6013      	str	r3, [r2, #0]
 8012b98:	e013      	b.n	8012bc2 <tcp_close_shutdown+0xce>
 8012b9a:	4b42      	ldr	r3, [pc, #264]	@ (8012ca4 <tcp_close_shutdown+0x1b0>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	60fb      	str	r3, [r7, #12]
 8012ba0:	e00c      	b.n	8012bbc <tcp_close_shutdown+0xc8>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d104      	bne.n	8012bb6 <tcp_close_shutdown+0xc2>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	68da      	ldr	r2, [r3, #12]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	60da      	str	r2, [r3, #12]
 8012bb4:	e005      	b.n	8012bc2 <tcp_close_shutdown+0xce>
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	60fb      	str	r3, [r7, #12]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d1ef      	bne.n	8012ba2 <tcp_close_shutdown+0xae>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	60da      	str	r2, [r3, #12]
 8012bc8:	4b37      	ldr	r3, [pc, #220]	@ (8012ca8 <tcp_close_shutdown+0x1b4>)
 8012bca:	2201      	movs	r2, #1
 8012bcc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012bce:	4b37      	ldr	r3, [pc, #220]	@ (8012cac <tcp_close_shutdown+0x1b8>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d102      	bne.n	8012bde <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012bd8:	f003 fd5c 	bl	8016694 <tcp_trigger_input_pcb_close>
 8012bdc:	e002      	b.n	8012be4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7ff fed6 	bl	8012990 <tcp_free>
      }
      return ERR_OK;
 8012be4:	2300      	movs	r3, #0
 8012be6:	e050      	b.n	8012c8a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	7d1b      	ldrb	r3, [r3, #20]
 8012bec:	2b02      	cmp	r3, #2
 8012bee:	d03b      	beq.n	8012c68 <tcp_close_shutdown+0x174>
 8012bf0:	2b02      	cmp	r3, #2
 8012bf2:	dc44      	bgt.n	8012c7e <tcp_close_shutdown+0x18a>
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d002      	beq.n	8012bfe <tcp_close_shutdown+0x10a>
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d02a      	beq.n	8012c52 <tcp_close_shutdown+0x15e>
 8012bfc:	e03f      	b.n	8012c7e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	8adb      	ldrh	r3, [r3, #22]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d021      	beq.n	8012c4a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012c06:	4b2a      	ldr	r3, [pc, #168]	@ (8012cb0 <tcp_close_shutdown+0x1bc>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d105      	bne.n	8012c1c <tcp_close_shutdown+0x128>
 8012c10:	4b27      	ldr	r3, [pc, #156]	@ (8012cb0 <tcp_close_shutdown+0x1bc>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	4a26      	ldr	r2, [pc, #152]	@ (8012cb0 <tcp_close_shutdown+0x1bc>)
 8012c18:	6013      	str	r3, [r2, #0]
 8012c1a:	e013      	b.n	8012c44 <tcp_close_shutdown+0x150>
 8012c1c:	4b24      	ldr	r3, [pc, #144]	@ (8012cb0 <tcp_close_shutdown+0x1bc>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	60bb      	str	r3, [r7, #8]
 8012c22:	e00c      	b.n	8012c3e <tcp_close_shutdown+0x14a>
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	68db      	ldr	r3, [r3, #12]
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d104      	bne.n	8012c38 <tcp_close_shutdown+0x144>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	68da      	ldr	r2, [r3, #12]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	60da      	str	r2, [r3, #12]
 8012c36:	e005      	b.n	8012c44 <tcp_close_shutdown+0x150>
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	60bb      	str	r3, [r7, #8]
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d1ef      	bne.n	8012c24 <tcp_close_shutdown+0x130>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7ff fea0 	bl	8012990 <tcp_free>
      break;
 8012c50:	e01a      	b.n	8012c88 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f7ff ff14 	bl	8012a80 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012c58:	6879      	ldr	r1, [r7, #4]
 8012c5a:	4816      	ldr	r0, [pc, #88]	@ (8012cb4 <tcp_close_shutdown+0x1c0>)
 8012c5c:	f001 f8aa 	bl	8013db4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff feb1 	bl	80129c8 <tcp_free_listen>
      break;
 8012c66:	e00f      	b.n	8012c88 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012c68:	6879      	ldr	r1, [r7, #4]
 8012c6a:	480e      	ldr	r0, [pc, #56]	@ (8012ca4 <tcp_close_shutdown+0x1b0>)
 8012c6c:	f001 f8a2 	bl	8013db4 <tcp_pcb_remove>
 8012c70:	4b0d      	ldr	r3, [pc, #52]	@ (8012ca8 <tcp_close_shutdown+0x1b4>)
 8012c72:	2201      	movs	r2, #1
 8012c74:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff fe8a 	bl	8012990 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012c7c:	e004      	b.n	8012c88 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 f81a 	bl	8012cb8 <tcp_close_shutdown_fin>
 8012c84:	4603      	mov	r3, r0
 8012c86:	e000      	b.n	8012c8a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012c88:	2300      	movs	r3, #0
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bdb0      	pop	{r4, r5, r7, pc}
 8012c92:	bf00      	nop
 8012c94:	08020954 	.word	0x08020954
 8012c98:	08020a28 	.word	0x08020a28
 8012c9c:	08020998 	.word	0x08020998
 8012ca0:	08020a48 	.word	0x08020a48
 8012ca4:	2400cc40 	.word	0x2400cc40
 8012ca8:	2400cc48 	.word	0x2400cc48
 8012cac:	2400cc80 	.word	0x2400cc80
 8012cb0:	2400cc38 	.word	0x2400cc38
 8012cb4:	2400cc3c 	.word	0x2400cc3c

08012cb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d106      	bne.n	8012cd4 <tcp_close_shutdown_fin+0x1c>
 8012cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8012d80 <tcp_close_shutdown_fin+0xc8>)
 8012cc8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012ccc:	492d      	ldr	r1, [pc, #180]	@ (8012d84 <tcp_close_shutdown_fin+0xcc>)
 8012cce:	482e      	ldr	r0, [pc, #184]	@ (8012d88 <tcp_close_shutdown_fin+0xd0>)
 8012cd0:	f00a fda0 	bl	801d814 <iprintf>

  switch (pcb->state) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	7d1b      	ldrb	r3, [r3, #20]
 8012cd8:	2b07      	cmp	r3, #7
 8012cda:	d020      	beq.n	8012d1e <tcp_close_shutdown_fin+0x66>
 8012cdc:	2b07      	cmp	r3, #7
 8012cde:	dc2b      	bgt.n	8012d38 <tcp_close_shutdown_fin+0x80>
 8012ce0:	2b03      	cmp	r3, #3
 8012ce2:	d002      	beq.n	8012cea <tcp_close_shutdown_fin+0x32>
 8012ce4:	2b04      	cmp	r3, #4
 8012ce6:	d00d      	beq.n	8012d04 <tcp_close_shutdown_fin+0x4c>
 8012ce8:	e026      	b.n	8012d38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f003 fee2 	bl	8016ab4 <tcp_send_fin>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d11f      	bne.n	8012d3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2205      	movs	r2, #5
 8012d00:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d02:	e01b      	b.n	8012d3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f003 fed5 	bl	8016ab4 <tcp_send_fin>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d114      	bne.n	8012d40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2205      	movs	r2, #5
 8012d1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d1c:	e010      	b.n	8012d40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f003 fec8 	bl	8016ab4 <tcp_send_fin>
 8012d24:	4603      	mov	r3, r0
 8012d26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d109      	bne.n	8012d44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2209      	movs	r2, #9
 8012d34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012d36:	e005      	b.n	8012d44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	e01c      	b.n	8012d76 <tcp_close_shutdown_fin+0xbe>
      break;
 8012d3c:	bf00      	nop
 8012d3e:	e002      	b.n	8012d46 <tcp_close_shutdown_fin+0x8e>
      break;
 8012d40:	bf00      	nop
 8012d42:	e000      	b.n	8012d46 <tcp_close_shutdown_fin+0x8e>
      break;
 8012d44:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d103      	bne.n	8012d56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f003 ffee 	bl	8016d30 <tcp_output>
 8012d54:	e00d      	b.n	8012d72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5e:	d108      	bne.n	8012d72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	8b5b      	ldrh	r3, [r3, #26]
 8012d64:	f043 0308 	orr.w	r3, r3, #8
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	e001      	b.n	8012d76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08020954 	.word	0x08020954
 8012d84:	08020a04 	.word	0x08020a04
 8012d88:	08020998 	.word	0x08020998

08012d8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d109      	bne.n	8012dae <tcp_close+0x22>
 8012d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8012dd8 <tcp_close+0x4c>)
 8012d9c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012da0:	490e      	ldr	r1, [pc, #56]	@ (8012ddc <tcp_close+0x50>)
 8012da2:	480f      	ldr	r0, [pc, #60]	@ (8012de0 <tcp_close+0x54>)
 8012da4:	f00a fd36 	bl	801d814 <iprintf>
 8012da8:	f06f 030f 	mvn.w	r3, #15
 8012dac:	e00f      	b.n	8012dce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	7d1b      	ldrb	r3, [r3, #20]
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d006      	beq.n	8012dc4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	8b5b      	ldrh	r3, [r3, #26]
 8012dba:	f043 0310 	orr.w	r3, r3, #16
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff fe94 	bl	8012af4 <tcp_close_shutdown>
 8012dcc:	4603      	mov	r3, r0
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08020954 	.word	0x08020954
 8012ddc:	08020a64 	.word	0x08020a64
 8012de0:	08020998 	.word	0x08020998

08012de4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b08e      	sub	sp, #56	@ 0x38
 8012de8:	af04      	add	r7, sp, #16
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d107      	bne.n	8012e04 <tcp_abandon+0x20>
 8012df4:	4b52      	ldr	r3, [pc, #328]	@ (8012f40 <tcp_abandon+0x15c>)
 8012df6:	f240 223d 	movw	r2, #573	@ 0x23d
 8012dfa:	4952      	ldr	r1, [pc, #328]	@ (8012f44 <tcp_abandon+0x160>)
 8012dfc:	4852      	ldr	r0, [pc, #328]	@ (8012f48 <tcp_abandon+0x164>)
 8012dfe:	f00a fd09 	bl	801d814 <iprintf>
 8012e02:	e099      	b.n	8012f38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7d1b      	ldrb	r3, [r3, #20]
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d106      	bne.n	8012e1a <tcp_abandon+0x36>
 8012e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8012f40 <tcp_abandon+0x15c>)
 8012e0e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012e12:	494e      	ldr	r1, [pc, #312]	@ (8012f4c <tcp_abandon+0x168>)
 8012e14:	484c      	ldr	r0, [pc, #304]	@ (8012f48 <tcp_abandon+0x164>)
 8012e16:	f00a fcfd 	bl	801d814 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	7d1b      	ldrb	r3, [r3, #20]
 8012e1e:	2b0a      	cmp	r3, #10
 8012e20:	d107      	bne.n	8012e32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012e22:	6879      	ldr	r1, [r7, #4]
 8012e24:	484a      	ldr	r0, [pc, #296]	@ (8012f50 <tcp_abandon+0x16c>)
 8012e26:	f000 ffc5 	bl	8013db4 <tcp_pcb_remove>
    tcp_free(pcb);
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7ff fdb0 	bl	8012990 <tcp_free>
 8012e30:	e082      	b.n	8012f38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012e36:	2300      	movs	r3, #0
 8012e38:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012e4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	7d1b      	ldrb	r3, [r3, #20]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d126      	bne.n	8012eaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	8adb      	ldrh	r3, [r3, #22]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d02e      	beq.n	8012ec2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e64:	4b3b      	ldr	r3, [pc, #236]	@ (8012f54 <tcp_abandon+0x170>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d105      	bne.n	8012e7a <tcp_abandon+0x96>
 8012e6e:	4b39      	ldr	r3, [pc, #228]	@ (8012f54 <tcp_abandon+0x170>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	4a37      	ldr	r2, [pc, #220]	@ (8012f54 <tcp_abandon+0x170>)
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	e013      	b.n	8012ea2 <tcp_abandon+0xbe>
 8012e7a:	4b36      	ldr	r3, [pc, #216]	@ (8012f54 <tcp_abandon+0x170>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e00c      	b.n	8012e9c <tcp_abandon+0xb8>
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d104      	bne.n	8012e96 <tcp_abandon+0xb2>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	68da      	ldr	r2, [r3, #12]
 8012e90:	69fb      	ldr	r3, [r7, #28]
 8012e92:	60da      	str	r2, [r3, #12]
 8012e94:	e005      	b.n	8012ea2 <tcp_abandon+0xbe>
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	61fb      	str	r3, [r7, #28]
 8012e9c:	69fb      	ldr	r3, [r7, #28]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d1ef      	bne.n	8012e82 <tcp_abandon+0x9e>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	60da      	str	r2, [r3, #12]
 8012ea8:	e00b      	b.n	8012ec2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	8adb      	ldrh	r3, [r3, #22]
 8012eb2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012eb4:	6879      	ldr	r1, [r7, #4]
 8012eb6:	4828      	ldr	r0, [pc, #160]	@ (8012f58 <tcp_abandon+0x174>)
 8012eb8:	f000 ff7c 	bl	8013db4 <tcp_pcb_remove>
 8012ebc:	4b27      	ldr	r3, [pc, #156]	@ (8012f5c <tcp_abandon+0x178>)
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d004      	beq.n	8012ed4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f000 fd1e 	bl	8013910 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d004      	beq.n	8012ee6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 fd15 	bl	8013910 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d004      	beq.n	8012ef8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f000 fd0c 	bl	8013910 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00e      	beq.n	8012f1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012efe:	6879      	ldr	r1, [r7, #4]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	3304      	adds	r3, #4
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	8b12      	ldrh	r2, [r2, #24]
 8012f08:	9202      	str	r2, [sp, #8]
 8012f0a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012f0c:	9201      	str	r2, [sp, #4]
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	460b      	mov	r3, r1
 8012f12:	697a      	ldr	r2, [r7, #20]
 8012f14:	69b9      	ldr	r1, [r7, #24]
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f004 fcbe 	bl	8017898 <tcp_rst>
    }
    last_state = pcb->state;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	7d1b      	ldrb	r3, [r3, #20]
 8012f20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff fd34 	bl	8012990 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d004      	beq.n	8012f38 <tcp_abandon+0x154>
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	f06f 010c 	mvn.w	r1, #12
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	4798      	blx	r3
  }
}
 8012f38:	3728      	adds	r7, #40	@ 0x28
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	08020954 	.word	0x08020954
 8012f44:	08020a98 	.word	0x08020a98
 8012f48:	08020998 	.word	0x08020998
 8012f4c:	08020ab4 	.word	0x08020ab4
 8012f50:	2400cc44 	.word	0x2400cc44
 8012f54:	2400cc38 	.word	0x2400cc38
 8012f58:	2400cc40 	.word	0x2400cc40
 8012f5c:	2400cc48 	.word	0x2400cc48

08012f60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012f68:	2101      	movs	r1, #1
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f7ff ff3a 	bl	8012de4 <tcp_abandon>
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <tcp_update_rcv_ann_wnd+0x1c>
 8012f86:	4b25      	ldr	r3, [pc, #148]	@ (801301c <tcp_update_rcv_ann_wnd+0xa4>)
 8012f88:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012f8c:	4924      	ldr	r1, [pc, #144]	@ (8013020 <tcp_update_rcv_ann_wnd+0xa8>)
 8012f8e:	4825      	ldr	r0, [pc, #148]	@ (8013024 <tcp_update_rcv_ann_wnd+0xac>)
 8012f90:	f00a fc40 	bl	801d814 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012f9c:	4413      	add	r3, r2
 8012f9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012fa8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012fac:	bf28      	it	cs
 8012fae:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	4413      	add	r3, r2
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	1ad3      	subs	r3, r2, r3
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	db08      	blt.n	8012fd0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fca:	68fa      	ldr	r2, [r7, #12]
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	e020      	b.n	8013012 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	dd03      	ble.n	8012fe6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012fe4:	e014      	b.n	8013010 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fee:	1ad3      	subs	r3, r2, r3
 8012ff0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ff8:	d306      	bcc.n	8013008 <tcp_update_rcv_ann_wnd+0x90>
 8012ffa:	4b08      	ldr	r3, [pc, #32]	@ (801301c <tcp_update_rcv_ann_wnd+0xa4>)
 8012ffc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013000:	4909      	ldr	r1, [pc, #36]	@ (8013028 <tcp_update_rcv_ann_wnd+0xb0>)
 8013002:	4808      	ldr	r0, [pc, #32]	@ (8013024 <tcp_update_rcv_ann_wnd+0xac>)
 8013004:	f00a fc06 	bl	801d814 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	b29a      	uxth	r2, r3
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013010:	2300      	movs	r3, #0
  }
}
 8013012:	4618      	mov	r0, r3
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	08020954 	.word	0x08020954
 8013020:	08020bb0 	.word	0x08020bb0
 8013024:	08020998 	.word	0x08020998
 8013028:	08020bd4 	.word	0x08020bd4

0801302c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	460b      	mov	r3, r1
 8013036:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d107      	bne.n	801304e <tcp_recved+0x22>
 801303e:	4b1f      	ldr	r3, [pc, #124]	@ (80130bc <tcp_recved+0x90>)
 8013040:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013044:	491e      	ldr	r1, [pc, #120]	@ (80130c0 <tcp_recved+0x94>)
 8013046:	481f      	ldr	r0, [pc, #124]	@ (80130c4 <tcp_recved+0x98>)
 8013048:	f00a fbe4 	bl	801d814 <iprintf>
 801304c:	e032      	b.n	80130b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	7d1b      	ldrb	r3, [r3, #20]
 8013052:	2b01      	cmp	r3, #1
 8013054:	d106      	bne.n	8013064 <tcp_recved+0x38>
 8013056:	4b19      	ldr	r3, [pc, #100]	@ (80130bc <tcp_recved+0x90>)
 8013058:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801305c:	491a      	ldr	r1, [pc, #104]	@ (80130c8 <tcp_recved+0x9c>)
 801305e:	4819      	ldr	r0, [pc, #100]	@ (80130c4 <tcp_recved+0x98>)
 8013060:	f00a fbd8 	bl	801d814 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013068:	887b      	ldrh	r3, [r7, #2]
 801306a:	4413      	add	r3, r2
 801306c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801306e:	89fb      	ldrh	r3, [r7, #14]
 8013070:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013074:	d804      	bhi.n	8013080 <tcp_recved+0x54>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801307a:	89fa      	ldrh	r2, [r7, #14]
 801307c:	429a      	cmp	r2, r3
 801307e:	d204      	bcs.n	801308a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013086:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013088:	e002      	b.n	8013090 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	89fa      	ldrh	r2, [r7, #14]
 801308e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff ff71 	bl	8012f78 <tcp_update_rcv_ann_wnd>
 8013096:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801309e:	d309      	bcc.n	80130b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	8b5b      	ldrh	r3, [r3, #26]
 80130a4:	f043 0302 	orr.w	r3, r3, #2
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f003 fe3e 	bl	8016d30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80130b4:	3710      	adds	r7, #16
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	08020954 	.word	0x08020954
 80130c0:	08020bf0 	.word	0x08020bf0
 80130c4:	08020998 	.word	0x08020998
 80130c8:	08020c08 	.word	0x08020c08

080130cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80130cc:	b5b0      	push	{r4, r5, r7, lr}
 80130ce:	b090      	sub	sp, #64	@ 0x40
 80130d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80130d2:	2300      	movs	r3, #0
 80130d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80130d8:	4b95      	ldr	r3, [pc, #596]	@ (8013330 <tcp_slowtmr+0x264>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	3301      	adds	r3, #1
 80130de:	4a94      	ldr	r2, [pc, #592]	@ (8013330 <tcp_slowtmr+0x264>)
 80130e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80130e2:	4b94      	ldr	r3, [pc, #592]	@ (8013334 <tcp_slowtmr+0x268>)
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	3301      	adds	r3, #1
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	4b92      	ldr	r3, [pc, #584]	@ (8013334 <tcp_slowtmr+0x268>)
 80130ec:	701a      	strb	r2, [r3, #0]
 80130ee:	e000      	b.n	80130f2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80130f0:	bf00      	nop
  prev = NULL;
 80130f2:	2300      	movs	r3, #0
 80130f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80130f6:	4b90      	ldr	r3, [pc, #576]	@ (8013338 <tcp_slowtmr+0x26c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80130fc:	e29d      	b.n	801363a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80130fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013100:	7d1b      	ldrb	r3, [r3, #20]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d106      	bne.n	8013114 <tcp_slowtmr+0x48>
 8013106:	4b8d      	ldr	r3, [pc, #564]	@ (801333c <tcp_slowtmr+0x270>)
 8013108:	f240 42be 	movw	r2, #1214	@ 0x4be
 801310c:	498c      	ldr	r1, [pc, #560]	@ (8013340 <tcp_slowtmr+0x274>)
 801310e:	488d      	ldr	r0, [pc, #564]	@ (8013344 <tcp_slowtmr+0x278>)
 8013110:	f00a fb80 	bl	801d814 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013116:	7d1b      	ldrb	r3, [r3, #20]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d106      	bne.n	801312a <tcp_slowtmr+0x5e>
 801311c:	4b87      	ldr	r3, [pc, #540]	@ (801333c <tcp_slowtmr+0x270>)
 801311e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013122:	4989      	ldr	r1, [pc, #548]	@ (8013348 <tcp_slowtmr+0x27c>)
 8013124:	4887      	ldr	r0, [pc, #540]	@ (8013344 <tcp_slowtmr+0x278>)
 8013126:	f00a fb75 	bl	801d814 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312c:	7d1b      	ldrb	r3, [r3, #20]
 801312e:	2b0a      	cmp	r3, #10
 8013130:	d106      	bne.n	8013140 <tcp_slowtmr+0x74>
 8013132:	4b82      	ldr	r3, [pc, #520]	@ (801333c <tcp_slowtmr+0x270>)
 8013134:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013138:	4984      	ldr	r1, [pc, #528]	@ (801334c <tcp_slowtmr+0x280>)
 801313a:	4882      	ldr	r0, [pc, #520]	@ (8013344 <tcp_slowtmr+0x278>)
 801313c:	f00a fb6a 	bl	801d814 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013142:	7f9a      	ldrb	r2, [r3, #30]
 8013144:	4b7b      	ldr	r3, [pc, #492]	@ (8013334 <tcp_slowtmr+0x268>)
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	429a      	cmp	r2, r3
 801314a:	d105      	bne.n	8013158 <tcp_slowtmr+0x8c>
      prev = pcb;
 801314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013156:	e270      	b.n	801363a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8013158:	4b76      	ldr	r3, [pc, #472]	@ (8013334 <tcp_slowtmr+0x268>)
 801315a:	781a      	ldrb	r2, [r3, #0]
 801315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801315e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013160:	2300      	movs	r3, #0
 8013162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316e:	7d1b      	ldrb	r3, [r3, #20]
 8013170:	2b02      	cmp	r3, #2
 8013172:	d10a      	bne.n	801318a <tcp_slowtmr+0xbe>
 8013174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801317a:	2b05      	cmp	r3, #5
 801317c:	d905      	bls.n	801318a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801317e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013182:	3301      	adds	r3, #1
 8013184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013188:	e11e      	b.n	80133c8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013190:	2b0b      	cmp	r3, #11
 8013192:	d905      	bls.n	80131a0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013198:	3301      	adds	r3, #1
 801319a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801319e:	e113      	b.n	80133c8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80131a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d075      	beq.n	8013296 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80131aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d006      	beq.n	80131c0 <tcp_slowtmr+0xf4>
 80131b2:	4b62      	ldr	r3, [pc, #392]	@ (801333c <tcp_slowtmr+0x270>)
 80131b4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80131b8:	4965      	ldr	r1, [pc, #404]	@ (8013350 <tcp_slowtmr+0x284>)
 80131ba:	4862      	ldr	r0, [pc, #392]	@ (8013344 <tcp_slowtmr+0x278>)
 80131bc:	f00a fb2a 	bl	801d814 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80131c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d106      	bne.n	80131d6 <tcp_slowtmr+0x10a>
 80131c8:	4b5c      	ldr	r3, [pc, #368]	@ (801333c <tcp_slowtmr+0x270>)
 80131ca:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80131ce:	4961      	ldr	r1, [pc, #388]	@ (8013354 <tcp_slowtmr+0x288>)
 80131d0:	485c      	ldr	r0, [pc, #368]	@ (8013344 <tcp_slowtmr+0x278>)
 80131d2:	f00a fb1f 	bl	801d814 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80131d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80131dc:	2b0b      	cmp	r3, #11
 80131de:	d905      	bls.n	80131ec <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80131e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131e4:	3301      	adds	r3, #1
 80131e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80131ea:	e0ed      	b.n	80133c8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80131ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80131f2:	3b01      	subs	r3, #1
 80131f4:	4a58      	ldr	r2, [pc, #352]	@ (8013358 <tcp_slowtmr+0x28c>)
 80131f6:	5cd3      	ldrb	r3, [r2, r3]
 80131f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80131fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013200:	7c7a      	ldrb	r2, [r7, #17]
 8013202:	429a      	cmp	r2, r3
 8013204:	d907      	bls.n	8013216 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013208:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801320c:	3301      	adds	r3, #1
 801320e:	b2da      	uxtb	r2, r3
 8013210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013212:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013218:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801321c:	7c7a      	ldrb	r2, [r7, #17]
 801321e:	429a      	cmp	r2, r3
 8013220:	f200 80d2 	bhi.w	80133c8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013224:	2301      	movs	r3, #1
 8013226:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801322e:	2b00      	cmp	r3, #0
 8013230:	d108      	bne.n	8013244 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013234:	f004 fc24 	bl	8017a80 <tcp_zero_window_probe>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d014      	beq.n	8013268 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801323e:	2300      	movs	r3, #0
 8013240:	623b      	str	r3, [r7, #32]
 8013242:	e011      	b.n	8013268 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801324a:	4619      	mov	r1, r3
 801324c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801324e:	f003 fae9 	bl	8016824 <tcp_split_unsent_seg>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d107      	bne.n	8013268 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801325a:	f003 fd69 	bl	8016d30 <tcp_output>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d101      	bne.n	8013268 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 80ac 	beq.w	80133c8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013272:	2200      	movs	r2, #0
 8013274:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801327e:	2b06      	cmp	r3, #6
 8013280:	f200 80a2 	bhi.w	80133c8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013286:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801328a:	3301      	adds	r3, #1
 801328c:	b2da      	uxtb	r2, r3
 801328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013290:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013294:	e098      	b.n	80133c8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013298:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801329c:	2b00      	cmp	r3, #0
 801329e:	db0f      	blt.n	80132c0 <tcp_slowtmr+0x1f4>
 80132a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80132a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d008      	beq.n	80132c0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80132ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	3301      	adds	r3, #1
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	b21a      	sxth	r2, r3
 80132bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132be:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80132c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80132c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80132cc:	429a      	cmp	r2, r3
 80132ce:	db7b      	blt.n	80133c8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80132d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132d2:	f004 f821 	bl	8017318 <tcp_rexmit_rto_prepare>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d007      	beq.n	80132ec <tcp_slowtmr+0x220>
 80132dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d171      	bne.n	80133c8 <tcp_slowtmr+0x2fc>
 80132e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d06d      	beq.n	80133c8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80132ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ee:	7d1b      	ldrb	r3, [r3, #20]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	d03a      	beq.n	801336a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80132f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132fa:	2b0c      	cmp	r3, #12
 80132fc:	bf28      	it	cs
 80132fe:	230c      	movcs	r3, #12
 8013300:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013304:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013308:	10db      	asrs	r3, r3, #3
 801330a:	b21b      	sxth	r3, r3
 801330c:	461a      	mov	r2, r3
 801330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013310:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013314:	4413      	add	r3, r2
 8013316:	7efa      	ldrb	r2, [r7, #27]
 8013318:	4910      	ldr	r1, [pc, #64]	@ (801335c <tcp_slowtmr+0x290>)
 801331a:	5c8a      	ldrb	r2, [r1, r2]
 801331c:	4093      	lsls	r3, r2
 801331e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8013326:	4293      	cmp	r3, r2
 8013328:	dc1a      	bgt.n	8013360 <tcp_slowtmr+0x294>
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	b21a      	sxth	r2, r3
 801332e:	e019      	b.n	8013364 <tcp_slowtmr+0x298>
 8013330:	2400cc34 	.word	0x2400cc34
 8013334:	2400cc4a 	.word	0x2400cc4a
 8013338:	2400cc40 	.word	0x2400cc40
 801333c:	08020954 	.word	0x08020954
 8013340:	08020c98 	.word	0x08020c98
 8013344:	08020998 	.word	0x08020998
 8013348:	08020cc4 	.word	0x08020cc4
 801334c:	08020cf0 	.word	0x08020cf0
 8013350:	08020d20 	.word	0x08020d20
 8013354:	08020d54 	.word	0x08020d54
 8013358:	08022db8 	.word	0x08022db8
 801335c:	08022da8 	.word	0x08022da8
 8013360:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013366:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801336c:	2200      	movs	r2, #0
 801336e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013372:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013378:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801337c:	4293      	cmp	r3, r2
 801337e:	bf28      	it	cs
 8013380:	4613      	movcs	r3, r2
 8013382:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013384:	8a7b      	ldrh	r3, [r7, #18]
 8013386:	085b      	lsrs	r3, r3, #1
 8013388:	b29a      	uxth	r2, r3
 801338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801338c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013392:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013398:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	b29b      	uxth	r3, r3
 801339e:	429a      	cmp	r2, r3
 80133a0:	d206      	bcs.n	80133b0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80133a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133a6:	005b      	lsls	r3, r3, #1
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80133b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80133b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80133ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133bc:	2200      	movs	r2, #0
 80133be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80133c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133c4:	f004 f818 	bl	80173f8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80133c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ca:	7d1b      	ldrb	r3, [r3, #20]
 80133cc:	2b06      	cmp	r3, #6
 80133ce:	d111      	bne.n	80133f4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80133d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f003 0310 	and.w	r3, r3, #16
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00b      	beq.n	80133f4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80133dc:	4b9c      	ldr	r3, [pc, #624]	@ (8013650 <tcp_slowtmr+0x584>)
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e2:	6a1b      	ldr	r3, [r3, #32]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	2b28      	cmp	r3, #40	@ 0x28
 80133e8:	d904      	bls.n	80133f4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80133ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133ee:	3301      	adds	r3, #1
 80133f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80133f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133f6:	7a5b      	ldrb	r3, [r3, #9]
 80133f8:	f003 0308 	and.w	r3, r3, #8
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d04a      	beq.n	8013496 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013402:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013404:	2b04      	cmp	r3, #4
 8013406:	d003      	beq.n	8013410 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8013408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801340c:	2b07      	cmp	r3, #7
 801340e:	d142      	bne.n	8013496 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013410:	4b8f      	ldr	r3, [pc, #572]	@ (8013650 <tcp_slowtmr+0x584>)
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013416:	6a1b      	ldr	r3, [r3, #32]
 8013418:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013420:	4b8c      	ldr	r3, [pc, #560]	@ (8013654 <tcp_slowtmr+0x588>)
 8013422:	440b      	add	r3, r1
 8013424:	498c      	ldr	r1, [pc, #560]	@ (8013658 <tcp_slowtmr+0x58c>)
 8013426:	fba1 1303 	umull	r1, r3, r1, r3
 801342a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801342c:	429a      	cmp	r2, r3
 801342e:	d90a      	bls.n	8013446 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8013430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013434:	3301      	adds	r3, #1
 8013436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801343a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801343e:	3301      	adds	r3, #1
 8013440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013444:	e027      	b.n	8013496 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013446:	4b82      	ldr	r3, [pc, #520]	@ (8013650 <tcp_slowtmr+0x584>)
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801344c:	6a1b      	ldr	r3, [r3, #32]
 801344e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013452:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013458:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801345c:	4618      	mov	r0, r3
 801345e:	4b7f      	ldr	r3, [pc, #508]	@ (801365c <tcp_slowtmr+0x590>)
 8013460:	fb00 f303 	mul.w	r3, r0, r3
 8013464:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013466:	497c      	ldr	r1, [pc, #496]	@ (8013658 <tcp_slowtmr+0x58c>)
 8013468:	fba1 1303 	umull	r1, r3, r1, r3
 801346c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801346e:	429a      	cmp	r2, r3
 8013470:	d911      	bls.n	8013496 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013474:	f004 fac4 	bl	8017a00 <tcp_keepalive>
 8013478:	4603      	mov	r3, r0
 801347a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801347e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013488:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801348c:	3301      	adds	r3, #1
 801348e:	b2da      	uxtb	r2, r3
 8013490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013492:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8013496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801349a:	2b00      	cmp	r3, #0
 801349c:	d011      	beq.n	80134c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801349e:	4b6c      	ldr	r3, [pc, #432]	@ (8013650 <tcp_slowtmr+0x584>)
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	6a1b      	ldr	r3, [r3, #32]
 80134a6:	1ad2      	subs	r2, r2, r3
 80134a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80134ae:	4619      	mov	r1, r3
 80134b0:	460b      	mov	r3, r1
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	440b      	add	r3, r1
 80134b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d302      	bcc.n	80134c2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80134bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134be:	f000 fddd 	bl	801407c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80134c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c4:	7d1b      	ldrb	r3, [r3, #20]
 80134c6:	2b03      	cmp	r3, #3
 80134c8:	d10b      	bne.n	80134e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80134ca:	4b61      	ldr	r3, [pc, #388]	@ (8013650 <tcp_slowtmr+0x584>)
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d0:	6a1b      	ldr	r3, [r3, #32]
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	2b28      	cmp	r3, #40	@ 0x28
 80134d6:	d904      	bls.n	80134e2 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80134d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134dc:	3301      	adds	r3, #1
 80134de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80134e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e4:	7d1b      	ldrb	r3, [r3, #20]
 80134e6:	2b09      	cmp	r3, #9
 80134e8:	d10b      	bne.n	8013502 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80134ea:	4b59      	ldr	r3, [pc, #356]	@ (8013650 <tcp_slowtmr+0x584>)
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f0:	6a1b      	ldr	r3, [r3, #32]
 80134f2:	1ad3      	subs	r3, r2, r3
 80134f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80134f6:	d904      	bls.n	8013502 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80134f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134fc:	3301      	adds	r3, #1
 80134fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013506:	2b00      	cmp	r3, #0
 8013508:	d060      	beq.n	80135cc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801350a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013510:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013512:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013514:	f000 fbfe 	bl	8013d14 <tcp_pcb_purge>
      if (prev != NULL) {
 8013518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351a:	2b00      	cmp	r3, #0
 801351c:	d010      	beq.n	8013540 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801351e:	4b50      	ldr	r3, [pc, #320]	@ (8013660 <tcp_slowtmr+0x594>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013524:	429a      	cmp	r2, r3
 8013526:	d106      	bne.n	8013536 <tcp_slowtmr+0x46a>
 8013528:	4b4e      	ldr	r3, [pc, #312]	@ (8013664 <tcp_slowtmr+0x598>)
 801352a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801352e:	494e      	ldr	r1, [pc, #312]	@ (8013668 <tcp_slowtmr+0x59c>)
 8013530:	484e      	ldr	r0, [pc, #312]	@ (801366c <tcp_slowtmr+0x5a0>)
 8013532:	f00a f96f 	bl	801d814 <iprintf>
        prev->next = pcb->next;
 8013536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013538:	68da      	ldr	r2, [r3, #12]
 801353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801353c:	60da      	str	r2, [r3, #12]
 801353e:	e00f      	b.n	8013560 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013540:	4b47      	ldr	r3, [pc, #284]	@ (8013660 <tcp_slowtmr+0x594>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013546:	429a      	cmp	r2, r3
 8013548:	d006      	beq.n	8013558 <tcp_slowtmr+0x48c>
 801354a:	4b46      	ldr	r3, [pc, #280]	@ (8013664 <tcp_slowtmr+0x598>)
 801354c:	f240 5271 	movw	r2, #1393	@ 0x571
 8013550:	4947      	ldr	r1, [pc, #284]	@ (8013670 <tcp_slowtmr+0x5a4>)
 8013552:	4846      	ldr	r0, [pc, #280]	@ (801366c <tcp_slowtmr+0x5a0>)
 8013554:	f00a f95e 	bl	801d814 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	4a40      	ldr	r2, [pc, #256]	@ (8013660 <tcp_slowtmr+0x594>)
 801355e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013560:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013564:	2b00      	cmp	r3, #0
 8013566:	d013      	beq.n	8013590 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801356c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013570:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013574:	3304      	adds	r3, #4
 8013576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013578:	8ad2      	ldrh	r2, [r2, #22]
 801357a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801357c:	8b09      	ldrh	r1, [r1, #24]
 801357e:	9102      	str	r1, [sp, #8]
 8013580:	9201      	str	r2, [sp, #4]
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	462b      	mov	r3, r5
 8013586:	4622      	mov	r2, r4
 8013588:	4601      	mov	r1, r0
 801358a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801358c:	f004 f984 	bl	8017898 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013592:	691b      	ldr	r3, [r3, #16]
 8013594:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013598:	7d1b      	ldrb	r3, [r3, #20]
 801359a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801359e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80135a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80135a6:	6838      	ldr	r0, [r7, #0]
 80135a8:	f7ff f9f2 	bl	8012990 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80135ac:	4b31      	ldr	r3, [pc, #196]	@ (8013674 <tcp_slowtmr+0x5a8>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d004      	beq.n	80135c2 <tcp_slowtmr+0x4f6>
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f06f 010c 	mvn.w	r1, #12
 80135be:	68b8      	ldr	r0, [r7, #8]
 80135c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80135c2:	4b2c      	ldr	r3, [pc, #176]	@ (8013674 <tcp_slowtmr+0x5a8>)
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d037      	beq.n	801363a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80135ca:	e592      	b.n	80130f2 <tcp_slowtmr+0x26>
      prev = pcb;
 80135cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80135d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80135d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d8:	7f1b      	ldrb	r3, [r3, #28]
 80135da:	3301      	adds	r3, #1
 80135dc:	b2da      	uxtb	r2, r3
 80135de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80135e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e4:	7f1a      	ldrb	r2, [r3, #28]
 80135e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e8:	7f5b      	ldrb	r3, [r3, #29]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d325      	bcc.n	801363a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80135ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135f0:	2200      	movs	r2, #0
 80135f2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80135f4:	4b1f      	ldr	r3, [pc, #124]	@ (8013674 <tcp_slowtmr+0x5a8>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80135fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00b      	beq.n	801361c <tcp_slowtmr+0x550>
 8013604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801360a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801360c:	6912      	ldr	r2, [r2, #16]
 801360e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013610:	4610      	mov	r0, r2
 8013612:	4798      	blx	r3
 8013614:	4603      	mov	r3, r0
 8013616:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801361a:	e002      	b.n	8013622 <tcp_slowtmr+0x556>
 801361c:	2300      	movs	r3, #0
 801361e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013622:	4b14      	ldr	r3, [pc, #80]	@ (8013674 <tcp_slowtmr+0x5a8>)
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	f47f ad62 	bne.w	80130f0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801362c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013630:	2b00      	cmp	r3, #0
 8013632:	d102      	bne.n	801363a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013636:	f003 fb7b 	bl	8016d30 <tcp_output>
  while (pcb != NULL) {
 801363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363c:	2b00      	cmp	r3, #0
 801363e:	f47f ad5e 	bne.w	80130fe <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013642:	2300      	movs	r3, #0
 8013644:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8013646:	4b0c      	ldr	r3, [pc, #48]	@ (8013678 <tcp_slowtmr+0x5ac>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801364c:	e069      	b.n	8013722 <tcp_slowtmr+0x656>
 801364e:	bf00      	nop
 8013650:	2400cc34 	.word	0x2400cc34
 8013654:	000a4cb8 	.word	0x000a4cb8
 8013658:	10624dd3 	.word	0x10624dd3
 801365c:	000124f8 	.word	0x000124f8
 8013660:	2400cc40 	.word	0x2400cc40
 8013664:	08020954 	.word	0x08020954
 8013668:	08020d8c 	.word	0x08020d8c
 801366c:	08020998 	.word	0x08020998
 8013670:	08020db8 	.word	0x08020db8
 8013674:	2400cc48 	.word	0x2400cc48
 8013678:	2400cc44 	.word	0x2400cc44
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367e:	7d1b      	ldrb	r3, [r3, #20]
 8013680:	2b0a      	cmp	r3, #10
 8013682:	d006      	beq.n	8013692 <tcp_slowtmr+0x5c6>
 8013684:	4b2b      	ldr	r3, [pc, #172]	@ (8013734 <tcp_slowtmr+0x668>)
 8013686:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801368a:	492b      	ldr	r1, [pc, #172]	@ (8013738 <tcp_slowtmr+0x66c>)
 801368c:	482b      	ldr	r0, [pc, #172]	@ (801373c <tcp_slowtmr+0x670>)
 801368e:	f00a f8c1 	bl	801d814 <iprintf>
    pcb_remove = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013698:	4b29      	ldr	r3, [pc, #164]	@ (8013740 <tcp_slowtmr+0x674>)
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801369e:	6a1b      	ldr	r3, [r3, #32]
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	2bf0      	cmp	r3, #240	@ 0xf0
 80136a4:	d904      	bls.n	80136b0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80136a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136aa:	3301      	adds	r3, #1
 80136ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80136b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d02f      	beq.n	8013718 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80136b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136ba:	f000 fb2b 	bl	8013d14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80136be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d010      	beq.n	80136e6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80136c4:	4b1f      	ldr	r3, [pc, #124]	@ (8013744 <tcp_slowtmr+0x678>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d106      	bne.n	80136dc <tcp_slowtmr+0x610>
 80136ce:	4b19      	ldr	r3, [pc, #100]	@ (8013734 <tcp_slowtmr+0x668>)
 80136d0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80136d4:	491c      	ldr	r1, [pc, #112]	@ (8013748 <tcp_slowtmr+0x67c>)
 80136d6:	4819      	ldr	r0, [pc, #100]	@ (801373c <tcp_slowtmr+0x670>)
 80136d8:	f00a f89c 	bl	801d814 <iprintf>
        prev->next = pcb->next;
 80136dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136de:	68da      	ldr	r2, [r3, #12]
 80136e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e2:	60da      	str	r2, [r3, #12]
 80136e4:	e00f      	b.n	8013706 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80136e6:	4b17      	ldr	r3, [pc, #92]	@ (8013744 <tcp_slowtmr+0x678>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d006      	beq.n	80136fe <tcp_slowtmr+0x632>
 80136f0:	4b10      	ldr	r3, [pc, #64]	@ (8013734 <tcp_slowtmr+0x668>)
 80136f2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80136f6:	4915      	ldr	r1, [pc, #84]	@ (801374c <tcp_slowtmr+0x680>)
 80136f8:	4810      	ldr	r0, [pc, #64]	@ (801373c <tcp_slowtmr+0x670>)
 80136fa:	f00a f88b 	bl	801d814 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80136fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	4a10      	ldr	r2, [pc, #64]	@ (8013744 <tcp_slowtmr+0x678>)
 8013704:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013708:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013710:	69f8      	ldr	r0, [r7, #28]
 8013712:	f7ff f93d 	bl	8012990 <tcp_free>
 8013716:	e004      	b.n	8013722 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1a9      	bne.n	801367c <tcp_slowtmr+0x5b0>
    }
  }
}
 8013728:	bf00      	nop
 801372a:	bf00      	nop
 801372c:	3730      	adds	r7, #48	@ 0x30
 801372e:	46bd      	mov	sp, r7
 8013730:	bdb0      	pop	{r4, r5, r7, pc}
 8013732:	bf00      	nop
 8013734:	08020954 	.word	0x08020954
 8013738:	08020de4 	.word	0x08020de4
 801373c:	08020998 	.word	0x08020998
 8013740:	2400cc34 	.word	0x2400cc34
 8013744:	2400cc44 	.word	0x2400cc44
 8013748:	08020e14 	.word	0x08020e14
 801374c:	08020e3c 	.word	0x08020e3c

08013750 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013756:	4b2d      	ldr	r3, [pc, #180]	@ (801380c <tcp_fasttmr+0xbc>)
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	3301      	adds	r3, #1
 801375c:	b2da      	uxtb	r2, r3
 801375e:	4b2b      	ldr	r3, [pc, #172]	@ (801380c <tcp_fasttmr+0xbc>)
 8013760:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013762:	4b2b      	ldr	r3, [pc, #172]	@ (8013810 <tcp_fasttmr+0xc0>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013768:	e048      	b.n	80137fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	7f9a      	ldrb	r2, [r3, #30]
 801376e:	4b27      	ldr	r3, [pc, #156]	@ (801380c <tcp_fasttmr+0xbc>)
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d03f      	beq.n	80137f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013776:	4b25      	ldr	r3, [pc, #148]	@ (801380c <tcp_fasttmr+0xbc>)
 8013778:	781a      	ldrb	r2, [r3, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	8b5b      	ldrh	r3, [r3, #26]
 8013782:	f003 0301 	and.w	r3, r3, #1
 8013786:	2b00      	cmp	r3, #0
 8013788:	d010      	beq.n	80137ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	8b5b      	ldrh	r3, [r3, #26]
 801378e:	f043 0302 	orr.w	r3, r3, #2
 8013792:	b29a      	uxth	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f003 fac9 	bl	8016d30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8b5b      	ldrh	r3, [r3, #26]
 80137a2:	f023 0303 	bic.w	r3, r3, #3
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	8b5b      	ldrh	r3, [r3, #26]
 80137b0:	f003 0308 	and.w	r3, r3, #8
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d009      	beq.n	80137cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	8b5b      	ldrh	r3, [r3, #26]
 80137bc:	f023 0308 	bic.w	r3, r3, #8
 80137c0:	b29a      	uxth	r2, r3
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7ff fa76 	bl	8012cb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00a      	beq.n	80137f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80137da:	4b0e      	ldr	r3, [pc, #56]	@ (8013814 <tcp_fasttmr+0xc4>)
 80137dc:	2200      	movs	r2, #0
 80137de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f000 f819 	bl	8013818 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80137e6:	4b0b      	ldr	r3, [pc, #44]	@ (8013814 <tcp_fasttmr+0xc4>)
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d000      	beq.n	80137f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80137ee:	e7b8      	b.n	8013762 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	607b      	str	r3, [r7, #4]
 80137f4:	e002      	b.n	80137fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d1b3      	bne.n	801376a <tcp_fasttmr+0x1a>
    }
  }
}
 8013802:	bf00      	nop
 8013804:	bf00      	nop
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	2400cc4a 	.word	0x2400cc4a
 8013810:	2400cc40 	.word	0x2400cc40
 8013814:	2400cc48 	.word	0x2400cc48

08013818 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013818:	b590      	push	{r4, r7, lr}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d109      	bne.n	801383a <tcp_process_refused_data+0x22>
 8013826:	4b37      	ldr	r3, [pc, #220]	@ (8013904 <tcp_process_refused_data+0xec>)
 8013828:	f240 6209 	movw	r2, #1545	@ 0x609
 801382c:	4936      	ldr	r1, [pc, #216]	@ (8013908 <tcp_process_refused_data+0xf0>)
 801382e:	4837      	ldr	r0, [pc, #220]	@ (801390c <tcp_process_refused_data+0xf4>)
 8013830:	f009 fff0 	bl	801d814 <iprintf>
 8013834:	f06f 030f 	mvn.w	r3, #15
 8013838:	e060      	b.n	80138fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801383e:	7b5b      	ldrb	r3, [r3, #13]
 8013840:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013846:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2200      	movs	r2, #0
 801384c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00b      	beq.n	8013870 <tcp_process_refused_data+0x58>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6918      	ldr	r0, [r3, #16]
 8013862:	2300      	movs	r3, #0
 8013864:	68ba      	ldr	r2, [r7, #8]
 8013866:	6879      	ldr	r1, [r7, #4]
 8013868:	47a0      	blx	r4
 801386a:	4603      	mov	r3, r0
 801386c:	73fb      	strb	r3, [r7, #15]
 801386e:	e007      	b.n	8013880 <tcp_process_refused_data+0x68>
 8013870:	2300      	movs	r3, #0
 8013872:	68ba      	ldr	r2, [r7, #8]
 8013874:	6879      	ldr	r1, [r7, #4]
 8013876:	2000      	movs	r0, #0
 8013878:	f000 f8a4 	bl	80139c4 <tcp_recv_null>
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d12a      	bne.n	80138de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013888:	7bbb      	ldrb	r3, [r7, #14]
 801388a:	f003 0320 	and.w	r3, r3, #32
 801388e:	2b00      	cmp	r3, #0
 8013890:	d033      	beq.n	80138fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013896:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801389a:	d005      	beq.n	80138a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138a0:	3301      	adds	r3, #1
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d00b      	beq.n	80138ca <tcp_process_refused_data+0xb2>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6918      	ldr	r0, [r3, #16]
 80138bc:	2300      	movs	r3, #0
 80138be:	2200      	movs	r2, #0
 80138c0:	6879      	ldr	r1, [r7, #4]
 80138c2:	47a0      	blx	r4
 80138c4:	4603      	mov	r3, r0
 80138c6:	73fb      	strb	r3, [r7, #15]
 80138c8:	e001      	b.n	80138ce <tcp_process_refused_data+0xb6>
 80138ca:	2300      	movs	r3, #0
 80138cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80138ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138d2:	f113 0f0d 	cmn.w	r3, #13
 80138d6:	d110      	bne.n	80138fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80138d8:	f06f 030c 	mvn.w	r3, #12
 80138dc:	e00e      	b.n	80138fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80138de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138e2:	f113 0f0d 	cmn.w	r3, #13
 80138e6:	d102      	bne.n	80138ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80138e8:	f06f 030c 	mvn.w	r3, #12
 80138ec:	e006      	b.n	80138fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	68ba      	ldr	r2, [r7, #8]
 80138f2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80138f4:	f06f 0304 	mvn.w	r3, #4
 80138f8:	e000      	b.n	80138fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3714      	adds	r7, #20
 8013900:	46bd      	mov	sp, r7
 8013902:	bd90      	pop	{r4, r7, pc}
 8013904:	08020954 	.word	0x08020954
 8013908:	08020e64 	.word	0x08020e64
 801390c:	08020998 	.word	0x08020998

08013910 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013918:	e007      	b.n	801392a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f80a 	bl	801393a <tcp_seg_free>
    seg = next;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d1f4      	bne.n	801391a <tcp_segs_free+0xa>
  }
}
 8013930:	bf00      	nop
 8013932:	bf00      	nop
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b082      	sub	sp, #8
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00c      	beq.n	8013962 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d004      	beq.n	801395a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	f7fe fd5f 	bl	8012418 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801395a:	6879      	ldr	r1, [r7, #4]
 801395c:	2003      	movs	r0, #3
 801395e:	f7fd feab 	bl	80116b8 <memp_free>
  }
}
 8013962:	bf00      	nop
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
	...

0801396c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_seg_copy+0x1c>
 801397a:	4b0f      	ldr	r3, [pc, #60]	@ (80139b8 <tcp_seg_copy+0x4c>)
 801397c:	f240 6282 	movw	r2, #1666	@ 0x682
 8013980:	490e      	ldr	r1, [pc, #56]	@ (80139bc <tcp_seg_copy+0x50>)
 8013982:	480f      	ldr	r0, [pc, #60]	@ (80139c0 <tcp_seg_copy+0x54>)
 8013984:	f009 ff46 	bl	801d814 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013988:	2003      	movs	r0, #3
 801398a:	f7fd fe1f 	bl	80115cc <memp_malloc>
 801398e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d101      	bne.n	801399a <tcp_seg_copy+0x2e>
    return NULL;
 8013996:	2300      	movs	r3, #0
 8013998:	e00a      	b.n	80139b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801399a:	2210      	movs	r2, #16
 801399c:	6879      	ldr	r1, [r7, #4]
 801399e:	68f8      	ldr	r0, [r7, #12]
 80139a0:	f00a f9ad 	bl	801dcfe <memcpy>
  pbuf_ref(cseg->p);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe fddb 	bl	8012564 <pbuf_ref>
  return cseg;
 80139ae:	68fb      	ldr	r3, [r7, #12]
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3710      	adds	r7, #16
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	08020954 	.word	0x08020954
 80139bc:	08020ea8 	.word	0x08020ea8
 80139c0:	08020998 	.word	0x08020998

080139c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
 80139d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d109      	bne.n	80139ec <tcp_recv_null+0x28>
 80139d8:	4b12      	ldr	r3, [pc, #72]	@ (8013a24 <tcp_recv_null+0x60>)
 80139da:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80139de:	4912      	ldr	r1, [pc, #72]	@ (8013a28 <tcp_recv_null+0x64>)
 80139e0:	4812      	ldr	r0, [pc, #72]	@ (8013a2c <tcp_recv_null+0x68>)
 80139e2:	f009 ff17 	bl	801d814 <iprintf>
 80139e6:	f06f 030f 	mvn.w	r3, #15
 80139ea:	e016      	b.n	8013a1a <tcp_recv_null+0x56>

  if (p != NULL) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d009      	beq.n	8013a06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	891b      	ldrh	r3, [r3, #8]
 80139f6:	4619      	mov	r1, r3
 80139f8:	68b8      	ldr	r0, [r7, #8]
 80139fa:	f7ff fb17 	bl	801302c <tcp_recved>
    pbuf_free(p);
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7fe fd0a 	bl	8012418 <pbuf_free>
 8013a04:	e008      	b.n	8013a18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d104      	bne.n	8013a18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013a0e:	68b8      	ldr	r0, [r7, #8]
 8013a10:	f7ff f9bc 	bl	8012d8c <tcp_close>
 8013a14:	4603      	mov	r3, r0
 8013a16:	e000      	b.n	8013a1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013a18:	2300      	movs	r3, #0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3710      	adds	r7, #16
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	08020954 	.word	0x08020954
 8013a28:	08020ec4 	.word	0x08020ec4
 8013a2c:	08020998 	.word	0x08020998

08013a30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b086      	sub	sp, #24
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	4603      	mov	r3, r0
 8013a38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	db01      	blt.n	8013a46 <tcp_kill_prio+0x16>
 8013a42:	79fb      	ldrb	r3, [r7, #7]
 8013a44:	e000      	b.n	8013a48 <tcp_kill_prio+0x18>
 8013a46:	237f      	movs	r3, #127	@ 0x7f
 8013a48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013a4a:	7afb      	ldrb	r3, [r7, #11]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d034      	beq.n	8013aba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013a50:	7afb      	ldrb	r3, [r7, #11]
 8013a52:	3b01      	subs	r3, #1
 8013a54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a5e:	4b19      	ldr	r3, [pc, #100]	@ (8013ac4 <tcp_kill_prio+0x94>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	617b      	str	r3, [r7, #20]
 8013a64:	e01f      	b.n	8013aa6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	7d5b      	ldrb	r3, [r3, #21]
 8013a6a:	7afa      	ldrb	r2, [r7, #11]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d80c      	bhi.n	8013a8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013a74:	7afa      	ldrb	r2, [r7, #11]
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d112      	bne.n	8013aa0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013a7a:	4b13      	ldr	r3, [pc, #76]	@ (8013ac8 <tcp_kill_prio+0x98>)
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	6a1b      	ldr	r3, [r3, #32]
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d80a      	bhi.n	8013aa0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8013ac8 <tcp_kill_prio+0x98>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	6a1b      	ldr	r3, [r3, #32]
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	7d5b      	ldrb	r3, [r3, #21]
 8013a9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d1dc      	bne.n	8013a66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d004      	beq.n	8013abc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013ab2:	6938      	ldr	r0, [r7, #16]
 8013ab4:	f7ff fa54 	bl	8012f60 <tcp_abort>
 8013ab8:	e000      	b.n	8013abc <tcp_kill_prio+0x8c>
    return;
 8013aba:	bf00      	nop
  }
}
 8013abc:	3718      	adds	r7, #24
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	2400cc40 	.word	0x2400cc40
 8013ac8:	2400cc34 	.word	0x2400cc34

08013acc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b086      	sub	sp, #24
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013ad6:	79fb      	ldrb	r3, [r7, #7]
 8013ad8:	2b08      	cmp	r3, #8
 8013ada:	d009      	beq.n	8013af0 <tcp_kill_state+0x24>
 8013adc:	79fb      	ldrb	r3, [r7, #7]
 8013ade:	2b09      	cmp	r3, #9
 8013ae0:	d006      	beq.n	8013af0 <tcp_kill_state+0x24>
 8013ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b4c <tcp_kill_state+0x80>)
 8013ae4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013ae8:	4919      	ldr	r1, [pc, #100]	@ (8013b50 <tcp_kill_state+0x84>)
 8013aea:	481a      	ldr	r0, [pc, #104]	@ (8013b54 <tcp_kill_state+0x88>)
 8013aec:	f009 fe92 	bl	801d814 <iprintf>

  inactivity = 0;
 8013af0:	2300      	movs	r3, #0
 8013af2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013af4:	2300      	movs	r3, #0
 8013af6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013af8:	4b17      	ldr	r3, [pc, #92]	@ (8013b58 <tcp_kill_state+0x8c>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	617b      	str	r3, [r7, #20]
 8013afe:	e017      	b.n	8013b30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	7d1b      	ldrb	r3, [r3, #20]
 8013b04:	79fa      	ldrb	r2, [r7, #7]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d10f      	bne.n	8013b2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013b0a:	4b14      	ldr	r3, [pc, #80]	@ (8013b5c <tcp_kill_state+0x90>)
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	6a1b      	ldr	r3, [r3, #32]
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d807      	bhi.n	8013b2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013b1a:	4b10      	ldr	r3, [pc, #64]	@ (8013b5c <tcp_kill_state+0x90>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	6a1b      	ldr	r3, [r3, #32]
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d1e4      	bne.n	8013b00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d003      	beq.n	8013b44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013b3c:	2100      	movs	r1, #0
 8013b3e:	6938      	ldr	r0, [r7, #16]
 8013b40:	f7ff f950 	bl	8012de4 <tcp_abandon>
  }
}
 8013b44:	bf00      	nop
 8013b46:	3718      	adds	r7, #24
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	08020954 	.word	0x08020954
 8013b50:	08020ee0 	.word	0x08020ee0
 8013b54:	08020998 	.word	0x08020998
 8013b58:	2400cc40 	.word	0x2400cc40
 8013b5c:	2400cc34 	.word	0x2400cc34

08013b60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013b66:	2300      	movs	r3, #0
 8013b68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b6e:	4b12      	ldr	r3, [pc, #72]	@ (8013bb8 <tcp_kill_timewait+0x58>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	60fb      	str	r3, [r7, #12]
 8013b74:	e012      	b.n	8013b9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013b76:	4b11      	ldr	r3, [pc, #68]	@ (8013bbc <tcp_kill_timewait+0x5c>)
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	6a1b      	ldr	r3, [r3, #32]
 8013b7e:	1ad3      	subs	r3, r2, r3
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d807      	bhi.n	8013b96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013b86:	4b0d      	ldr	r3, [pc, #52]	@ (8013bbc <tcp_kill_timewait+0x5c>)
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	6a1b      	ldr	r3, [r3, #32]
 8013b8e:	1ad3      	subs	r3, r2, r3
 8013b90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	60fb      	str	r3, [r7, #12]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d1e9      	bne.n	8013b76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d002      	beq.n	8013bae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013ba8:	68b8      	ldr	r0, [r7, #8]
 8013baa:	f7ff f9d9 	bl	8012f60 <tcp_abort>
  }
}
 8013bae:	bf00      	nop
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	2400cc44 	.word	0x2400cc44
 8013bbc:	2400cc34 	.word	0x2400cc34

08013bc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013bc6:	4b10      	ldr	r3, [pc, #64]	@ (8013c08 <tcp_handle_closepend+0x48>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013bcc:	e014      	b.n	8013bf8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	8b5b      	ldrh	r3, [r3, #26]
 8013bd8:	f003 0308 	and.w	r3, r3, #8
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d009      	beq.n	8013bf4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	8b5b      	ldrh	r3, [r3, #26]
 8013be4:	f023 0308 	bic.w	r3, r3, #8
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7ff f862 	bl	8012cb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1e7      	bne.n	8013bce <tcp_handle_closepend+0xe>
  }
}
 8013bfe:	bf00      	nop
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	2400cc40 	.word	0x2400cc40

08013c0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	4603      	mov	r3, r0
 8013c14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013c16:	2001      	movs	r0, #1
 8013c18:	f7fd fcd8 	bl	80115cc <memp_malloc>
 8013c1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d126      	bne.n	8013c72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013c24:	f7ff ffcc 	bl	8013bc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013c28:	f7ff ff9a 	bl	8013b60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013c2c:	2001      	movs	r0, #1
 8013c2e:	f7fd fccd 	bl	80115cc <memp_malloc>
 8013c32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d11b      	bne.n	8013c72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013c3a:	2009      	movs	r0, #9
 8013c3c:	f7ff ff46 	bl	8013acc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013c40:	2001      	movs	r0, #1
 8013c42:	f7fd fcc3 	bl	80115cc <memp_malloc>
 8013c46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d111      	bne.n	8013c72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013c4e:	2008      	movs	r0, #8
 8013c50:	f7ff ff3c 	bl	8013acc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013c54:	2001      	movs	r0, #1
 8013c56:	f7fd fcb9 	bl	80115cc <memp_malloc>
 8013c5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d107      	bne.n	8013c72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013c62:	79fb      	ldrb	r3, [r7, #7]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7ff fee3 	bl	8013a30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013c6a:	2001      	movs	r0, #1
 8013c6c:	f7fd fcae 	bl	80115cc <memp_malloc>
 8013c70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d03f      	beq.n	8013cf8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013c78:	229c      	movs	r2, #156	@ 0x9c
 8013c7a:	2100      	movs	r1, #0
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f009 ff6f 	bl	801db60 <memset>
    pcb->prio = prio;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	79fa      	ldrb	r2, [r7, #7]
 8013c86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013c8e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	22ff      	movs	r2, #255	@ 0xff
 8013ca6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013cae:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2206      	movs	r2, #6
 8013cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2206      	movs	r2, #6
 8013cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013cc4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013cce:	4b0d      	ldr	r3, [pc, #52]	@ (8013d04 <tcp_alloc+0xf8>)
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8013d08 <tcp_alloc+0xfc>)
 8013cd8:	781a      	ldrb	r2, [r3, #0]
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013ce4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	4a08      	ldr	r2, [pc, #32]	@ (8013d0c <tcp_alloc+0x100>)
 8013cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	4a07      	ldr	r2, [pc, #28]	@ (8013d10 <tcp_alloc+0x104>)
 8013cf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3710      	adds	r7, #16
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	2400cc34 	.word	0x2400cc34
 8013d08:	2400cc4a 	.word	0x2400cc4a
 8013d0c:	080139c5 	.word	0x080139c5
 8013d10:	006ddd00 	.word	0x006ddd00

08013d14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d107      	bne.n	8013d32 <tcp_pcb_purge+0x1e>
 8013d22:	4b21      	ldr	r3, [pc, #132]	@ (8013da8 <tcp_pcb_purge+0x94>)
 8013d24:	f640 0251 	movw	r2, #2129	@ 0x851
 8013d28:	4920      	ldr	r1, [pc, #128]	@ (8013dac <tcp_pcb_purge+0x98>)
 8013d2a:	4821      	ldr	r0, [pc, #132]	@ (8013db0 <tcp_pcb_purge+0x9c>)
 8013d2c:	f009 fd72 	bl	801d814 <iprintf>
 8013d30:	e037      	b.n	8013da2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	7d1b      	ldrb	r3, [r3, #20]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d033      	beq.n	8013da2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013d3e:	2b0a      	cmp	r3, #10
 8013d40:	d02f      	beq.n	8013da2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	d02b      	beq.n	8013da2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d007      	beq.n	8013d62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fe fb5e 	bl	8012418 <pbuf_free>
      pcb->refused_data = NULL;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d002      	beq.n	8013d70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 f986 	bl	801407c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d76:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7ff fdc7 	bl	8013910 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff fdc2 	bl	8013910 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	08020954 	.word	0x08020954
 8013dac:	08020fa0 	.word	0x08020fa0
 8013db0:	08020998 	.word	0x08020998

08013db4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d106      	bne.n	8013dd2 <tcp_pcb_remove+0x1e>
 8013dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8013ec0 <tcp_pcb_remove+0x10c>)
 8013dc6:	f640 0283 	movw	r2, #2179	@ 0x883
 8013dca:	493e      	ldr	r1, [pc, #248]	@ (8013ec4 <tcp_pcb_remove+0x110>)
 8013dcc:	483e      	ldr	r0, [pc, #248]	@ (8013ec8 <tcp_pcb_remove+0x114>)
 8013dce:	f009 fd21 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d106      	bne.n	8013de6 <tcp_pcb_remove+0x32>
 8013dd8:	4b39      	ldr	r3, [pc, #228]	@ (8013ec0 <tcp_pcb_remove+0x10c>)
 8013dda:	f640 0284 	movw	r2, #2180	@ 0x884
 8013dde:	493b      	ldr	r1, [pc, #236]	@ (8013ecc <tcp_pcb_remove+0x118>)
 8013de0:	4839      	ldr	r0, [pc, #228]	@ (8013ec8 <tcp_pcb_remove+0x114>)
 8013de2:	f009 fd17 	bl	801d814 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d105      	bne.n	8013dfc <tcp_pcb_remove+0x48>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	68da      	ldr	r2, [r3, #12]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	601a      	str	r2, [r3, #0]
 8013dfa:	e013      	b.n	8013e24 <tcp_pcb_remove+0x70>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	60fb      	str	r3, [r7, #12]
 8013e02:	e00c      	b.n	8013e1e <tcp_pcb_remove+0x6a>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	683a      	ldr	r2, [r7, #0]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d104      	bne.n	8013e18 <tcp_pcb_remove+0x64>
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	68da      	ldr	r2, [r3, #12]
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	60da      	str	r2, [r3, #12]
 8013e16:	e005      	b.n	8013e24 <tcp_pcb_remove+0x70>
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	60fb      	str	r3, [r7, #12]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d1ef      	bne.n	8013e04 <tcp_pcb_remove+0x50>
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	2200      	movs	r2, #0
 8013e28:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013e2a:	6838      	ldr	r0, [r7, #0]
 8013e2c:	f7ff ff72 	bl	8013d14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	7d1b      	ldrb	r3, [r3, #20]
 8013e34:	2b0a      	cmp	r3, #10
 8013e36:	d013      	beq.n	8013e60 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d00f      	beq.n	8013e60 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	8b5b      	ldrh	r3, [r3, #26]
 8013e44:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d009      	beq.n	8013e60 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	8b5b      	ldrh	r3, [r3, #26]
 8013e50:	f043 0302 	orr.w	r3, r3, #2
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013e5a:	6838      	ldr	r0, [r7, #0]
 8013e5c:	f002 ff68 	bl	8016d30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	7d1b      	ldrb	r3, [r3, #20]
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d020      	beq.n	8013eaa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d006      	beq.n	8013e7e <tcp_pcb_remove+0xca>
 8013e70:	4b13      	ldr	r3, [pc, #76]	@ (8013ec0 <tcp_pcb_remove+0x10c>)
 8013e72:	f640 0293 	movw	r2, #2195	@ 0x893
 8013e76:	4916      	ldr	r1, [pc, #88]	@ (8013ed0 <tcp_pcb_remove+0x11c>)
 8013e78:	4813      	ldr	r0, [pc, #76]	@ (8013ec8 <tcp_pcb_remove+0x114>)
 8013e7a:	f009 fccb 	bl	801d814 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d006      	beq.n	8013e94 <tcp_pcb_remove+0xe0>
 8013e86:	4b0e      	ldr	r3, [pc, #56]	@ (8013ec0 <tcp_pcb_remove+0x10c>)
 8013e88:	f640 0294 	movw	r2, #2196	@ 0x894
 8013e8c:	4911      	ldr	r1, [pc, #68]	@ (8013ed4 <tcp_pcb_remove+0x120>)
 8013e8e:	480e      	ldr	r0, [pc, #56]	@ (8013ec8 <tcp_pcb_remove+0x114>)
 8013e90:	f009 fcc0 	bl	801d814 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d006      	beq.n	8013eaa <tcp_pcb_remove+0xf6>
 8013e9c:	4b08      	ldr	r3, [pc, #32]	@ (8013ec0 <tcp_pcb_remove+0x10c>)
 8013e9e:	f640 0296 	movw	r2, #2198	@ 0x896
 8013ea2:	490d      	ldr	r1, [pc, #52]	@ (8013ed8 <tcp_pcb_remove+0x124>)
 8013ea4:	4808      	ldr	r0, [pc, #32]	@ (8013ec8 <tcp_pcb_remove+0x114>)
 8013ea6:	f009 fcb5 	bl	801d814 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	2200      	movs	r2, #0
 8013eae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013eb6:	bf00      	nop
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	08020954 	.word	0x08020954
 8013ec4:	08020fbc 	.word	0x08020fbc
 8013ec8:	08020998 	.word	0x08020998
 8013ecc:	08020fd8 	.word	0x08020fd8
 8013ed0:	08020ff8 	.word	0x08020ff8
 8013ed4:	08021010 	.word	0x08021010
 8013ed8:	0802102c 	.word	0x0802102c

08013edc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d106      	bne.n	8013ef8 <tcp_next_iss+0x1c>
 8013eea:	4b0a      	ldr	r3, [pc, #40]	@ (8013f14 <tcp_next_iss+0x38>)
 8013eec:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013ef0:	4909      	ldr	r1, [pc, #36]	@ (8013f18 <tcp_next_iss+0x3c>)
 8013ef2:	480a      	ldr	r0, [pc, #40]	@ (8013f1c <tcp_next_iss+0x40>)
 8013ef4:	f009 fc8e 	bl	801d814 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013ef8:	4b09      	ldr	r3, [pc, #36]	@ (8013f20 <tcp_next_iss+0x44>)
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	4b09      	ldr	r3, [pc, #36]	@ (8013f24 <tcp_next_iss+0x48>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4413      	add	r3, r2
 8013f02:	4a07      	ldr	r2, [pc, #28]	@ (8013f20 <tcp_next_iss+0x44>)
 8013f04:	6013      	str	r3, [r2, #0]
  return iss;
 8013f06:	4b06      	ldr	r3, [pc, #24]	@ (8013f20 <tcp_next_iss+0x44>)
 8013f08:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	08020954 	.word	0x08020954
 8013f18:	08021044 	.word	0x08021044
 8013f1c:	08020998 	.word	0x08020998
 8013f20:	2400002c 	.word	0x2400002c
 8013f24:	2400cc34 	.word	0x2400cc34

08013f28 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b086      	sub	sp, #24
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	4603      	mov	r3, r0
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d106      	bne.n	8013f4a <tcp_eff_send_mss_netif+0x22>
 8013f3c:	4b14      	ldr	r3, [pc, #80]	@ (8013f90 <tcp_eff_send_mss_netif+0x68>)
 8013f3e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013f42:	4914      	ldr	r1, [pc, #80]	@ (8013f94 <tcp_eff_send_mss_netif+0x6c>)
 8013f44:	4814      	ldr	r0, [pc, #80]	@ (8013f98 <tcp_eff_send_mss_netif+0x70>)
 8013f46:	f009 fc65 	bl	801d814 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d101      	bne.n	8013f54 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	e019      	b.n	8013f88 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f58:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013f5a:	8afb      	ldrh	r3, [r7, #22]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d012      	beq.n	8013f86 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013f60:	2328      	movs	r3, #40	@ 0x28
 8013f62:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013f64:	8afa      	ldrh	r2, [r7, #22]
 8013f66:	8abb      	ldrh	r3, [r7, #20]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d904      	bls.n	8013f76 <tcp_eff_send_mss_netif+0x4e>
 8013f6c:	8afa      	ldrh	r2, [r7, #22]
 8013f6e:	8abb      	ldrh	r3, [r7, #20]
 8013f70:	1ad3      	subs	r3, r2, r3
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	e000      	b.n	8013f78 <tcp_eff_send_mss_netif+0x50>
 8013f76:	2300      	movs	r3, #0
 8013f78:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013f7a:	8a7a      	ldrh	r2, [r7, #18]
 8013f7c:	89fb      	ldrh	r3, [r7, #14]
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	bf28      	it	cs
 8013f82:	4613      	movcs	r3, r2
 8013f84:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013f86:	89fb      	ldrh	r3, [r7, #14]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3718      	adds	r7, #24
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	08020954 	.word	0x08020954
 8013f94:	08021060 	.word	0x08021060
 8013f98:	08020998 	.word	0x08020998

08013f9c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d119      	bne.n	8013fe4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013fb0:	4b10      	ldr	r3, [pc, #64]	@ (8013ff4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013fb2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013fb6:	4910      	ldr	r1, [pc, #64]	@ (8013ff8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013fb8:	4810      	ldr	r0, [pc, #64]	@ (8013ffc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013fba:	f009 fc2b 	bl	801d814 <iprintf>

  while (pcb != NULL) {
 8013fbe:	e011      	b.n	8013fe4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681a      	ldr	r2, [r3, #0]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d108      	bne.n	8013fde <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f7fe ffc4 	bl	8012f60 <tcp_abort>
      pcb = next;
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	60fb      	str	r3, [r7, #12]
 8013fdc:	e002      	b.n	8013fe4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	68db      	ldr	r3, [r3, #12]
 8013fe2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d1ea      	bne.n	8013fc0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013fea:	bf00      	nop
 8013fec:	bf00      	nop
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	08020954 	.word	0x08020954
 8013ff8:	08021088 	.word	0x08021088
 8013ffc:	08020998 	.word	0x08020998

08014000 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d02a      	beq.n	8014066 <tcp_netif_ip_addr_changed+0x66>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d026      	beq.n	8014066 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014018:	4b15      	ldr	r3, [pc, #84]	@ (8014070 <tcp_netif_ip_addr_changed+0x70>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4619      	mov	r1, r3
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f7ff ffbc 	bl	8013f9c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014024:	4b13      	ldr	r3, [pc, #76]	@ (8014074 <tcp_netif_ip_addr_changed+0x74>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4619      	mov	r1, r3
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7ff ffb6 	bl	8013f9c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d017      	beq.n	8014066 <tcp_netif_ip_addr_changed+0x66>
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d013      	beq.n	8014066 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801403e:	4b0e      	ldr	r3, [pc, #56]	@ (8014078 <tcp_netif_ip_addr_changed+0x78>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	60fb      	str	r3, [r7, #12]
 8014044:	e00c      	b.n	8014060 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	429a      	cmp	r2, r3
 8014050:	d103      	bne.n	801405a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	60fb      	str	r3, [r7, #12]
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1ef      	bne.n	8014046 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014066:	bf00      	nop
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	2400cc40 	.word	0x2400cc40
 8014074:	2400cc38 	.word	0x2400cc38
 8014078:	2400cc3c 	.word	0x2400cc3c

0801407c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014088:	2b00      	cmp	r3, #0
 801408a:	d007      	beq.n	801409c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014090:	4618      	mov	r0, r3
 8014092:	f7ff fc3d 	bl	8013910 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2200      	movs	r2, #0
 801409a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801409c:	bf00      	nop
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80140a4:	b590      	push	{r4, r7, lr}
 80140a6:	b08d      	sub	sp, #52	@ 0x34
 80140a8:	af04      	add	r7, sp, #16
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d105      	bne.n	80140c0 <tcp_input+0x1c>
 80140b4:	4b9b      	ldr	r3, [pc, #620]	@ (8014324 <tcp_input+0x280>)
 80140b6:	2283      	movs	r2, #131	@ 0x83
 80140b8:	499b      	ldr	r1, [pc, #620]	@ (8014328 <tcp_input+0x284>)
 80140ba:	489c      	ldr	r0, [pc, #624]	@ (801432c <tcp_input+0x288>)
 80140bc:	f009 fbaa 	bl	801d814 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	4a9a      	ldr	r2, [pc, #616]	@ (8014330 <tcp_input+0x28c>)
 80140c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	895b      	ldrh	r3, [r3, #10]
 80140cc:	2b13      	cmp	r3, #19
 80140ce:	f240 83d1 	bls.w	8014874 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140d2:	4b98      	ldr	r3, [pc, #608]	@ (8014334 <tcp_input+0x290>)
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	4a97      	ldr	r2, [pc, #604]	@ (8014334 <tcp_input+0x290>)
 80140d8:	6812      	ldr	r2, [r2, #0]
 80140da:	4611      	mov	r1, r2
 80140dc:	4618      	mov	r0, r3
 80140de:	f007 fe19 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	f040 83c7 	bne.w	8014878 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80140ea:	4b92      	ldr	r3, [pc, #584]	@ (8014334 <tcp_input+0x290>)
 80140ec:	695b      	ldr	r3, [r3, #20]
 80140ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140f2:	2be0      	cmp	r3, #224	@ 0xe0
 80140f4:	f000 83c0 	beq.w	8014878 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80140f8:	4b8d      	ldr	r3, [pc, #564]	@ (8014330 <tcp_input+0x28c>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	899b      	ldrh	r3, [r3, #12]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	4618      	mov	r0, r3
 8014102:	f7fc fcd3 	bl	8010aac <lwip_htons>
 8014106:	4603      	mov	r3, r0
 8014108:	0b1b      	lsrs	r3, r3, #12
 801410a:	b29b      	uxth	r3, r3
 801410c:	b2db      	uxtb	r3, r3
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014112:	7cbb      	ldrb	r3, [r7, #18]
 8014114:	2b13      	cmp	r3, #19
 8014116:	f240 83b1 	bls.w	801487c <tcp_input+0x7d8>
 801411a:	7cbb      	ldrb	r3, [r7, #18]
 801411c:	b29a      	uxth	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	891b      	ldrh	r3, [r3, #8]
 8014122:	429a      	cmp	r2, r3
 8014124:	f200 83aa 	bhi.w	801487c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014128:	7cbb      	ldrb	r3, [r7, #18]
 801412a:	b29b      	uxth	r3, r3
 801412c:	3b14      	subs	r3, #20
 801412e:	b29a      	uxth	r2, r3
 8014130:	4b81      	ldr	r3, [pc, #516]	@ (8014338 <tcp_input+0x294>)
 8014132:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014134:	4b81      	ldr	r3, [pc, #516]	@ (801433c <tcp_input+0x298>)
 8014136:	2200      	movs	r2, #0
 8014138:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	895a      	ldrh	r2, [r3, #10]
 801413e:	7cbb      	ldrb	r3, [r7, #18]
 8014140:	b29b      	uxth	r3, r3
 8014142:	429a      	cmp	r2, r3
 8014144:	d309      	bcc.n	801415a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014146:	4b7c      	ldr	r3, [pc, #496]	@ (8014338 <tcp_input+0x294>)
 8014148:	881a      	ldrh	r2, [r3, #0]
 801414a:	4b7d      	ldr	r3, [pc, #500]	@ (8014340 <tcp_input+0x29c>)
 801414c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801414e:	7cbb      	ldrb	r3, [r7, #18]
 8014150:	4619      	mov	r1, r3
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7fe f8da 	bl	801230c <pbuf_remove_header>
 8014158:	e04e      	b.n	80141f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d105      	bne.n	801416e <tcp_input+0xca>
 8014162:	4b70      	ldr	r3, [pc, #448]	@ (8014324 <tcp_input+0x280>)
 8014164:	22c2      	movs	r2, #194	@ 0xc2
 8014166:	4977      	ldr	r1, [pc, #476]	@ (8014344 <tcp_input+0x2a0>)
 8014168:	4870      	ldr	r0, [pc, #448]	@ (801432c <tcp_input+0x288>)
 801416a:	f009 fb53 	bl	801d814 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801416e:	2114      	movs	r1, #20
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7fe f8cb 	bl	801230c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	895a      	ldrh	r2, [r3, #10]
 801417a:	4b71      	ldr	r3, [pc, #452]	@ (8014340 <tcp_input+0x29c>)
 801417c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801417e:	4b6e      	ldr	r3, [pc, #440]	@ (8014338 <tcp_input+0x294>)
 8014180:	881a      	ldrh	r2, [r3, #0]
 8014182:	4b6f      	ldr	r3, [pc, #444]	@ (8014340 <tcp_input+0x29c>)
 8014184:	881b      	ldrh	r3, [r3, #0]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801418a:	4b6d      	ldr	r3, [pc, #436]	@ (8014340 <tcp_input+0x29c>)
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	4619      	mov	r1, r3
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7fe f8bb 	bl	801230c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	895b      	ldrh	r3, [r3, #10]
 801419c:	8a3a      	ldrh	r2, [r7, #16]
 801419e:	429a      	cmp	r2, r3
 80141a0:	f200 836e 	bhi.w	8014880 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	4a64      	ldr	r2, [pc, #400]	@ (801433c <tcp_input+0x298>)
 80141ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	8a3a      	ldrh	r2, [r7, #16]
 80141b4:	4611      	mov	r1, r2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7fe f8a8 	bl	801230c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	891a      	ldrh	r2, [r3, #8]
 80141c0:	8a3b      	ldrh	r3, [r7, #16]
 80141c2:	1ad3      	subs	r3, r2, r3
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	895b      	ldrh	r3, [r3, #10]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d005      	beq.n	80141de <tcp_input+0x13a>
 80141d2:	4b54      	ldr	r3, [pc, #336]	@ (8014324 <tcp_input+0x280>)
 80141d4:	22df      	movs	r2, #223	@ 0xdf
 80141d6:	495c      	ldr	r1, [pc, #368]	@ (8014348 <tcp_input+0x2a4>)
 80141d8:	4854      	ldr	r0, [pc, #336]	@ (801432c <tcp_input+0x288>)
 80141da:	f009 fb1b 	bl	801d814 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	891a      	ldrh	r2, [r3, #8]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	891b      	ldrh	r3, [r3, #8]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d005      	beq.n	80141f8 <tcp_input+0x154>
 80141ec:	4b4d      	ldr	r3, [pc, #308]	@ (8014324 <tcp_input+0x280>)
 80141ee:	22e0      	movs	r2, #224	@ 0xe0
 80141f0:	4956      	ldr	r1, [pc, #344]	@ (801434c <tcp_input+0x2a8>)
 80141f2:	484e      	ldr	r0, [pc, #312]	@ (801432c <tcp_input+0x288>)
 80141f4:	f009 fb0e 	bl	801d814 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80141f8:	4b4d      	ldr	r3, [pc, #308]	@ (8014330 <tcp_input+0x28c>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	881b      	ldrh	r3, [r3, #0]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4a4b      	ldr	r2, [pc, #300]	@ (8014330 <tcp_input+0x28c>)
 8014202:	6814      	ldr	r4, [r2, #0]
 8014204:	4618      	mov	r0, r3
 8014206:	f7fc fc51 	bl	8010aac <lwip_htons>
 801420a:	4603      	mov	r3, r0
 801420c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801420e:	4b48      	ldr	r3, [pc, #288]	@ (8014330 <tcp_input+0x28c>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	885b      	ldrh	r3, [r3, #2]
 8014214:	b29b      	uxth	r3, r3
 8014216:	4a46      	ldr	r2, [pc, #280]	@ (8014330 <tcp_input+0x28c>)
 8014218:	6814      	ldr	r4, [r2, #0]
 801421a:	4618      	mov	r0, r3
 801421c:	f7fc fc46 	bl	8010aac <lwip_htons>
 8014220:	4603      	mov	r3, r0
 8014222:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014224:	4b42      	ldr	r3, [pc, #264]	@ (8014330 <tcp_input+0x28c>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	4a41      	ldr	r2, [pc, #260]	@ (8014330 <tcp_input+0x28c>)
 801422c:	6814      	ldr	r4, [r2, #0]
 801422e:	4618      	mov	r0, r3
 8014230:	f7fc fc51 	bl	8010ad6 <lwip_htonl>
 8014234:	4603      	mov	r3, r0
 8014236:	6063      	str	r3, [r4, #4]
 8014238:	6863      	ldr	r3, [r4, #4]
 801423a:	4a45      	ldr	r2, [pc, #276]	@ (8014350 <tcp_input+0x2ac>)
 801423c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801423e:	4b3c      	ldr	r3, [pc, #240]	@ (8014330 <tcp_input+0x28c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	4a3a      	ldr	r2, [pc, #232]	@ (8014330 <tcp_input+0x28c>)
 8014246:	6814      	ldr	r4, [r2, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	f7fc fc44 	bl	8010ad6 <lwip_htonl>
 801424e:	4603      	mov	r3, r0
 8014250:	60a3      	str	r3, [r4, #8]
 8014252:	68a3      	ldr	r3, [r4, #8]
 8014254:	4a3f      	ldr	r2, [pc, #252]	@ (8014354 <tcp_input+0x2b0>)
 8014256:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014258:	4b35      	ldr	r3, [pc, #212]	@ (8014330 <tcp_input+0x28c>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	89db      	ldrh	r3, [r3, #14]
 801425e:	b29b      	uxth	r3, r3
 8014260:	4a33      	ldr	r2, [pc, #204]	@ (8014330 <tcp_input+0x28c>)
 8014262:	6814      	ldr	r4, [r2, #0]
 8014264:	4618      	mov	r0, r3
 8014266:	f7fc fc21 	bl	8010aac <lwip_htons>
 801426a:	4603      	mov	r3, r0
 801426c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801426e:	4b30      	ldr	r3, [pc, #192]	@ (8014330 <tcp_input+0x28c>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	899b      	ldrh	r3, [r3, #12]
 8014274:	b29b      	uxth	r3, r3
 8014276:	4618      	mov	r0, r3
 8014278:	f7fc fc18 	bl	8010aac <lwip_htons>
 801427c:	4603      	mov	r3, r0
 801427e:	b2db      	uxtb	r3, r3
 8014280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014284:	b2da      	uxtb	r2, r3
 8014286:	4b34      	ldr	r3, [pc, #208]	@ (8014358 <tcp_input+0x2b4>)
 8014288:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	891a      	ldrh	r2, [r3, #8]
 801428e:	4b33      	ldr	r3, [pc, #204]	@ (801435c <tcp_input+0x2b8>)
 8014290:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014292:	4b31      	ldr	r3, [pc, #196]	@ (8014358 <tcp_input+0x2b4>)
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	f003 0303 	and.w	r3, r3, #3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00c      	beq.n	80142b8 <tcp_input+0x214>
    tcplen++;
 801429e:	4b2f      	ldr	r3, [pc, #188]	@ (801435c <tcp_input+0x2b8>)
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	3301      	adds	r3, #1
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	4b2d      	ldr	r3, [pc, #180]	@ (801435c <tcp_input+0x2b8>)
 80142a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	891a      	ldrh	r2, [r3, #8]
 80142ae:	4b2b      	ldr	r3, [pc, #172]	@ (801435c <tcp_input+0x2b8>)
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	f200 82e6 	bhi.w	8014884 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80142b8:	2300      	movs	r3, #0
 80142ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80142bc:	4b28      	ldr	r3, [pc, #160]	@ (8014360 <tcp_input+0x2bc>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	61fb      	str	r3, [r7, #28]
 80142c2:	e09d      	b.n	8014400 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	7d1b      	ldrb	r3, [r3, #20]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d105      	bne.n	80142d8 <tcp_input+0x234>
 80142cc:	4b15      	ldr	r3, [pc, #84]	@ (8014324 <tcp_input+0x280>)
 80142ce:	22fb      	movs	r2, #251	@ 0xfb
 80142d0:	4924      	ldr	r1, [pc, #144]	@ (8014364 <tcp_input+0x2c0>)
 80142d2:	4816      	ldr	r0, [pc, #88]	@ (801432c <tcp_input+0x288>)
 80142d4:	f009 fa9e 	bl	801d814 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80142d8:	69fb      	ldr	r3, [r7, #28]
 80142da:	7d1b      	ldrb	r3, [r3, #20]
 80142dc:	2b0a      	cmp	r3, #10
 80142de:	d105      	bne.n	80142ec <tcp_input+0x248>
 80142e0:	4b10      	ldr	r3, [pc, #64]	@ (8014324 <tcp_input+0x280>)
 80142e2:	22fc      	movs	r2, #252	@ 0xfc
 80142e4:	4920      	ldr	r1, [pc, #128]	@ (8014368 <tcp_input+0x2c4>)
 80142e6:	4811      	ldr	r0, [pc, #68]	@ (801432c <tcp_input+0x288>)
 80142e8:	f009 fa94 	bl	801d814 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	7d1b      	ldrb	r3, [r3, #20]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d105      	bne.n	8014300 <tcp_input+0x25c>
 80142f4:	4b0b      	ldr	r3, [pc, #44]	@ (8014324 <tcp_input+0x280>)
 80142f6:	22fd      	movs	r2, #253	@ 0xfd
 80142f8:	491c      	ldr	r1, [pc, #112]	@ (801436c <tcp_input+0x2c8>)
 80142fa:	480c      	ldr	r0, [pc, #48]	@ (801432c <tcp_input+0x288>)
 80142fc:	f009 fa8a 	bl	801d814 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	7a1b      	ldrb	r3, [r3, #8]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d033      	beq.n	8014370 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	7a1a      	ldrb	r2, [r3, #8]
 801430c:	4b09      	ldr	r3, [pc, #36]	@ (8014334 <tcp_input+0x290>)
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014314:	3301      	adds	r3, #1
 8014316:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014318:	429a      	cmp	r2, r3
 801431a:	d029      	beq.n	8014370 <tcp_input+0x2cc>
      prev = pcb;
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	61bb      	str	r3, [r7, #24]
      continue;
 8014320:	e06b      	b.n	80143fa <tcp_input+0x356>
 8014322:	bf00      	nop
 8014324:	080210bc 	.word	0x080210bc
 8014328:	080210f0 	.word	0x080210f0
 801432c:	08021108 	.word	0x08021108
 8014330:	2400cc5c 	.word	0x2400cc5c
 8014334:	24009b14 	.word	0x24009b14
 8014338:	2400cc60 	.word	0x2400cc60
 801433c:	2400cc64 	.word	0x2400cc64
 8014340:	2400cc62 	.word	0x2400cc62
 8014344:	08021130 	.word	0x08021130
 8014348:	08021140 	.word	0x08021140
 801434c:	0802114c 	.word	0x0802114c
 8014350:	2400cc6c 	.word	0x2400cc6c
 8014354:	2400cc70 	.word	0x2400cc70
 8014358:	2400cc78 	.word	0x2400cc78
 801435c:	2400cc76 	.word	0x2400cc76
 8014360:	2400cc40 	.word	0x2400cc40
 8014364:	0802116c 	.word	0x0802116c
 8014368:	08021194 	.word	0x08021194
 801436c:	080211c0 	.word	0x080211c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8014370:	69fb      	ldr	r3, [r7, #28]
 8014372:	8b1a      	ldrh	r2, [r3, #24]
 8014374:	4b72      	ldr	r3, [pc, #456]	@ (8014540 <tcp_input+0x49c>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	b29b      	uxth	r3, r3
 801437c:	429a      	cmp	r2, r3
 801437e:	d13a      	bne.n	80143f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	8ada      	ldrh	r2, [r3, #22]
 8014384:	4b6e      	ldr	r3, [pc, #440]	@ (8014540 <tcp_input+0x49c>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	885b      	ldrh	r3, [r3, #2]
 801438a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801438c:	429a      	cmp	r2, r3
 801438e:	d132      	bne.n	80143f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	685a      	ldr	r2, [r3, #4]
 8014394:	4b6b      	ldr	r3, [pc, #428]	@ (8014544 <tcp_input+0x4a0>)
 8014396:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014398:	429a      	cmp	r2, r3
 801439a:	d12c      	bne.n	80143f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	4b68      	ldr	r3, [pc, #416]	@ (8014544 <tcp_input+0x4a0>)
 80143a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d126      	bne.n	80143f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	69fa      	ldr	r2, [r7, #28]
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d106      	bne.n	80143c0 <tcp_input+0x31c>
 80143b2:	4b65      	ldr	r3, [pc, #404]	@ (8014548 <tcp_input+0x4a4>)
 80143b4:	f240 120d 	movw	r2, #269	@ 0x10d
 80143b8:	4964      	ldr	r1, [pc, #400]	@ (801454c <tcp_input+0x4a8>)
 80143ba:	4865      	ldr	r0, [pc, #404]	@ (8014550 <tcp_input+0x4ac>)
 80143bc:	f009 fa2a 	bl	801d814 <iprintf>
      if (prev != NULL) {
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00a      	beq.n	80143dc <tcp_input+0x338>
        prev->next = pcb->next;
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	68da      	ldr	r2, [r3, #12]
 80143ca:	69bb      	ldr	r3, [r7, #24]
 80143cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80143ce:	4b61      	ldr	r3, [pc, #388]	@ (8014554 <tcp_input+0x4b0>)
 80143d0:	681a      	ldr	r2, [r3, #0]
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80143d6:	4a5f      	ldr	r2, [pc, #380]	@ (8014554 <tcp_input+0x4b0>)
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	69fa      	ldr	r2, [r7, #28]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d111      	bne.n	801440a <tcp_input+0x366>
 80143e6:	4b58      	ldr	r3, [pc, #352]	@ (8014548 <tcp_input+0x4a4>)
 80143e8:	f240 1215 	movw	r2, #277	@ 0x115
 80143ec:	495a      	ldr	r1, [pc, #360]	@ (8014558 <tcp_input+0x4b4>)
 80143ee:	4858      	ldr	r0, [pc, #352]	@ (8014550 <tcp_input+0x4ac>)
 80143f0:	f009 fa10 	bl	801d814 <iprintf>
      break;
 80143f4:	e009      	b.n	801440a <tcp_input+0x366>
    }
    prev = pcb;
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80143fa:	69fb      	ldr	r3, [r7, #28]
 80143fc:	68db      	ldr	r3, [r3, #12]
 80143fe:	61fb      	str	r3, [r7, #28]
 8014400:	69fb      	ldr	r3, [r7, #28]
 8014402:	2b00      	cmp	r3, #0
 8014404:	f47f af5e 	bne.w	80142c4 <tcp_input+0x220>
 8014408:	e000      	b.n	801440c <tcp_input+0x368>
      break;
 801440a:	bf00      	nop
  }

  if (pcb == NULL) {
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	2b00      	cmp	r3, #0
 8014410:	f040 80aa 	bne.w	8014568 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014414:	4b51      	ldr	r3, [pc, #324]	@ (801455c <tcp_input+0x4b8>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	61fb      	str	r3, [r7, #28]
 801441a:	e03f      	b.n	801449c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	7d1b      	ldrb	r3, [r3, #20]
 8014420:	2b0a      	cmp	r3, #10
 8014422:	d006      	beq.n	8014432 <tcp_input+0x38e>
 8014424:	4b48      	ldr	r3, [pc, #288]	@ (8014548 <tcp_input+0x4a4>)
 8014426:	f240 121f 	movw	r2, #287	@ 0x11f
 801442a:	494d      	ldr	r1, [pc, #308]	@ (8014560 <tcp_input+0x4bc>)
 801442c:	4848      	ldr	r0, [pc, #288]	@ (8014550 <tcp_input+0x4ac>)
 801442e:	f009 f9f1 	bl	801d814 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014432:	69fb      	ldr	r3, [r7, #28]
 8014434:	7a1b      	ldrb	r3, [r3, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d009      	beq.n	801444e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	7a1a      	ldrb	r2, [r3, #8]
 801443e:	4b41      	ldr	r3, [pc, #260]	@ (8014544 <tcp_input+0x4a0>)
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014446:	3301      	adds	r3, #1
 8014448:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801444a:	429a      	cmp	r2, r3
 801444c:	d122      	bne.n	8014494 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	8b1a      	ldrh	r2, [r3, #24]
 8014452:	4b3b      	ldr	r3, [pc, #236]	@ (8014540 <tcp_input+0x49c>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	b29b      	uxth	r3, r3
 801445a:	429a      	cmp	r2, r3
 801445c:	d11b      	bne.n	8014496 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	8ada      	ldrh	r2, [r3, #22]
 8014462:	4b37      	ldr	r3, [pc, #220]	@ (8014540 <tcp_input+0x49c>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	885b      	ldrh	r3, [r3, #2]
 8014468:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801446a:	429a      	cmp	r2, r3
 801446c:	d113      	bne.n	8014496 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	685a      	ldr	r2, [r3, #4]
 8014472:	4b34      	ldr	r3, [pc, #208]	@ (8014544 <tcp_input+0x4a0>)
 8014474:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014476:	429a      	cmp	r2, r3
 8014478:	d10d      	bne.n	8014496 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	4b31      	ldr	r3, [pc, #196]	@ (8014544 <tcp_input+0x4a0>)
 8014480:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014482:	429a      	cmp	r2, r3
 8014484:	d107      	bne.n	8014496 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014486:	69f8      	ldr	r0, [r7, #28]
 8014488:	f000 fb56 	bl	8014b38 <tcp_timewait_input>
        }
        pbuf_free(p);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7fd ffc3 	bl	8012418 <pbuf_free>
        return;
 8014492:	e1fd      	b.n	8014890 <tcp_input+0x7ec>
        continue;
 8014494:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	61fb      	str	r3, [r7, #28]
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1bc      	bne.n	801441c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80144a2:	2300      	movs	r3, #0
 80144a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80144a6:	4b2f      	ldr	r3, [pc, #188]	@ (8014564 <tcp_input+0x4c0>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	617b      	str	r3, [r7, #20]
 80144ac:	e02a      	b.n	8014504 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	7a1b      	ldrb	r3, [r3, #8]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00c      	beq.n	80144d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	7a1a      	ldrb	r2, [r3, #8]
 80144ba:	4b22      	ldr	r3, [pc, #136]	@ (8014544 <tcp_input+0x4a0>)
 80144bc:	685b      	ldr	r3, [r3, #4]
 80144be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80144c2:	3301      	adds	r3, #1
 80144c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d002      	beq.n	80144d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	61bb      	str	r3, [r7, #24]
        continue;
 80144ce:	e016      	b.n	80144fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	8ada      	ldrh	r2, [r3, #22]
 80144d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014540 <tcp_input+0x49c>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	885b      	ldrh	r3, [r3, #2]
 80144da:	b29b      	uxth	r3, r3
 80144dc:	429a      	cmp	r2, r3
 80144de:	d10c      	bne.n	80144fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	4b17      	ldr	r3, [pc, #92]	@ (8014544 <tcp_input+0x4a0>)
 80144e6:	695b      	ldr	r3, [r3, #20]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d00f      	beq.n	801450c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00d      	beq.n	801450e <tcp_input+0x46a>
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d009      	beq.n	801450e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	617b      	str	r3, [r7, #20]
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1d1      	bne.n	80144ae <tcp_input+0x40a>
 801450a:	e000      	b.n	801450e <tcp_input+0x46a>
            break;
 801450c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d029      	beq.n	8014568 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00a      	beq.n	8014530 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	68da      	ldr	r2, [r3, #12]
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014522:	4b10      	ldr	r3, [pc, #64]	@ (8014564 <tcp_input+0x4c0>)
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801452a:	4a0e      	ldr	r2, [pc, #56]	@ (8014564 <tcp_input+0x4c0>)
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014530:	6978      	ldr	r0, [r7, #20]
 8014532:	f000 fa03 	bl	801493c <tcp_listen_input>
      }
      pbuf_free(p);
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7fd ff6e 	bl	8012418 <pbuf_free>
      return;
 801453c:	e1a8      	b.n	8014890 <tcp_input+0x7ec>
 801453e:	bf00      	nop
 8014540:	2400cc5c 	.word	0x2400cc5c
 8014544:	24009b14 	.word	0x24009b14
 8014548:	080210bc 	.word	0x080210bc
 801454c:	080211e8 	.word	0x080211e8
 8014550:	08021108 	.word	0x08021108
 8014554:	2400cc40 	.word	0x2400cc40
 8014558:	08021214 	.word	0x08021214
 801455c:	2400cc44 	.word	0x2400cc44
 8014560:	08021240 	.word	0x08021240
 8014564:	2400cc3c 	.word	0x2400cc3c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	2b00      	cmp	r3, #0
 801456c:	f000 8158 	beq.w	8014820 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014570:	4b95      	ldr	r3, [pc, #596]	@ (80147c8 <tcp_input+0x724>)
 8014572:	2200      	movs	r2, #0
 8014574:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	891a      	ldrh	r2, [r3, #8]
 801457a:	4b93      	ldr	r3, [pc, #588]	@ (80147c8 <tcp_input+0x724>)
 801457c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801457e:	4a92      	ldr	r2, [pc, #584]	@ (80147c8 <tcp_input+0x724>)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014584:	4b91      	ldr	r3, [pc, #580]	@ (80147cc <tcp_input+0x728>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a8f      	ldr	r2, [pc, #572]	@ (80147c8 <tcp_input+0x724>)
 801458a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801458c:	4b90      	ldr	r3, [pc, #576]	@ (80147d0 <tcp_input+0x72c>)
 801458e:	2200      	movs	r2, #0
 8014590:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014592:	4b90      	ldr	r3, [pc, #576]	@ (80147d4 <tcp_input+0x730>)
 8014594:	2200      	movs	r2, #0
 8014596:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014598:	4b8f      	ldr	r3, [pc, #572]	@ (80147d8 <tcp_input+0x734>)
 801459a:	2200      	movs	r2, #0
 801459c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801459e:	4b8f      	ldr	r3, [pc, #572]	@ (80147dc <tcp_input+0x738>)
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	f003 0308 	and.w	r3, r3, #8
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d006      	beq.n	80145b8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	7b5b      	ldrb	r3, [r3, #13]
 80145ae:	f043 0301 	orr.w	r3, r3, #1
 80145b2:	b2da      	uxtb	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d017      	beq.n	80145f0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80145c0:	69f8      	ldr	r0, [r7, #28]
 80145c2:	f7ff f929 	bl	8013818 <tcp_process_refused_data>
 80145c6:	4603      	mov	r3, r0
 80145c8:	f113 0f0d 	cmn.w	r3, #13
 80145cc:	d007      	beq.n	80145de <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d00c      	beq.n	80145f0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80145d6:	4b82      	ldr	r3, [pc, #520]	@ (80147e0 <tcp_input+0x73c>)
 80145d8:	881b      	ldrh	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d008      	beq.n	80145f0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f040 80e3 	bne.w	80147ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80145e8:	69f8      	ldr	r0, [r7, #28]
 80145ea:	f003 f9a7 	bl	801793c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80145ee:	e0de      	b.n	80147ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80145f0:	4a7c      	ldr	r2, [pc, #496]	@ (80147e4 <tcp_input+0x740>)
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80145f6:	69f8      	ldr	r0, [r7, #28]
 80145f8:	f000 fb18 	bl	8014c2c <tcp_process>
 80145fc:	4603      	mov	r3, r0
 80145fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014604:	f113 0f0d 	cmn.w	r3, #13
 8014608:	f000 80d3 	beq.w	80147b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801460c:	4b71      	ldr	r3, [pc, #452]	@ (80147d4 <tcp_input+0x730>)
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	f003 0308 	and.w	r3, r3, #8
 8014614:	2b00      	cmp	r3, #0
 8014616:	d015      	beq.n	8014644 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801461e:	2b00      	cmp	r3, #0
 8014620:	d008      	beq.n	8014634 <tcp_input+0x590>
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014628:	69fa      	ldr	r2, [r7, #28]
 801462a:	6912      	ldr	r2, [r2, #16]
 801462c:	f06f 010d 	mvn.w	r1, #13
 8014630:	4610      	mov	r0, r2
 8014632:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014634:	69f9      	ldr	r1, [r7, #28]
 8014636:	486c      	ldr	r0, [pc, #432]	@ (80147e8 <tcp_input+0x744>)
 8014638:	f7ff fbbc 	bl	8013db4 <tcp_pcb_remove>
        tcp_free(pcb);
 801463c:	69f8      	ldr	r0, [r7, #28]
 801463e:	f7fe f9a7 	bl	8012990 <tcp_free>
 8014642:	e0da      	b.n	80147fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014644:	2300      	movs	r3, #0
 8014646:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014648:	4b63      	ldr	r3, [pc, #396]	@ (80147d8 <tcp_input+0x734>)
 801464a:	881b      	ldrh	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d01d      	beq.n	801468c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014650:	4b61      	ldr	r3, [pc, #388]	@ (80147d8 <tcp_input+0x734>)
 8014652:	881b      	ldrh	r3, [r3, #0]
 8014654:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00a      	beq.n	8014676 <tcp_input+0x5d2>
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014666:	69fa      	ldr	r2, [r7, #28]
 8014668:	6910      	ldr	r0, [r2, #16]
 801466a:	89fa      	ldrh	r2, [r7, #14]
 801466c:	69f9      	ldr	r1, [r7, #28]
 801466e:	4798      	blx	r3
 8014670:	4603      	mov	r3, r0
 8014672:	74fb      	strb	r3, [r7, #19]
 8014674:	e001      	b.n	801467a <tcp_input+0x5d6>
 8014676:	2300      	movs	r3, #0
 8014678:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801467a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801467e:	f113 0f0d 	cmn.w	r3, #13
 8014682:	f000 8098 	beq.w	80147b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014686:	4b54      	ldr	r3, [pc, #336]	@ (80147d8 <tcp_input+0x734>)
 8014688:	2200      	movs	r2, #0
 801468a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801468c:	69f8      	ldr	r0, [r7, #28]
 801468e:	f000 f915 	bl	80148bc <tcp_input_delayed_close>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	f040 8090 	bne.w	80147ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801469a:	4b4d      	ldr	r3, [pc, #308]	@ (80147d0 <tcp_input+0x72c>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d041      	beq.n	8014726 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d006      	beq.n	80146b8 <tcp_input+0x614>
 80146aa:	4b50      	ldr	r3, [pc, #320]	@ (80147ec <tcp_input+0x748>)
 80146ac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80146b0:	494f      	ldr	r1, [pc, #316]	@ (80147f0 <tcp_input+0x74c>)
 80146b2:	4850      	ldr	r0, [pc, #320]	@ (80147f4 <tcp_input+0x750>)
 80146b4:	f009 f8ae 	bl	801d814 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	8b5b      	ldrh	r3, [r3, #26]
 80146bc:	f003 0310 	and.w	r3, r3, #16
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d008      	beq.n	80146d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80146c4:	4b42      	ldr	r3, [pc, #264]	@ (80147d0 <tcp_input+0x72c>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fd fea5 	bl	8012418 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80146ce:	69f8      	ldr	r0, [r7, #28]
 80146d0:	f7fe fc46 	bl	8012f60 <tcp_abort>
            goto aborted;
 80146d4:	e091      	b.n	80147fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00c      	beq.n	80146fa <tcp_input+0x656>
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	6918      	ldr	r0, [r3, #16]
 80146ea:	4b39      	ldr	r3, [pc, #228]	@ (80147d0 <tcp_input+0x72c>)
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	2300      	movs	r3, #0
 80146f0:	69f9      	ldr	r1, [r7, #28]
 80146f2:	47a0      	blx	r4
 80146f4:	4603      	mov	r3, r0
 80146f6:	74fb      	strb	r3, [r7, #19]
 80146f8:	e008      	b.n	801470c <tcp_input+0x668>
 80146fa:	4b35      	ldr	r3, [pc, #212]	@ (80147d0 <tcp_input+0x72c>)
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	2300      	movs	r3, #0
 8014700:	69f9      	ldr	r1, [r7, #28]
 8014702:	2000      	movs	r0, #0
 8014704:	f7ff f95e 	bl	80139c4 <tcp_recv_null>
 8014708:	4603      	mov	r3, r0
 801470a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801470c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014710:	f113 0f0d 	cmn.w	r3, #13
 8014714:	d053      	beq.n	80147be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014716:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d003      	beq.n	8014726 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801471e:	4b2c      	ldr	r3, [pc, #176]	@ (80147d0 <tcp_input+0x72c>)
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014726:	4b2b      	ldr	r3, [pc, #172]	@ (80147d4 <tcp_input+0x730>)
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	f003 0320 	and.w	r3, r3, #32
 801472e:	2b00      	cmp	r3, #0
 8014730:	d030      	beq.n	8014794 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014732:	69fb      	ldr	r3, [r7, #28]
 8014734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014736:	2b00      	cmp	r3, #0
 8014738:	d009      	beq.n	801474e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801473e:	7b5a      	ldrb	r2, [r3, #13]
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014744:	f042 0220 	orr.w	r2, r2, #32
 8014748:	b2d2      	uxtb	r2, r2
 801474a:	735a      	strb	r2, [r3, #13]
 801474c:	e022      	b.n	8014794 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801474e:	69fb      	ldr	r3, [r7, #28]
 8014750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014752:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014756:	d005      	beq.n	8014764 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801475c:	3301      	adds	r3, #1
 801475e:	b29a      	uxth	r2, r3
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00b      	beq.n	8014786 <tcp_input+0x6e2>
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	6918      	ldr	r0, [r3, #16]
 8014778:	2300      	movs	r3, #0
 801477a:	2200      	movs	r2, #0
 801477c:	69f9      	ldr	r1, [r7, #28]
 801477e:	47a0      	blx	r4
 8014780:	4603      	mov	r3, r0
 8014782:	74fb      	strb	r3, [r7, #19]
 8014784:	e001      	b.n	801478a <tcp_input+0x6e6>
 8014786:	2300      	movs	r3, #0
 8014788:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801478a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801478e:	f113 0f0d 	cmn.w	r3, #13
 8014792:	d016      	beq.n	80147c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014794:	4b13      	ldr	r3, [pc, #76]	@ (80147e4 <tcp_input+0x740>)
 8014796:	2200      	movs	r2, #0
 8014798:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801479a:	69f8      	ldr	r0, [r7, #28]
 801479c:	f000 f88e 	bl	80148bc <tcp_input_delayed_close>
 80147a0:	4603      	mov	r3, r0
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d128      	bne.n	80147f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80147a6:	69f8      	ldr	r0, [r7, #28]
 80147a8:	f002 fac2 	bl	8016d30 <tcp_output>
 80147ac:	e025      	b.n	80147fa <tcp_input+0x756>
        goto aborted;
 80147ae:	bf00      	nop
 80147b0:	e023      	b.n	80147fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80147b2:	bf00      	nop
 80147b4:	e021      	b.n	80147fa <tcp_input+0x756>
              goto aborted;
 80147b6:	bf00      	nop
 80147b8:	e01f      	b.n	80147fa <tcp_input+0x756>
          goto aborted;
 80147ba:	bf00      	nop
 80147bc:	e01d      	b.n	80147fa <tcp_input+0x756>
            goto aborted;
 80147be:	bf00      	nop
 80147c0:	e01b      	b.n	80147fa <tcp_input+0x756>
              goto aborted;
 80147c2:	bf00      	nop
 80147c4:	e019      	b.n	80147fa <tcp_input+0x756>
 80147c6:	bf00      	nop
 80147c8:	2400cc4c 	.word	0x2400cc4c
 80147cc:	2400cc5c 	.word	0x2400cc5c
 80147d0:	2400cc7c 	.word	0x2400cc7c
 80147d4:	2400cc79 	.word	0x2400cc79
 80147d8:	2400cc74 	.word	0x2400cc74
 80147dc:	2400cc78 	.word	0x2400cc78
 80147e0:	2400cc76 	.word	0x2400cc76
 80147e4:	2400cc80 	.word	0x2400cc80
 80147e8:	2400cc40 	.word	0x2400cc40
 80147ec:	080210bc 	.word	0x080210bc
 80147f0:	08021270 	.word	0x08021270
 80147f4:	08021108 	.word	0x08021108
          goto aborted;
 80147f8:	bf00      	nop
    tcp_input_pcb = NULL;
 80147fa:	4b27      	ldr	r3, [pc, #156]	@ (8014898 <tcp_input+0x7f4>)
 80147fc:	2200      	movs	r2, #0
 80147fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014800:	4b26      	ldr	r3, [pc, #152]	@ (801489c <tcp_input+0x7f8>)
 8014802:	2200      	movs	r2, #0
 8014804:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014806:	4b26      	ldr	r3, [pc, #152]	@ (80148a0 <tcp_input+0x7fc>)
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d03f      	beq.n	801488e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801480e:	4b24      	ldr	r3, [pc, #144]	@ (80148a0 <tcp_input+0x7fc>)
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	4618      	mov	r0, r3
 8014814:	f7fd fe00 	bl	8012418 <pbuf_free>
      inseg.p = NULL;
 8014818:	4b21      	ldr	r3, [pc, #132]	@ (80148a0 <tcp_input+0x7fc>)
 801481a:	2200      	movs	r2, #0
 801481c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801481e:	e036      	b.n	801488e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014820:	4b20      	ldr	r3, [pc, #128]	@ (80148a4 <tcp_input+0x800>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	899b      	ldrh	r3, [r3, #12]
 8014826:	b29b      	uxth	r3, r3
 8014828:	4618      	mov	r0, r3
 801482a:	f7fc f93f 	bl	8010aac <lwip_htons>
 801482e:	4603      	mov	r3, r0
 8014830:	b2db      	uxtb	r3, r3
 8014832:	f003 0304 	and.w	r3, r3, #4
 8014836:	2b00      	cmp	r3, #0
 8014838:	d118      	bne.n	801486c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801483a:	4b1b      	ldr	r3, [pc, #108]	@ (80148a8 <tcp_input+0x804>)
 801483c:	6819      	ldr	r1, [r3, #0]
 801483e:	4b1b      	ldr	r3, [pc, #108]	@ (80148ac <tcp_input+0x808>)
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	4b1a      	ldr	r3, [pc, #104]	@ (80148b0 <tcp_input+0x80c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801484a:	4b16      	ldr	r3, [pc, #88]	@ (80148a4 <tcp_input+0x800>)
 801484c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801484e:	885b      	ldrh	r3, [r3, #2]
 8014850:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014852:	4a14      	ldr	r2, [pc, #80]	@ (80148a4 <tcp_input+0x800>)
 8014854:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014856:	8812      	ldrh	r2, [r2, #0]
 8014858:	b292      	uxth	r2, r2
 801485a:	9202      	str	r2, [sp, #8]
 801485c:	9301      	str	r3, [sp, #4]
 801485e:	4b15      	ldr	r3, [pc, #84]	@ (80148b4 <tcp_input+0x810>)
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	4b15      	ldr	r3, [pc, #84]	@ (80148b8 <tcp_input+0x814>)
 8014864:	4602      	mov	r2, r0
 8014866:	2000      	movs	r0, #0
 8014868:	f003 f816 	bl	8017898 <tcp_rst>
    pbuf_free(p);
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7fd fdd3 	bl	8012418 <pbuf_free>
  return;
 8014872:	e00c      	b.n	801488e <tcp_input+0x7ea>
    goto dropped;
 8014874:	bf00      	nop
 8014876:	e006      	b.n	8014886 <tcp_input+0x7e2>
    goto dropped;
 8014878:	bf00      	nop
 801487a:	e004      	b.n	8014886 <tcp_input+0x7e2>
    goto dropped;
 801487c:	bf00      	nop
 801487e:	e002      	b.n	8014886 <tcp_input+0x7e2>
      goto dropped;
 8014880:	bf00      	nop
 8014882:	e000      	b.n	8014886 <tcp_input+0x7e2>
      goto dropped;
 8014884:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7fd fdc6 	bl	8012418 <pbuf_free>
 801488c:	e000      	b.n	8014890 <tcp_input+0x7ec>
  return;
 801488e:	bf00      	nop
}
 8014890:	3724      	adds	r7, #36	@ 0x24
 8014892:	46bd      	mov	sp, r7
 8014894:	bd90      	pop	{r4, r7, pc}
 8014896:	bf00      	nop
 8014898:	2400cc80 	.word	0x2400cc80
 801489c:	2400cc7c 	.word	0x2400cc7c
 80148a0:	2400cc4c 	.word	0x2400cc4c
 80148a4:	2400cc5c 	.word	0x2400cc5c
 80148a8:	2400cc70 	.word	0x2400cc70
 80148ac:	2400cc76 	.word	0x2400cc76
 80148b0:	2400cc6c 	.word	0x2400cc6c
 80148b4:	24009b24 	.word	0x24009b24
 80148b8:	24009b28 	.word	0x24009b28

080148bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d106      	bne.n	80148d8 <tcp_input_delayed_close+0x1c>
 80148ca:	4b17      	ldr	r3, [pc, #92]	@ (8014928 <tcp_input_delayed_close+0x6c>)
 80148cc:	f240 225a 	movw	r2, #602	@ 0x25a
 80148d0:	4916      	ldr	r1, [pc, #88]	@ (801492c <tcp_input_delayed_close+0x70>)
 80148d2:	4817      	ldr	r0, [pc, #92]	@ (8014930 <tcp_input_delayed_close+0x74>)
 80148d4:	f008 ff9e 	bl	801d814 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80148d8:	4b16      	ldr	r3, [pc, #88]	@ (8014934 <tcp_input_delayed_close+0x78>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	f003 0310 	and.w	r3, r3, #16
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d01c      	beq.n	801491e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	8b5b      	ldrh	r3, [r3, #26]
 80148e8:	f003 0310 	and.w	r3, r3, #16
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d10d      	bne.n	801490c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d008      	beq.n	801490c <tcp_input_delayed_close+0x50>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	6912      	ldr	r2, [r2, #16]
 8014904:	f06f 010e 	mvn.w	r1, #14
 8014908:	4610      	mov	r0, r2
 801490a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	480a      	ldr	r0, [pc, #40]	@ (8014938 <tcp_input_delayed_close+0x7c>)
 8014910:	f7ff fa50 	bl	8013db4 <tcp_pcb_remove>
    tcp_free(pcb);
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7fe f83b 	bl	8012990 <tcp_free>
    return 1;
 801491a:	2301      	movs	r3, #1
 801491c:	e000      	b.n	8014920 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801491e:	2300      	movs	r3, #0
}
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	080210bc 	.word	0x080210bc
 801492c:	0802128c 	.word	0x0802128c
 8014930:	08021108 	.word	0x08021108
 8014934:	2400cc79 	.word	0x2400cc79
 8014938:	2400cc40 	.word	0x2400cc40

0801493c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801493c:	b590      	push	{r4, r7, lr}
 801493e:	b08b      	sub	sp, #44	@ 0x2c
 8014940:	af04      	add	r7, sp, #16
 8014942:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014944:	4b6f      	ldr	r3, [pc, #444]	@ (8014b04 <tcp_listen_input+0x1c8>)
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	f003 0304 	and.w	r3, r3, #4
 801494c:	2b00      	cmp	r3, #0
 801494e:	f040 80d2 	bne.w	8014af6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d106      	bne.n	8014966 <tcp_listen_input+0x2a>
 8014958:	4b6b      	ldr	r3, [pc, #428]	@ (8014b08 <tcp_listen_input+0x1cc>)
 801495a:	f240 2281 	movw	r2, #641	@ 0x281
 801495e:	496b      	ldr	r1, [pc, #428]	@ (8014b0c <tcp_listen_input+0x1d0>)
 8014960:	486b      	ldr	r0, [pc, #428]	@ (8014b10 <tcp_listen_input+0x1d4>)
 8014962:	f008 ff57 	bl	801d814 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014966:	4b67      	ldr	r3, [pc, #412]	@ (8014b04 <tcp_listen_input+0x1c8>)
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	f003 0310 	and.w	r3, r3, #16
 801496e:	2b00      	cmp	r3, #0
 8014970:	d019      	beq.n	80149a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014972:	4b68      	ldr	r3, [pc, #416]	@ (8014b14 <tcp_listen_input+0x1d8>)
 8014974:	6819      	ldr	r1, [r3, #0]
 8014976:	4b68      	ldr	r3, [pc, #416]	@ (8014b18 <tcp_listen_input+0x1dc>)
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	4b67      	ldr	r3, [pc, #412]	@ (8014b1c <tcp_listen_input+0x1e0>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014982:	4b67      	ldr	r3, [pc, #412]	@ (8014b20 <tcp_listen_input+0x1e4>)
 8014984:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014986:	885b      	ldrh	r3, [r3, #2]
 8014988:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801498a:	4a65      	ldr	r2, [pc, #404]	@ (8014b20 <tcp_listen_input+0x1e4>)
 801498c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801498e:	8812      	ldrh	r2, [r2, #0]
 8014990:	b292      	uxth	r2, r2
 8014992:	9202      	str	r2, [sp, #8]
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	4b63      	ldr	r3, [pc, #396]	@ (8014b24 <tcp_listen_input+0x1e8>)
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	4b63      	ldr	r3, [pc, #396]	@ (8014b28 <tcp_listen_input+0x1ec>)
 801499c:	4602      	mov	r2, r0
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f002 ff7a 	bl	8017898 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80149a4:	e0a9      	b.n	8014afa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80149a6:	4b57      	ldr	r3, [pc, #348]	@ (8014b04 <tcp_listen_input+0x1c8>)
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	f003 0302 	and.w	r3, r3, #2
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	f000 80a3 	beq.w	8014afa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	7d5b      	ldrb	r3, [r3, #21]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7ff f927 	bl	8013c0c <tcp_alloc>
 80149be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d111      	bne.n	80149ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	699b      	ldr	r3, [r3, #24]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d00a      	beq.n	80149e4 <tcp_listen_input+0xa8>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	699b      	ldr	r3, [r3, #24]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	6910      	ldr	r0, [r2, #16]
 80149d6:	f04f 32ff 	mov.w	r2, #4294967295
 80149da:	2100      	movs	r1, #0
 80149dc:	4798      	blx	r3
 80149de:	4603      	mov	r3, r0
 80149e0:	73bb      	strb	r3, [r7, #14]
      return;
 80149e2:	e08b      	b.n	8014afc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80149e4:	23f0      	movs	r3, #240	@ 0xf0
 80149e6:	73bb      	strb	r3, [r7, #14]
      return;
 80149e8:	e088      	b.n	8014afc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80149ea:	4b50      	ldr	r3, [pc, #320]	@ (8014b2c <tcp_listen_input+0x1f0>)
 80149ec:	695a      	ldr	r2, [r3, #20]
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80149f2:	4b4e      	ldr	r3, [pc, #312]	@ (8014b2c <tcp_listen_input+0x1f0>)
 80149f4:	691a      	ldr	r2, [r3, #16]
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8ada      	ldrh	r2, [r3, #22]
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014a02:	4b47      	ldr	r3, [pc, #284]	@ (8014b20 <tcp_listen_input+0x1e4>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	881b      	ldrh	r3, [r3, #0]
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2203      	movs	r2, #3
 8014a12:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014a14:	4b41      	ldr	r3, [pc, #260]	@ (8014b1c <tcp_listen_input+0x1e0>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014a26:	6978      	ldr	r0, [r7, #20]
 8014a28:	f7ff fa58 	bl	8013edc <tcp_next_iss>
 8014a2c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	693a      	ldr	r2, [r7, #16]
 8014a32:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	693a      	ldr	r2, [r7, #16]
 8014a38:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	693a      	ldr	r2, [r7, #16]
 8014a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	693a      	ldr	r2, [r7, #16]
 8014a44:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014a46:	4b35      	ldr	r3, [pc, #212]	@ (8014b1c <tcp_listen_input+0x1e0>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	1e5a      	subs	r2, r3, #1
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	691a      	ldr	r2, [r3, #16]
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7a5b      	ldrb	r3, [r3, #9]
 8014a62:	f003 030c 	and.w	r3, r3, #12
 8014a66:	b2da      	uxtb	r2, r3
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	7a1a      	ldrb	r2, [r3, #8]
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014a74:	4b2e      	ldr	r3, [pc, #184]	@ (8014b30 <tcp_listen_input+0x1f4>)
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	60da      	str	r2, [r3, #12]
 8014a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8014b30 <tcp_listen_input+0x1f4>)
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	6013      	str	r3, [r2, #0]
 8014a82:	f003 f8cb 	bl	8017c1c <tcp_timer_needed>
 8014a86:	4b2b      	ldr	r3, [pc, #172]	@ (8014b34 <tcp_listen_input+0x1f8>)
 8014a88:	2201      	movs	r2, #1
 8014a8a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014a8c:	6978      	ldr	r0, [r7, #20]
 8014a8e:	f001 fd8b 	bl	80165a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014a92:	4b23      	ldr	r3, [pc, #140]	@ (8014b20 <tcp_listen_input+0x1e4>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	89db      	ldrh	r3, [r3, #14]
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f006 fe79 	bl	801b7ac <ip4_route>
 8014aba:	4601      	mov	r1, r0
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	3304      	adds	r3, #4
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	f7ff fa30 	bl	8013f28 <tcp_eff_send_mss_netif>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	461a      	mov	r2, r3
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014ad0:	2112      	movs	r1, #18
 8014ad2:	6978      	ldr	r0, [r7, #20]
 8014ad4:	f002 f83e 	bl	8016b54 <tcp_enqueue_flags>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d004      	beq.n	8014aee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	6978      	ldr	r0, [r7, #20]
 8014ae8:	f7fe f97c 	bl	8012de4 <tcp_abandon>
      return;
 8014aec:	e006      	b.n	8014afc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014aee:	6978      	ldr	r0, [r7, #20]
 8014af0:	f002 f91e 	bl	8016d30 <tcp_output>
  return;
 8014af4:	e001      	b.n	8014afa <tcp_listen_input+0x1be>
    return;
 8014af6:	bf00      	nop
 8014af8:	e000      	b.n	8014afc <tcp_listen_input+0x1c0>
  return;
 8014afa:	bf00      	nop
}
 8014afc:	371c      	adds	r7, #28
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd90      	pop	{r4, r7, pc}
 8014b02:	bf00      	nop
 8014b04:	2400cc78 	.word	0x2400cc78
 8014b08:	080210bc 	.word	0x080210bc
 8014b0c:	080212b4 	.word	0x080212b4
 8014b10:	08021108 	.word	0x08021108
 8014b14:	2400cc70 	.word	0x2400cc70
 8014b18:	2400cc76 	.word	0x2400cc76
 8014b1c:	2400cc6c 	.word	0x2400cc6c
 8014b20:	2400cc5c 	.word	0x2400cc5c
 8014b24:	24009b24 	.word	0x24009b24
 8014b28:	24009b28 	.word	0x24009b28
 8014b2c:	24009b14 	.word	0x24009b14
 8014b30:	2400cc40 	.word	0x2400cc40
 8014b34:	2400cc48 	.word	0x2400cc48

08014b38 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af04      	add	r7, sp, #16
 8014b3e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014b40:	4b2f      	ldr	r3, [pc, #188]	@ (8014c00 <tcp_timewait_input+0xc8>)
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	f003 0304 	and.w	r3, r3, #4
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d153      	bne.n	8014bf4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d106      	bne.n	8014b60 <tcp_timewait_input+0x28>
 8014b52:	4b2c      	ldr	r3, [pc, #176]	@ (8014c04 <tcp_timewait_input+0xcc>)
 8014b54:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014b58:	492b      	ldr	r1, [pc, #172]	@ (8014c08 <tcp_timewait_input+0xd0>)
 8014b5a:	482c      	ldr	r0, [pc, #176]	@ (8014c0c <tcp_timewait_input+0xd4>)
 8014b5c:	f008 fe5a 	bl	801d814 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014b60:	4b27      	ldr	r3, [pc, #156]	@ (8014c00 <tcp_timewait_input+0xc8>)
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	f003 0302 	and.w	r3, r3, #2
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d02a      	beq.n	8014bc2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014b6c:	4b28      	ldr	r3, [pc, #160]	@ (8014c10 <tcp_timewait_input+0xd8>)
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	db2d      	blt.n	8014bd6 <tcp_timewait_input+0x9e>
 8014b7a:	4b25      	ldr	r3, [pc, #148]	@ (8014c10 <tcp_timewait_input+0xd8>)
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b82:	6879      	ldr	r1, [r7, #4]
 8014b84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b86:	440b      	add	r3, r1
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	dc23      	bgt.n	8014bd6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b8e:	4b21      	ldr	r3, [pc, #132]	@ (8014c14 <tcp_timewait_input+0xdc>)
 8014b90:	6819      	ldr	r1, [r3, #0]
 8014b92:	4b21      	ldr	r3, [pc, #132]	@ (8014c18 <tcp_timewait_input+0xe0>)
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	461a      	mov	r2, r3
 8014b98:	4b1d      	ldr	r3, [pc, #116]	@ (8014c10 <tcp_timewait_input+0xd8>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8014c1c <tcp_timewait_input+0xe4>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ba2:	885b      	ldrh	r3, [r3, #2]
 8014ba4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8014c1c <tcp_timewait_input+0xe4>)
 8014ba8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014baa:	8812      	ldrh	r2, [r2, #0]
 8014bac:	b292      	uxth	r2, r2
 8014bae:	9202      	str	r2, [sp, #8]
 8014bb0:	9301      	str	r3, [sp, #4]
 8014bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8014c20 <tcp_timewait_input+0xe8>)
 8014bb4:	9300      	str	r3, [sp, #0]
 8014bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8014c24 <tcp_timewait_input+0xec>)
 8014bb8:	4602      	mov	r2, r0
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f002 fe6c 	bl	8017898 <tcp_rst>
      return;
 8014bc0:	e01b      	b.n	8014bfa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8014c00 <tcp_timewait_input+0xc8>)
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	f003 0301 	and.w	r3, r3, #1
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d003      	beq.n	8014bd6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014bce:	4b16      	ldr	r3, [pc, #88]	@ (8014c28 <tcp_timewait_input+0xf0>)
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014bd6:	4b10      	ldr	r3, [pc, #64]	@ (8014c18 <tcp_timewait_input+0xe0>)
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d00c      	beq.n	8014bf8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8b5b      	ldrh	r3, [r3, #26]
 8014be2:	f043 0302 	orr.w	r3, r3, #2
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f002 f89f 	bl	8016d30 <tcp_output>
  }
  return;
 8014bf2:	e001      	b.n	8014bf8 <tcp_timewait_input+0xc0>
    return;
 8014bf4:	bf00      	nop
 8014bf6:	e000      	b.n	8014bfa <tcp_timewait_input+0xc2>
  return;
 8014bf8:	bf00      	nop
}
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	2400cc78 	.word	0x2400cc78
 8014c04:	080210bc 	.word	0x080210bc
 8014c08:	080212d4 	.word	0x080212d4
 8014c0c:	08021108 	.word	0x08021108
 8014c10:	2400cc6c 	.word	0x2400cc6c
 8014c14:	2400cc70 	.word	0x2400cc70
 8014c18:	2400cc76 	.word	0x2400cc76
 8014c1c:	2400cc5c 	.word	0x2400cc5c
 8014c20:	24009b24 	.word	0x24009b24
 8014c24:	24009b28 	.word	0x24009b28
 8014c28:	2400cc34 	.word	0x2400cc34

08014c2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014c2c:	b590      	push	{r4, r7, lr}
 8014c2e:	b08d      	sub	sp, #52	@ 0x34
 8014c30:	af04      	add	r7, sp, #16
 8014c32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d106      	bne.n	8014c50 <tcp_process+0x24>
 8014c42:	4b9d      	ldr	r3, [pc, #628]	@ (8014eb8 <tcp_process+0x28c>)
 8014c44:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014c48:	499c      	ldr	r1, [pc, #624]	@ (8014ebc <tcp_process+0x290>)
 8014c4a:	489d      	ldr	r0, [pc, #628]	@ (8014ec0 <tcp_process+0x294>)
 8014c4c:	f008 fde2 	bl	801d814 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014c50:	4b9c      	ldr	r3, [pc, #624]	@ (8014ec4 <tcp_process+0x298>)
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	f003 0304 	and.w	r3, r3, #4
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d04e      	beq.n	8014cfa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	7d1b      	ldrb	r3, [r3, #20]
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	d108      	bne.n	8014c76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c68:	4b97      	ldr	r3, [pc, #604]	@ (8014ec8 <tcp_process+0x29c>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d123      	bne.n	8014cb8 <tcp_process+0x8c>
        acceptable = 1;
 8014c70:	2301      	movs	r3, #1
 8014c72:	76fb      	strb	r3, [r7, #27]
 8014c74:	e020      	b.n	8014cb8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c7a:	4b94      	ldr	r3, [pc, #592]	@ (8014ecc <tcp_process+0x2a0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d102      	bne.n	8014c88 <tcp_process+0x5c>
        acceptable = 1;
 8014c82:	2301      	movs	r3, #1
 8014c84:	76fb      	strb	r3, [r7, #27]
 8014c86:	e017      	b.n	8014cb8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014c88:	4b90      	ldr	r3, [pc, #576]	@ (8014ecc <tcp_process+0x2a0>)
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c90:	1ad3      	subs	r3, r2, r3
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	db10      	blt.n	8014cb8 <tcp_process+0x8c>
 8014c96:	4b8d      	ldr	r3, [pc, #564]	@ (8014ecc <tcp_process+0x2a0>)
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c9e:	6879      	ldr	r1, [r7, #4]
 8014ca0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014ca2:	440b      	add	r3, r1
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	dc06      	bgt.n	8014cb8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	8b5b      	ldrh	r3, [r3, #26]
 8014cae:	f043 0302 	orr.w	r3, r3, #2
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014cb8:	7efb      	ldrb	r3, [r7, #27]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d01b      	beq.n	8014cf6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	7d1b      	ldrb	r3, [r3, #20]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d106      	bne.n	8014cd4 <tcp_process+0xa8>
 8014cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8014eb8 <tcp_process+0x28c>)
 8014cc8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014ccc:	4980      	ldr	r1, [pc, #512]	@ (8014ed0 <tcp_process+0x2a4>)
 8014cce:	487c      	ldr	r0, [pc, #496]	@ (8014ec0 <tcp_process+0x294>)
 8014cd0:	f008 fda0 	bl	801d814 <iprintf>
      recv_flags |= TF_RESET;
 8014cd4:	4b7f      	ldr	r3, [pc, #508]	@ (8014ed4 <tcp_process+0x2a8>)
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	f043 0308 	orr.w	r3, r3, #8
 8014cdc:	b2da      	uxtb	r2, r3
 8014cde:	4b7d      	ldr	r3, [pc, #500]	@ (8014ed4 <tcp_process+0x2a8>)
 8014ce0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	8b5b      	ldrh	r3, [r3, #26]
 8014ce6:	f023 0301 	bic.w	r3, r3, #1
 8014cea:	b29a      	uxth	r2, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014cf0:	f06f 030d 	mvn.w	r3, #13
 8014cf4:	e37a      	b.n	80153ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e378      	b.n	80153ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014cfa:	4b72      	ldr	r3, [pc, #456]	@ (8014ec4 <tcp_process+0x298>)
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	f003 0302 	and.w	r3, r3, #2
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d010      	beq.n	8014d28 <tcp_process+0xfc>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	7d1b      	ldrb	r3, [r3, #20]
 8014d0a:	2b02      	cmp	r3, #2
 8014d0c:	d00c      	beq.n	8014d28 <tcp_process+0xfc>
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	7d1b      	ldrb	r3, [r3, #20]
 8014d12:	2b03      	cmp	r3, #3
 8014d14:	d008      	beq.n	8014d28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	8b5b      	ldrh	r3, [r3, #26]
 8014d1a:	f043 0302 	orr.w	r3, r3, #2
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014d24:	2300      	movs	r3, #0
 8014d26:	e361      	b.n	80153ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	8b5b      	ldrh	r3, [r3, #26]
 8014d2c:	f003 0310 	and.w	r3, r3, #16
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d103      	bne.n	8014d3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014d34:	4b68      	ldr	r3, [pc, #416]	@ (8014ed8 <tcp_process+0x2ac>)
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f001 fc2b 	bl	80165a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	7d1b      	ldrb	r3, [r3, #20]
 8014d56:	3b02      	subs	r3, #2
 8014d58:	2b07      	cmp	r3, #7
 8014d5a:	f200 8337 	bhi.w	80153cc <tcp_process+0x7a0>
 8014d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8014d64 <tcp_process+0x138>)
 8014d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d64:	08014d85 	.word	0x08014d85
 8014d68:	08014fb5 	.word	0x08014fb5
 8014d6c:	0801512d 	.word	0x0801512d
 8014d70:	08015157 	.word	0x08015157
 8014d74:	0801527b 	.word	0x0801527b
 8014d78:	0801512d 	.word	0x0801512d
 8014d7c:	08015307 	.word	0x08015307
 8014d80:	08015397 	.word	0x08015397
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014d84:	4b4f      	ldr	r3, [pc, #316]	@ (8014ec4 <tcp_process+0x298>)
 8014d86:	781b      	ldrb	r3, [r3, #0]
 8014d88:	f003 0310 	and.w	r3, r3, #16
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f000 80e4 	beq.w	8014f5a <tcp_process+0x32e>
 8014d92:	4b4c      	ldr	r3, [pc, #304]	@ (8014ec4 <tcp_process+0x298>)
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	f003 0302 	and.w	r3, r3, #2
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f000 80dd 	beq.w	8014f5a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014da4:	1c5a      	adds	r2, r3, #1
 8014da6:	4b48      	ldr	r3, [pc, #288]	@ (8014ec8 <tcp_process+0x29c>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	f040 80d5 	bne.w	8014f5a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014db0:	4b46      	ldr	r3, [pc, #280]	@ (8014ecc <tcp_process+0x2a0>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	1c5a      	adds	r2, r3, #1
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014dc2:	4b41      	ldr	r3, [pc, #260]	@ (8014ec8 <tcp_process+0x29c>)
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014dca:	4b44      	ldr	r3, [pc, #272]	@ (8014edc <tcp_process+0x2b0>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	89db      	ldrh	r3, [r3, #14]
 8014dd0:	b29a      	uxth	r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014de4:	4b39      	ldr	r3, [pc, #228]	@ (8014ecc <tcp_process+0x2a0>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	1e5a      	subs	r2, r3, #1
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2204      	movs	r2, #4
 8014df2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f006 fcd5 	bl	801b7ac <ip4_route>
 8014e02:	4601      	mov	r1, r0
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3304      	adds	r3, #4
 8014e08:	461a      	mov	r2, r3
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f7ff f88c 	bl	8013f28 <tcp_eff_send_mss_netif>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461a      	mov	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e1c:	009a      	lsls	r2, r3, #2
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014e28:	428b      	cmp	r3, r1
 8014e2a:	bf38      	it	cc
 8014e2c:	460b      	movcc	r3, r1
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d204      	bcs.n	8014e3c <tcp_process+0x210>
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	e00d      	b.n	8014e58 <tcp_process+0x22c>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014e46:	4293      	cmp	r3, r2
 8014e48:	d904      	bls.n	8014e54 <tcp_process+0x228>
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	e001      	b.n	8014e58 <tcp_process+0x22c>
 8014e54:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d106      	bne.n	8014e76 <tcp_process+0x24a>
 8014e68:	4b13      	ldr	r3, [pc, #76]	@ (8014eb8 <tcp_process+0x28c>)
 8014e6a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014e6e:	491c      	ldr	r1, [pc, #112]	@ (8014ee0 <tcp_process+0x2b4>)
 8014e70:	4813      	ldr	r0, [pc, #76]	@ (8014ec0 <tcp_process+0x294>)
 8014e72:	f008 fccf 	bl	801d814 <iprintf>
        --pcb->snd_queuelen;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e8a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d12a      	bne.n	8014ee8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e96:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d106      	bne.n	8014eac <tcp_process+0x280>
 8014e9e:	4b06      	ldr	r3, [pc, #24]	@ (8014eb8 <tcp_process+0x28c>)
 8014ea0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014ea4:	490f      	ldr	r1, [pc, #60]	@ (8014ee4 <tcp_process+0x2b8>)
 8014ea6:	4806      	ldr	r0, [pc, #24]	@ (8014ec0 <tcp_process+0x294>)
 8014ea8:	f008 fcb4 	bl	801d814 <iprintf>
          pcb->unsent = rseg->next;
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014eb4:	e01c      	b.n	8014ef0 <tcp_process+0x2c4>
 8014eb6:	bf00      	nop
 8014eb8:	080210bc 	.word	0x080210bc
 8014ebc:	080212f4 	.word	0x080212f4
 8014ec0:	08021108 	.word	0x08021108
 8014ec4:	2400cc78 	.word	0x2400cc78
 8014ec8:	2400cc70 	.word	0x2400cc70
 8014ecc:	2400cc6c 	.word	0x2400cc6c
 8014ed0:	08021310 	.word	0x08021310
 8014ed4:	2400cc79 	.word	0x2400cc79
 8014ed8:	2400cc34 	.word	0x2400cc34
 8014edc:	2400cc5c 	.word	0x2400cc5c
 8014ee0:	08021330 	.word	0x08021330
 8014ee4:	08021348 	.word	0x08021348
        } else {
          pcb->unacked = rseg->next;
 8014ee8:	69fb      	ldr	r3, [r7, #28]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014ef0:	69f8      	ldr	r0, [r7, #28]
 8014ef2:	f7fe fd22 	bl	801393a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d104      	bne.n	8014f08 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f04:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014f06:	e006      	b.n	8014f16 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2200      	movs	r2, #0
 8014f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d00a      	beq.n	8014f36 <tcp_process+0x30a>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	6910      	ldr	r0, [r2, #16]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	6879      	ldr	r1, [r7, #4]
 8014f2e:	4798      	blx	r3
 8014f30:	4603      	mov	r3, r0
 8014f32:	76bb      	strb	r3, [r7, #26]
 8014f34:	e001      	b.n	8014f3a <tcp_process+0x30e>
 8014f36:	2300      	movs	r3, #0
 8014f38:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014f3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014f3e:	f113 0f0d 	cmn.w	r3, #13
 8014f42:	d102      	bne.n	8014f4a <tcp_process+0x31e>
          return ERR_ABRT;
 8014f44:	f06f 030c 	mvn.w	r3, #12
 8014f48:	e250      	b.n	80153ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	8b5b      	ldrh	r3, [r3, #26]
 8014f4e:	f043 0302 	orr.w	r3, r3, #2
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014f58:	e23a      	b.n	80153d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014f5a:	4b98      	ldr	r3, [pc, #608]	@ (80151bc <tcp_process+0x590>)
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	f003 0310 	and.w	r3, r3, #16
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	f000 8234 	beq.w	80153d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f68:	4b95      	ldr	r3, [pc, #596]	@ (80151c0 <tcp_process+0x594>)
 8014f6a:	6819      	ldr	r1, [r3, #0]
 8014f6c:	4b95      	ldr	r3, [pc, #596]	@ (80151c4 <tcp_process+0x598>)
 8014f6e:	881b      	ldrh	r3, [r3, #0]
 8014f70:	461a      	mov	r2, r3
 8014f72:	4b95      	ldr	r3, [pc, #596]	@ (80151c8 <tcp_process+0x59c>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f78:	4b94      	ldr	r3, [pc, #592]	@ (80151cc <tcp_process+0x5a0>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f7c:	885b      	ldrh	r3, [r3, #2]
 8014f7e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f80:	4a92      	ldr	r2, [pc, #584]	@ (80151cc <tcp_process+0x5a0>)
 8014f82:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f84:	8812      	ldrh	r2, [r2, #0]
 8014f86:	b292      	uxth	r2, r2
 8014f88:	9202      	str	r2, [sp, #8]
 8014f8a:	9301      	str	r3, [sp, #4]
 8014f8c:	4b90      	ldr	r3, [pc, #576]	@ (80151d0 <tcp_process+0x5a4>)
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	4b90      	ldr	r3, [pc, #576]	@ (80151d4 <tcp_process+0x5a8>)
 8014f92:	4602      	mov	r2, r0
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f002 fc7f 	bl	8017898 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014fa0:	2b05      	cmp	r3, #5
 8014fa2:	f200 8215 	bhi.w	80153d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f002 fa4b 	bl	8017448 <tcp_rexmit_rto>
      break;
 8014fb2:	e20d      	b.n	80153d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014fb4:	4b81      	ldr	r3, [pc, #516]	@ (80151bc <tcp_process+0x590>)
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	f003 0310 	and.w	r3, r3, #16
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f000 80a1 	beq.w	8015104 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80151c0 <tcp_process+0x594>)
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	db7e      	blt.n	80150d0 <tcp_process+0x4a4>
 8014fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80151c0 <tcp_process+0x594>)
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fda:	1ad3      	subs	r3, r2, r3
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	dc77      	bgt.n	80150d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2204      	movs	r2, #4
 8014fe4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d102      	bne.n	8014ff4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014fee:	23fa      	movs	r3, #250	@ 0xfa
 8014ff0:	76bb      	strb	r3, [r7, #26]
 8014ff2:	e01d      	b.n	8015030 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ff8:	699b      	ldr	r3, [r3, #24]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d106      	bne.n	801500c <tcp_process+0x3e0>
 8014ffe:	4b76      	ldr	r3, [pc, #472]	@ (80151d8 <tcp_process+0x5ac>)
 8015000:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015004:	4975      	ldr	r1, [pc, #468]	@ (80151dc <tcp_process+0x5b0>)
 8015006:	4876      	ldr	r0, [pc, #472]	@ (80151e0 <tcp_process+0x5b4>)
 8015008:	f008 fc04 	bl	801d814 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015010:	699b      	ldr	r3, [r3, #24]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d00a      	beq.n	801502c <tcp_process+0x400>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801501a:	699b      	ldr	r3, [r3, #24]
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	6910      	ldr	r0, [r2, #16]
 8015020:	2200      	movs	r2, #0
 8015022:	6879      	ldr	r1, [r7, #4]
 8015024:	4798      	blx	r3
 8015026:	4603      	mov	r3, r0
 8015028:	76bb      	strb	r3, [r7, #26]
 801502a:	e001      	b.n	8015030 <tcp_process+0x404>
 801502c:	23f0      	movs	r3, #240	@ 0xf0
 801502e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015030:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d00a      	beq.n	801504e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015038:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801503c:	f113 0f0d 	cmn.w	r3, #13
 8015040:	d002      	beq.n	8015048 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f7fd ff8c 	bl	8012f60 <tcp_abort>
            }
            return ERR_ABRT;
 8015048:	f06f 030c 	mvn.w	r3, #12
 801504c:	e1ce      	b.n	80153ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f000 fae0 	bl	8015614 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015054:	4b63      	ldr	r3, [pc, #396]	@ (80151e4 <tcp_process+0x5b8>)
 8015056:	881b      	ldrh	r3, [r3, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d005      	beq.n	8015068 <tcp_process+0x43c>
            recv_acked--;
 801505c:	4b61      	ldr	r3, [pc, #388]	@ (80151e4 <tcp_process+0x5b8>)
 801505e:	881b      	ldrh	r3, [r3, #0]
 8015060:	3b01      	subs	r3, #1
 8015062:	b29a      	uxth	r2, r3
 8015064:	4b5f      	ldr	r3, [pc, #380]	@ (80151e4 <tcp_process+0x5b8>)
 8015066:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801506c:	009a      	lsls	r2, r3, #2
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015072:	005b      	lsls	r3, r3, #1
 8015074:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015078:	428b      	cmp	r3, r1
 801507a:	bf38      	it	cc
 801507c:	460b      	movcc	r3, r1
 801507e:	429a      	cmp	r2, r3
 8015080:	d204      	bcs.n	801508c <tcp_process+0x460>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	b29b      	uxth	r3, r3
 801508a:	e00d      	b.n	80150a8 <tcp_process+0x47c>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015096:	4293      	cmp	r3, r2
 8015098:	d904      	bls.n	80150a4 <tcp_process+0x478>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801509e:	005b      	lsls	r3, r3, #1
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	e001      	b.n	80150a8 <tcp_process+0x47c>
 80150a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80150ae:	4b4e      	ldr	r3, [pc, #312]	@ (80151e8 <tcp_process+0x5bc>)
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	f003 0320 	and.w	r3, r3, #32
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d037      	beq.n	801512a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	8b5b      	ldrh	r3, [r3, #26]
 80150be:	f043 0302 	orr.w	r3, r3, #2
 80150c2:	b29a      	uxth	r2, r3
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2207      	movs	r2, #7
 80150cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80150ce:	e02c      	b.n	801512a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150d0:	4b3b      	ldr	r3, [pc, #236]	@ (80151c0 <tcp_process+0x594>)
 80150d2:	6819      	ldr	r1, [r3, #0]
 80150d4:	4b3b      	ldr	r3, [pc, #236]	@ (80151c4 <tcp_process+0x598>)
 80150d6:	881b      	ldrh	r3, [r3, #0]
 80150d8:	461a      	mov	r2, r3
 80150da:	4b3b      	ldr	r3, [pc, #236]	@ (80151c8 <tcp_process+0x59c>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150e0:	4b3a      	ldr	r3, [pc, #232]	@ (80151cc <tcp_process+0x5a0>)
 80150e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150e4:	885b      	ldrh	r3, [r3, #2]
 80150e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150e8:	4a38      	ldr	r2, [pc, #224]	@ (80151cc <tcp_process+0x5a0>)
 80150ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150ec:	8812      	ldrh	r2, [r2, #0]
 80150ee:	b292      	uxth	r2, r2
 80150f0:	9202      	str	r2, [sp, #8]
 80150f2:	9301      	str	r3, [sp, #4]
 80150f4:	4b36      	ldr	r3, [pc, #216]	@ (80151d0 <tcp_process+0x5a4>)
 80150f6:	9300      	str	r3, [sp, #0]
 80150f8:	4b36      	ldr	r3, [pc, #216]	@ (80151d4 <tcp_process+0x5a8>)
 80150fa:	4602      	mov	r2, r0
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f002 fbcb 	bl	8017898 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015102:	e167      	b.n	80153d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015104:	4b2d      	ldr	r3, [pc, #180]	@ (80151bc <tcp_process+0x590>)
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	f003 0302 	and.w	r3, r3, #2
 801510c:	2b00      	cmp	r3, #0
 801510e:	f000 8161 	beq.w	80153d4 <tcp_process+0x7a8>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015116:	1e5a      	subs	r2, r3, #1
 8015118:	4b2b      	ldr	r3, [pc, #172]	@ (80151c8 <tcp_process+0x59c>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	429a      	cmp	r2, r3
 801511e:	f040 8159 	bne.w	80153d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f002 f9b2 	bl	801748c <tcp_rexmit>
      break;
 8015128:	e154      	b.n	80153d4 <tcp_process+0x7a8>
 801512a:	e153      	b.n	80153d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f000 fa71 	bl	8015614 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015132:	4b2d      	ldr	r3, [pc, #180]	@ (80151e8 <tcp_process+0x5bc>)
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	f003 0320 	and.w	r3, r3, #32
 801513a:	2b00      	cmp	r3, #0
 801513c:	f000 814c 	beq.w	80153d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	8b5b      	ldrh	r3, [r3, #26]
 8015144:	f043 0302 	orr.w	r3, r3, #2
 8015148:	b29a      	uxth	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2207      	movs	r2, #7
 8015152:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015154:	e140      	b.n	80153d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f000 fa5c 	bl	8015614 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801515c:	4b22      	ldr	r3, [pc, #136]	@ (80151e8 <tcp_process+0x5bc>)
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	f003 0320 	and.w	r3, r3, #32
 8015164:	2b00      	cmp	r3, #0
 8015166:	d071      	beq.n	801524c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015168:	4b14      	ldr	r3, [pc, #80]	@ (80151bc <tcp_process+0x590>)
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	f003 0310 	and.w	r3, r3, #16
 8015170:	2b00      	cmp	r3, #0
 8015172:	d060      	beq.n	8015236 <tcp_process+0x60a>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015178:	4b11      	ldr	r3, [pc, #68]	@ (80151c0 <tcp_process+0x594>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	429a      	cmp	r2, r3
 801517e:	d15a      	bne.n	8015236 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015184:	2b00      	cmp	r3, #0
 8015186:	d156      	bne.n	8015236 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	8b5b      	ldrh	r3, [r3, #26]
 801518c:	f043 0302 	orr.w	r3, r3, #2
 8015190:	b29a      	uxth	r2, r3
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7fe fdbc 	bl	8013d14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801519c:	4b13      	ldr	r3, [pc, #76]	@ (80151ec <tcp_process+0x5c0>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	687a      	ldr	r2, [r7, #4]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d105      	bne.n	80151b2 <tcp_process+0x586>
 80151a6:	4b11      	ldr	r3, [pc, #68]	@ (80151ec <tcp_process+0x5c0>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	4a0f      	ldr	r2, [pc, #60]	@ (80151ec <tcp_process+0x5c0>)
 80151ae:	6013      	str	r3, [r2, #0]
 80151b0:	e02e      	b.n	8015210 <tcp_process+0x5e4>
 80151b2:	4b0e      	ldr	r3, [pc, #56]	@ (80151ec <tcp_process+0x5c0>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	617b      	str	r3, [r7, #20]
 80151b8:	e027      	b.n	801520a <tcp_process+0x5de>
 80151ba:	bf00      	nop
 80151bc:	2400cc78 	.word	0x2400cc78
 80151c0:	2400cc70 	.word	0x2400cc70
 80151c4:	2400cc76 	.word	0x2400cc76
 80151c8:	2400cc6c 	.word	0x2400cc6c
 80151cc:	2400cc5c 	.word	0x2400cc5c
 80151d0:	24009b24 	.word	0x24009b24
 80151d4:	24009b28 	.word	0x24009b28
 80151d8:	080210bc 	.word	0x080210bc
 80151dc:	0802135c 	.word	0x0802135c
 80151e0:	08021108 	.word	0x08021108
 80151e4:	2400cc74 	.word	0x2400cc74
 80151e8:	2400cc79 	.word	0x2400cc79
 80151ec:	2400cc40 	.word	0x2400cc40
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d104      	bne.n	8015204 <tcp_process+0x5d8>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	68da      	ldr	r2, [r3, #12]
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	60da      	str	r2, [r3, #12]
 8015202:	e005      	b.n	8015210 <tcp_process+0x5e4>
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	68db      	ldr	r3, [r3, #12]
 8015208:	617b      	str	r3, [r7, #20]
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d1ef      	bne.n	80151f0 <tcp_process+0x5c4>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	60da      	str	r2, [r3, #12]
 8015216:	4b77      	ldr	r3, [pc, #476]	@ (80153f4 <tcp_process+0x7c8>)
 8015218:	2201      	movs	r2, #1
 801521a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	220a      	movs	r2, #10
 8015220:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015222:	4b75      	ldr	r3, [pc, #468]	@ (80153f8 <tcp_process+0x7cc>)
 8015224:	681a      	ldr	r2, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	60da      	str	r2, [r3, #12]
 801522a:	4a73      	ldr	r2, [pc, #460]	@ (80153f8 <tcp_process+0x7cc>)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6013      	str	r3, [r2, #0]
 8015230:	f002 fcf4 	bl	8017c1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015234:	e0d2      	b.n	80153dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	8b5b      	ldrh	r3, [r3, #26]
 801523a:	f043 0302 	orr.w	r3, r3, #2
 801523e:	b29a      	uxth	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2208      	movs	r2, #8
 8015248:	751a      	strb	r2, [r3, #20]
      break;
 801524a:	e0c7      	b.n	80153dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801524c:	4b6b      	ldr	r3, [pc, #428]	@ (80153fc <tcp_process+0x7d0>)
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	f003 0310 	and.w	r3, r3, #16
 8015254:	2b00      	cmp	r3, #0
 8015256:	f000 80c1 	beq.w	80153dc <tcp_process+0x7b0>
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801525e:	4b68      	ldr	r3, [pc, #416]	@ (8015400 <tcp_process+0x7d4>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	429a      	cmp	r2, r3
 8015264:	f040 80ba 	bne.w	80153dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801526c:	2b00      	cmp	r3, #0
 801526e:	f040 80b5 	bne.w	80153dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2206      	movs	r2, #6
 8015276:	751a      	strb	r2, [r3, #20]
      break;
 8015278:	e0b0      	b.n	80153dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f000 f9ca 	bl	8015614 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015280:	4b60      	ldr	r3, [pc, #384]	@ (8015404 <tcp_process+0x7d8>)
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	f003 0320 	and.w	r3, r3, #32
 8015288:	2b00      	cmp	r3, #0
 801528a:	f000 80a9 	beq.w	80153e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	8b5b      	ldrh	r3, [r3, #26]
 8015292:	f043 0302 	orr.w	r3, r3, #2
 8015296:	b29a      	uxth	r2, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7fe fd39 	bl	8013d14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80152a2:	4b59      	ldr	r3, [pc, #356]	@ (8015408 <tcp_process+0x7dc>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d105      	bne.n	80152b8 <tcp_process+0x68c>
 80152ac:	4b56      	ldr	r3, [pc, #344]	@ (8015408 <tcp_process+0x7dc>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	4a55      	ldr	r2, [pc, #340]	@ (8015408 <tcp_process+0x7dc>)
 80152b4:	6013      	str	r3, [r2, #0]
 80152b6:	e013      	b.n	80152e0 <tcp_process+0x6b4>
 80152b8:	4b53      	ldr	r3, [pc, #332]	@ (8015408 <tcp_process+0x7dc>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	613b      	str	r3, [r7, #16]
 80152be:	e00c      	b.n	80152da <tcp_process+0x6ae>
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d104      	bne.n	80152d4 <tcp_process+0x6a8>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	68da      	ldr	r2, [r3, #12]
 80152ce:	693b      	ldr	r3, [r7, #16]
 80152d0:	60da      	str	r2, [r3, #12]
 80152d2:	e005      	b.n	80152e0 <tcp_process+0x6b4>
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	613b      	str	r3, [r7, #16]
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1ef      	bne.n	80152c0 <tcp_process+0x694>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	60da      	str	r2, [r3, #12]
 80152e6:	4b43      	ldr	r3, [pc, #268]	@ (80153f4 <tcp_process+0x7c8>)
 80152e8:	2201      	movs	r2, #1
 80152ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	220a      	movs	r2, #10
 80152f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80152f2:	4b41      	ldr	r3, [pc, #260]	@ (80153f8 <tcp_process+0x7cc>)
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	60da      	str	r2, [r3, #12]
 80152fa:	4a3f      	ldr	r2, [pc, #252]	@ (80153f8 <tcp_process+0x7cc>)
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6013      	str	r3, [r2, #0]
 8015300:	f002 fc8c 	bl	8017c1c <tcp_timer_needed>
      }
      break;
 8015304:	e06c      	b.n	80153e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f000 f984 	bl	8015614 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801530c:	4b3b      	ldr	r3, [pc, #236]	@ (80153fc <tcp_process+0x7d0>)
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	f003 0310 	and.w	r3, r3, #16
 8015314:	2b00      	cmp	r3, #0
 8015316:	d065      	beq.n	80153e4 <tcp_process+0x7b8>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801531c:	4b38      	ldr	r3, [pc, #224]	@ (8015400 <tcp_process+0x7d4>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	429a      	cmp	r2, r3
 8015322:	d15f      	bne.n	80153e4 <tcp_process+0x7b8>
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015328:	2b00      	cmp	r3, #0
 801532a:	d15b      	bne.n	80153e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f7fe fcf1 	bl	8013d14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015332:	4b35      	ldr	r3, [pc, #212]	@ (8015408 <tcp_process+0x7dc>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	429a      	cmp	r2, r3
 801533a:	d105      	bne.n	8015348 <tcp_process+0x71c>
 801533c:	4b32      	ldr	r3, [pc, #200]	@ (8015408 <tcp_process+0x7dc>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	68db      	ldr	r3, [r3, #12]
 8015342:	4a31      	ldr	r2, [pc, #196]	@ (8015408 <tcp_process+0x7dc>)
 8015344:	6013      	str	r3, [r2, #0]
 8015346:	e013      	b.n	8015370 <tcp_process+0x744>
 8015348:	4b2f      	ldr	r3, [pc, #188]	@ (8015408 <tcp_process+0x7dc>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	60fb      	str	r3, [r7, #12]
 801534e:	e00c      	b.n	801536a <tcp_process+0x73e>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	429a      	cmp	r2, r3
 8015358:	d104      	bne.n	8015364 <tcp_process+0x738>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	68da      	ldr	r2, [r3, #12]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	60da      	str	r2, [r3, #12]
 8015362:	e005      	b.n	8015370 <tcp_process+0x744>
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	60fb      	str	r3, [r7, #12]
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1ef      	bne.n	8015350 <tcp_process+0x724>
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	60da      	str	r2, [r3, #12]
 8015376:	4b1f      	ldr	r3, [pc, #124]	@ (80153f4 <tcp_process+0x7c8>)
 8015378:	2201      	movs	r2, #1
 801537a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	220a      	movs	r2, #10
 8015380:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015382:	4b1d      	ldr	r3, [pc, #116]	@ (80153f8 <tcp_process+0x7cc>)
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	60da      	str	r2, [r3, #12]
 801538a:	4a1b      	ldr	r2, [pc, #108]	@ (80153f8 <tcp_process+0x7cc>)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6013      	str	r3, [r2, #0]
 8015390:	f002 fc44 	bl	8017c1c <tcp_timer_needed>
      }
      break;
 8015394:	e026      	b.n	80153e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f000 f93c 	bl	8015614 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801539c:	4b17      	ldr	r3, [pc, #92]	@ (80153fc <tcp_process+0x7d0>)
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	f003 0310 	and.w	r3, r3, #16
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d01f      	beq.n	80153e8 <tcp_process+0x7bc>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153ac:	4b14      	ldr	r3, [pc, #80]	@ (8015400 <tcp_process+0x7d4>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d119      	bne.n	80153e8 <tcp_process+0x7bc>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d115      	bne.n	80153e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80153bc:	4b11      	ldr	r3, [pc, #68]	@ (8015404 <tcp_process+0x7d8>)
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	f043 0310 	orr.w	r3, r3, #16
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015404 <tcp_process+0x7d8>)
 80153c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80153ca:	e00d      	b.n	80153e8 <tcp_process+0x7bc>
    default:
      break;
 80153cc:	bf00      	nop
 80153ce:	e00c      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153d0:	bf00      	nop
 80153d2:	e00a      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153d4:	bf00      	nop
 80153d6:	e008      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153d8:	bf00      	nop
 80153da:	e006      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153dc:	bf00      	nop
 80153de:	e004      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153e0:	bf00      	nop
 80153e2:	e002      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153e4:	bf00      	nop
 80153e6:	e000      	b.n	80153ea <tcp_process+0x7be>
      break;
 80153e8:	bf00      	nop
  }
  return ERR_OK;
 80153ea:	2300      	movs	r3, #0
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3724      	adds	r7, #36	@ 0x24
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd90      	pop	{r4, r7, pc}
 80153f4:	2400cc48 	.word	0x2400cc48
 80153f8:	2400cc44 	.word	0x2400cc44
 80153fc:	2400cc78 	.word	0x2400cc78
 8015400:	2400cc70 	.word	0x2400cc70
 8015404:	2400cc79 	.word	0x2400cc79
 8015408:	2400cc40 	.word	0x2400cc40

0801540c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801540c:	b590      	push	{r4, r7, lr}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d106      	bne.n	801542a <tcp_oos_insert_segment+0x1e>
 801541c:	4b3b      	ldr	r3, [pc, #236]	@ (801550c <tcp_oos_insert_segment+0x100>)
 801541e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8015422:	493b      	ldr	r1, [pc, #236]	@ (8015510 <tcp_oos_insert_segment+0x104>)
 8015424:	483b      	ldr	r0, [pc, #236]	@ (8015514 <tcp_oos_insert_segment+0x108>)
 8015426:	f008 f9f5 	bl	801d814 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	899b      	ldrh	r3, [r3, #12]
 8015430:	b29b      	uxth	r3, r3
 8015432:	4618      	mov	r0, r3
 8015434:	f7fb fb3a 	bl	8010aac <lwip_htons>
 8015438:	4603      	mov	r3, r0
 801543a:	b2db      	uxtb	r3, r3
 801543c:	f003 0301 	and.w	r3, r3, #1
 8015440:	2b00      	cmp	r3, #0
 8015442:	d028      	beq.n	8015496 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015444:	6838      	ldr	r0, [r7, #0]
 8015446:	f7fe fa63 	bl	8013910 <tcp_segs_free>
    next = NULL;
 801544a:	2300      	movs	r3, #0
 801544c:	603b      	str	r3, [r7, #0]
 801544e:	e056      	b.n	80154fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	68db      	ldr	r3, [r3, #12]
 8015454:	899b      	ldrh	r3, [r3, #12]
 8015456:	b29b      	uxth	r3, r3
 8015458:	4618      	mov	r0, r3
 801545a:	f7fb fb27 	bl	8010aac <lwip_htons>
 801545e:	4603      	mov	r3, r0
 8015460:	b2db      	uxtb	r3, r3
 8015462:	f003 0301 	and.w	r3, r3, #1
 8015466:	2b00      	cmp	r3, #0
 8015468:	d00d      	beq.n	8015486 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	899b      	ldrh	r3, [r3, #12]
 8015470:	b29c      	uxth	r4, r3
 8015472:	2001      	movs	r0, #1
 8015474:	f7fb fb1a 	bl	8010aac <lwip_htons>
 8015478:	4603      	mov	r3, r0
 801547a:	461a      	mov	r2, r3
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	4322      	orrs	r2, r4
 8015482:	b292      	uxth	r2, r2
 8015484:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	f7fe fa52 	bl	801393a <tcp_seg_free>
    while (next &&
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d00e      	beq.n	80154ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	891b      	ldrh	r3, [r3, #8]
 80154a0:	461a      	mov	r2, r3
 80154a2:	4b1d      	ldr	r3, [pc, #116]	@ (8015518 <tcp_oos_insert_segment+0x10c>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	441a      	add	r2, r3
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	68db      	ldr	r3, [r3, #12]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	6839      	ldr	r1, [r7, #0]
 80154b0:	8909      	ldrh	r1, [r1, #8]
 80154b2:	440b      	add	r3, r1
 80154b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	daca      	bge.n	8015450 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d01e      	beq.n	80154fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	891b      	ldrh	r3, [r3, #8]
 80154c4:	461a      	mov	r2, r3
 80154c6:	4b14      	ldr	r3, [pc, #80]	@ (8015518 <tcp_oos_insert_segment+0x10c>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	441a      	add	r2, r3
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	dd12      	ble.n	80154fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	68db      	ldr	r3, [r3, #12]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	b29a      	uxth	r2, r3
 80154e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015518 <tcp_oos_insert_segment+0x10c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	1ad3      	subs	r3, r2, r3
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	685a      	ldr	r2, [r3, #4]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	891b      	ldrh	r3, [r3, #8]
 80154f6:	4619      	mov	r1, r3
 80154f8:	4610      	mov	r0, r2
 80154fa:	f7fc fe07 	bl	801210c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	683a      	ldr	r2, [r7, #0]
 8015502:	601a      	str	r2, [r3, #0]
}
 8015504:	bf00      	nop
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	bd90      	pop	{r4, r7, pc}
 801550c:	080210bc 	.word	0x080210bc
 8015510:	0802137c 	.word	0x0802137c
 8015514:	08021108 	.word	0x08021108
 8015518:	2400cc6c 	.word	0x2400cc6c

0801551c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801551c:	b5b0      	push	{r4, r5, r7, lr}
 801551e:	b086      	sub	sp, #24
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801552a:	e03e      	b.n	80155aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	4618      	mov	r0, r3
 801553c:	f7fc fffa 	bl	8012534 <pbuf_clen>
 8015540:	4603      	mov	r3, r0
 8015542:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801554a:	8a7a      	ldrh	r2, [r7, #18]
 801554c:	429a      	cmp	r2, r3
 801554e:	d906      	bls.n	801555e <tcp_free_acked_segments+0x42>
 8015550:	4b2a      	ldr	r3, [pc, #168]	@ (80155fc <tcp_free_acked_segments+0xe0>)
 8015552:	f240 4257 	movw	r2, #1111	@ 0x457
 8015556:	492a      	ldr	r1, [pc, #168]	@ (8015600 <tcp_free_acked_segments+0xe4>)
 8015558:	482a      	ldr	r0, [pc, #168]	@ (8015604 <tcp_free_acked_segments+0xe8>)
 801555a:	f008 f95b 	bl	801d814 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015564:	8a7b      	ldrh	r3, [r7, #18]
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	b29a      	uxth	r2, r3
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	891a      	ldrh	r2, [r3, #8]
 8015574:	4b24      	ldr	r3, [pc, #144]	@ (8015608 <tcp_free_acked_segments+0xec>)
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	4413      	add	r3, r2
 801557a:	b29a      	uxth	r2, r3
 801557c:	4b22      	ldr	r3, [pc, #136]	@ (8015608 <tcp_free_acked_segments+0xec>)
 801557e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015580:	6978      	ldr	r0, [r7, #20]
 8015582:	f7fe f9da 	bl	801393a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801558c:	2b00      	cmp	r3, #0
 801558e:	d00c      	beq.n	80155aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d109      	bne.n	80155aa <tcp_free_acked_segments+0x8e>
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d106      	bne.n	80155aa <tcp_free_acked_segments+0x8e>
 801559c:	4b17      	ldr	r3, [pc, #92]	@ (80155fc <tcp_free_acked_segments+0xe0>)
 801559e:	f240 4261 	movw	r2, #1121	@ 0x461
 80155a2:	491a      	ldr	r1, [pc, #104]	@ (801560c <tcp_free_acked_segments+0xf0>)
 80155a4:	4817      	ldr	r0, [pc, #92]	@ (8015604 <tcp_free_acked_segments+0xe8>)
 80155a6:	f008 f935 	bl	801d814 <iprintf>
  while (seg_list != NULL &&
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d020      	beq.n	80155f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	68db      	ldr	r3, [r3, #12]
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fb fa8d 	bl	8010ad6 <lwip_htonl>
 80155bc:	4604      	mov	r4, r0
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	891b      	ldrh	r3, [r3, #8]
 80155c2:	461d      	mov	r5, r3
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	899b      	ldrh	r3, [r3, #12]
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fb fa6d 	bl	8010aac <lwip_htons>
 80155d2:	4603      	mov	r3, r0
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	f003 0303 	and.w	r3, r3, #3
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d001      	beq.n	80155e2 <tcp_free_acked_segments+0xc6>
 80155de:	2301      	movs	r3, #1
 80155e0:	e000      	b.n	80155e4 <tcp_free_acked_segments+0xc8>
 80155e2:	2300      	movs	r3, #0
 80155e4:	442b      	add	r3, r5
 80155e6:	18e2      	adds	r2, r4, r3
 80155e8:	4b09      	ldr	r3, [pc, #36]	@ (8015610 <tcp_free_acked_segments+0xf4>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	dd9c      	ble.n	801552c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80155f2:	68bb      	ldr	r3, [r7, #8]
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	3718      	adds	r7, #24
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bdb0      	pop	{r4, r5, r7, pc}
 80155fc:	080210bc 	.word	0x080210bc
 8015600:	080213a4 	.word	0x080213a4
 8015604:	08021108 	.word	0x08021108
 8015608:	2400cc74 	.word	0x2400cc74
 801560c:	080213cc 	.word	0x080213cc
 8015610:	2400cc70 	.word	0x2400cc70

08015614 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015614:	b5b0      	push	{r4, r5, r7, lr}
 8015616:	b094      	sub	sp, #80	@ 0x50
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801561c:	2300      	movs	r3, #0
 801561e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d106      	bne.n	8015634 <tcp_receive+0x20>
 8015626:	4b91      	ldr	r3, [pc, #580]	@ (801586c <tcp_receive+0x258>)
 8015628:	f240 427b 	movw	r2, #1147	@ 0x47b
 801562c:	4990      	ldr	r1, [pc, #576]	@ (8015870 <tcp_receive+0x25c>)
 801562e:	4891      	ldr	r0, [pc, #580]	@ (8015874 <tcp_receive+0x260>)
 8015630:	f008 f8f0 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	7d1b      	ldrb	r3, [r3, #20]
 8015638:	2b03      	cmp	r3, #3
 801563a:	d806      	bhi.n	801564a <tcp_receive+0x36>
 801563c:	4b8b      	ldr	r3, [pc, #556]	@ (801586c <tcp_receive+0x258>)
 801563e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015642:	498d      	ldr	r1, [pc, #564]	@ (8015878 <tcp_receive+0x264>)
 8015644:	488b      	ldr	r0, [pc, #556]	@ (8015874 <tcp_receive+0x260>)
 8015646:	f008 f8e5 	bl	801d814 <iprintf>

  if (flags & TCP_ACK) {
 801564a:	4b8c      	ldr	r3, [pc, #560]	@ (801587c <tcp_receive+0x268>)
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	f003 0310 	and.w	r3, r3, #16
 8015652:	2b00      	cmp	r3, #0
 8015654:	f000 8264 	beq.w	8015b20 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801565e:	461a      	mov	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015664:	4413      	add	r3, r2
 8015666:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801566c:	4b84      	ldr	r3, [pc, #528]	@ (8015880 <tcp_receive+0x26c>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	2b00      	cmp	r3, #0
 8015674:	db1b      	blt.n	80156ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801567a:	4b81      	ldr	r3, [pc, #516]	@ (8015880 <tcp_receive+0x26c>)
 801567c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801567e:	429a      	cmp	r2, r3
 8015680:	d106      	bne.n	8015690 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015686:	4b7f      	ldr	r3, [pc, #508]	@ (8015884 <tcp_receive+0x270>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	db0e      	blt.n	80156ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015694:	4b7b      	ldr	r3, [pc, #492]	@ (8015884 <tcp_receive+0x270>)
 8015696:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015698:	429a      	cmp	r2, r3
 801569a:	d125      	bne.n	80156e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801569c:	4b7a      	ldr	r3, [pc, #488]	@ (8015888 <tcp_receive+0x274>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	89db      	ldrh	r3, [r3, #14]
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d91c      	bls.n	80156e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80156ae:	4b76      	ldr	r3, [pc, #472]	@ (8015888 <tcp_receive+0x274>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	89db      	ldrh	r3, [r3, #14]
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d205      	bcs.n	80156d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80156d8:	4b69      	ldr	r3, [pc, #420]	@ (8015880 <tcp_receive+0x26c>)
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80156e0:	4b68      	ldr	r3, [pc, #416]	@ (8015884 <tcp_receive+0x270>)
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80156e8:	4b66      	ldr	r3, [pc, #408]	@ (8015884 <tcp_receive+0x270>)
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156f0:	1ad3      	subs	r3, r2, r3
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	dc58      	bgt.n	80157a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80156f6:	4b65      	ldr	r3, [pc, #404]	@ (801588c <tcp_receive+0x278>)
 80156f8:	881b      	ldrh	r3, [r3, #0]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d14b      	bne.n	8015796 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015702:	687a      	ldr	r2, [r7, #4]
 8015704:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015708:	4413      	add	r3, r2
 801570a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801570c:	429a      	cmp	r2, r3
 801570e:	d142      	bne.n	8015796 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015716:	2b00      	cmp	r3, #0
 8015718:	db3d      	blt.n	8015796 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801571e:	4b59      	ldr	r3, [pc, #356]	@ (8015884 <tcp_receive+0x270>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	429a      	cmp	r2, r3
 8015724:	d137      	bne.n	8015796 <tcp_receive+0x182>
              found_dupack = 1;
 8015726:	2301      	movs	r3, #1
 8015728:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015730:	2bff      	cmp	r3, #255	@ 0xff
 8015732:	d007      	beq.n	8015744 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801573a:	3301      	adds	r3, #1
 801573c:	b2da      	uxtb	r2, r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801574a:	2b03      	cmp	r3, #3
 801574c:	d91b      	bls.n	8015786 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015758:	4413      	add	r3, r2
 801575a:	b29a      	uxth	r2, r3
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015762:	429a      	cmp	r2, r3
 8015764:	d30a      	bcc.n	801577c <tcp_receive+0x168>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015770:	4413      	add	r3, r2
 8015772:	b29a      	uxth	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801577a:	e004      	b.n	8015786 <tcp_receive+0x172>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015782:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801578c:	2b02      	cmp	r3, #2
 801578e:	d902      	bls.n	8015796 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f001 fee7 	bl	8017564 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015798:	2b00      	cmp	r3, #0
 801579a:	f040 8161 	bne.w	8015a60 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2200      	movs	r2, #0
 80157a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80157a6:	e15b      	b.n	8015a60 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80157a8:	4b36      	ldr	r3, [pc, #216]	@ (8015884 <tcp_receive+0x270>)
 80157aa:	681a      	ldr	r2, [r3, #0]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157b0:	1ad3      	subs	r3, r2, r3
 80157b2:	3b01      	subs	r3, #1
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	f2c0 814e 	blt.w	8015a56 <tcp_receive+0x442>
 80157ba:	4b32      	ldr	r3, [pc, #200]	@ (8015884 <tcp_receive+0x270>)
 80157bc:	681a      	ldr	r2, [r3, #0]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f300 8146 	bgt.w	8015a56 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	8b5b      	ldrh	r3, [r3, #26]
 80157ce:	f003 0304 	and.w	r3, r3, #4
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d010      	beq.n	80157f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	8b5b      	ldrh	r3, [r3, #26]
 80157da:	f023 0304 	bic.w	r3, r3, #4
 80157de:	b29a      	uxth	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2200      	movs	r2, #0
 80157f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2200      	movs	r2, #0
 80157fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015806:	10db      	asrs	r3, r3, #3
 8015808:	b21b      	sxth	r3, r3
 801580a:	b29a      	uxth	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015812:	b29b      	uxth	r3, r3
 8015814:	4413      	add	r3, r2
 8015816:	b29b      	uxth	r3, r3
 8015818:	b21a      	sxth	r2, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015820:	4b18      	ldr	r3, [pc, #96]	@ (8015884 <tcp_receive+0x270>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	b29a      	uxth	r2, r3
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801582a:	b29b      	uxth	r3, r3
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2200      	movs	r2, #0
 8015834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015838:	4b12      	ldr	r3, [pc, #72]	@ (8015884 <tcp_receive+0x270>)
 801583a:	681a      	ldr	r2, [r3, #0]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	7d1b      	ldrb	r3, [r3, #20]
 8015844:	2b03      	cmp	r3, #3
 8015846:	f240 8097 	bls.w	8015978 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015856:	429a      	cmp	r2, r3
 8015858:	d245      	bcs.n	80158e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	8b5b      	ldrh	r3, [r3, #26]
 801585e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015862:	2b00      	cmp	r3, #0
 8015864:	d014      	beq.n	8015890 <tcp_receive+0x27c>
 8015866:	2301      	movs	r3, #1
 8015868:	e013      	b.n	8015892 <tcp_receive+0x27e>
 801586a:	bf00      	nop
 801586c:	080210bc 	.word	0x080210bc
 8015870:	080213ec 	.word	0x080213ec
 8015874:	08021108 	.word	0x08021108
 8015878:	08021408 	.word	0x08021408
 801587c:	2400cc78 	.word	0x2400cc78
 8015880:	2400cc6c 	.word	0x2400cc6c
 8015884:	2400cc70 	.word	0x2400cc70
 8015888:	2400cc5c 	.word	0x2400cc5c
 801588c:	2400cc76 	.word	0x2400cc76
 8015890:	2302      	movs	r3, #2
 8015892:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015896:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801589a:	b29a      	uxth	r2, r3
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80158a0:	fb12 f303 	smulbb	r3, r2, r3
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80158a8:	4293      	cmp	r3, r2
 80158aa:	bf28      	it	cs
 80158ac:	4613      	movcs	r3, r2
 80158ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80158b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158b8:	4413      	add	r3, r2
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d309      	bcc.n	80158da <tcp_receive+0x2c6>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80158cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158ce:	4413      	add	r3, r2
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80158d8:	e04e      	b.n	8015978 <tcp_receive+0x364>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80158e4:	e048      	b.n	8015978 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80158ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80158ee:	4413      	add	r3, r2
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d309      	bcc.n	8015910 <tcp_receive+0x2fc>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015902:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015904:	4413      	add	r3, r2
 8015906:	b29a      	uxth	r2, r3
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801590e:	e004      	b.n	801591a <tcp_receive+0x306>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015926:	429a      	cmp	r2, r3
 8015928:	d326      	bcc.n	8015978 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015936:	1ad3      	subs	r3, r2, r3
 8015938:	b29a      	uxth	r2, r3
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801594a:	4413      	add	r3, r2
 801594c:	b29a      	uxth	r2, r3
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015954:	429a      	cmp	r2, r3
 8015956:	d30a      	bcc.n	801596e <tcp_receive+0x35a>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015962:	4413      	add	r3, r2
 8015964:	b29a      	uxth	r2, r3
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801596c:	e004      	b.n	8015978 <tcp_receive+0x364>
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015974:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015980:	4a98      	ldr	r2, [pc, #608]	@ (8015be4 <tcp_receive+0x5d0>)
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f7ff fdca 	bl	801551c <tcp_free_acked_segments>
 8015988:	4602      	mov	r2, r0
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015996:	4a94      	ldr	r2, [pc, #592]	@ (8015be8 <tcp_receive+0x5d4>)
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f7ff fdbf 	bl	801551c <tcp_free_acked_segments>
 801599e:	4602      	mov	r2, r0
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d104      	bne.n	80159b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80159b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80159b4:	e002      	b.n	80159bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2200      	movs	r2, #0
 80159ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2200      	movs	r2, #0
 80159c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d103      	bne.n	80159d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2200      	movs	r2, #0
 80159ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80159d8:	4b84      	ldr	r3, [pc, #528]	@ (8015bec <tcp_receive+0x5d8>)
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	4413      	add	r3, r2
 80159de:	b29a      	uxth	r2, r3
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8b5b      	ldrh	r3, [r3, #26]
 80159ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d035      	beq.n	8015a5e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d118      	bne.n	8015a2c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d00c      	beq.n	8015a1c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a0a:	68db      	ldr	r3, [r3, #12]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7fb f861 	bl	8010ad6 <lwip_htonl>
 8015a14:	4603      	mov	r3, r0
 8015a16:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dc20      	bgt.n	8015a5e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	8b5b      	ldrh	r3, [r3, #26]
 8015a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a2a:	e018      	b.n	8015a5e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7fb f84c 	bl	8010ad6 <lwip_htonl>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	1ae3      	subs	r3, r4, r3
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	dc0b      	bgt.n	8015a5e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	8b5b      	ldrh	r3, [r3, #26]
 8015a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015a4e:	b29a      	uxth	r2, r3
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a54:	e003      	b.n	8015a5e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f001 ff70 	bl	801793c <tcp_send_empty_ack>
 8015a5c:	e000      	b.n	8015a60 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a5e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d05b      	beq.n	8015b20 <tcp_receive+0x50c>
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015a6c:	4b60      	ldr	r3, [pc, #384]	@ (8015bf0 <tcp_receive+0x5dc>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	1ad3      	subs	r3, r2, r3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	da54      	bge.n	8015b20 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015a76:	4b5f      	ldr	r3, [pc, #380]	@ (8015bf4 <tcp_receive+0x5e0>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	b29a      	uxth	r2, r3
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	1ad3      	subs	r3, r2, r3
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015a8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015a94:	10db      	asrs	r3, r3, #3
 8015a96:	b21b      	sxth	r3, r3
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015aae:	4413      	add	r3, r2
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	b21a      	sxth	r2, r3
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015ab8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	da05      	bge.n	8015acc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015ac0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015ac4:	425b      	negs	r3, r3
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015acc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ad6:	109b      	asrs	r3, r3, #2
 8015ad8:	b21b      	sxth	r3, r3
 8015ada:	b29b      	uxth	r3, r3
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015aea:	b29a      	uxth	r2, r3
 8015aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015af0:	4413      	add	r3, r2
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	b21a      	sxth	r2, r3
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015b00:	10db      	asrs	r3, r3, #3
 8015b02:	b21b      	sxth	r3, r3
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	4413      	add	r3, r2
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	b21a      	sxth	r2, r3
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015b20:	4b35      	ldr	r3, [pc, #212]	@ (8015bf8 <tcp_receive+0x5e4>)
 8015b22:	881b      	ldrh	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f000 84df 	beq.w	80164e8 <tcp_receive+0xed4>
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7d1b      	ldrb	r3, [r3, #20]
 8015b2e:	2b06      	cmp	r3, #6
 8015b30:	f200 84da 	bhi.w	80164e8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b38:	4b30      	ldr	r3, [pc, #192]	@ (8015bfc <tcp_receive+0x5e8>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f2c0 808f 	blt.w	8015c64 <tcp_receive+0x650>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8015bf8 <tcp_receive+0x5e4>)
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	4b2a      	ldr	r3, [pc, #168]	@ (8015bfc <tcp_receive+0x5e8>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	440b      	add	r3, r1
 8015b56:	1ad3      	subs	r3, r2, r3
 8015b58:	3301      	adds	r3, #1
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	f300 8082 	bgt.w	8015c64 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015b60:	4b27      	ldr	r3, [pc, #156]	@ (8015c00 <tcp_receive+0x5ec>)
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b6a:	4b24      	ldr	r3, [pc, #144]	@ (8015bfc <tcp_receive+0x5e8>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015b72:	4b23      	ldr	r3, [pc, #140]	@ (8015c00 <tcp_receive+0x5ec>)
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d106      	bne.n	8015b88 <tcp_receive+0x574>
 8015b7a:	4b22      	ldr	r3, [pc, #136]	@ (8015c04 <tcp_receive+0x5f0>)
 8015b7c:	f240 5294 	movw	r2, #1428	@ 0x594
 8015b80:	4921      	ldr	r1, [pc, #132]	@ (8015c08 <tcp_receive+0x5f4>)
 8015b82:	4822      	ldr	r0, [pc, #136]	@ (8015c0c <tcp_receive+0x5f8>)
 8015b84:	f007 fe46 	bl	801d814 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	d906      	bls.n	8015ba0 <tcp_receive+0x58c>
 8015b92:	4b1c      	ldr	r3, [pc, #112]	@ (8015c04 <tcp_receive+0x5f0>)
 8015b94:	f240 5295 	movw	r2, #1429	@ 0x595
 8015b98:	491d      	ldr	r1, [pc, #116]	@ (8015c10 <tcp_receive+0x5fc>)
 8015b9a:	481c      	ldr	r0, [pc, #112]	@ (8015c0c <tcp_receive+0x5f8>)
 8015b9c:	f007 fe3a 	bl	801d814 <iprintf>
      off = (u16_t)off32;
 8015ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ba2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015ba6:	4b16      	ldr	r3, [pc, #88]	@ (8015c00 <tcp_receive+0x5ec>)
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	891b      	ldrh	r3, [r3, #8]
 8015bac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d906      	bls.n	8015bc2 <tcp_receive+0x5ae>
 8015bb4:	4b13      	ldr	r3, [pc, #76]	@ (8015c04 <tcp_receive+0x5f0>)
 8015bb6:	f240 5297 	movw	r2, #1431	@ 0x597
 8015bba:	4916      	ldr	r1, [pc, #88]	@ (8015c14 <tcp_receive+0x600>)
 8015bbc:	4813      	ldr	r0, [pc, #76]	@ (8015c0c <tcp_receive+0x5f8>)
 8015bbe:	f007 fe29 	bl	801d814 <iprintf>
      inseg.len -= off;
 8015bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c00 <tcp_receive+0x5ec>)
 8015bc4:	891a      	ldrh	r2, [r3, #8]
 8015bc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015bca:	1ad3      	subs	r3, r2, r3
 8015bcc:	b29a      	uxth	r2, r3
 8015bce:	4b0c      	ldr	r3, [pc, #48]	@ (8015c00 <tcp_receive+0x5ec>)
 8015bd0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8015c00 <tcp_receive+0x5ec>)
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	891a      	ldrh	r2, [r3, #8]
 8015bd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015be0:	e02a      	b.n	8015c38 <tcp_receive+0x624>
 8015be2:	bf00      	nop
 8015be4:	08021424 	.word	0x08021424
 8015be8:	0802142c 	.word	0x0802142c
 8015bec:	2400cc74 	.word	0x2400cc74
 8015bf0:	2400cc70 	.word	0x2400cc70
 8015bf4:	2400cc34 	.word	0x2400cc34
 8015bf8:	2400cc76 	.word	0x2400cc76
 8015bfc:	2400cc6c 	.word	0x2400cc6c
 8015c00:	2400cc4c 	.word	0x2400cc4c
 8015c04:	080210bc 	.word	0x080210bc
 8015c08:	08021434 	.word	0x08021434
 8015c0c:	08021108 	.word	0x08021108
 8015c10:	08021444 	.word	0x08021444
 8015c14:	08021454 	.word	0x08021454
        off -= p->len;
 8015c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c1a:	895b      	ldrh	r3, [r3, #10]
 8015c1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c28:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015c2a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c2e:	2200      	movs	r2, #0
 8015c30:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c3a:	895b      	ldrh	r3, [r3, #10]
 8015c3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d8e9      	bhi.n	8015c18 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015c44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015c48:	4619      	mov	r1, r3
 8015c4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015c4c:	f7fc fb5e 	bl	801230c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c54:	4a90      	ldr	r2, [pc, #576]	@ (8015e98 <tcp_receive+0x884>)
 8015c56:	6013      	str	r3, [r2, #0]
 8015c58:	4b90      	ldr	r3, [pc, #576]	@ (8015e9c <tcp_receive+0x888>)
 8015c5a:	68db      	ldr	r3, [r3, #12]
 8015c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8015e98 <tcp_receive+0x884>)
 8015c5e:	6812      	ldr	r2, [r2, #0]
 8015c60:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015c62:	e00d      	b.n	8015c80 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015c64:	4b8c      	ldr	r3, [pc, #560]	@ (8015e98 <tcp_receive+0x884>)
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	da06      	bge.n	8015c80 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8b5b      	ldrh	r3, [r3, #26]
 8015c76:	f043 0302 	orr.w	r3, r3, #2
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c80:	4b85      	ldr	r3, [pc, #532]	@ (8015e98 <tcp_receive+0x884>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f2c0 8427 	blt.w	80164de <tcp_receive+0xeca>
 8015c90:	4b81      	ldr	r3, [pc, #516]	@ (8015e98 <tcp_receive+0x884>)
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c98:	6879      	ldr	r1, [r7, #4]
 8015c9a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c9c:	440b      	add	r3, r1
 8015c9e:	1ad3      	subs	r3, r2, r3
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	f300 841b 	bgt.w	80164de <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015cac:	4b7a      	ldr	r3, [pc, #488]	@ (8015e98 <tcp_receive+0x884>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	f040 8298 	bne.w	80161e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015cb6:	4b79      	ldr	r3, [pc, #484]	@ (8015e9c <tcp_receive+0x888>)
 8015cb8:	891c      	ldrh	r4, [r3, #8]
 8015cba:	4b78      	ldr	r3, [pc, #480]	@ (8015e9c <tcp_receive+0x888>)
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	899b      	ldrh	r3, [r3, #12]
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fa fef2 	bl	8010aac <lwip_htons>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	f003 0303 	and.w	r3, r3, #3
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d001      	beq.n	8015cd8 <tcp_receive+0x6c4>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	e000      	b.n	8015cda <tcp_receive+0x6c6>
 8015cd8:	2300      	movs	r3, #0
 8015cda:	4423      	add	r3, r4
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	4b70      	ldr	r3, [pc, #448]	@ (8015ea0 <tcp_receive+0x88c>)
 8015ce0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8015ea0 <tcp_receive+0x88c>)
 8015ce8:	881b      	ldrh	r3, [r3, #0]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d274      	bcs.n	8015dd8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015cee:	4b6b      	ldr	r3, [pc, #428]	@ (8015e9c <tcp_receive+0x888>)
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	899b      	ldrh	r3, [r3, #12]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7fa fed8 	bl	8010aac <lwip_htons>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	f003 0301 	and.w	r3, r3, #1
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d01e      	beq.n	8015d46 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015d08:	4b64      	ldr	r3, [pc, #400]	@ (8015e9c <tcp_receive+0x888>)
 8015d0a:	68db      	ldr	r3, [r3, #12]
 8015d0c:	899b      	ldrh	r3, [r3, #12]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	b21b      	sxth	r3, r3
 8015d12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015d16:	b21c      	sxth	r4, r3
 8015d18:	4b60      	ldr	r3, [pc, #384]	@ (8015e9c <tcp_receive+0x888>)
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	899b      	ldrh	r3, [r3, #12]
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7fa fec3 	bl	8010aac <lwip_htons>
 8015d26:	4603      	mov	r3, r0
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7fa febb 	bl	8010aac <lwip_htons>
 8015d36:	4603      	mov	r3, r0
 8015d38:	b21b      	sxth	r3, r3
 8015d3a:	4323      	orrs	r3, r4
 8015d3c:	b21a      	sxth	r2, r3
 8015d3e:	4b57      	ldr	r3, [pc, #348]	@ (8015e9c <tcp_receive+0x888>)
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	b292      	uxth	r2, r2
 8015d44:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015d4a:	4b54      	ldr	r3, [pc, #336]	@ (8015e9c <tcp_receive+0x888>)
 8015d4c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015d4e:	4b53      	ldr	r3, [pc, #332]	@ (8015e9c <tcp_receive+0x888>)
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	899b      	ldrh	r3, [r3, #12]
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7fa fea8 	bl	8010aac <lwip_htons>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	f003 0302 	and.w	r3, r3, #2
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d005      	beq.n	8015d74 <tcp_receive+0x760>
            inseg.len -= 1;
 8015d68:	4b4c      	ldr	r3, [pc, #304]	@ (8015e9c <tcp_receive+0x888>)
 8015d6a:	891b      	ldrh	r3, [r3, #8]
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	4b4a      	ldr	r3, [pc, #296]	@ (8015e9c <tcp_receive+0x888>)
 8015d72:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015d74:	4b49      	ldr	r3, [pc, #292]	@ (8015e9c <tcp_receive+0x888>)
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	4a48      	ldr	r2, [pc, #288]	@ (8015e9c <tcp_receive+0x888>)
 8015d7a:	8912      	ldrh	r2, [r2, #8]
 8015d7c:	4611      	mov	r1, r2
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fc f9c4 	bl	801210c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015d84:	4b45      	ldr	r3, [pc, #276]	@ (8015e9c <tcp_receive+0x888>)
 8015d86:	891c      	ldrh	r4, [r3, #8]
 8015d88:	4b44      	ldr	r3, [pc, #272]	@ (8015e9c <tcp_receive+0x888>)
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	899b      	ldrh	r3, [r3, #12]
 8015d8e:	b29b      	uxth	r3, r3
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7fa fe8b 	bl	8010aac <lwip_htons>
 8015d96:	4603      	mov	r3, r0
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	f003 0303 	and.w	r3, r3, #3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d001      	beq.n	8015da6 <tcp_receive+0x792>
 8015da2:	2301      	movs	r3, #1
 8015da4:	e000      	b.n	8015da8 <tcp_receive+0x794>
 8015da6:	2300      	movs	r3, #0
 8015da8:	4423      	add	r3, r4
 8015daa:	b29a      	uxth	r2, r3
 8015dac:	4b3c      	ldr	r3, [pc, #240]	@ (8015ea0 <tcp_receive+0x88c>)
 8015dae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015db0:	4b3b      	ldr	r3, [pc, #236]	@ (8015ea0 <tcp_receive+0x88c>)
 8015db2:	881b      	ldrh	r3, [r3, #0]
 8015db4:	461a      	mov	r2, r3
 8015db6:	4b38      	ldr	r3, [pc, #224]	@ (8015e98 <tcp_receive+0x884>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	441a      	add	r2, r3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc0:	6879      	ldr	r1, [r7, #4]
 8015dc2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015dc4:	440b      	add	r3, r1
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d006      	beq.n	8015dd8 <tcp_receive+0x7c4>
 8015dca:	4b36      	ldr	r3, [pc, #216]	@ (8015ea4 <tcp_receive+0x890>)
 8015dcc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015dd0:	4935      	ldr	r1, [pc, #212]	@ (8015ea8 <tcp_receive+0x894>)
 8015dd2:	4836      	ldr	r0, [pc, #216]	@ (8015eac <tcp_receive+0x898>)
 8015dd4:	f007 fd1e 	bl	801d814 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f000 80e6 	beq.w	8015fae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015de2:	4b2e      	ldr	r3, [pc, #184]	@ (8015e9c <tcp_receive+0x888>)
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	899b      	ldrh	r3, [r3, #12]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7fa fe5e 	bl	8010aac <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	f003 0301 	and.w	r3, r3, #1
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d010      	beq.n	8015e1e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015dfc:	e00a      	b.n	8015e14 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e02:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e08:	681a      	ldr	r2, [r3, #0]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015e0e:	68f8      	ldr	r0, [r7, #12]
 8015e10:	f7fd fd93 	bl	801393a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d1f0      	bne.n	8015dfe <tcp_receive+0x7ea>
 8015e1c:	e0c7      	b.n	8015fae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015e24:	e051      	b.n	8015eca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	899b      	ldrh	r3, [r3, #12]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fa fe3c 	bl	8010aac <lwip_htons>
 8015e34:	4603      	mov	r3, r0
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d03c      	beq.n	8015eba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015e40:	4b16      	ldr	r3, [pc, #88]	@ (8015e9c <tcp_receive+0x888>)
 8015e42:	68db      	ldr	r3, [r3, #12]
 8015e44:	899b      	ldrh	r3, [r3, #12]
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7fa fe2f 	bl	8010aac <lwip_htons>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d12f      	bne.n	8015eba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015e5a:	4b10      	ldr	r3, [pc, #64]	@ (8015e9c <tcp_receive+0x888>)
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	899b      	ldrh	r3, [r3, #12]
 8015e60:	b29c      	uxth	r4, r3
 8015e62:	2001      	movs	r0, #1
 8015e64:	f7fa fe22 	bl	8010aac <lwip_htons>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e9c <tcp_receive+0x888>)
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	4322      	orrs	r2, r4
 8015e72:	b292      	uxth	r2, r2
 8015e74:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015e76:	4b09      	ldr	r3, [pc, #36]	@ (8015e9c <tcp_receive+0x888>)
 8015e78:	891c      	ldrh	r4, [r3, #8]
 8015e7a:	4b08      	ldr	r3, [pc, #32]	@ (8015e9c <tcp_receive+0x888>)
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	899b      	ldrh	r3, [r3, #12]
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	4618      	mov	r0, r3
 8015e84:	f7fa fe12 	bl	8010aac <lwip_htons>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	f003 0303 	and.w	r3, r3, #3
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d00d      	beq.n	8015eb0 <tcp_receive+0x89c>
 8015e94:	2301      	movs	r3, #1
 8015e96:	e00c      	b.n	8015eb2 <tcp_receive+0x89e>
 8015e98:	2400cc6c 	.word	0x2400cc6c
 8015e9c:	2400cc4c 	.word	0x2400cc4c
 8015ea0:	2400cc76 	.word	0x2400cc76
 8015ea4:	080210bc 	.word	0x080210bc
 8015ea8:	08021464 	.word	0x08021464
 8015eac:	08021108 	.word	0x08021108
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	4423      	add	r3, r4
 8015eb4:	b29a      	uxth	r2, r3
 8015eb6:	4b98      	ldr	r3, [pc, #608]	@ (8016118 <tcp_receive+0xb04>)
 8015eb8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ebc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015ec4:	6938      	ldr	r0, [r7, #16]
 8015ec6:	f7fd fd38 	bl	801393a <tcp_seg_free>
            while (next &&
 8015eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00e      	beq.n	8015eee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015ed0:	4b91      	ldr	r3, [pc, #580]	@ (8016118 <tcp_receive+0xb04>)
 8015ed2:	881b      	ldrh	r3, [r3, #0]
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	4b91      	ldr	r3, [pc, #580]	@ (801611c <tcp_receive+0xb08>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	441a      	add	r2, r3
 8015edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015ee4:	8909      	ldrh	r1, [r1, #8]
 8015ee6:	440b      	add	r3, r1
 8015ee8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	da9b      	bge.n	8015e26 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d059      	beq.n	8015fa8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015ef4:	4b88      	ldr	r3, [pc, #544]	@ (8016118 <tcp_receive+0xb04>)
 8015ef6:	881b      	ldrh	r3, [r3, #0]
 8015ef8:	461a      	mov	r2, r3
 8015efa:	4b88      	ldr	r3, [pc, #544]	@ (801611c <tcp_receive+0xb08>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	441a      	add	r2, r3
 8015f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	dd4d      	ble.n	8015fa8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f0e:	68db      	ldr	r3, [r3, #12]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	4b81      	ldr	r3, [pc, #516]	@ (801611c <tcp_receive+0xb08>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	1ad3      	subs	r3, r2, r3
 8015f1c:	b29a      	uxth	r2, r3
 8015f1e:	4b80      	ldr	r3, [pc, #512]	@ (8016120 <tcp_receive+0xb0c>)
 8015f20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015f22:	4b7f      	ldr	r3, [pc, #508]	@ (8016120 <tcp_receive+0xb0c>)
 8015f24:	68db      	ldr	r3, [r3, #12]
 8015f26:	899b      	ldrh	r3, [r3, #12]
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7fa fdbe 	bl	8010aac <lwip_htons>
 8015f30:	4603      	mov	r3, r0
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	f003 0302 	and.w	r3, r3, #2
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d005      	beq.n	8015f48 <tcp_receive+0x934>
                inseg.len -= 1;
 8015f3c:	4b78      	ldr	r3, [pc, #480]	@ (8016120 <tcp_receive+0xb0c>)
 8015f3e:	891b      	ldrh	r3, [r3, #8]
 8015f40:	3b01      	subs	r3, #1
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	4b76      	ldr	r3, [pc, #472]	@ (8016120 <tcp_receive+0xb0c>)
 8015f46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015f48:	4b75      	ldr	r3, [pc, #468]	@ (8016120 <tcp_receive+0xb0c>)
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	4a74      	ldr	r2, [pc, #464]	@ (8016120 <tcp_receive+0xb0c>)
 8015f4e:	8912      	ldrh	r2, [r2, #8]
 8015f50:	4611      	mov	r1, r2
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7fc f8da 	bl	801210c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015f58:	4b71      	ldr	r3, [pc, #452]	@ (8016120 <tcp_receive+0xb0c>)
 8015f5a:	891c      	ldrh	r4, [r3, #8]
 8015f5c:	4b70      	ldr	r3, [pc, #448]	@ (8016120 <tcp_receive+0xb0c>)
 8015f5e:	68db      	ldr	r3, [r3, #12]
 8015f60:	899b      	ldrh	r3, [r3, #12]
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7fa fda1 	bl	8010aac <lwip_htons>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	f003 0303 	and.w	r3, r3, #3
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d001      	beq.n	8015f7a <tcp_receive+0x966>
 8015f76:	2301      	movs	r3, #1
 8015f78:	e000      	b.n	8015f7c <tcp_receive+0x968>
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	4423      	add	r3, r4
 8015f7e:	b29a      	uxth	r2, r3
 8015f80:	4b65      	ldr	r3, [pc, #404]	@ (8016118 <tcp_receive+0xb04>)
 8015f82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015f84:	4b64      	ldr	r3, [pc, #400]	@ (8016118 <tcp_receive+0xb04>)
 8015f86:	881b      	ldrh	r3, [r3, #0]
 8015f88:	461a      	mov	r2, r3
 8015f8a:	4b64      	ldr	r3, [pc, #400]	@ (801611c <tcp_receive+0xb08>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	441a      	add	r2, r3
 8015f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d006      	beq.n	8015fa8 <tcp_receive+0x994>
 8015f9a:	4b62      	ldr	r3, [pc, #392]	@ (8016124 <tcp_receive+0xb10>)
 8015f9c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015fa0:	4961      	ldr	r1, [pc, #388]	@ (8016128 <tcp_receive+0xb14>)
 8015fa2:	4862      	ldr	r0, [pc, #392]	@ (801612c <tcp_receive+0xb18>)
 8015fa4:	f007 fc36 	bl	801d814 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015fac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015fae:	4b5a      	ldr	r3, [pc, #360]	@ (8016118 <tcp_receive+0xb04>)
 8015fb0:	881b      	ldrh	r3, [r3, #0]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	4b59      	ldr	r3, [pc, #356]	@ (801611c <tcp_receive+0xb08>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	441a      	add	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015fc2:	4b55      	ldr	r3, [pc, #340]	@ (8016118 <tcp_receive+0xb04>)
 8015fc4:	881b      	ldrh	r3, [r3, #0]
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d206      	bcs.n	8015fd8 <tcp_receive+0x9c4>
 8015fca:	4b56      	ldr	r3, [pc, #344]	@ (8016124 <tcp_receive+0xb10>)
 8015fcc:	f240 6207 	movw	r2, #1543	@ 0x607
 8015fd0:	4957      	ldr	r1, [pc, #348]	@ (8016130 <tcp_receive+0xb1c>)
 8015fd2:	4856      	ldr	r0, [pc, #344]	@ (801612c <tcp_receive+0xb18>)
 8015fd4:	f007 fc1e 	bl	801d814 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015fdc:	4b4e      	ldr	r3, [pc, #312]	@ (8016118 <tcp_receive+0xb04>)
 8015fde:	881b      	ldrh	r3, [r3, #0]
 8015fe0:	1ad3      	subs	r3, r2, r3
 8015fe2:	b29a      	uxth	r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f7fc ffc5 	bl	8012f78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015fee:	4b4c      	ldr	r3, [pc, #304]	@ (8016120 <tcp_receive+0xb0c>)
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	891b      	ldrh	r3, [r3, #8]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d006      	beq.n	8016006 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015ff8:	4b49      	ldr	r3, [pc, #292]	@ (8016120 <tcp_receive+0xb0c>)
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8016134 <tcp_receive+0xb20>)
 8015ffe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016000:	4b47      	ldr	r3, [pc, #284]	@ (8016120 <tcp_receive+0xb0c>)
 8016002:	2200      	movs	r2, #0
 8016004:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016006:	4b46      	ldr	r3, [pc, #280]	@ (8016120 <tcp_receive+0xb0c>)
 8016008:	68db      	ldr	r3, [r3, #12]
 801600a:	899b      	ldrh	r3, [r3, #12]
 801600c:	b29b      	uxth	r3, r3
 801600e:	4618      	mov	r0, r3
 8016010:	f7fa fd4c 	bl	8010aac <lwip_htons>
 8016014:	4603      	mov	r3, r0
 8016016:	b2db      	uxtb	r3, r3
 8016018:	f003 0301 	and.w	r3, r3, #1
 801601c:	2b00      	cmp	r3, #0
 801601e:	f000 80b8 	beq.w	8016192 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016022:	4b45      	ldr	r3, [pc, #276]	@ (8016138 <tcp_receive+0xb24>)
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	f043 0320 	orr.w	r3, r3, #32
 801602a:	b2da      	uxtb	r2, r3
 801602c:	4b42      	ldr	r3, [pc, #264]	@ (8016138 <tcp_receive+0xb24>)
 801602e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016030:	e0af      	b.n	8016192 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016036:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801603c:	68db      	ldr	r3, [r3, #12]
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	4a36      	ldr	r2, [pc, #216]	@ (801611c <tcp_receive+0xb08>)
 8016042:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	891b      	ldrh	r3, [r3, #8]
 8016048:	461c      	mov	r4, r3
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	68db      	ldr	r3, [r3, #12]
 801604e:	899b      	ldrh	r3, [r3, #12]
 8016050:	b29b      	uxth	r3, r3
 8016052:	4618      	mov	r0, r3
 8016054:	f7fa fd2a 	bl	8010aac <lwip_htons>
 8016058:	4603      	mov	r3, r0
 801605a:	b2db      	uxtb	r3, r3
 801605c:	f003 0303 	and.w	r3, r3, #3
 8016060:	2b00      	cmp	r3, #0
 8016062:	d001      	beq.n	8016068 <tcp_receive+0xa54>
 8016064:	2301      	movs	r3, #1
 8016066:	e000      	b.n	801606a <tcp_receive+0xa56>
 8016068:	2300      	movs	r3, #0
 801606a:	191a      	adds	r2, r3, r4
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016070:	441a      	add	r2, r3
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801607a:	461c      	mov	r4, r3
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	891b      	ldrh	r3, [r3, #8]
 8016080:	461d      	mov	r5, r3
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	899b      	ldrh	r3, [r3, #12]
 8016088:	b29b      	uxth	r3, r3
 801608a:	4618      	mov	r0, r3
 801608c:	f7fa fd0e 	bl	8010aac <lwip_htons>
 8016090:	4603      	mov	r3, r0
 8016092:	b2db      	uxtb	r3, r3
 8016094:	f003 0303 	and.w	r3, r3, #3
 8016098:	2b00      	cmp	r3, #0
 801609a:	d001      	beq.n	80160a0 <tcp_receive+0xa8c>
 801609c:	2301      	movs	r3, #1
 801609e:	e000      	b.n	80160a2 <tcp_receive+0xa8e>
 80160a0:	2300      	movs	r3, #0
 80160a2:	442b      	add	r3, r5
 80160a4:	429c      	cmp	r4, r3
 80160a6:	d206      	bcs.n	80160b6 <tcp_receive+0xaa2>
 80160a8:	4b1e      	ldr	r3, [pc, #120]	@ (8016124 <tcp_receive+0xb10>)
 80160aa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80160ae:	4923      	ldr	r1, [pc, #140]	@ (801613c <tcp_receive+0xb28>)
 80160b0:	481e      	ldr	r0, [pc, #120]	@ (801612c <tcp_receive+0xb18>)
 80160b2:	f007 fbaf 	bl	801d814 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	891b      	ldrh	r3, [r3, #8]
 80160ba:	461c      	mov	r4, r3
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	68db      	ldr	r3, [r3, #12]
 80160c0:	899b      	ldrh	r3, [r3, #12]
 80160c2:	b29b      	uxth	r3, r3
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7fa fcf1 	bl	8010aac <lwip_htons>
 80160ca:	4603      	mov	r3, r0
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	f003 0303 	and.w	r3, r3, #3
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <tcp_receive+0xac6>
 80160d6:	2301      	movs	r3, #1
 80160d8:	e000      	b.n	80160dc <tcp_receive+0xac8>
 80160da:	2300      	movs	r3, #0
 80160dc:	1919      	adds	r1, r3, r4
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80160e2:	b28b      	uxth	r3, r1
 80160e4:	1ad3      	subs	r3, r2, r3
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7fc ff43 	bl	8012f78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	891b      	ldrh	r3, [r3, #8]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d028      	beq.n	801614e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80160fc:	4b0d      	ldr	r3, [pc, #52]	@ (8016134 <tcp_receive+0xb20>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d01d      	beq.n	8016140 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016104:	4b0b      	ldr	r3, [pc, #44]	@ (8016134 <tcp_receive+0xb20>)
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	4619      	mov	r1, r3
 801610e:	4610      	mov	r0, r2
 8016110:	f7fc fa50 	bl	80125b4 <pbuf_cat>
 8016114:	e018      	b.n	8016148 <tcp_receive+0xb34>
 8016116:	bf00      	nop
 8016118:	2400cc76 	.word	0x2400cc76
 801611c:	2400cc6c 	.word	0x2400cc6c
 8016120:	2400cc4c 	.word	0x2400cc4c
 8016124:	080210bc 	.word	0x080210bc
 8016128:	0802149c 	.word	0x0802149c
 801612c:	08021108 	.word	0x08021108
 8016130:	080214d8 	.word	0x080214d8
 8016134:	2400cc7c 	.word	0x2400cc7c
 8016138:	2400cc79 	.word	0x2400cc79
 801613c:	080214f8 	.word	0x080214f8
            } else {
              recv_data = cseg->p;
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	4a70      	ldr	r2, [pc, #448]	@ (8016308 <tcp_receive+0xcf4>)
 8016146:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	2200      	movs	r2, #0
 801614c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	68db      	ldr	r3, [r3, #12]
 8016152:	899b      	ldrh	r3, [r3, #12]
 8016154:	b29b      	uxth	r3, r3
 8016156:	4618      	mov	r0, r3
 8016158:	f7fa fca8 	bl	8010aac <lwip_htons>
 801615c:	4603      	mov	r3, r0
 801615e:	b2db      	uxtb	r3, r3
 8016160:	f003 0301 	and.w	r3, r3, #1
 8016164:	2b00      	cmp	r3, #0
 8016166:	d00d      	beq.n	8016184 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016168:	4b68      	ldr	r3, [pc, #416]	@ (801630c <tcp_receive+0xcf8>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	f043 0320 	orr.w	r3, r3, #32
 8016170:	b2da      	uxtb	r2, r3
 8016172:	4b66      	ldr	r3, [pc, #408]	@ (801630c <tcp_receive+0xcf8>)
 8016174:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	7d1b      	ldrb	r3, [r3, #20]
 801617a:	2b04      	cmp	r3, #4
 801617c:	d102      	bne.n	8016184 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	2207      	movs	r2, #7
 8016182:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801618c:	68b8      	ldr	r0, [r7, #8]
 801618e:	f7fd fbd4 	bl	801393a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016196:	2b00      	cmp	r3, #0
 8016198:	d008      	beq.n	80161ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	685a      	ldr	r2, [r3, #4]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80161a6:	429a      	cmp	r2, r3
 80161a8:	f43f af43 	beq.w	8016032 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	8b5b      	ldrh	r3, [r3, #26]
 80161b0:	f003 0301 	and.w	r3, r3, #1
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00e      	beq.n	80161d6 <tcp_receive+0xbc2>
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	8b5b      	ldrh	r3, [r3, #26]
 80161bc:	f023 0301 	bic.w	r3, r3, #1
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	835a      	strh	r2, [r3, #26]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	8b5b      	ldrh	r3, [r3, #26]
 80161ca:	f043 0302 	orr.w	r3, r3, #2
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161d4:	e187      	b.n	80164e6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	8b5b      	ldrh	r3, [r3, #26]
 80161da:	f043 0301 	orr.w	r3, r3, #1
 80161de:	b29a      	uxth	r2, r3
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161e4:	e17f      	b.n	80164e6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d106      	bne.n	80161fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80161ee:	4848      	ldr	r0, [pc, #288]	@ (8016310 <tcp_receive+0xcfc>)
 80161f0:	f7fd fbbc 	bl	801396c <tcp_seg_copy>
 80161f4:	4602      	mov	r2, r0
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80161fa:	e16c      	b.n	80164d6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80161fc:	2300      	movs	r3, #0
 80161fe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016206:	e156      	b.n	80164b6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8016208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	685a      	ldr	r2, [r3, #4]
 801620e:	4b41      	ldr	r3, [pc, #260]	@ (8016314 <tcp_receive+0xd00>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	429a      	cmp	r2, r3
 8016214:	d11d      	bne.n	8016252 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016216:	4b3e      	ldr	r3, [pc, #248]	@ (8016310 <tcp_receive+0xcfc>)
 8016218:	891a      	ldrh	r2, [r3, #8]
 801621a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801621c:	891b      	ldrh	r3, [r3, #8]
 801621e:	429a      	cmp	r2, r3
 8016220:	f240 814e 	bls.w	80164c0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016224:	483a      	ldr	r0, [pc, #232]	@ (8016310 <tcp_receive+0xcfc>)
 8016226:	f7fd fba1 	bl	801396c <tcp_seg_copy>
 801622a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 8148 	beq.w	80164c4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016236:	2b00      	cmp	r3, #0
 8016238:	d003      	beq.n	8016242 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801623c:	697a      	ldr	r2, [r7, #20]
 801623e:	601a      	str	r2, [r3, #0]
 8016240:	e002      	b.n	8016248 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	697a      	ldr	r2, [r7, #20]
 8016246:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016248:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801624a:	6978      	ldr	r0, [r7, #20]
 801624c:	f7ff f8de 	bl	801540c <tcp_oos_insert_segment>
                }
                break;
 8016250:	e138      	b.n	80164c4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016254:	2b00      	cmp	r3, #0
 8016256:	d117      	bne.n	8016288 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016258:	4b2e      	ldr	r3, [pc, #184]	@ (8016314 <tcp_receive+0xd00>)
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	da57      	bge.n	8016318 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016268:	4829      	ldr	r0, [pc, #164]	@ (8016310 <tcp_receive+0xcfc>)
 801626a:	f7fd fb7f 	bl	801396c <tcp_seg_copy>
 801626e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016270:	69bb      	ldr	r3, [r7, #24]
 8016272:	2b00      	cmp	r3, #0
 8016274:	f000 8128 	beq.w	80164c8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	69ba      	ldr	r2, [r7, #24]
 801627c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801627e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016280:	69b8      	ldr	r0, [r7, #24]
 8016282:	f7ff f8c3 	bl	801540c <tcp_oos_insert_segment>
                  }
                  break;
 8016286:	e11f      	b.n	80164c8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016288:	4b22      	ldr	r3, [pc, #136]	@ (8016314 <tcp_receive+0xd00>)
 801628a:	681a      	ldr	r2, [r3, #0]
 801628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	1ad3      	subs	r3, r2, r3
 8016294:	3b01      	subs	r3, #1
 8016296:	2b00      	cmp	r3, #0
 8016298:	db3e      	blt.n	8016318 <tcp_receive+0xd04>
 801629a:	4b1e      	ldr	r3, [pc, #120]	@ (8016314 <tcp_receive+0xd00>)
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162a0:	68db      	ldr	r3, [r3, #12]
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	1ad3      	subs	r3, r2, r3
 80162a6:	3301      	adds	r3, #1
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	dc35      	bgt.n	8016318 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80162ac:	4818      	ldr	r0, [pc, #96]	@ (8016310 <tcp_receive+0xcfc>)
 80162ae:	f7fd fb5d 	bl	801396c <tcp_seg_copy>
 80162b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f000 8108 	beq.w	80164cc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80162bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80162c4:	8912      	ldrh	r2, [r2, #8]
 80162c6:	441a      	add	r2, r3
 80162c8:	4b12      	ldr	r3, [pc, #72]	@ (8016314 <tcp_receive+0xd00>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	dd12      	ble.n	80162f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80162d2:	4b10      	ldr	r3, [pc, #64]	@ (8016314 <tcp_receive+0xd00>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	b29a      	uxth	r2, r3
 80162d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	1ad3      	subs	r3, r2, r3
 80162e2:	b29a      	uxth	r2, r3
 80162e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80162e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162ea:	685a      	ldr	r2, [r3, #4]
 80162ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162ee:	891b      	ldrh	r3, [r3, #8]
 80162f0:	4619      	mov	r1, r3
 80162f2:	4610      	mov	r0, r2
 80162f4:	f7fb ff0a 	bl	801210c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80162f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162fa:	69fa      	ldr	r2, [r7, #28]
 80162fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80162fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016300:	69f8      	ldr	r0, [r7, #28]
 8016302:	f7ff f883 	bl	801540c <tcp_oos_insert_segment>
                  }
                  break;
 8016306:	e0e1      	b.n	80164cc <tcp_receive+0xeb8>
 8016308:	2400cc7c 	.word	0x2400cc7c
 801630c:	2400cc79 	.word	0x2400cc79
 8016310:	2400cc4c 	.word	0x2400cc4c
 8016314:	2400cc6c 	.word	0x2400cc6c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801631a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	f040 80c5 	bne.w	80164b0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016326:	4b7f      	ldr	r3, [pc, #508]	@ (8016524 <tcp_receive+0xf10>)
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016332:	2b00      	cmp	r3, #0
 8016334:	f340 80bc 	ble.w	80164b0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	899b      	ldrh	r3, [r3, #12]
 801633e:	b29b      	uxth	r3, r3
 8016340:	4618      	mov	r0, r3
 8016342:	f7fa fbb3 	bl	8010aac <lwip_htons>
 8016346:	4603      	mov	r3, r0
 8016348:	b2db      	uxtb	r3, r3
 801634a:	f003 0301 	and.w	r3, r3, #1
 801634e:	2b00      	cmp	r3, #0
 8016350:	f040 80be 	bne.w	80164d0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016354:	4874      	ldr	r0, [pc, #464]	@ (8016528 <tcp_receive+0xf14>)
 8016356:	f7fd fb09 	bl	801396c <tcp_seg_copy>
 801635a:	4602      	mov	r2, r0
 801635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801635e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	f000 80b5 	beq.w	80164d4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016372:	8912      	ldrh	r2, [r2, #8]
 8016374:	441a      	add	r2, r3
 8016376:	4b6b      	ldr	r3, [pc, #428]	@ (8016524 <tcp_receive+0xf10>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	1ad3      	subs	r3, r2, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	dd12      	ble.n	80163a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016380:	4b68      	ldr	r3, [pc, #416]	@ (8016524 <tcp_receive+0xf10>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	b29a      	uxth	r2, r3
 8016386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016388:	68db      	ldr	r3, [r3, #12]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	b29b      	uxth	r3, r3
 801638e:	1ad3      	subs	r3, r2, r3
 8016390:	b29a      	uxth	r2, r3
 8016392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016394:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016398:	685a      	ldr	r2, [r3, #4]
 801639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801639c:	891b      	ldrh	r3, [r3, #8]
 801639e:	4619      	mov	r1, r3
 80163a0:	4610      	mov	r0, r2
 80163a2:	f7fb feb3 	bl	801210c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80163a6:	4b61      	ldr	r3, [pc, #388]	@ (801652c <tcp_receive+0xf18>)
 80163a8:	881b      	ldrh	r3, [r3, #0]
 80163aa:	461a      	mov	r2, r3
 80163ac:	4b5d      	ldr	r3, [pc, #372]	@ (8016524 <tcp_receive+0xf10>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	441a      	add	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163b6:	6879      	ldr	r1, [r7, #4]
 80163b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80163ba:	440b      	add	r3, r1
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	2b00      	cmp	r3, #0
 80163c0:	f340 8088 	ble.w	80164d4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80163c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	68db      	ldr	r3, [r3, #12]
 80163ca:	899b      	ldrh	r3, [r3, #12]
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7fa fb6c 	bl	8010aac <lwip_htons>
 80163d4:	4603      	mov	r3, r0
 80163d6:	b2db      	uxtb	r3, r3
 80163d8:	f003 0301 	and.w	r3, r3, #1
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d021      	beq.n	8016424 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80163e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	68db      	ldr	r3, [r3, #12]
 80163e6:	899b      	ldrh	r3, [r3, #12]
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	b21b      	sxth	r3, r3
 80163ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80163f0:	b21c      	sxth	r4, r3
 80163f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	68db      	ldr	r3, [r3, #12]
 80163f8:	899b      	ldrh	r3, [r3, #12]
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7fa fb55 	bl	8010aac <lwip_htons>
 8016402:	4603      	mov	r3, r0
 8016404:	b2db      	uxtb	r3, r3
 8016406:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801640a:	b29b      	uxth	r3, r3
 801640c:	4618      	mov	r0, r3
 801640e:	f7fa fb4d 	bl	8010aac <lwip_htons>
 8016412:	4603      	mov	r3, r0
 8016414:	b21b      	sxth	r3, r3
 8016416:	4323      	orrs	r3, r4
 8016418:	b21a      	sxth	r2, r3
 801641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	b292      	uxth	r2, r2
 8016422:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016428:	b29a      	uxth	r2, r3
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801642e:	4413      	add	r3, r2
 8016430:	b299      	uxth	r1, r3
 8016432:	4b3c      	ldr	r3, [pc, #240]	@ (8016524 <tcp_receive+0xf10>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	b29a      	uxth	r2, r3
 8016438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	1a8a      	subs	r2, r1, r2
 801643e:	b292      	uxth	r2, r2
 8016440:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	685a      	ldr	r2, [r3, #4]
 8016448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	891b      	ldrh	r3, [r3, #8]
 801644e:	4619      	mov	r1, r3
 8016450:	4610      	mov	r0, r2
 8016452:	f7fb fe5b 	bl	801210c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	891c      	ldrh	r4, [r3, #8]
 801645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	899b      	ldrh	r3, [r3, #12]
 8016464:	b29b      	uxth	r3, r3
 8016466:	4618      	mov	r0, r3
 8016468:	f7fa fb20 	bl	8010aac <lwip_htons>
 801646c:	4603      	mov	r3, r0
 801646e:	b2db      	uxtb	r3, r3
 8016470:	f003 0303 	and.w	r3, r3, #3
 8016474:	2b00      	cmp	r3, #0
 8016476:	d001      	beq.n	801647c <tcp_receive+0xe68>
 8016478:	2301      	movs	r3, #1
 801647a:	e000      	b.n	801647e <tcp_receive+0xe6a>
 801647c:	2300      	movs	r3, #0
 801647e:	4423      	add	r3, r4
 8016480:	b29a      	uxth	r2, r3
 8016482:	4b2a      	ldr	r3, [pc, #168]	@ (801652c <tcp_receive+0xf18>)
 8016484:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016486:	4b29      	ldr	r3, [pc, #164]	@ (801652c <tcp_receive+0xf18>)
 8016488:	881b      	ldrh	r3, [r3, #0]
 801648a:	461a      	mov	r2, r3
 801648c:	4b25      	ldr	r3, [pc, #148]	@ (8016524 <tcp_receive+0xf10>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	441a      	add	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016496:	6879      	ldr	r1, [r7, #4]
 8016498:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801649a:	440b      	add	r3, r1
 801649c:	429a      	cmp	r2, r3
 801649e:	d019      	beq.n	80164d4 <tcp_receive+0xec0>
 80164a0:	4b23      	ldr	r3, [pc, #140]	@ (8016530 <tcp_receive+0xf1c>)
 80164a2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80164a6:	4923      	ldr	r1, [pc, #140]	@ (8016534 <tcp_receive+0xf20>)
 80164a8:	4823      	ldr	r0, [pc, #140]	@ (8016538 <tcp_receive+0xf24>)
 80164aa:	f007 f9b3 	bl	801d814 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80164ae:	e011      	b.n	80164d4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80164b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80164b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	f47f aea5 	bne.w	8016208 <tcp_receive+0xbf4>
 80164be:	e00a      	b.n	80164d6 <tcp_receive+0xec2>
                break;
 80164c0:	bf00      	nop
 80164c2:	e008      	b.n	80164d6 <tcp_receive+0xec2>
                break;
 80164c4:	bf00      	nop
 80164c6:	e006      	b.n	80164d6 <tcp_receive+0xec2>
                  break;
 80164c8:	bf00      	nop
 80164ca:	e004      	b.n	80164d6 <tcp_receive+0xec2>
                  break;
 80164cc:	bf00      	nop
 80164ce:	e002      	b.n	80164d6 <tcp_receive+0xec2>
                  break;
 80164d0:	bf00      	nop
 80164d2:	e000      	b.n	80164d6 <tcp_receive+0xec2>
                break;
 80164d4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f001 fa30 	bl	801793c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80164dc:	e003      	b.n	80164e6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f001 fa2c 	bl	801793c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80164e4:	e01a      	b.n	801651c <tcp_receive+0xf08>
 80164e6:	e019      	b.n	801651c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80164e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016524 <tcp_receive+0xf10>)
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164f0:	1ad3      	subs	r3, r2, r3
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	db0a      	blt.n	801650c <tcp_receive+0xef8>
 80164f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016524 <tcp_receive+0xf10>)
 80164f8:	681a      	ldr	r2, [r3, #0]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164fe:	6879      	ldr	r1, [r7, #4]
 8016500:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016502:	440b      	add	r3, r1
 8016504:	1ad3      	subs	r3, r2, r3
 8016506:	3301      	adds	r3, #1
 8016508:	2b00      	cmp	r3, #0
 801650a:	dd07      	ble.n	801651c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	8b5b      	ldrh	r3, [r3, #26]
 8016510:	f043 0302 	orr.w	r3, r3, #2
 8016514:	b29a      	uxth	r2, r3
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801651a:	e7ff      	b.n	801651c <tcp_receive+0xf08>
 801651c:	bf00      	nop
 801651e:	3750      	adds	r7, #80	@ 0x50
 8016520:	46bd      	mov	sp, r7
 8016522:	bdb0      	pop	{r4, r5, r7, pc}
 8016524:	2400cc6c 	.word	0x2400cc6c
 8016528:	2400cc4c 	.word	0x2400cc4c
 801652c:	2400cc76 	.word	0x2400cc76
 8016530:	080210bc 	.word	0x080210bc
 8016534:	08021464 	.word	0x08021464
 8016538:	08021108 	.word	0x08021108

0801653c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801653c:	b480      	push	{r7}
 801653e:	b083      	sub	sp, #12
 8016540:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016542:	4b15      	ldr	r3, [pc, #84]	@ (8016598 <tcp_get_next_optbyte+0x5c>)
 8016544:	881b      	ldrh	r3, [r3, #0]
 8016546:	1c5a      	adds	r2, r3, #1
 8016548:	b291      	uxth	r1, r2
 801654a:	4a13      	ldr	r2, [pc, #76]	@ (8016598 <tcp_get_next_optbyte+0x5c>)
 801654c:	8011      	strh	r1, [r2, #0]
 801654e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016550:	4b12      	ldr	r3, [pc, #72]	@ (801659c <tcp_get_next_optbyte+0x60>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d004      	beq.n	8016562 <tcp_get_next_optbyte+0x26>
 8016558:	4b11      	ldr	r3, [pc, #68]	@ (80165a0 <tcp_get_next_optbyte+0x64>)
 801655a:	881b      	ldrh	r3, [r3, #0]
 801655c:	88fa      	ldrh	r2, [r7, #6]
 801655e:	429a      	cmp	r2, r3
 8016560:	d208      	bcs.n	8016574 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016562:	4b10      	ldr	r3, [pc, #64]	@ (80165a4 <tcp_get_next_optbyte+0x68>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	3314      	adds	r3, #20
 8016568:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801656a:	88fb      	ldrh	r3, [r7, #6]
 801656c:	683a      	ldr	r2, [r7, #0]
 801656e:	4413      	add	r3, r2
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	e00b      	b.n	801658c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016574:	88fb      	ldrh	r3, [r7, #6]
 8016576:	b2da      	uxtb	r2, r3
 8016578:	4b09      	ldr	r3, [pc, #36]	@ (80165a0 <tcp_get_next_optbyte+0x64>)
 801657a:	881b      	ldrh	r3, [r3, #0]
 801657c:	b2db      	uxtb	r3, r3
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016582:	4b06      	ldr	r3, [pc, #24]	@ (801659c <tcp_get_next_optbyte+0x60>)
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	797b      	ldrb	r3, [r7, #5]
 8016588:	4413      	add	r3, r2
 801658a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801658c:	4618      	mov	r0, r3
 801658e:	370c      	adds	r7, #12
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr
 8016598:	2400cc68 	.word	0x2400cc68
 801659c:	2400cc64 	.word	0x2400cc64
 80165a0:	2400cc62 	.word	0x2400cc62
 80165a4:	2400cc5c 	.word	0x2400cc5c

080165a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b084      	sub	sp, #16
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d106      	bne.n	80165c4 <tcp_parseopt+0x1c>
 80165b6:	4b32      	ldr	r3, [pc, #200]	@ (8016680 <tcp_parseopt+0xd8>)
 80165b8:	f240 727d 	movw	r2, #1917	@ 0x77d
 80165bc:	4931      	ldr	r1, [pc, #196]	@ (8016684 <tcp_parseopt+0xdc>)
 80165be:	4832      	ldr	r0, [pc, #200]	@ (8016688 <tcp_parseopt+0xe0>)
 80165c0:	f007 f928 	bl	801d814 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80165c4:	4b31      	ldr	r3, [pc, #196]	@ (801668c <tcp_parseopt+0xe4>)
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d056      	beq.n	801667a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80165cc:	4b30      	ldr	r3, [pc, #192]	@ (8016690 <tcp_parseopt+0xe8>)
 80165ce:	2200      	movs	r2, #0
 80165d0:	801a      	strh	r2, [r3, #0]
 80165d2:	e046      	b.n	8016662 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80165d4:	f7ff ffb2 	bl	801653c <tcp_get_next_optbyte>
 80165d8:	4603      	mov	r3, r0
 80165da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80165dc:	7bfb      	ldrb	r3, [r7, #15]
 80165de:	2b02      	cmp	r3, #2
 80165e0:	d006      	beq.n	80165f0 <tcp_parseopt+0x48>
 80165e2:	2b02      	cmp	r3, #2
 80165e4:	dc2a      	bgt.n	801663c <tcp_parseopt+0x94>
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d042      	beq.n	8016670 <tcp_parseopt+0xc8>
 80165ea:	2b01      	cmp	r3, #1
 80165ec:	d038      	beq.n	8016660 <tcp_parseopt+0xb8>
 80165ee:	e025      	b.n	801663c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80165f0:	f7ff ffa4 	bl	801653c <tcp_get_next_optbyte>
 80165f4:	4603      	mov	r3, r0
 80165f6:	2b04      	cmp	r3, #4
 80165f8:	d13c      	bne.n	8016674 <tcp_parseopt+0xcc>
 80165fa:	4b25      	ldr	r3, [pc, #148]	@ (8016690 <tcp_parseopt+0xe8>)
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	3301      	adds	r3, #1
 8016600:	4a22      	ldr	r2, [pc, #136]	@ (801668c <tcp_parseopt+0xe4>)
 8016602:	8812      	ldrh	r2, [r2, #0]
 8016604:	4293      	cmp	r3, r2
 8016606:	da35      	bge.n	8016674 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016608:	f7ff ff98 	bl	801653c <tcp_get_next_optbyte>
 801660c:	4603      	mov	r3, r0
 801660e:	021b      	lsls	r3, r3, #8
 8016610:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016612:	f7ff ff93 	bl	801653c <tcp_get_next_optbyte>
 8016616:	4603      	mov	r3, r0
 8016618:	461a      	mov	r2, r3
 801661a:	89bb      	ldrh	r3, [r7, #12]
 801661c:	4313      	orrs	r3, r2
 801661e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016620:	89bb      	ldrh	r3, [r7, #12]
 8016622:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016626:	d804      	bhi.n	8016632 <tcp_parseopt+0x8a>
 8016628:	89bb      	ldrh	r3, [r7, #12]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <tcp_parseopt+0x8a>
 801662e:	89ba      	ldrh	r2, [r7, #12]
 8016630:	e001      	b.n	8016636 <tcp_parseopt+0x8e>
 8016632:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801663a:	e012      	b.n	8016662 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801663c:	f7ff ff7e 	bl	801653c <tcp_get_next_optbyte>
 8016640:	4603      	mov	r3, r0
 8016642:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016644:	7afb      	ldrb	r3, [r7, #11]
 8016646:	2b01      	cmp	r3, #1
 8016648:	d916      	bls.n	8016678 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801664a:	7afb      	ldrb	r3, [r7, #11]
 801664c:	b29a      	uxth	r2, r3
 801664e:	4b10      	ldr	r3, [pc, #64]	@ (8016690 <tcp_parseopt+0xe8>)
 8016650:	881b      	ldrh	r3, [r3, #0]
 8016652:	4413      	add	r3, r2
 8016654:	b29b      	uxth	r3, r3
 8016656:	3b02      	subs	r3, #2
 8016658:	b29a      	uxth	r2, r3
 801665a:	4b0d      	ldr	r3, [pc, #52]	@ (8016690 <tcp_parseopt+0xe8>)
 801665c:	801a      	strh	r2, [r3, #0]
 801665e:	e000      	b.n	8016662 <tcp_parseopt+0xba>
          break;
 8016660:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016662:	4b0b      	ldr	r3, [pc, #44]	@ (8016690 <tcp_parseopt+0xe8>)
 8016664:	881a      	ldrh	r2, [r3, #0]
 8016666:	4b09      	ldr	r3, [pc, #36]	@ (801668c <tcp_parseopt+0xe4>)
 8016668:	881b      	ldrh	r3, [r3, #0]
 801666a:	429a      	cmp	r2, r3
 801666c:	d3b2      	bcc.n	80165d4 <tcp_parseopt+0x2c>
 801666e:	e004      	b.n	801667a <tcp_parseopt+0xd2>
          return;
 8016670:	bf00      	nop
 8016672:	e002      	b.n	801667a <tcp_parseopt+0xd2>
            return;
 8016674:	bf00      	nop
 8016676:	e000      	b.n	801667a <tcp_parseopt+0xd2>
            return;
 8016678:	bf00      	nop
      }
    }
  }
}
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	080210bc 	.word	0x080210bc
 8016684:	08021520 	.word	0x08021520
 8016688:	08021108 	.word	0x08021108
 801668c:	2400cc60 	.word	0x2400cc60
 8016690:	2400cc68 	.word	0x2400cc68

08016694 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016694:	b480      	push	{r7}
 8016696:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016698:	4b05      	ldr	r3, [pc, #20]	@ (80166b0 <tcp_trigger_input_pcb_close+0x1c>)
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	f043 0310 	orr.w	r3, r3, #16
 80166a0:	b2da      	uxtb	r2, r3
 80166a2:	4b03      	ldr	r3, [pc, #12]	@ (80166b0 <tcp_trigger_input_pcb_close+0x1c>)
 80166a4:	701a      	strb	r2, [r3, #0]
}
 80166a6:	bf00      	nop
 80166a8:	46bd      	mov	sp, r7
 80166aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ae:	4770      	bx	lr
 80166b0:	2400cc79 	.word	0x2400cc79

080166b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b084      	sub	sp, #16
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	60f8      	str	r0, [r7, #12]
 80166bc:	60b9      	str	r1, [r7, #8]
 80166be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00a      	beq.n	80166dc <tcp_route+0x28>
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	7a1b      	ldrb	r3, [r3, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d006      	beq.n	80166dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	7a1b      	ldrb	r3, [r3, #8]
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7fb fb12 	bl	8011cfc <netif_get_by_index>
 80166d8:	4603      	mov	r3, r0
 80166da:	e003      	b.n	80166e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f005 f865 	bl	801b7ac <ip4_route>
 80166e2:	4603      	mov	r3, r0
  }
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80166ec:	b590      	push	{r4, r7, lr}
 80166ee:	b087      	sub	sp, #28
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	60f8      	str	r0, [r7, #12]
 80166f4:	60b9      	str	r1, [r7, #8]
 80166f6:	603b      	str	r3, [r7, #0]
 80166f8:	4613      	mov	r3, r2
 80166fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d105      	bne.n	801670e <tcp_create_segment+0x22>
 8016702:	4b43      	ldr	r3, [pc, #268]	@ (8016810 <tcp_create_segment+0x124>)
 8016704:	22a3      	movs	r2, #163	@ 0xa3
 8016706:	4943      	ldr	r1, [pc, #268]	@ (8016814 <tcp_create_segment+0x128>)
 8016708:	4843      	ldr	r0, [pc, #268]	@ (8016818 <tcp_create_segment+0x12c>)
 801670a:	f007 f883 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d105      	bne.n	8016720 <tcp_create_segment+0x34>
 8016714:	4b3e      	ldr	r3, [pc, #248]	@ (8016810 <tcp_create_segment+0x124>)
 8016716:	22a4      	movs	r2, #164	@ 0xa4
 8016718:	4940      	ldr	r1, [pc, #256]	@ (801681c <tcp_create_segment+0x130>)
 801671a:	483f      	ldr	r0, [pc, #252]	@ (8016818 <tcp_create_segment+0x12c>)
 801671c:	f007 f87a 	bl	801d814 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016720:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016724:	009b      	lsls	r3, r3, #2
 8016726:	b2db      	uxtb	r3, r3
 8016728:	f003 0304 	and.w	r3, r3, #4
 801672c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801672e:	2003      	movs	r0, #3
 8016730:	f7fa ff4c 	bl	80115cc <memp_malloc>
 8016734:	6138      	str	r0, [r7, #16]
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d104      	bne.n	8016746 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801673c:	68b8      	ldr	r0, [r7, #8]
 801673e:	f7fb fe6b 	bl	8012418 <pbuf_free>
    return NULL;
 8016742:	2300      	movs	r3, #0
 8016744:	e060      	b.n	8016808 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801674c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	2200      	movs	r2, #0
 8016752:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	68ba      	ldr	r2, [r7, #8]
 8016758:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	891a      	ldrh	r2, [r3, #8]
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	b29b      	uxth	r3, r3
 8016762:	429a      	cmp	r2, r3
 8016764:	d205      	bcs.n	8016772 <tcp_create_segment+0x86>
 8016766:	4b2a      	ldr	r3, [pc, #168]	@ (8016810 <tcp_create_segment+0x124>)
 8016768:	22b0      	movs	r2, #176	@ 0xb0
 801676a:	492d      	ldr	r1, [pc, #180]	@ (8016820 <tcp_create_segment+0x134>)
 801676c:	482a      	ldr	r0, [pc, #168]	@ (8016818 <tcp_create_segment+0x12c>)
 801676e:	f007 f851 	bl	801d814 <iprintf>
  seg->len = p->tot_len - optlen;
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	891a      	ldrh	r2, [r3, #8]
 8016776:	7dfb      	ldrb	r3, [r7, #23]
 8016778:	b29b      	uxth	r3, r3
 801677a:	1ad3      	subs	r3, r2, r3
 801677c:	b29a      	uxth	r2, r3
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016782:	2114      	movs	r1, #20
 8016784:	68b8      	ldr	r0, [r7, #8]
 8016786:	f7fb fdb1 	bl	80122ec <pbuf_add_header>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d004      	beq.n	801679a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016790:	6938      	ldr	r0, [r7, #16]
 8016792:	f7fd f8d2 	bl	801393a <tcp_seg_free>
    return NULL;
 8016796:	2300      	movs	r3, #0
 8016798:	e036      	b.n	8016808 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	685b      	ldr	r3, [r3, #4]
 801679e:	685a      	ldr	r2, [r3, #4]
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	8ada      	ldrh	r2, [r3, #22]
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	68dc      	ldr	r4, [r3, #12]
 80167ac:	4610      	mov	r0, r2
 80167ae:	f7fa f97d 	bl	8010aac <lwip_htons>
 80167b2:	4603      	mov	r3, r0
 80167b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	8b1a      	ldrh	r2, [r3, #24]
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	68dc      	ldr	r4, [r3, #12]
 80167be:	4610      	mov	r0, r2
 80167c0:	f7fa f974 	bl	8010aac <lwip_htons>
 80167c4:	4603      	mov	r3, r0
 80167c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	68dc      	ldr	r4, [r3, #12]
 80167cc:	6838      	ldr	r0, [r7, #0]
 80167ce:	f7fa f982 	bl	8010ad6 <lwip_htonl>
 80167d2:	4603      	mov	r3, r0
 80167d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80167d6:	7dfb      	ldrb	r3, [r7, #23]
 80167d8:	089b      	lsrs	r3, r3, #2
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	3305      	adds	r3, #5
 80167de:	b29b      	uxth	r3, r3
 80167e0:	031b      	lsls	r3, r3, #12
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	79fb      	ldrb	r3, [r7, #7]
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	4313      	orrs	r3, r2
 80167ea:	b29a      	uxth	r2, r3
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	68dc      	ldr	r4, [r3, #12]
 80167f0:	4610      	mov	r0, r2
 80167f2:	f7fa f95b 	bl	8010aac <lwip_htons>
 80167f6:	4603      	mov	r3, r0
 80167f8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	2200      	movs	r2, #0
 8016800:	749a      	strb	r2, [r3, #18]
 8016802:	2200      	movs	r2, #0
 8016804:	74da      	strb	r2, [r3, #19]
  return seg;
 8016806:	693b      	ldr	r3, [r7, #16]
}
 8016808:	4618      	mov	r0, r3
 801680a:	371c      	adds	r7, #28
 801680c:	46bd      	mov	sp, r7
 801680e:	bd90      	pop	{r4, r7, pc}
 8016810:	0802153c 	.word	0x0802153c
 8016814:	08021570 	.word	0x08021570
 8016818:	08021590 	.word	0x08021590
 801681c:	080215b8 	.word	0x080215b8
 8016820:	080215dc 	.word	0x080215dc

08016824 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016824:	b590      	push	{r4, r7, lr}
 8016826:	b08b      	sub	sp, #44	@ 0x2c
 8016828:	af02      	add	r7, sp, #8
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	460b      	mov	r3, r1
 801682e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016830:	2300      	movs	r3, #0
 8016832:	61fb      	str	r3, [r7, #28]
 8016834:	2300      	movs	r3, #0
 8016836:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016838:	2300      	movs	r3, #0
 801683a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d106      	bne.n	8016850 <tcp_split_unsent_seg+0x2c>
 8016842:	4b95      	ldr	r3, [pc, #596]	@ (8016a98 <tcp_split_unsent_seg+0x274>)
 8016844:	f240 324b 	movw	r2, #843	@ 0x34b
 8016848:	4994      	ldr	r1, [pc, #592]	@ (8016a9c <tcp_split_unsent_seg+0x278>)
 801684a:	4895      	ldr	r0, [pc, #596]	@ (8016aa0 <tcp_split_unsent_seg+0x27c>)
 801684c:	f006 ffe2 	bl	801d814 <iprintf>

  useg = pcb->unsent;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016854:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016856:	697b      	ldr	r3, [r7, #20]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d102      	bne.n	8016862 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801685c:	f04f 33ff 	mov.w	r3, #4294967295
 8016860:	e116      	b.n	8016a90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016862:	887b      	ldrh	r3, [r7, #2]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d109      	bne.n	801687c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016868:	4b8b      	ldr	r3, [pc, #556]	@ (8016a98 <tcp_split_unsent_seg+0x274>)
 801686a:	f240 3253 	movw	r2, #851	@ 0x353
 801686e:	498d      	ldr	r1, [pc, #564]	@ (8016aa4 <tcp_split_unsent_seg+0x280>)
 8016870:	488b      	ldr	r0, [pc, #556]	@ (8016aa0 <tcp_split_unsent_seg+0x27c>)
 8016872:	f006 ffcf 	bl	801d814 <iprintf>
    return ERR_VAL;
 8016876:	f06f 0305 	mvn.w	r3, #5
 801687a:	e109      	b.n	8016a90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	891b      	ldrh	r3, [r3, #8]
 8016880:	887a      	ldrh	r2, [r7, #2]
 8016882:	429a      	cmp	r2, r3
 8016884:	d301      	bcc.n	801688a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	e102      	b.n	8016a90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801688e:	887a      	ldrh	r2, [r7, #2]
 8016890:	429a      	cmp	r2, r3
 8016892:	d906      	bls.n	80168a2 <tcp_split_unsent_seg+0x7e>
 8016894:	4b80      	ldr	r3, [pc, #512]	@ (8016a98 <tcp_split_unsent_seg+0x274>)
 8016896:	f240 325b 	movw	r2, #859	@ 0x35b
 801689a:	4983      	ldr	r1, [pc, #524]	@ (8016aa8 <tcp_split_unsent_seg+0x284>)
 801689c:	4880      	ldr	r0, [pc, #512]	@ (8016aa0 <tcp_split_unsent_seg+0x27c>)
 801689e:	f006 ffb9 	bl	801d814 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	891b      	ldrh	r3, [r3, #8]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <tcp_split_unsent_seg+0x94>
 80168aa:	4b7b      	ldr	r3, [pc, #492]	@ (8016a98 <tcp_split_unsent_seg+0x274>)
 80168ac:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80168b0:	497e      	ldr	r1, [pc, #504]	@ (8016aac <tcp_split_unsent_seg+0x288>)
 80168b2:	487b      	ldr	r0, [pc, #492]	@ (8016aa0 <tcp_split_unsent_seg+0x27c>)
 80168b4:	f006 ffae 	bl	801d814 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	7a9b      	ldrb	r3, [r3, #10]
 80168bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80168be:	7bfb      	ldrb	r3, [r7, #15]
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	f003 0304 	and.w	r3, r3, #4
 80168c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	891a      	ldrh	r2, [r3, #8]
 80168ce:	887b      	ldrh	r3, [r7, #2]
 80168d0:	1ad3      	subs	r3, r2, r3
 80168d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80168d4:	7bbb      	ldrb	r3, [r7, #14]
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	89bb      	ldrh	r3, [r7, #12]
 80168da:	4413      	add	r3, r2
 80168dc:	b29b      	uxth	r3, r3
 80168de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80168e2:	4619      	mov	r1, r3
 80168e4:	2036      	movs	r0, #54	@ 0x36
 80168e6:	f7fb fab3 	bl	8011e50 <pbuf_alloc>
 80168ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f000 80b7 	beq.w	8016a62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	891a      	ldrh	r2, [r3, #8]
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	891b      	ldrh	r3, [r3, #8]
 80168fe:	1ad3      	subs	r3, r2, r3
 8016900:	b29a      	uxth	r2, r3
 8016902:	887b      	ldrh	r3, [r7, #2]
 8016904:	4413      	add	r3, r2
 8016906:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	6858      	ldr	r0, [r3, #4]
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	685a      	ldr	r2, [r3, #4]
 8016910:	7bbb      	ldrb	r3, [r7, #14]
 8016912:	18d1      	adds	r1, r2, r3
 8016914:	897b      	ldrh	r3, [r7, #10]
 8016916:	89ba      	ldrh	r2, [r7, #12]
 8016918:	f7fb ff84 	bl	8012824 <pbuf_copy_partial>
 801691c:	4603      	mov	r3, r0
 801691e:	461a      	mov	r2, r3
 8016920:	89bb      	ldrh	r3, [r7, #12]
 8016922:	4293      	cmp	r3, r2
 8016924:	f040 809f 	bne.w	8016a66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	68db      	ldr	r3, [r3, #12]
 801692c:	899b      	ldrh	r3, [r3, #12]
 801692e:	b29b      	uxth	r3, r3
 8016930:	4618      	mov	r0, r3
 8016932:	f7fa f8bb 	bl	8010aac <lwip_htons>
 8016936:	4603      	mov	r3, r0
 8016938:	b2db      	uxtb	r3, r3
 801693a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801693e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016940:	2300      	movs	r3, #0
 8016942:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016944:	7efb      	ldrb	r3, [r7, #27]
 8016946:	f003 0308 	and.w	r3, r3, #8
 801694a:	2b00      	cmp	r3, #0
 801694c:	d007      	beq.n	801695e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801694e:	7efb      	ldrb	r3, [r7, #27]
 8016950:	f023 0308 	bic.w	r3, r3, #8
 8016954:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016956:	7ebb      	ldrb	r3, [r7, #26]
 8016958:	f043 0308 	orr.w	r3, r3, #8
 801695c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801695e:	7efb      	ldrb	r3, [r7, #27]
 8016960:	f003 0301 	and.w	r3, r3, #1
 8016964:	2b00      	cmp	r3, #0
 8016966:	d007      	beq.n	8016978 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016968:	7efb      	ldrb	r3, [r7, #27]
 801696a:	f023 0301 	bic.w	r3, r3, #1
 801696e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016970:	7ebb      	ldrb	r3, [r7, #26]
 8016972:	f043 0301 	orr.w	r3, r3, #1
 8016976:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	68db      	ldr	r3, [r3, #12]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	4618      	mov	r0, r3
 8016980:	f7fa f8a9 	bl	8010ad6 <lwip_htonl>
 8016984:	4602      	mov	r2, r0
 8016986:	887b      	ldrh	r3, [r7, #2]
 8016988:	18d1      	adds	r1, r2, r3
 801698a:	7eba      	ldrb	r2, [r7, #26]
 801698c:	7bfb      	ldrb	r3, [r7, #15]
 801698e:	9300      	str	r3, [sp, #0]
 8016990:	460b      	mov	r3, r1
 8016992:	6939      	ldr	r1, [r7, #16]
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f7ff fea9 	bl	80166ec <tcp_create_segment>
 801699a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801699c:	69fb      	ldr	r3, [r7, #28]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d063      	beq.n	8016a6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7fb fdc4 	bl	8012534 <pbuf_clen>
 80169ac:	4603      	mov	r3, r0
 80169ae:	461a      	mov	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80169b6:	1a9b      	subs	r3, r3, r2
 80169b8:	b29a      	uxth	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	6858      	ldr	r0, [r3, #4]
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	891a      	ldrh	r2, [r3, #8]
 80169ca:	89bb      	ldrh	r3, [r7, #12]
 80169cc:	1ad3      	subs	r3, r2, r3
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	4619      	mov	r1, r3
 80169d2:	f7fb fb9b 	bl	801210c <pbuf_realloc>
  useg->len -= remainder;
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	891a      	ldrh	r2, [r3, #8]
 80169da:	89bb      	ldrh	r3, [r7, #12]
 80169dc:	1ad3      	subs	r3, r2, r3
 80169de:	b29a      	uxth	r2, r3
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	899b      	ldrh	r3, [r3, #12]
 80169ea:	b29c      	uxth	r4, r3
 80169ec:	7efb      	ldrb	r3, [r7, #27]
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7fa f85b 	bl	8010aac <lwip_htons>
 80169f6:	4603      	mov	r3, r0
 80169f8:	461a      	mov	r2, r3
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	68db      	ldr	r3, [r3, #12]
 80169fe:	4322      	orrs	r2, r4
 8016a00:	b292      	uxth	r2, r2
 8016a02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016a04:	697b      	ldr	r3, [r7, #20]
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fb fd93 	bl	8012534 <pbuf_clen>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	461a      	mov	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a18:	4413      	add	r3, r2
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	685b      	ldr	r3, [r3, #4]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7fb fd84 	bl	8012534 <pbuf_clen>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	461a      	mov	r2, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a36:	4413      	add	r3, r2
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016a40:	697b      	ldr	r3, [r7, #20]
 8016a42:	681a      	ldr	r2, [r3, #0]
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	69fa      	ldr	r2, [r7, #28]
 8016a4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d103      	bne.n	8016a5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	e016      	b.n	8016a90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016a62:	bf00      	nop
 8016a64:	e002      	b.n	8016a6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016a66:	bf00      	nop
 8016a68:	e000      	b.n	8016a6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016a6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d006      	beq.n	8016a80 <tcp_split_unsent_seg+0x25c>
 8016a72:	4b09      	ldr	r3, [pc, #36]	@ (8016a98 <tcp_split_unsent_seg+0x274>)
 8016a74:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016a78:	490d      	ldr	r1, [pc, #52]	@ (8016ab0 <tcp_split_unsent_seg+0x28c>)
 8016a7a:	4809      	ldr	r0, [pc, #36]	@ (8016aa0 <tcp_split_unsent_seg+0x27c>)
 8016a7c:	f006 feca 	bl	801d814 <iprintf>
  if (p != NULL) {
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d002      	beq.n	8016a8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016a86:	6938      	ldr	r0, [r7, #16]
 8016a88:	f7fb fcc6 	bl	8012418 <pbuf_free>
  }

  return ERR_MEM;
 8016a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3724      	adds	r7, #36	@ 0x24
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd90      	pop	{r4, r7, pc}
 8016a98:	0802153c 	.word	0x0802153c
 8016a9c:	080218d0 	.word	0x080218d0
 8016aa0:	08021590 	.word	0x08021590
 8016aa4:	080218f4 	.word	0x080218f4
 8016aa8:	08021918 	.word	0x08021918
 8016aac:	08021928 	.word	0x08021928
 8016ab0:	08021938 	.word	0x08021938

08016ab4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016ab4:	b590      	push	{r4, r7, lr}
 8016ab6:	b085      	sub	sp, #20
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d106      	bne.n	8016ad0 <tcp_send_fin+0x1c>
 8016ac2:	4b21      	ldr	r3, [pc, #132]	@ (8016b48 <tcp_send_fin+0x94>)
 8016ac4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016ac8:	4920      	ldr	r1, [pc, #128]	@ (8016b4c <tcp_send_fin+0x98>)
 8016aca:	4821      	ldr	r0, [pc, #132]	@ (8016b50 <tcp_send_fin+0x9c>)
 8016acc:	f006 fea2 	bl	801d814 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d02e      	beq.n	8016b36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016adc:	60fb      	str	r3, [r7, #12]
 8016ade:	e002      	b.n	8016ae6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d1f8      	bne.n	8016ae0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	68db      	ldr	r3, [r3, #12]
 8016af2:	899b      	ldrh	r3, [r3, #12]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7f9 ffd8 	bl	8010aac <lwip_htons>
 8016afc:	4603      	mov	r3, r0
 8016afe:	b2db      	uxtb	r3, r3
 8016b00:	f003 0307 	and.w	r3, r3, #7
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d116      	bne.n	8016b36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	68db      	ldr	r3, [r3, #12]
 8016b0c:	899b      	ldrh	r3, [r3, #12]
 8016b0e:	b29c      	uxth	r4, r3
 8016b10:	2001      	movs	r0, #1
 8016b12:	f7f9 ffcb 	bl	8010aac <lwip_htons>
 8016b16:	4603      	mov	r3, r0
 8016b18:	461a      	mov	r2, r3
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	4322      	orrs	r2, r4
 8016b20:	b292      	uxth	r2, r2
 8016b22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	8b5b      	ldrh	r3, [r3, #26]
 8016b28:	f043 0320 	orr.w	r3, r3, #32
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016b32:	2300      	movs	r3, #0
 8016b34:	e004      	b.n	8016b40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016b36:	2101      	movs	r1, #1
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f000 f80b 	bl	8016b54 <tcp_enqueue_flags>
 8016b3e:	4603      	mov	r3, r0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3714      	adds	r7, #20
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd90      	pop	{r4, r7, pc}
 8016b48:	0802153c 	.word	0x0802153c
 8016b4c:	08021944 	.word	0x08021944
 8016b50:	08021590 	.word	0x08021590

08016b54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b08a      	sub	sp, #40	@ 0x28
 8016b58:	af02      	add	r7, sp, #8
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016b60:	2300      	movs	r3, #0
 8016b62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016b64:	2300      	movs	r3, #0
 8016b66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016b68:	78fb      	ldrb	r3, [r7, #3]
 8016b6a:	f003 0303 	and.w	r3, r3, #3
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d106      	bne.n	8016b80 <tcp_enqueue_flags+0x2c>
 8016b72:	4b67      	ldr	r3, [pc, #412]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016b74:	f240 4211 	movw	r2, #1041	@ 0x411
 8016b78:	4966      	ldr	r1, [pc, #408]	@ (8016d14 <tcp_enqueue_flags+0x1c0>)
 8016b7a:	4867      	ldr	r0, [pc, #412]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016b7c:	f006 fe4a 	bl	801d814 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <tcp_enqueue_flags+0x40>
 8016b86:	4b62      	ldr	r3, [pc, #392]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016b88:	f240 4213 	movw	r2, #1043	@ 0x413
 8016b8c:	4963      	ldr	r1, [pc, #396]	@ (8016d1c <tcp_enqueue_flags+0x1c8>)
 8016b8e:	4862      	ldr	r0, [pc, #392]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016b90:	f006 fe40 	bl	801d814 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016b94:	78fb      	ldrb	r3, [r7, #3]
 8016b96:	f003 0302 	and.w	r3, r3, #2
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d001      	beq.n	8016ba2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ba2:	7ffb      	ldrb	r3, [r7, #31]
 8016ba4:	009b      	lsls	r3, r3, #2
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	f003 0304 	and.w	r3, r3, #4
 8016bac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016bae:	7dfb      	ldrb	r3, [r7, #23]
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	2036      	movs	r0, #54	@ 0x36
 8016bba:	f7fb f949 	bl	8011e50 <pbuf_alloc>
 8016bbe:	6138      	str	r0, [r7, #16]
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d109      	bne.n	8016bda <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	8b5b      	ldrh	r3, [r3, #26]
 8016bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd8:	e095      	b.n	8016d06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	895a      	ldrh	r2, [r3, #10]
 8016bde:	7dfb      	ldrb	r3, [r7, #23]
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d206      	bcs.n	8016bf4 <tcp_enqueue_flags+0xa0>
 8016be6:	4b4a      	ldr	r3, [pc, #296]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016be8:	f240 4239 	movw	r2, #1081	@ 0x439
 8016bec:	494c      	ldr	r1, [pc, #304]	@ (8016d20 <tcp_enqueue_flags+0x1cc>)
 8016bee:	484a      	ldr	r0, [pc, #296]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016bf0:	f006 fe10 	bl	801d814 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016bf8:	78fa      	ldrb	r2, [r7, #3]
 8016bfa:	7ffb      	ldrb	r3, [r7, #31]
 8016bfc:	9300      	str	r3, [sp, #0]
 8016bfe:	460b      	mov	r3, r1
 8016c00:	6939      	ldr	r1, [r7, #16]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7ff fd72 	bl	80166ec <tcp_create_segment>
 8016c08:	60f8      	str	r0, [r7, #12]
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d109      	bne.n	8016c24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	8b5b      	ldrh	r3, [r3, #26]
 8016c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016c18:	b29a      	uxth	r2, r3
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c22:	e070      	b.n	8016d06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	68db      	ldr	r3, [r3, #12]
 8016c28:	f003 0303 	and.w	r3, r3, #3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d006      	beq.n	8016c3e <tcp_enqueue_flags+0xea>
 8016c30:	4b37      	ldr	r3, [pc, #220]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016c32:	f240 4242 	movw	r2, #1090	@ 0x442
 8016c36:	493b      	ldr	r1, [pc, #236]	@ (8016d24 <tcp_enqueue_flags+0x1d0>)
 8016c38:	4837      	ldr	r0, [pc, #220]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016c3a:	f006 fdeb 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	891b      	ldrh	r3, [r3, #8]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d006      	beq.n	8016c54 <tcp_enqueue_flags+0x100>
 8016c46:	4b32      	ldr	r3, [pc, #200]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016c48:	f240 4243 	movw	r2, #1091	@ 0x443
 8016c4c:	4936      	ldr	r1, [pc, #216]	@ (8016d28 <tcp_enqueue_flags+0x1d4>)
 8016c4e:	4832      	ldr	r0, [pc, #200]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016c50:	f006 fde0 	bl	801d814 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d103      	bne.n	8016c64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	68fa      	ldr	r2, [r7, #12]
 8016c60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016c62:	e00d      	b.n	8016c80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c68:	61bb      	str	r3, [r7, #24]
 8016c6a:	e002      	b.n	8016c72 <tcp_enqueue_flags+0x11e>
 8016c6c:	69bb      	ldr	r3, [r7, #24]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	61bb      	str	r3, [r7, #24]
 8016c72:	69bb      	ldr	r3, [r7, #24]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d1f8      	bne.n	8016c6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	68fa      	ldr	r2, [r7, #12]
 8016c7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2200      	movs	r2, #0
 8016c84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016c88:	78fb      	ldrb	r3, [r7, #3]
 8016c8a:	f003 0302 	and.w	r3, r3, #2
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d104      	bne.n	8016c9c <tcp_enqueue_flags+0x148>
 8016c92:	78fb      	ldrb	r3, [r7, #3]
 8016c94:	f003 0301 	and.w	r3, r3, #1
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d004      	beq.n	8016ca6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016ca0:	1c5a      	adds	r2, r3, #1
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016ca6:	78fb      	ldrb	r3, [r7, #3]
 8016ca8:	f003 0301 	and.w	r3, r3, #1
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d006      	beq.n	8016cbe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	8b5b      	ldrh	r3, [r3, #26]
 8016cb4:	f043 0320 	orr.w	r3, r3, #32
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fb fc36 	bl	8012534 <pbuf_clen>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	461a      	mov	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016cd2:	4413      	add	r3, r2
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d00e      	beq.n	8016d04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10a      	bne.n	8016d04 <tcp_enqueue_flags+0x1b0>
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d106      	bne.n	8016d04 <tcp_enqueue_flags+0x1b0>
 8016cf6:	4b06      	ldr	r3, [pc, #24]	@ (8016d10 <tcp_enqueue_flags+0x1bc>)
 8016cf8:	f240 4265 	movw	r2, #1125	@ 0x465
 8016cfc:	490b      	ldr	r1, [pc, #44]	@ (8016d2c <tcp_enqueue_flags+0x1d8>)
 8016cfe:	4806      	ldr	r0, [pc, #24]	@ (8016d18 <tcp_enqueue_flags+0x1c4>)
 8016d00:	f006 fd88 	bl	801d814 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016d04:	2300      	movs	r3, #0
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3720      	adds	r7, #32
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	0802153c 	.word	0x0802153c
 8016d14:	08021960 	.word	0x08021960
 8016d18:	08021590 	.word	0x08021590
 8016d1c:	080219b8 	.word	0x080219b8
 8016d20:	080219d8 	.word	0x080219d8
 8016d24:	08021a14 	.word	0x08021a14
 8016d28:	08021a2c 	.word	0x08021a2c
 8016d2c:	08021a58 	.word	0x08021a58

08016d30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016d30:	b5b0      	push	{r4, r5, r7, lr}
 8016d32:	b08a      	sub	sp, #40	@ 0x28
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d106      	bne.n	8016d4c <tcp_output+0x1c>
 8016d3e:	4b8a      	ldr	r3, [pc, #552]	@ (8016f68 <tcp_output+0x238>)
 8016d40:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016d44:	4989      	ldr	r1, [pc, #548]	@ (8016f6c <tcp_output+0x23c>)
 8016d46:	488a      	ldr	r0, [pc, #552]	@ (8016f70 <tcp_output+0x240>)
 8016d48:	f006 fd64 	bl	801d814 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	7d1b      	ldrb	r3, [r3, #20]
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d106      	bne.n	8016d62 <tcp_output+0x32>
 8016d54:	4b84      	ldr	r3, [pc, #528]	@ (8016f68 <tcp_output+0x238>)
 8016d56:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016d5a:	4986      	ldr	r1, [pc, #536]	@ (8016f74 <tcp_output+0x244>)
 8016d5c:	4884      	ldr	r0, [pc, #528]	@ (8016f70 <tcp_output+0x240>)
 8016d5e:	f006 fd59 	bl	801d814 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016d62:	4b85      	ldr	r3, [pc, #532]	@ (8016f78 <tcp_output+0x248>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	687a      	ldr	r2, [r7, #4]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d101      	bne.n	8016d70 <tcp_output+0x40>
    return ERR_OK;
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	e1ce      	b.n	801710e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	bf28      	it	cs
 8016d80:	4613      	movcs	r3, r2
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d10b      	bne.n	8016daa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	8b5b      	ldrh	r3, [r3, #26]
 8016d96:	f003 0302 	and.w	r3, r3, #2
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f000 81aa 	beq.w	80170f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 fdcb 	bl	801793c <tcp_send_empty_ack>
 8016da6:	4603      	mov	r3, r0
 8016da8:	e1b1      	b.n	801710e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016daa:	6879      	ldr	r1, [r7, #4]
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	3304      	adds	r3, #4
 8016db0:	461a      	mov	r2, r3
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	f7ff fc7e 	bl	80166b4 <tcp_route>
 8016db8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d102      	bne.n	8016dc6 <tcp_output+0x96>
    return ERR_RTE;
 8016dc0:	f06f 0303 	mvn.w	r3, #3
 8016dc4:	e1a3      	b.n	801710e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d003      	beq.n	8016dd4 <tcp_output+0xa4>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d111      	bne.n	8016df8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d002      	beq.n	8016de0 <tcp_output+0xb0>
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	3304      	adds	r3, #4
 8016dde:	e000      	b.n	8016de2 <tcp_output+0xb2>
 8016de0:	2300      	movs	r3, #0
 8016de2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d102      	bne.n	8016df0 <tcp_output+0xc0>
      return ERR_RTE;
 8016dea:	f06f 0303 	mvn.w	r3, #3
 8016dee:	e18e      	b.n	801710e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	681a      	ldr	r2, [r3, #0]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dfa:	68db      	ldr	r3, [r3, #12]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7f9 fe69 	bl	8010ad6 <lwip_htonl>
 8016e04:	4602      	mov	r2, r0
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e0a:	1ad3      	subs	r3, r2, r3
 8016e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e0e:	8912      	ldrh	r2, [r2, #8]
 8016e10:	4413      	add	r3, r2
 8016e12:	69ba      	ldr	r2, [r7, #24]
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d227      	bcs.n	8016e68 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016e1e:	461a      	mov	r2, r3
 8016e20:	69bb      	ldr	r3, [r7, #24]
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d114      	bne.n	8016e50 <tcp_output+0x120>
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d110      	bne.n	8016e50 <tcp_output+0x120>
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d10b      	bne.n	8016e50 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2201      	movs	r2, #1
 8016e44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	8b5b      	ldrh	r3, [r3, #26]
 8016e54:	f003 0302 	and.w	r3, r3, #2
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	f000 814d 	beq.w	80170f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f000 fd6c 	bl	801793c <tcp_send_empty_ack>
 8016e64:	4603      	mov	r3, r0
 8016e66:	e152      	b.n	801710e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e74:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016e76:	6a3b      	ldr	r3, [r7, #32]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f000 811c 	beq.w	80170b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016e7e:	e002      	b.n	8016e86 <tcp_output+0x156>
 8016e80:	6a3b      	ldr	r3, [r7, #32]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	623b      	str	r3, [r7, #32]
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d1f8      	bne.n	8016e80 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016e8e:	e112      	b.n	80170b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	899b      	ldrh	r3, [r3, #12]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7f9 fe07 	bl	8010aac <lwip_htons>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	f003 0304 	and.w	r3, r3, #4
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d006      	beq.n	8016eb8 <tcp_output+0x188>
 8016eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8016f68 <tcp_output+0x238>)
 8016eac:	f240 5236 	movw	r2, #1334	@ 0x536
 8016eb0:	4932      	ldr	r1, [pc, #200]	@ (8016f7c <tcp_output+0x24c>)
 8016eb2:	482f      	ldr	r0, [pc, #188]	@ (8016f70 <tcp_output+0x240>)
 8016eb4:	f006 fcae 	bl	801d814 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d01f      	beq.n	8016f00 <tcp_output+0x1d0>
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	8b5b      	ldrh	r3, [r3, #26]
 8016ec4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d119      	bne.n	8016f00 <tcp_output+0x1d0>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d00b      	beq.n	8016eec <tcp_output+0x1bc>
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d110      	bne.n	8016f00 <tcp_output+0x1d0>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ee2:	891a      	ldrh	r2, [r3, #8]
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d209      	bcs.n	8016f00 <tcp_output+0x1d0>
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d004      	beq.n	8016f00 <tcp_output+0x1d0>
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016efc:	2b08      	cmp	r3, #8
 8016efe:	d901      	bls.n	8016f04 <tcp_output+0x1d4>
 8016f00:	2301      	movs	r3, #1
 8016f02:	e000      	b.n	8016f06 <tcp_output+0x1d6>
 8016f04:	2300      	movs	r3, #0
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d106      	bne.n	8016f18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	8b5b      	ldrh	r3, [r3, #26]
 8016f0e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	f000 80e4 	beq.w	80170e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	7d1b      	ldrb	r3, [r3, #20]
 8016f1c:	2b02      	cmp	r3, #2
 8016f1e:	d00d      	beq.n	8016f3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	899b      	ldrh	r3, [r3, #12]
 8016f26:	b29c      	uxth	r4, r3
 8016f28:	2010      	movs	r0, #16
 8016f2a:	f7f9 fdbf 	bl	8010aac <lwip_htons>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	461a      	mov	r2, r3
 8016f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f34:	68db      	ldr	r3, [r3, #12]
 8016f36:	4322      	orrs	r2, r4
 8016f38:	b292      	uxth	r2, r2
 8016f3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016f3c:	697a      	ldr	r2, [r7, #20]
 8016f3e:	6879      	ldr	r1, [r7, #4]
 8016f40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016f42:	f000 f909 	bl	8017158 <tcp_output_segment>
 8016f46:	4603      	mov	r3, r0
 8016f48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d016      	beq.n	8016f80 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	8b5b      	ldrh	r3, [r3, #26]
 8016f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f5a:	b29a      	uxth	r2, r3
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	835a      	strh	r2, [r3, #26]
      return err;
 8016f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f64:	e0d3      	b.n	801710e <tcp_output+0x3de>
 8016f66:	bf00      	nop
 8016f68:	0802153c 	.word	0x0802153c
 8016f6c:	08021a80 	.word	0x08021a80
 8016f70:	08021590 	.word	0x08021590
 8016f74:	08021a98 	.word	0x08021a98
 8016f78:	2400cc80 	.word	0x2400cc80
 8016f7c:	08021ac0 	.word	0x08021ac0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	7d1b      	ldrb	r3, [r3, #20]
 8016f8c:	2b02      	cmp	r3, #2
 8016f8e:	d006      	beq.n	8016f9e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	8b5b      	ldrh	r3, [r3, #26]
 8016f94:	f023 0303 	bic.w	r3, r3, #3
 8016f98:	b29a      	uxth	r2, r3
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7f9 fd96 	bl	8010ad6 <lwip_htonl>
 8016faa:	4604      	mov	r4, r0
 8016fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fae:	891b      	ldrh	r3, [r3, #8]
 8016fb0:	461d      	mov	r5, r3
 8016fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb4:	68db      	ldr	r3, [r3, #12]
 8016fb6:	899b      	ldrh	r3, [r3, #12]
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7f9 fd76 	bl	8010aac <lwip_htons>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	f003 0303 	and.w	r3, r3, #3
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d001      	beq.n	8016fd0 <tcp_output+0x2a0>
 8016fcc:	2301      	movs	r3, #1
 8016fce:	e000      	b.n	8016fd2 <tcp_output+0x2a2>
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	442b      	add	r3, r5
 8016fd4:	4423      	add	r3, r4
 8016fd6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	1ad3      	subs	r3, r2, r3
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	da02      	bge.n	8016fea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	68ba      	ldr	r2, [r7, #8]
 8016fe8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fec:	891b      	ldrh	r3, [r3, #8]
 8016fee:	461c      	mov	r4, r3
 8016ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	899b      	ldrh	r3, [r3, #12]
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f9 fd57 	bl	8010aac <lwip_htons>
 8016ffe:	4603      	mov	r3, r0
 8017000:	b2db      	uxtb	r3, r3
 8017002:	f003 0303 	and.w	r3, r3, #3
 8017006:	2b00      	cmp	r3, #0
 8017008:	d001      	beq.n	801700e <tcp_output+0x2de>
 801700a:	2301      	movs	r3, #1
 801700c:	e000      	b.n	8017010 <tcp_output+0x2e0>
 801700e:	2300      	movs	r3, #0
 8017010:	4423      	add	r3, r4
 8017012:	2b00      	cmp	r3, #0
 8017014:	d049      	beq.n	80170aa <tcp_output+0x37a>
      seg->next = NULL;
 8017016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017018:	2200      	movs	r2, #0
 801701a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017020:	2b00      	cmp	r3, #0
 8017022:	d105      	bne.n	8017030 <tcp_output+0x300>
        pcb->unacked = seg;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017028:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801702c:	623b      	str	r3, [r7, #32]
 801702e:	e03f      	b.n	80170b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017032:	68db      	ldr	r3, [r3, #12]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	4618      	mov	r0, r3
 8017038:	f7f9 fd4d 	bl	8010ad6 <lwip_htonl>
 801703c:	4604      	mov	r4, r0
 801703e:	6a3b      	ldr	r3, [r7, #32]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	4618      	mov	r0, r3
 8017046:	f7f9 fd46 	bl	8010ad6 <lwip_htonl>
 801704a:	4603      	mov	r3, r0
 801704c:	1ae3      	subs	r3, r4, r3
 801704e:	2b00      	cmp	r3, #0
 8017050:	da24      	bge.n	801709c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	3370      	adds	r3, #112	@ 0x70
 8017056:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017058:	e002      	b.n	8017060 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d011      	beq.n	801708c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	68db      	ldr	r3, [r3, #12]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	4618      	mov	r0, r3
 8017072:	f7f9 fd30 	bl	8010ad6 <lwip_htonl>
 8017076:	4604      	mov	r4, r0
 8017078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801707a:	68db      	ldr	r3, [r3, #12]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	4618      	mov	r0, r3
 8017080:	f7f9 fd29 	bl	8010ad6 <lwip_htonl>
 8017084:	4603      	mov	r3, r0
 8017086:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017088:	2b00      	cmp	r3, #0
 801708a:	dbe6      	blt.n	801705a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801708c:	69fb      	ldr	r3, [r7, #28]
 801708e:	681a      	ldr	r2, [r3, #0]
 8017090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017092:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017094:	69fb      	ldr	r3, [r7, #28]
 8017096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017098:	601a      	str	r2, [r3, #0]
 801709a:	e009      	b.n	80170b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801709c:	6a3b      	ldr	r3, [r7, #32]
 801709e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80170a2:	6a3b      	ldr	r3, [r7, #32]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	623b      	str	r3, [r7, #32]
 80170a8:	e002      	b.n	80170b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80170aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80170ac:	f7fc fc45 	bl	801393a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80170b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d012      	beq.n	80170e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80170bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170be:	68db      	ldr	r3, [r3, #12]
 80170c0:	685b      	ldr	r3, [r3, #4]
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7f9 fd07 	bl	8010ad6 <lwip_htonl>
 80170c8:	4602      	mov	r2, r0
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170d2:	8912      	ldrh	r2, [r2, #8]
 80170d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80170d6:	69ba      	ldr	r2, [r7, #24]
 80170d8:	429a      	cmp	r2, r3
 80170da:	f4bf aed9 	bcs.w	8016e90 <tcp_output+0x160>
 80170de:	e000      	b.n	80170e2 <tcp_output+0x3b2>
      break;
 80170e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d108      	bne.n	80170fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2200      	movs	r2, #0
 80170ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80170f2:	e004      	b.n	80170fe <tcp_output+0x3ce>
    goto output_done;
 80170f4:	bf00      	nop
 80170f6:	e002      	b.n	80170fe <tcp_output+0x3ce>
    goto output_done;
 80170f8:	bf00      	nop
 80170fa:	e000      	b.n	80170fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80170fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	8b5b      	ldrh	r3, [r3, #26]
 8017102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017106:	b29a      	uxth	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801710c:	2300      	movs	r3, #0
}
 801710e:	4618      	mov	r0, r3
 8017110:	3728      	adds	r7, #40	@ 0x28
 8017112:	46bd      	mov	sp, r7
 8017114:	bdb0      	pop	{r4, r5, r7, pc}
 8017116:	bf00      	nop

08017118 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d106      	bne.n	8017134 <tcp_output_segment_busy+0x1c>
 8017126:	4b09      	ldr	r3, [pc, #36]	@ (801714c <tcp_output_segment_busy+0x34>)
 8017128:	f240 529a 	movw	r2, #1434	@ 0x59a
 801712c:	4908      	ldr	r1, [pc, #32]	@ (8017150 <tcp_output_segment_busy+0x38>)
 801712e:	4809      	ldr	r0, [pc, #36]	@ (8017154 <tcp_output_segment_busy+0x3c>)
 8017130:	f006 fb70 	bl	801d814 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	685b      	ldr	r3, [r3, #4]
 8017138:	7b9b      	ldrb	r3, [r3, #14]
 801713a:	2b01      	cmp	r3, #1
 801713c:	d001      	beq.n	8017142 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801713e:	2301      	movs	r3, #1
 8017140:	e000      	b.n	8017144 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3708      	adds	r7, #8
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	0802153c 	.word	0x0802153c
 8017150:	08021ad8 	.word	0x08021ad8
 8017154:	08021590 	.word	0x08021590

08017158 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017158:	b5b0      	push	{r4, r5, r7, lr}
 801715a:	b08c      	sub	sp, #48	@ 0x30
 801715c:	af04      	add	r7, sp, #16
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d106      	bne.n	8017178 <tcp_output_segment+0x20>
 801716a:	4b64      	ldr	r3, [pc, #400]	@ (80172fc <tcp_output_segment+0x1a4>)
 801716c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017170:	4963      	ldr	r1, [pc, #396]	@ (8017300 <tcp_output_segment+0x1a8>)
 8017172:	4864      	ldr	r0, [pc, #400]	@ (8017304 <tcp_output_segment+0x1ac>)
 8017174:	f006 fb4e 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d106      	bne.n	801718c <tcp_output_segment+0x34>
 801717e:	4b5f      	ldr	r3, [pc, #380]	@ (80172fc <tcp_output_segment+0x1a4>)
 8017180:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017184:	4960      	ldr	r1, [pc, #384]	@ (8017308 <tcp_output_segment+0x1b0>)
 8017186:	485f      	ldr	r0, [pc, #380]	@ (8017304 <tcp_output_segment+0x1ac>)
 8017188:	f006 fb44 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d106      	bne.n	80171a0 <tcp_output_segment+0x48>
 8017192:	4b5a      	ldr	r3, [pc, #360]	@ (80172fc <tcp_output_segment+0x1a4>)
 8017194:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017198:	495c      	ldr	r1, [pc, #368]	@ (801730c <tcp_output_segment+0x1b4>)
 801719a:	485a      	ldr	r0, [pc, #360]	@ (8017304 <tcp_output_segment+0x1ac>)
 801719c:	f006 fb3a 	bl	801d814 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80171a0:	68f8      	ldr	r0, [r7, #12]
 80171a2:	f7ff ffb9 	bl	8017118 <tcp_output_segment_busy>
 80171a6:	4603      	mov	r3, r0
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d001      	beq.n	80171b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80171ac:	2300      	movs	r3, #0
 80171ae:	e0a1      	b.n	80172f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	68dc      	ldr	r4, [r3, #12]
 80171b8:	4610      	mov	r0, r2
 80171ba:	f7f9 fc8c 	bl	8010ad6 <lwip_htonl>
 80171be:	4603      	mov	r3, r0
 80171c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	68dc      	ldr	r4, [r3, #12]
 80171ca:	4610      	mov	r0, r2
 80171cc:	f7f9 fc6e 	bl	8010aac <lwip_htons>
 80171d0:	4603      	mov	r3, r0
 80171d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80171d4:	68bb      	ldr	r3, [r7, #8]
 80171d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171d8:	68ba      	ldr	r2, [r7, #8]
 80171da:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80171dc:	441a      	add	r2, r3
 80171de:	68bb      	ldr	r3, [r7, #8]
 80171e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	3314      	adds	r3, #20
 80171e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	7a9b      	ldrb	r3, [r3, #10]
 80171ee:	f003 0301 	and.w	r3, r3, #1
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d015      	beq.n	8017222 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	3304      	adds	r3, #4
 80171fa:	461a      	mov	r2, r3
 80171fc:	6879      	ldr	r1, [r7, #4]
 80171fe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017202:	f7fc fe91 	bl	8013f28 <tcp_eff_send_mss_netif>
 8017206:	4603      	mov	r3, r0
 8017208:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801720a:	8b7b      	ldrh	r3, [r7, #26]
 801720c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017210:	4618      	mov	r0, r3
 8017212:	f7f9 fc60 	bl	8010ad6 <lwip_htonl>
 8017216:	4602      	mov	r2, r0
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801721c:	69fb      	ldr	r3, [r7, #28]
 801721e:	3304      	adds	r3, #4
 8017220:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017228:	2b00      	cmp	r3, #0
 801722a:	da02      	bge.n	8017232 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	2200      	movs	r2, #0
 8017230:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017236:	2b00      	cmp	r3, #0
 8017238:	d10c      	bne.n	8017254 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801723a:	4b35      	ldr	r3, [pc, #212]	@ (8017310 <tcp_output_segment+0x1b8>)
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	68db      	ldr	r3, [r3, #12]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	4618      	mov	r0, r3
 801724a:	f7f9 fc44 	bl	8010ad6 <lwip_htonl>
 801724e:	4602      	mov	r2, r0
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	68da      	ldr	r2, [r3, #12]
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	1ad3      	subs	r3, r2, r3
 8017260:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	8959      	ldrh	r1, [r3, #10]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	8b3a      	ldrh	r2, [r7, #24]
 801726e:	1a8a      	subs	r2, r1, r2
 8017270:	b292      	uxth	r2, r2
 8017272:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	8919      	ldrh	r1, [r3, #8]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	8b3a      	ldrh	r2, [r7, #24]
 8017280:	1a8a      	subs	r2, r1, r2
 8017282:	b292      	uxth	r2, r2
 8017284:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	68fa      	ldr	r2, [r7, #12]
 801728c:	68d2      	ldr	r2, [r2, #12]
 801728e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	68db      	ldr	r3, [r3, #12]
 8017294:	2200      	movs	r2, #0
 8017296:	741a      	strb	r2, [r3, #16]
 8017298:	2200      	movs	r2, #0
 801729a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	68da      	ldr	r2, [r3, #12]
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	7a9b      	ldrb	r3, [r3, #10]
 80172a4:	f003 0301 	and.w	r3, r3, #1
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d001      	beq.n	80172b0 <tcp_output_segment+0x158>
 80172ac:	2318      	movs	r3, #24
 80172ae:	e000      	b.n	80172b2 <tcp_output_segment+0x15a>
 80172b0:	2314      	movs	r3, #20
 80172b2:	4413      	add	r3, r2
 80172b4:	69fa      	ldr	r2, [r7, #28]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d006      	beq.n	80172c8 <tcp_output_segment+0x170>
 80172ba:	4b10      	ldr	r3, [pc, #64]	@ (80172fc <tcp_output_segment+0x1a4>)
 80172bc:	f240 621c 	movw	r2, #1564	@ 0x61c
 80172c0:	4914      	ldr	r1, [pc, #80]	@ (8017314 <tcp_output_segment+0x1bc>)
 80172c2:	4810      	ldr	r0, [pc, #64]	@ (8017304 <tcp_output_segment+0x1ac>)
 80172c4:	f006 faa6 	bl	801d814 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	6858      	ldr	r0, [r3, #4]
 80172cc:	68b9      	ldr	r1, [r7, #8]
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	1d1c      	adds	r4, r3, #4
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	7add      	ldrb	r5, [r3, #11]
 80172d6:	68bb      	ldr	r3, [r7, #8]
 80172d8:	7a9b      	ldrb	r3, [r3, #10]
 80172da:	687a      	ldr	r2, [r7, #4]
 80172dc:	9202      	str	r2, [sp, #8]
 80172de:	2206      	movs	r2, #6
 80172e0:	9201      	str	r2, [sp, #4]
 80172e2:	9300      	str	r3, [sp, #0]
 80172e4:	462b      	mov	r3, r5
 80172e6:	4622      	mov	r2, r4
 80172e8:	f004 fc3c 	bl	801bb64 <ip4_output_if>
 80172ec:	4603      	mov	r3, r0
 80172ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80172f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3720      	adds	r7, #32
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bdb0      	pop	{r4, r5, r7, pc}
 80172fc:	0802153c 	.word	0x0802153c
 8017300:	08021b00 	.word	0x08021b00
 8017304:	08021590 	.word	0x08021590
 8017308:	08021b20 	.word	0x08021b20
 801730c:	08021b40 	.word	0x08021b40
 8017310:	2400cc34 	.word	0x2400cc34
 8017314:	08021b64 	.word	0x08021b64

08017318 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017318:	b5b0      	push	{r4, r5, r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d106      	bne.n	8017334 <tcp_rexmit_rto_prepare+0x1c>
 8017326:	4b31      	ldr	r3, [pc, #196]	@ (80173ec <tcp_rexmit_rto_prepare+0xd4>)
 8017328:	f240 6263 	movw	r2, #1635	@ 0x663
 801732c:	4930      	ldr	r1, [pc, #192]	@ (80173f0 <tcp_rexmit_rto_prepare+0xd8>)
 801732e:	4831      	ldr	r0, [pc, #196]	@ (80173f4 <tcp_rexmit_rto_prepare+0xdc>)
 8017330:	f006 fa70 	bl	801d814 <iprintf>

  if (pcb->unacked == NULL) {
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017338:	2b00      	cmp	r3, #0
 801733a:	d102      	bne.n	8017342 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801733c:	f06f 0305 	mvn.w	r3, #5
 8017340:	e050      	b.n	80173e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017346:	60fb      	str	r3, [r7, #12]
 8017348:	e00b      	b.n	8017362 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	f7ff fee4 	bl	8017118 <tcp_output_segment_busy>
 8017350:	4603      	mov	r3, r0
 8017352:	2b00      	cmp	r3, #0
 8017354:	d002      	beq.n	801735c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017356:	f06f 0305 	mvn.w	r3, #5
 801735a:	e043      	b.n	80173e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	60fb      	str	r3, [r7, #12]
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d1ef      	bne.n	801734a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801736a:	68f8      	ldr	r0, [r7, #12]
 801736c:	f7ff fed4 	bl	8017118 <tcp_output_segment_busy>
 8017370:	4603      	mov	r3, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d002      	beq.n	801737c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017376:	f06f 0305 	mvn.w	r3, #5
 801737a:	e033      	b.n	80173e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2200      	movs	r2, #0
 8017390:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	8b5b      	ldrh	r3, [r3, #26]
 8017396:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7f9 fb95 	bl	8010ad6 <lwip_htonl>
 80173ac:	4604      	mov	r4, r0
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	891b      	ldrh	r3, [r3, #8]
 80173b2:	461d      	mov	r5, r3
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	68db      	ldr	r3, [r3, #12]
 80173b8:	899b      	ldrh	r3, [r3, #12]
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	4618      	mov	r0, r3
 80173be:	f7f9 fb75 	bl	8010aac <lwip_htons>
 80173c2:	4603      	mov	r3, r0
 80173c4:	b2db      	uxtb	r3, r3
 80173c6:	f003 0303 	and.w	r3, r3, #3
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <tcp_rexmit_rto_prepare+0xba>
 80173ce:	2301      	movs	r3, #1
 80173d0:	e000      	b.n	80173d4 <tcp_rexmit_rto_prepare+0xbc>
 80173d2:	2300      	movs	r3, #0
 80173d4:	442b      	add	r3, r5
 80173d6:	18e2      	adds	r2, r4, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3710      	adds	r7, #16
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bdb0      	pop	{r4, r5, r7, pc}
 80173ec:	0802153c 	.word	0x0802153c
 80173f0:	08021b78 	.word	0x08021b78
 80173f4:	08021590 	.word	0x08021590

080173f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d106      	bne.n	8017414 <tcp_rexmit_rto_commit+0x1c>
 8017406:	4b0d      	ldr	r3, [pc, #52]	@ (801743c <tcp_rexmit_rto_commit+0x44>)
 8017408:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801740c:	490c      	ldr	r1, [pc, #48]	@ (8017440 <tcp_rexmit_rto_commit+0x48>)
 801740e:	480d      	ldr	r0, [pc, #52]	@ (8017444 <tcp_rexmit_rto_commit+0x4c>)
 8017410:	f006 fa00 	bl	801d814 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801741a:	2bff      	cmp	r3, #255	@ 0xff
 801741c:	d007      	beq.n	801742e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017424:	3301      	adds	r3, #1
 8017426:	b2da      	uxtb	r2, r3
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f7ff fc7e 	bl	8016d30 <tcp_output>
}
 8017434:	bf00      	nop
 8017436:	3708      	adds	r7, #8
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	0802153c 	.word	0x0802153c
 8017440:	08021b9c 	.word	0x08021b9c
 8017444:	08021590 	.word	0x08021590

08017448 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d106      	bne.n	8017464 <tcp_rexmit_rto+0x1c>
 8017456:	4b0a      	ldr	r3, [pc, #40]	@ (8017480 <tcp_rexmit_rto+0x38>)
 8017458:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801745c:	4909      	ldr	r1, [pc, #36]	@ (8017484 <tcp_rexmit_rto+0x3c>)
 801745e:	480a      	ldr	r0, [pc, #40]	@ (8017488 <tcp_rexmit_rto+0x40>)
 8017460:	f006 f9d8 	bl	801d814 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7ff ff57 	bl	8017318 <tcp_rexmit_rto_prepare>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d102      	bne.n	8017476 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f7ff ffc1 	bl	80173f8 <tcp_rexmit_rto_commit>
  }
}
 8017476:	bf00      	nop
 8017478:	3708      	adds	r7, #8
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	0802153c 	.word	0x0802153c
 8017484:	08021bc0 	.word	0x08021bc0
 8017488:	08021590 	.word	0x08021590

0801748c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801748c:	b590      	push	{r4, r7, lr}
 801748e:	b085      	sub	sp, #20
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <tcp_rexmit+0x1c>
 801749a:	4b2f      	ldr	r3, [pc, #188]	@ (8017558 <tcp_rexmit+0xcc>)
 801749c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80174a0:	492e      	ldr	r1, [pc, #184]	@ (801755c <tcp_rexmit+0xd0>)
 80174a2:	482f      	ldr	r0, [pc, #188]	@ (8017560 <tcp_rexmit+0xd4>)
 80174a4:	f006 f9b6 	bl	801d814 <iprintf>

  if (pcb->unacked == NULL) {
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d102      	bne.n	80174b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80174b0:	f06f 0305 	mvn.w	r3, #5
 80174b4:	e04c      	b.n	8017550 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80174bc:	68b8      	ldr	r0, [r7, #8]
 80174be:	f7ff fe2b 	bl	8017118 <tcp_output_segment_busy>
 80174c2:	4603      	mov	r3, r0
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d002      	beq.n	80174ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80174c8:	f06f 0305 	mvn.w	r3, #5
 80174cc:	e040      	b.n	8017550 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	681a      	ldr	r2, [r3, #0]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	336c      	adds	r3, #108	@ 0x6c
 80174da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80174dc:	e002      	b.n	80174e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d011      	beq.n	8017510 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	68db      	ldr	r3, [r3, #12]
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	4618      	mov	r0, r3
 80174f6:	f7f9 faee 	bl	8010ad6 <lwip_htonl>
 80174fa:	4604      	mov	r4, r0
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	68db      	ldr	r3, [r3, #12]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	4618      	mov	r0, r3
 8017504:	f7f9 fae7 	bl	8010ad6 <lwip_htonl>
 8017508:	4603      	mov	r3, r0
 801750a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801750c:	2b00      	cmp	r3, #0
 801750e:	dbe6      	blt.n	80174de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	68ba      	ldr	r2, [r7, #8]
 801751c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801751e:	68bb      	ldr	r3, [r7, #8]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d103      	bne.n	801752e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	2200      	movs	r2, #0
 801752a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017534:	2bff      	cmp	r3, #255	@ 0xff
 8017536:	d007      	beq.n	8017548 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801753e:	3301      	adds	r3, #1
 8017540:	b2da      	uxtb	r2, r3
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2200      	movs	r2, #0
 801754c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801754e:	2300      	movs	r3, #0
}
 8017550:	4618      	mov	r0, r3
 8017552:	3714      	adds	r7, #20
 8017554:	46bd      	mov	sp, r7
 8017556:	bd90      	pop	{r4, r7, pc}
 8017558:	0802153c 	.word	0x0802153c
 801755c:	08021bdc 	.word	0x08021bdc
 8017560:	08021590 	.word	0x08021590

08017564 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d106      	bne.n	8017580 <tcp_rexmit_fast+0x1c>
 8017572:	4b2a      	ldr	r3, [pc, #168]	@ (801761c <tcp_rexmit_fast+0xb8>)
 8017574:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017578:	4929      	ldr	r1, [pc, #164]	@ (8017620 <tcp_rexmit_fast+0xbc>)
 801757a:	482a      	ldr	r0, [pc, #168]	@ (8017624 <tcp_rexmit_fast+0xc0>)
 801757c:	f006 f94a 	bl	801d814 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017584:	2b00      	cmp	r3, #0
 8017586:	d045      	beq.n	8017614 <tcp_rexmit_fast+0xb0>
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	8b5b      	ldrh	r3, [r3, #26]
 801758c:	f003 0304 	and.w	r3, r3, #4
 8017590:	2b00      	cmp	r3, #0
 8017592:	d13f      	bne.n	8017614 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff ff79 	bl	801748c <tcp_rexmit>
 801759a:	4603      	mov	r3, r0
 801759c:	2b00      	cmp	r3, #0
 801759e:	d139      	bne.n	8017614 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80175ac:	4293      	cmp	r3, r2
 80175ae:	bf28      	it	cs
 80175b0:	4613      	movcs	r3, r2
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	da00      	bge.n	80175ba <tcp_rexmit_fast+0x56>
 80175b8:	3301      	adds	r3, #1
 80175ba:	105b      	asrs	r3, r3, #1
 80175bc:	b29a      	uxth	r2, r3
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80175ca:	461a      	mov	r2, r3
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80175d0:	005b      	lsls	r3, r3, #1
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d206      	bcs.n	80175e4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80175da:	005b      	lsls	r3, r3, #1
 80175dc:	b29a      	uxth	r2, r3
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80175ee:	4619      	mov	r1, r3
 80175f0:	0049      	lsls	r1, r1, #1
 80175f2:	440b      	add	r3, r1
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	4413      	add	r3, r2
 80175f8:	b29a      	uxth	r2, r3
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	8b5b      	ldrh	r3, [r3, #26]
 8017604:	f043 0304 	orr.w	r3, r3, #4
 8017608:	b29a      	uxth	r2, r3
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	2200      	movs	r2, #0
 8017612:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017614:	bf00      	nop
 8017616:	3708      	adds	r7, #8
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	0802153c 	.word	0x0802153c
 8017620:	08021bf4 	.word	0x08021bf4
 8017624:	08021590 	.word	0x08021590

08017628 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b086      	sub	sp, #24
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	607b      	str	r3, [r7, #4]
 8017632:	460b      	mov	r3, r1
 8017634:	817b      	strh	r3, [r7, #10]
 8017636:	4613      	mov	r3, r2
 8017638:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801763a:	897a      	ldrh	r2, [r7, #10]
 801763c:	893b      	ldrh	r3, [r7, #8]
 801763e:	4413      	add	r3, r2
 8017640:	b29b      	uxth	r3, r3
 8017642:	3314      	adds	r3, #20
 8017644:	b29b      	uxth	r3, r3
 8017646:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801764a:	4619      	mov	r1, r3
 801764c:	2022      	movs	r0, #34	@ 0x22
 801764e:	f7fa fbff 	bl	8011e50 <pbuf_alloc>
 8017652:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d04d      	beq.n	80176f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801765a:	897b      	ldrh	r3, [r7, #10]
 801765c:	3313      	adds	r3, #19
 801765e:	697a      	ldr	r2, [r7, #20]
 8017660:	8952      	ldrh	r2, [r2, #10]
 8017662:	4293      	cmp	r3, r2
 8017664:	db06      	blt.n	8017674 <tcp_output_alloc_header_common+0x4c>
 8017666:	4b26      	ldr	r3, [pc, #152]	@ (8017700 <tcp_output_alloc_header_common+0xd8>)
 8017668:	f240 7223 	movw	r2, #1827	@ 0x723
 801766c:	4925      	ldr	r1, [pc, #148]	@ (8017704 <tcp_output_alloc_header_common+0xdc>)
 801766e:	4826      	ldr	r0, [pc, #152]	@ (8017708 <tcp_output_alloc_header_common+0xe0>)
 8017670:	f006 f8d0 	bl	801d814 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801767a:	8c3b      	ldrh	r3, [r7, #32]
 801767c:	4618      	mov	r0, r3
 801767e:	f7f9 fa15 	bl	8010aac <lwip_htons>
 8017682:	4603      	mov	r3, r0
 8017684:	461a      	mov	r2, r3
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801768a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801768c:	4618      	mov	r0, r3
 801768e:	f7f9 fa0d 	bl	8010aac <lwip_htons>
 8017692:	4603      	mov	r3, r0
 8017694:	461a      	mov	r2, r3
 8017696:	693b      	ldr	r3, [r7, #16]
 8017698:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f7f9 fa18 	bl	8010ad6 <lwip_htonl>
 80176a6:	4602      	mov	r2, r0
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80176ac:	897b      	ldrh	r3, [r7, #10]
 80176ae:	089b      	lsrs	r3, r3, #2
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	3305      	adds	r3, #5
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	031b      	lsls	r3, r3, #12
 80176b8:	b29a      	uxth	r2, r3
 80176ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80176be:	b29b      	uxth	r3, r3
 80176c0:	4313      	orrs	r3, r2
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f9 f9f1 	bl	8010aac <lwip_htons>
 80176ca:	4603      	mov	r3, r0
 80176cc:	461a      	mov	r2, r3
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80176d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7f9 f9e9 	bl	8010aac <lwip_htons>
 80176da:	4603      	mov	r3, r0
 80176dc:	461a      	mov	r2, r3
 80176de:	693b      	ldr	r3, [r7, #16]
 80176e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	2200      	movs	r2, #0
 80176e6:	741a      	strb	r2, [r3, #16]
 80176e8:	2200      	movs	r2, #0
 80176ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	2200      	movs	r2, #0
 80176f0:	749a      	strb	r2, [r3, #18]
 80176f2:	2200      	movs	r2, #0
 80176f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80176f6:	697b      	ldr	r3, [r7, #20]
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3718      	adds	r7, #24
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	0802153c 	.word	0x0802153c
 8017704:	08021c14 	.word	0x08021c14
 8017708:	08021590 	.word	0x08021590

0801770c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801770c:	b5b0      	push	{r4, r5, r7, lr}
 801770e:	b08a      	sub	sp, #40	@ 0x28
 8017710:	af04      	add	r7, sp, #16
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	607b      	str	r3, [r7, #4]
 8017716:	460b      	mov	r3, r1
 8017718:	817b      	strh	r3, [r7, #10]
 801771a:	4613      	mov	r3, r2
 801771c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d106      	bne.n	8017732 <tcp_output_alloc_header+0x26>
 8017724:	4b15      	ldr	r3, [pc, #84]	@ (801777c <tcp_output_alloc_header+0x70>)
 8017726:	f240 7242 	movw	r2, #1858	@ 0x742
 801772a:	4915      	ldr	r1, [pc, #84]	@ (8017780 <tcp_output_alloc_header+0x74>)
 801772c:	4815      	ldr	r0, [pc, #84]	@ (8017784 <tcp_output_alloc_header+0x78>)
 801772e:	f006 f871 	bl	801d814 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	8adb      	ldrh	r3, [r3, #22]
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	8b12      	ldrh	r2, [r2, #24]
 801773e:	68f9      	ldr	r1, [r7, #12]
 8017740:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017742:	893d      	ldrh	r5, [r7, #8]
 8017744:	897c      	ldrh	r4, [r7, #10]
 8017746:	9103      	str	r1, [sp, #12]
 8017748:	2110      	movs	r1, #16
 801774a:	9102      	str	r1, [sp, #8]
 801774c:	9201      	str	r2, [sp, #4]
 801774e:	9300      	str	r3, [sp, #0]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	462a      	mov	r2, r5
 8017754:	4621      	mov	r1, r4
 8017756:	f7ff ff67 	bl	8017628 <tcp_output_alloc_header_common>
 801775a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d006      	beq.n	8017770 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801776a:	441a      	add	r2, r3
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017770:	697b      	ldr	r3, [r7, #20]
}
 8017772:	4618      	mov	r0, r3
 8017774:	3718      	adds	r7, #24
 8017776:	46bd      	mov	sp, r7
 8017778:	bdb0      	pop	{r4, r5, r7, pc}
 801777a:	bf00      	nop
 801777c:	0802153c 	.word	0x0802153c
 8017780:	08021c44 	.word	0x08021c44
 8017784:	08021590 	.word	0x08021590

08017788 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b088      	sub	sp, #32
 801778c:	af00      	add	r7, sp, #0
 801778e:	60f8      	str	r0, [r7, #12]
 8017790:	60b9      	str	r1, [r7, #8]
 8017792:	4611      	mov	r1, r2
 8017794:	461a      	mov	r2, r3
 8017796:	460b      	mov	r3, r1
 8017798:	71fb      	strb	r3, [r7, #7]
 801779a:	4613      	mov	r3, r2
 801779c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801779e:	2300      	movs	r3, #0
 80177a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d106      	bne.n	80177b6 <tcp_output_fill_options+0x2e>
 80177a8:	4b12      	ldr	r3, [pc, #72]	@ (80177f4 <tcp_output_fill_options+0x6c>)
 80177aa:	f240 7256 	movw	r2, #1878	@ 0x756
 80177ae:	4912      	ldr	r1, [pc, #72]	@ (80177f8 <tcp_output_fill_options+0x70>)
 80177b0:	4812      	ldr	r0, [pc, #72]	@ (80177fc <tcp_output_fill_options+0x74>)
 80177b2:	f006 f82f 	bl	801d814 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	3314      	adds	r3, #20
 80177c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80177c2:	8bfb      	ldrh	r3, [r7, #30]
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	461a      	mov	r2, r3
 80177c8:	79fb      	ldrb	r3, [r7, #7]
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	f003 0304 	and.w	r3, r3, #4
 80177d0:	4413      	add	r3, r2
 80177d2:	3314      	adds	r3, #20
 80177d4:	69ba      	ldr	r2, [r7, #24]
 80177d6:	4413      	add	r3, r2
 80177d8:	697a      	ldr	r2, [r7, #20]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d006      	beq.n	80177ec <tcp_output_fill_options+0x64>
 80177de:	4b05      	ldr	r3, [pc, #20]	@ (80177f4 <tcp_output_fill_options+0x6c>)
 80177e0:	f240 7275 	movw	r2, #1909	@ 0x775
 80177e4:	4906      	ldr	r1, [pc, #24]	@ (8017800 <tcp_output_fill_options+0x78>)
 80177e6:	4805      	ldr	r0, [pc, #20]	@ (80177fc <tcp_output_fill_options+0x74>)
 80177e8:	f006 f814 	bl	801d814 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80177ec:	bf00      	nop
 80177ee:	3720      	adds	r7, #32
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	0802153c 	.word	0x0802153c
 80177f8:	08021c6c 	.word	0x08021c6c
 80177fc:	08021590 	.word	0x08021590
 8017800:	08021b64 	.word	0x08021b64

08017804 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b08a      	sub	sp, #40	@ 0x28
 8017808:	af04      	add	r7, sp, #16
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
 8017810:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017812:	68bb      	ldr	r3, [r7, #8]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d106      	bne.n	8017826 <tcp_output_control_segment+0x22>
 8017818:	4b1c      	ldr	r3, [pc, #112]	@ (801788c <tcp_output_control_segment+0x88>)
 801781a:	f240 7287 	movw	r2, #1927	@ 0x787
 801781e:	491c      	ldr	r1, [pc, #112]	@ (8017890 <tcp_output_control_segment+0x8c>)
 8017820:	481c      	ldr	r0, [pc, #112]	@ (8017894 <tcp_output_control_segment+0x90>)
 8017822:	f005 fff7 	bl	801d814 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017826:	683a      	ldr	r2, [r7, #0]
 8017828:	6879      	ldr	r1, [r7, #4]
 801782a:	68f8      	ldr	r0, [r7, #12]
 801782c:	f7fe ff42 	bl	80166b4 <tcp_route>
 8017830:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d102      	bne.n	801783e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017838:	23fc      	movs	r3, #252	@ 0xfc
 801783a:	75fb      	strb	r3, [r7, #23]
 801783c:	e01c      	b.n	8017878 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d006      	beq.n	8017852 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	7adb      	ldrb	r3, [r3, #11]
 8017848:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	7a9b      	ldrb	r3, [r3, #10]
 801784e:	757b      	strb	r3, [r7, #21]
 8017850:	e003      	b.n	801785a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017852:	23ff      	movs	r3, #255	@ 0xff
 8017854:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801785a:	7dba      	ldrb	r2, [r7, #22]
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	9302      	str	r3, [sp, #8]
 8017860:	2306      	movs	r3, #6
 8017862:	9301      	str	r3, [sp, #4]
 8017864:	7d7b      	ldrb	r3, [r7, #21]
 8017866:	9300      	str	r3, [sp, #0]
 8017868:	4613      	mov	r3, r2
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	6879      	ldr	r1, [r7, #4]
 801786e:	68b8      	ldr	r0, [r7, #8]
 8017870:	f004 f978 	bl	801bb64 <ip4_output_if>
 8017874:	4603      	mov	r3, r0
 8017876:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017878:	68b8      	ldr	r0, [r7, #8]
 801787a:	f7fa fdcd 	bl	8012418 <pbuf_free>
  return err;
 801787e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017882:	4618      	mov	r0, r3
 8017884:	3718      	adds	r7, #24
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	0802153c 	.word	0x0802153c
 8017890:	08021c94 	.word	0x08021c94
 8017894:	08021590 	.word	0x08021590

08017898 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017898:	b590      	push	{r4, r7, lr}
 801789a:	b08b      	sub	sp, #44	@ 0x2c
 801789c:	af04      	add	r7, sp, #16
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
 80178a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80178a6:	683b      	ldr	r3, [r7, #0]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d106      	bne.n	80178ba <tcp_rst+0x22>
 80178ac:	4b1f      	ldr	r3, [pc, #124]	@ (801792c <tcp_rst+0x94>)
 80178ae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80178b2:	491f      	ldr	r1, [pc, #124]	@ (8017930 <tcp_rst+0x98>)
 80178b4:	481f      	ldr	r0, [pc, #124]	@ (8017934 <tcp_rst+0x9c>)
 80178b6:	f005 ffad 	bl	801d814 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80178ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d106      	bne.n	80178ce <tcp_rst+0x36>
 80178c0:	4b1a      	ldr	r3, [pc, #104]	@ (801792c <tcp_rst+0x94>)
 80178c2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80178c6:	491c      	ldr	r1, [pc, #112]	@ (8017938 <tcp_rst+0xa0>)
 80178c8:	481a      	ldr	r0, [pc, #104]	@ (8017934 <tcp_rst+0x9c>)
 80178ca:	f005 ffa3 	bl	801d814 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178ce:	2300      	movs	r3, #0
 80178d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80178d2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80178d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80178d8:	7dfb      	ldrb	r3, [r7, #23]
 80178da:	b29c      	uxth	r4, r3
 80178dc:	68b8      	ldr	r0, [r7, #8]
 80178de:	f7f9 f8fa 	bl	8010ad6 <lwip_htonl>
 80178e2:	4602      	mov	r2, r0
 80178e4:	8abb      	ldrh	r3, [r7, #20]
 80178e6:	9303      	str	r3, [sp, #12]
 80178e8:	2314      	movs	r3, #20
 80178ea:	9302      	str	r3, [sp, #8]
 80178ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80178ee:	9301      	str	r3, [sp, #4]
 80178f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80178f2:	9300      	str	r3, [sp, #0]
 80178f4:	4613      	mov	r3, r2
 80178f6:	2200      	movs	r2, #0
 80178f8:	4621      	mov	r1, r4
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7ff fe94 	bl	8017628 <tcp_output_alloc_header_common>
 8017900:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017902:	693b      	ldr	r3, [r7, #16]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d00c      	beq.n	8017922 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017908:	7dfb      	ldrb	r3, [r7, #23]
 801790a:	2200      	movs	r2, #0
 801790c:	6939      	ldr	r1, [r7, #16]
 801790e:	68f8      	ldr	r0, [r7, #12]
 8017910:	f7ff ff3a 	bl	8017788 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017916:	683a      	ldr	r2, [r7, #0]
 8017918:	6939      	ldr	r1, [r7, #16]
 801791a:	68f8      	ldr	r0, [r7, #12]
 801791c:	f7ff ff72 	bl	8017804 <tcp_output_control_segment>
 8017920:	e000      	b.n	8017924 <tcp_rst+0x8c>
    return;
 8017922:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017924:	371c      	adds	r7, #28
 8017926:	46bd      	mov	sp, r7
 8017928:	bd90      	pop	{r4, r7, pc}
 801792a:	bf00      	nop
 801792c:	0802153c 	.word	0x0802153c
 8017930:	08021cc0 	.word	0x08021cc0
 8017934:	08021590 	.word	0x08021590
 8017938:	08021cdc 	.word	0x08021cdc

0801793c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801793c:	b590      	push	{r4, r7, lr}
 801793e:	b087      	sub	sp, #28
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017944:	2300      	movs	r3, #0
 8017946:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017948:	2300      	movs	r3, #0
 801794a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d106      	bne.n	8017960 <tcp_send_empty_ack+0x24>
 8017952:	4b28      	ldr	r3, [pc, #160]	@ (80179f4 <tcp_send_empty_ack+0xb8>)
 8017954:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017958:	4927      	ldr	r1, [pc, #156]	@ (80179f8 <tcp_send_empty_ack+0xbc>)
 801795a:	4828      	ldr	r0, [pc, #160]	@ (80179fc <tcp_send_empty_ack+0xc0>)
 801795c:	f005 ff5a 	bl	801d814 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017960:	7dfb      	ldrb	r3, [r7, #23]
 8017962:	009b      	lsls	r3, r3, #2
 8017964:	b2db      	uxtb	r3, r3
 8017966:	f003 0304 	and.w	r3, r3, #4
 801796a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801796c:	7d7b      	ldrb	r3, [r7, #21]
 801796e:	b29c      	uxth	r4, r3
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017974:	4618      	mov	r0, r3
 8017976:	f7f9 f8ae 	bl	8010ad6 <lwip_htonl>
 801797a:	4603      	mov	r3, r0
 801797c:	2200      	movs	r2, #0
 801797e:	4621      	mov	r1, r4
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7ff fec3 	bl	801770c <tcp_output_alloc_header>
 8017986:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d109      	bne.n	80179a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	8b5b      	ldrh	r3, [r3, #26]
 8017992:	f043 0303 	orr.w	r3, r3, #3
 8017996:	b29a      	uxth	r2, r3
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801799c:	f06f 0301 	mvn.w	r3, #1
 80179a0:	e023      	b.n	80179ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80179a2:	7dbb      	ldrb	r3, [r7, #22]
 80179a4:	7dfa      	ldrb	r2, [r7, #23]
 80179a6:	6939      	ldr	r1, [r7, #16]
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f7ff feed 	bl	8017788 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179ae:	687a      	ldr	r2, [r7, #4]
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	3304      	adds	r3, #4
 80179b4:	6939      	ldr	r1, [r7, #16]
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7ff ff24 	bl	8017804 <tcp_output_control_segment>
 80179bc:	4603      	mov	r3, r0
 80179be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80179c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d007      	beq.n	80179d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	8b5b      	ldrh	r3, [r3, #26]
 80179cc:	f043 0303 	orr.w	r3, r3, #3
 80179d0:	b29a      	uxth	r2, r3
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	835a      	strh	r2, [r3, #26]
 80179d6:	e006      	b.n	80179e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	8b5b      	ldrh	r3, [r3, #26]
 80179dc:	f023 0303 	bic.w	r3, r3, #3
 80179e0:	b29a      	uxth	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80179e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	371c      	adds	r7, #28
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd90      	pop	{r4, r7, pc}
 80179f2:	bf00      	nop
 80179f4:	0802153c 	.word	0x0802153c
 80179f8:	08021cf8 	.word	0x08021cf8
 80179fc:	08021590 	.word	0x08021590

08017a00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017a00:	b590      	push	{r4, r7, lr}
 8017a02:	b087      	sub	sp, #28
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a08:	2300      	movs	r3, #0
 8017a0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d106      	bne.n	8017a20 <tcp_keepalive+0x20>
 8017a12:	4b18      	ldr	r3, [pc, #96]	@ (8017a74 <tcp_keepalive+0x74>)
 8017a14:	f640 0224 	movw	r2, #2084	@ 0x824
 8017a18:	4917      	ldr	r1, [pc, #92]	@ (8017a78 <tcp_keepalive+0x78>)
 8017a1a:	4818      	ldr	r0, [pc, #96]	@ (8017a7c <tcp_keepalive+0x7c>)
 8017a1c:	f005 fefa 	bl	801d814 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017a20:	7dfb      	ldrb	r3, [r7, #23]
 8017a22:	b29c      	uxth	r4, r3
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a28:	3b01      	subs	r3, #1
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7f9 f853 	bl	8010ad6 <lwip_htonl>
 8017a30:	4603      	mov	r3, r0
 8017a32:	2200      	movs	r2, #0
 8017a34:	4621      	mov	r1, r4
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7ff fe68 	bl	801770c <tcp_output_alloc_header>
 8017a3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d102      	bne.n	8017a4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017a44:	f04f 33ff 	mov.w	r3, #4294967295
 8017a48:	e010      	b.n	8017a6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a4a:	7dfb      	ldrb	r3, [r7, #23]
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	6939      	ldr	r1, [r7, #16]
 8017a50:	6878      	ldr	r0, [r7, #4]
 8017a52:	f7ff fe99 	bl	8017788 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	3304      	adds	r3, #4
 8017a5c:	6939      	ldr	r1, [r7, #16]
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f7ff fed0 	bl	8017804 <tcp_output_control_segment>
 8017a64:	4603      	mov	r3, r0
 8017a66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	371c      	adds	r7, #28
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd90      	pop	{r4, r7, pc}
 8017a74:	0802153c 	.word	0x0802153c
 8017a78:	08021d18 	.word	0x08021d18
 8017a7c:	08021590 	.word	0x08021590

08017a80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017a80:	b590      	push	{r4, r7, lr}
 8017a82:	b08b      	sub	sp, #44	@ 0x2c
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a88:	2300      	movs	r3, #0
 8017a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d106      	bne.n	8017aa2 <tcp_zero_window_probe+0x22>
 8017a94:	4b4c      	ldr	r3, [pc, #304]	@ (8017bc8 <tcp_zero_window_probe+0x148>)
 8017a96:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017a9a:	494c      	ldr	r1, [pc, #304]	@ (8017bcc <tcp_zero_window_probe+0x14c>)
 8017a9c:	484c      	ldr	r0, [pc, #304]	@ (8017bd0 <tcp_zero_window_probe+0x150>)
 8017a9e:	f005 feb9 	bl	801d814 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aa6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d101      	bne.n	8017ab2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	e086      	b.n	8017bc0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017ab8:	2bff      	cmp	r3, #255	@ 0xff
 8017aba:	d007      	beq.n	8017acc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	b2da      	uxtb	r2, r3
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017acc:	6a3b      	ldr	r3, [r7, #32]
 8017ace:	68db      	ldr	r3, [r3, #12]
 8017ad0:	899b      	ldrh	r3, [r3, #12]
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7f8 ffe9 	bl	8010aac <lwip_htons>
 8017ada:	4603      	mov	r3, r0
 8017adc:	b2db      	uxtb	r3, r3
 8017ade:	f003 0301 	and.w	r3, r3, #1
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d005      	beq.n	8017af2 <tcp_zero_window_probe+0x72>
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	891b      	ldrh	r3, [r3, #8]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d101      	bne.n	8017af2 <tcp_zero_window_probe+0x72>
 8017aee:	2301      	movs	r3, #1
 8017af0:	e000      	b.n	8017af4 <tcp_zero_window_probe+0x74>
 8017af2:	2300      	movs	r3, #0
 8017af4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017af6:	7ffb      	ldrb	r3, [r7, #31]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	bf0c      	ite	eq
 8017afc:	2301      	moveq	r3, #1
 8017afe:	2300      	movne	r3, #0
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b08:	b299      	uxth	r1, r3
 8017b0a:	6a3b      	ldr	r3, [r7, #32]
 8017b0c:	68db      	ldr	r3, [r3, #12]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	8bba      	ldrh	r2, [r7, #28]
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f7ff fdfa 	bl	801770c <tcp_output_alloc_header>
 8017b18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017b1a:	69bb      	ldr	r3, [r7, #24]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d102      	bne.n	8017b26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017b20:	f04f 33ff 	mov.w	r3, #4294967295
 8017b24:	e04c      	b.n	8017bc0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017b2c:	7ffb      	ldrb	r3, [r7, #31]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d011      	beq.n	8017b56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017b32:	697b      	ldr	r3, [r7, #20]
 8017b34:	899b      	ldrh	r3, [r3, #12]
 8017b36:	b29b      	uxth	r3, r3
 8017b38:	b21b      	sxth	r3, r3
 8017b3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017b3e:	b21c      	sxth	r4, r3
 8017b40:	2011      	movs	r0, #17
 8017b42:	f7f8 ffb3 	bl	8010aac <lwip_htons>
 8017b46:	4603      	mov	r3, r0
 8017b48:	b21b      	sxth	r3, r3
 8017b4a:	4323      	orrs	r3, r4
 8017b4c:	b21b      	sxth	r3, r3
 8017b4e:	b29a      	uxth	r2, r3
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	819a      	strh	r2, [r3, #12]
 8017b54:	e010      	b.n	8017b78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017b56:	69bb      	ldr	r3, [r7, #24]
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	3314      	adds	r3, #20
 8017b5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017b5e:	6a3b      	ldr	r3, [r7, #32]
 8017b60:	6858      	ldr	r0, [r3, #4]
 8017b62:	6a3b      	ldr	r3, [r7, #32]
 8017b64:	685b      	ldr	r3, [r3, #4]
 8017b66:	891a      	ldrh	r2, [r3, #8]
 8017b68:	6a3b      	ldr	r3, [r7, #32]
 8017b6a:	891b      	ldrh	r3, [r3, #8]
 8017b6c:	1ad3      	subs	r3, r2, r3
 8017b6e:	b29b      	uxth	r3, r3
 8017b70:	2201      	movs	r2, #1
 8017b72:	6939      	ldr	r1, [r7, #16]
 8017b74:	f7fa fe56 	bl	8012824 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017b78:	6a3b      	ldr	r3, [r7, #32]
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f8 ffa9 	bl	8010ad6 <lwip_htonl>
 8017b84:	4603      	mov	r3, r0
 8017b86:	3301      	adds	r3, #1
 8017b88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	1ad3      	subs	r3, r2, r3
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	da02      	bge.n	8017b9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	68fa      	ldr	r2, [r7, #12]
 8017b9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	69b9      	ldr	r1, [r7, #24]
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	f7ff fdef 	bl	8017788 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017baa:	687a      	ldr	r2, [r7, #4]
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	3304      	adds	r3, #4
 8017bb0:	69b9      	ldr	r1, [r7, #24]
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f7ff fe26 	bl	8017804 <tcp_output_control_segment>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017bbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	372c      	adds	r7, #44	@ 0x2c
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd90      	pop	{r4, r7, pc}
 8017bc8:	0802153c 	.word	0x0802153c
 8017bcc:	08021d34 	.word	0x08021d34
 8017bd0:	08021590 	.word	0x08021590

08017bd4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017bdc:	f7fa ff10 	bl	8012a00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017be0:	4b0a      	ldr	r3, [pc, #40]	@ (8017c0c <tcpip_tcp_timer+0x38>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d103      	bne.n	8017bf0 <tcpip_tcp_timer+0x1c>
 8017be8:	4b09      	ldr	r3, [pc, #36]	@ (8017c10 <tcpip_tcp_timer+0x3c>)
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d005      	beq.n	8017bfc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	4908      	ldr	r1, [pc, #32]	@ (8017c14 <tcpip_tcp_timer+0x40>)
 8017bf4:	20fa      	movs	r0, #250	@ 0xfa
 8017bf6:	f000 f8f3 	bl	8017de0 <sys_timeout>
 8017bfa:	e003      	b.n	8017c04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017bfc:	4b06      	ldr	r3, [pc, #24]	@ (8017c18 <tcpip_tcp_timer+0x44>)
 8017bfe:	2200      	movs	r2, #0
 8017c00:	601a      	str	r2, [r3, #0]
  }
}
 8017c02:	bf00      	nop
 8017c04:	bf00      	nop
 8017c06:	3708      	adds	r7, #8
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	2400cc40 	.word	0x2400cc40
 8017c10:	2400cc44 	.word	0x2400cc44
 8017c14:	08017bd5 	.word	0x08017bd5
 8017c18:	2400cc8c 	.word	0x2400cc8c

08017c1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017c20:	4b0a      	ldr	r3, [pc, #40]	@ (8017c4c <tcp_timer_needed+0x30>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d10f      	bne.n	8017c48 <tcp_timer_needed+0x2c>
 8017c28:	4b09      	ldr	r3, [pc, #36]	@ (8017c50 <tcp_timer_needed+0x34>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d103      	bne.n	8017c38 <tcp_timer_needed+0x1c>
 8017c30:	4b08      	ldr	r3, [pc, #32]	@ (8017c54 <tcp_timer_needed+0x38>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d007      	beq.n	8017c48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017c38:	4b04      	ldr	r3, [pc, #16]	@ (8017c4c <tcp_timer_needed+0x30>)
 8017c3a:	2201      	movs	r2, #1
 8017c3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017c3e:	2200      	movs	r2, #0
 8017c40:	4905      	ldr	r1, [pc, #20]	@ (8017c58 <tcp_timer_needed+0x3c>)
 8017c42:	20fa      	movs	r0, #250	@ 0xfa
 8017c44:	f000 f8cc 	bl	8017de0 <sys_timeout>
  }
}
 8017c48:	bf00      	nop
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	2400cc8c 	.word	0x2400cc8c
 8017c50:	2400cc40 	.word	0x2400cc40
 8017c54:	2400cc44 	.word	0x2400cc44
 8017c58:	08017bd5 	.word	0x08017bd5

08017c5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b086      	sub	sp, #24
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	60b9      	str	r1, [r7, #8]
 8017c66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017c68:	200a      	movs	r0, #10
 8017c6a:	f7f9 fcaf 	bl	80115cc <memp_malloc>
 8017c6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d109      	bne.n	8017c8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017c76:	693b      	ldr	r3, [r7, #16]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d151      	bne.n	8017d20 <sys_timeout_abs+0xc4>
 8017c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8017d28 <sys_timeout_abs+0xcc>)
 8017c7e:	22be      	movs	r2, #190	@ 0xbe
 8017c80:	492a      	ldr	r1, [pc, #168]	@ (8017d2c <sys_timeout_abs+0xd0>)
 8017c82:	482b      	ldr	r0, [pc, #172]	@ (8017d30 <sys_timeout_abs+0xd4>)
 8017c84:	f005 fdc6 	bl	801d814 <iprintf>
    return;
 8017c88:	e04a      	b.n	8017d20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017c8a:	693b      	ldr	r3, [r7, #16]
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	68ba      	ldr	r2, [r7, #8]
 8017c94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	687a      	ldr	r2, [r7, #4]
 8017c9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	68fa      	ldr	r2, [r7, #12]
 8017ca0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017ca2:	4b24      	ldr	r3, [pc, #144]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d103      	bne.n	8017cb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017caa:	4a22      	ldr	r2, [pc, #136]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017cac:	693b      	ldr	r3, [r7, #16]
 8017cae:	6013      	str	r3, [r2, #0]
    return;
 8017cb0:	e037      	b.n	8017d22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	685a      	ldr	r2, [r3, #4]
 8017cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	1ad3      	subs	r3, r2, r3
 8017cbe:	0fdb      	lsrs	r3, r3, #31
 8017cc0:	f003 0301 	and.w	r3, r3, #1
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d007      	beq.n	8017cda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017cca:	4b1a      	ldr	r3, [pc, #104]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017ccc:	681a      	ldr	r2, [r3, #0]
 8017cce:	693b      	ldr	r3, [r7, #16]
 8017cd0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017cd2:	4a18      	ldr	r2, [pc, #96]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	6013      	str	r3, [r2, #0]
 8017cd8:	e023      	b.n	8017d22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017cda:	4b16      	ldr	r3, [pc, #88]	@ (8017d34 <sys_timeout_abs+0xd8>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	617b      	str	r3, [r7, #20]
 8017ce0:	e01a      	b.n	8017d18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d00b      	beq.n	8017d02 <sys_timeout_abs+0xa6>
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	685a      	ldr	r2, [r3, #4]
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	1ad3      	subs	r3, r2, r3
 8017cf6:	0fdb      	lsrs	r3, r3, #31
 8017cf8:	f003 0301 	and.w	r3, r3, #1
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d007      	beq.n	8017d12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	681a      	ldr	r2, [r3, #0]
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	693a      	ldr	r2, [r7, #16]
 8017d0e:	601a      	str	r2, [r3, #0]
        break;
 8017d10:	e007      	b.n	8017d22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	617b      	str	r3, [r7, #20]
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1e1      	bne.n	8017ce2 <sys_timeout_abs+0x86>
 8017d1e:	e000      	b.n	8017d22 <sys_timeout_abs+0xc6>
    return;
 8017d20:	bf00      	nop
      }
    }
  }
}
 8017d22:	3718      	adds	r7, #24
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	08021d58 	.word	0x08021d58
 8017d2c:	08021d8c 	.word	0x08021d8c
 8017d30:	08021dcc 	.word	0x08021dcc
 8017d34:	2400cc84 	.word	0x2400cc84

08017d38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	4798      	blx	r3

  now = sys_now();
 8017d4a:	f7f4 faf3 	bl	800c334 <sys_now>
 8017d4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	681a      	ldr	r2, [r3, #0]
 8017d54:	4b0f      	ldr	r3, [pc, #60]	@ (8017d94 <lwip_cyclic_timer+0x5c>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4413      	add	r3, r2
 8017d5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017d5c:	68fa      	ldr	r2, [r7, #12]
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	1ad3      	subs	r3, r2, r3
 8017d62:	0fdb      	lsrs	r3, r3, #31
 8017d64:	f003 0301 	and.w	r3, r3, #1
 8017d68:	b2db      	uxtb	r3, r3
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d009      	beq.n	8017d82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	4413      	add	r3, r2
 8017d76:	687a      	ldr	r2, [r7, #4]
 8017d78:	4907      	ldr	r1, [pc, #28]	@ (8017d98 <lwip_cyclic_timer+0x60>)
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7ff ff6e 	bl	8017c5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017d80:	e004      	b.n	8017d8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	4904      	ldr	r1, [pc, #16]	@ (8017d98 <lwip_cyclic_timer+0x60>)
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f7ff ff68 	bl	8017c5c <sys_timeout_abs>
}
 8017d8c:	bf00      	nop
 8017d8e:	3718      	adds	r7, #24
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	2400cc88 	.word	0x2400cc88
 8017d98:	08017d39 	.word	0x08017d39

08017d9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017da2:	2301      	movs	r3, #1
 8017da4:	607b      	str	r3, [r7, #4]
 8017da6:	e00e      	b.n	8017dc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017da8:	4a0b      	ldr	r2, [pc, #44]	@ (8017dd8 <sys_timeouts_init+0x3c>)
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	00db      	lsls	r3, r3, #3
 8017db4:	4a08      	ldr	r2, [pc, #32]	@ (8017dd8 <sys_timeouts_init+0x3c>)
 8017db6:	4413      	add	r3, r2
 8017db8:	461a      	mov	r2, r3
 8017dba:	4908      	ldr	r1, [pc, #32]	@ (8017ddc <sys_timeouts_init+0x40>)
 8017dbc:	f000 f810 	bl	8017de0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	607b      	str	r3, [r7, #4]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2b04      	cmp	r3, #4
 8017dca:	d9ed      	bls.n	8017da8 <sys_timeouts_init+0xc>
  }
}
 8017dcc:	bf00      	nop
 8017dce:	bf00      	nop
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	08022dd0 	.word	0x08022dd0
 8017ddc:	08017d39 	.word	0x08017d39

08017de0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017df2:	d306      	bcc.n	8017e02 <sys_timeout+0x22>
 8017df4:	4b0a      	ldr	r3, [pc, #40]	@ (8017e20 <sys_timeout+0x40>)
 8017df6:	f240 1229 	movw	r2, #297	@ 0x129
 8017dfa:	490a      	ldr	r1, [pc, #40]	@ (8017e24 <sys_timeout+0x44>)
 8017dfc:	480a      	ldr	r0, [pc, #40]	@ (8017e28 <sys_timeout+0x48>)
 8017dfe:	f005 fd09 	bl	801d814 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017e02:	f7f4 fa97 	bl	800c334 <sys_now>
 8017e06:	4602      	mov	r2, r0
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	4413      	add	r3, r2
 8017e0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017e0e:	687a      	ldr	r2, [r7, #4]
 8017e10:	68b9      	ldr	r1, [r7, #8]
 8017e12:	6978      	ldr	r0, [r7, #20]
 8017e14:	f7ff ff22 	bl	8017c5c <sys_timeout_abs>
#endif
}
 8017e18:	bf00      	nop
 8017e1a:	3718      	adds	r7, #24
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	08021d58 	.word	0x08021d58
 8017e24:	08021df4 	.word	0x08021df4
 8017e28:	08021dcc 	.word	0x08021dcc

08017e2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017e32:	f7f4 fa7f 	bl	800c334 <sys_now>
 8017e36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017e38:	4b17      	ldr	r3, [pc, #92]	@ (8017e98 <sys_check_timeouts+0x6c>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d022      	beq.n	8017e8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	68fa      	ldr	r2, [r7, #12]
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	0fdb      	lsrs	r3, r3, #31
 8017e4e:	f003 0301 	and.w	r3, r3, #1
 8017e52:	b2db      	uxtb	r3, r3
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d11a      	bne.n	8017e8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8017e98 <sys_check_timeouts+0x6c>)
 8017e5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	689b      	ldr	r3, [r3, #8]
 8017e64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017e66:	68bb      	ldr	r3, [r7, #8]
 8017e68:	68db      	ldr	r3, [r3, #12]
 8017e6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	4a0a      	ldr	r2, [pc, #40]	@ (8017e9c <sys_check_timeouts+0x70>)
 8017e72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017e74:	68b9      	ldr	r1, [r7, #8]
 8017e76:	200a      	movs	r0, #10
 8017e78:	f7f9 fc1e 	bl	80116b8 <memp_free>
    if (handler != NULL) {
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d0da      	beq.n	8017e38 <sys_check_timeouts+0xc>
      handler(arg);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6838      	ldr	r0, [r7, #0]
 8017e86:	4798      	blx	r3
  do {
 8017e88:	e7d6      	b.n	8017e38 <sys_check_timeouts+0xc>
      return;
 8017e8a:	bf00      	nop
 8017e8c:	e000      	b.n	8017e90 <sys_check_timeouts+0x64>
      return;
 8017e8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017e90:	3710      	adds	r7, #16
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	2400cc84 	.word	0x2400cc84
 8017e9c:	2400cc88 	.word	0x2400cc88

08017ea0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017ea6:	4b16      	ldr	r3, [pc, #88]	@ (8017f00 <sys_timeouts_sleeptime+0x60>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d102      	bne.n	8017eb4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017eae:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb2:	e020      	b.n	8017ef6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017eb4:	f7f4 fa3e 	bl	800c334 <sys_now>
 8017eb8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017eba:	4b11      	ldr	r3, [pc, #68]	@ (8017f00 <sys_timeouts_sleeptime+0x60>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	685a      	ldr	r2, [r3, #4]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	1ad3      	subs	r3, r2, r3
 8017ec4:	0fdb      	lsrs	r3, r3, #31
 8017ec6:	f003 0301 	and.w	r3, r3, #1
 8017eca:	b2db      	uxtb	r3, r3
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d001      	beq.n	8017ed4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	e010      	b.n	8017ef6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8017f00 <sys_timeouts_sleeptime+0x60>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	da06      	bge.n	8017ef4 <sys_timeouts_sleeptime+0x54>
 8017ee6:	4b07      	ldr	r3, [pc, #28]	@ (8017f04 <sys_timeouts_sleeptime+0x64>)
 8017ee8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017eec:	4906      	ldr	r1, [pc, #24]	@ (8017f08 <sys_timeouts_sleeptime+0x68>)
 8017eee:	4807      	ldr	r0, [pc, #28]	@ (8017f0c <sys_timeouts_sleeptime+0x6c>)
 8017ef0:	f005 fc90 	bl	801d814 <iprintf>
    return ret;
 8017ef4:	683b      	ldr	r3, [r7, #0]
  }
}
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3708      	adds	r7, #8
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	2400cc84 	.word	0x2400cc84
 8017f04:	08021d58 	.word	0x08021d58
 8017f08:	08021e2c 	.word	0x08021e2c
 8017f0c:	08021dcc 	.word	0x08021dcc

08017f10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017f14:	f004 ff46 	bl	801cda4 <rand>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	4b01      	ldr	r3, [pc, #4]	@ (8017f30 <udp_init+0x20>)
 8017f2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017f2c:	bf00      	nop
 8017f2e:	bd80      	pop	{r7, pc}
 8017f30:	24000030 	.word	0x24000030

08017f34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017f3e:	4b17      	ldr	r3, [pc, #92]	@ (8017f9c <udp_new_port+0x68>)
 8017f40:	881b      	ldrh	r3, [r3, #0]
 8017f42:	1c5a      	adds	r2, r3, #1
 8017f44:	b291      	uxth	r1, r2
 8017f46:	4a15      	ldr	r2, [pc, #84]	@ (8017f9c <udp_new_port+0x68>)
 8017f48:	8011      	strh	r1, [r2, #0]
 8017f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f4e:	4293      	cmp	r3, r2
 8017f50:	d103      	bne.n	8017f5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017f52:	4b12      	ldr	r3, [pc, #72]	@ (8017f9c <udp_new_port+0x68>)
 8017f54:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017f58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f5a:	4b11      	ldr	r3, [pc, #68]	@ (8017fa0 <udp_new_port+0x6c>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	603b      	str	r3, [r7, #0]
 8017f60:	e011      	b.n	8017f86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	8a5a      	ldrh	r2, [r3, #18]
 8017f66:	4b0d      	ldr	r3, [pc, #52]	@ (8017f9c <udp_new_port+0x68>)
 8017f68:	881b      	ldrh	r3, [r3, #0]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d108      	bne.n	8017f80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017f6e:	88fb      	ldrh	r3, [r7, #6]
 8017f70:	3301      	adds	r3, #1
 8017f72:	80fb      	strh	r3, [r7, #6]
 8017f74:	88fb      	ldrh	r3, [r7, #6]
 8017f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017f7a:	d3e0      	bcc.n	8017f3e <udp_new_port+0xa>
        return 0;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	e007      	b.n	8017f90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	603b      	str	r3, [r7, #0]
 8017f86:	683b      	ldr	r3, [r7, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d1ea      	bne.n	8017f62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017f8c:	4b03      	ldr	r3, [pc, #12]	@ (8017f9c <udp_new_port+0x68>)
 8017f8e:	881b      	ldrh	r3, [r3, #0]
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	370c      	adds	r7, #12
 8017f94:	46bd      	mov	sp, r7
 8017f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9a:	4770      	bx	lr
 8017f9c:	24000030 	.word	0x24000030
 8017fa0:	2400cc90 	.word	0x2400cc90

08017fa4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	4613      	mov	r3, r2
 8017fb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d105      	bne.n	8017fc4 <udp_input_local_match+0x20>
 8017fb8:	4b27      	ldr	r3, [pc, #156]	@ (8018058 <udp_input_local_match+0xb4>)
 8017fba:	2287      	movs	r2, #135	@ 0x87
 8017fbc:	4927      	ldr	r1, [pc, #156]	@ (801805c <udp_input_local_match+0xb8>)
 8017fbe:	4828      	ldr	r0, [pc, #160]	@ (8018060 <udp_input_local_match+0xbc>)
 8017fc0:	f005 fc28 	bl	801d814 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d105      	bne.n	8017fd6 <udp_input_local_match+0x32>
 8017fca:	4b23      	ldr	r3, [pc, #140]	@ (8018058 <udp_input_local_match+0xb4>)
 8017fcc:	2288      	movs	r2, #136	@ 0x88
 8017fce:	4925      	ldr	r1, [pc, #148]	@ (8018064 <udp_input_local_match+0xc0>)
 8017fd0:	4823      	ldr	r0, [pc, #140]	@ (8018060 <udp_input_local_match+0xbc>)
 8017fd2:	f005 fc1f 	bl	801d814 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	7a1b      	ldrb	r3, [r3, #8]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d00b      	beq.n	8017ff6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	7a1a      	ldrb	r2, [r3, #8]
 8017fe2:	4b21      	ldr	r3, [pc, #132]	@ (8018068 <udp_input_local_match+0xc4>)
 8017fe4:	685b      	ldr	r3, [r3, #4]
 8017fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017fea:	3301      	adds	r3, #1
 8017fec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d001      	beq.n	8017ff6 <udp_input_local_match+0x52>
    return 0;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	e02b      	b.n	801804e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017ff6:	79fb      	ldrb	r3, [r7, #7]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d018      	beq.n	801802e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d013      	beq.n	801802a <udp_input_local_match+0x86>
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d00f      	beq.n	801802a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801800a:	4b17      	ldr	r3, [pc, #92]	@ (8018068 <udp_input_local_match+0xc4>)
 801800c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018012:	d00a      	beq.n	801802a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	4b13      	ldr	r3, [pc, #76]	@ (8018068 <udp_input_local_match+0xc4>)
 801801a:	695b      	ldr	r3, [r3, #20]
 801801c:	405a      	eors	r2, r3
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	3308      	adds	r3, #8
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018026:	2b00      	cmp	r3, #0
 8018028:	d110      	bne.n	801804c <udp_input_local_match+0xa8>
          return 1;
 801802a:	2301      	movs	r3, #1
 801802c:	e00f      	b.n	801804e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d009      	beq.n	8018048 <udp_input_local_match+0xa4>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d005      	beq.n	8018048 <udp_input_local_match+0xa4>
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	681a      	ldr	r2, [r3, #0]
 8018040:	4b09      	ldr	r3, [pc, #36]	@ (8018068 <udp_input_local_match+0xc4>)
 8018042:	695b      	ldr	r3, [r3, #20]
 8018044:	429a      	cmp	r2, r3
 8018046:	d101      	bne.n	801804c <udp_input_local_match+0xa8>
        return 1;
 8018048:	2301      	movs	r3, #1
 801804a:	e000      	b.n	801804e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801804c:	2300      	movs	r3, #0
}
 801804e:	4618      	mov	r0, r3
 8018050:	3710      	adds	r7, #16
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}
 8018056:	bf00      	nop
 8018058:	08021e40 	.word	0x08021e40
 801805c:	08021e70 	.word	0x08021e70
 8018060:	08021e94 	.word	0x08021e94
 8018064:	08021ebc 	.word	0x08021ebc
 8018068:	24009b14 	.word	0x24009b14

0801806c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801806c:	b590      	push	{r4, r7, lr}
 801806e:	b08d      	sub	sp, #52	@ 0x34
 8018070:	af02      	add	r7, sp, #8
 8018072:	6078      	str	r0, [r7, #4]
 8018074:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018076:	2300      	movs	r3, #0
 8018078:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d105      	bne.n	801808c <udp_input+0x20>
 8018080:	4b7c      	ldr	r3, [pc, #496]	@ (8018274 <udp_input+0x208>)
 8018082:	22cf      	movs	r2, #207	@ 0xcf
 8018084:	497c      	ldr	r1, [pc, #496]	@ (8018278 <udp_input+0x20c>)
 8018086:	487d      	ldr	r0, [pc, #500]	@ (801827c <udp_input+0x210>)
 8018088:	f005 fbc4 	bl	801d814 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d105      	bne.n	801809e <udp_input+0x32>
 8018092:	4b78      	ldr	r3, [pc, #480]	@ (8018274 <udp_input+0x208>)
 8018094:	22d0      	movs	r2, #208	@ 0xd0
 8018096:	497a      	ldr	r1, [pc, #488]	@ (8018280 <udp_input+0x214>)
 8018098:	4878      	ldr	r0, [pc, #480]	@ (801827c <udp_input+0x210>)
 801809a:	f005 fbbb 	bl	801d814 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	895b      	ldrh	r3, [r3, #10]
 80180a2:	2b07      	cmp	r3, #7
 80180a4:	d803      	bhi.n	80180ae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f7fa f9b6 	bl	8012418 <pbuf_free>
    goto end;
 80180ac:	e0de      	b.n	801826c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80180b4:	4b73      	ldr	r3, [pc, #460]	@ (8018284 <udp_input+0x218>)
 80180b6:	695b      	ldr	r3, [r3, #20]
 80180b8:	4a72      	ldr	r2, [pc, #456]	@ (8018284 <udp_input+0x218>)
 80180ba:	6812      	ldr	r2, [r2, #0]
 80180bc:	4611      	mov	r1, r2
 80180be:	4618      	mov	r0, r3
 80180c0:	f003 fe28 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 80180c4:	4603      	mov	r3, r0
 80180c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	881b      	ldrh	r3, [r3, #0]
 80180cc:	b29b      	uxth	r3, r3
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7f8 fcec 	bl	8010aac <lwip_htons>
 80180d4:	4603      	mov	r3, r0
 80180d6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80180d8:	697b      	ldr	r3, [r7, #20]
 80180da:	885b      	ldrh	r3, [r3, #2]
 80180dc:	b29b      	uxth	r3, r3
 80180de:	4618      	mov	r0, r3
 80180e0:	f7f8 fce4 	bl	8010aac <lwip_htons>
 80180e4:	4603      	mov	r3, r0
 80180e6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80180e8:	2300      	movs	r3, #0
 80180ea:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80180ec:	2300      	movs	r3, #0
 80180ee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80180f0:	2300      	movs	r3, #0
 80180f2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80180f4:	4b64      	ldr	r3, [pc, #400]	@ (8018288 <udp_input+0x21c>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80180fa:	e054      	b.n	80181a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80180fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180fe:	8a5b      	ldrh	r3, [r3, #18]
 8018100:	89fa      	ldrh	r2, [r7, #14]
 8018102:	429a      	cmp	r2, r3
 8018104:	d14a      	bne.n	801819c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018106:	7cfb      	ldrb	r3, [r7, #19]
 8018108:	461a      	mov	r2, r3
 801810a:	6839      	ldr	r1, [r7, #0]
 801810c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801810e:	f7ff ff49 	bl	8017fa4 <udp_input_local_match>
 8018112:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018114:	2b00      	cmp	r3, #0
 8018116:	d041      	beq.n	801819c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801811a:	7c1b      	ldrb	r3, [r3, #16]
 801811c:	f003 0304 	and.w	r3, r3, #4
 8018120:	2b00      	cmp	r3, #0
 8018122:	d11d      	bne.n	8018160 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018124:	69fb      	ldr	r3, [r7, #28]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d102      	bne.n	8018130 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801812c:	61fb      	str	r3, [r7, #28]
 801812e:	e017      	b.n	8018160 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018130:	7cfb      	ldrb	r3, [r7, #19]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d014      	beq.n	8018160 <udp_input+0xf4>
 8018136:	4b53      	ldr	r3, [pc, #332]	@ (8018284 <udp_input+0x218>)
 8018138:	695b      	ldr	r3, [r3, #20]
 801813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801813e:	d10f      	bne.n	8018160 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018140:	69fb      	ldr	r3, [r7, #28]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	3304      	adds	r3, #4
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	429a      	cmp	r2, r3
 801814c:	d008      	beq.n	8018160 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	3304      	adds	r3, #4
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	429a      	cmp	r2, r3
 801815a:	d101      	bne.n	8018160 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801815e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018162:	8a9b      	ldrh	r3, [r3, #20]
 8018164:	8a3a      	ldrh	r2, [r7, #16]
 8018166:	429a      	cmp	r2, r3
 8018168:	d118      	bne.n	801819c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801816c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801816e:	2b00      	cmp	r3, #0
 8018170:	d005      	beq.n	801817e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018174:	685a      	ldr	r2, [r3, #4]
 8018176:	4b43      	ldr	r3, [pc, #268]	@ (8018284 <udp_input+0x218>)
 8018178:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801817a:	429a      	cmp	r2, r3
 801817c:	d10e      	bne.n	801819c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801817e:	6a3b      	ldr	r3, [r7, #32]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d014      	beq.n	80181ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018186:	68da      	ldr	r2, [r3, #12]
 8018188:	6a3b      	ldr	r3, [r7, #32]
 801818a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801818c:	4b3e      	ldr	r3, [pc, #248]	@ (8018288 <udp_input+0x21c>)
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018192:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018194:	4a3c      	ldr	r2, [pc, #240]	@ (8018288 <udp_input+0x21c>)
 8018196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018198:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801819a:	e008      	b.n	80181ae <udp_input+0x142>
      }
    }

    prev = pcb;
 801819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801819e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80181a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a2:	68db      	ldr	r3, [r3, #12]
 80181a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80181a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d1a7      	bne.n	80180fc <udp_input+0x90>
 80181ac:	e000      	b.n	80181b0 <udp_input+0x144>
        break;
 80181ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80181b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d101      	bne.n	80181ba <udp_input+0x14e>
    pcb = uncon_pcb;
 80181b6:	69fb      	ldr	r3, [r7, #28]
 80181b8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80181ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d002      	beq.n	80181c6 <udp_input+0x15a>
    for_us = 1;
 80181c0:	2301      	movs	r3, #1
 80181c2:	76fb      	strb	r3, [r7, #27]
 80181c4:	e00a      	b.n	80181dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	3304      	adds	r3, #4
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	4b2d      	ldr	r3, [pc, #180]	@ (8018284 <udp_input+0x218>)
 80181ce:	695b      	ldr	r3, [r3, #20]
 80181d0:	429a      	cmp	r2, r3
 80181d2:	bf0c      	ite	eq
 80181d4:	2301      	moveq	r3, #1
 80181d6:	2300      	movne	r3, #0
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80181dc:	7efb      	ldrb	r3, [r7, #27]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d041      	beq.n	8018266 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80181e2:	2108      	movs	r1, #8
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f7fa f891 	bl	801230c <pbuf_remove_header>
 80181ea:	4603      	mov	r3, r0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d00a      	beq.n	8018206 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80181f0:	4b20      	ldr	r3, [pc, #128]	@ (8018274 <udp_input+0x208>)
 80181f2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80181f6:	4925      	ldr	r1, [pc, #148]	@ (801828c <udp_input+0x220>)
 80181f8:	4820      	ldr	r0, [pc, #128]	@ (801827c <udp_input+0x210>)
 80181fa:	f005 fb0b 	bl	801d814 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f7fa f90a 	bl	8012418 <pbuf_free>
      goto end;
 8018204:	e032      	b.n	801826c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018208:	2b00      	cmp	r3, #0
 801820a:	d012      	beq.n	8018232 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801820e:	699b      	ldr	r3, [r3, #24]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d00a      	beq.n	801822a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018216:	699c      	ldr	r4, [r3, #24]
 8018218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821a:	69d8      	ldr	r0, [r3, #28]
 801821c:	8a3b      	ldrh	r3, [r7, #16]
 801821e:	9300      	str	r3, [sp, #0]
 8018220:	4b1b      	ldr	r3, [pc, #108]	@ (8018290 <udp_input+0x224>)
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018226:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018228:	e021      	b.n	801826e <udp_input+0x202>
        pbuf_free(p);
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f7fa f8f4 	bl	8012418 <pbuf_free>
        goto end;
 8018230:	e01c      	b.n	801826c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018232:	7cfb      	ldrb	r3, [r7, #19]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d112      	bne.n	801825e <udp_input+0x1f2>
 8018238:	4b12      	ldr	r3, [pc, #72]	@ (8018284 <udp_input+0x218>)
 801823a:	695b      	ldr	r3, [r3, #20]
 801823c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018240:	2be0      	cmp	r3, #224	@ 0xe0
 8018242:	d00c      	beq.n	801825e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018244:	4b0f      	ldr	r3, [pc, #60]	@ (8018284 <udp_input+0x218>)
 8018246:	899b      	ldrh	r3, [r3, #12]
 8018248:	3308      	adds	r3, #8
 801824a:	b29b      	uxth	r3, r3
 801824c:	b21b      	sxth	r3, r3
 801824e:	4619      	mov	r1, r3
 8018250:	6878      	ldr	r0, [r7, #4]
 8018252:	f7fa f8ce 	bl	80123f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018256:	2103      	movs	r1, #3
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f003 fa13 	bl	801b684 <icmp_dest_unreach>
      pbuf_free(p);
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f7fa f8da 	bl	8012418 <pbuf_free>
  return;
 8018264:	e003      	b.n	801826e <udp_input+0x202>
    pbuf_free(p);
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7fa f8d6 	bl	8012418 <pbuf_free>
  return;
 801826c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801826e:	372c      	adds	r7, #44	@ 0x2c
 8018270:	46bd      	mov	sp, r7
 8018272:	bd90      	pop	{r4, r7, pc}
 8018274:	08021e40 	.word	0x08021e40
 8018278:	08021ee4 	.word	0x08021ee4
 801827c:	08021e94 	.word	0x08021e94
 8018280:	08021efc 	.word	0x08021efc
 8018284:	24009b14 	.word	0x24009b14
 8018288:	2400cc90 	.word	0x2400cc90
 801828c:	08021f18 	.word	0x08021f18
 8018290:	24009b24 	.word	0x24009b24

08018294 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b088      	sub	sp, #32
 8018298:	af02      	add	r7, sp, #8
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	607a      	str	r2, [r7, #4]
 80182a0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d109      	bne.n	80182bc <udp_sendto_if+0x28>
 80182a8:	4b2e      	ldr	r3, [pc, #184]	@ (8018364 <udp_sendto_if+0xd0>)
 80182aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80182ae:	492e      	ldr	r1, [pc, #184]	@ (8018368 <udp_sendto_if+0xd4>)
 80182b0:	482e      	ldr	r0, [pc, #184]	@ (801836c <udp_sendto_if+0xd8>)
 80182b2:	f005 faaf 	bl	801d814 <iprintf>
 80182b6:	f06f 030f 	mvn.w	r3, #15
 80182ba:	e04f      	b.n	801835c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d109      	bne.n	80182d6 <udp_sendto_if+0x42>
 80182c2:	4b28      	ldr	r3, [pc, #160]	@ (8018364 <udp_sendto_if+0xd0>)
 80182c4:	f240 2281 	movw	r2, #641	@ 0x281
 80182c8:	4929      	ldr	r1, [pc, #164]	@ (8018370 <udp_sendto_if+0xdc>)
 80182ca:	4828      	ldr	r0, [pc, #160]	@ (801836c <udp_sendto_if+0xd8>)
 80182cc:	f005 faa2 	bl	801d814 <iprintf>
 80182d0:	f06f 030f 	mvn.w	r3, #15
 80182d4:	e042      	b.n	801835c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d109      	bne.n	80182f0 <udp_sendto_if+0x5c>
 80182dc:	4b21      	ldr	r3, [pc, #132]	@ (8018364 <udp_sendto_if+0xd0>)
 80182de:	f240 2282 	movw	r2, #642	@ 0x282
 80182e2:	4924      	ldr	r1, [pc, #144]	@ (8018374 <udp_sendto_if+0xe0>)
 80182e4:	4821      	ldr	r0, [pc, #132]	@ (801836c <udp_sendto_if+0xd8>)
 80182e6:	f005 fa95 	bl	801d814 <iprintf>
 80182ea:	f06f 030f 	mvn.w	r3, #15
 80182ee:	e035      	b.n	801835c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80182f0:	6a3b      	ldr	r3, [r7, #32]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d109      	bne.n	801830a <udp_sendto_if+0x76>
 80182f6:	4b1b      	ldr	r3, [pc, #108]	@ (8018364 <udp_sendto_if+0xd0>)
 80182f8:	f240 2283 	movw	r2, #643	@ 0x283
 80182fc:	491e      	ldr	r1, [pc, #120]	@ (8018378 <udp_sendto_if+0xe4>)
 80182fe:	481b      	ldr	r0, [pc, #108]	@ (801836c <udp_sendto_if+0xd8>)
 8018300:	f005 fa88 	bl	801d814 <iprintf>
 8018304:	f06f 030f 	mvn.w	r3, #15
 8018308:	e028      	b.n	801835c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d009      	beq.n	8018324 <udp_sendto_if+0x90>
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d005      	beq.n	8018324 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018320:	2be0      	cmp	r3, #224	@ 0xe0
 8018322:	d103      	bne.n	801832c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018324:	6a3b      	ldr	r3, [r7, #32]
 8018326:	3304      	adds	r3, #4
 8018328:	617b      	str	r3, [r7, #20]
 801832a:	e00b      	b.n	8018344 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	681a      	ldr	r2, [r3, #0]
 8018330:	6a3b      	ldr	r3, [r7, #32]
 8018332:	3304      	adds	r3, #4
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	429a      	cmp	r2, r3
 8018338:	d002      	beq.n	8018340 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801833a:	f06f 0303 	mvn.w	r3, #3
 801833e:	e00d      	b.n	801835c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018344:	887a      	ldrh	r2, [r7, #2]
 8018346:	697b      	ldr	r3, [r7, #20]
 8018348:	9301      	str	r3, [sp, #4]
 801834a:	6a3b      	ldr	r3, [r7, #32]
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	4613      	mov	r3, r2
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	68b9      	ldr	r1, [r7, #8]
 8018354:	68f8      	ldr	r0, [r7, #12]
 8018356:	f000 f811 	bl	801837c <udp_sendto_if_src>
 801835a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801835c:	4618      	mov	r0, r3
 801835e:	3718      	adds	r7, #24
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}
 8018364:	08021e40 	.word	0x08021e40
 8018368:	08021fb4 	.word	0x08021fb4
 801836c:	08021e94 	.word	0x08021e94
 8018370:	08021fd0 	.word	0x08021fd0
 8018374:	08021fec 	.word	0x08021fec
 8018378:	0802200c 	.word	0x0802200c

0801837c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b08c      	sub	sp, #48	@ 0x30
 8018380:	af04      	add	r7, sp, #16
 8018382:	60f8      	str	r0, [r7, #12]
 8018384:	60b9      	str	r1, [r7, #8]
 8018386:	607a      	str	r2, [r7, #4]
 8018388:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d109      	bne.n	80183a4 <udp_sendto_if_src+0x28>
 8018390:	4b65      	ldr	r3, [pc, #404]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 8018392:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8018396:	4965      	ldr	r1, [pc, #404]	@ (801852c <udp_sendto_if_src+0x1b0>)
 8018398:	4865      	ldr	r0, [pc, #404]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 801839a:	f005 fa3b 	bl	801d814 <iprintf>
 801839e:	f06f 030f 	mvn.w	r3, #15
 80183a2:	e0bc      	b.n	801851e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d109      	bne.n	80183be <udp_sendto_if_src+0x42>
 80183aa:	4b5f      	ldr	r3, [pc, #380]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 80183ac:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80183b0:	4960      	ldr	r1, [pc, #384]	@ (8018534 <udp_sendto_if_src+0x1b8>)
 80183b2:	485f      	ldr	r0, [pc, #380]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 80183b4:	f005 fa2e 	bl	801d814 <iprintf>
 80183b8:	f06f 030f 	mvn.w	r3, #15
 80183bc:	e0af      	b.n	801851e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d109      	bne.n	80183d8 <udp_sendto_if_src+0x5c>
 80183c4:	4b58      	ldr	r3, [pc, #352]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 80183c6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80183ca:	495b      	ldr	r1, [pc, #364]	@ (8018538 <udp_sendto_if_src+0x1bc>)
 80183cc:	4858      	ldr	r0, [pc, #352]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 80183ce:	f005 fa21 	bl	801d814 <iprintf>
 80183d2:	f06f 030f 	mvn.w	r3, #15
 80183d6:	e0a2      	b.n	801851e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80183d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d109      	bne.n	80183f2 <udp_sendto_if_src+0x76>
 80183de:	4b52      	ldr	r3, [pc, #328]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 80183e0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80183e4:	4955      	ldr	r1, [pc, #340]	@ (801853c <udp_sendto_if_src+0x1c0>)
 80183e6:	4852      	ldr	r0, [pc, #328]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 80183e8:	f005 fa14 	bl	801d814 <iprintf>
 80183ec:	f06f 030f 	mvn.w	r3, #15
 80183f0:	e095      	b.n	801851e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80183f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d109      	bne.n	801840c <udp_sendto_if_src+0x90>
 80183f8:	4b4b      	ldr	r3, [pc, #300]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 80183fa:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80183fe:	4950      	ldr	r1, [pc, #320]	@ (8018540 <udp_sendto_if_src+0x1c4>)
 8018400:	484b      	ldr	r0, [pc, #300]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 8018402:	f005 fa07 	bl	801d814 <iprintf>
 8018406:	f06f 030f 	mvn.w	r3, #15
 801840a:	e088      	b.n	801851e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	8a5b      	ldrh	r3, [r3, #18]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d10f      	bne.n	8018434 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018414:	68f9      	ldr	r1, [r7, #12]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	8a5b      	ldrh	r3, [r3, #18]
 801841a:	461a      	mov	r2, r3
 801841c:	68f8      	ldr	r0, [r7, #12]
 801841e:	f000 f893 	bl	8018548 <udp_bind>
 8018422:	4603      	mov	r3, r0
 8018424:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018426:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801842e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018432:	e074      	b.n	801851e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	891b      	ldrh	r3, [r3, #8]
 8018438:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801843c:	4293      	cmp	r3, r2
 801843e:	d902      	bls.n	8018446 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018440:	f04f 33ff 	mov.w	r3, #4294967295
 8018444:	e06b      	b.n	801851e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018446:	2108      	movs	r1, #8
 8018448:	68b8      	ldr	r0, [r7, #8]
 801844a:	f7f9 ff4f 	bl	80122ec <pbuf_add_header>
 801844e:	4603      	mov	r3, r0
 8018450:	2b00      	cmp	r3, #0
 8018452:	d015      	beq.n	8018480 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018454:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018458:	2108      	movs	r1, #8
 801845a:	2022      	movs	r0, #34	@ 0x22
 801845c:	f7f9 fcf8 	bl	8011e50 <pbuf_alloc>
 8018460:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d102      	bne.n	801846e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018468:	f04f 33ff 	mov.w	r3, #4294967295
 801846c:	e057      	b.n	801851e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	891b      	ldrh	r3, [r3, #8]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d006      	beq.n	8018484 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018476:	68b9      	ldr	r1, [r7, #8]
 8018478:	69f8      	ldr	r0, [r7, #28]
 801847a:	f7fa f8f1 	bl	8012660 <pbuf_chain>
 801847e:	e001      	b.n	8018484 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	895b      	ldrh	r3, [r3, #10]
 8018488:	2b07      	cmp	r3, #7
 801848a:	d806      	bhi.n	801849a <udp_sendto_if_src+0x11e>
 801848c:	4b26      	ldr	r3, [pc, #152]	@ (8018528 <udp_sendto_if_src+0x1ac>)
 801848e:	f240 320d 	movw	r2, #781	@ 0x30d
 8018492:	492c      	ldr	r1, [pc, #176]	@ (8018544 <udp_sendto_if_src+0x1c8>)
 8018494:	4826      	ldr	r0, [pc, #152]	@ (8018530 <udp_sendto_if_src+0x1b4>)
 8018496:	f005 f9bd 	bl	801d814 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801849a:	69fb      	ldr	r3, [r7, #28]
 801849c:	685b      	ldr	r3, [r3, #4]
 801849e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	8a5b      	ldrh	r3, [r3, #18]
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f8 fb01 	bl	8010aac <lwip_htons>
 80184aa:	4603      	mov	r3, r0
 80184ac:	461a      	mov	r2, r3
 80184ae:	697b      	ldr	r3, [r7, #20]
 80184b0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80184b2:	887b      	ldrh	r3, [r7, #2]
 80184b4:	4618      	mov	r0, r3
 80184b6:	f7f8 faf9 	bl	8010aac <lwip_htons>
 80184ba:	4603      	mov	r3, r0
 80184bc:	461a      	mov	r2, r3
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80184c2:	697b      	ldr	r3, [r7, #20]
 80184c4:	2200      	movs	r2, #0
 80184c6:	719a      	strb	r2, [r3, #6]
 80184c8:	2200      	movs	r2, #0
 80184ca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	891b      	ldrh	r3, [r3, #8]
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7f8 faeb 	bl	8010aac <lwip_htons>
 80184d6:	4603      	mov	r3, r0
 80184d8:	461a      	mov	r2, r3
 80184da:	697b      	ldr	r3, [r7, #20]
 80184dc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80184de:	2311      	movs	r3, #17
 80184e0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	7adb      	ldrb	r3, [r3, #11]
 80184e6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	7a9b      	ldrb	r3, [r3, #10]
 80184ec:	7cb9      	ldrb	r1, [r7, #18]
 80184ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80184f0:	9202      	str	r2, [sp, #8]
 80184f2:	7cfa      	ldrb	r2, [r7, #19]
 80184f4:	9201      	str	r2, [sp, #4]
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	460b      	mov	r3, r1
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80184fe:	69f8      	ldr	r0, [r7, #28]
 8018500:	f003 fb5a 	bl	801bbb8 <ip4_output_if_src>
 8018504:	4603      	mov	r3, r0
 8018506:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018508:	69fa      	ldr	r2, [r7, #28]
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	429a      	cmp	r2, r3
 801850e:	d004      	beq.n	801851a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018510:	69f8      	ldr	r0, [r7, #28]
 8018512:	f7f9 ff81 	bl	8012418 <pbuf_free>
    q = NULL;
 8018516:	2300      	movs	r3, #0
 8018518:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801851a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801851e:	4618      	mov	r0, r3
 8018520:	3720      	adds	r7, #32
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	08021e40 	.word	0x08021e40
 801852c:	0802202c 	.word	0x0802202c
 8018530:	08021e94 	.word	0x08021e94
 8018534:	0802204c 	.word	0x0802204c
 8018538:	0802206c 	.word	0x0802206c
 801853c:	08022090 	.word	0x08022090
 8018540:	080220b4 	.word	0x080220b4
 8018544:	080220d8 	.word	0x080220d8

08018548 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b086      	sub	sp, #24
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	4613      	mov	r3, r2
 8018554:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d101      	bne.n	8018560 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801855c:	4b39      	ldr	r3, [pc, #228]	@ (8018644 <udp_bind+0xfc>)
 801855e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d109      	bne.n	801857a <udp_bind+0x32>
 8018566:	4b38      	ldr	r3, [pc, #224]	@ (8018648 <udp_bind+0x100>)
 8018568:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801856c:	4937      	ldr	r1, [pc, #220]	@ (801864c <udp_bind+0x104>)
 801856e:	4838      	ldr	r0, [pc, #224]	@ (8018650 <udp_bind+0x108>)
 8018570:	f005 f950 	bl	801d814 <iprintf>
 8018574:	f06f 030f 	mvn.w	r3, #15
 8018578:	e060      	b.n	801863c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801857a:	2300      	movs	r3, #0
 801857c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801857e:	4b35      	ldr	r3, [pc, #212]	@ (8018654 <udp_bind+0x10c>)
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	617b      	str	r3, [r7, #20]
 8018584:	e009      	b.n	801859a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018586:	68fa      	ldr	r2, [r7, #12]
 8018588:	697b      	ldr	r3, [r7, #20]
 801858a:	429a      	cmp	r2, r3
 801858c:	d102      	bne.n	8018594 <udp_bind+0x4c>
      rebind = 1;
 801858e:	2301      	movs	r3, #1
 8018590:	74fb      	strb	r3, [r7, #19]
      break;
 8018592:	e005      	b.n	80185a0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	617b      	str	r3, [r7, #20]
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d1f2      	bne.n	8018586 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80185a0:	88fb      	ldrh	r3, [r7, #6]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d109      	bne.n	80185ba <udp_bind+0x72>
    port = udp_new_port();
 80185a6:	f7ff fcc5 	bl	8017f34 <udp_new_port>
 80185aa:	4603      	mov	r3, r0
 80185ac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80185ae:	88fb      	ldrh	r3, [r7, #6]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d12c      	bne.n	801860e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80185b4:	f06f 0307 	mvn.w	r3, #7
 80185b8:	e040      	b.n	801863c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185ba:	4b26      	ldr	r3, [pc, #152]	@ (8018654 <udp_bind+0x10c>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	617b      	str	r3, [r7, #20]
 80185c0:	e022      	b.n	8018608 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80185c2:	68fa      	ldr	r2, [r7, #12]
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d01b      	beq.n	8018602 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	8a5b      	ldrh	r3, [r3, #18]
 80185ce:	88fa      	ldrh	r2, [r7, #6]
 80185d0:	429a      	cmp	r2, r3
 80185d2:	d116      	bne.n	8018602 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	681a      	ldr	r2, [r3, #0]
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80185dc:	429a      	cmp	r2, r3
 80185de:	d00d      	beq.n	80185fc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d00a      	beq.n	80185fc <udp_bind+0xb4>
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d006      	beq.n	80185fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185ee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d003      	beq.n	80185fc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d102      	bne.n	8018602 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80185fc:	f06f 0307 	mvn.w	r3, #7
 8018600:	e01c      	b.n	801863c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	68db      	ldr	r3, [r3, #12]
 8018606:	617b      	str	r3, [r7, #20]
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d1d9      	bne.n	80185c2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d002      	beq.n	801861a <udp_bind+0xd2>
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	e000      	b.n	801861c <udp_bind+0xd4>
 801861a:	2300      	movs	r3, #0
 801861c:	68fa      	ldr	r2, [r7, #12]
 801861e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	88fa      	ldrh	r2, [r7, #6]
 8018624:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018626:	7cfb      	ldrb	r3, [r7, #19]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d106      	bne.n	801863a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801862c:	4b09      	ldr	r3, [pc, #36]	@ (8018654 <udp_bind+0x10c>)
 801862e:	681a      	ldr	r2, [r3, #0]
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018634:	4a07      	ldr	r2, [pc, #28]	@ (8018654 <udp_bind+0x10c>)
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3718      	adds	r7, #24
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	08022df8 	.word	0x08022df8
 8018648:	08021e40 	.word	0x08021e40
 801864c:	08022108 	.word	0x08022108
 8018650:	08021e94 	.word	0x08021e94
 8018654:	2400cc90 	.word	0x2400cc90

08018658 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b086      	sub	sp, #24
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	4613      	mov	r3, r2
 8018664:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d109      	bne.n	8018680 <udp_connect+0x28>
 801866c:	4b2c      	ldr	r3, [pc, #176]	@ (8018720 <udp_connect+0xc8>)
 801866e:	f240 4235 	movw	r2, #1077	@ 0x435
 8018672:	492c      	ldr	r1, [pc, #176]	@ (8018724 <udp_connect+0xcc>)
 8018674:	482c      	ldr	r0, [pc, #176]	@ (8018728 <udp_connect+0xd0>)
 8018676:	f005 f8cd 	bl	801d814 <iprintf>
 801867a:	f06f 030f 	mvn.w	r3, #15
 801867e:	e04b      	b.n	8018718 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d109      	bne.n	801869a <udp_connect+0x42>
 8018686:	4b26      	ldr	r3, [pc, #152]	@ (8018720 <udp_connect+0xc8>)
 8018688:	f240 4236 	movw	r2, #1078	@ 0x436
 801868c:	4927      	ldr	r1, [pc, #156]	@ (801872c <udp_connect+0xd4>)
 801868e:	4826      	ldr	r0, [pc, #152]	@ (8018728 <udp_connect+0xd0>)
 8018690:	f005 f8c0 	bl	801d814 <iprintf>
 8018694:	f06f 030f 	mvn.w	r3, #15
 8018698:	e03e      	b.n	8018718 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	8a5b      	ldrh	r3, [r3, #18]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d10f      	bne.n	80186c2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80186a2:	68f9      	ldr	r1, [r7, #12]
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	8a5b      	ldrh	r3, [r3, #18]
 80186a8:	461a      	mov	r2, r3
 80186aa:	68f8      	ldr	r0, [r7, #12]
 80186ac:	f7ff ff4c 	bl	8018548 <udp_bind>
 80186b0:	4603      	mov	r3, r0
 80186b2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80186b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d002      	beq.n	80186c2 <udp_connect+0x6a>
      return err;
 80186bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80186c0:	e02a      	b.n	8018718 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d002      	beq.n	80186ce <udp_connect+0x76>
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	e000      	b.n	80186d0 <udp_connect+0x78>
 80186ce:	2300      	movs	r3, #0
 80186d0:	68fa      	ldr	r2, [r7, #12]
 80186d2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	88fa      	ldrh	r2, [r7, #6]
 80186d8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	7c1b      	ldrb	r3, [r3, #16]
 80186de:	f043 0304 	orr.w	r3, r3, #4
 80186e2:	b2da      	uxtb	r2, r3
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186e8:	4b11      	ldr	r3, [pc, #68]	@ (8018730 <udp_connect+0xd8>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	617b      	str	r3, [r7, #20]
 80186ee:	e008      	b.n	8018702 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80186f0:	68fa      	ldr	r2, [r7, #12]
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d101      	bne.n	80186fc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80186f8:	2300      	movs	r3, #0
 80186fa:	e00d      	b.n	8018718 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	617b      	str	r3, [r7, #20]
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d1f3      	bne.n	80186f0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018708:	4b09      	ldr	r3, [pc, #36]	@ (8018730 <udp_connect+0xd8>)
 801870a:	681a      	ldr	r2, [r3, #0]
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018710:	4a07      	ldr	r2, [pc, #28]	@ (8018730 <udp_connect+0xd8>)
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018716:	2300      	movs	r3, #0
}
 8018718:	4618      	mov	r0, r3
 801871a:	3718      	adds	r7, #24
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}
 8018720:	08021e40 	.word	0x08021e40
 8018724:	08022120 	.word	0x08022120
 8018728:	08021e94 	.word	0x08021e94
 801872c:	0802213c 	.word	0x0802213c
 8018730:	2400cc90 	.word	0x2400cc90

08018734 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b084      	sub	sp, #16
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d107      	bne.n	8018756 <udp_recv+0x22>
 8018746:	4b08      	ldr	r3, [pc, #32]	@ (8018768 <udp_recv+0x34>)
 8018748:	f240 428a 	movw	r2, #1162	@ 0x48a
 801874c:	4907      	ldr	r1, [pc, #28]	@ (801876c <udp_recv+0x38>)
 801874e:	4808      	ldr	r0, [pc, #32]	@ (8018770 <udp_recv+0x3c>)
 8018750:	f005 f860 	bl	801d814 <iprintf>
 8018754:	e005      	b.n	8018762 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	68ba      	ldr	r2, [r7, #8]
 801875a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	61da      	str	r2, [r3, #28]
}
 8018762:	3710      	adds	r7, #16
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}
 8018768:	08021e40 	.word	0x08021e40
 801876c:	08022174 	.word	0x08022174
 8018770:	08021e94 	.word	0x08021e94

08018774 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d107      	bne.n	8018792 <udp_remove+0x1e>
 8018782:	4b19      	ldr	r3, [pc, #100]	@ (80187e8 <udp_remove+0x74>)
 8018784:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018788:	4918      	ldr	r1, [pc, #96]	@ (80187ec <udp_remove+0x78>)
 801878a:	4819      	ldr	r0, [pc, #100]	@ (80187f0 <udp_remove+0x7c>)
 801878c:	f005 f842 	bl	801d814 <iprintf>
 8018790:	e026      	b.n	80187e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018792:	4b18      	ldr	r3, [pc, #96]	@ (80187f4 <udp_remove+0x80>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	687a      	ldr	r2, [r7, #4]
 8018798:	429a      	cmp	r2, r3
 801879a:	d105      	bne.n	80187a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801879c:	4b15      	ldr	r3, [pc, #84]	@ (80187f4 <udp_remove+0x80>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	68db      	ldr	r3, [r3, #12]
 80187a2:	4a14      	ldr	r2, [pc, #80]	@ (80187f4 <udp_remove+0x80>)
 80187a4:	6013      	str	r3, [r2, #0]
 80187a6:	e017      	b.n	80187d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80187a8:	4b12      	ldr	r3, [pc, #72]	@ (80187f4 <udp_remove+0x80>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	60fb      	str	r3, [r7, #12]
 80187ae:	e010      	b.n	80187d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	68db      	ldr	r3, [r3, #12]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d009      	beq.n	80187cc <udp_remove+0x58>
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	687a      	ldr	r2, [r7, #4]
 80187be:	429a      	cmp	r2, r3
 80187c0:	d104      	bne.n	80187cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	68da      	ldr	r2, [r3, #12]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	60da      	str	r2, [r3, #12]
        break;
 80187ca:	e005      	b.n	80187d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	60fb      	str	r3, [r7, #12]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d1eb      	bne.n	80187b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80187d8:	6879      	ldr	r1, [r7, #4]
 80187da:	2000      	movs	r0, #0
 80187dc:	f7f8 ff6c 	bl	80116b8 <memp_free>
}
 80187e0:	3710      	adds	r7, #16
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	08021e40 	.word	0x08021e40
 80187ec:	0802218c 	.word	0x0802218c
 80187f0:	08021e94 	.word	0x08021e94
 80187f4:	2400cc90 	.word	0x2400cc90

080187f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80187fe:	2000      	movs	r0, #0
 8018800:	f7f8 fee4 	bl	80115cc <memp_malloc>
 8018804:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d007      	beq.n	801881c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801880c:	2220      	movs	r2, #32
 801880e:	2100      	movs	r1, #0
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f005 f9a5 	bl	801db60 <memset>
    pcb->ttl = UDP_TTL;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	22ff      	movs	r2, #255	@ 0xff
 801881a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801881c:	687b      	ldr	r3, [r7, #4]
}
 801881e:	4618      	mov	r0, r3
 8018820:	3708      	adds	r7, #8
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
	...

08018828 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018828:	b480      	push	{r7}
 801882a:	b085      	sub	sp, #20
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d01e      	beq.n	8018876 <udp_netif_ip_addr_changed+0x4e>
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d01a      	beq.n	8018876 <udp_netif_ip_addr_changed+0x4e>
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d017      	beq.n	8018876 <udp_netif_ip_addr_changed+0x4e>
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d013      	beq.n	8018876 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801884e:	4b0d      	ldr	r3, [pc, #52]	@ (8018884 <udp_netif_ip_addr_changed+0x5c>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	60fb      	str	r3, [r7, #12]
 8018854:	e00c      	b.n	8018870 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	429a      	cmp	r2, r3
 8018860:	d103      	bne.n	801886a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	681a      	ldr	r2, [r3, #0]
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	60fb      	str	r3, [r7, #12]
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d1ef      	bne.n	8018856 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018876:	bf00      	nop
 8018878:	3714      	adds	r7, #20
 801887a:	46bd      	mov	sp, r7
 801887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018880:	4770      	bx	lr
 8018882:	bf00      	nop
 8018884:	2400cc90 	.word	0x2400cc90

08018888 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801888c:	4b20      	ldr	r3, [pc, #128]	@ (8018910 <dhcp_inc_pcb_refcount+0x88>)
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d133      	bne.n	80188fc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018894:	4b1f      	ldr	r3, [pc, #124]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d005      	beq.n	80188a8 <dhcp_inc_pcb_refcount+0x20>
 801889c:	4b1e      	ldr	r3, [pc, #120]	@ (8018918 <dhcp_inc_pcb_refcount+0x90>)
 801889e:	22e5      	movs	r2, #229	@ 0xe5
 80188a0:	491e      	ldr	r1, [pc, #120]	@ (801891c <dhcp_inc_pcb_refcount+0x94>)
 80188a2:	481f      	ldr	r0, [pc, #124]	@ (8018920 <dhcp_inc_pcb_refcount+0x98>)
 80188a4:	f004 ffb6 	bl	801d814 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80188a8:	f7ff ffa6 	bl	80187f8 <udp_new>
 80188ac:	4603      	mov	r3, r0
 80188ae:	4a19      	ldr	r2, [pc, #100]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188b0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80188b2:	4b18      	ldr	r3, [pc, #96]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d102      	bne.n	80188c0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80188ba:	f04f 33ff 	mov.w	r3, #4294967295
 80188be:	e024      	b.n	801890a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80188c0:	4b14      	ldr	r3, [pc, #80]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	7a5a      	ldrb	r2, [r3, #9]
 80188c6:	4b13      	ldr	r3, [pc, #76]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	f042 0220 	orr.w	r2, r2, #32
 80188ce:	b2d2      	uxtb	r2, r2
 80188d0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80188d2:	4b10      	ldr	r3, [pc, #64]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	2244      	movs	r2, #68	@ 0x44
 80188d8:	4912      	ldr	r1, [pc, #72]	@ (8018924 <dhcp_inc_pcb_refcount+0x9c>)
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff fe34 	bl	8018548 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80188e0:	4b0c      	ldr	r3, [pc, #48]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2243      	movs	r2, #67	@ 0x43
 80188e6:	490f      	ldr	r1, [pc, #60]	@ (8018924 <dhcp_inc_pcb_refcount+0x9c>)
 80188e8:	4618      	mov	r0, r3
 80188ea:	f7ff feb5 	bl	8018658 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80188ee:	4b09      	ldr	r3, [pc, #36]	@ (8018914 <dhcp_inc_pcb_refcount+0x8c>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	2200      	movs	r2, #0
 80188f4:	490c      	ldr	r1, [pc, #48]	@ (8018928 <dhcp_inc_pcb_refcount+0xa0>)
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7ff ff1c 	bl	8018734 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80188fc:	4b04      	ldr	r3, [pc, #16]	@ (8018910 <dhcp_inc_pcb_refcount+0x88>)
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	3301      	adds	r3, #1
 8018902:	b2da      	uxtb	r2, r3
 8018904:	4b02      	ldr	r3, [pc, #8]	@ (8018910 <dhcp_inc_pcb_refcount+0x88>)
 8018906:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018908:	2300      	movs	r3, #0
}
 801890a:	4618      	mov	r0, r3
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	2400ccc0 	.word	0x2400ccc0
 8018914:	2400ccbc 	.word	0x2400ccbc
 8018918:	080221a4 	.word	0x080221a4
 801891c:	080221dc 	.word	0x080221dc
 8018920:	08022204 	.word	0x08022204
 8018924:	08022df8 	.word	0x08022df8
 8018928:	0801a1b5 	.word	0x0801a1b5

0801892c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018930:	4b0e      	ldr	r3, [pc, #56]	@ (801896c <dhcp_dec_pcb_refcount+0x40>)
 8018932:	781b      	ldrb	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d105      	bne.n	8018944 <dhcp_dec_pcb_refcount+0x18>
 8018938:	4b0d      	ldr	r3, [pc, #52]	@ (8018970 <dhcp_dec_pcb_refcount+0x44>)
 801893a:	22ff      	movs	r2, #255	@ 0xff
 801893c:	490d      	ldr	r1, [pc, #52]	@ (8018974 <dhcp_dec_pcb_refcount+0x48>)
 801893e:	480e      	ldr	r0, [pc, #56]	@ (8018978 <dhcp_dec_pcb_refcount+0x4c>)
 8018940:	f004 ff68 	bl	801d814 <iprintf>
  dhcp_pcb_refcount--;
 8018944:	4b09      	ldr	r3, [pc, #36]	@ (801896c <dhcp_dec_pcb_refcount+0x40>)
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	3b01      	subs	r3, #1
 801894a:	b2da      	uxtb	r2, r3
 801894c:	4b07      	ldr	r3, [pc, #28]	@ (801896c <dhcp_dec_pcb_refcount+0x40>)
 801894e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018950:	4b06      	ldr	r3, [pc, #24]	@ (801896c <dhcp_dec_pcb_refcount+0x40>)
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d107      	bne.n	8018968 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018958:	4b08      	ldr	r3, [pc, #32]	@ (801897c <dhcp_dec_pcb_refcount+0x50>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4618      	mov	r0, r3
 801895e:	f7ff ff09 	bl	8018774 <udp_remove>
    dhcp_pcb = NULL;
 8018962:	4b06      	ldr	r3, [pc, #24]	@ (801897c <dhcp_dec_pcb_refcount+0x50>)
 8018964:	2200      	movs	r2, #0
 8018966:	601a      	str	r2, [r3, #0]
  }
}
 8018968:	bf00      	nop
 801896a:	bd80      	pop	{r7, pc}
 801896c:	2400ccc0 	.word	0x2400ccc0
 8018970:	080221a4 	.word	0x080221a4
 8018974:	0802222c 	.word	0x0802222c
 8018978:	08022204 	.word	0x08022204
 801897c:	2400ccbc 	.word	0x2400ccbc

08018980 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801898c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801898e:	210c      	movs	r1, #12
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f001 f851 	bl	8019a38 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018996:	4b06      	ldr	r3, [pc, #24]	@ (80189b0 <dhcp_handle_nak+0x30>)
 8018998:	4a05      	ldr	r2, [pc, #20]	@ (80189b0 <dhcp_handle_nak+0x30>)
 801899a:	4905      	ldr	r1, [pc, #20]	@ (80189b0 <dhcp_handle_nak+0x30>)
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f7f9 f82d 	bl	80119fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f000 fc4a 	bl	801923c <dhcp_discover>
}
 80189a8:	bf00      	nop
 80189aa:	3710      	adds	r7, #16
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	08022df8 	.word	0x08022df8

080189b4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b084      	sub	sp, #16
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189c0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80189c2:	2108      	movs	r1, #8
 80189c4:	68f8      	ldr	r0, [r7, #12]
 80189c6:	f001 f837 	bl	8019a38 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	331c      	adds	r3, #28
 80189ce:	2200      	movs	r2, #0
 80189d0:	4619      	mov	r1, r3
 80189d2:	6878      	ldr	r0, [r7, #4]
 80189d4:	f002 fb38 	bl	801b048 <etharp_query>
 80189d8:	4603      	mov	r3, r0
 80189da:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	799b      	ldrb	r3, [r3, #6]
 80189e0:	2bff      	cmp	r3, #255	@ 0xff
 80189e2:	d005      	beq.n	80189f0 <dhcp_check+0x3c>
    dhcp->tries++;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	799b      	ldrb	r3, [r3, #6]
 80189e8:	3301      	adds	r3, #1
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80189f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80189f4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80189f6:	893b      	ldrh	r3, [r7, #8]
 80189f8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80189fc:	4a06      	ldr	r2, [pc, #24]	@ (8018a18 <dhcp_check+0x64>)
 80189fe:	fb82 1203 	smull	r1, r2, r2, r3
 8018a02:	1152      	asrs	r2, r2, #5
 8018a04:	17db      	asrs	r3, r3, #31
 8018a06:	1ad3      	subs	r3, r2, r3
 8018a08:	b29a      	uxth	r2, r3
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8018a0e:	bf00      	nop
 8018a10:	3710      	adds	r7, #16
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	bf00      	nop
 8018a18:	10624dd3 	.word	0x10624dd3

08018a1c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b084      	sub	sp, #16
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
 8018a24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8018a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8018a60 <dhcp_handle_offer+0x44>)
 8018a2e:	789b      	ldrb	r3, [r3, #2]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d011      	beq.n	8018a58 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	2200      	movs	r2, #0
 8018a38:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8018a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8018a64 <dhcp_handle_offer+0x48>)
 8018a3c:	689b      	ldr	r3, [r3, #8]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7f8 f849 	bl	8010ad6 <lwip_htonl>
 8018a44:	4602      	mov	r2, r0
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	691a      	ldr	r2, [r3, #16]
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f000 f808 	bl	8018a68 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018a58:	bf00      	nop
 8018a5a:	3710      	adds	r7, #16
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}
 8018a60:	2400ccb4 	.word	0x2400ccb4
 8018a64:	2400cc94 	.word	0x2400cc94

08018a68 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018a68:	b5b0      	push	{r4, r5, r7, lr}
 8018a6a:	b08a      	sub	sp, #40	@ 0x28
 8018a6c:	af02      	add	r7, sp, #8
 8018a6e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d109      	bne.n	8018a8a <dhcp_select+0x22>
 8018a76:	4b71      	ldr	r3, [pc, #452]	@ (8018c3c <dhcp_select+0x1d4>)
 8018a78:	f240 1277 	movw	r2, #375	@ 0x177
 8018a7c:	4970      	ldr	r1, [pc, #448]	@ (8018c40 <dhcp_select+0x1d8>)
 8018a7e:	4871      	ldr	r0, [pc, #452]	@ (8018c44 <dhcp_select+0x1dc>)
 8018a80:	f004 fec8 	bl	801d814 <iprintf>
 8018a84:	f06f 030f 	mvn.w	r3, #15
 8018a88:	e0d3      	b.n	8018c32 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a8e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018a90:	69bb      	ldr	r3, [r7, #24]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d109      	bne.n	8018aaa <dhcp_select+0x42>
 8018a96:	4b69      	ldr	r3, [pc, #420]	@ (8018c3c <dhcp_select+0x1d4>)
 8018a98:	f240 1279 	movw	r2, #377	@ 0x179
 8018a9c:	496a      	ldr	r1, [pc, #424]	@ (8018c48 <dhcp_select+0x1e0>)
 8018a9e:	4869      	ldr	r0, [pc, #420]	@ (8018c44 <dhcp_select+0x1dc>)
 8018aa0:	f004 feb8 	bl	801d814 <iprintf>
 8018aa4:	f06f 0305 	mvn.w	r3, #5
 8018aa8:	e0c3      	b.n	8018c32 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018aaa:	2101      	movs	r1, #1
 8018aac:	69b8      	ldr	r0, [r7, #24]
 8018aae:	f000 ffc3 	bl	8019a38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018ab2:	f107 030c 	add.w	r3, r7, #12
 8018ab6:	2203      	movs	r2, #3
 8018ab8:	69b9      	ldr	r1, [r7, #24]
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f001 fc48 	bl	801a350 <dhcp_create_msg>
 8018ac0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	f000 8085 	beq.w	8018bd4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	685b      	ldr	r3, [r3, #4]
 8018ace:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018ad0:	89b8      	ldrh	r0, [r7, #12]
 8018ad2:	693b      	ldr	r3, [r7, #16]
 8018ad4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ad8:	2302      	movs	r3, #2
 8018ada:	2239      	movs	r2, #57	@ 0x39
 8018adc:	f000 ffc6 	bl	8019a6c <dhcp_option>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018ae4:	89b8      	ldrh	r0, [r7, #12]
 8018ae6:	693b      	ldr	r3, [r7, #16]
 8018ae8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018af0:	461a      	mov	r2, r3
 8018af2:	f001 f815 	bl	8019b20 <dhcp_option_short>
 8018af6:	4603      	mov	r3, r0
 8018af8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018afa:	89b8      	ldrh	r0, [r7, #12]
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b02:	2304      	movs	r3, #4
 8018b04:	2232      	movs	r2, #50	@ 0x32
 8018b06:	f000 ffb1 	bl	8019a6c <dhcp_option>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018b0e:	89bc      	ldrh	r4, [r7, #12]
 8018b10:	693b      	ldr	r3, [r7, #16]
 8018b12:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018b16:	69bb      	ldr	r3, [r7, #24]
 8018b18:	69db      	ldr	r3, [r3, #28]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7f7 ffdb 	bl	8010ad6 <lwip_htonl>
 8018b20:	4603      	mov	r3, r0
 8018b22:	461a      	mov	r2, r3
 8018b24:	4629      	mov	r1, r5
 8018b26:	4620      	mov	r0, r4
 8018b28:	f001 f82c 	bl	8019b84 <dhcp_option_long>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018b30:	89b8      	ldrh	r0, [r7, #12]
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b38:	2304      	movs	r3, #4
 8018b3a:	2236      	movs	r2, #54	@ 0x36
 8018b3c:	f000 ff96 	bl	8019a6c <dhcp_option>
 8018b40:	4603      	mov	r3, r0
 8018b42:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018b44:	89bc      	ldrh	r4, [r7, #12]
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018b4c:	69bb      	ldr	r3, [r7, #24]
 8018b4e:	699b      	ldr	r3, [r3, #24]
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7f7 ffc0 	bl	8010ad6 <lwip_htonl>
 8018b56:	4603      	mov	r3, r0
 8018b58:	461a      	mov	r2, r3
 8018b5a:	4629      	mov	r1, r5
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	f001 f811 	bl	8019b84 <dhcp_option_long>
 8018b62:	4603      	mov	r3, r0
 8018b64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018b66:	89b8      	ldrh	r0, [r7, #12]
 8018b68:	693b      	ldr	r3, [r7, #16]
 8018b6a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b6e:	2303      	movs	r3, #3
 8018b70:	2237      	movs	r2, #55	@ 0x37
 8018b72:	f000 ff7b 	bl	8019a6c <dhcp_option>
 8018b76:	4603      	mov	r3, r0
 8018b78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	77bb      	strb	r3, [r7, #30]
 8018b7e:	e00e      	b.n	8018b9e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018b80:	89b8      	ldrh	r0, [r7, #12]
 8018b82:	693b      	ldr	r3, [r7, #16]
 8018b84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b88:	7fbb      	ldrb	r3, [r7, #30]
 8018b8a:	4a30      	ldr	r2, [pc, #192]	@ (8018c4c <dhcp_select+0x1e4>)
 8018b8c:	5cd3      	ldrb	r3, [r2, r3]
 8018b8e:	461a      	mov	r2, r3
 8018b90:	f000 ffa0 	bl	8019ad4 <dhcp_option_byte>
 8018b94:	4603      	mov	r3, r0
 8018b96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b98:	7fbb      	ldrb	r3, [r7, #30]
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	77bb      	strb	r3, [r7, #30]
 8018b9e:	7fbb      	ldrb	r3, [r7, #30]
 8018ba0:	2b02      	cmp	r3, #2
 8018ba2:	d9ed      	bls.n	8018b80 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018ba4:	89b8      	ldrh	r0, [r7, #12]
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	33f0      	adds	r3, #240	@ 0xf0
 8018baa:	697a      	ldr	r2, [r7, #20]
 8018bac:	4619      	mov	r1, r3
 8018bae:	f001 fca5 	bl	801a4fc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018bb2:	4b27      	ldr	r3, [pc, #156]	@ (8018c50 <dhcp_select+0x1e8>)
 8018bb4:	6818      	ldr	r0, [r3, #0]
 8018bb6:	4b27      	ldr	r3, [pc, #156]	@ (8018c54 <dhcp_select+0x1ec>)
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	2343      	movs	r3, #67	@ 0x43
 8018bc0:	4a25      	ldr	r2, [pc, #148]	@ (8018c58 <dhcp_select+0x1f0>)
 8018bc2:	6979      	ldr	r1, [r7, #20]
 8018bc4:	f7ff fbda 	bl	801837c <udp_sendto_if_src>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018bcc:	6978      	ldr	r0, [r7, #20]
 8018bce:	f7f9 fc23 	bl	8012418 <pbuf_free>
 8018bd2:	e001      	b.n	8018bd8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018bd4:	23ff      	movs	r3, #255	@ 0xff
 8018bd6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018bd8:	69bb      	ldr	r3, [r7, #24]
 8018bda:	799b      	ldrb	r3, [r3, #6]
 8018bdc:	2bff      	cmp	r3, #255	@ 0xff
 8018bde:	d005      	beq.n	8018bec <dhcp_select+0x184>
    dhcp->tries++;
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	799b      	ldrb	r3, [r3, #6]
 8018be4:	3301      	adds	r3, #1
 8018be6:	b2da      	uxtb	r2, r3
 8018be8:	69bb      	ldr	r3, [r7, #24]
 8018bea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018bec:	69bb      	ldr	r3, [r7, #24]
 8018bee:	799b      	ldrb	r3, [r3, #6]
 8018bf0:	2b05      	cmp	r3, #5
 8018bf2:	d80d      	bhi.n	8018c10 <dhcp_select+0x1a8>
 8018bf4:	69bb      	ldr	r3, [r7, #24]
 8018bf6:	799b      	ldrb	r3, [r3, #6]
 8018bf8:	461a      	mov	r2, r3
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	4093      	lsls	r3, r2
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	461a      	mov	r2, r3
 8018c02:	0152      	lsls	r2, r2, #5
 8018c04:	1ad2      	subs	r2, r2, r3
 8018c06:	0092      	lsls	r2, r2, #2
 8018c08:	4413      	add	r3, r2
 8018c0a:	00db      	lsls	r3, r3, #3
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	e001      	b.n	8018c14 <dhcp_select+0x1ac>
 8018c10:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018c14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018c16:	89fb      	ldrh	r3, [r7, #14]
 8018c18:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8018c5c <dhcp_select+0x1f4>)
 8018c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8018c22:	1152      	asrs	r2, r2, #5
 8018c24:	17db      	asrs	r3, r3, #31
 8018c26:	1ad3      	subs	r3, r2, r3
 8018c28:	b29a      	uxth	r2, r3
 8018c2a:	69bb      	ldr	r3, [r7, #24]
 8018c2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3720      	adds	r7, #32
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bdb0      	pop	{r4, r5, r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	080221a4 	.word	0x080221a4
 8018c40:	08022250 	.word	0x08022250
 8018c44:	08022204 	.word	0x08022204
 8018c48:	0802226c 	.word	0x0802226c
 8018c4c:	24000034 	.word	0x24000034
 8018c50:	2400ccbc 	.word	0x2400ccbc
 8018c54:	08022df8 	.word	0x08022df8
 8018c58:	08022dfc 	.word	0x08022dfc
 8018c5c:	10624dd3 	.word	0x10624dd3

08018c60 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018c66:	4b27      	ldr	r3, [pc, #156]	@ (8018d04 <dhcp_coarse_tmr+0xa4>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	607b      	str	r3, [r7, #4]
 8018c6c:	e042      	b.n	8018cf4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c72:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d039      	beq.n	8018cee <dhcp_coarse_tmr+0x8e>
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	795b      	ldrb	r3, [r3, #5]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d035      	beq.n	8018cee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	8a9b      	ldrh	r3, [r3, #20]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d012      	beq.n	8018cb0 <dhcp_coarse_tmr+0x50>
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	8a5b      	ldrh	r3, [r3, #18]
 8018c8e:	3301      	adds	r3, #1
 8018c90:	b29a      	uxth	r2, r3
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	825a      	strh	r2, [r3, #18]
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	8a5a      	ldrh	r2, [r3, #18]
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	8a9b      	ldrh	r3, [r3, #20]
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	d106      	bne.n	8018cb0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8018ca2:	6878      	ldr	r0, [r7, #4]
 8018ca4:	f000 fe2e 	bl	8019904 <dhcp_release_and_stop>
        dhcp_start(netif);
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f000 f96b 	bl	8018f84 <dhcp_start>
 8018cae:	e01e      	b.n	8018cee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	8a1b      	ldrh	r3, [r3, #16]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d00b      	beq.n	8018cd0 <dhcp_coarse_tmr+0x70>
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	8a1b      	ldrh	r3, [r3, #16]
 8018cbc:	1e5a      	subs	r2, r3, #1
 8018cbe:	b291      	uxth	r1, r2
 8018cc0:	683a      	ldr	r2, [r7, #0]
 8018cc2:	8211      	strh	r1, [r2, #16]
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	d103      	bne.n	8018cd0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f000 f8c7 	bl	8018e5c <dhcp_t2_timeout>
 8018cce:	e00e      	b.n	8018cee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8018cd0:	683b      	ldr	r3, [r7, #0]
 8018cd2:	89db      	ldrh	r3, [r3, #14]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d00a      	beq.n	8018cee <dhcp_coarse_tmr+0x8e>
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	89db      	ldrh	r3, [r3, #14]
 8018cdc:	1e5a      	subs	r2, r3, #1
 8018cde:	b291      	uxth	r1, r2
 8018ce0:	683a      	ldr	r2, [r7, #0]
 8018ce2:	81d1      	strh	r1, [r2, #14]
 8018ce4:	2b01      	cmp	r3, #1
 8018ce6:	d102      	bne.n	8018cee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f000 f888 	bl	8018dfe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	607b      	str	r3, [r7, #4]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d1b9      	bne.n	8018c6e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8018cfa:	bf00      	nop
 8018cfc:	bf00      	nop
 8018cfe:	3708      	adds	r7, #8
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	2400cc28 	.word	0x2400cc28

08018d08 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8018d0e:	4b16      	ldr	r3, [pc, #88]	@ (8018d68 <dhcp_fine_tmr+0x60>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	607b      	str	r3, [r7, #4]
 8018d14:	e020      	b.n	8018d58 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d1a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d017      	beq.n	8018d52 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	891b      	ldrh	r3, [r3, #8]
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d906      	bls.n	8018d38 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	891b      	ldrh	r3, [r3, #8]
 8018d2e:	3b01      	subs	r3, #1
 8018d30:	b29a      	uxth	r2, r3
 8018d32:	683b      	ldr	r3, [r7, #0]
 8018d34:	811a      	strh	r2, [r3, #8]
 8018d36:	e00c      	b.n	8018d52 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	891b      	ldrh	r3, [r3, #8]
 8018d3c:	2b01      	cmp	r3, #1
 8018d3e:	d108      	bne.n	8018d52 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	891b      	ldrh	r3, [r3, #8]
 8018d44:	3b01      	subs	r3, #1
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f000 f80d 	bl	8018d6c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	607b      	str	r3, [r7, #4]
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d1db      	bne.n	8018d16 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8018d5e:	bf00      	nop
 8018d60:	bf00      	nop
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	2400cc28 	.word	0x2400cc28

08018d6c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b084      	sub	sp, #16
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d78:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	795b      	ldrb	r3, [r3, #5]
 8018d7e:	2b0c      	cmp	r3, #12
 8018d80:	d003      	beq.n	8018d8a <dhcp_timeout+0x1e>
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	795b      	ldrb	r3, [r3, #5]
 8018d86:	2b06      	cmp	r3, #6
 8018d88:	d103      	bne.n	8018d92 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8018d8a:	6878      	ldr	r0, [r7, #4]
 8018d8c:	f000 fa56 	bl	801923c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018d90:	e031      	b.n	8018df6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	795b      	ldrb	r3, [r3, #5]
 8018d96:	2b01      	cmp	r3, #1
 8018d98:	d10e      	bne.n	8018db8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	799b      	ldrb	r3, [r3, #6]
 8018d9e:	2b05      	cmp	r3, #5
 8018da0:	d803      	bhi.n	8018daa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff fe60 	bl	8018a68 <dhcp_select>
}
 8018da8:	e025      	b.n	8018df6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8018daa:	6878      	ldr	r0, [r7, #4]
 8018dac:	f000 fdaa 	bl	8019904 <dhcp_release_and_stop>
      dhcp_start(netif);
 8018db0:	6878      	ldr	r0, [r7, #4]
 8018db2:	f000 f8e7 	bl	8018f84 <dhcp_start>
}
 8018db6:	e01e      	b.n	8018df6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	795b      	ldrb	r3, [r3, #5]
 8018dbc:	2b08      	cmp	r3, #8
 8018dbe:	d10b      	bne.n	8018dd8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	799b      	ldrb	r3, [r3, #6]
 8018dc4:	2b01      	cmp	r3, #1
 8018dc6:	d803      	bhi.n	8018dd0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7ff fdf3 	bl	80189b4 <dhcp_check>
}
 8018dce:	e012      	b.n	8018df6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f000 fad5 	bl	8019380 <dhcp_bind>
}
 8018dd6:	e00e      	b.n	8018df6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	795b      	ldrb	r3, [r3, #5]
 8018ddc:	2b03      	cmp	r3, #3
 8018dde:	d10a      	bne.n	8018df6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	799b      	ldrb	r3, [r3, #6]
 8018de4:	2b01      	cmp	r3, #1
 8018de6:	d803      	bhi.n	8018df0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	f000 fcd7 	bl	801979c <dhcp_reboot>
}
 8018dee:	e002      	b.n	8018df6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f000 fa23 	bl	801923c <dhcp_discover>
}
 8018df6:	bf00      	nop
 8018df8:	3710      	adds	r7, #16
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}

08018dfe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8018dfe:	b580      	push	{r7, lr}
 8018e00:	b084      	sub	sp, #16
 8018e02:	af00      	add	r7, sp, #0
 8018e04:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e0a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	795b      	ldrb	r3, [r3, #5]
 8018e10:	2b01      	cmp	r3, #1
 8018e12:	d007      	beq.n	8018e24 <dhcp_t1_timeout+0x26>
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	795b      	ldrb	r3, [r3, #5]
 8018e18:	2b0a      	cmp	r3, #10
 8018e1a:	d003      	beq.n	8018e24 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e20:	2b05      	cmp	r3, #5
 8018e22:	d117      	bne.n	8018e54 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018e24:	6878      	ldr	r0, [r7, #4]
 8018e26:	f000 fb85 	bl	8019534 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	899b      	ldrh	r3, [r3, #12]
 8018e2e:	461a      	mov	r2, r3
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	8a5b      	ldrh	r3, [r3, #18]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	dd0c      	ble.n	8018e54 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	899b      	ldrh	r3, [r3, #12]
 8018e3e:	461a      	mov	r2, r3
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	8a5b      	ldrh	r3, [r3, #18]
 8018e44:	1ad3      	subs	r3, r2, r3
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	da00      	bge.n	8018e4c <dhcp_t1_timeout+0x4e>
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	105b      	asrs	r3, r3, #1
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018e54:	bf00      	nop
 8018e56:	3710      	adds	r7, #16
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}

08018e5c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b084      	sub	sp, #16
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	795b      	ldrb	r3, [r3, #5]
 8018e6e:	2b01      	cmp	r3, #1
 8018e70:	d00b      	beq.n	8018e8a <dhcp_t2_timeout+0x2e>
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	795b      	ldrb	r3, [r3, #5]
 8018e76:	2b0a      	cmp	r3, #10
 8018e78:	d007      	beq.n	8018e8a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e7e:	2b05      	cmp	r3, #5
 8018e80:	d003      	beq.n	8018e8a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	795b      	ldrb	r3, [r3, #5]
 8018e86:	2b04      	cmp	r3, #4
 8018e88:	d117      	bne.n	8018eba <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 fbec 	bl	8019668 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	8a9b      	ldrh	r3, [r3, #20]
 8018e94:	461a      	mov	r2, r3
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	8a5b      	ldrh	r3, [r3, #18]
 8018e9a:	1ad3      	subs	r3, r2, r3
 8018e9c:	2b01      	cmp	r3, #1
 8018e9e:	dd0c      	ble.n	8018eba <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	8a9b      	ldrh	r3, [r3, #20]
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	8a5b      	ldrh	r3, [r3, #18]
 8018eaa:	1ad3      	subs	r3, r2, r3
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	da00      	bge.n	8018eb2 <dhcp_t2_timeout+0x56>
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	105b      	asrs	r3, r3, #1
 8018eb4:	b29a      	uxth	r2, r3
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018eba:	bf00      	nop
 8018ebc:	3710      	adds	r7, #16
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
	...

08018ec4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b084      	sub	sp, #16
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ed2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	2200      	movs	r2, #0
 8018ede:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018ee0:	4b26      	ldr	r3, [pc, #152]	@ (8018f7c <dhcp_handle_ack+0xb8>)
 8018ee2:	78db      	ldrb	r3, [r3, #3]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d003      	beq.n	8018ef0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018ee8:	4b25      	ldr	r3, [pc, #148]	@ (8018f80 <dhcp_handle_ack+0xbc>)
 8018eea:	68da      	ldr	r2, [r3, #12]
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018ef0:	4b22      	ldr	r3, [pc, #136]	@ (8018f7c <dhcp_handle_ack+0xb8>)
 8018ef2:	791b      	ldrb	r3, [r3, #4]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d004      	beq.n	8018f02 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018ef8:	4b21      	ldr	r3, [pc, #132]	@ (8018f80 <dhcp_handle_ack+0xbc>)
 8018efa:	691a      	ldr	r2, [r3, #16]
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018f00:	e004      	b.n	8018f0c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f06:	085a      	lsrs	r2, r3, #1
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8018f7c <dhcp_handle_ack+0xb8>)
 8018f0e:	795b      	ldrb	r3, [r3, #5]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d004      	beq.n	8018f1e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018f14:	4b1a      	ldr	r3, [pc, #104]	@ (8018f80 <dhcp_handle_ack+0xbc>)
 8018f16:	695a      	ldr	r2, [r3, #20]
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8018f1c:	e007      	b.n	8018f2e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018f22:	4613      	mov	r3, r2
 8018f24:	00db      	lsls	r3, r3, #3
 8018f26:	1a9b      	subs	r3, r3, r2
 8018f28:	08da      	lsrs	r2, r3, #3
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	691a      	ldr	r2, [r3, #16]
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018f36:	4b11      	ldr	r3, [pc, #68]	@ (8018f7c <dhcp_handle_ack+0xb8>)
 8018f38:	799b      	ldrb	r3, [r3, #6]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d00b      	beq.n	8018f56 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018f3e:	4b10      	ldr	r3, [pc, #64]	@ (8018f80 <dhcp_handle_ack+0xbc>)
 8018f40:	699b      	ldr	r3, [r3, #24]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7f7 fdc7 	bl	8010ad6 <lwip_htonl>
 8018f48:	4602      	mov	r2, r0
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	2201      	movs	r2, #1
 8018f52:	71da      	strb	r2, [r3, #7]
 8018f54:	e002      	b.n	8018f5c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	2200      	movs	r2, #0
 8018f5a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018f5c:	4b07      	ldr	r3, [pc, #28]	@ (8018f7c <dhcp_handle_ack+0xb8>)
 8018f5e:	79db      	ldrb	r3, [r3, #7]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d007      	beq.n	8018f74 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018f64:	4b06      	ldr	r3, [pc, #24]	@ (8018f80 <dhcp_handle_ack+0xbc>)
 8018f66:	69db      	ldr	r3, [r3, #28]
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7f7 fdb4 	bl	8010ad6 <lwip_htonl>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018f74:	bf00      	nop
 8018f76:	3710      	adds	r7, #16
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	2400ccb4 	.word	0x2400ccb4
 8018f80:	2400cc94 	.word	0x2400cc94

08018f84 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b084      	sub	sp, #16
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d109      	bne.n	8018fa6 <dhcp_start+0x22>
 8018f92:	4b37      	ldr	r3, [pc, #220]	@ (8019070 <dhcp_start+0xec>)
 8018f94:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018f98:	4936      	ldr	r1, [pc, #216]	@ (8019074 <dhcp_start+0xf0>)
 8018f9a:	4837      	ldr	r0, [pc, #220]	@ (8019078 <dhcp_start+0xf4>)
 8018f9c:	f004 fc3a 	bl	801d814 <iprintf>
 8018fa0:	f06f 030f 	mvn.w	r3, #15
 8018fa4:	e060      	b.n	8019068 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018fac:	f003 0301 	and.w	r3, r3, #1
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d109      	bne.n	8018fc8 <dhcp_start+0x44>
 8018fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8019070 <dhcp_start+0xec>)
 8018fb6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018fba:	4930      	ldr	r1, [pc, #192]	@ (801907c <dhcp_start+0xf8>)
 8018fbc:	482e      	ldr	r0, [pc, #184]	@ (8019078 <dhcp_start+0xf4>)
 8018fbe:	f004 fc29 	bl	801d814 <iprintf>
 8018fc2:	f06f 030f 	mvn.w	r3, #15
 8018fc6:	e04f      	b.n	8019068 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fcc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018fd2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018fd6:	d202      	bcs.n	8018fde <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018fdc:	e044      	b.n	8019068 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d10d      	bne.n	8019000 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018fe4:	2034      	movs	r0, #52	@ 0x34
 8018fe6:	f7f8 f94d 	bl	8011284 <mem_malloc>
 8018fea:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d102      	bne.n	8018ff8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff6:	e037      	b.n	8019068 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	68fa      	ldr	r2, [r7, #12]
 8018ffc:	625a      	str	r2, [r3, #36]	@ 0x24
 8018ffe:	e005      	b.n	801900c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	791b      	ldrb	r3, [r3, #4]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d001      	beq.n	801900c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019008:	f7ff fc90 	bl	801892c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801900c:	2234      	movs	r2, #52	@ 0x34
 801900e:	2100      	movs	r1, #0
 8019010:	68f8      	ldr	r0, [r7, #12]
 8019012:	f004 fda5 	bl	801db60 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8019016:	f7ff fc37 	bl	8018888 <dhcp_inc_pcb_refcount>
 801901a:	4603      	mov	r3, r0
 801901c:	2b00      	cmp	r3, #0
 801901e:	d002      	beq.n	8019026 <dhcp_start+0xa2>
    return ERR_MEM;
 8019020:	f04f 33ff 	mov.w	r3, #4294967295
 8019024:	e020      	b.n	8019068 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	2201      	movs	r2, #1
 801902a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019032:	f003 0304 	and.w	r3, r3, #4
 8019036:	2b00      	cmp	r3, #0
 8019038:	d105      	bne.n	8019046 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801903a:	2102      	movs	r1, #2
 801903c:	68f8      	ldr	r0, [r7, #12]
 801903e:	f000 fcfb 	bl	8019a38 <dhcp_set_state>
    return ERR_OK;
 8019042:	2300      	movs	r3, #0
 8019044:	e010      	b.n	8019068 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f000 f8f8 	bl	801923c <dhcp_discover>
 801904c:	4603      	mov	r3, r0
 801904e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019050:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d005      	beq.n	8019064 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019058:	6878      	ldr	r0, [r7, #4]
 801905a:	f000 fc53 	bl	8019904 <dhcp_release_and_stop>
    return ERR_MEM;
 801905e:	f04f 33ff 	mov.w	r3, #4294967295
 8019062:	e001      	b.n	8019068 <dhcp_start+0xe4>
  }
  return result;
 8019064:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3710      	adds	r7, #16
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}
 8019070:	080221a4 	.word	0x080221a4
 8019074:	08022288 	.word	0x08022288
 8019078:	08022204 	.word	0x08022204
 801907c:	080222cc 	.word	0x080222cc

08019080 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b084      	sub	sp, #16
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801908c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d025      	beq.n	80190e0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	795b      	ldrb	r3, [r3, #5]
 8019098:	2b0a      	cmp	r3, #10
 801909a:	d008      	beq.n	80190ae <dhcp_network_changed+0x2e>
 801909c:	2b0a      	cmp	r3, #10
 801909e:	dc0d      	bgt.n	80190bc <dhcp_network_changed+0x3c>
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d01f      	beq.n	80190e4 <dhcp_network_changed+0x64>
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	db09      	blt.n	80190bc <dhcp_network_changed+0x3c>
 80190a8:	3b03      	subs	r3, #3
 80190aa:	2b02      	cmp	r3, #2
 80190ac:	d806      	bhi.n	80190bc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2200      	movs	r2, #0
 80190b2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f000 fb71 	bl	801979c <dhcp_reboot>
      break;
 80190ba:	e014      	b.n	80190e6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	795b      	ldrb	r3, [r3, #5]
 80190c0:	2b0c      	cmp	r3, #12
 80190c2:	d906      	bls.n	80190d2 <dhcp_network_changed+0x52>
 80190c4:	4b09      	ldr	r3, [pc, #36]	@ (80190ec <dhcp_network_changed+0x6c>)
 80190c6:	f240 326d 	movw	r2, #877	@ 0x36d
 80190ca:	4909      	ldr	r1, [pc, #36]	@ (80190f0 <dhcp_network_changed+0x70>)
 80190cc:	4809      	ldr	r0, [pc, #36]	@ (80190f4 <dhcp_network_changed+0x74>)
 80190ce:	f004 fba1 	bl	801d814 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	2200      	movs	r2, #0
 80190d6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f000 f8af 	bl	801923c <dhcp_discover>
      break;
 80190de:	e002      	b.n	80190e6 <dhcp_network_changed+0x66>
    return;
 80190e0:	bf00      	nop
 80190e2:	e000      	b.n	80190e6 <dhcp_network_changed+0x66>
      break;
 80190e4:	bf00      	nop
  }
}
 80190e6:	3710      	adds	r7, #16
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	080221a4 	.word	0x080221a4
 80190f0:	080222f0 	.word	0x080222f0
 80190f4:	08022204 	.word	0x08022204

080190f8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d107      	bne.n	8019118 <dhcp_arp_reply+0x20>
 8019108:	4b0e      	ldr	r3, [pc, #56]	@ (8019144 <dhcp_arp_reply+0x4c>)
 801910a:	f240 328b 	movw	r2, #907	@ 0x38b
 801910e:	490e      	ldr	r1, [pc, #56]	@ (8019148 <dhcp_arp_reply+0x50>)
 8019110:	480e      	ldr	r0, [pc, #56]	@ (801914c <dhcp_arp_reply+0x54>)
 8019112:	f004 fb7f 	bl	801d814 <iprintf>
 8019116:	e012      	b.n	801913e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801911c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d00c      	beq.n	801913e <dhcp_arp_reply+0x46>
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	795b      	ldrb	r3, [r3, #5]
 8019128:	2b08      	cmp	r3, #8
 801912a:	d108      	bne.n	801913e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	681a      	ldr	r2, [r3, #0]
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	69db      	ldr	r3, [r3, #28]
 8019134:	429a      	cmp	r2, r3
 8019136:	d102      	bne.n	801913e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f000 f809 	bl	8019150 <dhcp_decline>
    }
  }
}
 801913e:	3710      	adds	r7, #16
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}
 8019144:	080221a4 	.word	0x080221a4
 8019148:	08022288 	.word	0x08022288
 801914c:	08022204 	.word	0x08022204

08019150 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019150:	b5b0      	push	{r4, r5, r7, lr}
 8019152:	b08a      	sub	sp, #40	@ 0x28
 8019154:	af02      	add	r7, sp, #8
 8019156:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801915c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801915e:	210c      	movs	r1, #12
 8019160:	69b8      	ldr	r0, [r7, #24]
 8019162:	f000 fc69 	bl	8019a38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8019166:	f107 030c 	add.w	r3, r7, #12
 801916a:	2204      	movs	r2, #4
 801916c:	69b9      	ldr	r1, [r7, #24]
 801916e:	6878      	ldr	r0, [r7, #4]
 8019170:	f001 f8ee 	bl	801a350 <dhcp_create_msg>
 8019174:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d035      	beq.n	80191e8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019182:	89b8      	ldrh	r0, [r7, #12]
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801918a:	2304      	movs	r3, #4
 801918c:	2232      	movs	r2, #50	@ 0x32
 801918e:	f000 fc6d 	bl	8019a6c <dhcp_option>
 8019192:	4603      	mov	r3, r0
 8019194:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019196:	89bc      	ldrh	r4, [r7, #12]
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801919e:	69bb      	ldr	r3, [r7, #24]
 80191a0:	69db      	ldr	r3, [r3, #28]
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7f7 fc97 	bl	8010ad6 <lwip_htonl>
 80191a8:	4603      	mov	r3, r0
 80191aa:	461a      	mov	r2, r3
 80191ac:	4629      	mov	r1, r5
 80191ae:	4620      	mov	r0, r4
 80191b0:	f000 fce8 	bl	8019b84 <dhcp_option_long>
 80191b4:	4603      	mov	r3, r0
 80191b6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80191b8:	89b8      	ldrh	r0, [r7, #12]
 80191ba:	693b      	ldr	r3, [r7, #16]
 80191bc:	33f0      	adds	r3, #240	@ 0xf0
 80191be:	697a      	ldr	r2, [r7, #20]
 80191c0:	4619      	mov	r1, r3
 80191c2:	f001 f99b 	bl	801a4fc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80191c6:	4b19      	ldr	r3, [pc, #100]	@ (801922c <dhcp_decline+0xdc>)
 80191c8:	6818      	ldr	r0, [r3, #0]
 80191ca:	4b19      	ldr	r3, [pc, #100]	@ (8019230 <dhcp_decline+0xe0>)
 80191cc:	9301      	str	r3, [sp, #4]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	9300      	str	r3, [sp, #0]
 80191d2:	2343      	movs	r3, #67	@ 0x43
 80191d4:	4a17      	ldr	r2, [pc, #92]	@ (8019234 <dhcp_decline+0xe4>)
 80191d6:	6979      	ldr	r1, [r7, #20]
 80191d8:	f7ff f8d0 	bl	801837c <udp_sendto_if_src>
 80191dc:	4603      	mov	r3, r0
 80191de:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191e0:	6978      	ldr	r0, [r7, #20]
 80191e2:	f7f9 f919 	bl	8012418 <pbuf_free>
 80191e6:	e001      	b.n	80191ec <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191e8:	23ff      	movs	r3, #255	@ 0xff
 80191ea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191ec:	69bb      	ldr	r3, [r7, #24]
 80191ee:	799b      	ldrb	r3, [r3, #6]
 80191f0:	2bff      	cmp	r3, #255	@ 0xff
 80191f2:	d005      	beq.n	8019200 <dhcp_decline+0xb0>
    dhcp->tries++;
 80191f4:	69bb      	ldr	r3, [r7, #24]
 80191f6:	799b      	ldrb	r3, [r3, #6]
 80191f8:	3301      	adds	r3, #1
 80191fa:	b2da      	uxtb	r2, r3
 80191fc:	69bb      	ldr	r3, [r7, #24]
 80191fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019200:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019204:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019206:	89fb      	ldrh	r3, [r7, #14]
 8019208:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801920c:	4a0a      	ldr	r2, [pc, #40]	@ (8019238 <dhcp_decline+0xe8>)
 801920e:	fb82 1203 	smull	r1, r2, r2, r3
 8019212:	1152      	asrs	r2, r2, #5
 8019214:	17db      	asrs	r3, r3, #31
 8019216:	1ad3      	subs	r3, r2, r3
 8019218:	b29a      	uxth	r2, r3
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801921e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019222:	4618      	mov	r0, r3
 8019224:	3720      	adds	r7, #32
 8019226:	46bd      	mov	sp, r7
 8019228:	bdb0      	pop	{r4, r5, r7, pc}
 801922a:	bf00      	nop
 801922c:	2400ccbc 	.word	0x2400ccbc
 8019230:	08022df8 	.word	0x08022df8
 8019234:	08022dfc 	.word	0x08022dfc
 8019238:	10624dd3 	.word	0x10624dd3

0801923c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b08a      	sub	sp, #40	@ 0x28
 8019240:	af02      	add	r7, sp, #8
 8019242:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019248:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801924a:	2300      	movs	r3, #0
 801924c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801924e:	69bb      	ldr	r3, [r7, #24]
 8019250:	2200      	movs	r2, #0
 8019252:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019254:	2106      	movs	r1, #6
 8019256:	69b8      	ldr	r0, [r7, #24]
 8019258:	f000 fbee 	bl	8019a38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801925c:	f107 0308 	add.w	r3, r7, #8
 8019260:	2201      	movs	r2, #1
 8019262:	69b9      	ldr	r1, [r7, #24]
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f001 f873 	bl	801a350 <dhcp_create_msg>
 801926a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801926c:	693b      	ldr	r3, [r7, #16]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d04b      	beq.n	801930a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019278:	8938      	ldrh	r0, [r7, #8]
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019280:	2302      	movs	r3, #2
 8019282:	2239      	movs	r2, #57	@ 0x39
 8019284:	f000 fbf2 	bl	8019a6c <dhcp_option>
 8019288:	4603      	mov	r3, r0
 801928a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801928c:	8938      	ldrh	r0, [r7, #8]
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019298:	461a      	mov	r2, r3
 801929a:	f000 fc41 	bl	8019b20 <dhcp_option_short>
 801929e:	4603      	mov	r3, r0
 80192a0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80192a2:	8938      	ldrh	r0, [r7, #8]
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192aa:	2303      	movs	r3, #3
 80192ac:	2237      	movs	r2, #55	@ 0x37
 80192ae:	f000 fbdd 	bl	8019a6c <dhcp_option>
 80192b2:	4603      	mov	r3, r0
 80192b4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192b6:	2300      	movs	r3, #0
 80192b8:	77fb      	strb	r3, [r7, #31]
 80192ba:	e00e      	b.n	80192da <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80192bc:	8938      	ldrh	r0, [r7, #8]
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192c4:	7ffb      	ldrb	r3, [r7, #31]
 80192c6:	4a29      	ldr	r2, [pc, #164]	@ (801936c <dhcp_discover+0x130>)
 80192c8:	5cd3      	ldrb	r3, [r2, r3]
 80192ca:	461a      	mov	r2, r3
 80192cc:	f000 fc02 	bl	8019ad4 <dhcp_option_byte>
 80192d0:	4603      	mov	r3, r0
 80192d2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192d4:	7ffb      	ldrb	r3, [r7, #31]
 80192d6:	3301      	adds	r3, #1
 80192d8:	77fb      	strb	r3, [r7, #31]
 80192da:	7ffb      	ldrb	r3, [r7, #31]
 80192dc:	2b02      	cmp	r3, #2
 80192de:	d9ed      	bls.n	80192bc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80192e0:	8938      	ldrh	r0, [r7, #8]
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	33f0      	adds	r3, #240	@ 0xf0
 80192e6:	693a      	ldr	r2, [r7, #16]
 80192e8:	4619      	mov	r1, r3
 80192ea:	f001 f907 	bl	801a4fc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80192ee:	4b20      	ldr	r3, [pc, #128]	@ (8019370 <dhcp_discover+0x134>)
 80192f0:	6818      	ldr	r0, [r3, #0]
 80192f2:	4b20      	ldr	r3, [pc, #128]	@ (8019374 <dhcp_discover+0x138>)
 80192f4:	9301      	str	r3, [sp, #4]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	2343      	movs	r3, #67	@ 0x43
 80192fc:	4a1e      	ldr	r2, [pc, #120]	@ (8019378 <dhcp_discover+0x13c>)
 80192fe:	6939      	ldr	r1, [r7, #16]
 8019300:	f7ff f83c 	bl	801837c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019304:	6938      	ldr	r0, [r7, #16]
 8019306:	f7f9 f887 	bl	8012418 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	799b      	ldrb	r3, [r3, #6]
 801930e:	2bff      	cmp	r3, #255	@ 0xff
 8019310:	d005      	beq.n	801931e <dhcp_discover+0xe2>
    dhcp->tries++;
 8019312:	69bb      	ldr	r3, [r7, #24]
 8019314:	799b      	ldrb	r3, [r3, #6]
 8019316:	3301      	adds	r3, #1
 8019318:	b2da      	uxtb	r2, r3
 801931a:	69bb      	ldr	r3, [r7, #24]
 801931c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	799b      	ldrb	r3, [r3, #6]
 8019322:	2b05      	cmp	r3, #5
 8019324:	d80d      	bhi.n	8019342 <dhcp_discover+0x106>
 8019326:	69bb      	ldr	r3, [r7, #24]
 8019328:	799b      	ldrb	r3, [r3, #6]
 801932a:	461a      	mov	r2, r3
 801932c:	2301      	movs	r3, #1
 801932e:	4093      	lsls	r3, r2
 8019330:	b29b      	uxth	r3, r3
 8019332:	461a      	mov	r2, r3
 8019334:	0152      	lsls	r2, r2, #5
 8019336:	1ad2      	subs	r2, r2, r3
 8019338:	0092      	lsls	r2, r2, #2
 801933a:	4413      	add	r3, r2
 801933c:	00db      	lsls	r3, r3, #3
 801933e:	b29b      	uxth	r3, r3
 8019340:	e001      	b.n	8019346 <dhcp_discover+0x10a>
 8019342:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8019346:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019348:	897b      	ldrh	r3, [r7, #10]
 801934a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801934e:	4a0b      	ldr	r2, [pc, #44]	@ (801937c <dhcp_discover+0x140>)
 8019350:	fb82 1203 	smull	r1, r2, r2, r3
 8019354:	1152      	asrs	r2, r2, #5
 8019356:	17db      	asrs	r3, r3, #31
 8019358:	1ad3      	subs	r3, r2, r3
 801935a:	b29a      	uxth	r2, r3
 801935c:	69bb      	ldr	r3, [r7, #24]
 801935e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019360:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019364:	4618      	mov	r0, r3
 8019366:	3720      	adds	r7, #32
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}
 801936c:	24000034 	.word	0x24000034
 8019370:	2400ccbc 	.word	0x2400ccbc
 8019374:	08022df8 	.word	0x08022df8
 8019378:	08022dfc 	.word	0x08022dfc
 801937c:	10624dd3 	.word	0x10624dd3

08019380 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b088      	sub	sp, #32
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d107      	bne.n	801939e <dhcp_bind+0x1e>
 801938e:	4b64      	ldr	r3, [pc, #400]	@ (8019520 <dhcp_bind+0x1a0>)
 8019390:	f240 4215 	movw	r2, #1045	@ 0x415
 8019394:	4963      	ldr	r1, [pc, #396]	@ (8019524 <dhcp_bind+0x1a4>)
 8019396:	4864      	ldr	r0, [pc, #400]	@ (8019528 <dhcp_bind+0x1a8>)
 8019398:	f004 fa3c 	bl	801d814 <iprintf>
 801939c:	e0bc      	b.n	8019518 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193a2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80193a4:	69bb      	ldr	r3, [r7, #24]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d107      	bne.n	80193ba <dhcp_bind+0x3a>
 80193aa:	4b5d      	ldr	r3, [pc, #372]	@ (8019520 <dhcp_bind+0x1a0>)
 80193ac:	f240 4217 	movw	r2, #1047	@ 0x417
 80193b0:	495e      	ldr	r1, [pc, #376]	@ (801952c <dhcp_bind+0x1ac>)
 80193b2:	485d      	ldr	r0, [pc, #372]	@ (8019528 <dhcp_bind+0x1a8>)
 80193b4:	f004 fa2e 	bl	801d814 <iprintf>
 80193b8:	e0ae      	b.n	8019518 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80193ba:	69bb      	ldr	r3, [r7, #24]
 80193bc:	2200      	movs	r2, #0
 80193be:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80193c0:	69bb      	ldr	r3, [r7, #24]
 80193c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193c8:	d019      	beq.n	80193fe <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80193ca:	69bb      	ldr	r3, [r7, #24]
 80193cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193ce:	331e      	adds	r3, #30
 80193d0:	4a57      	ldr	r2, [pc, #348]	@ (8019530 <dhcp_bind+0x1b0>)
 80193d2:	fba2 2303 	umull	r2, r3, r2, r3
 80193d6:	095b      	lsrs	r3, r3, #5
 80193d8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80193da:	69fb      	ldr	r3, [r7, #28]
 80193dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80193e0:	d302      	bcc.n	80193e8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80193e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193e6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80193e8:	69fb      	ldr	r3, [r7, #28]
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	69bb      	ldr	r3, [r7, #24]
 80193ee:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	8a9b      	ldrh	r3, [r3, #20]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d102      	bne.n	80193fe <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80193f8:	69bb      	ldr	r3, [r7, #24]
 80193fa:	2201      	movs	r2, #1
 80193fc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80193fe:	69bb      	ldr	r3, [r7, #24]
 8019400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019406:	d01d      	beq.n	8019444 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019408:	69bb      	ldr	r3, [r7, #24]
 801940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801940c:	331e      	adds	r3, #30
 801940e:	4a48      	ldr	r2, [pc, #288]	@ (8019530 <dhcp_bind+0x1b0>)
 8019410:	fba2 2303 	umull	r2, r3, r2, r3
 8019414:	095b      	lsrs	r3, r3, #5
 8019416:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801941e:	d302      	bcc.n	8019426 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019424:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8019426:	69fb      	ldr	r3, [r7, #28]
 8019428:	b29a      	uxth	r2, r3
 801942a:	69bb      	ldr	r3, [r7, #24]
 801942c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801942e:	69bb      	ldr	r3, [r7, #24]
 8019430:	895b      	ldrh	r3, [r3, #10]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d102      	bne.n	801943c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	2201      	movs	r2, #1
 801943a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801943c:	69bb      	ldr	r3, [r7, #24]
 801943e:	895a      	ldrh	r2, [r3, #10]
 8019440:	69bb      	ldr	r3, [r7, #24]
 8019442:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019444:	69bb      	ldr	r3, [r7, #24]
 8019446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801944c:	d01d      	beq.n	801948a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801944e:	69bb      	ldr	r3, [r7, #24]
 8019450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019452:	331e      	adds	r3, #30
 8019454:	4a36      	ldr	r2, [pc, #216]	@ (8019530 <dhcp_bind+0x1b0>)
 8019456:	fba2 2303 	umull	r2, r3, r2, r3
 801945a:	095b      	lsrs	r3, r3, #5
 801945c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801945e:	69fb      	ldr	r3, [r7, #28]
 8019460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019464:	d302      	bcc.n	801946c <dhcp_bind+0xec>
      timeout = 0xffff;
 8019466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801946a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801946c:	69fb      	ldr	r3, [r7, #28]
 801946e:	b29a      	uxth	r2, r3
 8019470:	69bb      	ldr	r3, [r7, #24]
 8019472:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8019474:	69bb      	ldr	r3, [r7, #24]
 8019476:	899b      	ldrh	r3, [r3, #12]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d102      	bne.n	8019482 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801947c:	69bb      	ldr	r3, [r7, #24]
 801947e:	2201      	movs	r2, #1
 8019480:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	899a      	ldrh	r2, [r3, #12]
 8019486:	69bb      	ldr	r3, [r7, #24]
 8019488:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	895a      	ldrh	r2, [r3, #10]
 801948e:	69bb      	ldr	r3, [r7, #24]
 8019490:	899b      	ldrh	r3, [r3, #12]
 8019492:	429a      	cmp	r2, r3
 8019494:	d306      	bcc.n	80194a4 <dhcp_bind+0x124>
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	899b      	ldrh	r3, [r3, #12]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d002      	beq.n	80194a4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801949e:	69bb      	ldr	r3, [r7, #24]
 80194a0:	2200      	movs	r2, #0
 80194a2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80194a4:	69bb      	ldr	r3, [r7, #24]
 80194a6:	79db      	ldrb	r3, [r3, #7]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d003      	beq.n	80194b4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80194ac:	69bb      	ldr	r3, [r7, #24]
 80194ae:	6a1b      	ldr	r3, [r3, #32]
 80194b0:	613b      	str	r3, [r7, #16]
 80194b2:	e014      	b.n	80194de <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	331c      	adds	r3, #28
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80194bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	db02      	blt.n	80194ca <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80194c4:	23ff      	movs	r3, #255	@ 0xff
 80194c6:	613b      	str	r3, [r7, #16]
 80194c8:	e009      	b.n	80194de <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80194ca:	7dfb      	ldrb	r3, [r7, #23]
 80194cc:	2bbf      	cmp	r3, #191	@ 0xbf
 80194ce:	d903      	bls.n	80194d8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80194d0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80194d4:	613b      	str	r3, [r7, #16]
 80194d6:	e002      	b.n	80194de <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80194d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194dc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194e2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d108      	bne.n	80194fc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80194ea:	69bb      	ldr	r3, [r7, #24]
 80194ec:	69da      	ldr	r2, [r3, #28]
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	4013      	ands	r3, r2
 80194f2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80194fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80194fc:	210a      	movs	r1, #10
 80194fe:	69b8      	ldr	r0, [r7, #24]
 8019500:	f000 fa9a 	bl	8019a38 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8019504:	69bb      	ldr	r3, [r7, #24]
 8019506:	f103 011c 	add.w	r1, r3, #28
 801950a:	f107 030c 	add.w	r3, r7, #12
 801950e:	f107 0210 	add.w	r2, r7, #16
 8019512:	6878      	ldr	r0, [r7, #4]
 8019514:	f7f8 fa72 	bl	80119fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019518:	3720      	adds	r7, #32
 801951a:	46bd      	mov	sp, r7
 801951c:	bd80      	pop	{r7, pc}
 801951e:	bf00      	nop
 8019520:	080221a4 	.word	0x080221a4
 8019524:	08022304 	.word	0x08022304
 8019528:	08022204 	.word	0x08022204
 801952c:	08022320 	.word	0x08022320
 8019530:	88888889 	.word	0x88888889

08019534 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b08a      	sub	sp, #40	@ 0x28
 8019538:	af02      	add	r7, sp, #8
 801953a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019540:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8019542:	2105      	movs	r1, #5
 8019544:	69b8      	ldr	r0, [r7, #24]
 8019546:	f000 fa77 	bl	8019a38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801954a:	f107 030c 	add.w	r3, r7, #12
 801954e:	2203      	movs	r2, #3
 8019550:	69b9      	ldr	r1, [r7, #24]
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f000 fefc 	bl	801a350 <dhcp_create_msg>
 8019558:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d04e      	beq.n	80195fe <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019560:	697b      	ldr	r3, [r7, #20]
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019566:	89b8      	ldrh	r0, [r7, #12]
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801956e:	2302      	movs	r3, #2
 8019570:	2239      	movs	r2, #57	@ 0x39
 8019572:	f000 fa7b 	bl	8019a6c <dhcp_option>
 8019576:	4603      	mov	r3, r0
 8019578:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801957a:	89b8      	ldrh	r0, [r7, #12]
 801957c:	693b      	ldr	r3, [r7, #16]
 801957e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019586:	461a      	mov	r2, r3
 8019588:	f000 faca 	bl	8019b20 <dhcp_option_short>
 801958c:	4603      	mov	r3, r0
 801958e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019590:	89b8      	ldrh	r0, [r7, #12]
 8019592:	693b      	ldr	r3, [r7, #16]
 8019594:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019598:	2303      	movs	r3, #3
 801959a:	2237      	movs	r2, #55	@ 0x37
 801959c:	f000 fa66 	bl	8019a6c <dhcp_option>
 80195a0:	4603      	mov	r3, r0
 80195a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80195a4:	2300      	movs	r3, #0
 80195a6:	77bb      	strb	r3, [r7, #30]
 80195a8:	e00e      	b.n	80195c8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80195aa:	89b8      	ldrh	r0, [r7, #12]
 80195ac:	693b      	ldr	r3, [r7, #16]
 80195ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195b2:	7fbb      	ldrb	r3, [r7, #30]
 80195b4:	4a29      	ldr	r2, [pc, #164]	@ (801965c <dhcp_renew+0x128>)
 80195b6:	5cd3      	ldrb	r3, [r2, r3]
 80195b8:	461a      	mov	r2, r3
 80195ba:	f000 fa8b 	bl	8019ad4 <dhcp_option_byte>
 80195be:	4603      	mov	r3, r0
 80195c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80195c2:	7fbb      	ldrb	r3, [r7, #30]
 80195c4:	3301      	adds	r3, #1
 80195c6:	77bb      	strb	r3, [r7, #30]
 80195c8:	7fbb      	ldrb	r3, [r7, #30]
 80195ca:	2b02      	cmp	r3, #2
 80195cc:	d9ed      	bls.n	80195aa <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80195ce:	89b8      	ldrh	r0, [r7, #12]
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	33f0      	adds	r3, #240	@ 0xf0
 80195d4:	697a      	ldr	r2, [r7, #20]
 80195d6:	4619      	mov	r1, r3
 80195d8:	f000 ff90 	bl	801a4fc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80195dc:	4b20      	ldr	r3, [pc, #128]	@ (8019660 <dhcp_renew+0x12c>)
 80195de:	6818      	ldr	r0, [r3, #0]
 80195e0:	69bb      	ldr	r3, [r7, #24]
 80195e2:	f103 0218 	add.w	r2, r3, #24
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	9300      	str	r3, [sp, #0]
 80195ea:	2343      	movs	r3, #67	@ 0x43
 80195ec:	6979      	ldr	r1, [r7, #20]
 80195ee:	f7fe fe51 	bl	8018294 <udp_sendto_if>
 80195f2:	4603      	mov	r3, r0
 80195f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80195f6:	6978      	ldr	r0, [r7, #20]
 80195f8:	f7f8 ff0e 	bl	8012418 <pbuf_free>
 80195fc:	e001      	b.n	8019602 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80195fe:	23ff      	movs	r3, #255	@ 0xff
 8019600:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	799b      	ldrb	r3, [r3, #6]
 8019606:	2bff      	cmp	r3, #255	@ 0xff
 8019608:	d005      	beq.n	8019616 <dhcp_renew+0xe2>
    dhcp->tries++;
 801960a:	69bb      	ldr	r3, [r7, #24]
 801960c:	799b      	ldrb	r3, [r3, #6]
 801960e:	3301      	adds	r3, #1
 8019610:	b2da      	uxtb	r2, r3
 8019612:	69bb      	ldr	r3, [r7, #24]
 8019614:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019616:	69bb      	ldr	r3, [r7, #24]
 8019618:	799b      	ldrb	r3, [r3, #6]
 801961a:	2b09      	cmp	r3, #9
 801961c:	d809      	bhi.n	8019632 <dhcp_renew+0xfe>
 801961e:	69bb      	ldr	r3, [r7, #24]
 8019620:	799b      	ldrb	r3, [r3, #6]
 8019622:	461a      	mov	r2, r3
 8019624:	0152      	lsls	r2, r2, #5
 8019626:	1ad2      	subs	r2, r2, r3
 8019628:	0092      	lsls	r2, r2, #2
 801962a:	4413      	add	r3, r2
 801962c:	011b      	lsls	r3, r3, #4
 801962e:	b29b      	uxth	r3, r3
 8019630:	e001      	b.n	8019636 <dhcp_renew+0x102>
 8019632:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019636:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019638:	89fb      	ldrh	r3, [r7, #14]
 801963a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801963e:	4a09      	ldr	r2, [pc, #36]	@ (8019664 <dhcp_renew+0x130>)
 8019640:	fb82 1203 	smull	r1, r2, r2, r3
 8019644:	1152      	asrs	r2, r2, #5
 8019646:	17db      	asrs	r3, r3, #31
 8019648:	1ad3      	subs	r3, r2, r3
 801964a:	b29a      	uxth	r2, r3
 801964c:	69bb      	ldr	r3, [r7, #24]
 801964e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019654:	4618      	mov	r0, r3
 8019656:	3720      	adds	r7, #32
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	24000034 	.word	0x24000034
 8019660:	2400ccbc 	.word	0x2400ccbc
 8019664:	10624dd3 	.word	0x10624dd3

08019668 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b08a      	sub	sp, #40	@ 0x28
 801966c:	af02      	add	r7, sp, #8
 801966e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019674:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019676:	2104      	movs	r1, #4
 8019678:	69b8      	ldr	r0, [r7, #24]
 801967a:	f000 f9dd 	bl	8019a38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801967e:	f107 030c 	add.w	r3, r7, #12
 8019682:	2203      	movs	r2, #3
 8019684:	69b9      	ldr	r1, [r7, #24]
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f000 fe62 	bl	801a350 <dhcp_create_msg>
 801968c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d04c      	beq.n	801972e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801969a:	89b8      	ldrh	r0, [r7, #12]
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196a2:	2302      	movs	r3, #2
 80196a4:	2239      	movs	r2, #57	@ 0x39
 80196a6:	f000 f9e1 	bl	8019a6c <dhcp_option>
 80196aa:	4603      	mov	r3, r0
 80196ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80196ae:	89b8      	ldrh	r0, [r7, #12]
 80196b0:	693b      	ldr	r3, [r7, #16]
 80196b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80196ba:	461a      	mov	r2, r3
 80196bc:	f000 fa30 	bl	8019b20 <dhcp_option_short>
 80196c0:	4603      	mov	r3, r0
 80196c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80196c4:	89b8      	ldrh	r0, [r7, #12]
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196cc:	2303      	movs	r3, #3
 80196ce:	2237      	movs	r2, #55	@ 0x37
 80196d0:	f000 f9cc 	bl	8019a6c <dhcp_option>
 80196d4:	4603      	mov	r3, r0
 80196d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196d8:	2300      	movs	r3, #0
 80196da:	77bb      	strb	r3, [r7, #30]
 80196dc:	e00e      	b.n	80196fc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80196de:	89b8      	ldrh	r0, [r7, #12]
 80196e0:	693b      	ldr	r3, [r7, #16]
 80196e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196e6:	7fbb      	ldrb	r3, [r7, #30]
 80196e8:	4a28      	ldr	r2, [pc, #160]	@ (801978c <dhcp_rebind+0x124>)
 80196ea:	5cd3      	ldrb	r3, [r2, r3]
 80196ec:	461a      	mov	r2, r3
 80196ee:	f000 f9f1 	bl	8019ad4 <dhcp_option_byte>
 80196f2:	4603      	mov	r3, r0
 80196f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196f6:	7fbb      	ldrb	r3, [r7, #30]
 80196f8:	3301      	adds	r3, #1
 80196fa:	77bb      	strb	r3, [r7, #30]
 80196fc:	7fbb      	ldrb	r3, [r7, #30]
 80196fe:	2b02      	cmp	r3, #2
 8019700:	d9ed      	bls.n	80196de <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019702:	89b8      	ldrh	r0, [r7, #12]
 8019704:	693b      	ldr	r3, [r7, #16]
 8019706:	33f0      	adds	r3, #240	@ 0xf0
 8019708:	697a      	ldr	r2, [r7, #20]
 801970a:	4619      	mov	r1, r3
 801970c:	f000 fef6 	bl	801a4fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019710:	4b1f      	ldr	r3, [pc, #124]	@ (8019790 <dhcp_rebind+0x128>)
 8019712:	6818      	ldr	r0, [r3, #0]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	9300      	str	r3, [sp, #0]
 8019718:	2343      	movs	r3, #67	@ 0x43
 801971a:	4a1e      	ldr	r2, [pc, #120]	@ (8019794 <dhcp_rebind+0x12c>)
 801971c:	6979      	ldr	r1, [r7, #20]
 801971e:	f7fe fdb9 	bl	8018294 <udp_sendto_if>
 8019722:	4603      	mov	r3, r0
 8019724:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019726:	6978      	ldr	r0, [r7, #20]
 8019728:	f7f8 fe76 	bl	8012418 <pbuf_free>
 801972c:	e001      	b.n	8019732 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801972e:	23ff      	movs	r3, #255	@ 0xff
 8019730:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019732:	69bb      	ldr	r3, [r7, #24]
 8019734:	799b      	ldrb	r3, [r3, #6]
 8019736:	2bff      	cmp	r3, #255	@ 0xff
 8019738:	d005      	beq.n	8019746 <dhcp_rebind+0xde>
    dhcp->tries++;
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	799b      	ldrb	r3, [r3, #6]
 801973e:	3301      	adds	r3, #1
 8019740:	b2da      	uxtb	r2, r3
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019746:	69bb      	ldr	r3, [r7, #24]
 8019748:	799b      	ldrb	r3, [r3, #6]
 801974a:	2b09      	cmp	r3, #9
 801974c:	d809      	bhi.n	8019762 <dhcp_rebind+0xfa>
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	799b      	ldrb	r3, [r3, #6]
 8019752:	461a      	mov	r2, r3
 8019754:	0152      	lsls	r2, r2, #5
 8019756:	1ad2      	subs	r2, r2, r3
 8019758:	0092      	lsls	r2, r2, #2
 801975a:	4413      	add	r3, r2
 801975c:	00db      	lsls	r3, r3, #3
 801975e:	b29b      	uxth	r3, r3
 8019760:	e001      	b.n	8019766 <dhcp_rebind+0xfe>
 8019762:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019766:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019768:	89fb      	ldrh	r3, [r7, #14]
 801976a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801976e:	4a0a      	ldr	r2, [pc, #40]	@ (8019798 <dhcp_rebind+0x130>)
 8019770:	fb82 1203 	smull	r1, r2, r2, r3
 8019774:	1152      	asrs	r2, r2, #5
 8019776:	17db      	asrs	r3, r3, #31
 8019778:	1ad3      	subs	r3, r2, r3
 801977a:	b29a      	uxth	r2, r3
 801977c:	69bb      	ldr	r3, [r7, #24]
 801977e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019780:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019784:	4618      	mov	r0, r3
 8019786:	3720      	adds	r7, #32
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}
 801978c:	24000034 	.word	0x24000034
 8019790:	2400ccbc 	.word	0x2400ccbc
 8019794:	08022dfc 	.word	0x08022dfc
 8019798:	10624dd3 	.word	0x10624dd3

0801979c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801979c:	b5b0      	push	{r4, r5, r7, lr}
 801979e:	b08a      	sub	sp, #40	@ 0x28
 80197a0:	af02      	add	r7, sp, #8
 80197a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197a8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80197aa:	2103      	movs	r1, #3
 80197ac:	69b8      	ldr	r0, [r7, #24]
 80197ae:	f000 f943 	bl	8019a38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80197b2:	f107 030c 	add.w	r3, r7, #12
 80197b6:	2203      	movs	r2, #3
 80197b8:	69b9      	ldr	r1, [r7, #24]
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f000 fdc8 	bl	801a350 <dhcp_create_msg>
 80197c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d066      	beq.n	8019896 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80197c8:	697b      	ldr	r3, [r7, #20]
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80197ce:	89b8      	ldrh	r0, [r7, #12]
 80197d0:	693b      	ldr	r3, [r7, #16]
 80197d2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197d6:	2302      	movs	r3, #2
 80197d8:	2239      	movs	r2, #57	@ 0x39
 80197da:	f000 f947 	bl	8019a6c <dhcp_option>
 80197de:	4603      	mov	r3, r0
 80197e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80197e2:	89b8      	ldrh	r0, [r7, #12]
 80197e4:	693b      	ldr	r3, [r7, #16]
 80197e6:	33f0      	adds	r3, #240	@ 0xf0
 80197e8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80197ec:	4619      	mov	r1, r3
 80197ee:	f000 f997 	bl	8019b20 <dhcp_option_short>
 80197f2:	4603      	mov	r3, r0
 80197f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80197f6:	89b8      	ldrh	r0, [r7, #12]
 80197f8:	693b      	ldr	r3, [r7, #16]
 80197fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197fe:	2304      	movs	r3, #4
 8019800:	2232      	movs	r2, #50	@ 0x32
 8019802:	f000 f933 	bl	8019a6c <dhcp_option>
 8019806:	4603      	mov	r3, r0
 8019808:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801980a:	89bc      	ldrh	r4, [r7, #12]
 801980c:	693b      	ldr	r3, [r7, #16]
 801980e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019812:	69bb      	ldr	r3, [r7, #24]
 8019814:	69db      	ldr	r3, [r3, #28]
 8019816:	4618      	mov	r0, r3
 8019818:	f7f7 f95d 	bl	8010ad6 <lwip_htonl>
 801981c:	4603      	mov	r3, r0
 801981e:	461a      	mov	r2, r3
 8019820:	4629      	mov	r1, r5
 8019822:	4620      	mov	r0, r4
 8019824:	f000 f9ae 	bl	8019b84 <dhcp_option_long>
 8019828:	4603      	mov	r3, r0
 801982a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801982c:	89b8      	ldrh	r0, [r7, #12]
 801982e:	693b      	ldr	r3, [r7, #16]
 8019830:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019834:	2303      	movs	r3, #3
 8019836:	2237      	movs	r2, #55	@ 0x37
 8019838:	f000 f918 	bl	8019a6c <dhcp_option>
 801983c:	4603      	mov	r3, r0
 801983e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019840:	2300      	movs	r3, #0
 8019842:	77bb      	strb	r3, [r7, #30]
 8019844:	e00e      	b.n	8019864 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019846:	89b8      	ldrh	r0, [r7, #12]
 8019848:	693b      	ldr	r3, [r7, #16]
 801984a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801984e:	7fbb      	ldrb	r3, [r7, #30]
 8019850:	4a28      	ldr	r2, [pc, #160]	@ (80198f4 <dhcp_reboot+0x158>)
 8019852:	5cd3      	ldrb	r3, [r2, r3]
 8019854:	461a      	mov	r2, r3
 8019856:	f000 f93d 	bl	8019ad4 <dhcp_option_byte>
 801985a:	4603      	mov	r3, r0
 801985c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801985e:	7fbb      	ldrb	r3, [r7, #30]
 8019860:	3301      	adds	r3, #1
 8019862:	77bb      	strb	r3, [r7, #30]
 8019864:	7fbb      	ldrb	r3, [r7, #30]
 8019866:	2b02      	cmp	r3, #2
 8019868:	d9ed      	bls.n	8019846 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801986a:	89b8      	ldrh	r0, [r7, #12]
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	33f0      	adds	r3, #240	@ 0xf0
 8019870:	697a      	ldr	r2, [r7, #20]
 8019872:	4619      	mov	r1, r3
 8019874:	f000 fe42 	bl	801a4fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019878:	4b1f      	ldr	r3, [pc, #124]	@ (80198f8 <dhcp_reboot+0x15c>)
 801987a:	6818      	ldr	r0, [r3, #0]
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	9300      	str	r3, [sp, #0]
 8019880:	2343      	movs	r3, #67	@ 0x43
 8019882:	4a1e      	ldr	r2, [pc, #120]	@ (80198fc <dhcp_reboot+0x160>)
 8019884:	6979      	ldr	r1, [r7, #20]
 8019886:	f7fe fd05 	bl	8018294 <udp_sendto_if>
 801988a:	4603      	mov	r3, r0
 801988c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801988e:	6978      	ldr	r0, [r7, #20]
 8019890:	f7f8 fdc2 	bl	8012418 <pbuf_free>
 8019894:	e001      	b.n	801989a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019896:	23ff      	movs	r3, #255	@ 0xff
 8019898:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	799b      	ldrb	r3, [r3, #6]
 801989e:	2bff      	cmp	r3, #255	@ 0xff
 80198a0:	d005      	beq.n	80198ae <dhcp_reboot+0x112>
    dhcp->tries++;
 80198a2:	69bb      	ldr	r3, [r7, #24]
 80198a4:	799b      	ldrb	r3, [r3, #6]
 80198a6:	3301      	adds	r3, #1
 80198a8:	b2da      	uxtb	r2, r3
 80198aa:	69bb      	ldr	r3, [r7, #24]
 80198ac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80198ae:	69bb      	ldr	r3, [r7, #24]
 80198b0:	799b      	ldrb	r3, [r3, #6]
 80198b2:	2b09      	cmp	r3, #9
 80198b4:	d809      	bhi.n	80198ca <dhcp_reboot+0x12e>
 80198b6:	69bb      	ldr	r3, [r7, #24]
 80198b8:	799b      	ldrb	r3, [r3, #6]
 80198ba:	461a      	mov	r2, r3
 80198bc:	0152      	lsls	r2, r2, #5
 80198be:	1ad2      	subs	r2, r2, r3
 80198c0:	0092      	lsls	r2, r2, #2
 80198c2:	4413      	add	r3, r2
 80198c4:	00db      	lsls	r3, r3, #3
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	e001      	b.n	80198ce <dhcp_reboot+0x132>
 80198ca:	f242 7310 	movw	r3, #10000	@ 0x2710
 80198ce:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80198d0:	89fb      	ldrh	r3, [r7, #14]
 80198d2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80198d6:	4a0a      	ldr	r2, [pc, #40]	@ (8019900 <dhcp_reboot+0x164>)
 80198d8:	fb82 1203 	smull	r1, r2, r2, r3
 80198dc:	1152      	asrs	r2, r2, #5
 80198de:	17db      	asrs	r3, r3, #31
 80198e0:	1ad3      	subs	r3, r2, r3
 80198e2:	b29a      	uxth	r2, r3
 80198e4:	69bb      	ldr	r3, [r7, #24]
 80198e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80198e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3720      	adds	r7, #32
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bdb0      	pop	{r4, r5, r7, pc}
 80198f4:	24000034 	.word	0x24000034
 80198f8:	2400ccbc 	.word	0x2400ccbc
 80198fc:	08022dfc 	.word	0x08022dfc
 8019900:	10624dd3 	.word	0x10624dd3

08019904 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019904:	b5b0      	push	{r4, r5, r7, lr}
 8019906:	b08a      	sub	sp, #40	@ 0x28
 8019908:	af02      	add	r7, sp, #8
 801990a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019910:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019912:	69fb      	ldr	r3, [r7, #28]
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 8084 	beq.w	8019a22 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	795b      	ldrb	r3, [r3, #5]
 801991e:	2b00      	cmp	r3, #0
 8019920:	f000 8081 	beq.w	8019a26 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019924:	69fb      	ldr	r3, [r7, #28]
 8019926:	699b      	ldr	r3, [r3, #24]
 8019928:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801992a:	69fb      	ldr	r3, [r7, #28]
 801992c:	2200      	movs	r2, #0
 801992e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	2200      	movs	r2, #0
 8019934:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019936:	69fb      	ldr	r3, [r7, #28]
 8019938:	2200      	movs	r2, #0
 801993a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801993c:	69fb      	ldr	r3, [r7, #28]
 801993e:	2200      	movs	r2, #0
 8019940:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019942:	69fb      	ldr	r3, [r7, #28]
 8019944:	2200      	movs	r2, #0
 8019946:	631a      	str	r2, [r3, #48]	@ 0x30
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801994c:	69fb      	ldr	r3, [r7, #28]
 801994e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	2200      	movs	r2, #0
 801995c:	829a      	strh	r2, [r3, #20]
 801995e:	69fb      	ldr	r3, [r7, #28]
 8019960:	8a9a      	ldrh	r2, [r3, #20]
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	825a      	strh	r2, [r3, #18]
 8019966:	69fb      	ldr	r3, [r7, #28]
 8019968:	8a5a      	ldrh	r2, [r3, #18]
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	821a      	strh	r2, [r3, #16]
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	8a1a      	ldrh	r2, [r3, #16]
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019976:	6878      	ldr	r0, [r7, #4]
 8019978:	f000 fdee 	bl	801a558 <dhcp_supplied_address>
 801997c:	4603      	mov	r3, r0
 801997e:	2b00      	cmp	r3, #0
 8019980:	d03b      	beq.n	80199fa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019982:	f107 030e 	add.w	r3, r7, #14
 8019986:	2207      	movs	r2, #7
 8019988:	69f9      	ldr	r1, [r7, #28]
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f000 fce0 	bl	801a350 <dhcp_create_msg>
 8019990:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d030      	beq.n	80199fa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019998:	69bb      	ldr	r3, [r7, #24]
 801999a:	685b      	ldr	r3, [r3, #4]
 801999c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801999e:	89f8      	ldrh	r0, [r7, #14]
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80199a6:	2304      	movs	r3, #4
 80199a8:	2236      	movs	r2, #54	@ 0x36
 80199aa:	f000 f85f 	bl	8019a6c <dhcp_option>
 80199ae:	4603      	mov	r3, r0
 80199b0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80199b2:	89fc      	ldrh	r4, [r7, #14]
 80199b4:	697b      	ldr	r3, [r7, #20]
 80199b6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	4618      	mov	r0, r3
 80199be:	f7f7 f88a 	bl	8010ad6 <lwip_htonl>
 80199c2:	4603      	mov	r3, r0
 80199c4:	461a      	mov	r2, r3
 80199c6:	4629      	mov	r1, r5
 80199c8:	4620      	mov	r0, r4
 80199ca:	f000 f8db 	bl	8019b84 <dhcp_option_long>
 80199ce:	4603      	mov	r3, r0
 80199d0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80199d2:	89f8      	ldrh	r0, [r7, #14]
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	33f0      	adds	r3, #240	@ 0xf0
 80199d8:	69ba      	ldr	r2, [r7, #24]
 80199da:	4619      	mov	r1, r3
 80199dc:	f000 fd8e 	bl	801a4fc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80199e0:	4b13      	ldr	r3, [pc, #76]	@ (8019a30 <dhcp_release_and_stop+0x12c>)
 80199e2:	6818      	ldr	r0, [r3, #0]
 80199e4:	f107 0210 	add.w	r2, r7, #16
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	2343      	movs	r3, #67	@ 0x43
 80199ee:	69b9      	ldr	r1, [r7, #24]
 80199f0:	f7fe fc50 	bl	8018294 <udp_sendto_if>
      pbuf_free(p_out);
 80199f4:	69b8      	ldr	r0, [r7, #24]
 80199f6:	f7f8 fd0f 	bl	8012418 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80199fa:	4b0e      	ldr	r3, [pc, #56]	@ (8019a34 <dhcp_release_and_stop+0x130>)
 80199fc:	4a0d      	ldr	r2, [pc, #52]	@ (8019a34 <dhcp_release_and_stop+0x130>)
 80199fe:	490d      	ldr	r1, [pc, #52]	@ (8019a34 <dhcp_release_and_stop+0x130>)
 8019a00:	6878      	ldr	r0, [r7, #4]
 8019a02:	f7f7 fffb 	bl	80119fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019a06:	2100      	movs	r1, #0
 8019a08:	69f8      	ldr	r0, [r7, #28]
 8019a0a:	f000 f815 	bl	8019a38 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	791b      	ldrb	r3, [r3, #4]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d008      	beq.n	8019a28 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019a16:	f7fe ff89 	bl	801892c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019a1a:	69fb      	ldr	r3, [r7, #28]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	711a      	strb	r2, [r3, #4]
 8019a20:	e002      	b.n	8019a28 <dhcp_release_and_stop+0x124>
    return;
 8019a22:	bf00      	nop
 8019a24:	e000      	b.n	8019a28 <dhcp_release_and_stop+0x124>
    return;
 8019a26:	bf00      	nop
  }
}
 8019a28:	3720      	adds	r7, #32
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8019a2e:	bf00      	nop
 8019a30:	2400ccbc 	.word	0x2400ccbc
 8019a34:	08022df8 	.word	0x08022df8

08019a38 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019a38:	b480      	push	{r7}
 8019a3a:	b083      	sub	sp, #12
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	460b      	mov	r3, r1
 8019a42:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	795b      	ldrb	r3, [r3, #5]
 8019a48:	78fa      	ldrb	r2, [r7, #3]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	d008      	beq.n	8019a60 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	78fa      	ldrb	r2, [r7, #3]
 8019a52:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	2200      	movs	r2, #0
 8019a58:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	811a      	strh	r2, [r3, #8]
  }
}
 8019a60:	bf00      	nop
 8019a62:	370c      	adds	r7, #12
 8019a64:	46bd      	mov	sp, r7
 8019a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6a:	4770      	bx	lr

08019a6c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6039      	str	r1, [r7, #0]
 8019a74:	4611      	mov	r1, r2
 8019a76:	461a      	mov	r2, r3
 8019a78:	4603      	mov	r3, r0
 8019a7a:	80fb      	strh	r3, [r7, #6]
 8019a7c:	460b      	mov	r3, r1
 8019a7e:	717b      	strb	r3, [r7, #5]
 8019a80:	4613      	mov	r3, r2
 8019a82:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019a84:	88fa      	ldrh	r2, [r7, #6]
 8019a86:	793b      	ldrb	r3, [r7, #4]
 8019a88:	4413      	add	r3, r2
 8019a8a:	3302      	adds	r3, #2
 8019a8c:	2b44      	cmp	r3, #68	@ 0x44
 8019a8e:	d906      	bls.n	8019a9e <dhcp_option+0x32>
 8019a90:	4b0d      	ldr	r3, [pc, #52]	@ (8019ac8 <dhcp_option+0x5c>)
 8019a92:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019a96:	490d      	ldr	r1, [pc, #52]	@ (8019acc <dhcp_option+0x60>)
 8019a98:	480d      	ldr	r0, [pc, #52]	@ (8019ad0 <dhcp_option+0x64>)
 8019a9a:	f003 febb 	bl	801d814 <iprintf>
  options[options_out_len++] = option_type;
 8019a9e:	88fb      	ldrh	r3, [r7, #6]
 8019aa0:	1c5a      	adds	r2, r3, #1
 8019aa2:	80fa      	strh	r2, [r7, #6]
 8019aa4:	461a      	mov	r2, r3
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	4413      	add	r3, r2
 8019aaa:	797a      	ldrb	r2, [r7, #5]
 8019aac:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8019aae:	88fb      	ldrh	r3, [r7, #6]
 8019ab0:	1c5a      	adds	r2, r3, #1
 8019ab2:	80fa      	strh	r2, [r7, #6]
 8019ab4:	461a      	mov	r2, r3
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	4413      	add	r3, r2
 8019aba:	793a      	ldrb	r2, [r7, #4]
 8019abc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019abe:	88fb      	ldrh	r3, [r7, #6]
}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	3708      	adds	r7, #8
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	bd80      	pop	{r7, pc}
 8019ac8:	080221a4 	.word	0x080221a4
 8019acc:	08022338 	.word	0x08022338
 8019ad0:	08022204 	.word	0x08022204

08019ad4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	4603      	mov	r3, r0
 8019adc:	6039      	str	r1, [r7, #0]
 8019ade:	80fb      	strh	r3, [r7, #6]
 8019ae0:	4613      	mov	r3, r2
 8019ae2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019ae4:	88fb      	ldrh	r3, [r7, #6]
 8019ae6:	2b43      	cmp	r3, #67	@ 0x43
 8019ae8:	d906      	bls.n	8019af8 <dhcp_option_byte+0x24>
 8019aea:	4b0a      	ldr	r3, [pc, #40]	@ (8019b14 <dhcp_option_byte+0x40>)
 8019aec:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019af0:	4909      	ldr	r1, [pc, #36]	@ (8019b18 <dhcp_option_byte+0x44>)
 8019af2:	480a      	ldr	r0, [pc, #40]	@ (8019b1c <dhcp_option_byte+0x48>)
 8019af4:	f003 fe8e 	bl	801d814 <iprintf>
  options[options_out_len++] = value;
 8019af8:	88fb      	ldrh	r3, [r7, #6]
 8019afa:	1c5a      	adds	r2, r3, #1
 8019afc:	80fa      	strh	r2, [r7, #6]
 8019afe:	461a      	mov	r2, r3
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	4413      	add	r3, r2
 8019b04:	797a      	ldrb	r2, [r7, #5]
 8019b06:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b08:	88fb      	ldrh	r3, [r7, #6]
}
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	3708      	adds	r7, #8
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
 8019b12:	bf00      	nop
 8019b14:	080221a4 	.word	0x080221a4
 8019b18:	0802237c 	.word	0x0802237c
 8019b1c:	08022204 	.word	0x08022204

08019b20 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b082      	sub	sp, #8
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	4603      	mov	r3, r0
 8019b28:	6039      	str	r1, [r7, #0]
 8019b2a:	80fb      	strh	r3, [r7, #6]
 8019b2c:	4613      	mov	r3, r2
 8019b2e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019b30:	88fb      	ldrh	r3, [r7, #6]
 8019b32:	3302      	adds	r3, #2
 8019b34:	2b44      	cmp	r3, #68	@ 0x44
 8019b36:	d906      	bls.n	8019b46 <dhcp_option_short+0x26>
 8019b38:	4b0f      	ldr	r3, [pc, #60]	@ (8019b78 <dhcp_option_short+0x58>)
 8019b3a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019b3e:	490f      	ldr	r1, [pc, #60]	@ (8019b7c <dhcp_option_short+0x5c>)
 8019b40:	480f      	ldr	r0, [pc, #60]	@ (8019b80 <dhcp_option_short+0x60>)
 8019b42:	f003 fe67 	bl	801d814 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019b46:	88bb      	ldrh	r3, [r7, #4]
 8019b48:	0a1b      	lsrs	r3, r3, #8
 8019b4a:	b29a      	uxth	r2, r3
 8019b4c:	88fb      	ldrh	r3, [r7, #6]
 8019b4e:	1c59      	adds	r1, r3, #1
 8019b50:	80f9      	strh	r1, [r7, #6]
 8019b52:	4619      	mov	r1, r3
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	440b      	add	r3, r1
 8019b58:	b2d2      	uxtb	r2, r2
 8019b5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019b5c:	88fb      	ldrh	r3, [r7, #6]
 8019b5e:	1c5a      	adds	r2, r3, #1
 8019b60:	80fa      	strh	r2, [r7, #6]
 8019b62:	461a      	mov	r2, r3
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	4413      	add	r3, r2
 8019b68:	88ba      	ldrh	r2, [r7, #4]
 8019b6a:	b2d2      	uxtb	r2, r2
 8019b6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b6e:	88fb      	ldrh	r3, [r7, #6]
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	3708      	adds	r7, #8
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}
 8019b78:	080221a4 	.word	0x080221a4
 8019b7c:	080223b4 	.word	0x080223b4
 8019b80:	08022204 	.word	0x08022204

08019b84 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	607a      	str	r2, [r7, #4]
 8019b90:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019b92:	89fb      	ldrh	r3, [r7, #14]
 8019b94:	3304      	adds	r3, #4
 8019b96:	2b44      	cmp	r3, #68	@ 0x44
 8019b98:	d906      	bls.n	8019ba8 <dhcp_option_long+0x24>
 8019b9a:	4b19      	ldr	r3, [pc, #100]	@ (8019c00 <dhcp_option_long+0x7c>)
 8019b9c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8019ba0:	4918      	ldr	r1, [pc, #96]	@ (8019c04 <dhcp_option_long+0x80>)
 8019ba2:	4819      	ldr	r0, [pc, #100]	@ (8019c08 <dhcp_option_long+0x84>)
 8019ba4:	f003 fe36 	bl	801d814 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	0e1a      	lsrs	r2, r3, #24
 8019bac:	89fb      	ldrh	r3, [r7, #14]
 8019bae:	1c59      	adds	r1, r3, #1
 8019bb0:	81f9      	strh	r1, [r7, #14]
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	440b      	add	r3, r1
 8019bb8:	b2d2      	uxtb	r2, r2
 8019bba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	0c1a      	lsrs	r2, r3, #16
 8019bc0:	89fb      	ldrh	r3, [r7, #14]
 8019bc2:	1c59      	adds	r1, r3, #1
 8019bc4:	81f9      	strh	r1, [r7, #14]
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	440b      	add	r3, r1
 8019bcc:	b2d2      	uxtb	r2, r2
 8019bce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	0a1a      	lsrs	r2, r3, #8
 8019bd4:	89fb      	ldrh	r3, [r7, #14]
 8019bd6:	1c59      	adds	r1, r3, #1
 8019bd8:	81f9      	strh	r1, [r7, #14]
 8019bda:	4619      	mov	r1, r3
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	440b      	add	r3, r1
 8019be0:	b2d2      	uxtb	r2, r2
 8019be2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019be4:	89fb      	ldrh	r3, [r7, #14]
 8019be6:	1c5a      	adds	r2, r3, #1
 8019be8:	81fa      	strh	r2, [r7, #14]
 8019bea:	461a      	mov	r2, r3
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	4413      	add	r3, r2
 8019bf0:	687a      	ldr	r2, [r7, #4]
 8019bf2:	b2d2      	uxtb	r2, r2
 8019bf4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019bf6:	89fb      	ldrh	r3, [r7, #14]
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}
 8019c00:	080221a4 	.word	0x080221a4
 8019c04:	080223f0 	.word	0x080223f0
 8019c08:	08022204 	.word	0x08022204

08019c0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b090      	sub	sp, #64	@ 0x40
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019c1e:	2208      	movs	r2, #8
 8019c20:	2100      	movs	r1, #0
 8019c22:	48b5      	ldr	r0, [pc, #724]	@ (8019ef8 <dhcp_parse_reply+0x2ec>)
 8019c24:	f003 ff9c 	bl	801db60 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	895b      	ldrh	r3, [r3, #10]
 8019c2c:	2b2b      	cmp	r3, #43	@ 0x2b
 8019c2e:	d802      	bhi.n	8019c36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019c30:	f06f 0301 	mvn.w	r3, #1
 8019c34:	e2a7      	b.n	801a186 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019c3c:	23f0      	movs	r3, #240	@ 0xf0
 8019c3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	891b      	ldrh	r3, [r3, #8]
 8019c44:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c4a:	e00c      	b.n	8019c66 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c4e:	895b      	ldrh	r3, [r3, #10]
 8019c50:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c52:	1ad3      	subs	r3, r2, r3
 8019c54:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8019c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c58:	895b      	ldrh	r3, [r3, #10]
 8019c5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019c5c:	1ad3      	subs	r3, r2, r3
 8019c5e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8019c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d004      	beq.n	8019c76 <dhcp_parse_reply+0x6a>
 8019c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c6e:	895b      	ldrh	r3, [r3, #10]
 8019c70:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c72:	429a      	cmp	r2, r3
 8019c74:	d2ea      	bcs.n	8019c4c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8019c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d102      	bne.n	8019c82 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8019c7c:	f06f 0301 	mvn.w	r3, #1
 8019c80:	e281      	b.n	801a186 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8019c82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019c84:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8019c86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019c88:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8019c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019c90:	e239      	b.n	801a106 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8019c92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019c94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019c96:	4413      	add	r3, r2
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8019ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ca6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019ca8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019caa:	3302      	adds	r3, #2
 8019cac:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8019cae:	8bfa      	ldrh	r2, [r7, #30]
 8019cb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cb2:	429a      	cmp	r2, r3
 8019cb4:	d202      	bcs.n	8019cbc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019cb6:	f06f 0301 	mvn.w	r3, #1
 8019cba:	e264      	b.n	801a186 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8019cbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cbe:	3301      	adds	r3, #1
 8019cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019cc2:	8952      	ldrh	r2, [r2, #10]
 8019cc4:	4293      	cmp	r3, r2
 8019cc6:	da07      	bge.n	8019cd8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019cc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cca:	3301      	adds	r3, #1
 8019ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019cce:	4413      	add	r3, r2
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019cd6:	e00b      	b.n	8019cf0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d004      	beq.n	8019cea <dhcp_parse_reply+0xde>
 8019ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	685b      	ldr	r3, [r3, #4]
 8019ce6:	781b      	ldrb	r3, [r3, #0]
 8019ce8:	e000      	b.n	8019cec <dhcp_parse_reply+0xe0>
 8019cea:	2300      	movs	r3, #0
 8019cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8019cf8:	7dfb      	ldrb	r3, [r7, #23]
 8019cfa:	2b3b      	cmp	r3, #59	@ 0x3b
 8019cfc:	f200 812c 	bhi.w	8019f58 <dhcp_parse_reply+0x34c>
 8019d00:	a201      	add	r2, pc, #4	@ (adr r2, 8019d08 <dhcp_parse_reply+0xfc>)
 8019d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d06:	bf00      	nop
 8019d08:	08019df9 	.word	0x08019df9
 8019d0c:	08019e09 	.word	0x08019e09
 8019d10:	08019f59 	.word	0x08019f59
 8019d14:	08019e2b 	.word	0x08019e2b
 8019d18:	08019f59 	.word	0x08019f59
 8019d1c:	08019f59 	.word	0x08019f59
 8019d20:	08019f59 	.word	0x08019f59
 8019d24:	08019f59 	.word	0x08019f59
 8019d28:	08019f59 	.word	0x08019f59
 8019d2c:	08019f59 	.word	0x08019f59
 8019d30:	08019f59 	.word	0x08019f59
 8019d34:	08019f59 	.word	0x08019f59
 8019d38:	08019f59 	.word	0x08019f59
 8019d3c:	08019f59 	.word	0x08019f59
 8019d40:	08019f59 	.word	0x08019f59
 8019d44:	08019f59 	.word	0x08019f59
 8019d48:	08019f59 	.word	0x08019f59
 8019d4c:	08019f59 	.word	0x08019f59
 8019d50:	08019f59 	.word	0x08019f59
 8019d54:	08019f59 	.word	0x08019f59
 8019d58:	08019f59 	.word	0x08019f59
 8019d5c:	08019f59 	.word	0x08019f59
 8019d60:	08019f59 	.word	0x08019f59
 8019d64:	08019f59 	.word	0x08019f59
 8019d68:	08019f59 	.word	0x08019f59
 8019d6c:	08019f59 	.word	0x08019f59
 8019d70:	08019f59 	.word	0x08019f59
 8019d74:	08019f59 	.word	0x08019f59
 8019d78:	08019f59 	.word	0x08019f59
 8019d7c:	08019f59 	.word	0x08019f59
 8019d80:	08019f59 	.word	0x08019f59
 8019d84:	08019f59 	.word	0x08019f59
 8019d88:	08019f59 	.word	0x08019f59
 8019d8c:	08019f59 	.word	0x08019f59
 8019d90:	08019f59 	.word	0x08019f59
 8019d94:	08019f59 	.word	0x08019f59
 8019d98:	08019f59 	.word	0x08019f59
 8019d9c:	08019f59 	.word	0x08019f59
 8019da0:	08019f59 	.word	0x08019f59
 8019da4:	08019f59 	.word	0x08019f59
 8019da8:	08019f59 	.word	0x08019f59
 8019dac:	08019f59 	.word	0x08019f59
 8019db0:	08019f59 	.word	0x08019f59
 8019db4:	08019f59 	.word	0x08019f59
 8019db8:	08019f59 	.word	0x08019f59
 8019dbc:	08019f59 	.word	0x08019f59
 8019dc0:	08019f59 	.word	0x08019f59
 8019dc4:	08019f59 	.word	0x08019f59
 8019dc8:	08019f59 	.word	0x08019f59
 8019dcc:	08019f59 	.word	0x08019f59
 8019dd0:	08019f59 	.word	0x08019f59
 8019dd4:	08019e57 	.word	0x08019e57
 8019dd8:	08019e79 	.word	0x08019e79
 8019ddc:	08019eb5 	.word	0x08019eb5
 8019de0:	08019ed7 	.word	0x08019ed7
 8019de4:	08019f59 	.word	0x08019f59
 8019de8:	08019f59 	.word	0x08019f59
 8019dec:	08019f59 	.word	0x08019f59
 8019df0:	08019f15 	.word	0x08019f15
 8019df4:	08019f37 	.word	0x08019f37
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8019e06:	e0ab      	b.n	8019f60 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e0c:	2b04      	cmp	r3, #4
 8019e0e:	d009      	beq.n	8019e24 <dhcp_parse_reply+0x218>
 8019e10:	4b3a      	ldr	r3, [pc, #232]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019e12:	f240 622e 	movw	r2, #1582	@ 0x62e
 8019e16:	493a      	ldr	r1, [pc, #232]	@ (8019f00 <dhcp_parse_reply+0x2f4>)
 8019e18:	483a      	ldr	r0, [pc, #232]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019e1a:	f003 fcfb 	bl	801d814 <iprintf>
 8019e1e:	f06f 0305 	mvn.w	r3, #5
 8019e22:	e1b0      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019e24:	2306      	movs	r3, #6
 8019e26:	623b      	str	r3, [r7, #32]
        break;
 8019e28:	e09a      	b.n	8019f60 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019e2a:	2304      	movs	r3, #4
 8019e2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019e30:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d209      	bcs.n	8019e50 <dhcp_parse_reply+0x244>
 8019e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019e3e:	f240 6233 	movw	r2, #1587	@ 0x633
 8019e42:	4931      	ldr	r1, [pc, #196]	@ (8019f08 <dhcp_parse_reply+0x2fc>)
 8019e44:	482f      	ldr	r0, [pc, #188]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019e46:	f003 fce5 	bl	801d814 <iprintf>
 8019e4a:	f06f 0305 	mvn.w	r3, #5
 8019e4e:	e19a      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019e50:	2307      	movs	r3, #7
 8019e52:	623b      	str	r3, [r7, #32]
        break;
 8019e54:	e084      	b.n	8019f60 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e5a:	2b04      	cmp	r3, #4
 8019e5c:	d009      	beq.n	8019e72 <dhcp_parse_reply+0x266>
 8019e5e:	4b27      	ldr	r3, [pc, #156]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019e60:	f240 6241 	movw	r2, #1601	@ 0x641
 8019e64:	4926      	ldr	r1, [pc, #152]	@ (8019f00 <dhcp_parse_reply+0x2f4>)
 8019e66:	4827      	ldr	r0, [pc, #156]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019e68:	f003 fcd4 	bl	801d814 <iprintf>
 8019e6c:	f06f 0305 	mvn.w	r3, #5
 8019e70:	e189      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019e72:	2303      	movs	r3, #3
 8019e74:	623b      	str	r3, [r7, #32]
        break;
 8019e76:	e073      	b.n	8019f60 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e7c:	2b01      	cmp	r3, #1
 8019e7e:	d009      	beq.n	8019e94 <dhcp_parse_reply+0x288>
 8019e80:	4b1e      	ldr	r3, [pc, #120]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019e82:	f240 624f 	movw	r2, #1615	@ 0x64f
 8019e86:	4921      	ldr	r1, [pc, #132]	@ (8019f0c <dhcp_parse_reply+0x300>)
 8019e88:	481e      	ldr	r0, [pc, #120]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019e8a:	f003 fcc3 	bl	801d814 <iprintf>
 8019e8e:	f06f 0305 	mvn.w	r3, #5
 8019e92:	e178      	b.n	801a186 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019e94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019e96:	2bf0      	cmp	r3, #240	@ 0xf0
 8019e98:	d009      	beq.n	8019eae <dhcp_parse_reply+0x2a2>
 8019e9a:	4b18      	ldr	r3, [pc, #96]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019e9c:	f240 6251 	movw	r2, #1617	@ 0x651
 8019ea0:	491b      	ldr	r1, [pc, #108]	@ (8019f10 <dhcp_parse_reply+0x304>)
 8019ea2:	4818      	ldr	r0, [pc, #96]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019ea4:	f003 fcb6 	bl	801d814 <iprintf>
 8019ea8:	f06f 0305 	mvn.w	r3, #5
 8019eac:	e16b      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	623b      	str	r3, [r7, #32]
        break;
 8019eb2:	e055      	b.n	8019f60 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d009      	beq.n	8019ed0 <dhcp_parse_reply+0x2c4>
 8019ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019ebe:	f240 6255 	movw	r2, #1621	@ 0x655
 8019ec2:	4912      	ldr	r1, [pc, #72]	@ (8019f0c <dhcp_parse_reply+0x300>)
 8019ec4:	480f      	ldr	r0, [pc, #60]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019ec6:	f003 fca5 	bl	801d814 <iprintf>
 8019eca:	f06f 0305 	mvn.w	r3, #5
 8019ece:	e15a      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	623b      	str	r3, [r7, #32]
        break;
 8019ed4:	e044      	b.n	8019f60 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eda:	2b04      	cmp	r3, #4
 8019edc:	d009      	beq.n	8019ef2 <dhcp_parse_reply+0x2e6>
 8019ede:	4b07      	ldr	r3, [pc, #28]	@ (8019efc <dhcp_parse_reply+0x2f0>)
 8019ee0:	f240 6259 	movw	r2, #1625	@ 0x659
 8019ee4:	4906      	ldr	r1, [pc, #24]	@ (8019f00 <dhcp_parse_reply+0x2f4>)
 8019ee6:	4807      	ldr	r0, [pc, #28]	@ (8019f04 <dhcp_parse_reply+0x2f8>)
 8019ee8:	f003 fc94 	bl	801d814 <iprintf>
 8019eec:	f06f 0305 	mvn.w	r3, #5
 8019ef0:	e149      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019ef2:	2302      	movs	r3, #2
 8019ef4:	623b      	str	r3, [r7, #32]
        break;
 8019ef6:	e033      	b.n	8019f60 <dhcp_parse_reply+0x354>
 8019ef8:	2400ccb4 	.word	0x2400ccb4
 8019efc:	080221a4 	.word	0x080221a4
 8019f00:	0802242c 	.word	0x0802242c
 8019f04:	08022204 	.word	0x08022204
 8019f08:	08022438 	.word	0x08022438
 8019f0c:	0802244c 	.word	0x0802244c
 8019f10:	08022458 	.word	0x08022458
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f18:	2b04      	cmp	r3, #4
 8019f1a:	d009      	beq.n	8019f30 <dhcp_parse_reply+0x324>
 8019f1c:	4b9c      	ldr	r3, [pc, #624]	@ (801a190 <dhcp_parse_reply+0x584>)
 8019f1e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019f22:	499c      	ldr	r1, [pc, #624]	@ (801a194 <dhcp_parse_reply+0x588>)
 8019f24:	489c      	ldr	r0, [pc, #624]	@ (801a198 <dhcp_parse_reply+0x58c>)
 8019f26:	f003 fc75 	bl	801d814 <iprintf>
 8019f2a:	f06f 0305 	mvn.w	r3, #5
 8019f2e:	e12a      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019f30:	2304      	movs	r3, #4
 8019f32:	623b      	str	r3, [r7, #32]
        break;
 8019f34:	e014      	b.n	8019f60 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f3a:	2b04      	cmp	r3, #4
 8019f3c:	d009      	beq.n	8019f52 <dhcp_parse_reply+0x346>
 8019f3e:	4b94      	ldr	r3, [pc, #592]	@ (801a190 <dhcp_parse_reply+0x584>)
 8019f40:	f240 6261 	movw	r2, #1633	@ 0x661
 8019f44:	4993      	ldr	r1, [pc, #588]	@ (801a194 <dhcp_parse_reply+0x588>)
 8019f46:	4894      	ldr	r0, [pc, #592]	@ (801a198 <dhcp_parse_reply+0x58c>)
 8019f48:	f003 fc64 	bl	801d814 <iprintf>
 8019f4c:	f06f 0305 	mvn.w	r3, #5
 8019f50:	e119      	b.n	801a186 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019f52:	2305      	movs	r3, #5
 8019f54:	623b      	str	r3, [r7, #32]
        break;
 8019f56:	e003      	b.n	8019f60 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019f5e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019f60:	7dfb      	ldrb	r3, [r7, #23]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d103      	bne.n	8019f6e <dhcp_parse_reply+0x362>
      offset++;
 8019f66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019f68:	3301      	adds	r3, #1
 8019f6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019f6c:	e0a1      	b.n	801a0b2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019f6e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f74:	4413      	add	r3, r2
 8019f76:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019f7a:	4293      	cmp	r3, r2
 8019f7c:	dd02      	ble.n	8019f84 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8019f7e:	f06f 0301 	mvn.w	r3, #1
 8019f82:	e100      	b.n	801a186 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8019f84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f88:	b29a      	uxth	r2, r3
 8019f8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019f8c:	4413      	add	r3, r2
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	3302      	adds	r3, #2
 8019f92:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	f000 808a 	beq.w	801a0b2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019fa2:	6a3b      	ldr	r3, [r7, #32]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	db02      	blt.n	8019fae <dhcp_parse_reply+0x3a2>
 8019fa8:	6a3b      	ldr	r3, [r7, #32]
 8019faa:	2b07      	cmp	r3, #7
 8019fac:	dd06      	ble.n	8019fbc <dhcp_parse_reply+0x3b0>
 8019fae:	4b78      	ldr	r3, [pc, #480]	@ (801a190 <dhcp_parse_reply+0x584>)
 8019fb0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8019fb4:	4979      	ldr	r1, [pc, #484]	@ (801a19c <dhcp_parse_reply+0x590>)
 8019fb6:	4878      	ldr	r0, [pc, #480]	@ (801a198 <dhcp_parse_reply+0x58c>)
 8019fb8:	f003 fc2c 	bl	801d814 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019fbc:	4a78      	ldr	r2, [pc, #480]	@ (801a1a0 <dhcp_parse_reply+0x594>)
 8019fbe:	6a3b      	ldr	r3, [r7, #32]
 8019fc0:	4413      	add	r3, r2
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d174      	bne.n	801a0b2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8019fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019fcc:	2b04      	cmp	r3, #4
 8019fce:	bf28      	it	cs
 8019fd0:	2304      	movcs	r3, #4
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019fd6:	8bfb      	ldrh	r3, [r7, #30]
 8019fd8:	8aba      	ldrh	r2, [r7, #20]
 8019fda:	f107 0108 	add.w	r1, r7, #8
 8019fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019fe0:	f7f8 fc20 	bl	8012824 <pbuf_copy_partial>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	8abb      	ldrh	r3, [r7, #20]
 8019fea:	4293      	cmp	r3, r2
 8019fec:	d002      	beq.n	8019ff4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8019fee:	f06f 0301 	mvn.w	r3, #1
 8019ff2:	e0c8      	b.n	801a186 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8019ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ff8:	2b04      	cmp	r3, #4
 8019ffa:	d933      	bls.n	801a064 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a000:	f003 0303 	and.w	r3, r3, #3
 801a004:	b2db      	uxtb	r3, r3
 801a006:	2b00      	cmp	r3, #0
 801a008:	d009      	beq.n	801a01e <dhcp_parse_reply+0x412>
 801a00a:	4b61      	ldr	r3, [pc, #388]	@ (801a190 <dhcp_parse_reply+0x584>)
 801a00c:	f240 6281 	movw	r2, #1665	@ 0x681
 801a010:	4964      	ldr	r1, [pc, #400]	@ (801a1a4 <dhcp_parse_reply+0x598>)
 801a012:	4861      	ldr	r0, [pc, #388]	@ (801a198 <dhcp_parse_reply+0x58c>)
 801a014:	f003 fbfe 	bl	801d814 <iprintf>
 801a018:	f06f 0305 	mvn.w	r3, #5
 801a01c:	e0b3      	b.n	801a186 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801a01e:	4a60      	ldr	r2, [pc, #384]	@ (801a1a0 <dhcp_parse_reply+0x594>)
 801a020:	6a3b      	ldr	r3, [r7, #32]
 801a022:	4413      	add	r3, r2
 801a024:	2201      	movs	r2, #1
 801a026:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7f6 fd53 	bl	8010ad6 <lwip_htonl>
 801a030:	4602      	mov	r2, r0
 801a032:	495d      	ldr	r1, [pc, #372]	@ (801a1a8 <dhcp_parse_reply+0x59c>)
 801a034:	6a3b      	ldr	r3, [r7, #32]
 801a036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a03a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a03e:	3b04      	subs	r3, #4
 801a040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a044:	8bfb      	ldrh	r3, [r7, #30]
 801a046:	3304      	adds	r3, #4
 801a048:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a04a:	8a7a      	ldrh	r2, [r7, #18]
 801a04c:	8bfb      	ldrh	r3, [r7, #30]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d202      	bcs.n	801a058 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801a052:	f06f 0301 	mvn.w	r3, #1
 801a056:	e096      	b.n	801a186 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801a058:	8a7b      	ldrh	r3, [r7, #18]
 801a05a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a05c:	6a3b      	ldr	r3, [r7, #32]
 801a05e:	3301      	adds	r3, #1
 801a060:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a062:	e79e      	b.n	8019fa2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801a064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a068:	2b04      	cmp	r3, #4
 801a06a:	d106      	bne.n	801a07a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	4618      	mov	r0, r3
 801a070:	f7f6 fd31 	bl	8010ad6 <lwip_htonl>
 801a074:	4603      	mov	r3, r0
 801a076:	60bb      	str	r3, [r7, #8]
 801a078:	e011      	b.n	801a09e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a07a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a07e:	2b01      	cmp	r3, #1
 801a080:	d009      	beq.n	801a096 <dhcp_parse_reply+0x48a>
 801a082:	4b43      	ldr	r3, [pc, #268]	@ (801a190 <dhcp_parse_reply+0x584>)
 801a084:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a088:	4948      	ldr	r1, [pc, #288]	@ (801a1ac <dhcp_parse_reply+0x5a0>)
 801a08a:	4843      	ldr	r0, [pc, #268]	@ (801a198 <dhcp_parse_reply+0x58c>)
 801a08c:	f003 fbc2 	bl	801d814 <iprintf>
 801a090:	f06f 0305 	mvn.w	r3, #5
 801a094:	e077      	b.n	801a186 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801a096:	f107 0308 	add.w	r3, r7, #8
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a09e:	4a40      	ldr	r2, [pc, #256]	@ (801a1a0 <dhcp_parse_reply+0x594>)
 801a0a0:	6a3b      	ldr	r3, [r7, #32]
 801a0a2:	4413      	add	r3, r2
 801a0a4:	2201      	movs	r2, #1
 801a0a6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a0a8:	68ba      	ldr	r2, [r7, #8]
 801a0aa:	493f      	ldr	r1, [pc, #252]	@ (801a1a8 <dhcp_parse_reply+0x59c>)
 801a0ac:	6a3b      	ldr	r3, [r7, #32]
 801a0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0b4:	895b      	ldrh	r3, [r3, #10]
 801a0b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a0b8:	429a      	cmp	r2, r3
 801a0ba:	d324      	bcc.n	801a106 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0be:	895b      	ldrh	r3, [r3, #10]
 801a0c0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a0c2:	1ad3      	subs	r3, r2, r3
 801a0c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0c8:	895b      	ldrh	r3, [r3, #10]
 801a0ca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a0cc:	1ad3      	subs	r3, r2, r3
 801a0ce:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a0d0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a0d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a0d4:	429a      	cmp	r2, r3
 801a0d6:	d213      	bcs.n	801a100 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d109      	bne.n	801a0f8 <dhcp_parse_reply+0x4ec>
 801a0e4:	4b2a      	ldr	r3, [pc, #168]	@ (801a190 <dhcp_parse_reply+0x584>)
 801a0e6:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a0ea:	4931      	ldr	r1, [pc, #196]	@ (801a1b0 <dhcp_parse_reply+0x5a4>)
 801a0ec:	482a      	ldr	r0, [pc, #168]	@ (801a198 <dhcp_parse_reply+0x58c>)
 801a0ee:	f003 fb91 	bl	801d814 <iprintf>
 801a0f2:	f06f 0305 	mvn.w	r3, #5
 801a0f6:	e046      	b.n	801a186 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a0fe:	e002      	b.n	801a106 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a100:	f06f 0301 	mvn.w	r3, #1
 801a104:	e03f      	b.n	801a186 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d00a      	beq.n	801a122 <dhcp_parse_reply+0x516>
 801a10c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a10e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a110:	429a      	cmp	r2, r3
 801a112:	d206      	bcs.n	801a122 <dhcp_parse_reply+0x516>
 801a114:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a116:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a118:	4413      	add	r3, r2
 801a11a:	781b      	ldrb	r3, [r3, #0]
 801a11c:	2bff      	cmp	r3, #255	@ 0xff
 801a11e:	f47f adb8 	bne.w	8019c92 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a122:	4b1f      	ldr	r3, [pc, #124]	@ (801a1a0 <dhcp_parse_reply+0x594>)
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d018      	beq.n	801a15c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a12a:	4b1f      	ldr	r3, [pc, #124]	@ (801a1a8 <dhcp_parse_reply+0x59c>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a130:	4b1b      	ldr	r3, [pc, #108]	@ (801a1a0 <dhcp_parse_reply+0x594>)
 801a132:	2200      	movs	r2, #0
 801a134:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	2b01      	cmp	r3, #1
 801a13a:	d102      	bne.n	801a142 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801a13c:	2301      	movs	r3, #1
 801a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a140:	e00c      	b.n	801a15c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	2b02      	cmp	r3, #2
 801a146:	d102      	bne.n	801a14e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801a148:	2301      	movs	r3, #1
 801a14a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a14c:	e006      	b.n	801a15c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	2b03      	cmp	r3, #3
 801a152:	d103      	bne.n	801a15c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801a154:	2301      	movs	r3, #1
 801a156:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a158:	2301      	movs	r3, #1
 801a15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d006      	beq.n	801a170 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a162:	2300      	movs	r3, #0
 801a164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a166:	236c      	movs	r3, #108	@ 0x6c
 801a168:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a16a:	23ec      	movs	r3, #236	@ 0xec
 801a16c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a16e:	e56a      	b.n	8019c46 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a172:	2b00      	cmp	r3, #0
 801a174:	d006      	beq.n	801a184 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801a176:	2300      	movs	r3, #0
 801a178:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a17a:	232c      	movs	r3, #44	@ 0x2c
 801a17c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a17e:	236c      	movs	r3, #108	@ 0x6c
 801a180:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a182:	e560      	b.n	8019c46 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a184:	2300      	movs	r3, #0
}
 801a186:	4618      	mov	r0, r3
 801a188:	3740      	adds	r7, #64	@ 0x40
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}
 801a18e:	bf00      	nop
 801a190:	080221a4 	.word	0x080221a4
 801a194:	0802242c 	.word	0x0802242c
 801a198:	08022204 	.word	0x08022204
 801a19c:	08022470 	.word	0x08022470
 801a1a0:	2400ccb4 	.word	0x2400ccb4
 801a1a4:	08022484 	.word	0x08022484
 801a1a8:	2400cc94 	.word	0x2400cc94
 801a1ac:	0802249c 	.word	0x0802249c
 801a1b0:	080224b0 	.word	0x080224b0

0801a1b4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b08a      	sub	sp, #40	@ 0x28
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	60f8      	str	r0, [r7, #12]
 801a1bc:	60b9      	str	r1, [r7, #8]
 801a1be:	607a      	str	r2, [r7, #4]
 801a1c0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a1c2:	4b60      	ldr	r3, [pc, #384]	@ (801a344 <dhcp_recv+0x190>)
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1c8:	6a3b      	ldr	r3, [r7, #32]
 801a1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1cc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	685b      	ldr	r3, [r3, #4]
 801a1d2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	f000 809d 	beq.w	801a316 <dhcp_recv+0x162>
 801a1dc:	69fb      	ldr	r3, [r7, #28]
 801a1de:	791b      	ldrb	r3, [r3, #4]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f000 8098 	beq.w	801a316 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	895b      	ldrh	r3, [r3, #10]
 801a1ea:	2b2b      	cmp	r3, #43	@ 0x2b
 801a1ec:	f240 8095 	bls.w	801a31a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a1f0:	69bb      	ldr	r3, [r7, #24]
 801a1f2:	781b      	ldrb	r3, [r3, #0]
 801a1f4:	2b02      	cmp	r3, #2
 801a1f6:	f040 8092 	bne.w	801a31e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a200:	e012      	b.n	801a228 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a206:	6a3a      	ldr	r2, [r7, #32]
 801a208:	4413      	add	r3, r2
 801a20a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a20e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a212:	69b9      	ldr	r1, [r7, #24]
 801a214:	440b      	add	r3, r1
 801a216:	7f1b      	ldrb	r3, [r3, #28]
 801a218:	429a      	cmp	r2, r3
 801a21a:	f040 8082 	bne.w	801a322 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a21e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a222:	3301      	adds	r3, #1
 801a224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a228:	6a3b      	ldr	r3, [r7, #32]
 801a22a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a22e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a232:	429a      	cmp	r2, r3
 801a234:	d203      	bcs.n	801a23e <dhcp_recv+0x8a>
 801a236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a23a:	2b05      	cmp	r3, #5
 801a23c:	d9e1      	bls.n	801a202 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a23e:	69bb      	ldr	r3, [r7, #24]
 801a240:	685b      	ldr	r3, [r3, #4]
 801a242:	4618      	mov	r0, r3
 801a244:	f7f6 fc47 	bl	8010ad6 <lwip_htonl>
 801a248:	4602      	mov	r2, r0
 801a24a:	69fb      	ldr	r3, [r7, #28]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	429a      	cmp	r2, r3
 801a250:	d169      	bne.n	801a326 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a252:	69f9      	ldr	r1, [r7, #28]
 801a254:	6878      	ldr	r0, [r7, #4]
 801a256:	f7ff fcd9 	bl	8019c0c <dhcp_parse_reply>
 801a25a:	4603      	mov	r3, r0
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d164      	bne.n	801a32a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a260:	4b39      	ldr	r3, [pc, #228]	@ (801a348 <dhcp_recv+0x194>)
 801a262:	785b      	ldrb	r3, [r3, #1]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d062      	beq.n	801a32e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	685b      	ldr	r3, [r3, #4]
 801a26c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a26e:	4b37      	ldr	r3, [pc, #220]	@ (801a34c <dhcp_recv+0x198>)
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a274:	7cfb      	ldrb	r3, [r7, #19]
 801a276:	2b05      	cmp	r3, #5
 801a278:	d12a      	bne.n	801a2d0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a27a:	69fb      	ldr	r3, [r7, #28]
 801a27c:	795b      	ldrb	r3, [r3, #5]
 801a27e:	2b01      	cmp	r3, #1
 801a280:	d112      	bne.n	801a2a8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a282:	6979      	ldr	r1, [r7, #20]
 801a284:	6a38      	ldr	r0, [r7, #32]
 801a286:	f7fe fe1d 	bl	8018ec4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a28a:	6a3b      	ldr	r3, [r7, #32]
 801a28c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a290:	f003 0308 	and.w	r3, r3, #8
 801a294:	2b00      	cmp	r3, #0
 801a296:	d003      	beq.n	801a2a0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a298:	6a38      	ldr	r0, [r7, #32]
 801a29a:	f7fe fb8b 	bl	80189b4 <dhcp_check>
 801a29e:	e049      	b.n	801a334 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a2a0:	6a38      	ldr	r0, [r7, #32]
 801a2a2:	f7ff f86d 	bl	8019380 <dhcp_bind>
 801a2a6:	e045      	b.n	801a334 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	795b      	ldrb	r3, [r3, #5]
 801a2ac:	2b03      	cmp	r3, #3
 801a2ae:	d007      	beq.n	801a2c0 <dhcp_recv+0x10c>
 801a2b0:	69fb      	ldr	r3, [r7, #28]
 801a2b2:	795b      	ldrb	r3, [r3, #5]
 801a2b4:	2b04      	cmp	r3, #4
 801a2b6:	d003      	beq.n	801a2c0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a2b8:	69fb      	ldr	r3, [r7, #28]
 801a2ba:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a2bc:	2b05      	cmp	r3, #5
 801a2be:	d139      	bne.n	801a334 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a2c0:	6979      	ldr	r1, [r7, #20]
 801a2c2:	6a38      	ldr	r0, [r7, #32]
 801a2c4:	f7fe fdfe 	bl	8018ec4 <dhcp_handle_ack>
      dhcp_bind(netif);
 801a2c8:	6a38      	ldr	r0, [r7, #32]
 801a2ca:	f7ff f859 	bl	8019380 <dhcp_bind>
 801a2ce:	e031      	b.n	801a334 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a2d0:	7cfb      	ldrb	r3, [r7, #19]
 801a2d2:	2b06      	cmp	r3, #6
 801a2d4:	d113      	bne.n	801a2fe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a2d6:	69fb      	ldr	r3, [r7, #28]
 801a2d8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a2da:	2b03      	cmp	r3, #3
 801a2dc:	d00b      	beq.n	801a2f6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a2de:	69fb      	ldr	r3, [r7, #28]
 801a2e0:	795b      	ldrb	r3, [r3, #5]
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	d007      	beq.n	801a2f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a2e6:	69fb      	ldr	r3, [r7, #28]
 801a2e8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a2ea:	2b04      	cmp	r3, #4
 801a2ec:	d003      	beq.n	801a2f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a2ee:	69fb      	ldr	r3, [r7, #28]
 801a2f0:	795b      	ldrb	r3, [r3, #5]
 801a2f2:	2b05      	cmp	r3, #5
 801a2f4:	d103      	bne.n	801a2fe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a2f6:	6a38      	ldr	r0, [r7, #32]
 801a2f8:	f7fe fb42 	bl	8018980 <dhcp_handle_nak>
 801a2fc:	e01a      	b.n	801a334 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a2fe:	7cfb      	ldrb	r3, [r7, #19]
 801a300:	2b02      	cmp	r3, #2
 801a302:	d116      	bne.n	801a332 <dhcp_recv+0x17e>
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	795b      	ldrb	r3, [r3, #5]
 801a308:	2b06      	cmp	r3, #6
 801a30a:	d112      	bne.n	801a332 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a30c:	6979      	ldr	r1, [r7, #20]
 801a30e:	6a38      	ldr	r0, [r7, #32]
 801a310:	f7fe fb84 	bl	8018a1c <dhcp_handle_offer>
 801a314:	e00e      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a316:	bf00      	nop
 801a318:	e00c      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a31a:	bf00      	nop
 801a31c:	e00a      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a31e:	bf00      	nop
 801a320:	e008      	b.n	801a334 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a322:	bf00      	nop
 801a324:	e006      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a326:	bf00      	nop
 801a328:	e004      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a32a:	bf00      	nop
 801a32c:	e002      	b.n	801a334 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a32e:	bf00      	nop
 801a330:	e000      	b.n	801a334 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a332:	bf00      	nop
  pbuf_free(p);
 801a334:	6878      	ldr	r0, [r7, #4]
 801a336:	f7f8 f86f 	bl	8012418 <pbuf_free>
}
 801a33a:	bf00      	nop
 801a33c:	3728      	adds	r7, #40	@ 0x28
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	24009b14 	.word	0x24009b14
 801a348:	2400ccb4 	.word	0x2400ccb4
 801a34c:	2400cc94 	.word	0x2400cc94

0801a350 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b088      	sub	sp, #32
 801a354:	af00      	add	r7, sp, #0
 801a356:	60f8      	str	r0, [r7, #12]
 801a358:	60b9      	str	r1, [r7, #8]
 801a35a:	603b      	str	r3, [r7, #0]
 801a35c:	4613      	mov	r3, r2
 801a35e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d108      	bne.n	801a378 <dhcp_create_msg+0x28>
 801a366:	4b5f      	ldr	r3, [pc, #380]	@ (801a4e4 <dhcp_create_msg+0x194>)
 801a368:	f240 7269 	movw	r2, #1897	@ 0x769
 801a36c:	495e      	ldr	r1, [pc, #376]	@ (801a4e8 <dhcp_create_msg+0x198>)
 801a36e:	485f      	ldr	r0, [pc, #380]	@ (801a4ec <dhcp_create_msg+0x19c>)
 801a370:	f003 fa50 	bl	801d814 <iprintf>
 801a374:	2300      	movs	r3, #0
 801a376:	e0b1      	b.n	801a4dc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d108      	bne.n	801a390 <dhcp_create_msg+0x40>
 801a37e:	4b59      	ldr	r3, [pc, #356]	@ (801a4e4 <dhcp_create_msg+0x194>)
 801a380:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a384:	495a      	ldr	r1, [pc, #360]	@ (801a4f0 <dhcp_create_msg+0x1a0>)
 801a386:	4859      	ldr	r0, [pc, #356]	@ (801a4ec <dhcp_create_msg+0x19c>)
 801a388:	f003 fa44 	bl	801d814 <iprintf>
 801a38c:	2300      	movs	r3, #0
 801a38e:	e0a5      	b.n	801a4dc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a390:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a394:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a398:	2036      	movs	r0, #54	@ 0x36
 801a39a:	f7f7 fd59 	bl	8011e50 <pbuf_alloc>
 801a39e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d101      	bne.n	801a3aa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	e098      	b.n	801a4dc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a3aa:	69bb      	ldr	r3, [r7, #24]
 801a3ac:	895b      	ldrh	r3, [r3, #10]
 801a3ae:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a3b2:	d206      	bcs.n	801a3c2 <dhcp_create_msg+0x72>
 801a3b4:	4b4b      	ldr	r3, [pc, #300]	@ (801a4e4 <dhcp_create_msg+0x194>)
 801a3b6:	f240 7271 	movw	r2, #1905	@ 0x771
 801a3ba:	494e      	ldr	r1, [pc, #312]	@ (801a4f4 <dhcp_create_msg+0x1a4>)
 801a3bc:	484b      	ldr	r0, [pc, #300]	@ (801a4ec <dhcp_create_msg+0x19c>)
 801a3be:	f003 fa29 	bl	801d814 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a3c2:	79fb      	ldrb	r3, [r7, #7]
 801a3c4:	2b03      	cmp	r3, #3
 801a3c6:	d103      	bne.n	801a3d0 <dhcp_create_msg+0x80>
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	795b      	ldrb	r3, [r3, #5]
 801a3cc:	2b03      	cmp	r3, #3
 801a3ce:	d10d      	bne.n	801a3ec <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	799b      	ldrb	r3, [r3, #6]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d105      	bne.n	801a3e4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a3d8:	f002 fce4 	bl	801cda4 <rand>
 801a3dc:	4603      	mov	r3, r0
 801a3de:	461a      	mov	r2, r3
 801a3e0:	4b45      	ldr	r3, [pc, #276]	@ (801a4f8 <dhcp_create_msg+0x1a8>)
 801a3e2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a3e4:	4b44      	ldr	r3, [pc, #272]	@ (801a4f8 <dhcp_create_msg+0x1a8>)
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a3ec:	69bb      	ldr	r3, [r7, #24]
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a3f2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a3f6:	2100      	movs	r1, #0
 801a3f8:	6978      	ldr	r0, [r7, #20]
 801a3fa:	f003 fbb1 	bl	801db60 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a3fe:	697b      	ldr	r3, [r7, #20]
 801a400:	2201      	movs	r2, #1
 801a402:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a404:	697b      	ldr	r3, [r7, #20]
 801a406:	2201      	movs	r2, #1
 801a408:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	4618      	mov	r0, r3
 801a41a:	f7f6 fb5c 	bl	8010ad6 <lwip_htonl>
 801a41e:	4602      	mov	r2, r0
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a424:	79fb      	ldrb	r3, [r7, #7]
 801a426:	2b08      	cmp	r3, #8
 801a428:	d010      	beq.n	801a44c <dhcp_create_msg+0xfc>
 801a42a:	79fb      	ldrb	r3, [r7, #7]
 801a42c:	2b04      	cmp	r3, #4
 801a42e:	d00d      	beq.n	801a44c <dhcp_create_msg+0xfc>
 801a430:	79fb      	ldrb	r3, [r7, #7]
 801a432:	2b07      	cmp	r3, #7
 801a434:	d00a      	beq.n	801a44c <dhcp_create_msg+0xfc>
 801a436:	79fb      	ldrb	r3, [r7, #7]
 801a438:	2b03      	cmp	r3, #3
 801a43a:	d10c      	bne.n	801a456 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a440:	2b05      	cmp	r3, #5
 801a442:	d003      	beq.n	801a44c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a444:	68bb      	ldr	r3, [r7, #8]
 801a446:	795b      	ldrb	r3, [r3, #5]
 801a448:	2b04      	cmp	r3, #4
 801a44a:	d104      	bne.n	801a456 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	3304      	adds	r3, #4
 801a450:	681a      	ldr	r2, [r3, #0]
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a456:	2300      	movs	r3, #0
 801a458:	83fb      	strh	r3, [r7, #30]
 801a45a:	e00c      	b.n	801a476 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a45c:	8bfa      	ldrh	r2, [r7, #30]
 801a45e:	8bfb      	ldrh	r3, [r7, #30]
 801a460:	68f9      	ldr	r1, [r7, #12]
 801a462:	440a      	add	r2, r1
 801a464:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a468:	697a      	ldr	r2, [r7, #20]
 801a46a:	4413      	add	r3, r2
 801a46c:	460a      	mov	r2, r1
 801a46e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a470:	8bfb      	ldrh	r3, [r7, #30]
 801a472:	3301      	adds	r3, #1
 801a474:	83fb      	strh	r3, [r7, #30]
 801a476:	8bfb      	ldrh	r3, [r7, #30]
 801a478:	2b05      	cmp	r3, #5
 801a47a:	d9ef      	bls.n	801a45c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	2200      	movs	r2, #0
 801a480:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a484:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a488:	2200      	movs	r2, #0
 801a48a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a48e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a492:	2200      	movs	r2, #0
 801a494:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a498:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a49c:	2200      	movs	r2, #0
 801a49e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a4a2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a4a6:	697b      	ldr	r3, [r7, #20]
 801a4a8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a4ac:	2301      	movs	r3, #1
 801a4ae:	2235      	movs	r2, #53	@ 0x35
 801a4b0:	2000      	movs	r0, #0
 801a4b2:	f7ff fadb 	bl	8019a6c <dhcp_option>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a4ba:	697b      	ldr	r3, [r7, #20]
 801a4bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a4c0:	79fa      	ldrb	r2, [r7, #7]
 801a4c2:	8a7b      	ldrh	r3, [r7, #18]
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f7ff fb05 	bl	8019ad4 <dhcp_option_byte>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d002      	beq.n	801a4da <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	8a7a      	ldrh	r2, [r7, #18]
 801a4d8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a4da:	69bb      	ldr	r3, [r7, #24]
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3720      	adds	r7, #32
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	080221a4 	.word	0x080221a4
 801a4e8:	080224c4 	.word	0x080224c4
 801a4ec:	08022204 	.word	0x08022204
 801a4f0:	080224e4 	.word	0x080224e4
 801a4f4:	08022504 	.word	0x08022504
 801a4f8:	2400ccc4 	.word	0x2400ccc4

0801a4fc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b084      	sub	sp, #16
 801a500:	af00      	add	r7, sp, #0
 801a502:	4603      	mov	r3, r0
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	607a      	str	r2, [r7, #4]
 801a508:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a50a:	89fb      	ldrh	r3, [r7, #14]
 801a50c:	1c5a      	adds	r2, r3, #1
 801a50e:	81fa      	strh	r2, [r7, #14]
 801a510:	461a      	mov	r2, r3
 801a512:	68bb      	ldr	r3, [r7, #8]
 801a514:	4413      	add	r3, r2
 801a516:	22ff      	movs	r2, #255	@ 0xff
 801a518:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a51a:	e007      	b.n	801a52c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a51c:	89fb      	ldrh	r3, [r7, #14]
 801a51e:	1c5a      	adds	r2, r3, #1
 801a520:	81fa      	strh	r2, [r7, #14]
 801a522:	461a      	mov	r2, r3
 801a524:	68bb      	ldr	r3, [r7, #8]
 801a526:	4413      	add	r3, r2
 801a528:	2200      	movs	r2, #0
 801a52a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a52c:	89fb      	ldrh	r3, [r7, #14]
 801a52e:	2b43      	cmp	r3, #67	@ 0x43
 801a530:	d904      	bls.n	801a53c <dhcp_option_trailer+0x40>
 801a532:	89fb      	ldrh	r3, [r7, #14]
 801a534:	f003 0303 	and.w	r3, r3, #3
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d002      	beq.n	801a542 <dhcp_option_trailer+0x46>
 801a53c:	89fb      	ldrh	r3, [r7, #14]
 801a53e:	2b43      	cmp	r3, #67	@ 0x43
 801a540:	d9ec      	bls.n	801a51c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a542:	89fb      	ldrh	r3, [r7, #14]
 801a544:	33f0      	adds	r3, #240	@ 0xf0
 801a546:	b29b      	uxth	r3, r3
 801a548:	4619      	mov	r1, r3
 801a54a:	6878      	ldr	r0, [r7, #4]
 801a54c:	f7f7 fdde 	bl	801210c <pbuf_realloc>
}
 801a550:	bf00      	nop
 801a552:	3710      	adds	r7, #16
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}

0801a558 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a558:	b480      	push	{r7}
 801a55a:	b085      	sub	sp, #20
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d017      	beq.n	801a596 <dhcp_supplied_address+0x3e>
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d013      	beq.n	801a596 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a572:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	795b      	ldrb	r3, [r3, #5]
 801a578:	2b0a      	cmp	r3, #10
 801a57a:	d007      	beq.n	801a58c <dhcp_supplied_address+0x34>
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	795b      	ldrb	r3, [r3, #5]
 801a580:	2b05      	cmp	r3, #5
 801a582:	d003      	beq.n	801a58c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a588:	2b04      	cmp	r3, #4
 801a58a:	d101      	bne.n	801a590 <dhcp_supplied_address+0x38>
 801a58c:	2301      	movs	r3, #1
 801a58e:	e000      	b.n	801a592 <dhcp_supplied_address+0x3a>
 801a590:	2300      	movs	r3, #0
 801a592:	b2db      	uxtb	r3, r3
 801a594:	e000      	b.n	801a598 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a596:	2300      	movs	r3, #0
}
 801a598:	4618      	mov	r0, r3
 801a59a:	3714      	adds	r7, #20
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a5ac:	4915      	ldr	r1, [pc, #84]	@ (801a604 <etharp_free_entry+0x60>)
 801a5ae:	687a      	ldr	r2, [r7, #4]
 801a5b0:	4613      	mov	r3, r2
 801a5b2:	005b      	lsls	r3, r3, #1
 801a5b4:	4413      	add	r3, r2
 801a5b6:	00db      	lsls	r3, r3, #3
 801a5b8:	440b      	add	r3, r1
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d013      	beq.n	801a5e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a5c0:	4910      	ldr	r1, [pc, #64]	@ (801a604 <etharp_free_entry+0x60>)
 801a5c2:	687a      	ldr	r2, [r7, #4]
 801a5c4:	4613      	mov	r3, r2
 801a5c6:	005b      	lsls	r3, r3, #1
 801a5c8:	4413      	add	r3, r2
 801a5ca:	00db      	lsls	r3, r3, #3
 801a5cc:	440b      	add	r3, r1
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	f7f7 ff21 	bl	8012418 <pbuf_free>
    arp_table[i].q = NULL;
 801a5d6:	490b      	ldr	r1, [pc, #44]	@ (801a604 <etharp_free_entry+0x60>)
 801a5d8:	687a      	ldr	r2, [r7, #4]
 801a5da:	4613      	mov	r3, r2
 801a5dc:	005b      	lsls	r3, r3, #1
 801a5de:	4413      	add	r3, r2
 801a5e0:	00db      	lsls	r3, r3, #3
 801a5e2:	440b      	add	r3, r1
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a5e8:	4906      	ldr	r1, [pc, #24]	@ (801a604 <etharp_free_entry+0x60>)
 801a5ea:	687a      	ldr	r2, [r7, #4]
 801a5ec:	4613      	mov	r3, r2
 801a5ee:	005b      	lsls	r3, r3, #1
 801a5f0:	4413      	add	r3, r2
 801a5f2:	00db      	lsls	r3, r3, #3
 801a5f4:	440b      	add	r3, r1
 801a5f6:	3314      	adds	r3, #20
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a5fc:	bf00      	nop
 801a5fe:	3708      	adds	r7, #8
 801a600:	46bd      	mov	sp, r7
 801a602:	bd80      	pop	{r7, pc}
 801a604:	2400ccc8 	.word	0x2400ccc8

0801a608 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b082      	sub	sp, #8
 801a60c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a60e:	2300      	movs	r3, #0
 801a610:	607b      	str	r3, [r7, #4]
 801a612:	e096      	b.n	801a742 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a614:	494f      	ldr	r1, [pc, #316]	@ (801a754 <etharp_tmr+0x14c>)
 801a616:	687a      	ldr	r2, [r7, #4]
 801a618:	4613      	mov	r3, r2
 801a61a:	005b      	lsls	r3, r3, #1
 801a61c:	4413      	add	r3, r2
 801a61e:	00db      	lsls	r3, r3, #3
 801a620:	440b      	add	r3, r1
 801a622:	3314      	adds	r3, #20
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a628:	78fb      	ldrb	r3, [r7, #3]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	f000 8086 	beq.w	801a73c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a630:	4948      	ldr	r1, [pc, #288]	@ (801a754 <etharp_tmr+0x14c>)
 801a632:	687a      	ldr	r2, [r7, #4]
 801a634:	4613      	mov	r3, r2
 801a636:	005b      	lsls	r3, r3, #1
 801a638:	4413      	add	r3, r2
 801a63a:	00db      	lsls	r3, r3, #3
 801a63c:	440b      	add	r3, r1
 801a63e:	3312      	adds	r3, #18
 801a640:	881b      	ldrh	r3, [r3, #0]
 801a642:	3301      	adds	r3, #1
 801a644:	b298      	uxth	r0, r3
 801a646:	4943      	ldr	r1, [pc, #268]	@ (801a754 <etharp_tmr+0x14c>)
 801a648:	687a      	ldr	r2, [r7, #4]
 801a64a:	4613      	mov	r3, r2
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	4413      	add	r3, r2
 801a650:	00db      	lsls	r3, r3, #3
 801a652:	440b      	add	r3, r1
 801a654:	3312      	adds	r3, #18
 801a656:	4602      	mov	r2, r0
 801a658:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a65a:	493e      	ldr	r1, [pc, #248]	@ (801a754 <etharp_tmr+0x14c>)
 801a65c:	687a      	ldr	r2, [r7, #4]
 801a65e:	4613      	mov	r3, r2
 801a660:	005b      	lsls	r3, r3, #1
 801a662:	4413      	add	r3, r2
 801a664:	00db      	lsls	r3, r3, #3
 801a666:	440b      	add	r3, r1
 801a668:	3312      	adds	r3, #18
 801a66a:	881b      	ldrh	r3, [r3, #0]
 801a66c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a670:	d215      	bcs.n	801a69e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a672:	4938      	ldr	r1, [pc, #224]	@ (801a754 <etharp_tmr+0x14c>)
 801a674:	687a      	ldr	r2, [r7, #4]
 801a676:	4613      	mov	r3, r2
 801a678:	005b      	lsls	r3, r3, #1
 801a67a:	4413      	add	r3, r2
 801a67c:	00db      	lsls	r3, r3, #3
 801a67e:	440b      	add	r3, r1
 801a680:	3314      	adds	r3, #20
 801a682:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a684:	2b01      	cmp	r3, #1
 801a686:	d10e      	bne.n	801a6a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a688:	4932      	ldr	r1, [pc, #200]	@ (801a754 <etharp_tmr+0x14c>)
 801a68a:	687a      	ldr	r2, [r7, #4]
 801a68c:	4613      	mov	r3, r2
 801a68e:	005b      	lsls	r3, r3, #1
 801a690:	4413      	add	r3, r2
 801a692:	00db      	lsls	r3, r3, #3
 801a694:	440b      	add	r3, r1
 801a696:	3312      	adds	r3, #18
 801a698:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a69a:	2b04      	cmp	r3, #4
 801a69c:	d903      	bls.n	801a6a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a69e:	6878      	ldr	r0, [r7, #4]
 801a6a0:	f7ff ff80 	bl	801a5a4 <etharp_free_entry>
 801a6a4:	e04a      	b.n	801a73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a6a6:	492b      	ldr	r1, [pc, #172]	@ (801a754 <etharp_tmr+0x14c>)
 801a6a8:	687a      	ldr	r2, [r7, #4]
 801a6aa:	4613      	mov	r3, r2
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	4413      	add	r3, r2
 801a6b0:	00db      	lsls	r3, r3, #3
 801a6b2:	440b      	add	r3, r1
 801a6b4:	3314      	adds	r3, #20
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	2b03      	cmp	r3, #3
 801a6ba:	d10a      	bne.n	801a6d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a6bc:	4925      	ldr	r1, [pc, #148]	@ (801a754 <etharp_tmr+0x14c>)
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	4613      	mov	r3, r2
 801a6c2:	005b      	lsls	r3, r3, #1
 801a6c4:	4413      	add	r3, r2
 801a6c6:	00db      	lsls	r3, r3, #3
 801a6c8:	440b      	add	r3, r1
 801a6ca:	3314      	adds	r3, #20
 801a6cc:	2204      	movs	r2, #4
 801a6ce:	701a      	strb	r2, [r3, #0]
 801a6d0:	e034      	b.n	801a73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a6d2:	4920      	ldr	r1, [pc, #128]	@ (801a754 <etharp_tmr+0x14c>)
 801a6d4:	687a      	ldr	r2, [r7, #4]
 801a6d6:	4613      	mov	r3, r2
 801a6d8:	005b      	lsls	r3, r3, #1
 801a6da:	4413      	add	r3, r2
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	440b      	add	r3, r1
 801a6e0:	3314      	adds	r3, #20
 801a6e2:	781b      	ldrb	r3, [r3, #0]
 801a6e4:	2b04      	cmp	r3, #4
 801a6e6:	d10a      	bne.n	801a6fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a6e8:	491a      	ldr	r1, [pc, #104]	@ (801a754 <etharp_tmr+0x14c>)
 801a6ea:	687a      	ldr	r2, [r7, #4]
 801a6ec:	4613      	mov	r3, r2
 801a6ee:	005b      	lsls	r3, r3, #1
 801a6f0:	4413      	add	r3, r2
 801a6f2:	00db      	lsls	r3, r3, #3
 801a6f4:	440b      	add	r3, r1
 801a6f6:	3314      	adds	r3, #20
 801a6f8:	2202      	movs	r2, #2
 801a6fa:	701a      	strb	r2, [r3, #0]
 801a6fc:	e01e      	b.n	801a73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a6fe:	4915      	ldr	r1, [pc, #84]	@ (801a754 <etharp_tmr+0x14c>)
 801a700:	687a      	ldr	r2, [r7, #4]
 801a702:	4613      	mov	r3, r2
 801a704:	005b      	lsls	r3, r3, #1
 801a706:	4413      	add	r3, r2
 801a708:	00db      	lsls	r3, r3, #3
 801a70a:	440b      	add	r3, r1
 801a70c:	3314      	adds	r3, #20
 801a70e:	781b      	ldrb	r3, [r3, #0]
 801a710:	2b01      	cmp	r3, #1
 801a712:	d113      	bne.n	801a73c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a714:	490f      	ldr	r1, [pc, #60]	@ (801a754 <etharp_tmr+0x14c>)
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	4613      	mov	r3, r2
 801a71a:	005b      	lsls	r3, r3, #1
 801a71c:	4413      	add	r3, r2
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	440b      	add	r3, r1
 801a722:	3308      	adds	r3, #8
 801a724:	6818      	ldr	r0, [r3, #0]
 801a726:	687a      	ldr	r2, [r7, #4]
 801a728:	4613      	mov	r3, r2
 801a72a:	005b      	lsls	r3, r3, #1
 801a72c:	4413      	add	r3, r2
 801a72e:	00db      	lsls	r3, r3, #3
 801a730:	4a08      	ldr	r2, [pc, #32]	@ (801a754 <etharp_tmr+0x14c>)
 801a732:	4413      	add	r3, r2
 801a734:	3304      	adds	r3, #4
 801a736:	4619      	mov	r1, r3
 801a738:	f000 fe72 	bl	801b420 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	3301      	adds	r3, #1
 801a740:	607b      	str	r3, [r7, #4]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	2b09      	cmp	r3, #9
 801a746:	f77f af65 	ble.w	801a614 <etharp_tmr+0xc>
      }
    }
  }
}
 801a74a:	bf00      	nop
 801a74c:	bf00      	nop
 801a74e:	3708      	adds	r7, #8
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}
 801a754:	2400ccc8 	.word	0x2400ccc8

0801a758 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b08a      	sub	sp, #40	@ 0x28
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	60f8      	str	r0, [r7, #12]
 801a760:	460b      	mov	r3, r1
 801a762:	607a      	str	r2, [r7, #4]
 801a764:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a766:	230a      	movs	r3, #10
 801a768:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a76a:	230a      	movs	r3, #10
 801a76c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a76e:	230a      	movs	r3, #10
 801a770:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a772:	2300      	movs	r3, #0
 801a774:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a776:	230a      	movs	r3, #10
 801a778:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	83bb      	strh	r3, [r7, #28]
 801a77e:	2300      	movs	r3, #0
 801a780:	837b      	strh	r3, [r7, #26]
 801a782:	2300      	movs	r3, #0
 801a784:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a786:	2300      	movs	r3, #0
 801a788:	843b      	strh	r3, [r7, #32]
 801a78a:	e0ae      	b.n	801a8ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a78c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a790:	49a6      	ldr	r1, [pc, #664]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a792:	4613      	mov	r3, r2
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	4413      	add	r3, r2
 801a798:	00db      	lsls	r3, r3, #3
 801a79a:	440b      	add	r3, r1
 801a79c:	3314      	adds	r3, #20
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a7a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a7a6:	2b0a      	cmp	r3, #10
 801a7a8:	d105      	bne.n	801a7b6 <etharp_find_entry+0x5e>
 801a7aa:	7dfb      	ldrb	r3, [r7, #23]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d102      	bne.n	801a7b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a7b0:	8c3b      	ldrh	r3, [r7, #32]
 801a7b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a7b4:	e095      	b.n	801a8e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a7b6:	7dfb      	ldrb	r3, [r7, #23]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	f000 8092 	beq.w	801a8e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a7be:	7dfb      	ldrb	r3, [r7, #23]
 801a7c0:	2b01      	cmp	r3, #1
 801a7c2:	d009      	beq.n	801a7d8 <etharp_find_entry+0x80>
 801a7c4:	7dfb      	ldrb	r3, [r7, #23]
 801a7c6:	2b01      	cmp	r3, #1
 801a7c8:	d806      	bhi.n	801a7d8 <etharp_find_entry+0x80>
 801a7ca:	4b99      	ldr	r3, [pc, #612]	@ (801aa30 <etharp_find_entry+0x2d8>)
 801a7cc:	f240 1223 	movw	r2, #291	@ 0x123
 801a7d0:	4998      	ldr	r1, [pc, #608]	@ (801aa34 <etharp_find_entry+0x2dc>)
 801a7d2:	4899      	ldr	r0, [pc, #612]	@ (801aa38 <etharp_find_entry+0x2e0>)
 801a7d4:	f003 f81e 	bl	801d814 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d020      	beq.n	801a820 <etharp_find_entry+0xc8>
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	6819      	ldr	r1, [r3, #0]
 801a7e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7e6:	4891      	ldr	r0, [pc, #580]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a7e8:	4613      	mov	r3, r2
 801a7ea:	005b      	lsls	r3, r3, #1
 801a7ec:	4413      	add	r3, r2
 801a7ee:	00db      	lsls	r3, r3, #3
 801a7f0:	4403      	add	r3, r0
 801a7f2:	3304      	adds	r3, #4
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	4299      	cmp	r1, r3
 801a7f8:	d112      	bne.n	801a820 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d00c      	beq.n	801a81a <etharp_find_entry+0xc2>
 801a800:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a804:	4989      	ldr	r1, [pc, #548]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a806:	4613      	mov	r3, r2
 801a808:	005b      	lsls	r3, r3, #1
 801a80a:	4413      	add	r3, r2
 801a80c:	00db      	lsls	r3, r3, #3
 801a80e:	440b      	add	r3, r1
 801a810:	3308      	adds	r3, #8
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	687a      	ldr	r2, [r7, #4]
 801a816:	429a      	cmp	r2, r3
 801a818:	d102      	bne.n	801a820 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a81a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a81e:	e100      	b.n	801aa22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a820:	7dfb      	ldrb	r3, [r7, #23]
 801a822:	2b01      	cmp	r3, #1
 801a824:	d140      	bne.n	801a8a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a82a:	4980      	ldr	r1, [pc, #512]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a82c:	4613      	mov	r3, r2
 801a82e:	005b      	lsls	r3, r3, #1
 801a830:	4413      	add	r3, r2
 801a832:	00db      	lsls	r3, r3, #3
 801a834:	440b      	add	r3, r1
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d01a      	beq.n	801a872 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a83c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a840:	497a      	ldr	r1, [pc, #488]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a842:	4613      	mov	r3, r2
 801a844:	005b      	lsls	r3, r3, #1
 801a846:	4413      	add	r3, r2
 801a848:	00db      	lsls	r3, r3, #3
 801a84a:	440b      	add	r3, r1
 801a84c:	3312      	adds	r3, #18
 801a84e:	881b      	ldrh	r3, [r3, #0]
 801a850:	8bba      	ldrh	r2, [r7, #28]
 801a852:	429a      	cmp	r2, r3
 801a854:	d845      	bhi.n	801a8e2 <etharp_find_entry+0x18a>
            old_queue = i;
 801a856:	8c3b      	ldrh	r3, [r7, #32]
 801a858:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a85a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a85e:	4973      	ldr	r1, [pc, #460]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a860:	4613      	mov	r3, r2
 801a862:	005b      	lsls	r3, r3, #1
 801a864:	4413      	add	r3, r2
 801a866:	00db      	lsls	r3, r3, #3
 801a868:	440b      	add	r3, r1
 801a86a:	3312      	adds	r3, #18
 801a86c:	881b      	ldrh	r3, [r3, #0]
 801a86e:	83bb      	strh	r3, [r7, #28]
 801a870:	e037      	b.n	801a8e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a876:	496d      	ldr	r1, [pc, #436]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a878:	4613      	mov	r3, r2
 801a87a:	005b      	lsls	r3, r3, #1
 801a87c:	4413      	add	r3, r2
 801a87e:	00db      	lsls	r3, r3, #3
 801a880:	440b      	add	r3, r1
 801a882:	3312      	adds	r3, #18
 801a884:	881b      	ldrh	r3, [r3, #0]
 801a886:	8b7a      	ldrh	r2, [r7, #26]
 801a888:	429a      	cmp	r2, r3
 801a88a:	d82a      	bhi.n	801a8e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801a88c:	8c3b      	ldrh	r3, [r7, #32]
 801a88e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a894:	4965      	ldr	r1, [pc, #404]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a896:	4613      	mov	r3, r2
 801a898:	005b      	lsls	r3, r3, #1
 801a89a:	4413      	add	r3, r2
 801a89c:	00db      	lsls	r3, r3, #3
 801a89e:	440b      	add	r3, r1
 801a8a0:	3312      	adds	r3, #18
 801a8a2:	881b      	ldrh	r3, [r3, #0]
 801a8a4:	837b      	strh	r3, [r7, #26]
 801a8a6:	e01c      	b.n	801a8e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a8a8:	7dfb      	ldrb	r3, [r7, #23]
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d919      	bls.n	801a8e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8b2:	495e      	ldr	r1, [pc, #376]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a8b4:	4613      	mov	r3, r2
 801a8b6:	005b      	lsls	r3, r3, #1
 801a8b8:	4413      	add	r3, r2
 801a8ba:	00db      	lsls	r3, r3, #3
 801a8bc:	440b      	add	r3, r1
 801a8be:	3312      	adds	r3, #18
 801a8c0:	881b      	ldrh	r3, [r3, #0]
 801a8c2:	8b3a      	ldrh	r2, [r7, #24]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d80c      	bhi.n	801a8e2 <etharp_find_entry+0x18a>
            old_stable = i;
 801a8c8:	8c3b      	ldrh	r3, [r7, #32]
 801a8ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a8cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8d0:	4956      	ldr	r1, [pc, #344]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	4413      	add	r3, r2
 801a8d8:	00db      	lsls	r3, r3, #3
 801a8da:	440b      	add	r3, r1
 801a8dc:	3312      	adds	r3, #18
 801a8de:	881b      	ldrh	r3, [r3, #0]
 801a8e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a8e2:	8c3b      	ldrh	r3, [r7, #32]
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	843b      	strh	r3, [r7, #32]
 801a8ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a8ee:	2b09      	cmp	r3, #9
 801a8f0:	f77f af4c 	ble.w	801a78c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a8f4:	7afb      	ldrb	r3, [r7, #11]
 801a8f6:	f003 0302 	and.w	r3, r3, #2
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d108      	bne.n	801a910 <etharp_find_entry+0x1b8>
 801a8fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a902:	2b0a      	cmp	r3, #10
 801a904:	d107      	bne.n	801a916 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a906:	7afb      	ldrb	r3, [r7, #11]
 801a908:	f003 0301 	and.w	r3, r3, #1
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d102      	bne.n	801a916 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a910:	f04f 33ff 	mov.w	r3, #4294967295
 801a914:	e085      	b.n	801aa22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a916:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a91a:	2b09      	cmp	r3, #9
 801a91c:	dc02      	bgt.n	801a924 <etharp_find_entry+0x1cc>
    i = empty;
 801a91e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a920:	843b      	strh	r3, [r7, #32]
 801a922:	e039      	b.n	801a998 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a924:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a928:	2b09      	cmp	r3, #9
 801a92a:	dc14      	bgt.n	801a956 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a92c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a92e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a934:	493d      	ldr	r1, [pc, #244]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a936:	4613      	mov	r3, r2
 801a938:	005b      	lsls	r3, r3, #1
 801a93a:	4413      	add	r3, r2
 801a93c:	00db      	lsls	r3, r3, #3
 801a93e:	440b      	add	r3, r1
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d018      	beq.n	801a978 <etharp_find_entry+0x220>
 801a946:	4b3a      	ldr	r3, [pc, #232]	@ (801aa30 <etharp_find_entry+0x2d8>)
 801a948:	f240 126d 	movw	r2, #365	@ 0x16d
 801a94c:	493b      	ldr	r1, [pc, #236]	@ (801aa3c <etharp_find_entry+0x2e4>)
 801a94e:	483a      	ldr	r0, [pc, #232]	@ (801aa38 <etharp_find_entry+0x2e0>)
 801a950:	f002 ff60 	bl	801d814 <iprintf>
 801a954:	e010      	b.n	801a978 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a956:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a95a:	2b09      	cmp	r3, #9
 801a95c:	dc02      	bgt.n	801a964 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a95e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a960:	843b      	strh	r3, [r7, #32]
 801a962:	e009      	b.n	801a978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a964:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a968:	2b09      	cmp	r3, #9
 801a96a:	dc02      	bgt.n	801a972 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a96c:	8bfb      	ldrh	r3, [r7, #30]
 801a96e:	843b      	strh	r3, [r7, #32]
 801a970:	e002      	b.n	801a978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a972:	f04f 33ff 	mov.w	r3, #4294967295
 801a976:	e054      	b.n	801aa22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a978:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a97c:	2b09      	cmp	r3, #9
 801a97e:	dd06      	ble.n	801a98e <etharp_find_entry+0x236>
 801a980:	4b2b      	ldr	r3, [pc, #172]	@ (801aa30 <etharp_find_entry+0x2d8>)
 801a982:	f240 127f 	movw	r2, #383	@ 0x17f
 801a986:	492e      	ldr	r1, [pc, #184]	@ (801aa40 <etharp_find_entry+0x2e8>)
 801a988:	482b      	ldr	r0, [pc, #172]	@ (801aa38 <etharp_find_entry+0x2e0>)
 801a98a:	f002 ff43 	bl	801d814 <iprintf>
    etharp_free_entry(i);
 801a98e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a992:	4618      	mov	r0, r3
 801a994:	f7ff fe06 	bl	801a5a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a998:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a99c:	2b09      	cmp	r3, #9
 801a99e:	dd06      	ble.n	801a9ae <etharp_find_entry+0x256>
 801a9a0:	4b23      	ldr	r3, [pc, #140]	@ (801aa30 <etharp_find_entry+0x2d8>)
 801a9a2:	f240 1283 	movw	r2, #387	@ 0x183
 801a9a6:	4926      	ldr	r1, [pc, #152]	@ (801aa40 <etharp_find_entry+0x2e8>)
 801a9a8:	4823      	ldr	r0, [pc, #140]	@ (801aa38 <etharp_find_entry+0x2e0>)
 801a9aa:	f002 ff33 	bl	801d814 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a9ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9b2:	491e      	ldr	r1, [pc, #120]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a9b4:	4613      	mov	r3, r2
 801a9b6:	005b      	lsls	r3, r3, #1
 801a9b8:	4413      	add	r3, r2
 801a9ba:	00db      	lsls	r3, r3, #3
 801a9bc:	440b      	add	r3, r1
 801a9be:	3314      	adds	r3, #20
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d006      	beq.n	801a9d4 <etharp_find_entry+0x27c>
 801a9c6:	4b1a      	ldr	r3, [pc, #104]	@ (801aa30 <etharp_find_entry+0x2d8>)
 801a9c8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a9cc:	491d      	ldr	r1, [pc, #116]	@ (801aa44 <etharp_find_entry+0x2ec>)
 801a9ce:	481a      	ldr	r0, [pc, #104]	@ (801aa38 <etharp_find_entry+0x2e0>)
 801a9d0:	f002 ff20 	bl	801d814 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d00b      	beq.n	801a9f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a9da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	6819      	ldr	r1, [r3, #0]
 801a9e2:	4812      	ldr	r0, [pc, #72]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	005b      	lsls	r3, r3, #1
 801a9e8:	4413      	add	r3, r2
 801a9ea:	00db      	lsls	r3, r3, #3
 801a9ec:	4403      	add	r3, r0
 801a9ee:	3304      	adds	r3, #4
 801a9f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a9f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a9f6:	490d      	ldr	r1, [pc, #52]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	005b      	lsls	r3, r3, #1
 801a9fc:	4413      	add	r3, r2
 801a9fe:	00db      	lsls	r3, r3, #3
 801aa00:	440b      	add	r3, r1
 801aa02:	3312      	adds	r3, #18
 801aa04:	2200      	movs	r2, #0
 801aa06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aa08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa0c:	4907      	ldr	r1, [pc, #28]	@ (801aa2c <etharp_find_entry+0x2d4>)
 801aa0e:	4613      	mov	r3, r2
 801aa10:	005b      	lsls	r3, r3, #1
 801aa12:	4413      	add	r3, r2
 801aa14:	00db      	lsls	r3, r3, #3
 801aa16:	440b      	add	r3, r1
 801aa18:	3308      	adds	r3, #8
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aa1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aa22:	4618      	mov	r0, r3
 801aa24:	3728      	adds	r7, #40	@ 0x28
 801aa26:	46bd      	mov	sp, r7
 801aa28:	bd80      	pop	{r7, pc}
 801aa2a:	bf00      	nop
 801aa2c:	2400ccc8 	.word	0x2400ccc8
 801aa30:	08022544 	.word	0x08022544
 801aa34:	0802257c 	.word	0x0802257c
 801aa38:	080225bc 	.word	0x080225bc
 801aa3c:	080225e4 	.word	0x080225e4
 801aa40:	080225fc 	.word	0x080225fc
 801aa44:	08022610 	.word	0x08022610

0801aa48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b088      	sub	sp, #32
 801aa4c:	af02      	add	r7, sp, #8
 801aa4e:	60f8      	str	r0, [r7, #12]
 801aa50:	60b9      	str	r1, [r7, #8]
 801aa52:	607a      	str	r2, [r7, #4]
 801aa54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aa5c:	2b06      	cmp	r3, #6
 801aa5e:	d006      	beq.n	801aa6e <etharp_update_arp_entry+0x26>
 801aa60:	4b48      	ldr	r3, [pc, #288]	@ (801ab84 <etharp_update_arp_entry+0x13c>)
 801aa62:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801aa66:	4948      	ldr	r1, [pc, #288]	@ (801ab88 <etharp_update_arp_entry+0x140>)
 801aa68:	4848      	ldr	r0, [pc, #288]	@ (801ab8c <etharp_update_arp_entry+0x144>)
 801aa6a:	f002 fed3 	bl	801d814 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801aa6e:	68bb      	ldr	r3, [r7, #8]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d012      	beq.n	801aa9a <etharp_update_arp_entry+0x52>
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d00e      	beq.n	801aa9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	68f9      	ldr	r1, [r7, #12]
 801aa82:	4618      	mov	r0, r3
 801aa84:	f001 f946 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801aa88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d105      	bne.n	801aa9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aa96:	2be0      	cmp	r3, #224	@ 0xe0
 801aa98:	d102      	bne.n	801aaa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801aa9a:	f06f 030f 	mvn.w	r3, #15
 801aa9e:	e06c      	b.n	801ab7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801aaa0:	78fb      	ldrb	r3, [r7, #3]
 801aaa2:	68fa      	ldr	r2, [r7, #12]
 801aaa4:	4619      	mov	r1, r3
 801aaa6:	68b8      	ldr	r0, [r7, #8]
 801aaa8:	f7ff fe56 	bl	801a758 <etharp_find_entry>
 801aaac:	4603      	mov	r3, r0
 801aaae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801aab0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	da02      	bge.n	801aabe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801aab8:	8afb      	ldrh	r3, [r7, #22]
 801aaba:	b25b      	sxtb	r3, r3
 801aabc:	e05d      	b.n	801ab7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801aabe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aac2:	4933      	ldr	r1, [pc, #204]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801aac4:	4613      	mov	r3, r2
 801aac6:	005b      	lsls	r3, r3, #1
 801aac8:	4413      	add	r3, r2
 801aaca:	00db      	lsls	r3, r3, #3
 801aacc:	440b      	add	r3, r1
 801aace:	3314      	adds	r3, #20
 801aad0:	2202      	movs	r2, #2
 801aad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801aad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aad8:	492d      	ldr	r1, [pc, #180]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801aada:	4613      	mov	r3, r2
 801aadc:	005b      	lsls	r3, r3, #1
 801aade:	4413      	add	r3, r2
 801aae0:	00db      	lsls	r3, r3, #3
 801aae2:	440b      	add	r3, r1
 801aae4:	3308      	adds	r3, #8
 801aae6:	68fa      	ldr	r2, [r7, #12]
 801aae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801aaea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aaee:	4613      	mov	r3, r2
 801aaf0:	005b      	lsls	r3, r3, #1
 801aaf2:	4413      	add	r3, r2
 801aaf4:	00db      	lsls	r3, r3, #3
 801aaf6:	3308      	adds	r3, #8
 801aaf8:	4a25      	ldr	r2, [pc, #148]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801aafa:	4413      	add	r3, r2
 801aafc:	3304      	adds	r3, #4
 801aafe:	2206      	movs	r2, #6
 801ab00:	6879      	ldr	r1, [r7, #4]
 801ab02:	4618      	mov	r0, r3
 801ab04:	f003 f8fb 	bl	801dcfe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ab08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab0c:	4920      	ldr	r1, [pc, #128]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801ab0e:	4613      	mov	r3, r2
 801ab10:	005b      	lsls	r3, r3, #1
 801ab12:	4413      	add	r3, r2
 801ab14:	00db      	lsls	r3, r3, #3
 801ab16:	440b      	add	r3, r1
 801ab18:	3312      	adds	r3, #18
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ab1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab22:	491b      	ldr	r1, [pc, #108]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801ab24:	4613      	mov	r3, r2
 801ab26:	005b      	lsls	r3, r3, #1
 801ab28:	4413      	add	r3, r2
 801ab2a:	00db      	lsls	r3, r3, #3
 801ab2c:	440b      	add	r3, r1
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d021      	beq.n	801ab78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ab34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab38:	4915      	ldr	r1, [pc, #84]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801ab3a:	4613      	mov	r3, r2
 801ab3c:	005b      	lsls	r3, r3, #1
 801ab3e:	4413      	add	r3, r2
 801ab40:	00db      	lsls	r3, r3, #3
 801ab42:	440b      	add	r3, r1
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ab48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab4c:	4910      	ldr	r1, [pc, #64]	@ (801ab90 <etharp_update_arp_entry+0x148>)
 801ab4e:	4613      	mov	r3, r2
 801ab50:	005b      	lsls	r3, r3, #1
 801ab52:	4413      	add	r3, r2
 801ab54:	00db      	lsls	r3, r3, #3
 801ab56:	440b      	add	r3, r1
 801ab58:	2200      	movs	r2, #0
 801ab5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801ab62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab66:	9300      	str	r3, [sp, #0]
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	6939      	ldr	r1, [r7, #16]
 801ab6c:	68f8      	ldr	r0, [r7, #12]
 801ab6e:	f001 ffdf 	bl	801cb30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ab72:	6938      	ldr	r0, [r7, #16]
 801ab74:	f7f7 fc50 	bl	8012418 <pbuf_free>
  }
  return ERR_OK;
 801ab78:	2300      	movs	r3, #0
}
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	3718      	adds	r7, #24
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}
 801ab82:	bf00      	nop
 801ab84:	08022544 	.word	0x08022544
 801ab88:	0802263c 	.word	0x0802263c
 801ab8c:	080225bc 	.word	0x080225bc
 801ab90:	2400ccc8 	.word	0x2400ccc8

0801ab94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b084      	sub	sp, #16
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	60fb      	str	r3, [r7, #12]
 801aba0:	e01e      	b.n	801abe0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801aba2:	4913      	ldr	r1, [pc, #76]	@ (801abf0 <etharp_cleanup_netif+0x5c>)
 801aba4:	68fa      	ldr	r2, [r7, #12]
 801aba6:	4613      	mov	r3, r2
 801aba8:	005b      	lsls	r3, r3, #1
 801abaa:	4413      	add	r3, r2
 801abac:	00db      	lsls	r3, r3, #3
 801abae:	440b      	add	r3, r1
 801abb0:	3314      	adds	r3, #20
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801abb6:	7afb      	ldrb	r3, [r7, #11]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d00e      	beq.n	801abda <etharp_cleanup_netif+0x46>
 801abbc:	490c      	ldr	r1, [pc, #48]	@ (801abf0 <etharp_cleanup_netif+0x5c>)
 801abbe:	68fa      	ldr	r2, [r7, #12]
 801abc0:	4613      	mov	r3, r2
 801abc2:	005b      	lsls	r3, r3, #1
 801abc4:	4413      	add	r3, r2
 801abc6:	00db      	lsls	r3, r3, #3
 801abc8:	440b      	add	r3, r1
 801abca:	3308      	adds	r3, #8
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	687a      	ldr	r2, [r7, #4]
 801abd0:	429a      	cmp	r2, r3
 801abd2:	d102      	bne.n	801abda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801abd4:	68f8      	ldr	r0, [r7, #12]
 801abd6:	f7ff fce5 	bl	801a5a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	3301      	adds	r3, #1
 801abde:	60fb      	str	r3, [r7, #12]
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	2b09      	cmp	r3, #9
 801abe4:	dddd      	ble.n	801aba2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801abe6:	bf00      	nop
 801abe8:	bf00      	nop
 801abea:	3710      	adds	r7, #16
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}
 801abf0:	2400ccc8 	.word	0x2400ccc8

0801abf4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801abf4:	b5b0      	push	{r4, r5, r7, lr}
 801abf6:	b08a      	sub	sp, #40	@ 0x28
 801abf8:	af04      	add	r7, sp, #16
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d107      	bne.n	801ac14 <etharp_input+0x20>
 801ac04:	4b3f      	ldr	r3, [pc, #252]	@ (801ad04 <etharp_input+0x110>)
 801ac06:	f240 228a 	movw	r2, #650	@ 0x28a
 801ac0a:	493f      	ldr	r1, [pc, #252]	@ (801ad08 <etharp_input+0x114>)
 801ac0c:	483f      	ldr	r0, [pc, #252]	@ (801ad0c <etharp_input+0x118>)
 801ac0e:	f002 fe01 	bl	801d814 <iprintf>
 801ac12:	e074      	b.n	801acfe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	685b      	ldr	r3, [r3, #4]
 801ac18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac1a:	693b      	ldr	r3, [r7, #16]
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ac24:	d10c      	bne.n	801ac40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac26:	693b      	ldr	r3, [r7, #16]
 801ac28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac2a:	2b06      	cmp	r3, #6
 801ac2c:	d108      	bne.n	801ac40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac32:	2b04      	cmp	r3, #4
 801ac34:	d104      	bne.n	801ac40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ac36:	693b      	ldr	r3, [r7, #16]
 801ac38:	885b      	ldrh	r3, [r3, #2]
 801ac3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ac3c:	2b08      	cmp	r3, #8
 801ac3e:	d003      	beq.n	801ac48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ac40:	6878      	ldr	r0, [r7, #4]
 801ac42:	f7f7 fbe9 	bl	8012418 <pbuf_free>
    return;
 801ac46:	e05a      	b.n	801acfe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ac48:	693b      	ldr	r3, [r7, #16]
 801ac4a:	330e      	adds	r3, #14
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ac50:	693b      	ldr	r3, [r7, #16]
 801ac52:	3318      	adds	r3, #24
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ac58:	683b      	ldr	r3, [r7, #0]
 801ac5a:	3304      	adds	r3, #4
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d102      	bne.n	801ac68 <etharp_input+0x74>
    for_us = 0;
 801ac62:	2300      	movs	r3, #0
 801ac64:	75fb      	strb	r3, [r7, #23]
 801ac66:	e009      	b.n	801ac7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ac68:	68ba      	ldr	r2, [r7, #8]
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	3304      	adds	r3, #4
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	429a      	cmp	r2, r3
 801ac72:	bf0c      	ite	eq
 801ac74:	2301      	moveq	r3, #1
 801ac76:	2300      	movne	r3, #0
 801ac78:	b2db      	uxtb	r3, r3
 801ac7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	f103 0208 	add.w	r2, r3, #8
 801ac82:	7dfb      	ldrb	r3, [r7, #23]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d001      	beq.n	801ac8c <etharp_input+0x98>
 801ac88:	2301      	movs	r3, #1
 801ac8a:	e000      	b.n	801ac8e <etharp_input+0x9a>
 801ac8c:	2302      	movs	r3, #2
 801ac8e:	f107 010c 	add.w	r1, r7, #12
 801ac92:	6838      	ldr	r0, [r7, #0]
 801ac94:	f7ff fed8 	bl	801aa48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	88db      	ldrh	r3, [r3, #6]
 801ac9c:	b29b      	uxth	r3, r3
 801ac9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aca2:	d003      	beq.n	801acac <etharp_input+0xb8>
 801aca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aca8:	d01e      	beq.n	801ace8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801acaa:	e025      	b.n	801acf8 <etharp_input+0x104>
      if (for_us) {
 801acac:	7dfb      	ldrb	r3, [r7, #23]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d021      	beq.n	801acf6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801acbe:	683b      	ldr	r3, [r7, #0]
 801acc0:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801acc8:	693a      	ldr	r2, [r7, #16]
 801acca:	3208      	adds	r2, #8
        etharp_raw(netif,
 801accc:	2102      	movs	r1, #2
 801acce:	9103      	str	r1, [sp, #12]
 801acd0:	f107 010c 	add.w	r1, r7, #12
 801acd4:	9102      	str	r1, [sp, #8]
 801acd6:	9201      	str	r2, [sp, #4]
 801acd8:	9300      	str	r3, [sp, #0]
 801acda:	462b      	mov	r3, r5
 801acdc:	4622      	mov	r2, r4
 801acde:	4601      	mov	r1, r0
 801ace0:	6838      	ldr	r0, [r7, #0]
 801ace2:	f000 faef 	bl	801b2c4 <etharp_raw>
      break;
 801ace6:	e006      	b.n	801acf6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801ace8:	f107 030c 	add.w	r3, r7, #12
 801acec:	4619      	mov	r1, r3
 801acee:	6838      	ldr	r0, [r7, #0]
 801acf0:	f7fe fa02 	bl	80190f8 <dhcp_arp_reply>
      break;
 801acf4:	e000      	b.n	801acf8 <etharp_input+0x104>
      break;
 801acf6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801acf8:	6878      	ldr	r0, [r7, #4]
 801acfa:	f7f7 fb8d 	bl	8012418 <pbuf_free>
}
 801acfe:	3718      	adds	r7, #24
 801ad00:	46bd      	mov	sp, r7
 801ad02:	bdb0      	pop	{r4, r5, r7, pc}
 801ad04:	08022544 	.word	0x08022544
 801ad08:	08022694 	.word	0x08022694
 801ad0c:	080225bc 	.word	0x080225bc

0801ad10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b086      	sub	sp, #24
 801ad14:	af02      	add	r7, sp, #8
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	4613      	mov	r3, r2
 801ad1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad1e:	79fa      	ldrb	r2, [r7, #7]
 801ad20:	4944      	ldr	r1, [pc, #272]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ad22:	4613      	mov	r3, r2
 801ad24:	005b      	lsls	r3, r3, #1
 801ad26:	4413      	add	r3, r2
 801ad28:	00db      	lsls	r3, r3, #3
 801ad2a:	440b      	add	r3, r1
 801ad2c:	3314      	adds	r3, #20
 801ad2e:	781b      	ldrb	r3, [r3, #0]
 801ad30:	2b01      	cmp	r3, #1
 801ad32:	d806      	bhi.n	801ad42 <etharp_output_to_arp_index+0x32>
 801ad34:	4b40      	ldr	r3, [pc, #256]	@ (801ae38 <etharp_output_to_arp_index+0x128>)
 801ad36:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801ad3a:	4940      	ldr	r1, [pc, #256]	@ (801ae3c <etharp_output_to_arp_index+0x12c>)
 801ad3c:	4840      	ldr	r0, [pc, #256]	@ (801ae40 <etharp_output_to_arp_index+0x130>)
 801ad3e:	f002 fd69 	bl	801d814 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ad42:	79fa      	ldrb	r2, [r7, #7]
 801ad44:	493b      	ldr	r1, [pc, #236]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ad46:	4613      	mov	r3, r2
 801ad48:	005b      	lsls	r3, r3, #1
 801ad4a:	4413      	add	r3, r2
 801ad4c:	00db      	lsls	r3, r3, #3
 801ad4e:	440b      	add	r3, r1
 801ad50:	3314      	adds	r3, #20
 801ad52:	781b      	ldrb	r3, [r3, #0]
 801ad54:	2b02      	cmp	r3, #2
 801ad56:	d153      	bne.n	801ae00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ad58:	79fa      	ldrb	r2, [r7, #7]
 801ad5a:	4936      	ldr	r1, [pc, #216]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ad5c:	4613      	mov	r3, r2
 801ad5e:	005b      	lsls	r3, r3, #1
 801ad60:	4413      	add	r3, r2
 801ad62:	00db      	lsls	r3, r3, #3
 801ad64:	440b      	add	r3, r1
 801ad66:	3312      	adds	r3, #18
 801ad68:	881b      	ldrh	r3, [r3, #0]
 801ad6a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801ad6e:	d919      	bls.n	801ada4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ad70:	79fa      	ldrb	r2, [r7, #7]
 801ad72:	4613      	mov	r3, r2
 801ad74:	005b      	lsls	r3, r3, #1
 801ad76:	4413      	add	r3, r2
 801ad78:	00db      	lsls	r3, r3, #3
 801ad7a:	4a2e      	ldr	r2, [pc, #184]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ad7c:	4413      	add	r3, r2
 801ad7e:	3304      	adds	r3, #4
 801ad80:	4619      	mov	r1, r3
 801ad82:	68f8      	ldr	r0, [r7, #12]
 801ad84:	f000 fb4c 	bl	801b420 <etharp_request>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d138      	bne.n	801ae00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ad8e:	79fa      	ldrb	r2, [r7, #7]
 801ad90:	4928      	ldr	r1, [pc, #160]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ad92:	4613      	mov	r3, r2
 801ad94:	005b      	lsls	r3, r3, #1
 801ad96:	4413      	add	r3, r2
 801ad98:	00db      	lsls	r3, r3, #3
 801ad9a:	440b      	add	r3, r1
 801ad9c:	3314      	adds	r3, #20
 801ad9e:	2203      	movs	r2, #3
 801ada0:	701a      	strb	r2, [r3, #0]
 801ada2:	e02d      	b.n	801ae00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801ada4:	79fa      	ldrb	r2, [r7, #7]
 801ada6:	4923      	ldr	r1, [pc, #140]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ada8:	4613      	mov	r3, r2
 801adaa:	005b      	lsls	r3, r3, #1
 801adac:	4413      	add	r3, r2
 801adae:	00db      	lsls	r3, r3, #3
 801adb0:	440b      	add	r3, r1
 801adb2:	3312      	adds	r3, #18
 801adb4:	881b      	ldrh	r3, [r3, #0]
 801adb6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801adba:	d321      	bcc.n	801ae00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801adbc:	79fa      	ldrb	r2, [r7, #7]
 801adbe:	4613      	mov	r3, r2
 801adc0:	005b      	lsls	r3, r3, #1
 801adc2:	4413      	add	r3, r2
 801adc4:	00db      	lsls	r3, r3, #3
 801adc6:	4a1b      	ldr	r2, [pc, #108]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801adc8:	4413      	add	r3, r2
 801adca:	1d19      	adds	r1, r3, #4
 801adcc:	79fa      	ldrb	r2, [r7, #7]
 801adce:	4613      	mov	r3, r2
 801add0:	005b      	lsls	r3, r3, #1
 801add2:	4413      	add	r3, r2
 801add4:	00db      	lsls	r3, r3, #3
 801add6:	3308      	adds	r3, #8
 801add8:	4a16      	ldr	r2, [pc, #88]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801adda:	4413      	add	r3, r2
 801addc:	3304      	adds	r3, #4
 801adde:	461a      	mov	r2, r3
 801ade0:	68f8      	ldr	r0, [r7, #12]
 801ade2:	f000 fafb 	bl	801b3dc <etharp_request_dst>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d109      	bne.n	801ae00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801adec:	79fa      	ldrb	r2, [r7, #7]
 801adee:	4911      	ldr	r1, [pc, #68]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801adf0:	4613      	mov	r3, r2
 801adf2:	005b      	lsls	r3, r3, #1
 801adf4:	4413      	add	r3, r2
 801adf6:	00db      	lsls	r3, r3, #3
 801adf8:	440b      	add	r3, r1
 801adfa:	3314      	adds	r3, #20
 801adfc:	2203      	movs	r2, #3
 801adfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801ae06:	79fa      	ldrb	r2, [r7, #7]
 801ae08:	4613      	mov	r3, r2
 801ae0a:	005b      	lsls	r3, r3, #1
 801ae0c:	4413      	add	r3, r2
 801ae0e:	00db      	lsls	r3, r3, #3
 801ae10:	3308      	adds	r3, #8
 801ae12:	4a08      	ldr	r2, [pc, #32]	@ (801ae34 <etharp_output_to_arp_index+0x124>)
 801ae14:	4413      	add	r3, r2
 801ae16:	3304      	adds	r3, #4
 801ae18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae1c:	9200      	str	r2, [sp, #0]
 801ae1e:	460a      	mov	r2, r1
 801ae20:	68b9      	ldr	r1, [r7, #8]
 801ae22:	68f8      	ldr	r0, [r7, #12]
 801ae24:	f001 fe84 	bl	801cb30 <ethernet_output>
 801ae28:	4603      	mov	r3, r0
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	3710      	adds	r7, #16
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}
 801ae32:	bf00      	nop
 801ae34:	2400ccc8 	.word	0x2400ccc8
 801ae38:	08022544 	.word	0x08022544
 801ae3c:	080226b4 	.word	0x080226b4
 801ae40:	080225bc 	.word	0x080225bc

0801ae44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b08a      	sub	sp, #40	@ 0x28
 801ae48:	af02      	add	r7, sp, #8
 801ae4a:	60f8      	str	r0, [r7, #12]
 801ae4c:	60b9      	str	r1, [r7, #8]
 801ae4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d106      	bne.n	801ae68 <etharp_output+0x24>
 801ae5a:	4b73      	ldr	r3, [pc, #460]	@ (801b028 <etharp_output+0x1e4>)
 801ae5c:	f240 321e 	movw	r2, #798	@ 0x31e
 801ae60:	4972      	ldr	r1, [pc, #456]	@ (801b02c <etharp_output+0x1e8>)
 801ae62:	4873      	ldr	r0, [pc, #460]	@ (801b030 <etharp_output+0x1ec>)
 801ae64:	f002 fcd6 	bl	801d814 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ae68:	68bb      	ldr	r3, [r7, #8]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d106      	bne.n	801ae7c <etharp_output+0x38>
 801ae6e:	4b6e      	ldr	r3, [pc, #440]	@ (801b028 <etharp_output+0x1e4>)
 801ae70:	f240 321f 	movw	r2, #799	@ 0x31f
 801ae74:	496f      	ldr	r1, [pc, #444]	@ (801b034 <etharp_output+0x1f0>)
 801ae76:	486e      	ldr	r0, [pc, #440]	@ (801b030 <etharp_output+0x1ec>)
 801ae78:	f002 fccc 	bl	801d814 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d106      	bne.n	801ae90 <etharp_output+0x4c>
 801ae82:	4b69      	ldr	r3, [pc, #420]	@ (801b028 <etharp_output+0x1e4>)
 801ae84:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ae88:	496b      	ldr	r1, [pc, #428]	@ (801b038 <etharp_output+0x1f4>)
 801ae8a:	4869      	ldr	r0, [pc, #420]	@ (801b030 <etharp_output+0x1ec>)
 801ae8c:	f002 fcc2 	bl	801d814 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	68f9      	ldr	r1, [r7, #12]
 801ae96:	4618      	mov	r0, r3
 801ae98:	f000 ff3c 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d002      	beq.n	801aea8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aea2:	4b66      	ldr	r3, [pc, #408]	@ (801b03c <etharp_output+0x1f8>)
 801aea4:	61fb      	str	r3, [r7, #28]
 801aea6:	e0af      	b.n	801b008 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aeb0:	2be0      	cmp	r3, #224	@ 0xe0
 801aeb2:	d118      	bne.n	801aee6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aeb4:	2301      	movs	r3, #1
 801aeb6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aebc:	235e      	movs	r3, #94	@ 0x5e
 801aebe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	3301      	adds	r3, #1
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aeca:	b2db      	uxtb	r3, r3
 801aecc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	3302      	adds	r3, #2
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	3303      	adds	r3, #3
 801aeda:	781b      	ldrb	r3, [r3, #0]
 801aedc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aede:	f107 0310 	add.w	r3, r7, #16
 801aee2:	61fb      	str	r3, [r7, #28]
 801aee4:	e090      	b.n	801b008 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681a      	ldr	r2, [r3, #0]
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	3304      	adds	r3, #4
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	405a      	eors	r2, r3
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	3308      	adds	r3, #8
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4013      	ands	r3, r2
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d012      	beq.n	801af24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801af04:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801af08:	4293      	cmp	r3, r2
 801af0a:	d00b      	beq.n	801af24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	330c      	adds	r3, #12
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d003      	beq.n	801af1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	330c      	adds	r3, #12
 801af1a:	61bb      	str	r3, [r7, #24]
 801af1c:	e002      	b.n	801af24 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801af1e:	f06f 0303 	mvn.w	r3, #3
 801af22:	e07d      	b.n	801b020 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801af24:	4b46      	ldr	r3, [pc, #280]	@ (801b040 <etharp_output+0x1fc>)
 801af26:	781b      	ldrb	r3, [r3, #0]
 801af28:	4619      	mov	r1, r3
 801af2a:	4a46      	ldr	r2, [pc, #280]	@ (801b044 <etharp_output+0x200>)
 801af2c:	460b      	mov	r3, r1
 801af2e:	005b      	lsls	r3, r3, #1
 801af30:	440b      	add	r3, r1
 801af32:	00db      	lsls	r3, r3, #3
 801af34:	4413      	add	r3, r2
 801af36:	3314      	adds	r3, #20
 801af38:	781b      	ldrb	r3, [r3, #0]
 801af3a:	2b01      	cmp	r3, #1
 801af3c:	d925      	bls.n	801af8a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801af3e:	4b40      	ldr	r3, [pc, #256]	@ (801b040 <etharp_output+0x1fc>)
 801af40:	781b      	ldrb	r3, [r3, #0]
 801af42:	4619      	mov	r1, r3
 801af44:	4a3f      	ldr	r2, [pc, #252]	@ (801b044 <etharp_output+0x200>)
 801af46:	460b      	mov	r3, r1
 801af48:	005b      	lsls	r3, r3, #1
 801af4a:	440b      	add	r3, r1
 801af4c:	00db      	lsls	r3, r3, #3
 801af4e:	4413      	add	r3, r2
 801af50:	3308      	adds	r3, #8
 801af52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801af54:	68fa      	ldr	r2, [r7, #12]
 801af56:	429a      	cmp	r2, r3
 801af58:	d117      	bne.n	801af8a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801af5a:	69bb      	ldr	r3, [r7, #24]
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	4b38      	ldr	r3, [pc, #224]	@ (801b040 <etharp_output+0x1fc>)
 801af60:	781b      	ldrb	r3, [r3, #0]
 801af62:	4618      	mov	r0, r3
 801af64:	4937      	ldr	r1, [pc, #220]	@ (801b044 <etharp_output+0x200>)
 801af66:	4603      	mov	r3, r0
 801af68:	005b      	lsls	r3, r3, #1
 801af6a:	4403      	add	r3, r0
 801af6c:	00db      	lsls	r3, r3, #3
 801af6e:	440b      	add	r3, r1
 801af70:	3304      	adds	r3, #4
 801af72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801af74:	429a      	cmp	r2, r3
 801af76:	d108      	bne.n	801af8a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801af78:	4b31      	ldr	r3, [pc, #196]	@ (801b040 <etharp_output+0x1fc>)
 801af7a:	781b      	ldrb	r3, [r3, #0]
 801af7c:	461a      	mov	r2, r3
 801af7e:	68b9      	ldr	r1, [r7, #8]
 801af80:	68f8      	ldr	r0, [r7, #12]
 801af82:	f7ff fec5 	bl	801ad10 <etharp_output_to_arp_index>
 801af86:	4603      	mov	r3, r0
 801af88:	e04a      	b.n	801b020 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801af8a:	2300      	movs	r3, #0
 801af8c:	75fb      	strb	r3, [r7, #23]
 801af8e:	e031      	b.n	801aff4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801af90:	7dfa      	ldrb	r2, [r7, #23]
 801af92:	492c      	ldr	r1, [pc, #176]	@ (801b044 <etharp_output+0x200>)
 801af94:	4613      	mov	r3, r2
 801af96:	005b      	lsls	r3, r3, #1
 801af98:	4413      	add	r3, r2
 801af9a:	00db      	lsls	r3, r3, #3
 801af9c:	440b      	add	r3, r1
 801af9e:	3314      	adds	r3, #20
 801afa0:	781b      	ldrb	r3, [r3, #0]
 801afa2:	2b01      	cmp	r3, #1
 801afa4:	d923      	bls.n	801afee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801afa6:	7dfa      	ldrb	r2, [r7, #23]
 801afa8:	4926      	ldr	r1, [pc, #152]	@ (801b044 <etharp_output+0x200>)
 801afaa:	4613      	mov	r3, r2
 801afac:	005b      	lsls	r3, r3, #1
 801afae:	4413      	add	r3, r2
 801afb0:	00db      	lsls	r3, r3, #3
 801afb2:	440b      	add	r3, r1
 801afb4:	3308      	adds	r3, #8
 801afb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801afb8:	68fa      	ldr	r2, [r7, #12]
 801afba:	429a      	cmp	r2, r3
 801afbc:	d117      	bne.n	801afee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801afbe:	69bb      	ldr	r3, [r7, #24]
 801afc0:	6819      	ldr	r1, [r3, #0]
 801afc2:	7dfa      	ldrb	r2, [r7, #23]
 801afc4:	481f      	ldr	r0, [pc, #124]	@ (801b044 <etharp_output+0x200>)
 801afc6:	4613      	mov	r3, r2
 801afc8:	005b      	lsls	r3, r3, #1
 801afca:	4413      	add	r3, r2
 801afcc:	00db      	lsls	r3, r3, #3
 801afce:	4403      	add	r3, r0
 801afd0:	3304      	adds	r3, #4
 801afd2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801afd4:	4299      	cmp	r1, r3
 801afd6:	d10a      	bne.n	801afee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801afd8:	4a19      	ldr	r2, [pc, #100]	@ (801b040 <etharp_output+0x1fc>)
 801afda:	7dfb      	ldrb	r3, [r7, #23]
 801afdc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801afde:	7dfb      	ldrb	r3, [r7, #23]
 801afe0:	461a      	mov	r2, r3
 801afe2:	68b9      	ldr	r1, [r7, #8]
 801afe4:	68f8      	ldr	r0, [r7, #12]
 801afe6:	f7ff fe93 	bl	801ad10 <etharp_output_to_arp_index>
 801afea:	4603      	mov	r3, r0
 801afec:	e018      	b.n	801b020 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801afee:	7dfb      	ldrb	r3, [r7, #23]
 801aff0:	3301      	adds	r3, #1
 801aff2:	75fb      	strb	r3, [r7, #23]
 801aff4:	7dfb      	ldrb	r3, [r7, #23]
 801aff6:	2b09      	cmp	r3, #9
 801aff8:	d9ca      	bls.n	801af90 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801affa:	68ba      	ldr	r2, [r7, #8]
 801affc:	69b9      	ldr	r1, [r7, #24]
 801affe:	68f8      	ldr	r0, [r7, #12]
 801b000:	f000 f822 	bl	801b048 <etharp_query>
 801b004:	4603      	mov	r3, r0
 801b006:	e00b      	b.n	801b020 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b00e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b012:	9300      	str	r3, [sp, #0]
 801b014:	69fb      	ldr	r3, [r7, #28]
 801b016:	68b9      	ldr	r1, [r7, #8]
 801b018:	68f8      	ldr	r0, [r7, #12]
 801b01a:	f001 fd89 	bl	801cb30 <ethernet_output>
 801b01e:	4603      	mov	r3, r0
}
 801b020:	4618      	mov	r0, r3
 801b022:	3720      	adds	r7, #32
 801b024:	46bd      	mov	sp, r7
 801b026:	bd80      	pop	{r7, pc}
 801b028:	08022544 	.word	0x08022544
 801b02c:	08022694 	.word	0x08022694
 801b030:	080225bc 	.word	0x080225bc
 801b034:	080226e4 	.word	0x080226e4
 801b038:	08022684 	.word	0x08022684
 801b03c:	08022e00 	.word	0x08022e00
 801b040:	2400cdb8 	.word	0x2400cdb8
 801b044:	2400ccc8 	.word	0x2400ccc8

0801b048 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b08c      	sub	sp, #48	@ 0x30
 801b04c:	af02      	add	r7, sp, #8
 801b04e:	60f8      	str	r0, [r7, #12]
 801b050:	60b9      	str	r1, [r7, #8]
 801b052:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	332a      	adds	r3, #42	@ 0x2a
 801b058:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b05a:	23ff      	movs	r3, #255	@ 0xff
 801b05c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b060:	2300      	movs	r3, #0
 801b062:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	68f9      	ldr	r1, [r7, #12]
 801b06a:	4618      	mov	r0, r3
 801b06c:	f000 fe52 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801b070:	4603      	mov	r3, r0
 801b072:	2b00      	cmp	r3, #0
 801b074:	d10c      	bne.n	801b090 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b076:	68bb      	ldr	r3, [r7, #8]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b07e:	2be0      	cmp	r3, #224	@ 0xe0
 801b080:	d006      	beq.n	801b090 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d003      	beq.n	801b090 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b088:	68bb      	ldr	r3, [r7, #8]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d102      	bne.n	801b096 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b090:	f06f 030f 	mvn.w	r3, #15
 801b094:	e101      	b.n	801b29a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b096:	68fa      	ldr	r2, [r7, #12]
 801b098:	2101      	movs	r1, #1
 801b09a:	68b8      	ldr	r0, [r7, #8]
 801b09c:	f7ff fb5c 	bl	801a758 <etharp_find_entry>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b0a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	da02      	bge.n	801b0b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b0ac:	8a7b      	ldrh	r3, [r7, #18]
 801b0ae:	b25b      	sxtb	r3, r3
 801b0b0:	e0f3      	b.n	801b29a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b0b2:	8a7b      	ldrh	r3, [r7, #18]
 801b0b4:	2b7e      	cmp	r3, #126	@ 0x7e
 801b0b6:	d906      	bls.n	801b0c6 <etharp_query+0x7e>
 801b0b8:	4b7a      	ldr	r3, [pc, #488]	@ (801b2a4 <etharp_query+0x25c>)
 801b0ba:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b0be:	497a      	ldr	r1, [pc, #488]	@ (801b2a8 <etharp_query+0x260>)
 801b0c0:	487a      	ldr	r0, [pc, #488]	@ (801b2ac <etharp_query+0x264>)
 801b0c2:	f002 fba7 	bl	801d814 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b0c6:	8a7b      	ldrh	r3, [r7, #18]
 801b0c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b0ca:	7c7a      	ldrb	r2, [r7, #17]
 801b0cc:	4978      	ldr	r1, [pc, #480]	@ (801b2b0 <etharp_query+0x268>)
 801b0ce:	4613      	mov	r3, r2
 801b0d0:	005b      	lsls	r3, r3, #1
 801b0d2:	4413      	add	r3, r2
 801b0d4:	00db      	lsls	r3, r3, #3
 801b0d6:	440b      	add	r3, r1
 801b0d8:	3314      	adds	r3, #20
 801b0da:	781b      	ldrb	r3, [r3, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d115      	bne.n	801b10c <etharp_query+0xc4>
    is_new_entry = 1;
 801b0e0:	2301      	movs	r3, #1
 801b0e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b0e4:	7c7a      	ldrb	r2, [r7, #17]
 801b0e6:	4972      	ldr	r1, [pc, #456]	@ (801b2b0 <etharp_query+0x268>)
 801b0e8:	4613      	mov	r3, r2
 801b0ea:	005b      	lsls	r3, r3, #1
 801b0ec:	4413      	add	r3, r2
 801b0ee:	00db      	lsls	r3, r3, #3
 801b0f0:	440b      	add	r3, r1
 801b0f2:	3314      	adds	r3, #20
 801b0f4:	2201      	movs	r2, #1
 801b0f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b0f8:	7c7a      	ldrb	r2, [r7, #17]
 801b0fa:	496d      	ldr	r1, [pc, #436]	@ (801b2b0 <etharp_query+0x268>)
 801b0fc:	4613      	mov	r3, r2
 801b0fe:	005b      	lsls	r3, r3, #1
 801b100:	4413      	add	r3, r2
 801b102:	00db      	lsls	r3, r3, #3
 801b104:	440b      	add	r3, r1
 801b106:	3308      	adds	r3, #8
 801b108:	68fa      	ldr	r2, [r7, #12]
 801b10a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b10c:	7c7a      	ldrb	r2, [r7, #17]
 801b10e:	4968      	ldr	r1, [pc, #416]	@ (801b2b0 <etharp_query+0x268>)
 801b110:	4613      	mov	r3, r2
 801b112:	005b      	lsls	r3, r3, #1
 801b114:	4413      	add	r3, r2
 801b116:	00db      	lsls	r3, r3, #3
 801b118:	440b      	add	r3, r1
 801b11a:	3314      	adds	r3, #20
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	2b01      	cmp	r3, #1
 801b120:	d011      	beq.n	801b146 <etharp_query+0xfe>
 801b122:	7c7a      	ldrb	r2, [r7, #17]
 801b124:	4962      	ldr	r1, [pc, #392]	@ (801b2b0 <etharp_query+0x268>)
 801b126:	4613      	mov	r3, r2
 801b128:	005b      	lsls	r3, r3, #1
 801b12a:	4413      	add	r3, r2
 801b12c:	00db      	lsls	r3, r3, #3
 801b12e:	440b      	add	r3, r1
 801b130:	3314      	adds	r3, #20
 801b132:	781b      	ldrb	r3, [r3, #0]
 801b134:	2b01      	cmp	r3, #1
 801b136:	d806      	bhi.n	801b146 <etharp_query+0xfe>
 801b138:	4b5a      	ldr	r3, [pc, #360]	@ (801b2a4 <etharp_query+0x25c>)
 801b13a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b13e:	495d      	ldr	r1, [pc, #372]	@ (801b2b4 <etharp_query+0x26c>)
 801b140:	485a      	ldr	r0, [pc, #360]	@ (801b2ac <etharp_query+0x264>)
 801b142:	f002 fb67 	bl	801d814 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b146:	6a3b      	ldr	r3, [r7, #32]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d102      	bne.n	801b152 <etharp_query+0x10a>
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d10c      	bne.n	801b16c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b152:	68b9      	ldr	r1, [r7, #8]
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	f000 f963 	bl	801b420 <etharp_request>
 801b15a:	4603      	mov	r3, r0
 801b15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d102      	bne.n	801b16c <etharp_query+0x124>
      return result;
 801b166:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b16a:	e096      	b.n	801b29a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d106      	bne.n	801b180 <etharp_query+0x138>
 801b172:	4b4c      	ldr	r3, [pc, #304]	@ (801b2a4 <etharp_query+0x25c>)
 801b174:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b178:	494f      	ldr	r1, [pc, #316]	@ (801b2b8 <etharp_query+0x270>)
 801b17a:	484c      	ldr	r0, [pc, #304]	@ (801b2ac <etharp_query+0x264>)
 801b17c:	f002 fb4a 	bl	801d814 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b180:	7c7a      	ldrb	r2, [r7, #17]
 801b182:	494b      	ldr	r1, [pc, #300]	@ (801b2b0 <etharp_query+0x268>)
 801b184:	4613      	mov	r3, r2
 801b186:	005b      	lsls	r3, r3, #1
 801b188:	4413      	add	r3, r2
 801b18a:	00db      	lsls	r3, r3, #3
 801b18c:	440b      	add	r3, r1
 801b18e:	3314      	adds	r3, #20
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	2b01      	cmp	r3, #1
 801b194:	d917      	bls.n	801b1c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b196:	4a49      	ldr	r2, [pc, #292]	@ (801b2bc <etharp_query+0x274>)
 801b198:	7c7b      	ldrb	r3, [r7, #17]
 801b19a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b19c:	7c7a      	ldrb	r2, [r7, #17]
 801b19e:	4613      	mov	r3, r2
 801b1a0:	005b      	lsls	r3, r3, #1
 801b1a2:	4413      	add	r3, r2
 801b1a4:	00db      	lsls	r3, r3, #3
 801b1a6:	3308      	adds	r3, #8
 801b1a8:	4a41      	ldr	r2, [pc, #260]	@ (801b2b0 <etharp_query+0x268>)
 801b1aa:	4413      	add	r3, r2
 801b1ac:	3304      	adds	r3, #4
 801b1ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b1b2:	9200      	str	r2, [sp, #0]
 801b1b4:	697a      	ldr	r2, [r7, #20]
 801b1b6:	6879      	ldr	r1, [r7, #4]
 801b1b8:	68f8      	ldr	r0, [r7, #12]
 801b1ba:	f001 fcb9 	bl	801cb30 <ethernet_output>
 801b1be:	4603      	mov	r3, r0
 801b1c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b1c4:	e067      	b.n	801b296 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b1c6:	7c7a      	ldrb	r2, [r7, #17]
 801b1c8:	4939      	ldr	r1, [pc, #228]	@ (801b2b0 <etharp_query+0x268>)
 801b1ca:	4613      	mov	r3, r2
 801b1cc:	005b      	lsls	r3, r3, #1
 801b1ce:	4413      	add	r3, r2
 801b1d0:	00db      	lsls	r3, r3, #3
 801b1d2:	440b      	add	r3, r1
 801b1d4:	3314      	adds	r3, #20
 801b1d6:	781b      	ldrb	r3, [r3, #0]
 801b1d8:	2b01      	cmp	r3, #1
 801b1da:	d15c      	bne.n	801b296 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b1dc:	2300      	movs	r3, #0
 801b1de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b1e4:	e01c      	b.n	801b220 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b1e6:	69fb      	ldr	r3, [r7, #28]
 801b1e8:	895a      	ldrh	r2, [r3, #10]
 801b1ea:	69fb      	ldr	r3, [r7, #28]
 801b1ec:	891b      	ldrh	r3, [r3, #8]
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	d10a      	bne.n	801b208 <etharp_query+0x1c0>
 801b1f2:	69fb      	ldr	r3, [r7, #28]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d006      	beq.n	801b208 <etharp_query+0x1c0>
 801b1fa:	4b2a      	ldr	r3, [pc, #168]	@ (801b2a4 <etharp_query+0x25c>)
 801b1fc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b200:	492f      	ldr	r1, [pc, #188]	@ (801b2c0 <etharp_query+0x278>)
 801b202:	482a      	ldr	r0, [pc, #168]	@ (801b2ac <etharp_query+0x264>)
 801b204:	f002 fb06 	bl	801d814 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b208:	69fb      	ldr	r3, [r7, #28]
 801b20a:	7b1b      	ldrb	r3, [r3, #12]
 801b20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b210:	2b00      	cmp	r3, #0
 801b212:	d002      	beq.n	801b21a <etharp_query+0x1d2>
        copy_needed = 1;
 801b214:	2301      	movs	r3, #1
 801b216:	61bb      	str	r3, [r7, #24]
        break;
 801b218:	e005      	b.n	801b226 <etharp_query+0x1de>
      }
      p = p->next;
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b220:	69fb      	ldr	r3, [r7, #28]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d1df      	bne.n	801b1e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b226:	69bb      	ldr	r3, [r7, #24]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d007      	beq.n	801b23c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b22c:	687a      	ldr	r2, [r7, #4]
 801b22e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b232:	200e      	movs	r0, #14
 801b234:	f7f7 fb68 	bl	8012908 <pbuf_clone>
 801b238:	61f8      	str	r0, [r7, #28]
 801b23a:	e004      	b.n	801b246 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b240:	69f8      	ldr	r0, [r7, #28]
 801b242:	f7f7 f98f 	bl	8012564 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b246:	69fb      	ldr	r3, [r7, #28]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d021      	beq.n	801b290 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b24c:	7c7a      	ldrb	r2, [r7, #17]
 801b24e:	4918      	ldr	r1, [pc, #96]	@ (801b2b0 <etharp_query+0x268>)
 801b250:	4613      	mov	r3, r2
 801b252:	005b      	lsls	r3, r3, #1
 801b254:	4413      	add	r3, r2
 801b256:	00db      	lsls	r3, r3, #3
 801b258:	440b      	add	r3, r1
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d00a      	beq.n	801b276 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b260:	7c7a      	ldrb	r2, [r7, #17]
 801b262:	4913      	ldr	r1, [pc, #76]	@ (801b2b0 <etharp_query+0x268>)
 801b264:	4613      	mov	r3, r2
 801b266:	005b      	lsls	r3, r3, #1
 801b268:	4413      	add	r3, r2
 801b26a:	00db      	lsls	r3, r3, #3
 801b26c:	440b      	add	r3, r1
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	4618      	mov	r0, r3
 801b272:	f7f7 f8d1 	bl	8012418 <pbuf_free>
      }
      arp_table[i].q = p;
 801b276:	7c7a      	ldrb	r2, [r7, #17]
 801b278:	490d      	ldr	r1, [pc, #52]	@ (801b2b0 <etharp_query+0x268>)
 801b27a:	4613      	mov	r3, r2
 801b27c:	005b      	lsls	r3, r3, #1
 801b27e:	4413      	add	r3, r2
 801b280:	00db      	lsls	r3, r3, #3
 801b282:	440b      	add	r3, r1
 801b284:	69fa      	ldr	r2, [r7, #28]
 801b286:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b288:	2300      	movs	r3, #0
 801b28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b28e:	e002      	b.n	801b296 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b290:	23ff      	movs	r3, #255	@ 0xff
 801b292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b296:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3728      	adds	r7, #40	@ 0x28
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	08022544 	.word	0x08022544
 801b2a8:	080226f0 	.word	0x080226f0
 801b2ac:	080225bc 	.word	0x080225bc
 801b2b0:	2400ccc8 	.word	0x2400ccc8
 801b2b4:	08022700 	.word	0x08022700
 801b2b8:	080226e4 	.word	0x080226e4
 801b2bc:	2400cdb8 	.word	0x2400cdb8
 801b2c0:	08022728 	.word	0x08022728

0801b2c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b08a      	sub	sp, #40	@ 0x28
 801b2c8:	af02      	add	r7, sp, #8
 801b2ca:	60f8      	str	r0, [r7, #12]
 801b2cc:	60b9      	str	r1, [r7, #8]
 801b2ce:	607a      	str	r2, [r7, #4]
 801b2d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d106      	bne.n	801b2ea <etharp_raw+0x26>
 801b2dc:	4b3a      	ldr	r3, [pc, #232]	@ (801b3c8 <etharp_raw+0x104>)
 801b2de:	f240 4257 	movw	r2, #1111	@ 0x457
 801b2e2:	493a      	ldr	r1, [pc, #232]	@ (801b3cc <etharp_raw+0x108>)
 801b2e4:	483a      	ldr	r0, [pc, #232]	@ (801b3d0 <etharp_raw+0x10c>)
 801b2e6:	f002 fa95 	bl	801d814 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b2ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b2ee:	211c      	movs	r1, #28
 801b2f0:	200e      	movs	r0, #14
 801b2f2:	f7f6 fdad 	bl	8011e50 <pbuf_alloc>
 801b2f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b2f8:	69bb      	ldr	r3, [r7, #24]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d102      	bne.n	801b304 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b302:	e05d      	b.n	801b3c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b304:	69bb      	ldr	r3, [r7, #24]
 801b306:	895b      	ldrh	r3, [r3, #10]
 801b308:	2b1b      	cmp	r3, #27
 801b30a:	d806      	bhi.n	801b31a <etharp_raw+0x56>
 801b30c:	4b2e      	ldr	r3, [pc, #184]	@ (801b3c8 <etharp_raw+0x104>)
 801b30e:	f240 4262 	movw	r2, #1122	@ 0x462
 801b312:	4930      	ldr	r1, [pc, #192]	@ (801b3d4 <etharp_raw+0x110>)
 801b314:	482e      	ldr	r0, [pc, #184]	@ (801b3d0 <etharp_raw+0x10c>)
 801b316:	f002 fa7d 	bl	801d814 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b31a:	69bb      	ldr	r3, [r7, #24]
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b322:	4618      	mov	r0, r3
 801b324:	f7f5 fbc2 	bl	8010aac <lwip_htons>
 801b328:	4603      	mov	r3, r0
 801b32a:	461a      	mov	r2, r3
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b336:	2b06      	cmp	r3, #6
 801b338:	d006      	beq.n	801b348 <etharp_raw+0x84>
 801b33a:	4b23      	ldr	r3, [pc, #140]	@ (801b3c8 <etharp_raw+0x104>)
 801b33c:	f240 4269 	movw	r2, #1129	@ 0x469
 801b340:	4925      	ldr	r1, [pc, #148]	@ (801b3d8 <etharp_raw+0x114>)
 801b342:	4823      	ldr	r0, [pc, #140]	@ (801b3d0 <etharp_raw+0x10c>)
 801b344:	f002 fa66 	bl	801d814 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	3308      	adds	r3, #8
 801b34c:	2206      	movs	r2, #6
 801b34e:	6839      	ldr	r1, [r7, #0]
 801b350:	4618      	mov	r0, r3
 801b352:	f002 fcd4 	bl	801dcfe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b356:	697b      	ldr	r3, [r7, #20]
 801b358:	3312      	adds	r3, #18
 801b35a:	2206      	movs	r2, #6
 801b35c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b35e:	4618      	mov	r0, r3
 801b360:	f002 fccd 	bl	801dcfe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b364:	697b      	ldr	r3, [r7, #20]
 801b366:	330e      	adds	r3, #14
 801b368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b36a:	6812      	ldr	r2, [r2, #0]
 801b36c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	3318      	adds	r3, #24
 801b372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b374:	6812      	ldr	r2, [r2, #0]
 801b376:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b378:	697b      	ldr	r3, [r7, #20]
 801b37a:	2200      	movs	r2, #0
 801b37c:	701a      	strb	r2, [r3, #0]
 801b37e:	2200      	movs	r2, #0
 801b380:	f042 0201 	orr.w	r2, r2, #1
 801b384:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	2200      	movs	r2, #0
 801b38a:	f042 0208 	orr.w	r2, r2, #8
 801b38e:	709a      	strb	r2, [r3, #2]
 801b390:	2200      	movs	r2, #0
 801b392:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	2206      	movs	r2, #6
 801b398:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	2204      	movs	r2, #4
 801b39e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b3a0:	f640 0306 	movw	r3, #2054	@ 0x806
 801b3a4:	9300      	str	r3, [sp, #0]
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	68ba      	ldr	r2, [r7, #8]
 801b3aa:	69b9      	ldr	r1, [r7, #24]
 801b3ac:	68f8      	ldr	r0, [r7, #12]
 801b3ae:	f001 fbbf 	bl	801cb30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b3b2:	69b8      	ldr	r0, [r7, #24]
 801b3b4:	f7f7 f830 	bl	8012418 <pbuf_free>
  p = NULL;
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b3bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	3720      	adds	r7, #32
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd80      	pop	{r7, pc}
 801b3c8:	08022544 	.word	0x08022544
 801b3cc:	08022694 	.word	0x08022694
 801b3d0:	080225bc 	.word	0x080225bc
 801b3d4:	08022744 	.word	0x08022744
 801b3d8:	08022778 	.word	0x08022778

0801b3dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b088      	sub	sp, #32
 801b3e0:	af04      	add	r7, sp, #16
 801b3e2:	60f8      	str	r0, [r7, #12]
 801b3e4:	60b9      	str	r1, [r7, #8]
 801b3e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b3f8:	2201      	movs	r2, #1
 801b3fa:	9203      	str	r2, [sp, #12]
 801b3fc:	68ba      	ldr	r2, [r7, #8]
 801b3fe:	9202      	str	r2, [sp, #8]
 801b400:	4a06      	ldr	r2, [pc, #24]	@ (801b41c <etharp_request_dst+0x40>)
 801b402:	9201      	str	r2, [sp, #4]
 801b404:	9300      	str	r3, [sp, #0]
 801b406:	4603      	mov	r3, r0
 801b408:	687a      	ldr	r2, [r7, #4]
 801b40a:	68f8      	ldr	r0, [r7, #12]
 801b40c:	f7ff ff5a 	bl	801b2c4 <etharp_raw>
 801b410:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b412:	4618      	mov	r0, r3
 801b414:	3710      	adds	r7, #16
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}
 801b41a:	bf00      	nop
 801b41c:	08022e08 	.word	0x08022e08

0801b420 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b082      	sub	sp, #8
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
 801b428:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b42a:	4a05      	ldr	r2, [pc, #20]	@ (801b440 <etharp_request+0x20>)
 801b42c:	6839      	ldr	r1, [r7, #0]
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	f7ff ffd4 	bl	801b3dc <etharp_request_dst>
 801b434:	4603      	mov	r3, r0
}
 801b436:	4618      	mov	r0, r3
 801b438:	3708      	adds	r7, #8
 801b43a:	46bd      	mov	sp, r7
 801b43c:	bd80      	pop	{r7, pc}
 801b43e:	bf00      	nop
 801b440:	08022e00 	.word	0x08022e00

0801b444 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b08e      	sub	sp, #56	@ 0x38
 801b448:	af04      	add	r7, sp, #16
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b44e:	4b87      	ldr	r3, [pc, #540]	@ (801b66c <icmp_input+0x228>)
 801b450:	689b      	ldr	r3, [r3, #8]
 801b452:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b456:	781b      	ldrb	r3, [r3, #0]
 801b458:	f003 030f 	and.w	r3, r3, #15
 801b45c:	b2db      	uxtb	r3, r3
 801b45e:	009b      	lsls	r3, r3, #2
 801b460:	b2db      	uxtb	r3, r3
 801b462:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b464:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b466:	2b13      	cmp	r3, #19
 801b468:	f240 80e8 	bls.w	801b63c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	895b      	ldrh	r3, [r3, #10]
 801b470:	2b03      	cmp	r3, #3
 801b472:	f240 80e5 	bls.w	801b640 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	685b      	ldr	r3, [r3, #4]
 801b47a:	781b      	ldrb	r3, [r3, #0]
 801b47c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b480:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b484:	2b00      	cmp	r3, #0
 801b486:	f000 80d2 	beq.w	801b62e <icmp_input+0x1ea>
 801b48a:	2b08      	cmp	r3, #8
 801b48c:	f040 80d2 	bne.w	801b634 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b490:	4b77      	ldr	r3, [pc, #476]	@ (801b670 <icmp_input+0x22c>)
 801b492:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b494:	4b75      	ldr	r3, [pc, #468]	@ (801b66c <icmp_input+0x228>)
 801b496:	695b      	ldr	r3, [r3, #20]
 801b498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b49c:	2be0      	cmp	r3, #224	@ 0xe0
 801b49e:	f000 80d6 	beq.w	801b64e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b4a2:	4b72      	ldr	r3, [pc, #456]	@ (801b66c <icmp_input+0x228>)
 801b4a4:	695b      	ldr	r3, [r3, #20]
 801b4a6:	4a71      	ldr	r2, [pc, #452]	@ (801b66c <icmp_input+0x228>)
 801b4a8:	6812      	ldr	r2, [r2, #0]
 801b4aa:	4611      	mov	r1, r2
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	f000 fc31 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f040 80cc 	bne.w	801b652 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	891b      	ldrh	r3, [r3, #8]
 801b4be:	2b07      	cmp	r3, #7
 801b4c0:	f240 80c0 	bls.w	801b644 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801b4c4:	6878      	ldr	r0, [r7, #4]
 801b4c6:	f7f5 fb8e 	bl	8010be6 <inet_chksum_pbuf>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d003      	beq.n	801b4d8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	f7f6 ffa1 	bl	8012418 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801b4d6:	e0c5      	b.n	801b664 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b4d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b4da:	330e      	adds	r3, #14
 801b4dc:	4619      	mov	r1, r3
 801b4de:	6878      	ldr	r0, [r7, #4]
 801b4e0:	f7f6 ff04 	bl	80122ec <pbuf_add_header>
 801b4e4:	4603      	mov	r3, r0
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d04b      	beq.n	801b582 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	891a      	ldrh	r2, [r3, #8]
 801b4ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b4f0:	4413      	add	r3, r2
 801b4f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	891b      	ldrh	r3, [r3, #8]
 801b4f8:	8b7a      	ldrh	r2, [r7, #26]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	f0c0 80ab 	bcc.w	801b656 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b500:	8b7b      	ldrh	r3, [r7, #26]
 801b502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b506:	4619      	mov	r1, r3
 801b508:	200e      	movs	r0, #14
 801b50a:	f7f6 fca1 	bl	8011e50 <pbuf_alloc>
 801b50e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	2b00      	cmp	r3, #0
 801b514:	f000 80a1 	beq.w	801b65a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	895b      	ldrh	r3, [r3, #10]
 801b51c:	461a      	mov	r2, r3
 801b51e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b520:	3308      	adds	r3, #8
 801b522:	429a      	cmp	r2, r3
 801b524:	d203      	bcs.n	801b52e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b526:	6978      	ldr	r0, [r7, #20]
 801b528:	f7f6 ff76 	bl	8012418 <pbuf_free>
          goto icmperr;
 801b52c:	e096      	b.n	801b65c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	685b      	ldr	r3, [r3, #4]
 801b532:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b536:	4618      	mov	r0, r3
 801b538:	f002 fbe1 	bl	801dcfe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b53c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b53e:	4619      	mov	r1, r3
 801b540:	6978      	ldr	r0, [r7, #20]
 801b542:	f7f6 fee3 	bl	801230c <pbuf_remove_header>
 801b546:	4603      	mov	r3, r0
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d009      	beq.n	801b560 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b54c:	4b49      	ldr	r3, [pc, #292]	@ (801b674 <icmp_input+0x230>)
 801b54e:	22b6      	movs	r2, #182	@ 0xb6
 801b550:	4949      	ldr	r1, [pc, #292]	@ (801b678 <icmp_input+0x234>)
 801b552:	484a      	ldr	r0, [pc, #296]	@ (801b67c <icmp_input+0x238>)
 801b554:	f002 f95e 	bl	801d814 <iprintf>
          pbuf_free(r);
 801b558:	6978      	ldr	r0, [r7, #20]
 801b55a:	f7f6 ff5d 	bl	8012418 <pbuf_free>
          goto icmperr;
 801b55e:	e07d      	b.n	801b65c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b560:	6879      	ldr	r1, [r7, #4]
 801b562:	6978      	ldr	r0, [r7, #20]
 801b564:	f7f7 f88c 	bl	8012680 <pbuf_copy>
 801b568:	4603      	mov	r3, r0
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d003      	beq.n	801b576 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b56e:	6978      	ldr	r0, [r7, #20]
 801b570:	f7f6 ff52 	bl	8012418 <pbuf_free>
          goto icmperr;
 801b574:	e072      	b.n	801b65c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801b576:	6878      	ldr	r0, [r7, #4]
 801b578:	f7f6 ff4e 	bl	8012418 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	607b      	str	r3, [r7, #4]
 801b580:	e00f      	b.n	801b5a2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b582:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b584:	330e      	adds	r3, #14
 801b586:	4619      	mov	r1, r3
 801b588:	6878      	ldr	r0, [r7, #4]
 801b58a:	f7f6 febf 	bl	801230c <pbuf_remove_header>
 801b58e:	4603      	mov	r3, r0
 801b590:	2b00      	cmp	r3, #0
 801b592:	d006      	beq.n	801b5a2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b594:	4b37      	ldr	r3, [pc, #220]	@ (801b674 <icmp_input+0x230>)
 801b596:	22c7      	movs	r2, #199	@ 0xc7
 801b598:	4939      	ldr	r1, [pc, #228]	@ (801b680 <icmp_input+0x23c>)
 801b59a:	4838      	ldr	r0, [pc, #224]	@ (801b67c <icmp_input+0x238>)
 801b59c:	f002 f93a 	bl	801d814 <iprintf>
          goto icmperr;
 801b5a0:	e05c      	b.n	801b65c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	685b      	ldr	r3, [r3, #4]
 801b5a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b5a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5aa:	4619      	mov	r1, r3
 801b5ac:	6878      	ldr	r0, [r7, #4]
 801b5ae:	f7f6 fe9d 	bl	80122ec <pbuf_add_header>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d13c      	bne.n	801b632 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	685b      	ldr	r3, [r3, #4]
 801b5bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b5be:	69fb      	ldr	r3, [r7, #28]
 801b5c0:	681a      	ldr	r2, [r3, #0]
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b5c6:	4b29      	ldr	r3, [pc, #164]	@ (801b66c <icmp_input+0x228>)
 801b5c8:	691a      	ldr	r2, [r3, #16]
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b5ce:	693b      	ldr	r3, [r7, #16]
 801b5d0:	2200      	movs	r2, #0
 801b5d2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b5d4:	693b      	ldr	r3, [r7, #16]
 801b5d6:	885b      	ldrh	r3, [r3, #2]
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b5de:	4293      	cmp	r3, r2
 801b5e0:	d907      	bls.n	801b5f2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	885b      	ldrh	r3, [r3, #2]
 801b5e6:	b29b      	uxth	r3, r3
 801b5e8:	3309      	adds	r3, #9
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	805a      	strh	r2, [r3, #2]
 801b5f0:	e006      	b.n	801b600 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801b5f2:	693b      	ldr	r3, [r7, #16]
 801b5f4:	885b      	ldrh	r3, [r3, #2]
 801b5f6:	b29b      	uxth	r3, r3
 801b5f8:	3308      	adds	r3, #8
 801b5fa:	b29a      	uxth	r2, r3
 801b5fc:	693b      	ldr	r3, [r7, #16]
 801b5fe:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	22ff      	movs	r2, #255	@ 0xff
 801b604:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2200      	movs	r2, #0
 801b60a:	729a      	strb	r2, [r3, #10]
 801b60c:	2200      	movs	r2, #0
 801b60e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	9302      	str	r3, [sp, #8]
 801b614:	2301      	movs	r3, #1
 801b616:	9301      	str	r3, [sp, #4]
 801b618:	2300      	movs	r3, #0
 801b61a:	9300      	str	r3, [sp, #0]
 801b61c:	23ff      	movs	r3, #255	@ 0xff
 801b61e:	2200      	movs	r2, #0
 801b620:	69f9      	ldr	r1, [r7, #28]
 801b622:	6878      	ldr	r0, [r7, #4]
 801b624:	f000 fa9e 	bl	801bb64 <ip4_output_if>
 801b628:	4603      	mov	r3, r0
 801b62a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b62c:	e001      	b.n	801b632 <icmp_input+0x1ee>
      break;
 801b62e:	bf00      	nop
 801b630:	e000      	b.n	801b634 <icmp_input+0x1f0>
      break;
 801b632:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b634:	6878      	ldr	r0, [r7, #4]
 801b636:	f7f6 feef 	bl	8012418 <pbuf_free>
  return;
 801b63a:	e013      	b.n	801b664 <icmp_input+0x220>
    goto lenerr;
 801b63c:	bf00      	nop
 801b63e:	e002      	b.n	801b646 <icmp_input+0x202>
    goto lenerr;
 801b640:	bf00      	nop
 801b642:	e000      	b.n	801b646 <icmp_input+0x202>
        goto lenerr;
 801b644:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b646:	6878      	ldr	r0, [r7, #4]
 801b648:	f7f6 fee6 	bl	8012418 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b64c:	e00a      	b.n	801b664 <icmp_input+0x220>
        goto icmperr;
 801b64e:	bf00      	nop
 801b650:	e004      	b.n	801b65c <icmp_input+0x218>
        goto icmperr;
 801b652:	bf00      	nop
 801b654:	e002      	b.n	801b65c <icmp_input+0x218>
          goto icmperr;
 801b656:	bf00      	nop
 801b658:	e000      	b.n	801b65c <icmp_input+0x218>
          goto icmperr;
 801b65a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b65c:	6878      	ldr	r0, [r7, #4]
 801b65e:	f7f6 fedb 	bl	8012418 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b662:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b664:	3728      	adds	r7, #40	@ 0x28
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}
 801b66a:	bf00      	nop
 801b66c:	24009b14 	.word	0x24009b14
 801b670:	24009b28 	.word	0x24009b28
 801b674:	080227bc 	.word	0x080227bc
 801b678:	080227f4 	.word	0x080227f4
 801b67c:	0802282c 	.word	0x0802282c
 801b680:	08022854 	.word	0x08022854

0801b684 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b684:	b580      	push	{r7, lr}
 801b686:	b082      	sub	sp, #8
 801b688:	af00      	add	r7, sp, #0
 801b68a:	6078      	str	r0, [r7, #4]
 801b68c:	460b      	mov	r3, r1
 801b68e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b690:	78fb      	ldrb	r3, [r7, #3]
 801b692:	461a      	mov	r2, r3
 801b694:	2103      	movs	r1, #3
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	f000 f814 	bl	801b6c4 <icmp_send_response>
}
 801b69c:	bf00      	nop
 801b69e:	3708      	adds	r7, #8
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd80      	pop	{r7, pc}

0801b6a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b082      	sub	sp, #8
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	460b      	mov	r3, r1
 801b6ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b6b0:	78fb      	ldrb	r3, [r7, #3]
 801b6b2:	461a      	mov	r2, r3
 801b6b4:	210b      	movs	r1, #11
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f000 f804 	bl	801b6c4 <icmp_send_response>
}
 801b6bc:	bf00      	nop
 801b6be:	3708      	adds	r7, #8
 801b6c0:	46bd      	mov	sp, r7
 801b6c2:	bd80      	pop	{r7, pc}

0801b6c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b08c      	sub	sp, #48	@ 0x30
 801b6c8:	af04      	add	r7, sp, #16
 801b6ca:	6078      	str	r0, [r7, #4]
 801b6cc:	460b      	mov	r3, r1
 801b6ce:	70fb      	strb	r3, [r7, #3]
 801b6d0:	4613      	mov	r3, r2
 801b6d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b6d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b6d8:	2124      	movs	r1, #36	@ 0x24
 801b6da:	2022      	movs	r0, #34	@ 0x22
 801b6dc:	f7f6 fbb8 	bl	8011e50 <pbuf_alloc>
 801b6e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b6e2:	69fb      	ldr	r3, [r7, #28]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d056      	beq.n	801b796 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b6e8:	69fb      	ldr	r3, [r7, #28]
 801b6ea:	895b      	ldrh	r3, [r3, #10]
 801b6ec:	2b23      	cmp	r3, #35	@ 0x23
 801b6ee:	d806      	bhi.n	801b6fe <icmp_send_response+0x3a>
 801b6f0:	4b2b      	ldr	r3, [pc, #172]	@ (801b7a0 <icmp_send_response+0xdc>)
 801b6f2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b6f6:	492b      	ldr	r1, [pc, #172]	@ (801b7a4 <icmp_send_response+0xe0>)
 801b6f8:	482b      	ldr	r0, [pc, #172]	@ (801b7a8 <icmp_send_response+0xe4>)
 801b6fa:	f002 f88b 	bl	801d814 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	685b      	ldr	r3, [r3, #4]
 801b702:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b704:	69fb      	ldr	r3, [r7, #28]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b70a:	697b      	ldr	r3, [r7, #20]
 801b70c:	78fa      	ldrb	r2, [r7, #3]
 801b70e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b710:	697b      	ldr	r3, [r7, #20]
 801b712:	78ba      	ldrb	r2, [r7, #2]
 801b714:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b716:	697b      	ldr	r3, [r7, #20]
 801b718:	2200      	movs	r2, #0
 801b71a:	711a      	strb	r2, [r3, #4]
 801b71c:	2200      	movs	r2, #0
 801b71e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	2200      	movs	r2, #0
 801b724:	719a      	strb	r2, [r3, #6]
 801b726:	2200      	movs	r2, #0
 801b728:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b72a:	69fb      	ldr	r3, [r7, #28]
 801b72c:	685b      	ldr	r3, [r3, #4]
 801b72e:	f103 0008 	add.w	r0, r3, #8
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	221c      	movs	r2, #28
 801b738:	4619      	mov	r1, r3
 801b73a:	f002 fae0 	bl	801dcfe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b73e:	69bb      	ldr	r3, [r7, #24]
 801b740:	68db      	ldr	r3, [r3, #12]
 801b742:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b744:	f107 030c 	add.w	r3, r7, #12
 801b748:	4618      	mov	r0, r3
 801b74a:	f000 f82f 	bl	801b7ac <ip4_route>
 801b74e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b750:	693b      	ldr	r3, [r7, #16]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d01b      	beq.n	801b78e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	2200      	movs	r2, #0
 801b75a:	709a      	strb	r2, [r3, #2]
 801b75c:	2200      	movs	r2, #0
 801b75e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b760:	69fb      	ldr	r3, [r7, #28]
 801b762:	895b      	ldrh	r3, [r3, #10]
 801b764:	4619      	mov	r1, r3
 801b766:	6978      	ldr	r0, [r7, #20]
 801b768:	f7f5 fa2b 	bl	8010bc2 <inet_chksum>
 801b76c:	4603      	mov	r3, r0
 801b76e:	461a      	mov	r2, r3
 801b770:	697b      	ldr	r3, [r7, #20]
 801b772:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b774:	f107 020c 	add.w	r2, r7, #12
 801b778:	693b      	ldr	r3, [r7, #16]
 801b77a:	9302      	str	r3, [sp, #8]
 801b77c:	2301      	movs	r3, #1
 801b77e:	9301      	str	r3, [sp, #4]
 801b780:	2300      	movs	r3, #0
 801b782:	9300      	str	r3, [sp, #0]
 801b784:	23ff      	movs	r3, #255	@ 0xff
 801b786:	2100      	movs	r1, #0
 801b788:	69f8      	ldr	r0, [r7, #28]
 801b78a:	f000 f9eb 	bl	801bb64 <ip4_output_if>
  }
  pbuf_free(q);
 801b78e:	69f8      	ldr	r0, [r7, #28]
 801b790:	f7f6 fe42 	bl	8012418 <pbuf_free>
 801b794:	e000      	b.n	801b798 <icmp_send_response+0xd4>
    return;
 801b796:	bf00      	nop
}
 801b798:	3720      	adds	r7, #32
 801b79a:	46bd      	mov	sp, r7
 801b79c:	bd80      	pop	{r7, pc}
 801b79e:	bf00      	nop
 801b7a0:	080227bc 	.word	0x080227bc
 801b7a4:	08022888 	.word	0x08022888
 801b7a8:	0802282c 	.word	0x0802282c

0801b7ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b7ac:	b480      	push	{r7}
 801b7ae:	b085      	sub	sp, #20
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b7b4:	4b33      	ldr	r3, [pc, #204]	@ (801b884 <ip4_route+0xd8>)
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	60fb      	str	r3, [r7, #12]
 801b7ba:	e036      	b.n	801b82a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7c2:	f003 0301 	and.w	r3, r3, #1
 801b7c6:	b2db      	uxtb	r3, r3
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d02b      	beq.n	801b824 <ip4_route+0x78>
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7d2:	089b      	lsrs	r3, r3, #2
 801b7d4:	f003 0301 	and.w	r3, r3, #1
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d022      	beq.n	801b824 <ip4_route+0x78>
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	3304      	adds	r3, #4
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d01d      	beq.n	801b824 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	681a      	ldr	r2, [r3, #0]
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	3304      	adds	r3, #4
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	405a      	eors	r2, r3
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	3308      	adds	r3, #8
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	4013      	ands	r3, r2
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d101      	bne.n	801b804 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	e038      	b.n	801b876 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b80a:	f003 0302 	and.w	r3, r3, #2
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d108      	bne.n	801b824 <ip4_route+0x78>
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681a      	ldr	r2, [r3, #0]
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	330c      	adds	r3, #12
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d101      	bne.n	801b824 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	e028      	b.n	801b876 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	60fb      	str	r3, [r7, #12]
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d1c5      	bne.n	801b7bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b830:	4b15      	ldr	r3, [pc, #84]	@ (801b888 <ip4_route+0xdc>)
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d01a      	beq.n	801b86e <ip4_route+0xc2>
 801b838:	4b13      	ldr	r3, [pc, #76]	@ (801b888 <ip4_route+0xdc>)
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b840:	f003 0301 	and.w	r3, r3, #1
 801b844:	2b00      	cmp	r3, #0
 801b846:	d012      	beq.n	801b86e <ip4_route+0xc2>
 801b848:	4b0f      	ldr	r3, [pc, #60]	@ (801b888 <ip4_route+0xdc>)
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b850:	f003 0304 	and.w	r3, r3, #4
 801b854:	2b00      	cmp	r3, #0
 801b856:	d00a      	beq.n	801b86e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b858:	4b0b      	ldr	r3, [pc, #44]	@ (801b888 <ip4_route+0xdc>)
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	3304      	adds	r3, #4
 801b85e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b860:	2b00      	cmp	r3, #0
 801b862:	d004      	beq.n	801b86e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	2b7f      	cmp	r3, #127	@ 0x7f
 801b86c:	d101      	bne.n	801b872 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b86e:	2300      	movs	r3, #0
 801b870:	e001      	b.n	801b876 <ip4_route+0xca>
  }

  return netif_default;
 801b872:	4b05      	ldr	r3, [pc, #20]	@ (801b888 <ip4_route+0xdc>)
 801b874:	681b      	ldr	r3, [r3, #0]
}
 801b876:	4618      	mov	r0, r3
 801b878:	3714      	adds	r7, #20
 801b87a:	46bd      	mov	sp, r7
 801b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b880:	4770      	bx	lr
 801b882:	bf00      	nop
 801b884:	2400cc28 	.word	0x2400cc28
 801b888:	2400cc2c 	.word	0x2400cc2c

0801b88c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b082      	sub	sp, #8
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b89a:	f003 0301 	and.w	r3, r3, #1
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d016      	beq.n	801b8d2 <ip4_input_accept+0x46>
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	3304      	adds	r3, #4
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d011      	beq.n	801b8d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8ae:	4b0b      	ldr	r3, [pc, #44]	@ (801b8dc <ip4_input_accept+0x50>)
 801b8b0:	695a      	ldr	r2, [r3, #20]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	3304      	adds	r3, #4
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	429a      	cmp	r2, r3
 801b8ba:	d008      	beq.n	801b8ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b8bc:	4b07      	ldr	r3, [pc, #28]	@ (801b8dc <ip4_input_accept+0x50>)
 801b8be:	695b      	ldr	r3, [r3, #20]
 801b8c0:	6879      	ldr	r1, [r7, #4]
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	f000 fa26 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801b8c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d001      	beq.n	801b8d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	e000      	b.n	801b8d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b8d2:	2300      	movs	r3, #0
}
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	3708      	adds	r7, #8
 801b8d8:	46bd      	mov	sp, r7
 801b8da:	bd80      	pop	{r7, pc}
 801b8dc:	24009b14 	.word	0x24009b14

0801b8e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b088      	sub	sp, #32
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
 801b8e8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b8ea:	2301      	movs	r3, #1
 801b8ec:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	685b      	ldr	r3, [r3, #4]
 801b8f2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b8f4:	69fb      	ldr	r3, [r7, #28]
 801b8f6:	781b      	ldrb	r3, [r3, #0]
 801b8f8:	091b      	lsrs	r3, r3, #4
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	2b04      	cmp	r3, #4
 801b8fe:	d004      	beq.n	801b90a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f7f6 fd89 	bl	8012418 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b906:	2300      	movs	r3, #0
 801b908:	e123      	b.n	801bb52 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	f003 030f 	and.w	r3, r3, #15
 801b912:	b2db      	uxtb	r3, r3
 801b914:	009b      	lsls	r3, r3, #2
 801b916:	b2db      	uxtb	r3, r3
 801b918:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b91a:	69fb      	ldr	r3, [r7, #28]
 801b91c:	885b      	ldrh	r3, [r3, #2]
 801b91e:	b29b      	uxth	r3, r3
 801b920:	4618      	mov	r0, r3
 801b922:	f7f5 f8c3 	bl	8010aac <lwip_htons>
 801b926:	4603      	mov	r3, r0
 801b928:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	891b      	ldrh	r3, [r3, #8]
 801b92e:	8a3a      	ldrh	r2, [r7, #16]
 801b930:	429a      	cmp	r2, r3
 801b932:	d204      	bcs.n	801b93e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b934:	8a3b      	ldrh	r3, [r7, #16]
 801b936:	4619      	mov	r1, r3
 801b938:	6878      	ldr	r0, [r7, #4]
 801b93a:	f7f6 fbe7 	bl	801210c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	895b      	ldrh	r3, [r3, #10]
 801b942:	8a7a      	ldrh	r2, [r7, #18]
 801b944:	429a      	cmp	r2, r3
 801b946:	d807      	bhi.n	801b958 <ip4_input+0x78>
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	891b      	ldrh	r3, [r3, #8]
 801b94c:	8a3a      	ldrh	r2, [r7, #16]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d802      	bhi.n	801b958 <ip4_input+0x78>
 801b952:	8a7b      	ldrh	r3, [r7, #18]
 801b954:	2b13      	cmp	r3, #19
 801b956:	d804      	bhi.n	801b962 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f7f6 fd5d 	bl	8012418 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b95e:	2300      	movs	r3, #0
 801b960:	e0f7      	b.n	801bb52 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b962:	69fb      	ldr	r3, [r7, #28]
 801b964:	691b      	ldr	r3, [r3, #16]
 801b966:	4a7d      	ldr	r2, [pc, #500]	@ (801bb5c <ip4_input+0x27c>)
 801b968:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b96a:	69fb      	ldr	r3, [r7, #28]
 801b96c:	68db      	ldr	r3, [r3, #12]
 801b96e:	4a7b      	ldr	r2, [pc, #492]	@ (801bb5c <ip4_input+0x27c>)
 801b970:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b972:	4b7a      	ldr	r3, [pc, #488]	@ (801bb5c <ip4_input+0x27c>)
 801b974:	695b      	ldr	r3, [r3, #20]
 801b976:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b97a:	2be0      	cmp	r3, #224	@ 0xe0
 801b97c:	d112      	bne.n	801b9a4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b984:	f003 0301 	and.w	r3, r3, #1
 801b988:	b2db      	uxtb	r3, r3
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d007      	beq.n	801b99e <ip4_input+0xbe>
 801b98e:	683b      	ldr	r3, [r7, #0]
 801b990:	3304      	adds	r3, #4
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d002      	beq.n	801b99e <ip4_input+0xbe>
      netif = inp;
 801b998:	683b      	ldr	r3, [r7, #0]
 801b99a:	61bb      	str	r3, [r7, #24]
 801b99c:	e02a      	b.n	801b9f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b99e:	2300      	movs	r3, #0
 801b9a0:	61bb      	str	r3, [r7, #24]
 801b9a2:	e027      	b.n	801b9f4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b9a4:	6838      	ldr	r0, [r7, #0]
 801b9a6:	f7ff ff71 	bl	801b88c <ip4_input_accept>
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d002      	beq.n	801b9b6 <ip4_input+0xd6>
      netif = inp;
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	61bb      	str	r3, [r7, #24]
 801b9b4:	e01e      	b.n	801b9f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b9ba:	4b68      	ldr	r3, [pc, #416]	@ (801bb5c <ip4_input+0x27c>)
 801b9bc:	695b      	ldr	r3, [r3, #20]
 801b9be:	b2db      	uxtb	r3, r3
 801b9c0:	2b7f      	cmp	r3, #127	@ 0x7f
 801b9c2:	d017      	beq.n	801b9f4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b9c4:	4b66      	ldr	r3, [pc, #408]	@ (801bb60 <ip4_input+0x280>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	61bb      	str	r3, [r7, #24]
 801b9ca:	e00e      	b.n	801b9ea <ip4_input+0x10a>
          if (netif == inp) {
 801b9cc:	69ba      	ldr	r2, [r7, #24]
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d006      	beq.n	801b9e2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b9d4:	69b8      	ldr	r0, [r7, #24]
 801b9d6:	f7ff ff59 	bl	801b88c <ip4_input_accept>
 801b9da:	4603      	mov	r3, r0
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d108      	bne.n	801b9f2 <ip4_input+0x112>
 801b9e0:	e000      	b.n	801b9e4 <ip4_input+0x104>
            continue;
 801b9e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b9e4:	69bb      	ldr	r3, [r7, #24]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	61bb      	str	r3, [r7, #24]
 801b9ea:	69bb      	ldr	r3, [r7, #24]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d1ed      	bne.n	801b9cc <ip4_input+0xec>
 801b9f0:	e000      	b.n	801b9f4 <ip4_input+0x114>
            break;
 801b9f2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b9f4:	69bb      	ldr	r3, [r7, #24]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d111      	bne.n	801ba1e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	7a5b      	ldrb	r3, [r3, #9]
 801b9fe:	2b11      	cmp	r3, #17
 801ba00:	d10d      	bne.n	801ba1e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ba02:	8a7b      	ldrh	r3, [r7, #18]
 801ba04:	69fa      	ldr	r2, [r7, #28]
 801ba06:	4413      	add	r3, r2
 801ba08:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	885b      	ldrh	r3, [r3, #2]
 801ba0e:	b29b      	uxth	r3, r3
 801ba10:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801ba14:	d103      	bne.n	801ba1e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d017      	beq.n	801ba54 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ba24:	4b4d      	ldr	r3, [pc, #308]	@ (801bb5c <ip4_input+0x27c>)
 801ba26:	691b      	ldr	r3, [r3, #16]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d013      	beq.n	801ba54 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba2c:	4b4b      	ldr	r3, [pc, #300]	@ (801bb5c <ip4_input+0x27c>)
 801ba2e:	691b      	ldr	r3, [r3, #16]
 801ba30:	6839      	ldr	r1, [r7, #0]
 801ba32:	4618      	mov	r0, r3
 801ba34:	f000 f96e 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801ba38:	4603      	mov	r3, r0
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d105      	bne.n	801ba4a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ba3e:	4b47      	ldr	r3, [pc, #284]	@ (801bb5c <ip4_input+0x27c>)
 801ba40:	691b      	ldr	r3, [r3, #16]
 801ba42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba46:	2be0      	cmp	r3, #224	@ 0xe0
 801ba48:	d104      	bne.n	801ba54 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ba4a:	6878      	ldr	r0, [r7, #4]
 801ba4c:	f7f6 fce4 	bl	8012418 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ba50:	2300      	movs	r3, #0
 801ba52:	e07e      	b.n	801bb52 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ba54:	69bb      	ldr	r3, [r7, #24]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d104      	bne.n	801ba64 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ba5a:	6878      	ldr	r0, [r7, #4]
 801ba5c:	f7f6 fcdc 	bl	8012418 <pbuf_free>
    return ERR_OK;
 801ba60:	2300      	movs	r3, #0
 801ba62:	e076      	b.n	801bb52 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ba64:	69fb      	ldr	r3, [r7, #28]
 801ba66:	88db      	ldrh	r3, [r3, #6]
 801ba68:	b29b      	uxth	r3, r3
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801ba70:	4013      	ands	r3, r2
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d00b      	beq.n	801ba8e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ba76:	6878      	ldr	r0, [r7, #4]
 801ba78:	f000 fc92 	bl	801c3a0 <ip4_reass>
 801ba7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d101      	bne.n	801ba88 <ip4_input+0x1a8>
      return ERR_OK;
 801ba84:	2300      	movs	r3, #0
 801ba86:	e064      	b.n	801bb52 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	685b      	ldr	r3, [r3, #4]
 801ba8c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ba8e:	4a33      	ldr	r2, [pc, #204]	@ (801bb5c <ip4_input+0x27c>)
 801ba90:	69bb      	ldr	r3, [r7, #24]
 801ba92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ba94:	4a31      	ldr	r2, [pc, #196]	@ (801bb5c <ip4_input+0x27c>)
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ba9a:	4a30      	ldr	r2, [pc, #192]	@ (801bb5c <ip4_input+0x27c>)
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801baa0:	69fb      	ldr	r3, [r7, #28]
 801baa2:	781b      	ldrb	r3, [r3, #0]
 801baa4:	f003 030f 	and.w	r3, r3, #15
 801baa8:	b2db      	uxtb	r3, r3
 801baaa:	009b      	lsls	r3, r3, #2
 801baac:	b2db      	uxtb	r3, r3
 801baae:	461a      	mov	r2, r3
 801bab0:	4b2a      	ldr	r3, [pc, #168]	@ (801bb5c <ip4_input+0x27c>)
 801bab2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bab4:	8a7b      	ldrh	r3, [r7, #18]
 801bab6:	4619      	mov	r1, r3
 801bab8:	6878      	ldr	r0, [r7, #4]
 801baba:	f7f6 fc27 	bl	801230c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	7a5b      	ldrb	r3, [r3, #9]
 801bac2:	2b11      	cmp	r3, #17
 801bac4:	d006      	beq.n	801bad4 <ip4_input+0x1f4>
 801bac6:	2b11      	cmp	r3, #17
 801bac8:	dc13      	bgt.n	801baf2 <ip4_input+0x212>
 801baca:	2b01      	cmp	r3, #1
 801bacc:	d00c      	beq.n	801bae8 <ip4_input+0x208>
 801bace:	2b06      	cmp	r3, #6
 801bad0:	d005      	beq.n	801bade <ip4_input+0x1fe>
 801bad2:	e00e      	b.n	801baf2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bad4:	6839      	ldr	r1, [r7, #0]
 801bad6:	6878      	ldr	r0, [r7, #4]
 801bad8:	f7fc fac8 	bl	801806c <udp_input>
        break;
 801badc:	e026      	b.n	801bb2c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bade:	6839      	ldr	r1, [r7, #0]
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f7f8 fadf 	bl	80140a4 <tcp_input>
        break;
 801bae6:	e021      	b.n	801bb2c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bae8:	6839      	ldr	r1, [r7, #0]
 801baea:	6878      	ldr	r0, [r7, #4]
 801baec:	f7ff fcaa 	bl	801b444 <icmp_input>
        break;
 801baf0:	e01c      	b.n	801bb2c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801baf2:	4b1a      	ldr	r3, [pc, #104]	@ (801bb5c <ip4_input+0x27c>)
 801baf4:	695b      	ldr	r3, [r3, #20]
 801baf6:	69b9      	ldr	r1, [r7, #24]
 801baf8:	4618      	mov	r0, r3
 801bafa:	f000 f90b 	bl	801bd14 <ip4_addr_isbroadcast_u32>
 801bafe:	4603      	mov	r3, r0
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d10f      	bne.n	801bb24 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bb04:	4b15      	ldr	r3, [pc, #84]	@ (801bb5c <ip4_input+0x27c>)
 801bb06:	695b      	ldr	r3, [r3, #20]
 801bb08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bb0c:	2be0      	cmp	r3, #224	@ 0xe0
 801bb0e:	d009      	beq.n	801bb24 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bb10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bb14:	4619      	mov	r1, r3
 801bb16:	6878      	ldr	r0, [r7, #4]
 801bb18:	f7f6 fc6b 	bl	80123f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bb1c:	2102      	movs	r1, #2
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	f7ff fdb0 	bl	801b684 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bb24:	6878      	ldr	r0, [r7, #4]
 801bb26:	f7f6 fc77 	bl	8012418 <pbuf_free>
        break;
 801bb2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bb2c:	4b0b      	ldr	r3, [pc, #44]	@ (801bb5c <ip4_input+0x27c>)
 801bb2e:	2200      	movs	r2, #0
 801bb30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bb32:	4b0a      	ldr	r3, [pc, #40]	@ (801bb5c <ip4_input+0x27c>)
 801bb34:	2200      	movs	r2, #0
 801bb36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bb38:	4b08      	ldr	r3, [pc, #32]	@ (801bb5c <ip4_input+0x27c>)
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bb3e:	4b07      	ldr	r3, [pc, #28]	@ (801bb5c <ip4_input+0x27c>)
 801bb40:	2200      	movs	r2, #0
 801bb42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bb44:	4b05      	ldr	r3, [pc, #20]	@ (801bb5c <ip4_input+0x27c>)
 801bb46:	2200      	movs	r2, #0
 801bb48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bb4a:	4b04      	ldr	r3, [pc, #16]	@ (801bb5c <ip4_input+0x27c>)
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bb50:	2300      	movs	r3, #0
}
 801bb52:	4618      	mov	r0, r3
 801bb54:	3720      	adds	r7, #32
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd80      	pop	{r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	24009b14 	.word	0x24009b14
 801bb60:	2400cc28 	.word	0x2400cc28

0801bb64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b08a      	sub	sp, #40	@ 0x28
 801bb68:	af04      	add	r7, sp, #16
 801bb6a:	60f8      	str	r0, [r7, #12]
 801bb6c:	60b9      	str	r1, [r7, #8]
 801bb6e:	607a      	str	r2, [r7, #4]
 801bb70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d009      	beq.n	801bb90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d003      	beq.n	801bb8a <ip4_output_if+0x26>
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d102      	bne.n	801bb90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb8c:	3304      	adds	r3, #4
 801bb8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bb90:	78fa      	ldrb	r2, [r7, #3]
 801bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb94:	9302      	str	r3, [sp, #8]
 801bb96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bb9a:	9301      	str	r3, [sp, #4]
 801bb9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bba0:	9300      	str	r3, [sp, #0]
 801bba2:	4613      	mov	r3, r2
 801bba4:	687a      	ldr	r2, [r7, #4]
 801bba6:	6979      	ldr	r1, [r7, #20]
 801bba8:	68f8      	ldr	r0, [r7, #12]
 801bbaa:	f000 f805 	bl	801bbb8 <ip4_output_if_src>
 801bbae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	3718      	adds	r7, #24
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	bd80      	pop	{r7, pc}

0801bbb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801bbb8:	b580      	push	{r7, lr}
 801bbba:	b088      	sub	sp, #32
 801bbbc:	af00      	add	r7, sp, #0
 801bbbe:	60f8      	str	r0, [r7, #12]
 801bbc0:	60b9      	str	r1, [r7, #8]
 801bbc2:	607a      	str	r2, [r7, #4]
 801bbc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	7b9b      	ldrb	r3, [r3, #14]
 801bbca:	2b01      	cmp	r3, #1
 801bbcc:	d006      	beq.n	801bbdc <ip4_output_if_src+0x24>
 801bbce:	4b4b      	ldr	r3, [pc, #300]	@ (801bcfc <ip4_output_if_src+0x144>)
 801bbd0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801bbd4:	494a      	ldr	r1, [pc, #296]	@ (801bd00 <ip4_output_if_src+0x148>)
 801bbd6:	484b      	ldr	r0, [pc, #300]	@ (801bd04 <ip4_output_if_src+0x14c>)
 801bbd8:	f001 fe1c 	bl	801d814 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d060      	beq.n	801bca4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801bbe2:	2314      	movs	r3, #20
 801bbe4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801bbe6:	2114      	movs	r1, #20
 801bbe8:	68f8      	ldr	r0, [r7, #12]
 801bbea:	f7f6 fb7f 	bl	80122ec <pbuf_add_header>
 801bbee:	4603      	mov	r3, r0
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	d002      	beq.n	801bbfa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bbf4:	f06f 0301 	mvn.w	r3, #1
 801bbf8:	e07c      	b.n	801bcf4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	685b      	ldr	r3, [r3, #4]
 801bbfe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	895b      	ldrh	r3, [r3, #10]
 801bc04:	2b13      	cmp	r3, #19
 801bc06:	d806      	bhi.n	801bc16 <ip4_output_if_src+0x5e>
 801bc08:	4b3c      	ldr	r3, [pc, #240]	@ (801bcfc <ip4_output_if_src+0x144>)
 801bc0a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bc0e:	493e      	ldr	r1, [pc, #248]	@ (801bd08 <ip4_output_if_src+0x150>)
 801bc10:	483c      	ldr	r0, [pc, #240]	@ (801bd04 <ip4_output_if_src+0x14c>)
 801bc12:	f001 fdff 	bl	801d814 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bc16:	69fb      	ldr	r3, [r7, #28]
 801bc18:	78fa      	ldrb	r2, [r7, #3]
 801bc1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801bc1c:	69fb      	ldr	r3, [r7, #28]
 801bc1e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bc22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681a      	ldr	r2, [r3, #0]
 801bc28:	69fb      	ldr	r3, [r7, #28]
 801bc2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bc2c:	8b7b      	ldrh	r3, [r7, #26]
 801bc2e:	089b      	lsrs	r3, r3, #2
 801bc30:	b29b      	uxth	r3, r3
 801bc32:	b2db      	uxtb	r3, r3
 801bc34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc38:	b2da      	uxtb	r2, r3
 801bc3a:	69fb      	ldr	r3, [r7, #28]
 801bc3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801bc3e:	69fb      	ldr	r3, [r7, #28]
 801bc40:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bc44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	891b      	ldrh	r3, [r3, #8]
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f7f4 ff2e 	bl	8010aac <lwip_htons>
 801bc50:	4603      	mov	r3, r0
 801bc52:	461a      	mov	r2, r3
 801bc54:	69fb      	ldr	r3, [r7, #28]
 801bc56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bc58:	69fb      	ldr	r3, [r7, #28]
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	719a      	strb	r2, [r3, #6]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bc62:	4b2a      	ldr	r3, [pc, #168]	@ (801bd0c <ip4_output_if_src+0x154>)
 801bc64:	881b      	ldrh	r3, [r3, #0]
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7f4 ff20 	bl	8010aac <lwip_htons>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	461a      	mov	r2, r3
 801bc70:	69fb      	ldr	r3, [r7, #28]
 801bc72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bc74:	4b25      	ldr	r3, [pc, #148]	@ (801bd0c <ip4_output_if_src+0x154>)
 801bc76:	881b      	ldrh	r3, [r3, #0]
 801bc78:	3301      	adds	r3, #1
 801bc7a:	b29a      	uxth	r2, r3
 801bc7c:	4b23      	ldr	r3, [pc, #140]	@ (801bd0c <ip4_output_if_src+0x154>)
 801bc7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bc80:	68bb      	ldr	r3, [r7, #8]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d104      	bne.n	801bc90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bc86:	4b22      	ldr	r3, [pc, #136]	@ (801bd10 <ip4_output_if_src+0x158>)
 801bc88:	681a      	ldr	r2, [r3, #0]
 801bc8a:	69fb      	ldr	r3, [r7, #28]
 801bc8c:	60da      	str	r2, [r3, #12]
 801bc8e:	e003      	b.n	801bc98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	681a      	ldr	r2, [r3, #0]
 801bc94:	69fb      	ldr	r3, [r7, #28]
 801bc96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bc98:	69fb      	ldr	r3, [r7, #28]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	729a      	strb	r2, [r3, #10]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	72da      	strb	r2, [r3, #11]
 801bca2:	e00f      	b.n	801bcc4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	895b      	ldrh	r3, [r3, #10]
 801bca8:	2b13      	cmp	r3, #19
 801bcaa:	d802      	bhi.n	801bcb2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bcac:	f06f 0301 	mvn.w	r3, #1
 801bcb0:	e020      	b.n	801bcf4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bcb8:	69fb      	ldr	r3, [r7, #28]
 801bcba:	691b      	ldr	r3, [r3, #16]
 801bcbc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bcbe:	f107 0314 	add.w	r3, r7, #20
 801bcc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d00c      	beq.n	801bce6 <ip4_output_if_src+0x12e>
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	891a      	ldrh	r2, [r3, #8]
 801bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	d906      	bls.n	801bce6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bcd8:	687a      	ldr	r2, [r7, #4]
 801bcda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bcdc:	68f8      	ldr	r0, [r7, #12]
 801bcde:	f000 fd53 	bl	801c788 <ip4_frag>
 801bce2:	4603      	mov	r3, r0
 801bce4:	e006      	b.n	801bcf4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bce8:	695b      	ldr	r3, [r3, #20]
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	68f9      	ldr	r1, [r7, #12]
 801bcee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bcf0:	4798      	blx	r3
 801bcf2:	4603      	mov	r3, r0
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3720      	adds	r7, #32
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	080228b4 	.word	0x080228b4
 801bd00:	080228e8 	.word	0x080228e8
 801bd04:	080228f4 	.word	0x080228f4
 801bd08:	0802291c 	.word	0x0802291c
 801bd0c:	2400cdba 	.word	0x2400cdba
 801bd10:	08022df8 	.word	0x08022df8

0801bd14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bd14:	b480      	push	{r7}
 801bd16:	b085      	sub	sp, #20
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd28:	d002      	beq.n	801bd30 <ip4_addr_isbroadcast_u32+0x1c>
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d101      	bne.n	801bd34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bd30:	2301      	movs	r3, #1
 801bd32:	e02a      	b.n	801bd8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd3a:	f003 0302 	and.w	r3, r3, #2
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d101      	bne.n	801bd46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bd42:	2300      	movs	r3, #0
 801bd44:	e021      	b.n	801bd8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	3304      	adds	r3, #4
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	687a      	ldr	r2, [r7, #4]
 801bd4e:	429a      	cmp	r2, r3
 801bd50:	d101      	bne.n	801bd56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bd52:	2300      	movs	r3, #0
 801bd54:	e019      	b.n	801bd8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bd56:	68fa      	ldr	r2, [r7, #12]
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	3304      	adds	r3, #4
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	405a      	eors	r2, r3
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	3308      	adds	r3, #8
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	4013      	ands	r3, r2
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d10d      	bne.n	801bd88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	3308      	adds	r3, #8
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	43da      	mvns	r2, r3
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801bd78:	683b      	ldr	r3, [r7, #0]
 801bd7a:	3308      	adds	r3, #8
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd80:	429a      	cmp	r2, r3
 801bd82:	d101      	bne.n	801bd88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801bd84:	2301      	movs	r3, #1
 801bd86:	e000      	b.n	801bd8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801bd88:	2300      	movs	r3, #0
  }
}
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	3714      	adds	r7, #20
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd94:	4770      	bx	lr
	...

0801bd98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b084      	sub	sp, #16
 801bd9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801bda2:	4b12      	ldr	r3, [pc, #72]	@ (801bdec <ip_reass_tmr+0x54>)
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801bda8:	e018      	b.n	801bddc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	7fdb      	ldrb	r3, [r3, #31]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d00b      	beq.n	801bdca <ip_reass_tmr+0x32>
      r->timer--;
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	7fdb      	ldrb	r3, [r3, #31]
 801bdb6:	3b01      	subs	r3, #1
 801bdb8:	b2da      	uxtb	r2, r3
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	60fb      	str	r3, [r7, #12]
 801bdc8:	e008      	b.n	801bddc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801bdd4:	68b9      	ldr	r1, [r7, #8]
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f000 f80a 	bl	801bdf0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d1e3      	bne.n	801bdaa <ip_reass_tmr+0x12>
    }
  }
}
 801bde2:	bf00      	nop
 801bde4:	bf00      	nop
 801bde6:	3710      	adds	r7, #16
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	2400cdbc 	.word	0x2400cdbc

0801bdf0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b088      	sub	sp, #32
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	6078      	str	r0, [r7, #4]
 801bdf8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801bdfe:	683a      	ldr	r2, [r7, #0]
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	429a      	cmp	r2, r3
 801be04:	d105      	bne.n	801be12 <ip_reass_free_complete_datagram+0x22>
 801be06:	4b45      	ldr	r3, [pc, #276]	@ (801bf1c <ip_reass_free_complete_datagram+0x12c>)
 801be08:	22ab      	movs	r2, #171	@ 0xab
 801be0a:	4945      	ldr	r1, [pc, #276]	@ (801bf20 <ip_reass_free_complete_datagram+0x130>)
 801be0c:	4845      	ldr	r0, [pc, #276]	@ (801bf24 <ip_reass_free_complete_datagram+0x134>)
 801be0e:	f001 fd01 	bl	801d814 <iprintf>
  if (prev != NULL) {
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d00a      	beq.n	801be2e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	687a      	ldr	r2, [r7, #4]
 801be1e:	429a      	cmp	r2, r3
 801be20:	d005      	beq.n	801be2e <ip_reass_free_complete_datagram+0x3e>
 801be22:	4b3e      	ldr	r3, [pc, #248]	@ (801bf1c <ip_reass_free_complete_datagram+0x12c>)
 801be24:	22ad      	movs	r2, #173	@ 0xad
 801be26:	4940      	ldr	r1, [pc, #256]	@ (801bf28 <ip_reass_free_complete_datagram+0x138>)
 801be28:	483e      	ldr	r0, [pc, #248]	@ (801bf24 <ip_reass_free_complete_datagram+0x134>)
 801be2a:	f001 fcf3 	bl	801d814 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	685b      	ldr	r3, [r3, #4]
 801be32:	685b      	ldr	r3, [r3, #4]
 801be34:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	889b      	ldrh	r3, [r3, #4]
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d12a      	bne.n	801be96 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	685b      	ldr	r3, [r3, #4]
 801be44:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801be46:	697b      	ldr	r3, [r7, #20]
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801be4e:	69bb      	ldr	r3, [r7, #24]
 801be50:	6858      	ldr	r0, [r3, #4]
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	3308      	adds	r3, #8
 801be56:	2214      	movs	r2, #20
 801be58:	4619      	mov	r1, r3
 801be5a:	f001 ff50 	bl	801dcfe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801be5e:	2101      	movs	r1, #1
 801be60:	69b8      	ldr	r0, [r7, #24]
 801be62:	f7ff fc1f 	bl	801b6a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801be66:	69b8      	ldr	r0, [r7, #24]
 801be68:	f7f6 fb64 	bl	8012534 <pbuf_clen>
 801be6c:	4603      	mov	r3, r0
 801be6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801be70:	8bfa      	ldrh	r2, [r7, #30]
 801be72:	8a7b      	ldrh	r3, [r7, #18]
 801be74:	4413      	add	r3, r2
 801be76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801be7a:	db05      	blt.n	801be88 <ip_reass_free_complete_datagram+0x98>
 801be7c:	4b27      	ldr	r3, [pc, #156]	@ (801bf1c <ip_reass_free_complete_datagram+0x12c>)
 801be7e:	22bc      	movs	r2, #188	@ 0xbc
 801be80:	492a      	ldr	r1, [pc, #168]	@ (801bf2c <ip_reass_free_complete_datagram+0x13c>)
 801be82:	4828      	ldr	r0, [pc, #160]	@ (801bf24 <ip_reass_free_complete_datagram+0x134>)
 801be84:	f001 fcc6 	bl	801d814 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801be88:	8bfa      	ldrh	r2, [r7, #30]
 801be8a:	8a7b      	ldrh	r3, [r7, #18]
 801be8c:	4413      	add	r3, r2
 801be8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801be90:	69b8      	ldr	r0, [r7, #24]
 801be92:	f7f6 fac1 	bl	8012418 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	685b      	ldr	r3, [r3, #4]
 801be9a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801be9c:	e01f      	b.n	801bede <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801be9e:	69bb      	ldr	r3, [r7, #24]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bea4:	69bb      	ldr	r3, [r7, #24]
 801bea6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801beae:	68f8      	ldr	r0, [r7, #12]
 801beb0:	f7f6 fb40 	bl	8012534 <pbuf_clen>
 801beb4:	4603      	mov	r3, r0
 801beb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801beb8:	8bfa      	ldrh	r2, [r7, #30]
 801beba:	8a7b      	ldrh	r3, [r7, #18]
 801bebc:	4413      	add	r3, r2
 801bebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bec2:	db05      	blt.n	801bed0 <ip_reass_free_complete_datagram+0xe0>
 801bec4:	4b15      	ldr	r3, [pc, #84]	@ (801bf1c <ip_reass_free_complete_datagram+0x12c>)
 801bec6:	22cc      	movs	r2, #204	@ 0xcc
 801bec8:	4918      	ldr	r1, [pc, #96]	@ (801bf2c <ip_reass_free_complete_datagram+0x13c>)
 801beca:	4816      	ldr	r0, [pc, #88]	@ (801bf24 <ip_reass_free_complete_datagram+0x134>)
 801becc:	f001 fca2 	bl	801d814 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bed0:	8bfa      	ldrh	r2, [r7, #30]
 801bed2:	8a7b      	ldrh	r3, [r7, #18]
 801bed4:	4413      	add	r3, r2
 801bed6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bed8:	68f8      	ldr	r0, [r7, #12]
 801beda:	f7f6 fa9d 	bl	8012418 <pbuf_free>
  while (p != NULL) {
 801bede:	69bb      	ldr	r3, [r7, #24]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d1dc      	bne.n	801be9e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bee4:	6839      	ldr	r1, [r7, #0]
 801bee6:	6878      	ldr	r0, [r7, #4]
 801bee8:	f000 f8c2 	bl	801c070 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801beec:	4b10      	ldr	r3, [pc, #64]	@ (801bf30 <ip_reass_free_complete_datagram+0x140>)
 801beee:	881b      	ldrh	r3, [r3, #0]
 801bef0:	8bfa      	ldrh	r2, [r7, #30]
 801bef2:	429a      	cmp	r2, r3
 801bef4:	d905      	bls.n	801bf02 <ip_reass_free_complete_datagram+0x112>
 801bef6:	4b09      	ldr	r3, [pc, #36]	@ (801bf1c <ip_reass_free_complete_datagram+0x12c>)
 801bef8:	22d2      	movs	r2, #210	@ 0xd2
 801befa:	490e      	ldr	r1, [pc, #56]	@ (801bf34 <ip_reass_free_complete_datagram+0x144>)
 801befc:	4809      	ldr	r0, [pc, #36]	@ (801bf24 <ip_reass_free_complete_datagram+0x134>)
 801befe:	f001 fc89 	bl	801d814 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bf02:	4b0b      	ldr	r3, [pc, #44]	@ (801bf30 <ip_reass_free_complete_datagram+0x140>)
 801bf04:	881a      	ldrh	r2, [r3, #0]
 801bf06:	8bfb      	ldrh	r3, [r7, #30]
 801bf08:	1ad3      	subs	r3, r2, r3
 801bf0a:	b29a      	uxth	r2, r3
 801bf0c:	4b08      	ldr	r3, [pc, #32]	@ (801bf30 <ip_reass_free_complete_datagram+0x140>)
 801bf0e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bf10:	8bfb      	ldrh	r3, [r7, #30]
}
 801bf12:	4618      	mov	r0, r3
 801bf14:	3720      	adds	r7, #32
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd80      	pop	{r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	0802294c 	.word	0x0802294c
 801bf20:	08022988 	.word	0x08022988
 801bf24:	08022994 	.word	0x08022994
 801bf28:	080229bc 	.word	0x080229bc
 801bf2c:	080229d0 	.word	0x080229d0
 801bf30:	2400cdc0 	.word	0x2400cdc0
 801bf34:	080229f0 	.word	0x080229f0

0801bf38 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b08a      	sub	sp, #40	@ 0x28
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	6078      	str	r0, [r7, #4]
 801bf40:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bf42:	2300      	movs	r3, #0
 801bf44:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bf46:	2300      	movs	r3, #0
 801bf48:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bf4e:	2300      	movs	r3, #0
 801bf50:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bf52:	2300      	movs	r3, #0
 801bf54:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bf56:	4b28      	ldr	r3, [pc, #160]	@ (801bff8 <ip_reass_remove_oldest_datagram+0xc0>)
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bf5c:	e030      	b.n	801bfc0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf60:	695a      	ldr	r2, [r3, #20]
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	68db      	ldr	r3, [r3, #12]
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d10c      	bne.n	801bf84 <ip_reass_remove_oldest_datagram+0x4c>
 801bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf6c:	699a      	ldr	r2, [r3, #24]
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	691b      	ldr	r3, [r3, #16]
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d106      	bne.n	801bf84 <ip_reass_remove_oldest_datagram+0x4c>
 801bf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf78:	899a      	ldrh	r2, [r3, #12]
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	889b      	ldrh	r3, [r3, #4]
 801bf7e:	b29b      	uxth	r3, r3
 801bf80:	429a      	cmp	r2, r3
 801bf82:	d014      	beq.n	801bfae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	3301      	adds	r3, #1
 801bf88:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bf8a:	6a3b      	ldr	r3, [r7, #32]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d104      	bne.n	801bf9a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf92:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bf94:	69fb      	ldr	r3, [r7, #28]
 801bf96:	61bb      	str	r3, [r7, #24]
 801bf98:	e009      	b.n	801bfae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf9c:	7fda      	ldrb	r2, [r3, #31]
 801bf9e:	6a3b      	ldr	r3, [r7, #32]
 801bfa0:	7fdb      	ldrb	r3, [r3, #31]
 801bfa2:	429a      	cmp	r2, r3
 801bfa4:	d803      	bhi.n	801bfae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfa8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d001      	beq.n	801bfba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d1cb      	bne.n	801bf5e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bfc6:	6a3b      	ldr	r3, [r7, #32]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d008      	beq.n	801bfde <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bfcc:	69b9      	ldr	r1, [r7, #24]
 801bfce:	6a38      	ldr	r0, [r7, #32]
 801bfd0:	f7ff ff0e 	bl	801bdf0 <ip_reass_free_complete_datagram>
 801bfd4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bfd6:	697a      	ldr	r2, [r7, #20]
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	4413      	add	r3, r2
 801bfdc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bfde:	697a      	ldr	r2, [r7, #20]
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	429a      	cmp	r2, r3
 801bfe4:	da02      	bge.n	801bfec <ip_reass_remove_oldest_datagram+0xb4>
 801bfe6:	693b      	ldr	r3, [r7, #16]
 801bfe8:	2b01      	cmp	r3, #1
 801bfea:	dcac      	bgt.n	801bf46 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bfec:	697b      	ldr	r3, [r7, #20]
}
 801bfee:	4618      	mov	r0, r3
 801bff0:	3728      	adds	r7, #40	@ 0x28
 801bff2:	46bd      	mov	sp, r7
 801bff4:	bd80      	pop	{r7, pc}
 801bff6:	bf00      	nop
 801bff8:	2400cdbc 	.word	0x2400cdbc

0801bffc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
 801c004:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c006:	2004      	movs	r0, #4
 801c008:	f7f5 fae0 	bl	80115cc <memp_malloc>
 801c00c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d110      	bne.n	801c036 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c014:	6839      	ldr	r1, [r7, #0]
 801c016:	6878      	ldr	r0, [r7, #4]
 801c018:	f7ff ff8e 	bl	801bf38 <ip_reass_remove_oldest_datagram>
 801c01c:	4602      	mov	r2, r0
 801c01e:	683b      	ldr	r3, [r7, #0]
 801c020:	4293      	cmp	r3, r2
 801c022:	dc03      	bgt.n	801c02c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c024:	2004      	movs	r0, #4
 801c026:	f7f5 fad1 	bl	80115cc <memp_malloc>
 801c02a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d101      	bne.n	801c036 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c032:	2300      	movs	r3, #0
 801c034:	e016      	b.n	801c064 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c036:	2220      	movs	r2, #32
 801c038:	2100      	movs	r1, #0
 801c03a:	68f8      	ldr	r0, [r7, #12]
 801c03c:	f001 fd90 	bl	801db60 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	220f      	movs	r2, #15
 801c044:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c046:	4b09      	ldr	r3, [pc, #36]	@ (801c06c <ip_reass_enqueue_new_datagram+0x70>)
 801c048:	681a      	ldr	r2, [r3, #0]
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c04e:	4a07      	ldr	r2, [pc, #28]	@ (801c06c <ip_reass_enqueue_new_datagram+0x70>)
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	3308      	adds	r3, #8
 801c058:	2214      	movs	r2, #20
 801c05a:	6879      	ldr	r1, [r7, #4]
 801c05c:	4618      	mov	r0, r3
 801c05e:	f001 fe4e 	bl	801dcfe <memcpy>
  return ipr;
 801c062:	68fb      	ldr	r3, [r7, #12]
}
 801c064:	4618      	mov	r0, r3
 801c066:	3710      	adds	r7, #16
 801c068:	46bd      	mov	sp, r7
 801c06a:	bd80      	pop	{r7, pc}
 801c06c:	2400cdbc 	.word	0x2400cdbc

0801c070 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c070:	b580      	push	{r7, lr}
 801c072:	b082      	sub	sp, #8
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]
 801c078:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c07a:	4b10      	ldr	r3, [pc, #64]	@ (801c0bc <ip_reass_dequeue_datagram+0x4c>)
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	687a      	ldr	r2, [r7, #4]
 801c080:	429a      	cmp	r2, r3
 801c082:	d104      	bne.n	801c08e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	4a0c      	ldr	r2, [pc, #48]	@ (801c0bc <ip_reass_dequeue_datagram+0x4c>)
 801c08a:	6013      	str	r3, [r2, #0]
 801c08c:	e00d      	b.n	801c0aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c08e:	683b      	ldr	r3, [r7, #0]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d106      	bne.n	801c0a2 <ip_reass_dequeue_datagram+0x32>
 801c094:	4b0a      	ldr	r3, [pc, #40]	@ (801c0c0 <ip_reass_dequeue_datagram+0x50>)
 801c096:	f240 1245 	movw	r2, #325	@ 0x145
 801c09a:	490a      	ldr	r1, [pc, #40]	@ (801c0c4 <ip_reass_dequeue_datagram+0x54>)
 801c09c:	480a      	ldr	r0, [pc, #40]	@ (801c0c8 <ip_reass_dequeue_datagram+0x58>)
 801c09e:	f001 fbb9 	bl	801d814 <iprintf>
    prev->next = ipr->next;
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	681a      	ldr	r2, [r3, #0]
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c0aa:	6879      	ldr	r1, [r7, #4]
 801c0ac:	2004      	movs	r0, #4
 801c0ae:	f7f5 fb03 	bl	80116b8 <memp_free>
}
 801c0b2:	bf00      	nop
 801c0b4:	3708      	adds	r7, #8
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}
 801c0ba:	bf00      	nop
 801c0bc:	2400cdbc 	.word	0x2400cdbc
 801c0c0:	0802294c 	.word	0x0802294c
 801c0c4:	08022a14 	.word	0x08022a14
 801c0c8:	08022994 	.word	0x08022994

0801c0cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b08c      	sub	sp, #48	@ 0x30
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	60f8      	str	r0, [r7, #12]
 801c0d4:	60b9      	str	r1, [r7, #8]
 801c0d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c0d8:	2300      	movs	r3, #0
 801c0da:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c0dc:	2301      	movs	r3, #1
 801c0de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	685b      	ldr	r3, [r3, #4]
 801c0e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c0e6:	69fb      	ldr	r3, [r7, #28]
 801c0e8:	885b      	ldrh	r3, [r3, #2]
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f7f4 fcdd 	bl	8010aac <lwip_htons>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c0f6:	69fb      	ldr	r3, [r7, #28]
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	f003 030f 	and.w	r3, r3, #15
 801c0fe:	b2db      	uxtb	r3, r3
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c104:	7e7b      	ldrb	r3, [r7, #25]
 801c106:	b29b      	uxth	r3, r3
 801c108:	8b7a      	ldrh	r2, [r7, #26]
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d202      	bcs.n	801c114 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c10e:	f04f 33ff 	mov.w	r3, #4294967295
 801c112:	e135      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c114:	7e7b      	ldrb	r3, [r7, #25]
 801c116:	b29b      	uxth	r3, r3
 801c118:	8b7a      	ldrh	r2, [r7, #26]
 801c11a:	1ad3      	subs	r3, r2, r3
 801c11c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c11e:	69fb      	ldr	r3, [r7, #28]
 801c120:	88db      	ldrh	r3, [r3, #6]
 801c122:	b29b      	uxth	r3, r3
 801c124:	4618      	mov	r0, r3
 801c126:	f7f4 fcc1 	bl	8010aac <lwip_htons>
 801c12a:	4603      	mov	r3, r0
 801c12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c130:	b29b      	uxth	r3, r3
 801c132:	00db      	lsls	r3, r3, #3
 801c134:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	685b      	ldr	r3, [r3, #4]
 801c13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c13e:	2200      	movs	r2, #0
 801c140:	701a      	strb	r2, [r3, #0]
 801c142:	2200      	movs	r2, #0
 801c144:	705a      	strb	r2, [r3, #1]
 801c146:	2200      	movs	r2, #0
 801c148:	709a      	strb	r2, [r3, #2]
 801c14a:	2200      	movs	r2, #0
 801c14c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c150:	8afa      	ldrh	r2, [r7, #22]
 801c152:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c154:	8afa      	ldrh	r2, [r7, #22]
 801c156:	8b7b      	ldrh	r3, [r7, #26]
 801c158:	4413      	add	r3, r2
 801c15a:	b29a      	uxth	r2, r3
 801c15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c15e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c162:	88db      	ldrh	r3, [r3, #6]
 801c164:	b29b      	uxth	r3, r3
 801c166:	8afa      	ldrh	r2, [r7, #22]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d902      	bls.n	801c172 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c16c:	f04f 33ff 	mov.w	r3, #4294967295
 801c170:	e106      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	627b      	str	r3, [r7, #36]	@ 0x24
 801c178:	e068      	b.n	801c24c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c182:	889b      	ldrh	r3, [r3, #4]
 801c184:	b29a      	uxth	r2, r3
 801c186:	693b      	ldr	r3, [r7, #16]
 801c188:	889b      	ldrh	r3, [r3, #4]
 801c18a:	b29b      	uxth	r3, r3
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d235      	bcs.n	801c1fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c194:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d020      	beq.n	801c1de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c19e:	889b      	ldrh	r3, [r3, #4]
 801c1a0:	b29a      	uxth	r2, r3
 801c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1a4:	88db      	ldrh	r3, [r3, #6]
 801c1a6:	b29b      	uxth	r3, r3
 801c1a8:	429a      	cmp	r2, r3
 801c1aa:	d307      	bcc.n	801c1bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1ae:	88db      	ldrh	r3, [r3, #6]
 801c1b0:	b29a      	uxth	r2, r3
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	889b      	ldrh	r3, [r3, #4]
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	429a      	cmp	r2, r3
 801c1ba:	d902      	bls.n	801c1c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c1bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c1c0:	e0de      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1c4:	68ba      	ldr	r2, [r7, #8]
 801c1c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1ca:	88db      	ldrh	r3, [r3, #6]
 801c1cc:	b29a      	uxth	r2, r3
 801c1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1d0:	889b      	ldrh	r3, [r3, #4]
 801c1d2:	b29b      	uxth	r3, r3
 801c1d4:	429a      	cmp	r2, r3
 801c1d6:	d03d      	beq.n	801c254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c1d8:	2300      	movs	r3, #0
 801c1da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c1dc:	e03a      	b.n	801c254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1e0:	88db      	ldrh	r3, [r3, #6]
 801c1e2:	b29a      	uxth	r2, r3
 801c1e4:	693b      	ldr	r3, [r7, #16]
 801c1e6:	889b      	ldrh	r3, [r3, #4]
 801c1e8:	b29b      	uxth	r3, r3
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d902      	bls.n	801c1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 801c1f2:	e0c5      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	68ba      	ldr	r2, [r7, #8]
 801c1f8:	605a      	str	r2, [r3, #4]
      break;
 801c1fa:	e02b      	b.n	801c254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1fe:	889b      	ldrh	r3, [r3, #4]
 801c200:	b29a      	uxth	r2, r3
 801c202:	693b      	ldr	r3, [r7, #16]
 801c204:	889b      	ldrh	r3, [r3, #4]
 801c206:	b29b      	uxth	r3, r3
 801c208:	429a      	cmp	r2, r3
 801c20a:	d102      	bne.n	801c212 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c20c:	f04f 33ff 	mov.w	r3, #4294967295
 801c210:	e0b6      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c214:	889b      	ldrh	r3, [r3, #4]
 801c216:	b29a      	uxth	r2, r3
 801c218:	693b      	ldr	r3, [r7, #16]
 801c21a:	88db      	ldrh	r3, [r3, #6]
 801c21c:	b29b      	uxth	r3, r3
 801c21e:	429a      	cmp	r2, r3
 801c220:	d202      	bcs.n	801c228 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c222:	f04f 33ff 	mov.w	r3, #4294967295
 801c226:	e0ab      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d009      	beq.n	801c242 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c230:	88db      	ldrh	r3, [r3, #6]
 801c232:	b29a      	uxth	r2, r3
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	889b      	ldrh	r3, [r3, #4]
 801c238:	b29b      	uxth	r3, r3
 801c23a:	429a      	cmp	r2, r3
 801c23c:	d001      	beq.n	801c242 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c23e:	2300      	movs	r3, #0
 801c240:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c242:	693b      	ldr	r3, [r7, #16]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c248:	693b      	ldr	r3, [r7, #16]
 801c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d193      	bne.n	801c17a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c252:	e000      	b.n	801c256 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c254:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d12d      	bne.n	801c2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d01c      	beq.n	801c29c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c264:	88db      	ldrh	r3, [r3, #6]
 801c266:	b29a      	uxth	r2, r3
 801c268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c26a:	889b      	ldrh	r3, [r3, #4]
 801c26c:	b29b      	uxth	r3, r3
 801c26e:	429a      	cmp	r2, r3
 801c270:	d906      	bls.n	801c280 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c272:	4b45      	ldr	r3, [pc, #276]	@ (801c388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c274:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c278:	4944      	ldr	r1, [pc, #272]	@ (801c38c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c27a:	4845      	ldr	r0, [pc, #276]	@ (801c390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c27c:	f001 faca 	bl	801d814 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c282:	68ba      	ldr	r2, [r7, #8]
 801c284:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c288:	88db      	ldrh	r3, [r3, #6]
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c28e:	889b      	ldrh	r3, [r3, #4]
 801c290:	b29b      	uxth	r3, r3
 801c292:	429a      	cmp	r2, r3
 801c294:	d010      	beq.n	801c2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c296:	2300      	movs	r3, #0
 801c298:	623b      	str	r3, [r7, #32]
 801c29a:	e00d      	b.n	801c2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d006      	beq.n	801c2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c2a4:	4b38      	ldr	r3, [pc, #224]	@ (801c388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c2a6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c2aa:	493a      	ldr	r1, [pc, #232]	@ (801c394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c2ac:	4838      	ldr	r0, [pc, #224]	@ (801c390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c2ae:	f001 fab1 	bl	801d814 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	68ba      	ldr	r2, [r7, #8]
 801c2b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d105      	bne.n	801c2ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	7f9b      	ldrb	r3, [r3, #30]
 801c2c2:	f003 0301 	and.w	r3, r3, #1
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d059      	beq.n	801c37e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c2ca:	6a3b      	ldr	r3, [r7, #32]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d04f      	beq.n	801c370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	685b      	ldr	r3, [r3, #4]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d006      	beq.n	801c2e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	685b      	ldr	r3, [r3, #4]
 801c2dc:	685b      	ldr	r3, [r3, #4]
 801c2de:	889b      	ldrh	r3, [r3, #4]
 801c2e0:	b29b      	uxth	r3, r3
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d002      	beq.n	801c2ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	623b      	str	r3, [r7, #32]
 801c2ea:	e041      	b.n	801c370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c2f6:	e012      	b.n	801c31e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2fa:	685b      	ldr	r3, [r3, #4]
 801c2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c300:	88db      	ldrh	r3, [r3, #6]
 801c302:	b29a      	uxth	r2, r3
 801c304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c306:	889b      	ldrh	r3, [r3, #4]
 801c308:	b29b      	uxth	r3, r3
 801c30a:	429a      	cmp	r2, r3
 801c30c:	d002      	beq.n	801c314 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c30e:	2300      	movs	r3, #0
 801c310:	623b      	str	r3, [r7, #32]
            break;
 801c312:	e007      	b.n	801c324 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c316:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c320:	2b00      	cmp	r3, #0
 801c322:	d1e9      	bne.n	801c2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c324:	6a3b      	ldr	r3, [r7, #32]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d022      	beq.n	801c370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	685b      	ldr	r3, [r3, #4]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d106      	bne.n	801c340 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c332:	4b15      	ldr	r3, [pc, #84]	@ (801c388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c334:	f240 12df 	movw	r2, #479	@ 0x1df
 801c338:	4917      	ldr	r1, [pc, #92]	@ (801c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c33a:	4815      	ldr	r0, [pc, #84]	@ (801c390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c33c:	f001 fa6a 	bl	801d814 <iprintf>
          LWIP_ASSERT("sanity check",
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	685b      	ldr	r3, [r3, #4]
 801c346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c348:	429a      	cmp	r2, r3
 801c34a:	d106      	bne.n	801c35a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c34c:	4b0e      	ldr	r3, [pc, #56]	@ (801c388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c34e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c352:	4911      	ldr	r1, [pc, #68]	@ (801c398 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c354:	480e      	ldr	r0, [pc, #56]	@ (801c390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c356:	f001 fa5d 	bl	801d814 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d006      	beq.n	801c370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c362:	4b09      	ldr	r3, [pc, #36]	@ (801c388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c364:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c368:	490c      	ldr	r1, [pc, #48]	@ (801c39c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c36a:	4809      	ldr	r0, [pc, #36]	@ (801c390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c36c:	f001 fa52 	bl	801d814 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c370:	6a3b      	ldr	r3, [r7, #32]
 801c372:	2b00      	cmp	r3, #0
 801c374:	bf14      	ite	ne
 801c376:	2301      	movne	r3, #1
 801c378:	2300      	moveq	r3, #0
 801c37a:	b2db      	uxtb	r3, r3
 801c37c:	e000      	b.n	801c380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c37e:	2300      	movs	r3, #0
}
 801c380:	4618      	mov	r0, r3
 801c382:	3730      	adds	r7, #48	@ 0x30
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}
 801c388:	0802294c 	.word	0x0802294c
 801c38c:	08022a30 	.word	0x08022a30
 801c390:	08022994 	.word	0x08022994
 801c394:	08022a50 	.word	0x08022a50
 801c398:	08022a88 	.word	0x08022a88
 801c39c:	08022a98 	.word	0x08022a98

0801c3a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b08e      	sub	sp, #56	@ 0x38
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	685b      	ldr	r3, [r3, #4]
 801c3ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3b0:	781b      	ldrb	r3, [r3, #0]
 801c3b2:	f003 030f 	and.w	r3, r3, #15
 801c3b6:	b2db      	uxtb	r3, r3
 801c3b8:	009b      	lsls	r3, r3, #2
 801c3ba:	b2db      	uxtb	r3, r3
 801c3bc:	2b14      	cmp	r3, #20
 801c3be:	f040 8171 	bne.w	801c6a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3c4:	88db      	ldrh	r3, [r3, #6]
 801c3c6:	b29b      	uxth	r3, r3
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	f7f4 fb6f 	bl	8010aac <lwip_htons>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3d4:	b29b      	uxth	r3, r3
 801c3d6:	00db      	lsls	r3, r3, #3
 801c3d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3dc:	885b      	ldrh	r3, [r3, #2]
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f7f4 fb63 	bl	8010aac <lwip_htons>
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	f003 030f 	and.w	r3, r3, #15
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	009b      	lsls	r3, r3, #2
 801c3f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c3fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c402:	429a      	cmp	r2, r3
 801c404:	f0c0 8150 	bcc.w	801c6a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c408:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c40c:	b29b      	uxth	r3, r3
 801c40e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c410:	1ad3      	subs	r3, r2, r3
 801c412:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c414:	6878      	ldr	r0, [r7, #4]
 801c416:	f7f6 f88d 	bl	8012534 <pbuf_clen>
 801c41a:	4603      	mov	r3, r0
 801c41c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c41e:	4b8c      	ldr	r3, [pc, #560]	@ (801c650 <ip4_reass+0x2b0>)
 801c420:	881b      	ldrh	r3, [r3, #0]
 801c422:	461a      	mov	r2, r3
 801c424:	8c3b      	ldrh	r3, [r7, #32]
 801c426:	4413      	add	r3, r2
 801c428:	2b0a      	cmp	r3, #10
 801c42a:	dd10      	ble.n	801c44e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c42c:	8c3b      	ldrh	r3, [r7, #32]
 801c42e:	4619      	mov	r1, r3
 801c430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c432:	f7ff fd81 	bl	801bf38 <ip_reass_remove_oldest_datagram>
 801c436:	4603      	mov	r3, r0
 801c438:	2b00      	cmp	r3, #0
 801c43a:	f000 8137 	beq.w	801c6ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c43e:	4b84      	ldr	r3, [pc, #528]	@ (801c650 <ip4_reass+0x2b0>)
 801c440:	881b      	ldrh	r3, [r3, #0]
 801c442:	461a      	mov	r2, r3
 801c444:	8c3b      	ldrh	r3, [r7, #32]
 801c446:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c448:	2b0a      	cmp	r3, #10
 801c44a:	f300 812f 	bgt.w	801c6ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c44e:	4b81      	ldr	r3, [pc, #516]	@ (801c654 <ip4_reass+0x2b4>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	633b      	str	r3, [r7, #48]	@ 0x30
 801c454:	e015      	b.n	801c482 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c458:	695a      	ldr	r2, [r3, #20]
 801c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c45c:	68db      	ldr	r3, [r3, #12]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d10c      	bne.n	801c47c <ip4_reass+0xdc>
 801c462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c464:	699a      	ldr	r2, [r3, #24]
 801c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c468:	691b      	ldr	r3, [r3, #16]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	d106      	bne.n	801c47c <ip4_reass+0xdc>
 801c46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c470:	899a      	ldrh	r2, [r3, #12]
 801c472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c474:	889b      	ldrh	r3, [r3, #4]
 801c476:	b29b      	uxth	r3, r3
 801c478:	429a      	cmp	r2, r3
 801c47a:	d006      	beq.n	801c48a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	633b      	str	r3, [r7, #48]	@ 0x30
 801c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c484:	2b00      	cmp	r3, #0
 801c486:	d1e6      	bne.n	801c456 <ip4_reass+0xb6>
 801c488:	e000      	b.n	801c48c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c48a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d109      	bne.n	801c4a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c492:	8c3b      	ldrh	r3, [r7, #32]
 801c494:	4619      	mov	r1, r3
 801c496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c498:	f7ff fdb0 	bl	801bffc <ip_reass_enqueue_new_datagram>
 801c49c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d11c      	bne.n	801c4de <ip4_reass+0x13e>
      goto nullreturn;
 801c4a4:	e105      	b.n	801c6b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4a8:	88db      	ldrh	r3, [r3, #6]
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	f7f4 fafd 	bl	8010aac <lwip_htons>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d110      	bne.n	801c4de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4be:	89db      	ldrh	r3, [r3, #14]
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7f4 faf3 	bl	8010aac <lwip_htons>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d006      	beq.n	801c4de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4d2:	3308      	adds	r3, #8
 801c4d4:	2214      	movs	r2, #20
 801c4d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c4d8:	4618      	mov	r0, r3
 801c4da:	f001 fc10 	bl	801dcfe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e0:	88db      	ldrh	r3, [r3, #6]
 801c4e2:	b29b      	uxth	r3, r3
 801c4e4:	f003 0320 	and.w	r3, r3, #32
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	bf0c      	ite	eq
 801c4ec:	2301      	moveq	r3, #1
 801c4ee:	2300      	movne	r3, #0
 801c4f0:	b2db      	uxtb	r3, r3
 801c4f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c4f4:	69fb      	ldr	r3, [r7, #28]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d00e      	beq.n	801c518 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c4fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c4fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c4fe:	4413      	add	r3, r2
 801c500:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c502:	8b7a      	ldrh	r2, [r7, #26]
 801c504:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c506:	429a      	cmp	r2, r3
 801c508:	f0c0 80a0 	bcc.w	801c64c <ip4_reass+0x2ac>
 801c50c:	8b7b      	ldrh	r3, [r7, #26]
 801c50e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c512:	4293      	cmp	r3, r2
 801c514:	f200 809a 	bhi.w	801c64c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c518:	69fa      	ldr	r2, [r7, #28]
 801c51a:	6879      	ldr	r1, [r7, #4]
 801c51c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c51e:	f7ff fdd5 	bl	801c0cc <ip_reass_chain_frag_into_datagram_and_validate>
 801c522:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c524:	697b      	ldr	r3, [r7, #20]
 801c526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c52a:	f000 809b 	beq.w	801c664 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c52e:	4b48      	ldr	r3, [pc, #288]	@ (801c650 <ip4_reass+0x2b0>)
 801c530:	881a      	ldrh	r2, [r3, #0]
 801c532:	8c3b      	ldrh	r3, [r7, #32]
 801c534:	4413      	add	r3, r2
 801c536:	b29a      	uxth	r2, r3
 801c538:	4b45      	ldr	r3, [pc, #276]	@ (801c650 <ip4_reass+0x2b0>)
 801c53a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c53c:	69fb      	ldr	r3, [r7, #28]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d00d      	beq.n	801c55e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c542:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c544:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c546:	4413      	add	r3, r2
 801c548:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c54c:	8a7a      	ldrh	r2, [r7, #18]
 801c54e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c552:	7f9b      	ldrb	r3, [r3, #30]
 801c554:	f043 0301 	orr.w	r3, r3, #1
 801c558:	b2da      	uxtb	r2, r3
 801c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c55c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c55e:	697b      	ldr	r3, [r7, #20]
 801c560:	2b01      	cmp	r3, #1
 801c562:	d171      	bne.n	801c648 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c566:	8b9b      	ldrh	r3, [r3, #28]
 801c568:	3314      	adds	r3, #20
 801c56a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c56e:	685b      	ldr	r3, [r3, #4]
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c578:	685b      	ldr	r3, [r3, #4]
 801c57a:	685b      	ldr	r3, [r3, #4]
 801c57c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c580:	3308      	adds	r3, #8
 801c582:	2214      	movs	r2, #20
 801c584:	4619      	mov	r1, r3
 801c586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c588:	f001 fbb9 	bl	801dcfe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c58c:	8a3b      	ldrh	r3, [r7, #16]
 801c58e:	4618      	mov	r0, r3
 801c590:	f7f4 fa8c 	bl	8010aac <lwip_htons>
 801c594:	4603      	mov	r3, r0
 801c596:	461a      	mov	r2, r3
 801c598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c59a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c59e:	2200      	movs	r2, #0
 801c5a0:	719a      	strb	r2, [r3, #6]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	729a      	strb	r2, [r3, #10]
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5b2:	685b      	ldr	r3, [r3, #4]
 801c5b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c5b6:	e00d      	b.n	801c5d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5ba:	685b      	ldr	r3, [r3, #4]
 801c5bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c5be:	2114      	movs	r1, #20
 801c5c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c5c2:	f7f5 fea3 	bl	801230c <pbuf_remove_header>
      pbuf_cat(p, r);
 801c5c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c5c8:	6878      	ldr	r0, [r7, #4]
 801c5ca:	f7f5 fff3 	bl	80125b4 <pbuf_cat>
      r = iprh->next_pbuf;
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d1ee      	bne.n	801c5b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c5da:	4b1e      	ldr	r3, [pc, #120]	@ (801c654 <ip4_reass+0x2b4>)
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c5e0:	429a      	cmp	r2, r3
 801c5e2:	d102      	bne.n	801c5ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c5e8:	e010      	b.n	801c60c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c5ea:	4b1a      	ldr	r3, [pc, #104]	@ (801c654 <ip4_reass+0x2b4>)
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c5f0:	e007      	b.n	801c602 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d006      	beq.n	801c60a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c604:	2b00      	cmp	r3, #0
 801c606:	d1f4      	bne.n	801c5f2 <ip4_reass+0x252>
 801c608:	e000      	b.n	801c60c <ip4_reass+0x26c>
          break;
 801c60a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c60c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c60e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c610:	f7ff fd2e 	bl	801c070 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c614:	6878      	ldr	r0, [r7, #4]
 801c616:	f7f5 ff8d 	bl	8012534 <pbuf_clen>
 801c61a:	4603      	mov	r3, r0
 801c61c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c61e:	4b0c      	ldr	r3, [pc, #48]	@ (801c650 <ip4_reass+0x2b0>)
 801c620:	881b      	ldrh	r3, [r3, #0]
 801c622:	8c3a      	ldrh	r2, [r7, #32]
 801c624:	429a      	cmp	r2, r3
 801c626:	d906      	bls.n	801c636 <ip4_reass+0x296>
 801c628:	4b0b      	ldr	r3, [pc, #44]	@ (801c658 <ip4_reass+0x2b8>)
 801c62a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c62e:	490b      	ldr	r1, [pc, #44]	@ (801c65c <ip4_reass+0x2bc>)
 801c630:	480b      	ldr	r0, [pc, #44]	@ (801c660 <ip4_reass+0x2c0>)
 801c632:	f001 f8ef 	bl	801d814 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c636:	4b06      	ldr	r3, [pc, #24]	@ (801c650 <ip4_reass+0x2b0>)
 801c638:	881a      	ldrh	r2, [r3, #0]
 801c63a:	8c3b      	ldrh	r3, [r7, #32]
 801c63c:	1ad3      	subs	r3, r2, r3
 801c63e:	b29a      	uxth	r2, r3
 801c640:	4b03      	ldr	r3, [pc, #12]	@ (801c650 <ip4_reass+0x2b0>)
 801c642:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	e038      	b.n	801c6ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c648:	2300      	movs	r3, #0
 801c64a:	e036      	b.n	801c6ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c64c:	bf00      	nop
 801c64e:	e00a      	b.n	801c666 <ip4_reass+0x2c6>
 801c650:	2400cdc0 	.word	0x2400cdc0
 801c654:	2400cdbc 	.word	0x2400cdbc
 801c658:	0802294c 	.word	0x0802294c
 801c65c:	08022abc 	.word	0x08022abc
 801c660:	08022994 	.word	0x08022994
    goto nullreturn_ipr;
 801c664:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d106      	bne.n	801c67a <ip4_reass+0x2da>
 801c66c:	4b15      	ldr	r3, [pc, #84]	@ (801c6c4 <ip4_reass+0x324>)
 801c66e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c672:	4915      	ldr	r1, [pc, #84]	@ (801c6c8 <ip4_reass+0x328>)
 801c674:	4815      	ldr	r0, [pc, #84]	@ (801c6cc <ip4_reass+0x32c>)
 801c676:	f001 f8cd 	bl	801d814 <iprintf>
  if (ipr->p == NULL) {
 801c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c67c:	685b      	ldr	r3, [r3, #4]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d116      	bne.n	801c6b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c682:	4b13      	ldr	r3, [pc, #76]	@ (801c6d0 <ip4_reass+0x330>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c688:	429a      	cmp	r2, r3
 801c68a:	d006      	beq.n	801c69a <ip4_reass+0x2fa>
 801c68c:	4b0d      	ldr	r3, [pc, #52]	@ (801c6c4 <ip4_reass+0x324>)
 801c68e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c692:	4910      	ldr	r1, [pc, #64]	@ (801c6d4 <ip4_reass+0x334>)
 801c694:	480d      	ldr	r0, [pc, #52]	@ (801c6cc <ip4_reass+0x32c>)
 801c696:	f001 f8bd 	bl	801d814 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c69a:	2100      	movs	r1, #0
 801c69c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c69e:	f7ff fce7 	bl	801c070 <ip_reass_dequeue_datagram>
 801c6a2:	e006      	b.n	801c6b2 <ip4_reass+0x312>
    goto nullreturn;
 801c6a4:	bf00      	nop
 801c6a6:	e004      	b.n	801c6b2 <ip4_reass+0x312>
    goto nullreturn;
 801c6a8:	bf00      	nop
 801c6aa:	e002      	b.n	801c6b2 <ip4_reass+0x312>
      goto nullreturn;
 801c6ac:	bf00      	nop
 801c6ae:	e000      	b.n	801c6b2 <ip4_reass+0x312>
  }

nullreturn:
 801c6b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c6b2:	6878      	ldr	r0, [r7, #4]
 801c6b4:	f7f5 feb0 	bl	8012418 <pbuf_free>
  return NULL;
 801c6b8:	2300      	movs	r3, #0
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	3738      	adds	r7, #56	@ 0x38
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bd80      	pop	{r7, pc}
 801c6c2:	bf00      	nop
 801c6c4:	0802294c 	.word	0x0802294c
 801c6c8:	08022ad8 	.word	0x08022ad8
 801c6cc:	08022994 	.word	0x08022994
 801c6d0:	2400cdbc 	.word	0x2400cdbc
 801c6d4:	08022ae4 	.word	0x08022ae4

0801c6d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c6dc:	2005      	movs	r0, #5
 801c6de:	f7f4 ff75 	bl	80115cc <memp_malloc>
 801c6e2:	4603      	mov	r3, r0
}
 801c6e4:	4618      	mov	r0, r3
 801c6e6:	bd80      	pop	{r7, pc}

0801c6e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b082      	sub	sp, #8
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d106      	bne.n	801c704 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c6f6:	4b07      	ldr	r3, [pc, #28]	@ (801c714 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c6f8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c6fc:	4906      	ldr	r1, [pc, #24]	@ (801c718 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c6fe:	4807      	ldr	r0, [pc, #28]	@ (801c71c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c700:	f001 f888 	bl	801d814 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c704:	6879      	ldr	r1, [r7, #4]
 801c706:	2005      	movs	r0, #5
 801c708:	f7f4 ffd6 	bl	80116b8 <memp_free>
}
 801c70c:	bf00      	nop
 801c70e:	3708      	adds	r7, #8
 801c710:	46bd      	mov	sp, r7
 801c712:	bd80      	pop	{r7, pc}
 801c714:	0802294c 	.word	0x0802294c
 801c718:	08022b04 	.word	0x08022b04
 801c71c:	08022994 	.word	0x08022994

0801c720 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c720:	b580      	push	{r7, lr}
 801c722:	b084      	sub	sp, #16
 801c724:	af00      	add	r7, sp, #0
 801c726:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d106      	bne.n	801c740 <ipfrag_free_pbuf_custom+0x20>
 801c732:	4b11      	ldr	r3, [pc, #68]	@ (801c778 <ipfrag_free_pbuf_custom+0x58>)
 801c734:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c738:	4910      	ldr	r1, [pc, #64]	@ (801c77c <ipfrag_free_pbuf_custom+0x5c>)
 801c73a:	4811      	ldr	r0, [pc, #68]	@ (801c780 <ipfrag_free_pbuf_custom+0x60>)
 801c73c:	f001 f86a 	bl	801d814 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c740:	68fa      	ldr	r2, [r7, #12]
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	429a      	cmp	r2, r3
 801c746:	d006      	beq.n	801c756 <ipfrag_free_pbuf_custom+0x36>
 801c748:	4b0b      	ldr	r3, [pc, #44]	@ (801c778 <ipfrag_free_pbuf_custom+0x58>)
 801c74a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c74e:	490d      	ldr	r1, [pc, #52]	@ (801c784 <ipfrag_free_pbuf_custom+0x64>)
 801c750:	480b      	ldr	r0, [pc, #44]	@ (801c780 <ipfrag_free_pbuf_custom+0x60>)
 801c752:	f001 f85f 	bl	801d814 <iprintf>
  if (pcr->original != NULL) {
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	695b      	ldr	r3, [r3, #20]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d004      	beq.n	801c768 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	695b      	ldr	r3, [r3, #20]
 801c762:	4618      	mov	r0, r3
 801c764:	f7f5 fe58 	bl	8012418 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c768:	68f8      	ldr	r0, [r7, #12]
 801c76a:	f7ff ffbd 	bl	801c6e8 <ip_frag_free_pbuf_custom_ref>
}
 801c76e:	bf00      	nop
 801c770:	3710      	adds	r7, #16
 801c772:	46bd      	mov	sp, r7
 801c774:	bd80      	pop	{r7, pc}
 801c776:	bf00      	nop
 801c778:	0802294c 	.word	0x0802294c
 801c77c:	08022b10 	.word	0x08022b10
 801c780:	08022994 	.word	0x08022994
 801c784:	08022b1c 	.word	0x08022b1c

0801c788 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b094      	sub	sp, #80	@ 0x50
 801c78c:	af02      	add	r7, sp, #8
 801c78e:	60f8      	str	r0, [r7, #12]
 801c790:	60b9      	str	r1, [r7, #8]
 801c792:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c794:	2300      	movs	r3, #0
 801c796:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c79a:	68bb      	ldr	r3, [r7, #8]
 801c79c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c79e:	3b14      	subs	r3, #20
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	da00      	bge.n	801c7a6 <ip4_frag+0x1e>
 801c7a4:	3307      	adds	r3, #7
 801c7a6:	10db      	asrs	r3, r3, #3
 801c7a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c7aa:	2314      	movs	r3, #20
 801c7ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	685b      	ldr	r3, [r3, #4]
 801c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c7b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ba:	781b      	ldrb	r3, [r3, #0]
 801c7bc:	f003 030f 	and.w	r3, r3, #15
 801c7c0:	b2db      	uxtb	r3, r3
 801c7c2:	009b      	lsls	r3, r3, #2
 801c7c4:	b2db      	uxtb	r3, r3
 801c7c6:	2b14      	cmp	r3, #20
 801c7c8:	d002      	beq.n	801c7d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c7ca:	f06f 0305 	mvn.w	r3, #5
 801c7ce:	e110      	b.n	801c9f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	895b      	ldrh	r3, [r3, #10]
 801c7d4:	2b13      	cmp	r3, #19
 801c7d6:	d809      	bhi.n	801c7ec <ip4_frag+0x64>
 801c7d8:	4b88      	ldr	r3, [pc, #544]	@ (801c9fc <ip4_frag+0x274>)
 801c7da:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c7de:	4988      	ldr	r1, [pc, #544]	@ (801ca00 <ip4_frag+0x278>)
 801c7e0:	4888      	ldr	r0, [pc, #544]	@ (801ca04 <ip4_frag+0x27c>)
 801c7e2:	f001 f817 	bl	801d814 <iprintf>
 801c7e6:	f06f 0305 	mvn.w	r3, #5
 801c7ea:	e102      	b.n	801c9f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ee:	88db      	ldrh	r3, [r3, #6]
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	f7f4 f95a 	bl	8010aac <lwip_htons>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c7fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c7fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c802:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c806:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c80c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	891b      	ldrh	r3, [r3, #8]
 801c812:	3b14      	subs	r3, #20
 801c814:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c818:	e0e1      	b.n	801c9de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c81a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c81c:	00db      	lsls	r3, r3, #3
 801c81e:	b29b      	uxth	r3, r3
 801c820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c824:	4293      	cmp	r3, r2
 801c826:	bf28      	it	cs
 801c828:	4613      	movcs	r3, r2
 801c82a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c82c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c830:	2114      	movs	r1, #20
 801c832:	200e      	movs	r0, #14
 801c834:	f7f5 fb0c 	bl	8011e50 <pbuf_alloc>
 801c838:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	f000 80d5 	beq.w	801c9ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c844:	895b      	ldrh	r3, [r3, #10]
 801c846:	2b13      	cmp	r3, #19
 801c848:	d806      	bhi.n	801c858 <ip4_frag+0xd0>
 801c84a:	4b6c      	ldr	r3, [pc, #432]	@ (801c9fc <ip4_frag+0x274>)
 801c84c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c850:	496d      	ldr	r1, [pc, #436]	@ (801ca08 <ip4_frag+0x280>)
 801c852:	486c      	ldr	r0, [pc, #432]	@ (801ca04 <ip4_frag+0x27c>)
 801c854:	f000 ffde 	bl	801d814 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c85a:	685b      	ldr	r3, [r3, #4]
 801c85c:	2214      	movs	r2, #20
 801c85e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c860:	4618      	mov	r0, r3
 801c862:	f001 fa4c 	bl	801dcfe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c868:	685b      	ldr	r3, [r3, #4]
 801c86a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c86c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c86e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c872:	e064      	b.n	801c93e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	895a      	ldrh	r2, [r3, #10]
 801c878:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c87a:	1ad3      	subs	r3, r2, r3
 801c87c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	895b      	ldrh	r3, [r3, #10]
 801c882:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c884:	429a      	cmp	r2, r3
 801c886:	d906      	bls.n	801c896 <ip4_frag+0x10e>
 801c888:	4b5c      	ldr	r3, [pc, #368]	@ (801c9fc <ip4_frag+0x274>)
 801c88a:	f240 322d 	movw	r2, #813	@ 0x32d
 801c88e:	495f      	ldr	r1, [pc, #380]	@ (801ca0c <ip4_frag+0x284>)
 801c890:	485c      	ldr	r0, [pc, #368]	@ (801ca04 <ip4_frag+0x27c>)
 801c892:	f000 ffbf 	bl	801d814 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c896:	8bfa      	ldrh	r2, [r7, #30]
 801c898:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c89c:	4293      	cmp	r3, r2
 801c89e:	bf28      	it	cs
 801c8a0:	4613      	movcs	r3, r2
 801c8a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c8a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d105      	bne.n	801c8ba <ip4_frag+0x132>
        poff = 0;
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	60fb      	str	r3, [r7, #12]
        continue;
 801c8b8:	e041      	b.n	801c93e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c8ba:	f7ff ff0d 	bl	801c6d8 <ip_frag_alloc_pbuf_custom_ref>
 801c8be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c8c0:	69bb      	ldr	r3, [r7, #24]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d103      	bne.n	801c8ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c8c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c8c8:	f7f5 fda6 	bl	8012418 <pbuf_free>
        goto memerr;
 801c8cc:	e08f      	b.n	801c9ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c8ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c8d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c8d6:	4413      	add	r3, r2
 801c8d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c8dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c8e0:	9201      	str	r2, [sp, #4]
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	2241      	movs	r2, #65	@ 0x41
 801c8e8:	2000      	movs	r0, #0
 801c8ea:	f7f5 fbdb 	bl	80120a4 <pbuf_alloced_custom>
 801c8ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c8f0:	697b      	ldr	r3, [r7, #20]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d106      	bne.n	801c904 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c8f6:	69b8      	ldr	r0, [r7, #24]
 801c8f8:	f7ff fef6 	bl	801c6e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c8fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c8fe:	f7f5 fd8b 	bl	8012418 <pbuf_free>
        goto memerr;
 801c902:	e074      	b.n	801c9ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c904:	68f8      	ldr	r0, [r7, #12]
 801c906:	f7f5 fe2d 	bl	8012564 <pbuf_ref>
      pcr->original = p;
 801c90a:	69bb      	ldr	r3, [r7, #24]
 801c90c:	68fa      	ldr	r2, [r7, #12]
 801c90e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c910:	69bb      	ldr	r3, [r7, #24]
 801c912:	4a3f      	ldr	r2, [pc, #252]	@ (801ca10 <ip4_frag+0x288>)
 801c914:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c916:	6979      	ldr	r1, [r7, #20]
 801c918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c91a:	f7f5 fe4b 	bl	80125b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c91e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c922:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c926:	1ad3      	subs	r3, r2, r3
 801c928:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c92c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c930:	2b00      	cmp	r3, #0
 801c932:	d004      	beq.n	801c93e <ip4_frag+0x1b6>
        poff = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c93e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c942:	2b00      	cmp	r3, #0
 801c944:	d196      	bne.n	801c874 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c946:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c948:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c94c:	4413      	add	r3, r2
 801c94e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c950:	68bb      	ldr	r3, [r7, #8]
 801c952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c954:	f1a3 0213 	sub.w	r2, r3, #19
 801c958:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c95c:	429a      	cmp	r2, r3
 801c95e:	bfcc      	ite	gt
 801c960:	2301      	movgt	r3, #1
 801c962:	2300      	movle	r3, #0
 801c964:	b2db      	uxtb	r3, r3
 801c966:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c970:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c972:	6a3b      	ldr	r3, [r7, #32]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d002      	beq.n	801c97e <ip4_frag+0x1f6>
 801c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d003      	beq.n	801c986 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c97e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c980:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c984:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c986:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c988:	4618      	mov	r0, r3
 801c98a:	f7f4 f88f 	bl	8010aac <lwip_htons>
 801c98e:	4603      	mov	r3, r0
 801c990:	461a      	mov	r2, r3
 801c992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c994:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c998:	3314      	adds	r3, #20
 801c99a:	b29b      	uxth	r3, r3
 801c99c:	4618      	mov	r0, r3
 801c99e:	f7f4 f885 	bl	8010aac <lwip_htons>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	461a      	mov	r2, r3
 801c9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	729a      	strb	r2, [r3, #10]
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c9b4:	68bb      	ldr	r3, [r7, #8]
 801c9b6:	695b      	ldr	r3, [r3, #20]
 801c9b8:	687a      	ldr	r2, [r7, #4]
 801c9ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c9bc:	68b8      	ldr	r0, [r7, #8]
 801c9be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c9c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c9c2:	f7f5 fd29 	bl	8012418 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c9c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c9ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c9cc:	1ad3      	subs	r3, r2, r3
 801c9ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c9d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c9d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c9d8:	4413      	add	r3, r2
 801c9da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c9de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	f47f af19 	bne.w	801c81a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c9e8:	2300      	movs	r3, #0
 801c9ea:	e002      	b.n	801c9f2 <ip4_frag+0x26a>
      goto memerr;
 801c9ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c9ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c9f2:	4618      	mov	r0, r3
 801c9f4:	3748      	adds	r7, #72	@ 0x48
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bd80      	pop	{r7, pc}
 801c9fa:	bf00      	nop
 801c9fc:	0802294c 	.word	0x0802294c
 801ca00:	08022b28 	.word	0x08022b28
 801ca04:	08022994 	.word	0x08022994
 801ca08:	08022b44 	.word	0x08022b44
 801ca0c:	08022b64 	.word	0x08022b64
 801ca10:	0801c721 	.word	0x0801c721

0801ca14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b086      	sub	sp, #24
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
 801ca1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ca1e:	230e      	movs	r3, #14
 801ca20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	895b      	ldrh	r3, [r3, #10]
 801ca26:	2b0e      	cmp	r3, #14
 801ca28:	d96e      	bls.n	801cb08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	7bdb      	ldrb	r3, [r3, #15]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d106      	bne.n	801ca40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ca38:	3301      	adds	r3, #1
 801ca3a:	b2da      	uxtb	r2, r3
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	685b      	ldr	r3, [r3, #4]
 801ca44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ca46:	693b      	ldr	r3, [r7, #16]
 801ca48:	7b1a      	ldrb	r2, [r3, #12]
 801ca4a:	7b5b      	ldrb	r3, [r3, #13]
 801ca4c:	021b      	lsls	r3, r3, #8
 801ca4e:	4313      	orrs	r3, r2
 801ca50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ca52:	693b      	ldr	r3, [r7, #16]
 801ca54:	781b      	ldrb	r3, [r3, #0]
 801ca56:	f003 0301 	and.w	r3, r3, #1
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d023      	beq.n	801caa6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ca5e:	693b      	ldr	r3, [r7, #16]
 801ca60:	781b      	ldrb	r3, [r3, #0]
 801ca62:	2b01      	cmp	r3, #1
 801ca64:	d10f      	bne.n	801ca86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ca66:	693b      	ldr	r3, [r7, #16]
 801ca68:	785b      	ldrb	r3, [r3, #1]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d11b      	bne.n	801caa6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ca6e:	693b      	ldr	r3, [r7, #16]
 801ca70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ca72:	2b5e      	cmp	r3, #94	@ 0x5e
 801ca74:	d117      	bne.n	801caa6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	7b5b      	ldrb	r3, [r3, #13]
 801ca7a:	f043 0310 	orr.w	r3, r3, #16
 801ca7e:	b2da      	uxtb	r2, r3
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	735a      	strb	r2, [r3, #13]
 801ca84:	e00f      	b.n	801caa6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ca86:	693b      	ldr	r3, [r7, #16]
 801ca88:	2206      	movs	r2, #6
 801ca8a:	4928      	ldr	r1, [pc, #160]	@ (801cb2c <ethernet_input+0x118>)
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f001 f83d 	bl	801db0c <memcmp>
 801ca92:	4603      	mov	r3, r0
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d106      	bne.n	801caa6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	7b5b      	ldrb	r3, [r3, #13]
 801ca9c:	f043 0308 	orr.w	r3, r3, #8
 801caa0:	b2da      	uxtb	r2, r3
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801caa6:	89fb      	ldrh	r3, [r7, #14]
 801caa8:	2b08      	cmp	r3, #8
 801caaa:	d003      	beq.n	801cab4 <ethernet_input+0xa0>
 801caac:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cab0:	d014      	beq.n	801cadc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cab2:	e032      	b.n	801cb1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801caba:	f003 0308 	and.w	r3, r3, #8
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d024      	beq.n	801cb0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cac2:	8afb      	ldrh	r3, [r7, #22]
 801cac4:	4619      	mov	r1, r3
 801cac6:	6878      	ldr	r0, [r7, #4]
 801cac8:	f7f5 fc20 	bl	801230c <pbuf_remove_header>
 801cacc:	4603      	mov	r3, r0
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d11e      	bne.n	801cb10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cad2:	6839      	ldr	r1, [r7, #0]
 801cad4:	6878      	ldr	r0, [r7, #4]
 801cad6:	f7fe ff03 	bl	801b8e0 <ip4_input>
      break;
 801cada:	e013      	b.n	801cb04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cadc:	683b      	ldr	r3, [r7, #0]
 801cade:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cae2:	f003 0308 	and.w	r3, r3, #8
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d014      	beq.n	801cb14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801caea:	8afb      	ldrh	r3, [r7, #22]
 801caec:	4619      	mov	r1, r3
 801caee:	6878      	ldr	r0, [r7, #4]
 801caf0:	f7f5 fc0c 	bl	801230c <pbuf_remove_header>
 801caf4:	4603      	mov	r3, r0
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d10e      	bne.n	801cb18 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cafa:	6839      	ldr	r1, [r7, #0]
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	f7fe f879 	bl	801abf4 <etharp_input>
      break;
 801cb02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cb04:	2300      	movs	r3, #0
 801cb06:	e00c      	b.n	801cb22 <ethernet_input+0x10e>
    goto free_and_return;
 801cb08:	bf00      	nop
 801cb0a:	e006      	b.n	801cb1a <ethernet_input+0x106>
        goto free_and_return;
 801cb0c:	bf00      	nop
 801cb0e:	e004      	b.n	801cb1a <ethernet_input+0x106>
        goto free_and_return;
 801cb10:	bf00      	nop
 801cb12:	e002      	b.n	801cb1a <ethernet_input+0x106>
        goto free_and_return;
 801cb14:	bf00      	nop
 801cb16:	e000      	b.n	801cb1a <ethernet_input+0x106>
        goto free_and_return;
 801cb18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f7f5 fc7c 	bl	8012418 <pbuf_free>
  return ERR_OK;
 801cb20:	2300      	movs	r3, #0
}
 801cb22:	4618      	mov	r0, r3
 801cb24:	3718      	adds	r7, #24
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
 801cb2a:	bf00      	nop
 801cb2c:	08022e00 	.word	0x08022e00

0801cb30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cb30:	b580      	push	{r7, lr}
 801cb32:	b086      	sub	sp, #24
 801cb34:	af00      	add	r7, sp, #0
 801cb36:	60f8      	str	r0, [r7, #12]
 801cb38:	60b9      	str	r1, [r7, #8]
 801cb3a:	607a      	str	r2, [r7, #4]
 801cb3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cb3e:	8c3b      	ldrh	r3, [r7, #32]
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7f3 ffb3 	bl	8010aac <lwip_htons>
 801cb46:	4603      	mov	r3, r0
 801cb48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cb4a:	210e      	movs	r1, #14
 801cb4c:	68b8      	ldr	r0, [r7, #8]
 801cb4e:	f7f5 fbcd 	bl	80122ec <pbuf_add_header>
 801cb52:	4603      	mov	r3, r0
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d125      	bne.n	801cba4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cb58:	68bb      	ldr	r3, [r7, #8]
 801cb5a:	685b      	ldr	r3, [r3, #4]
 801cb5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cb5e:	693b      	ldr	r3, [r7, #16]
 801cb60:	8afa      	ldrh	r2, [r7, #22]
 801cb62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cb64:	693b      	ldr	r3, [r7, #16]
 801cb66:	2206      	movs	r2, #6
 801cb68:	6839      	ldr	r1, [r7, #0]
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	f001 f8c7 	bl	801dcfe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cb70:	693b      	ldr	r3, [r7, #16]
 801cb72:	3306      	adds	r3, #6
 801cb74:	2206      	movs	r2, #6
 801cb76:	6879      	ldr	r1, [r7, #4]
 801cb78:	4618      	mov	r0, r3
 801cb7a:	f001 f8c0 	bl	801dcfe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cb84:	2b06      	cmp	r3, #6
 801cb86:	d006      	beq.n	801cb96 <ethernet_output+0x66>
 801cb88:	4b0a      	ldr	r3, [pc, #40]	@ (801cbb4 <ethernet_output+0x84>)
 801cb8a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cb8e:	490a      	ldr	r1, [pc, #40]	@ (801cbb8 <ethernet_output+0x88>)
 801cb90:	480a      	ldr	r0, [pc, #40]	@ (801cbbc <ethernet_output+0x8c>)
 801cb92:	f000 fe3f 	bl	801d814 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	699b      	ldr	r3, [r3, #24]
 801cb9a:	68b9      	ldr	r1, [r7, #8]
 801cb9c:	68f8      	ldr	r0, [r7, #12]
 801cb9e:	4798      	blx	r3
 801cba0:	4603      	mov	r3, r0
 801cba2:	e002      	b.n	801cbaa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801cba4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801cba6:	f06f 0301 	mvn.w	r3, #1
}
 801cbaa:	4618      	mov	r0, r3
 801cbac:	3718      	adds	r7, #24
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	bd80      	pop	{r7, pc}
 801cbb2:	bf00      	nop
 801cbb4:	08022b74 	.word	0x08022b74
 801cbb8:	08022bac 	.word	0x08022bac
 801cbbc:	08022be0 	.word	0x08022be0

0801cbc0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b082      	sub	sp, #8
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
 801cbc8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801cbca:	683b      	ldr	r3, [r7, #0]
 801cbcc:	2200      	movs	r2, #0
 801cbce:	2104      	movs	r1, #4
 801cbd0:	4618      	mov	r0, r3
 801cbd2:	f7f0 fa15 	bl	800d000 <osMessageQueueNew>
 801cbd6:	4602      	mov	r2, r0
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d102      	bne.n	801cbea <sys_mbox_new+0x2a>
    return ERR_MEM;
 801cbe4:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe8:	e000      	b.n	801cbec <sys_mbox_new+0x2c>

  return ERR_OK;
 801cbea:	2300      	movs	r3, #0
}
 801cbec:	4618      	mov	r0, r3
 801cbee:	3708      	adds	r7, #8
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	bd80      	pop	{r7, pc}

0801cbf4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b084      	sub	sp, #16
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
 801cbfc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	6818      	ldr	r0, [r3, #0]
 801cc02:	4639      	mov	r1, r7
 801cc04:	2300      	movs	r3, #0
 801cc06:	2200      	movs	r2, #0
 801cc08:	f7f0 fa6e 	bl	800d0e8 <osMessageQueuePut>
 801cc0c:	4603      	mov	r3, r0
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d102      	bne.n	801cc18 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801cc12:	2300      	movs	r3, #0
 801cc14:	73fb      	strb	r3, [r7, #15]
 801cc16:	e001      	b.n	801cc1c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801cc18:	23ff      	movs	r3, #255	@ 0xff
 801cc1a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801cc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3710      	adds	r7, #16
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}

0801cc28 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b086      	sub	sp, #24
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	60f8      	str	r0, [r7, #12]
 801cc30:	60b9      	str	r1, [r7, #8]
 801cc32:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801cc34:	f7ef fe62 	bl	800c8fc <osKernelGetTickCount>
 801cc38:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d013      	beq.n	801cc68 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	6818      	ldr	r0, [r3, #0]
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	2200      	movs	r2, #0
 801cc48:	68b9      	ldr	r1, [r7, #8]
 801cc4a:	f7f0 faad 	bl	800d1a8 <osMessageQueueGet>
 801cc4e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cc50:	693b      	ldr	r3, [r7, #16]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d105      	bne.n	801cc62 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801cc56:	f7ef fe51 	bl	800c8fc <osKernelGetTickCount>
 801cc5a:	4602      	mov	r2, r0
 801cc5c:	697b      	ldr	r3, [r7, #20]
 801cc5e:	1ad3      	subs	r3, r2, r3
 801cc60:	e00f      	b.n	801cc82 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cc62:	f04f 33ff 	mov.w	r3, #4294967295
 801cc66:	e00c      	b.n	801cc82 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	6818      	ldr	r0, [r3, #0]
 801cc6c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc70:	2200      	movs	r2, #0
 801cc72:	68b9      	ldr	r1, [r7, #8]
 801cc74:	f7f0 fa98 	bl	800d1a8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cc78:	f7ef fe40 	bl	800c8fc <osKernelGetTickCount>
 801cc7c:	4602      	mov	r2, r0
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cc82:	4618      	mov	r0, r3
 801cc84:	3718      	adds	r7, #24
 801cc86:	46bd      	mov	sp, r7
 801cc88:	bd80      	pop	{r7, pc}

0801cc8a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cc8a:	b480      	push	{r7}
 801cc8c:	b083      	sub	sp, #12
 801cc8e:	af00      	add	r7, sp, #0
 801cc90:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d101      	bne.n	801cc9e <sys_mbox_valid+0x14>
    return 0;
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	e000      	b.n	801cca0 <sys_mbox_valid+0x16>
  else
    return 1;
 801cc9e:	2301      	movs	r3, #1
}
 801cca0:	4618      	mov	r0, r3
 801cca2:	370c      	adds	r7, #12
 801cca4:	46bd      	mov	sp, r7
 801cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccaa:	4770      	bx	lr

0801ccac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ccac:	b580      	push	{r7, lr}
 801ccae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ccb0:	2000      	movs	r0, #0
 801ccb2:	f7ef ff77 	bl	800cba4 <osMutexNew>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	4a01      	ldr	r2, [pc, #4]	@ (801ccc0 <sys_init+0x14>)
 801ccba:	6013      	str	r3, [r2, #0]
#endif
}
 801ccbc:	bf00      	nop
 801ccbe:	bd80      	pop	{r7, pc}
 801ccc0:	2400cdc4 	.word	0x2400cdc4

0801ccc4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b082      	sub	sp, #8
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cccc:	2000      	movs	r0, #0
 801ccce:	f7ef ff69 	bl	800cba4 <osMutexNew>
 801ccd2:	4602      	mov	r2, r0
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d102      	bne.n	801cce6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cce0:	f04f 33ff 	mov.w	r3, #4294967295
 801cce4:	e000      	b.n	801cce8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cce6:	2300      	movs	r3, #0
}
 801cce8:	4618      	mov	r0, r3
 801ccea:	3708      	adds	r7, #8
 801ccec:	46bd      	mov	sp, r7
 801ccee:	bd80      	pop	{r7, pc}

0801ccf0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b082      	sub	sp, #8
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f04f 31ff 	mov.w	r1, #4294967295
 801cd00:	4618      	mov	r0, r3
 801cd02:	f7ef ffd5 	bl	800ccb0 <osMutexAcquire>
#endif
}
 801cd06:	bf00      	nop
 801cd08:	3708      	adds	r7, #8
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd80      	pop	{r7, pc}

0801cd0e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cd0e:	b580      	push	{r7, lr}
 801cd10:	b082      	sub	sp, #8
 801cd12:	af00      	add	r7, sp, #0
 801cd14:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	f7f0 f813 	bl	800cd46 <osMutexRelease>
}
 801cd20:	bf00      	nop
 801cd22:	3708      	adds	r7, #8
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}

0801cd28 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b08e      	sub	sp, #56	@ 0x38
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	60f8      	str	r0, [r7, #12]
 801cd30:	60b9      	str	r1, [r7, #8]
 801cd32:	607a      	str	r2, [r7, #4]
 801cd34:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cd36:	f107 0314 	add.w	r3, r7, #20
 801cd3a:	2224      	movs	r2, #36	@ 0x24
 801cd3c:	2100      	movs	r1, #0
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f000 ff0e 	bl	801db60 <memset>
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	617b      	str	r3, [r7, #20]
 801cd48:	683b      	ldr	r3, [r7, #0]
 801cd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cd4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801cd50:	f107 0314 	add.w	r3, r7, #20
 801cd54:	461a      	mov	r2, r3
 801cd56:	6879      	ldr	r1, [r7, #4]
 801cd58:	68b8      	ldr	r0, [r7, #8]
 801cd5a:	f7ef fde4 	bl	800c926 <osThreadNew>
 801cd5e:	4603      	mov	r3, r0
#endif
}
 801cd60:	4618      	mov	r0, r3
 801cd62:	3738      	adds	r7, #56	@ 0x38
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}

0801cd68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801cd6c:	4b04      	ldr	r3, [pc, #16]	@ (801cd80 <sys_arch_protect+0x18>)
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	f04f 31ff 	mov.w	r1, #4294967295
 801cd74:	4618      	mov	r0, r3
 801cd76:	f7ef ff9b 	bl	800ccb0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801cd7a:	2301      	movs	r3, #1
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	2400cdc4 	.word	0x2400cdc4

0801cd84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b082      	sub	sp, #8
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cd8c:	4b04      	ldr	r3, [pc, #16]	@ (801cda0 <sys_arch_unprotect+0x1c>)
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7ef ffd8 	bl	800cd46 <osMutexRelease>
}
 801cd96:	bf00      	nop
 801cd98:	3708      	adds	r7, #8
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	bd80      	pop	{r7, pc}
 801cd9e:	bf00      	nop
 801cda0:	2400cdc4 	.word	0x2400cdc4

0801cda4 <rand>:
 801cda4:	4b16      	ldr	r3, [pc, #88]	@ (801ce00 <rand+0x5c>)
 801cda6:	b510      	push	{r4, lr}
 801cda8:	681c      	ldr	r4, [r3, #0]
 801cdaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cdac:	b9b3      	cbnz	r3, 801cddc <rand+0x38>
 801cdae:	2018      	movs	r0, #24
 801cdb0:	f001 fdfa 	bl	801e9a8 <malloc>
 801cdb4:	4602      	mov	r2, r0
 801cdb6:	6320      	str	r0, [r4, #48]	@ 0x30
 801cdb8:	b920      	cbnz	r0, 801cdc4 <rand+0x20>
 801cdba:	4b12      	ldr	r3, [pc, #72]	@ (801ce04 <rand+0x60>)
 801cdbc:	4812      	ldr	r0, [pc, #72]	@ (801ce08 <rand+0x64>)
 801cdbe:	2152      	movs	r1, #82	@ 0x52
 801cdc0:	f000 ffac 	bl	801dd1c <__assert_func>
 801cdc4:	4911      	ldr	r1, [pc, #68]	@ (801ce0c <rand+0x68>)
 801cdc6:	4b12      	ldr	r3, [pc, #72]	@ (801ce10 <rand+0x6c>)
 801cdc8:	e9c0 1300 	strd	r1, r3, [r0]
 801cdcc:	4b11      	ldr	r3, [pc, #68]	@ (801ce14 <rand+0x70>)
 801cdce:	6083      	str	r3, [r0, #8]
 801cdd0:	230b      	movs	r3, #11
 801cdd2:	8183      	strh	r3, [r0, #12]
 801cdd4:	2100      	movs	r1, #0
 801cdd6:	2001      	movs	r0, #1
 801cdd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cddc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cdde:	480e      	ldr	r0, [pc, #56]	@ (801ce18 <rand+0x74>)
 801cde0:	690b      	ldr	r3, [r1, #16]
 801cde2:	694c      	ldr	r4, [r1, #20]
 801cde4:	4a0d      	ldr	r2, [pc, #52]	@ (801ce1c <rand+0x78>)
 801cde6:	4358      	muls	r0, r3
 801cde8:	fb02 0004 	mla	r0, r2, r4, r0
 801cdec:	fba3 3202 	umull	r3, r2, r3, r2
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	eb40 0002 	adc.w	r0, r0, r2
 801cdf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801cdfa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cdfe:	bd10      	pop	{r4, pc}
 801ce00:	24000044 	.word	0x24000044
 801ce04:	08022e0e 	.word	0x08022e0e
 801ce08:	08022e25 	.word	0x08022e25
 801ce0c:	abcd330e 	.word	0xabcd330e
 801ce10:	e66d1234 	.word	0xe66d1234
 801ce14:	0005deec 	.word	0x0005deec
 801ce18:	5851f42d 	.word	0x5851f42d
 801ce1c:	4c957f2d 	.word	0x4c957f2d

0801ce20 <__cvt>:
 801ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce22:	ed2d 8b02 	vpush	{d8}
 801ce26:	eeb0 8b40 	vmov.f64	d8, d0
 801ce2a:	b085      	sub	sp, #20
 801ce2c:	4617      	mov	r7, r2
 801ce2e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ce30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ce32:	ee18 2a90 	vmov	r2, s17
 801ce36:	f025 0520 	bic.w	r5, r5, #32
 801ce3a:	2a00      	cmp	r2, #0
 801ce3c:	bfb6      	itet	lt
 801ce3e:	222d      	movlt	r2, #45	@ 0x2d
 801ce40:	2200      	movge	r2, #0
 801ce42:	eeb1 8b40 	vneglt.f64	d8, d0
 801ce46:	2d46      	cmp	r5, #70	@ 0x46
 801ce48:	460c      	mov	r4, r1
 801ce4a:	701a      	strb	r2, [r3, #0]
 801ce4c:	d004      	beq.n	801ce58 <__cvt+0x38>
 801ce4e:	2d45      	cmp	r5, #69	@ 0x45
 801ce50:	d100      	bne.n	801ce54 <__cvt+0x34>
 801ce52:	3401      	adds	r4, #1
 801ce54:	2102      	movs	r1, #2
 801ce56:	e000      	b.n	801ce5a <__cvt+0x3a>
 801ce58:	2103      	movs	r1, #3
 801ce5a:	ab03      	add	r3, sp, #12
 801ce5c:	9301      	str	r3, [sp, #4]
 801ce5e:	ab02      	add	r3, sp, #8
 801ce60:	9300      	str	r3, [sp, #0]
 801ce62:	4622      	mov	r2, r4
 801ce64:	4633      	mov	r3, r6
 801ce66:	eeb0 0b48 	vmov.f64	d0, d8
 801ce6a:	f000 fffd 	bl	801de68 <_dtoa_r>
 801ce6e:	2d47      	cmp	r5, #71	@ 0x47
 801ce70:	d114      	bne.n	801ce9c <__cvt+0x7c>
 801ce72:	07fb      	lsls	r3, r7, #31
 801ce74:	d50a      	bpl.n	801ce8c <__cvt+0x6c>
 801ce76:	1902      	adds	r2, r0, r4
 801ce78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ce7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce80:	bf08      	it	eq
 801ce82:	9203      	streq	r2, [sp, #12]
 801ce84:	2130      	movs	r1, #48	@ 0x30
 801ce86:	9b03      	ldr	r3, [sp, #12]
 801ce88:	4293      	cmp	r3, r2
 801ce8a:	d319      	bcc.n	801cec0 <__cvt+0xa0>
 801ce8c:	9b03      	ldr	r3, [sp, #12]
 801ce8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce90:	1a1b      	subs	r3, r3, r0
 801ce92:	6013      	str	r3, [r2, #0]
 801ce94:	b005      	add	sp, #20
 801ce96:	ecbd 8b02 	vpop	{d8}
 801ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce9c:	2d46      	cmp	r5, #70	@ 0x46
 801ce9e:	eb00 0204 	add.w	r2, r0, r4
 801cea2:	d1e9      	bne.n	801ce78 <__cvt+0x58>
 801cea4:	7803      	ldrb	r3, [r0, #0]
 801cea6:	2b30      	cmp	r3, #48	@ 0x30
 801cea8:	d107      	bne.n	801ceba <__cvt+0x9a>
 801ceaa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceb2:	bf1c      	itt	ne
 801ceb4:	f1c4 0401 	rsbne	r4, r4, #1
 801ceb8:	6034      	strne	r4, [r6, #0]
 801ceba:	6833      	ldr	r3, [r6, #0]
 801cebc:	441a      	add	r2, r3
 801cebe:	e7db      	b.n	801ce78 <__cvt+0x58>
 801cec0:	1c5c      	adds	r4, r3, #1
 801cec2:	9403      	str	r4, [sp, #12]
 801cec4:	7019      	strb	r1, [r3, #0]
 801cec6:	e7de      	b.n	801ce86 <__cvt+0x66>

0801cec8 <__exponent>:
 801cec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ceca:	2900      	cmp	r1, #0
 801cecc:	bfba      	itte	lt
 801cece:	4249      	neglt	r1, r1
 801ced0:	232d      	movlt	r3, #45	@ 0x2d
 801ced2:	232b      	movge	r3, #43	@ 0x2b
 801ced4:	2909      	cmp	r1, #9
 801ced6:	7002      	strb	r2, [r0, #0]
 801ced8:	7043      	strb	r3, [r0, #1]
 801ceda:	dd29      	ble.n	801cf30 <__exponent+0x68>
 801cedc:	f10d 0307 	add.w	r3, sp, #7
 801cee0:	461d      	mov	r5, r3
 801cee2:	270a      	movs	r7, #10
 801cee4:	461a      	mov	r2, r3
 801cee6:	fbb1 f6f7 	udiv	r6, r1, r7
 801ceea:	fb07 1416 	mls	r4, r7, r6, r1
 801ceee:	3430      	adds	r4, #48	@ 0x30
 801cef0:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cef4:	460c      	mov	r4, r1
 801cef6:	2c63      	cmp	r4, #99	@ 0x63
 801cef8:	f103 33ff 	add.w	r3, r3, #4294967295
 801cefc:	4631      	mov	r1, r6
 801cefe:	dcf1      	bgt.n	801cee4 <__exponent+0x1c>
 801cf00:	3130      	adds	r1, #48	@ 0x30
 801cf02:	1e94      	subs	r4, r2, #2
 801cf04:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cf08:	1c41      	adds	r1, r0, #1
 801cf0a:	4623      	mov	r3, r4
 801cf0c:	42ab      	cmp	r3, r5
 801cf0e:	d30a      	bcc.n	801cf26 <__exponent+0x5e>
 801cf10:	f10d 0309 	add.w	r3, sp, #9
 801cf14:	1a9b      	subs	r3, r3, r2
 801cf16:	42ac      	cmp	r4, r5
 801cf18:	bf88      	it	hi
 801cf1a:	2300      	movhi	r3, #0
 801cf1c:	3302      	adds	r3, #2
 801cf1e:	4403      	add	r3, r0
 801cf20:	1a18      	subs	r0, r3, r0
 801cf22:	b003      	add	sp, #12
 801cf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf26:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cf2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cf2e:	e7ed      	b.n	801cf0c <__exponent+0x44>
 801cf30:	2330      	movs	r3, #48	@ 0x30
 801cf32:	3130      	adds	r1, #48	@ 0x30
 801cf34:	7083      	strb	r3, [r0, #2]
 801cf36:	70c1      	strb	r1, [r0, #3]
 801cf38:	1d03      	adds	r3, r0, #4
 801cf3a:	e7f1      	b.n	801cf20 <__exponent+0x58>
 801cf3c:	0000      	movs	r0, r0
	...

0801cf40 <_printf_float>:
 801cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf44:	b08d      	sub	sp, #52	@ 0x34
 801cf46:	460c      	mov	r4, r1
 801cf48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cf4c:	4616      	mov	r6, r2
 801cf4e:	461f      	mov	r7, r3
 801cf50:	4605      	mov	r5, r0
 801cf52:	f000 fe0d 	bl	801db70 <_localeconv_r>
 801cf56:	f8d0 b000 	ldr.w	fp, [r0]
 801cf5a:	4658      	mov	r0, fp
 801cf5c:	f7e3 fa28 	bl	80003b0 <strlen>
 801cf60:	2300      	movs	r3, #0
 801cf62:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf64:	f8d8 3000 	ldr.w	r3, [r8]
 801cf68:	f894 9018 	ldrb.w	r9, [r4, #24]
 801cf6c:	6822      	ldr	r2, [r4, #0]
 801cf6e:	9005      	str	r0, [sp, #20]
 801cf70:	3307      	adds	r3, #7
 801cf72:	f023 0307 	bic.w	r3, r3, #7
 801cf76:	f103 0108 	add.w	r1, r3, #8
 801cf7a:	f8c8 1000 	str.w	r1, [r8]
 801cf7e:	ed93 0b00 	vldr	d0, [r3]
 801cf82:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801d1e0 <_printf_float+0x2a0>
 801cf86:	eeb0 7bc0 	vabs.f64	d7, d0
 801cf8a:	eeb4 7b46 	vcmp.f64	d7, d6
 801cf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf92:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801cf96:	dd24      	ble.n	801cfe2 <_printf_float+0xa2>
 801cf98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfa0:	d502      	bpl.n	801cfa8 <_printf_float+0x68>
 801cfa2:	232d      	movs	r3, #45	@ 0x2d
 801cfa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cfa8:	498f      	ldr	r1, [pc, #572]	@ (801d1e8 <_printf_float+0x2a8>)
 801cfaa:	4b90      	ldr	r3, [pc, #576]	@ (801d1ec <_printf_float+0x2ac>)
 801cfac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801cfb0:	bf94      	ite	ls
 801cfb2:	4688      	movls	r8, r1
 801cfb4:	4698      	movhi	r8, r3
 801cfb6:	f022 0204 	bic.w	r2, r2, #4
 801cfba:	2303      	movs	r3, #3
 801cfbc:	6123      	str	r3, [r4, #16]
 801cfbe:	6022      	str	r2, [r4, #0]
 801cfc0:	f04f 0a00 	mov.w	sl, #0
 801cfc4:	9700      	str	r7, [sp, #0]
 801cfc6:	4633      	mov	r3, r6
 801cfc8:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cfca:	4621      	mov	r1, r4
 801cfcc:	4628      	mov	r0, r5
 801cfce:	f000 f9d1 	bl	801d374 <_printf_common>
 801cfd2:	3001      	adds	r0, #1
 801cfd4:	f040 8089 	bne.w	801d0ea <_printf_float+0x1aa>
 801cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 801cfdc:	b00d      	add	sp, #52	@ 0x34
 801cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe2:	eeb4 0b40 	vcmp.f64	d0, d0
 801cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfea:	d709      	bvc.n	801d000 <_printf_float+0xc0>
 801cfec:	ee10 3a90 	vmov	r3, s1
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	bfbc      	itt	lt
 801cff4:	232d      	movlt	r3, #45	@ 0x2d
 801cff6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cffa:	497d      	ldr	r1, [pc, #500]	@ (801d1f0 <_printf_float+0x2b0>)
 801cffc:	4b7d      	ldr	r3, [pc, #500]	@ (801d1f4 <_printf_float+0x2b4>)
 801cffe:	e7d5      	b.n	801cfac <_printf_float+0x6c>
 801d000:	6863      	ldr	r3, [r4, #4]
 801d002:	1c59      	adds	r1, r3, #1
 801d004:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801d008:	d139      	bne.n	801d07e <_printf_float+0x13e>
 801d00a:	2306      	movs	r3, #6
 801d00c:	6063      	str	r3, [r4, #4]
 801d00e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801d012:	2300      	movs	r3, #0
 801d014:	6022      	str	r2, [r4, #0]
 801d016:	9303      	str	r3, [sp, #12]
 801d018:	ab0a      	add	r3, sp, #40	@ 0x28
 801d01a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801d01e:	ab09      	add	r3, sp, #36	@ 0x24
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	6861      	ldr	r1, [r4, #4]
 801d024:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d028:	4628      	mov	r0, r5
 801d02a:	f7ff fef9 	bl	801ce20 <__cvt>
 801d02e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d032:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d034:	4680      	mov	r8, r0
 801d036:	d129      	bne.n	801d08c <_printf_float+0x14c>
 801d038:	1cc8      	adds	r0, r1, #3
 801d03a:	db02      	blt.n	801d042 <_printf_float+0x102>
 801d03c:	6863      	ldr	r3, [r4, #4]
 801d03e:	4299      	cmp	r1, r3
 801d040:	dd41      	ble.n	801d0c6 <_printf_float+0x186>
 801d042:	f1a9 0902 	sub.w	r9, r9, #2
 801d046:	fa5f f989 	uxtb.w	r9, r9
 801d04a:	3901      	subs	r1, #1
 801d04c:	464a      	mov	r2, r9
 801d04e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d052:	9109      	str	r1, [sp, #36]	@ 0x24
 801d054:	f7ff ff38 	bl	801cec8 <__exponent>
 801d058:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d05a:	1813      	adds	r3, r2, r0
 801d05c:	2a01      	cmp	r2, #1
 801d05e:	4682      	mov	sl, r0
 801d060:	6123      	str	r3, [r4, #16]
 801d062:	dc02      	bgt.n	801d06a <_printf_float+0x12a>
 801d064:	6822      	ldr	r2, [r4, #0]
 801d066:	07d2      	lsls	r2, r2, #31
 801d068:	d501      	bpl.n	801d06e <_printf_float+0x12e>
 801d06a:	3301      	adds	r3, #1
 801d06c:	6123      	str	r3, [r4, #16]
 801d06e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d072:	2b00      	cmp	r3, #0
 801d074:	d0a6      	beq.n	801cfc4 <_printf_float+0x84>
 801d076:	232d      	movs	r3, #45	@ 0x2d
 801d078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d07c:	e7a2      	b.n	801cfc4 <_printf_float+0x84>
 801d07e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d082:	d1c4      	bne.n	801d00e <_printf_float+0xce>
 801d084:	2b00      	cmp	r3, #0
 801d086:	d1c2      	bne.n	801d00e <_printf_float+0xce>
 801d088:	2301      	movs	r3, #1
 801d08a:	e7bf      	b.n	801d00c <_printf_float+0xcc>
 801d08c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801d090:	d9db      	bls.n	801d04a <_printf_float+0x10a>
 801d092:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801d096:	d118      	bne.n	801d0ca <_printf_float+0x18a>
 801d098:	2900      	cmp	r1, #0
 801d09a:	6863      	ldr	r3, [r4, #4]
 801d09c:	dd0b      	ble.n	801d0b6 <_printf_float+0x176>
 801d09e:	6121      	str	r1, [r4, #16]
 801d0a0:	b913      	cbnz	r3, 801d0a8 <_printf_float+0x168>
 801d0a2:	6822      	ldr	r2, [r4, #0]
 801d0a4:	07d0      	lsls	r0, r2, #31
 801d0a6:	d502      	bpl.n	801d0ae <_printf_float+0x16e>
 801d0a8:	3301      	adds	r3, #1
 801d0aa:	440b      	add	r3, r1
 801d0ac:	6123      	str	r3, [r4, #16]
 801d0ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d0b0:	f04f 0a00 	mov.w	sl, #0
 801d0b4:	e7db      	b.n	801d06e <_printf_float+0x12e>
 801d0b6:	b913      	cbnz	r3, 801d0be <_printf_float+0x17e>
 801d0b8:	6822      	ldr	r2, [r4, #0]
 801d0ba:	07d2      	lsls	r2, r2, #31
 801d0bc:	d501      	bpl.n	801d0c2 <_printf_float+0x182>
 801d0be:	3302      	adds	r3, #2
 801d0c0:	e7f4      	b.n	801d0ac <_printf_float+0x16c>
 801d0c2:	2301      	movs	r3, #1
 801d0c4:	e7f2      	b.n	801d0ac <_printf_float+0x16c>
 801d0c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801d0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0cc:	4299      	cmp	r1, r3
 801d0ce:	db05      	blt.n	801d0dc <_printf_float+0x19c>
 801d0d0:	6823      	ldr	r3, [r4, #0]
 801d0d2:	6121      	str	r1, [r4, #16]
 801d0d4:	07d8      	lsls	r0, r3, #31
 801d0d6:	d5ea      	bpl.n	801d0ae <_printf_float+0x16e>
 801d0d8:	1c4b      	adds	r3, r1, #1
 801d0da:	e7e7      	b.n	801d0ac <_printf_float+0x16c>
 801d0dc:	2900      	cmp	r1, #0
 801d0de:	bfd4      	ite	le
 801d0e0:	f1c1 0202 	rsble	r2, r1, #2
 801d0e4:	2201      	movgt	r2, #1
 801d0e6:	4413      	add	r3, r2
 801d0e8:	e7e0      	b.n	801d0ac <_printf_float+0x16c>
 801d0ea:	6823      	ldr	r3, [r4, #0]
 801d0ec:	055a      	lsls	r2, r3, #21
 801d0ee:	d407      	bmi.n	801d100 <_printf_float+0x1c0>
 801d0f0:	6923      	ldr	r3, [r4, #16]
 801d0f2:	4642      	mov	r2, r8
 801d0f4:	4631      	mov	r1, r6
 801d0f6:	4628      	mov	r0, r5
 801d0f8:	47b8      	blx	r7
 801d0fa:	3001      	adds	r0, #1
 801d0fc:	d12a      	bne.n	801d154 <_printf_float+0x214>
 801d0fe:	e76b      	b.n	801cfd8 <_printf_float+0x98>
 801d100:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801d104:	f240 80e0 	bls.w	801d2c8 <_printf_float+0x388>
 801d108:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801d10c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d114:	d133      	bne.n	801d17e <_printf_float+0x23e>
 801d116:	4a38      	ldr	r2, [pc, #224]	@ (801d1f8 <_printf_float+0x2b8>)
 801d118:	2301      	movs	r3, #1
 801d11a:	4631      	mov	r1, r6
 801d11c:	4628      	mov	r0, r5
 801d11e:	47b8      	blx	r7
 801d120:	3001      	adds	r0, #1
 801d122:	f43f af59 	beq.w	801cfd8 <_printf_float+0x98>
 801d126:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d12a:	4543      	cmp	r3, r8
 801d12c:	db02      	blt.n	801d134 <_printf_float+0x1f4>
 801d12e:	6823      	ldr	r3, [r4, #0]
 801d130:	07d8      	lsls	r0, r3, #31
 801d132:	d50f      	bpl.n	801d154 <_printf_float+0x214>
 801d134:	9b05      	ldr	r3, [sp, #20]
 801d136:	465a      	mov	r2, fp
 801d138:	4631      	mov	r1, r6
 801d13a:	4628      	mov	r0, r5
 801d13c:	47b8      	blx	r7
 801d13e:	3001      	adds	r0, #1
 801d140:	f43f af4a 	beq.w	801cfd8 <_printf_float+0x98>
 801d144:	f04f 0900 	mov.w	r9, #0
 801d148:	f108 38ff 	add.w	r8, r8, #4294967295
 801d14c:	f104 0a1a 	add.w	sl, r4, #26
 801d150:	45c8      	cmp	r8, r9
 801d152:	dc09      	bgt.n	801d168 <_printf_float+0x228>
 801d154:	6823      	ldr	r3, [r4, #0]
 801d156:	079b      	lsls	r3, r3, #30
 801d158:	f100 8107 	bmi.w	801d36a <_printf_float+0x42a>
 801d15c:	68e0      	ldr	r0, [r4, #12]
 801d15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d160:	4298      	cmp	r0, r3
 801d162:	bfb8      	it	lt
 801d164:	4618      	movlt	r0, r3
 801d166:	e739      	b.n	801cfdc <_printf_float+0x9c>
 801d168:	2301      	movs	r3, #1
 801d16a:	4652      	mov	r2, sl
 801d16c:	4631      	mov	r1, r6
 801d16e:	4628      	mov	r0, r5
 801d170:	47b8      	blx	r7
 801d172:	3001      	adds	r0, #1
 801d174:	f43f af30 	beq.w	801cfd8 <_printf_float+0x98>
 801d178:	f109 0901 	add.w	r9, r9, #1
 801d17c:	e7e8      	b.n	801d150 <_printf_float+0x210>
 801d17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d180:	2b00      	cmp	r3, #0
 801d182:	dc3b      	bgt.n	801d1fc <_printf_float+0x2bc>
 801d184:	4a1c      	ldr	r2, [pc, #112]	@ (801d1f8 <_printf_float+0x2b8>)
 801d186:	2301      	movs	r3, #1
 801d188:	4631      	mov	r1, r6
 801d18a:	4628      	mov	r0, r5
 801d18c:	47b8      	blx	r7
 801d18e:	3001      	adds	r0, #1
 801d190:	f43f af22 	beq.w	801cfd8 <_printf_float+0x98>
 801d194:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d198:	ea59 0303 	orrs.w	r3, r9, r3
 801d19c:	d102      	bne.n	801d1a4 <_printf_float+0x264>
 801d19e:	6823      	ldr	r3, [r4, #0]
 801d1a0:	07d9      	lsls	r1, r3, #31
 801d1a2:	d5d7      	bpl.n	801d154 <_printf_float+0x214>
 801d1a4:	9b05      	ldr	r3, [sp, #20]
 801d1a6:	465a      	mov	r2, fp
 801d1a8:	4631      	mov	r1, r6
 801d1aa:	4628      	mov	r0, r5
 801d1ac:	47b8      	blx	r7
 801d1ae:	3001      	adds	r0, #1
 801d1b0:	f43f af12 	beq.w	801cfd8 <_printf_float+0x98>
 801d1b4:	f04f 0a00 	mov.w	sl, #0
 801d1b8:	f104 0b1a 	add.w	fp, r4, #26
 801d1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1be:	425b      	negs	r3, r3
 801d1c0:	4553      	cmp	r3, sl
 801d1c2:	dc01      	bgt.n	801d1c8 <_printf_float+0x288>
 801d1c4:	464b      	mov	r3, r9
 801d1c6:	e794      	b.n	801d0f2 <_printf_float+0x1b2>
 801d1c8:	2301      	movs	r3, #1
 801d1ca:	465a      	mov	r2, fp
 801d1cc:	4631      	mov	r1, r6
 801d1ce:	4628      	mov	r0, r5
 801d1d0:	47b8      	blx	r7
 801d1d2:	3001      	adds	r0, #1
 801d1d4:	f43f af00 	beq.w	801cfd8 <_printf_float+0x98>
 801d1d8:	f10a 0a01 	add.w	sl, sl, #1
 801d1dc:	e7ee      	b.n	801d1bc <_printf_float+0x27c>
 801d1de:	bf00      	nop
 801d1e0:	ffffffff 	.word	0xffffffff
 801d1e4:	7fefffff 	.word	0x7fefffff
 801d1e8:	08022f7e 	.word	0x08022f7e
 801d1ec:	08022f82 	.word	0x08022f82
 801d1f0:	08022f86 	.word	0x08022f86
 801d1f4:	08022f8a 	.word	0x08022f8a
 801d1f8:	08022f8e 	.word	0x08022f8e
 801d1fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d1fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d202:	4553      	cmp	r3, sl
 801d204:	bfa8      	it	ge
 801d206:	4653      	movge	r3, sl
 801d208:	2b00      	cmp	r3, #0
 801d20a:	4699      	mov	r9, r3
 801d20c:	dc37      	bgt.n	801d27e <_printf_float+0x33e>
 801d20e:	2300      	movs	r3, #0
 801d210:	9307      	str	r3, [sp, #28]
 801d212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d216:	f104 021a 	add.w	r2, r4, #26
 801d21a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d21c:	9907      	ldr	r1, [sp, #28]
 801d21e:	9306      	str	r3, [sp, #24]
 801d220:	eba3 0309 	sub.w	r3, r3, r9
 801d224:	428b      	cmp	r3, r1
 801d226:	dc31      	bgt.n	801d28c <_printf_float+0x34c>
 801d228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d22a:	459a      	cmp	sl, r3
 801d22c:	dc3b      	bgt.n	801d2a6 <_printf_float+0x366>
 801d22e:	6823      	ldr	r3, [r4, #0]
 801d230:	07da      	lsls	r2, r3, #31
 801d232:	d438      	bmi.n	801d2a6 <_printf_float+0x366>
 801d234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d236:	ebaa 0903 	sub.w	r9, sl, r3
 801d23a:	9b06      	ldr	r3, [sp, #24]
 801d23c:	ebaa 0303 	sub.w	r3, sl, r3
 801d240:	4599      	cmp	r9, r3
 801d242:	bfa8      	it	ge
 801d244:	4699      	movge	r9, r3
 801d246:	f1b9 0f00 	cmp.w	r9, #0
 801d24a:	dc34      	bgt.n	801d2b6 <_printf_float+0x376>
 801d24c:	f04f 0800 	mov.w	r8, #0
 801d250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d254:	f104 0b1a 	add.w	fp, r4, #26
 801d258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d25a:	ebaa 0303 	sub.w	r3, sl, r3
 801d25e:	eba3 0309 	sub.w	r3, r3, r9
 801d262:	4543      	cmp	r3, r8
 801d264:	f77f af76 	ble.w	801d154 <_printf_float+0x214>
 801d268:	2301      	movs	r3, #1
 801d26a:	465a      	mov	r2, fp
 801d26c:	4631      	mov	r1, r6
 801d26e:	4628      	mov	r0, r5
 801d270:	47b8      	blx	r7
 801d272:	3001      	adds	r0, #1
 801d274:	f43f aeb0 	beq.w	801cfd8 <_printf_float+0x98>
 801d278:	f108 0801 	add.w	r8, r8, #1
 801d27c:	e7ec      	b.n	801d258 <_printf_float+0x318>
 801d27e:	4642      	mov	r2, r8
 801d280:	4631      	mov	r1, r6
 801d282:	4628      	mov	r0, r5
 801d284:	47b8      	blx	r7
 801d286:	3001      	adds	r0, #1
 801d288:	d1c1      	bne.n	801d20e <_printf_float+0x2ce>
 801d28a:	e6a5      	b.n	801cfd8 <_printf_float+0x98>
 801d28c:	2301      	movs	r3, #1
 801d28e:	4631      	mov	r1, r6
 801d290:	4628      	mov	r0, r5
 801d292:	9206      	str	r2, [sp, #24]
 801d294:	47b8      	blx	r7
 801d296:	3001      	adds	r0, #1
 801d298:	f43f ae9e 	beq.w	801cfd8 <_printf_float+0x98>
 801d29c:	9b07      	ldr	r3, [sp, #28]
 801d29e:	9a06      	ldr	r2, [sp, #24]
 801d2a0:	3301      	adds	r3, #1
 801d2a2:	9307      	str	r3, [sp, #28]
 801d2a4:	e7b9      	b.n	801d21a <_printf_float+0x2da>
 801d2a6:	9b05      	ldr	r3, [sp, #20]
 801d2a8:	465a      	mov	r2, fp
 801d2aa:	4631      	mov	r1, r6
 801d2ac:	4628      	mov	r0, r5
 801d2ae:	47b8      	blx	r7
 801d2b0:	3001      	adds	r0, #1
 801d2b2:	d1bf      	bne.n	801d234 <_printf_float+0x2f4>
 801d2b4:	e690      	b.n	801cfd8 <_printf_float+0x98>
 801d2b6:	9a06      	ldr	r2, [sp, #24]
 801d2b8:	464b      	mov	r3, r9
 801d2ba:	4442      	add	r2, r8
 801d2bc:	4631      	mov	r1, r6
 801d2be:	4628      	mov	r0, r5
 801d2c0:	47b8      	blx	r7
 801d2c2:	3001      	adds	r0, #1
 801d2c4:	d1c2      	bne.n	801d24c <_printf_float+0x30c>
 801d2c6:	e687      	b.n	801cfd8 <_printf_float+0x98>
 801d2c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801d2cc:	f1b9 0f01 	cmp.w	r9, #1
 801d2d0:	dc01      	bgt.n	801d2d6 <_printf_float+0x396>
 801d2d2:	07db      	lsls	r3, r3, #31
 801d2d4:	d536      	bpl.n	801d344 <_printf_float+0x404>
 801d2d6:	2301      	movs	r3, #1
 801d2d8:	4642      	mov	r2, r8
 801d2da:	4631      	mov	r1, r6
 801d2dc:	4628      	mov	r0, r5
 801d2de:	47b8      	blx	r7
 801d2e0:	3001      	adds	r0, #1
 801d2e2:	f43f ae79 	beq.w	801cfd8 <_printf_float+0x98>
 801d2e6:	9b05      	ldr	r3, [sp, #20]
 801d2e8:	465a      	mov	r2, fp
 801d2ea:	4631      	mov	r1, r6
 801d2ec:	4628      	mov	r0, r5
 801d2ee:	47b8      	blx	r7
 801d2f0:	3001      	adds	r0, #1
 801d2f2:	f43f ae71 	beq.w	801cfd8 <_printf_float+0x98>
 801d2f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801d2fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d302:	f109 39ff 	add.w	r9, r9, #4294967295
 801d306:	d018      	beq.n	801d33a <_printf_float+0x3fa>
 801d308:	464b      	mov	r3, r9
 801d30a:	f108 0201 	add.w	r2, r8, #1
 801d30e:	4631      	mov	r1, r6
 801d310:	4628      	mov	r0, r5
 801d312:	47b8      	blx	r7
 801d314:	3001      	adds	r0, #1
 801d316:	d10c      	bne.n	801d332 <_printf_float+0x3f2>
 801d318:	e65e      	b.n	801cfd8 <_printf_float+0x98>
 801d31a:	2301      	movs	r3, #1
 801d31c:	465a      	mov	r2, fp
 801d31e:	4631      	mov	r1, r6
 801d320:	4628      	mov	r0, r5
 801d322:	47b8      	blx	r7
 801d324:	3001      	adds	r0, #1
 801d326:	f43f ae57 	beq.w	801cfd8 <_printf_float+0x98>
 801d32a:	f108 0801 	add.w	r8, r8, #1
 801d32e:	45c8      	cmp	r8, r9
 801d330:	dbf3      	blt.n	801d31a <_printf_float+0x3da>
 801d332:	4653      	mov	r3, sl
 801d334:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d338:	e6dc      	b.n	801d0f4 <_printf_float+0x1b4>
 801d33a:	f04f 0800 	mov.w	r8, #0
 801d33e:	f104 0b1a 	add.w	fp, r4, #26
 801d342:	e7f4      	b.n	801d32e <_printf_float+0x3ee>
 801d344:	2301      	movs	r3, #1
 801d346:	4642      	mov	r2, r8
 801d348:	e7e1      	b.n	801d30e <_printf_float+0x3ce>
 801d34a:	2301      	movs	r3, #1
 801d34c:	464a      	mov	r2, r9
 801d34e:	4631      	mov	r1, r6
 801d350:	4628      	mov	r0, r5
 801d352:	47b8      	blx	r7
 801d354:	3001      	adds	r0, #1
 801d356:	f43f ae3f 	beq.w	801cfd8 <_printf_float+0x98>
 801d35a:	f108 0801 	add.w	r8, r8, #1
 801d35e:	68e3      	ldr	r3, [r4, #12]
 801d360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d362:	1a5b      	subs	r3, r3, r1
 801d364:	4543      	cmp	r3, r8
 801d366:	dcf0      	bgt.n	801d34a <_printf_float+0x40a>
 801d368:	e6f8      	b.n	801d15c <_printf_float+0x21c>
 801d36a:	f04f 0800 	mov.w	r8, #0
 801d36e:	f104 0919 	add.w	r9, r4, #25
 801d372:	e7f4      	b.n	801d35e <_printf_float+0x41e>

0801d374 <_printf_common>:
 801d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d378:	4616      	mov	r6, r2
 801d37a:	4698      	mov	r8, r3
 801d37c:	688a      	ldr	r2, [r1, #8]
 801d37e:	690b      	ldr	r3, [r1, #16]
 801d380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d384:	4293      	cmp	r3, r2
 801d386:	bfb8      	it	lt
 801d388:	4613      	movlt	r3, r2
 801d38a:	6033      	str	r3, [r6, #0]
 801d38c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d390:	4607      	mov	r7, r0
 801d392:	460c      	mov	r4, r1
 801d394:	b10a      	cbz	r2, 801d39a <_printf_common+0x26>
 801d396:	3301      	adds	r3, #1
 801d398:	6033      	str	r3, [r6, #0]
 801d39a:	6823      	ldr	r3, [r4, #0]
 801d39c:	0699      	lsls	r1, r3, #26
 801d39e:	bf42      	ittt	mi
 801d3a0:	6833      	ldrmi	r3, [r6, #0]
 801d3a2:	3302      	addmi	r3, #2
 801d3a4:	6033      	strmi	r3, [r6, #0]
 801d3a6:	6825      	ldr	r5, [r4, #0]
 801d3a8:	f015 0506 	ands.w	r5, r5, #6
 801d3ac:	d106      	bne.n	801d3bc <_printf_common+0x48>
 801d3ae:	f104 0a19 	add.w	sl, r4, #25
 801d3b2:	68e3      	ldr	r3, [r4, #12]
 801d3b4:	6832      	ldr	r2, [r6, #0]
 801d3b6:	1a9b      	subs	r3, r3, r2
 801d3b8:	42ab      	cmp	r3, r5
 801d3ba:	dc26      	bgt.n	801d40a <_printf_common+0x96>
 801d3bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d3c0:	6822      	ldr	r2, [r4, #0]
 801d3c2:	3b00      	subs	r3, #0
 801d3c4:	bf18      	it	ne
 801d3c6:	2301      	movne	r3, #1
 801d3c8:	0692      	lsls	r2, r2, #26
 801d3ca:	d42b      	bmi.n	801d424 <_printf_common+0xb0>
 801d3cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d3d0:	4641      	mov	r1, r8
 801d3d2:	4638      	mov	r0, r7
 801d3d4:	47c8      	blx	r9
 801d3d6:	3001      	adds	r0, #1
 801d3d8:	d01e      	beq.n	801d418 <_printf_common+0xa4>
 801d3da:	6823      	ldr	r3, [r4, #0]
 801d3dc:	6922      	ldr	r2, [r4, #16]
 801d3de:	f003 0306 	and.w	r3, r3, #6
 801d3e2:	2b04      	cmp	r3, #4
 801d3e4:	bf02      	ittt	eq
 801d3e6:	68e5      	ldreq	r5, [r4, #12]
 801d3e8:	6833      	ldreq	r3, [r6, #0]
 801d3ea:	1aed      	subeq	r5, r5, r3
 801d3ec:	68a3      	ldr	r3, [r4, #8]
 801d3ee:	bf0c      	ite	eq
 801d3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d3f4:	2500      	movne	r5, #0
 801d3f6:	4293      	cmp	r3, r2
 801d3f8:	bfc4      	itt	gt
 801d3fa:	1a9b      	subgt	r3, r3, r2
 801d3fc:	18ed      	addgt	r5, r5, r3
 801d3fe:	2600      	movs	r6, #0
 801d400:	341a      	adds	r4, #26
 801d402:	42b5      	cmp	r5, r6
 801d404:	d11a      	bne.n	801d43c <_printf_common+0xc8>
 801d406:	2000      	movs	r0, #0
 801d408:	e008      	b.n	801d41c <_printf_common+0xa8>
 801d40a:	2301      	movs	r3, #1
 801d40c:	4652      	mov	r2, sl
 801d40e:	4641      	mov	r1, r8
 801d410:	4638      	mov	r0, r7
 801d412:	47c8      	blx	r9
 801d414:	3001      	adds	r0, #1
 801d416:	d103      	bne.n	801d420 <_printf_common+0xac>
 801d418:	f04f 30ff 	mov.w	r0, #4294967295
 801d41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d420:	3501      	adds	r5, #1
 801d422:	e7c6      	b.n	801d3b2 <_printf_common+0x3e>
 801d424:	18e1      	adds	r1, r4, r3
 801d426:	1c5a      	adds	r2, r3, #1
 801d428:	2030      	movs	r0, #48	@ 0x30
 801d42a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d42e:	4422      	add	r2, r4
 801d430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d438:	3302      	adds	r3, #2
 801d43a:	e7c7      	b.n	801d3cc <_printf_common+0x58>
 801d43c:	2301      	movs	r3, #1
 801d43e:	4622      	mov	r2, r4
 801d440:	4641      	mov	r1, r8
 801d442:	4638      	mov	r0, r7
 801d444:	47c8      	blx	r9
 801d446:	3001      	adds	r0, #1
 801d448:	d0e6      	beq.n	801d418 <_printf_common+0xa4>
 801d44a:	3601      	adds	r6, #1
 801d44c:	e7d9      	b.n	801d402 <_printf_common+0x8e>
	...

0801d450 <_printf_i>:
 801d450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d454:	7e0f      	ldrb	r7, [r1, #24]
 801d456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d458:	2f78      	cmp	r7, #120	@ 0x78
 801d45a:	4691      	mov	r9, r2
 801d45c:	4680      	mov	r8, r0
 801d45e:	460c      	mov	r4, r1
 801d460:	469a      	mov	sl, r3
 801d462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d466:	d807      	bhi.n	801d478 <_printf_i+0x28>
 801d468:	2f62      	cmp	r7, #98	@ 0x62
 801d46a:	d80a      	bhi.n	801d482 <_printf_i+0x32>
 801d46c:	2f00      	cmp	r7, #0
 801d46e:	f000 80d2 	beq.w	801d616 <_printf_i+0x1c6>
 801d472:	2f58      	cmp	r7, #88	@ 0x58
 801d474:	f000 80b9 	beq.w	801d5ea <_printf_i+0x19a>
 801d478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d47c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d480:	e03a      	b.n	801d4f8 <_printf_i+0xa8>
 801d482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d486:	2b15      	cmp	r3, #21
 801d488:	d8f6      	bhi.n	801d478 <_printf_i+0x28>
 801d48a:	a101      	add	r1, pc, #4	@ (adr r1, 801d490 <_printf_i+0x40>)
 801d48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d490:	0801d4e9 	.word	0x0801d4e9
 801d494:	0801d4fd 	.word	0x0801d4fd
 801d498:	0801d479 	.word	0x0801d479
 801d49c:	0801d479 	.word	0x0801d479
 801d4a0:	0801d479 	.word	0x0801d479
 801d4a4:	0801d479 	.word	0x0801d479
 801d4a8:	0801d4fd 	.word	0x0801d4fd
 801d4ac:	0801d479 	.word	0x0801d479
 801d4b0:	0801d479 	.word	0x0801d479
 801d4b4:	0801d479 	.word	0x0801d479
 801d4b8:	0801d479 	.word	0x0801d479
 801d4bc:	0801d5fd 	.word	0x0801d5fd
 801d4c0:	0801d527 	.word	0x0801d527
 801d4c4:	0801d5b7 	.word	0x0801d5b7
 801d4c8:	0801d479 	.word	0x0801d479
 801d4cc:	0801d479 	.word	0x0801d479
 801d4d0:	0801d61f 	.word	0x0801d61f
 801d4d4:	0801d479 	.word	0x0801d479
 801d4d8:	0801d527 	.word	0x0801d527
 801d4dc:	0801d479 	.word	0x0801d479
 801d4e0:	0801d479 	.word	0x0801d479
 801d4e4:	0801d5bf 	.word	0x0801d5bf
 801d4e8:	6833      	ldr	r3, [r6, #0]
 801d4ea:	1d1a      	adds	r2, r3, #4
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	6032      	str	r2, [r6, #0]
 801d4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d4f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	e09d      	b.n	801d638 <_printf_i+0x1e8>
 801d4fc:	6833      	ldr	r3, [r6, #0]
 801d4fe:	6820      	ldr	r0, [r4, #0]
 801d500:	1d19      	adds	r1, r3, #4
 801d502:	6031      	str	r1, [r6, #0]
 801d504:	0606      	lsls	r6, r0, #24
 801d506:	d501      	bpl.n	801d50c <_printf_i+0xbc>
 801d508:	681d      	ldr	r5, [r3, #0]
 801d50a:	e003      	b.n	801d514 <_printf_i+0xc4>
 801d50c:	0645      	lsls	r5, r0, #25
 801d50e:	d5fb      	bpl.n	801d508 <_printf_i+0xb8>
 801d510:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d514:	2d00      	cmp	r5, #0
 801d516:	da03      	bge.n	801d520 <_printf_i+0xd0>
 801d518:	232d      	movs	r3, #45	@ 0x2d
 801d51a:	426d      	negs	r5, r5
 801d51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d520:	4859      	ldr	r0, [pc, #356]	@ (801d688 <_printf_i+0x238>)
 801d522:	230a      	movs	r3, #10
 801d524:	e011      	b.n	801d54a <_printf_i+0xfa>
 801d526:	6821      	ldr	r1, [r4, #0]
 801d528:	6833      	ldr	r3, [r6, #0]
 801d52a:	0608      	lsls	r0, r1, #24
 801d52c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d530:	d402      	bmi.n	801d538 <_printf_i+0xe8>
 801d532:	0649      	lsls	r1, r1, #25
 801d534:	bf48      	it	mi
 801d536:	b2ad      	uxthmi	r5, r5
 801d538:	2f6f      	cmp	r7, #111	@ 0x6f
 801d53a:	4853      	ldr	r0, [pc, #332]	@ (801d688 <_printf_i+0x238>)
 801d53c:	6033      	str	r3, [r6, #0]
 801d53e:	bf14      	ite	ne
 801d540:	230a      	movne	r3, #10
 801d542:	2308      	moveq	r3, #8
 801d544:	2100      	movs	r1, #0
 801d546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d54a:	6866      	ldr	r6, [r4, #4]
 801d54c:	60a6      	str	r6, [r4, #8]
 801d54e:	2e00      	cmp	r6, #0
 801d550:	bfa2      	ittt	ge
 801d552:	6821      	ldrge	r1, [r4, #0]
 801d554:	f021 0104 	bicge.w	r1, r1, #4
 801d558:	6021      	strge	r1, [r4, #0]
 801d55a:	b90d      	cbnz	r5, 801d560 <_printf_i+0x110>
 801d55c:	2e00      	cmp	r6, #0
 801d55e:	d04b      	beq.n	801d5f8 <_printf_i+0x1a8>
 801d560:	4616      	mov	r6, r2
 801d562:	fbb5 f1f3 	udiv	r1, r5, r3
 801d566:	fb03 5711 	mls	r7, r3, r1, r5
 801d56a:	5dc7      	ldrb	r7, [r0, r7]
 801d56c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d570:	462f      	mov	r7, r5
 801d572:	42bb      	cmp	r3, r7
 801d574:	460d      	mov	r5, r1
 801d576:	d9f4      	bls.n	801d562 <_printf_i+0x112>
 801d578:	2b08      	cmp	r3, #8
 801d57a:	d10b      	bne.n	801d594 <_printf_i+0x144>
 801d57c:	6823      	ldr	r3, [r4, #0]
 801d57e:	07df      	lsls	r7, r3, #31
 801d580:	d508      	bpl.n	801d594 <_printf_i+0x144>
 801d582:	6923      	ldr	r3, [r4, #16]
 801d584:	6861      	ldr	r1, [r4, #4]
 801d586:	4299      	cmp	r1, r3
 801d588:	bfde      	ittt	le
 801d58a:	2330      	movle	r3, #48	@ 0x30
 801d58c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d590:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d594:	1b92      	subs	r2, r2, r6
 801d596:	6122      	str	r2, [r4, #16]
 801d598:	f8cd a000 	str.w	sl, [sp]
 801d59c:	464b      	mov	r3, r9
 801d59e:	aa03      	add	r2, sp, #12
 801d5a0:	4621      	mov	r1, r4
 801d5a2:	4640      	mov	r0, r8
 801d5a4:	f7ff fee6 	bl	801d374 <_printf_common>
 801d5a8:	3001      	adds	r0, #1
 801d5aa:	d14a      	bne.n	801d642 <_printf_i+0x1f2>
 801d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 801d5b0:	b004      	add	sp, #16
 801d5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5b6:	6823      	ldr	r3, [r4, #0]
 801d5b8:	f043 0320 	orr.w	r3, r3, #32
 801d5bc:	6023      	str	r3, [r4, #0]
 801d5be:	4833      	ldr	r0, [pc, #204]	@ (801d68c <_printf_i+0x23c>)
 801d5c0:	2778      	movs	r7, #120	@ 0x78
 801d5c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d5c6:	6823      	ldr	r3, [r4, #0]
 801d5c8:	6831      	ldr	r1, [r6, #0]
 801d5ca:	061f      	lsls	r7, r3, #24
 801d5cc:	f851 5b04 	ldr.w	r5, [r1], #4
 801d5d0:	d402      	bmi.n	801d5d8 <_printf_i+0x188>
 801d5d2:	065f      	lsls	r7, r3, #25
 801d5d4:	bf48      	it	mi
 801d5d6:	b2ad      	uxthmi	r5, r5
 801d5d8:	6031      	str	r1, [r6, #0]
 801d5da:	07d9      	lsls	r1, r3, #31
 801d5dc:	bf44      	itt	mi
 801d5de:	f043 0320 	orrmi.w	r3, r3, #32
 801d5e2:	6023      	strmi	r3, [r4, #0]
 801d5e4:	b11d      	cbz	r5, 801d5ee <_printf_i+0x19e>
 801d5e6:	2310      	movs	r3, #16
 801d5e8:	e7ac      	b.n	801d544 <_printf_i+0xf4>
 801d5ea:	4827      	ldr	r0, [pc, #156]	@ (801d688 <_printf_i+0x238>)
 801d5ec:	e7e9      	b.n	801d5c2 <_printf_i+0x172>
 801d5ee:	6823      	ldr	r3, [r4, #0]
 801d5f0:	f023 0320 	bic.w	r3, r3, #32
 801d5f4:	6023      	str	r3, [r4, #0]
 801d5f6:	e7f6      	b.n	801d5e6 <_printf_i+0x196>
 801d5f8:	4616      	mov	r6, r2
 801d5fa:	e7bd      	b.n	801d578 <_printf_i+0x128>
 801d5fc:	6833      	ldr	r3, [r6, #0]
 801d5fe:	6825      	ldr	r5, [r4, #0]
 801d600:	6961      	ldr	r1, [r4, #20]
 801d602:	1d18      	adds	r0, r3, #4
 801d604:	6030      	str	r0, [r6, #0]
 801d606:	062e      	lsls	r6, r5, #24
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	d501      	bpl.n	801d610 <_printf_i+0x1c0>
 801d60c:	6019      	str	r1, [r3, #0]
 801d60e:	e002      	b.n	801d616 <_printf_i+0x1c6>
 801d610:	0668      	lsls	r0, r5, #25
 801d612:	d5fb      	bpl.n	801d60c <_printf_i+0x1bc>
 801d614:	8019      	strh	r1, [r3, #0]
 801d616:	2300      	movs	r3, #0
 801d618:	6123      	str	r3, [r4, #16]
 801d61a:	4616      	mov	r6, r2
 801d61c:	e7bc      	b.n	801d598 <_printf_i+0x148>
 801d61e:	6833      	ldr	r3, [r6, #0]
 801d620:	1d1a      	adds	r2, r3, #4
 801d622:	6032      	str	r2, [r6, #0]
 801d624:	681e      	ldr	r6, [r3, #0]
 801d626:	6862      	ldr	r2, [r4, #4]
 801d628:	2100      	movs	r1, #0
 801d62a:	4630      	mov	r0, r6
 801d62c:	f7e2 fe70 	bl	8000310 <memchr>
 801d630:	b108      	cbz	r0, 801d636 <_printf_i+0x1e6>
 801d632:	1b80      	subs	r0, r0, r6
 801d634:	6060      	str	r0, [r4, #4]
 801d636:	6863      	ldr	r3, [r4, #4]
 801d638:	6123      	str	r3, [r4, #16]
 801d63a:	2300      	movs	r3, #0
 801d63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d640:	e7aa      	b.n	801d598 <_printf_i+0x148>
 801d642:	6923      	ldr	r3, [r4, #16]
 801d644:	4632      	mov	r2, r6
 801d646:	4649      	mov	r1, r9
 801d648:	4640      	mov	r0, r8
 801d64a:	47d0      	blx	sl
 801d64c:	3001      	adds	r0, #1
 801d64e:	d0ad      	beq.n	801d5ac <_printf_i+0x15c>
 801d650:	6823      	ldr	r3, [r4, #0]
 801d652:	079b      	lsls	r3, r3, #30
 801d654:	d413      	bmi.n	801d67e <_printf_i+0x22e>
 801d656:	68e0      	ldr	r0, [r4, #12]
 801d658:	9b03      	ldr	r3, [sp, #12]
 801d65a:	4298      	cmp	r0, r3
 801d65c:	bfb8      	it	lt
 801d65e:	4618      	movlt	r0, r3
 801d660:	e7a6      	b.n	801d5b0 <_printf_i+0x160>
 801d662:	2301      	movs	r3, #1
 801d664:	4632      	mov	r2, r6
 801d666:	4649      	mov	r1, r9
 801d668:	4640      	mov	r0, r8
 801d66a:	47d0      	blx	sl
 801d66c:	3001      	adds	r0, #1
 801d66e:	d09d      	beq.n	801d5ac <_printf_i+0x15c>
 801d670:	3501      	adds	r5, #1
 801d672:	68e3      	ldr	r3, [r4, #12]
 801d674:	9903      	ldr	r1, [sp, #12]
 801d676:	1a5b      	subs	r3, r3, r1
 801d678:	42ab      	cmp	r3, r5
 801d67a:	dcf2      	bgt.n	801d662 <_printf_i+0x212>
 801d67c:	e7eb      	b.n	801d656 <_printf_i+0x206>
 801d67e:	2500      	movs	r5, #0
 801d680:	f104 0619 	add.w	r6, r4, #25
 801d684:	e7f5      	b.n	801d672 <_printf_i+0x222>
 801d686:	bf00      	nop
 801d688:	08022f90 	.word	0x08022f90
 801d68c:	08022fa1 	.word	0x08022fa1

0801d690 <std>:
 801d690:	2300      	movs	r3, #0
 801d692:	b510      	push	{r4, lr}
 801d694:	4604      	mov	r4, r0
 801d696:	e9c0 3300 	strd	r3, r3, [r0]
 801d69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d69e:	6083      	str	r3, [r0, #8]
 801d6a0:	8181      	strh	r1, [r0, #12]
 801d6a2:	6643      	str	r3, [r0, #100]	@ 0x64
 801d6a4:	81c2      	strh	r2, [r0, #14]
 801d6a6:	6183      	str	r3, [r0, #24]
 801d6a8:	4619      	mov	r1, r3
 801d6aa:	2208      	movs	r2, #8
 801d6ac:	305c      	adds	r0, #92	@ 0x5c
 801d6ae:	f000 fa57 	bl	801db60 <memset>
 801d6b2:	4b0d      	ldr	r3, [pc, #52]	@ (801d6e8 <std+0x58>)
 801d6b4:	6263      	str	r3, [r4, #36]	@ 0x24
 801d6b6:	4b0d      	ldr	r3, [pc, #52]	@ (801d6ec <std+0x5c>)
 801d6b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d6ba:	4b0d      	ldr	r3, [pc, #52]	@ (801d6f0 <std+0x60>)
 801d6bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d6be:	4b0d      	ldr	r3, [pc, #52]	@ (801d6f4 <std+0x64>)
 801d6c0:	6323      	str	r3, [r4, #48]	@ 0x30
 801d6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801d6f8 <std+0x68>)
 801d6c4:	6224      	str	r4, [r4, #32]
 801d6c6:	429c      	cmp	r4, r3
 801d6c8:	d006      	beq.n	801d6d8 <std+0x48>
 801d6ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d6ce:	4294      	cmp	r4, r2
 801d6d0:	d002      	beq.n	801d6d8 <std+0x48>
 801d6d2:	33d0      	adds	r3, #208	@ 0xd0
 801d6d4:	429c      	cmp	r4, r3
 801d6d6:	d105      	bne.n	801d6e4 <std+0x54>
 801d6d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6e0:	f000 bb0a 	b.w	801dcf8 <__retarget_lock_init_recursive>
 801d6e4:	bd10      	pop	{r4, pc}
 801d6e6:	bf00      	nop
 801d6e8:	0801d95d 	.word	0x0801d95d
 801d6ec:	0801d97f 	.word	0x0801d97f
 801d6f0:	0801d9b7 	.word	0x0801d9b7
 801d6f4:	0801d9db 	.word	0x0801d9db
 801d6f8:	2400cdc8 	.word	0x2400cdc8

0801d6fc <stdio_exit_handler>:
 801d6fc:	4a02      	ldr	r2, [pc, #8]	@ (801d708 <stdio_exit_handler+0xc>)
 801d6fe:	4903      	ldr	r1, [pc, #12]	@ (801d70c <stdio_exit_handler+0x10>)
 801d700:	4803      	ldr	r0, [pc, #12]	@ (801d710 <stdio_exit_handler+0x14>)
 801d702:	f000 b869 	b.w	801d7d8 <_fwalk_sglue>
 801d706:	bf00      	nop
 801d708:	24000038 	.word	0x24000038
 801d70c:	0801f855 	.word	0x0801f855
 801d710:	24000048 	.word	0x24000048

0801d714 <cleanup_stdio>:
 801d714:	6841      	ldr	r1, [r0, #4]
 801d716:	4b0c      	ldr	r3, [pc, #48]	@ (801d748 <cleanup_stdio+0x34>)
 801d718:	4299      	cmp	r1, r3
 801d71a:	b510      	push	{r4, lr}
 801d71c:	4604      	mov	r4, r0
 801d71e:	d001      	beq.n	801d724 <cleanup_stdio+0x10>
 801d720:	f002 f898 	bl	801f854 <_fflush_r>
 801d724:	68a1      	ldr	r1, [r4, #8]
 801d726:	4b09      	ldr	r3, [pc, #36]	@ (801d74c <cleanup_stdio+0x38>)
 801d728:	4299      	cmp	r1, r3
 801d72a:	d002      	beq.n	801d732 <cleanup_stdio+0x1e>
 801d72c:	4620      	mov	r0, r4
 801d72e:	f002 f891 	bl	801f854 <_fflush_r>
 801d732:	68e1      	ldr	r1, [r4, #12]
 801d734:	4b06      	ldr	r3, [pc, #24]	@ (801d750 <cleanup_stdio+0x3c>)
 801d736:	4299      	cmp	r1, r3
 801d738:	d004      	beq.n	801d744 <cleanup_stdio+0x30>
 801d73a:	4620      	mov	r0, r4
 801d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d740:	f002 b888 	b.w	801f854 <_fflush_r>
 801d744:	bd10      	pop	{r4, pc}
 801d746:	bf00      	nop
 801d748:	2400cdc8 	.word	0x2400cdc8
 801d74c:	2400ce30 	.word	0x2400ce30
 801d750:	2400ce98 	.word	0x2400ce98

0801d754 <global_stdio_init.part.0>:
 801d754:	b510      	push	{r4, lr}
 801d756:	4b0b      	ldr	r3, [pc, #44]	@ (801d784 <global_stdio_init.part.0+0x30>)
 801d758:	4c0b      	ldr	r4, [pc, #44]	@ (801d788 <global_stdio_init.part.0+0x34>)
 801d75a:	4a0c      	ldr	r2, [pc, #48]	@ (801d78c <global_stdio_init.part.0+0x38>)
 801d75c:	601a      	str	r2, [r3, #0]
 801d75e:	4620      	mov	r0, r4
 801d760:	2200      	movs	r2, #0
 801d762:	2104      	movs	r1, #4
 801d764:	f7ff ff94 	bl	801d690 <std>
 801d768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d76c:	2201      	movs	r2, #1
 801d76e:	2109      	movs	r1, #9
 801d770:	f7ff ff8e 	bl	801d690 <std>
 801d774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d778:	2202      	movs	r2, #2
 801d77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d77e:	2112      	movs	r1, #18
 801d780:	f7ff bf86 	b.w	801d690 <std>
 801d784:	2400cf00 	.word	0x2400cf00
 801d788:	2400cdc8 	.word	0x2400cdc8
 801d78c:	0801d6fd 	.word	0x0801d6fd

0801d790 <__sfp_lock_acquire>:
 801d790:	4801      	ldr	r0, [pc, #4]	@ (801d798 <__sfp_lock_acquire+0x8>)
 801d792:	f000 bab2 	b.w	801dcfa <__retarget_lock_acquire_recursive>
 801d796:	bf00      	nop
 801d798:	2400cf09 	.word	0x2400cf09

0801d79c <__sfp_lock_release>:
 801d79c:	4801      	ldr	r0, [pc, #4]	@ (801d7a4 <__sfp_lock_release+0x8>)
 801d79e:	f000 baad 	b.w	801dcfc <__retarget_lock_release_recursive>
 801d7a2:	bf00      	nop
 801d7a4:	2400cf09 	.word	0x2400cf09

0801d7a8 <__sinit>:
 801d7a8:	b510      	push	{r4, lr}
 801d7aa:	4604      	mov	r4, r0
 801d7ac:	f7ff fff0 	bl	801d790 <__sfp_lock_acquire>
 801d7b0:	6a23      	ldr	r3, [r4, #32]
 801d7b2:	b11b      	cbz	r3, 801d7bc <__sinit+0x14>
 801d7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7b8:	f7ff bff0 	b.w	801d79c <__sfp_lock_release>
 801d7bc:	4b04      	ldr	r3, [pc, #16]	@ (801d7d0 <__sinit+0x28>)
 801d7be:	6223      	str	r3, [r4, #32]
 801d7c0:	4b04      	ldr	r3, [pc, #16]	@ (801d7d4 <__sinit+0x2c>)
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d1f5      	bne.n	801d7b4 <__sinit+0xc>
 801d7c8:	f7ff ffc4 	bl	801d754 <global_stdio_init.part.0>
 801d7cc:	e7f2      	b.n	801d7b4 <__sinit+0xc>
 801d7ce:	bf00      	nop
 801d7d0:	0801d715 	.word	0x0801d715
 801d7d4:	2400cf00 	.word	0x2400cf00

0801d7d8 <_fwalk_sglue>:
 801d7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7dc:	4607      	mov	r7, r0
 801d7de:	4688      	mov	r8, r1
 801d7e0:	4614      	mov	r4, r2
 801d7e2:	2600      	movs	r6, #0
 801d7e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d7e8:	f1b9 0901 	subs.w	r9, r9, #1
 801d7ec:	d505      	bpl.n	801d7fa <_fwalk_sglue+0x22>
 801d7ee:	6824      	ldr	r4, [r4, #0]
 801d7f0:	2c00      	cmp	r4, #0
 801d7f2:	d1f7      	bne.n	801d7e4 <_fwalk_sglue+0xc>
 801d7f4:	4630      	mov	r0, r6
 801d7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7fa:	89ab      	ldrh	r3, [r5, #12]
 801d7fc:	2b01      	cmp	r3, #1
 801d7fe:	d907      	bls.n	801d810 <_fwalk_sglue+0x38>
 801d800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d804:	3301      	adds	r3, #1
 801d806:	d003      	beq.n	801d810 <_fwalk_sglue+0x38>
 801d808:	4629      	mov	r1, r5
 801d80a:	4638      	mov	r0, r7
 801d80c:	47c0      	blx	r8
 801d80e:	4306      	orrs	r6, r0
 801d810:	3568      	adds	r5, #104	@ 0x68
 801d812:	e7e9      	b.n	801d7e8 <_fwalk_sglue+0x10>

0801d814 <iprintf>:
 801d814:	b40f      	push	{r0, r1, r2, r3}
 801d816:	b507      	push	{r0, r1, r2, lr}
 801d818:	4906      	ldr	r1, [pc, #24]	@ (801d834 <iprintf+0x20>)
 801d81a:	ab04      	add	r3, sp, #16
 801d81c:	6808      	ldr	r0, [r1, #0]
 801d81e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d822:	6881      	ldr	r1, [r0, #8]
 801d824:	9301      	str	r3, [sp, #4]
 801d826:	f001 fe79 	bl	801f51c <_vfiprintf_r>
 801d82a:	b003      	add	sp, #12
 801d82c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d830:	b004      	add	sp, #16
 801d832:	4770      	bx	lr
 801d834:	24000044 	.word	0x24000044

0801d838 <_puts_r>:
 801d838:	6a03      	ldr	r3, [r0, #32]
 801d83a:	b570      	push	{r4, r5, r6, lr}
 801d83c:	6884      	ldr	r4, [r0, #8]
 801d83e:	4605      	mov	r5, r0
 801d840:	460e      	mov	r6, r1
 801d842:	b90b      	cbnz	r3, 801d848 <_puts_r+0x10>
 801d844:	f7ff ffb0 	bl	801d7a8 <__sinit>
 801d848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d84a:	07db      	lsls	r3, r3, #31
 801d84c:	d405      	bmi.n	801d85a <_puts_r+0x22>
 801d84e:	89a3      	ldrh	r3, [r4, #12]
 801d850:	0598      	lsls	r0, r3, #22
 801d852:	d402      	bmi.n	801d85a <_puts_r+0x22>
 801d854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d856:	f000 fa50 	bl	801dcfa <__retarget_lock_acquire_recursive>
 801d85a:	89a3      	ldrh	r3, [r4, #12]
 801d85c:	0719      	lsls	r1, r3, #28
 801d85e:	d502      	bpl.n	801d866 <_puts_r+0x2e>
 801d860:	6923      	ldr	r3, [r4, #16]
 801d862:	2b00      	cmp	r3, #0
 801d864:	d135      	bne.n	801d8d2 <_puts_r+0x9a>
 801d866:	4621      	mov	r1, r4
 801d868:	4628      	mov	r0, r5
 801d86a:	f000 f8f9 	bl	801da60 <__swsetup_r>
 801d86e:	b380      	cbz	r0, 801d8d2 <_puts_r+0x9a>
 801d870:	f04f 35ff 	mov.w	r5, #4294967295
 801d874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d876:	07da      	lsls	r2, r3, #31
 801d878:	d405      	bmi.n	801d886 <_puts_r+0x4e>
 801d87a:	89a3      	ldrh	r3, [r4, #12]
 801d87c:	059b      	lsls	r3, r3, #22
 801d87e:	d402      	bmi.n	801d886 <_puts_r+0x4e>
 801d880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d882:	f000 fa3b 	bl	801dcfc <__retarget_lock_release_recursive>
 801d886:	4628      	mov	r0, r5
 801d888:	bd70      	pop	{r4, r5, r6, pc}
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	da04      	bge.n	801d898 <_puts_r+0x60>
 801d88e:	69a2      	ldr	r2, [r4, #24]
 801d890:	429a      	cmp	r2, r3
 801d892:	dc17      	bgt.n	801d8c4 <_puts_r+0x8c>
 801d894:	290a      	cmp	r1, #10
 801d896:	d015      	beq.n	801d8c4 <_puts_r+0x8c>
 801d898:	6823      	ldr	r3, [r4, #0]
 801d89a:	1c5a      	adds	r2, r3, #1
 801d89c:	6022      	str	r2, [r4, #0]
 801d89e:	7019      	strb	r1, [r3, #0]
 801d8a0:	68a3      	ldr	r3, [r4, #8]
 801d8a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d8a6:	3b01      	subs	r3, #1
 801d8a8:	60a3      	str	r3, [r4, #8]
 801d8aa:	2900      	cmp	r1, #0
 801d8ac:	d1ed      	bne.n	801d88a <_puts_r+0x52>
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	da11      	bge.n	801d8d6 <_puts_r+0x9e>
 801d8b2:	4622      	mov	r2, r4
 801d8b4:	210a      	movs	r1, #10
 801d8b6:	4628      	mov	r0, r5
 801d8b8:	f000 f893 	bl	801d9e2 <__swbuf_r>
 801d8bc:	3001      	adds	r0, #1
 801d8be:	d0d7      	beq.n	801d870 <_puts_r+0x38>
 801d8c0:	250a      	movs	r5, #10
 801d8c2:	e7d7      	b.n	801d874 <_puts_r+0x3c>
 801d8c4:	4622      	mov	r2, r4
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	f000 f88b 	bl	801d9e2 <__swbuf_r>
 801d8cc:	3001      	adds	r0, #1
 801d8ce:	d1e7      	bne.n	801d8a0 <_puts_r+0x68>
 801d8d0:	e7ce      	b.n	801d870 <_puts_r+0x38>
 801d8d2:	3e01      	subs	r6, #1
 801d8d4:	e7e4      	b.n	801d8a0 <_puts_r+0x68>
 801d8d6:	6823      	ldr	r3, [r4, #0]
 801d8d8:	1c5a      	adds	r2, r3, #1
 801d8da:	6022      	str	r2, [r4, #0]
 801d8dc:	220a      	movs	r2, #10
 801d8de:	701a      	strb	r2, [r3, #0]
 801d8e0:	e7ee      	b.n	801d8c0 <_puts_r+0x88>
	...

0801d8e4 <puts>:
 801d8e4:	4b02      	ldr	r3, [pc, #8]	@ (801d8f0 <puts+0xc>)
 801d8e6:	4601      	mov	r1, r0
 801d8e8:	6818      	ldr	r0, [r3, #0]
 801d8ea:	f7ff bfa5 	b.w	801d838 <_puts_r>
 801d8ee:	bf00      	nop
 801d8f0:	24000044 	.word	0x24000044

0801d8f4 <sniprintf>:
 801d8f4:	b40c      	push	{r2, r3}
 801d8f6:	b530      	push	{r4, r5, lr}
 801d8f8:	4b17      	ldr	r3, [pc, #92]	@ (801d958 <sniprintf+0x64>)
 801d8fa:	1e0c      	subs	r4, r1, #0
 801d8fc:	681d      	ldr	r5, [r3, #0]
 801d8fe:	b09d      	sub	sp, #116	@ 0x74
 801d900:	da08      	bge.n	801d914 <sniprintf+0x20>
 801d902:	238b      	movs	r3, #139	@ 0x8b
 801d904:	602b      	str	r3, [r5, #0]
 801d906:	f04f 30ff 	mov.w	r0, #4294967295
 801d90a:	b01d      	add	sp, #116	@ 0x74
 801d90c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d910:	b002      	add	sp, #8
 801d912:	4770      	bx	lr
 801d914:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d918:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d91c:	bf14      	ite	ne
 801d91e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d922:	4623      	moveq	r3, r4
 801d924:	9304      	str	r3, [sp, #16]
 801d926:	9307      	str	r3, [sp, #28]
 801d928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d92c:	9002      	str	r0, [sp, #8]
 801d92e:	9006      	str	r0, [sp, #24]
 801d930:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d934:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d936:	ab21      	add	r3, sp, #132	@ 0x84
 801d938:	a902      	add	r1, sp, #8
 801d93a:	4628      	mov	r0, r5
 801d93c:	9301      	str	r3, [sp, #4]
 801d93e:	f001 fcc7 	bl	801f2d0 <_svfiprintf_r>
 801d942:	1c43      	adds	r3, r0, #1
 801d944:	bfbc      	itt	lt
 801d946:	238b      	movlt	r3, #139	@ 0x8b
 801d948:	602b      	strlt	r3, [r5, #0]
 801d94a:	2c00      	cmp	r4, #0
 801d94c:	d0dd      	beq.n	801d90a <sniprintf+0x16>
 801d94e:	9b02      	ldr	r3, [sp, #8]
 801d950:	2200      	movs	r2, #0
 801d952:	701a      	strb	r2, [r3, #0]
 801d954:	e7d9      	b.n	801d90a <sniprintf+0x16>
 801d956:	bf00      	nop
 801d958:	24000044 	.word	0x24000044

0801d95c <__sread>:
 801d95c:	b510      	push	{r4, lr}
 801d95e:	460c      	mov	r4, r1
 801d960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d964:	f000 f980 	bl	801dc68 <_read_r>
 801d968:	2800      	cmp	r0, #0
 801d96a:	bfab      	itete	ge
 801d96c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d96e:	89a3      	ldrhlt	r3, [r4, #12]
 801d970:	181b      	addge	r3, r3, r0
 801d972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d976:	bfac      	ite	ge
 801d978:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d97a:	81a3      	strhlt	r3, [r4, #12]
 801d97c:	bd10      	pop	{r4, pc}

0801d97e <__swrite>:
 801d97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d982:	461f      	mov	r7, r3
 801d984:	898b      	ldrh	r3, [r1, #12]
 801d986:	05db      	lsls	r3, r3, #23
 801d988:	4605      	mov	r5, r0
 801d98a:	460c      	mov	r4, r1
 801d98c:	4616      	mov	r6, r2
 801d98e:	d505      	bpl.n	801d99c <__swrite+0x1e>
 801d990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d994:	2302      	movs	r3, #2
 801d996:	2200      	movs	r2, #0
 801d998:	f000 f954 	bl	801dc44 <_lseek_r>
 801d99c:	89a3      	ldrh	r3, [r4, #12]
 801d99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d9a6:	81a3      	strh	r3, [r4, #12]
 801d9a8:	4632      	mov	r2, r6
 801d9aa:	463b      	mov	r3, r7
 801d9ac:	4628      	mov	r0, r5
 801d9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9b2:	f000 b96b 	b.w	801dc8c <_write_r>

0801d9b6 <__sseek>:
 801d9b6:	b510      	push	{r4, lr}
 801d9b8:	460c      	mov	r4, r1
 801d9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9be:	f000 f941 	bl	801dc44 <_lseek_r>
 801d9c2:	1c43      	adds	r3, r0, #1
 801d9c4:	89a3      	ldrh	r3, [r4, #12]
 801d9c6:	bf15      	itete	ne
 801d9c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d9ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d9ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d9d2:	81a3      	strheq	r3, [r4, #12]
 801d9d4:	bf18      	it	ne
 801d9d6:	81a3      	strhne	r3, [r4, #12]
 801d9d8:	bd10      	pop	{r4, pc}

0801d9da <__sclose>:
 801d9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9de:	f000 b8cb 	b.w	801db78 <_close_r>

0801d9e2 <__swbuf_r>:
 801d9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9e4:	460e      	mov	r6, r1
 801d9e6:	4614      	mov	r4, r2
 801d9e8:	4605      	mov	r5, r0
 801d9ea:	b118      	cbz	r0, 801d9f4 <__swbuf_r+0x12>
 801d9ec:	6a03      	ldr	r3, [r0, #32]
 801d9ee:	b90b      	cbnz	r3, 801d9f4 <__swbuf_r+0x12>
 801d9f0:	f7ff feda 	bl	801d7a8 <__sinit>
 801d9f4:	69a3      	ldr	r3, [r4, #24]
 801d9f6:	60a3      	str	r3, [r4, #8]
 801d9f8:	89a3      	ldrh	r3, [r4, #12]
 801d9fa:	071a      	lsls	r2, r3, #28
 801d9fc:	d501      	bpl.n	801da02 <__swbuf_r+0x20>
 801d9fe:	6923      	ldr	r3, [r4, #16]
 801da00:	b943      	cbnz	r3, 801da14 <__swbuf_r+0x32>
 801da02:	4621      	mov	r1, r4
 801da04:	4628      	mov	r0, r5
 801da06:	f000 f82b 	bl	801da60 <__swsetup_r>
 801da0a:	b118      	cbz	r0, 801da14 <__swbuf_r+0x32>
 801da0c:	f04f 37ff 	mov.w	r7, #4294967295
 801da10:	4638      	mov	r0, r7
 801da12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da14:	6823      	ldr	r3, [r4, #0]
 801da16:	6922      	ldr	r2, [r4, #16]
 801da18:	1a98      	subs	r0, r3, r2
 801da1a:	6963      	ldr	r3, [r4, #20]
 801da1c:	b2f6      	uxtb	r6, r6
 801da1e:	4283      	cmp	r3, r0
 801da20:	4637      	mov	r7, r6
 801da22:	dc05      	bgt.n	801da30 <__swbuf_r+0x4e>
 801da24:	4621      	mov	r1, r4
 801da26:	4628      	mov	r0, r5
 801da28:	f001 ff14 	bl	801f854 <_fflush_r>
 801da2c:	2800      	cmp	r0, #0
 801da2e:	d1ed      	bne.n	801da0c <__swbuf_r+0x2a>
 801da30:	68a3      	ldr	r3, [r4, #8]
 801da32:	3b01      	subs	r3, #1
 801da34:	60a3      	str	r3, [r4, #8]
 801da36:	6823      	ldr	r3, [r4, #0]
 801da38:	1c5a      	adds	r2, r3, #1
 801da3a:	6022      	str	r2, [r4, #0]
 801da3c:	701e      	strb	r6, [r3, #0]
 801da3e:	6962      	ldr	r2, [r4, #20]
 801da40:	1c43      	adds	r3, r0, #1
 801da42:	429a      	cmp	r2, r3
 801da44:	d004      	beq.n	801da50 <__swbuf_r+0x6e>
 801da46:	89a3      	ldrh	r3, [r4, #12]
 801da48:	07db      	lsls	r3, r3, #31
 801da4a:	d5e1      	bpl.n	801da10 <__swbuf_r+0x2e>
 801da4c:	2e0a      	cmp	r6, #10
 801da4e:	d1df      	bne.n	801da10 <__swbuf_r+0x2e>
 801da50:	4621      	mov	r1, r4
 801da52:	4628      	mov	r0, r5
 801da54:	f001 fefe 	bl	801f854 <_fflush_r>
 801da58:	2800      	cmp	r0, #0
 801da5a:	d0d9      	beq.n	801da10 <__swbuf_r+0x2e>
 801da5c:	e7d6      	b.n	801da0c <__swbuf_r+0x2a>
	...

0801da60 <__swsetup_r>:
 801da60:	b538      	push	{r3, r4, r5, lr}
 801da62:	4b29      	ldr	r3, [pc, #164]	@ (801db08 <__swsetup_r+0xa8>)
 801da64:	4605      	mov	r5, r0
 801da66:	6818      	ldr	r0, [r3, #0]
 801da68:	460c      	mov	r4, r1
 801da6a:	b118      	cbz	r0, 801da74 <__swsetup_r+0x14>
 801da6c:	6a03      	ldr	r3, [r0, #32]
 801da6e:	b90b      	cbnz	r3, 801da74 <__swsetup_r+0x14>
 801da70:	f7ff fe9a 	bl	801d7a8 <__sinit>
 801da74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da78:	0719      	lsls	r1, r3, #28
 801da7a:	d422      	bmi.n	801dac2 <__swsetup_r+0x62>
 801da7c:	06da      	lsls	r2, r3, #27
 801da7e:	d407      	bmi.n	801da90 <__swsetup_r+0x30>
 801da80:	2209      	movs	r2, #9
 801da82:	602a      	str	r2, [r5, #0]
 801da84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da88:	81a3      	strh	r3, [r4, #12]
 801da8a:	f04f 30ff 	mov.w	r0, #4294967295
 801da8e:	e033      	b.n	801daf8 <__swsetup_r+0x98>
 801da90:	0758      	lsls	r0, r3, #29
 801da92:	d512      	bpl.n	801daba <__swsetup_r+0x5a>
 801da94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da96:	b141      	cbz	r1, 801daaa <__swsetup_r+0x4a>
 801da98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da9c:	4299      	cmp	r1, r3
 801da9e:	d002      	beq.n	801daa6 <__swsetup_r+0x46>
 801daa0:	4628      	mov	r0, r5
 801daa2:	f000 ff37 	bl	801e914 <_free_r>
 801daa6:	2300      	movs	r3, #0
 801daa8:	6363      	str	r3, [r4, #52]	@ 0x34
 801daaa:	89a3      	ldrh	r3, [r4, #12]
 801daac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dab0:	81a3      	strh	r3, [r4, #12]
 801dab2:	2300      	movs	r3, #0
 801dab4:	6063      	str	r3, [r4, #4]
 801dab6:	6923      	ldr	r3, [r4, #16]
 801dab8:	6023      	str	r3, [r4, #0]
 801daba:	89a3      	ldrh	r3, [r4, #12]
 801dabc:	f043 0308 	orr.w	r3, r3, #8
 801dac0:	81a3      	strh	r3, [r4, #12]
 801dac2:	6923      	ldr	r3, [r4, #16]
 801dac4:	b94b      	cbnz	r3, 801dada <__swsetup_r+0x7a>
 801dac6:	89a3      	ldrh	r3, [r4, #12]
 801dac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dad0:	d003      	beq.n	801dada <__swsetup_r+0x7a>
 801dad2:	4621      	mov	r1, r4
 801dad4:	4628      	mov	r0, r5
 801dad6:	f001 ff1d 	bl	801f914 <__smakebuf_r>
 801dada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dade:	f013 0201 	ands.w	r2, r3, #1
 801dae2:	d00a      	beq.n	801dafa <__swsetup_r+0x9a>
 801dae4:	2200      	movs	r2, #0
 801dae6:	60a2      	str	r2, [r4, #8]
 801dae8:	6962      	ldr	r2, [r4, #20]
 801daea:	4252      	negs	r2, r2
 801daec:	61a2      	str	r2, [r4, #24]
 801daee:	6922      	ldr	r2, [r4, #16]
 801daf0:	b942      	cbnz	r2, 801db04 <__swsetup_r+0xa4>
 801daf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801daf6:	d1c5      	bne.n	801da84 <__swsetup_r+0x24>
 801daf8:	bd38      	pop	{r3, r4, r5, pc}
 801dafa:	0799      	lsls	r1, r3, #30
 801dafc:	bf58      	it	pl
 801dafe:	6962      	ldrpl	r2, [r4, #20]
 801db00:	60a2      	str	r2, [r4, #8]
 801db02:	e7f4      	b.n	801daee <__swsetup_r+0x8e>
 801db04:	2000      	movs	r0, #0
 801db06:	e7f7      	b.n	801daf8 <__swsetup_r+0x98>
 801db08:	24000044 	.word	0x24000044

0801db0c <memcmp>:
 801db0c:	b510      	push	{r4, lr}
 801db0e:	3901      	subs	r1, #1
 801db10:	4402      	add	r2, r0
 801db12:	4290      	cmp	r0, r2
 801db14:	d101      	bne.n	801db1a <memcmp+0xe>
 801db16:	2000      	movs	r0, #0
 801db18:	e005      	b.n	801db26 <memcmp+0x1a>
 801db1a:	7803      	ldrb	r3, [r0, #0]
 801db1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801db20:	42a3      	cmp	r3, r4
 801db22:	d001      	beq.n	801db28 <memcmp+0x1c>
 801db24:	1b18      	subs	r0, r3, r4
 801db26:	bd10      	pop	{r4, pc}
 801db28:	3001      	adds	r0, #1
 801db2a:	e7f2      	b.n	801db12 <memcmp+0x6>

0801db2c <memmove>:
 801db2c:	4288      	cmp	r0, r1
 801db2e:	b510      	push	{r4, lr}
 801db30:	eb01 0402 	add.w	r4, r1, r2
 801db34:	d902      	bls.n	801db3c <memmove+0x10>
 801db36:	4284      	cmp	r4, r0
 801db38:	4623      	mov	r3, r4
 801db3a:	d807      	bhi.n	801db4c <memmove+0x20>
 801db3c:	1e43      	subs	r3, r0, #1
 801db3e:	42a1      	cmp	r1, r4
 801db40:	d008      	beq.n	801db54 <memmove+0x28>
 801db42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db46:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db4a:	e7f8      	b.n	801db3e <memmove+0x12>
 801db4c:	4402      	add	r2, r0
 801db4e:	4601      	mov	r1, r0
 801db50:	428a      	cmp	r2, r1
 801db52:	d100      	bne.n	801db56 <memmove+0x2a>
 801db54:	bd10      	pop	{r4, pc}
 801db56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db5e:	e7f7      	b.n	801db50 <memmove+0x24>

0801db60 <memset>:
 801db60:	4402      	add	r2, r0
 801db62:	4603      	mov	r3, r0
 801db64:	4293      	cmp	r3, r2
 801db66:	d100      	bne.n	801db6a <memset+0xa>
 801db68:	4770      	bx	lr
 801db6a:	f803 1b01 	strb.w	r1, [r3], #1
 801db6e:	e7f9      	b.n	801db64 <memset+0x4>

0801db70 <_localeconv_r>:
 801db70:	4800      	ldr	r0, [pc, #0]	@ (801db74 <_localeconv_r+0x4>)
 801db72:	4770      	bx	lr
 801db74:	24000184 	.word	0x24000184

0801db78 <_close_r>:
 801db78:	b538      	push	{r3, r4, r5, lr}
 801db7a:	4d06      	ldr	r5, [pc, #24]	@ (801db94 <_close_r+0x1c>)
 801db7c:	2300      	movs	r3, #0
 801db7e:	4604      	mov	r4, r0
 801db80:	4608      	mov	r0, r1
 801db82:	602b      	str	r3, [r5, #0]
 801db84:	f7e3 fe54 	bl	8001830 <_close>
 801db88:	1c43      	adds	r3, r0, #1
 801db8a:	d102      	bne.n	801db92 <_close_r+0x1a>
 801db8c:	682b      	ldr	r3, [r5, #0]
 801db8e:	b103      	cbz	r3, 801db92 <_close_r+0x1a>
 801db90:	6023      	str	r3, [r4, #0]
 801db92:	bd38      	pop	{r3, r4, r5, pc}
 801db94:	2400cf04 	.word	0x2400cf04

0801db98 <_reclaim_reent>:
 801db98:	4b29      	ldr	r3, [pc, #164]	@ (801dc40 <_reclaim_reent+0xa8>)
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	4283      	cmp	r3, r0
 801db9e:	b570      	push	{r4, r5, r6, lr}
 801dba0:	4604      	mov	r4, r0
 801dba2:	d04b      	beq.n	801dc3c <_reclaim_reent+0xa4>
 801dba4:	69c3      	ldr	r3, [r0, #28]
 801dba6:	b1ab      	cbz	r3, 801dbd4 <_reclaim_reent+0x3c>
 801dba8:	68db      	ldr	r3, [r3, #12]
 801dbaa:	b16b      	cbz	r3, 801dbc8 <_reclaim_reent+0x30>
 801dbac:	2500      	movs	r5, #0
 801dbae:	69e3      	ldr	r3, [r4, #28]
 801dbb0:	68db      	ldr	r3, [r3, #12]
 801dbb2:	5959      	ldr	r1, [r3, r5]
 801dbb4:	2900      	cmp	r1, #0
 801dbb6:	d13b      	bne.n	801dc30 <_reclaim_reent+0x98>
 801dbb8:	3504      	adds	r5, #4
 801dbba:	2d80      	cmp	r5, #128	@ 0x80
 801dbbc:	d1f7      	bne.n	801dbae <_reclaim_reent+0x16>
 801dbbe:	69e3      	ldr	r3, [r4, #28]
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	68d9      	ldr	r1, [r3, #12]
 801dbc4:	f000 fea6 	bl	801e914 <_free_r>
 801dbc8:	69e3      	ldr	r3, [r4, #28]
 801dbca:	6819      	ldr	r1, [r3, #0]
 801dbcc:	b111      	cbz	r1, 801dbd4 <_reclaim_reent+0x3c>
 801dbce:	4620      	mov	r0, r4
 801dbd0:	f000 fea0 	bl	801e914 <_free_r>
 801dbd4:	6961      	ldr	r1, [r4, #20]
 801dbd6:	b111      	cbz	r1, 801dbde <_reclaim_reent+0x46>
 801dbd8:	4620      	mov	r0, r4
 801dbda:	f000 fe9b 	bl	801e914 <_free_r>
 801dbde:	69e1      	ldr	r1, [r4, #28]
 801dbe0:	b111      	cbz	r1, 801dbe8 <_reclaim_reent+0x50>
 801dbe2:	4620      	mov	r0, r4
 801dbe4:	f000 fe96 	bl	801e914 <_free_r>
 801dbe8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dbea:	b111      	cbz	r1, 801dbf2 <_reclaim_reent+0x5a>
 801dbec:	4620      	mov	r0, r4
 801dbee:	f000 fe91 	bl	801e914 <_free_r>
 801dbf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dbf4:	b111      	cbz	r1, 801dbfc <_reclaim_reent+0x64>
 801dbf6:	4620      	mov	r0, r4
 801dbf8:	f000 fe8c 	bl	801e914 <_free_r>
 801dbfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801dbfe:	b111      	cbz	r1, 801dc06 <_reclaim_reent+0x6e>
 801dc00:	4620      	mov	r0, r4
 801dc02:	f000 fe87 	bl	801e914 <_free_r>
 801dc06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801dc08:	b111      	cbz	r1, 801dc10 <_reclaim_reent+0x78>
 801dc0a:	4620      	mov	r0, r4
 801dc0c:	f000 fe82 	bl	801e914 <_free_r>
 801dc10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801dc12:	b111      	cbz	r1, 801dc1a <_reclaim_reent+0x82>
 801dc14:	4620      	mov	r0, r4
 801dc16:	f000 fe7d 	bl	801e914 <_free_r>
 801dc1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801dc1c:	b111      	cbz	r1, 801dc24 <_reclaim_reent+0x8c>
 801dc1e:	4620      	mov	r0, r4
 801dc20:	f000 fe78 	bl	801e914 <_free_r>
 801dc24:	6a23      	ldr	r3, [r4, #32]
 801dc26:	b14b      	cbz	r3, 801dc3c <_reclaim_reent+0xa4>
 801dc28:	4620      	mov	r0, r4
 801dc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc2e:	4718      	bx	r3
 801dc30:	680e      	ldr	r6, [r1, #0]
 801dc32:	4620      	mov	r0, r4
 801dc34:	f000 fe6e 	bl	801e914 <_free_r>
 801dc38:	4631      	mov	r1, r6
 801dc3a:	e7bb      	b.n	801dbb4 <_reclaim_reent+0x1c>
 801dc3c:	bd70      	pop	{r4, r5, r6, pc}
 801dc3e:	bf00      	nop
 801dc40:	24000044 	.word	0x24000044

0801dc44 <_lseek_r>:
 801dc44:	b538      	push	{r3, r4, r5, lr}
 801dc46:	4d07      	ldr	r5, [pc, #28]	@ (801dc64 <_lseek_r+0x20>)
 801dc48:	4604      	mov	r4, r0
 801dc4a:	4608      	mov	r0, r1
 801dc4c:	4611      	mov	r1, r2
 801dc4e:	2200      	movs	r2, #0
 801dc50:	602a      	str	r2, [r5, #0]
 801dc52:	461a      	mov	r2, r3
 801dc54:	f7e3 fe13 	bl	800187e <_lseek>
 801dc58:	1c43      	adds	r3, r0, #1
 801dc5a:	d102      	bne.n	801dc62 <_lseek_r+0x1e>
 801dc5c:	682b      	ldr	r3, [r5, #0]
 801dc5e:	b103      	cbz	r3, 801dc62 <_lseek_r+0x1e>
 801dc60:	6023      	str	r3, [r4, #0]
 801dc62:	bd38      	pop	{r3, r4, r5, pc}
 801dc64:	2400cf04 	.word	0x2400cf04

0801dc68 <_read_r>:
 801dc68:	b538      	push	{r3, r4, r5, lr}
 801dc6a:	4d07      	ldr	r5, [pc, #28]	@ (801dc88 <_read_r+0x20>)
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	4608      	mov	r0, r1
 801dc70:	4611      	mov	r1, r2
 801dc72:	2200      	movs	r2, #0
 801dc74:	602a      	str	r2, [r5, #0]
 801dc76:	461a      	mov	r2, r3
 801dc78:	f7e3 fdbd 	bl	80017f6 <_read>
 801dc7c:	1c43      	adds	r3, r0, #1
 801dc7e:	d102      	bne.n	801dc86 <_read_r+0x1e>
 801dc80:	682b      	ldr	r3, [r5, #0]
 801dc82:	b103      	cbz	r3, 801dc86 <_read_r+0x1e>
 801dc84:	6023      	str	r3, [r4, #0]
 801dc86:	bd38      	pop	{r3, r4, r5, pc}
 801dc88:	2400cf04 	.word	0x2400cf04

0801dc8c <_write_r>:
 801dc8c:	b538      	push	{r3, r4, r5, lr}
 801dc8e:	4d07      	ldr	r5, [pc, #28]	@ (801dcac <_write_r+0x20>)
 801dc90:	4604      	mov	r4, r0
 801dc92:	4608      	mov	r0, r1
 801dc94:	4611      	mov	r1, r2
 801dc96:	2200      	movs	r2, #0
 801dc98:	602a      	str	r2, [r5, #0]
 801dc9a:	461a      	mov	r2, r3
 801dc9c:	f7e2 fe76 	bl	800098c <_write>
 801dca0:	1c43      	adds	r3, r0, #1
 801dca2:	d102      	bne.n	801dcaa <_write_r+0x1e>
 801dca4:	682b      	ldr	r3, [r5, #0]
 801dca6:	b103      	cbz	r3, 801dcaa <_write_r+0x1e>
 801dca8:	6023      	str	r3, [r4, #0]
 801dcaa:	bd38      	pop	{r3, r4, r5, pc}
 801dcac:	2400cf04 	.word	0x2400cf04

0801dcb0 <__libc_init_array>:
 801dcb0:	b570      	push	{r4, r5, r6, lr}
 801dcb2:	4d0d      	ldr	r5, [pc, #52]	@ (801dce8 <__libc_init_array+0x38>)
 801dcb4:	4c0d      	ldr	r4, [pc, #52]	@ (801dcec <__libc_init_array+0x3c>)
 801dcb6:	1b64      	subs	r4, r4, r5
 801dcb8:	10a4      	asrs	r4, r4, #2
 801dcba:	2600      	movs	r6, #0
 801dcbc:	42a6      	cmp	r6, r4
 801dcbe:	d109      	bne.n	801dcd4 <__libc_init_array+0x24>
 801dcc0:	4d0b      	ldr	r5, [pc, #44]	@ (801dcf0 <__libc_init_array+0x40>)
 801dcc2:	4c0c      	ldr	r4, [pc, #48]	@ (801dcf4 <__libc_init_array+0x44>)
 801dcc4:	f001 ff48 	bl	801fb58 <_init>
 801dcc8:	1b64      	subs	r4, r4, r5
 801dcca:	10a4      	asrs	r4, r4, #2
 801dccc:	2600      	movs	r6, #0
 801dcce:	42a6      	cmp	r6, r4
 801dcd0:	d105      	bne.n	801dcde <__libc_init_array+0x2e>
 801dcd2:	bd70      	pop	{r4, r5, r6, pc}
 801dcd4:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcd8:	4798      	blx	r3
 801dcda:	3601      	adds	r6, #1
 801dcdc:	e7ee      	b.n	801dcbc <__libc_init_array+0xc>
 801dcde:	f855 3b04 	ldr.w	r3, [r5], #4
 801dce2:	4798      	blx	r3
 801dce4:	3601      	adds	r6, #1
 801dce6:	e7f2      	b.n	801dcce <__libc_init_array+0x1e>
 801dce8:	080231e4 	.word	0x080231e4
 801dcec:	080231e4 	.word	0x080231e4
 801dcf0:	080231e4 	.word	0x080231e4
 801dcf4:	080231e8 	.word	0x080231e8

0801dcf8 <__retarget_lock_init_recursive>:
 801dcf8:	4770      	bx	lr

0801dcfa <__retarget_lock_acquire_recursive>:
 801dcfa:	4770      	bx	lr

0801dcfc <__retarget_lock_release_recursive>:
 801dcfc:	4770      	bx	lr

0801dcfe <memcpy>:
 801dcfe:	440a      	add	r2, r1
 801dd00:	4291      	cmp	r1, r2
 801dd02:	f100 33ff 	add.w	r3, r0, #4294967295
 801dd06:	d100      	bne.n	801dd0a <memcpy+0xc>
 801dd08:	4770      	bx	lr
 801dd0a:	b510      	push	{r4, lr}
 801dd0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd10:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd14:	4291      	cmp	r1, r2
 801dd16:	d1f9      	bne.n	801dd0c <memcpy+0xe>
 801dd18:	bd10      	pop	{r4, pc}
	...

0801dd1c <__assert_func>:
 801dd1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd1e:	4614      	mov	r4, r2
 801dd20:	461a      	mov	r2, r3
 801dd22:	4b09      	ldr	r3, [pc, #36]	@ (801dd48 <__assert_func+0x2c>)
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	4605      	mov	r5, r0
 801dd28:	68d8      	ldr	r0, [r3, #12]
 801dd2a:	b954      	cbnz	r4, 801dd42 <__assert_func+0x26>
 801dd2c:	4b07      	ldr	r3, [pc, #28]	@ (801dd4c <__assert_func+0x30>)
 801dd2e:	461c      	mov	r4, r3
 801dd30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dd34:	9100      	str	r1, [sp, #0]
 801dd36:	462b      	mov	r3, r5
 801dd38:	4905      	ldr	r1, [pc, #20]	@ (801dd50 <__assert_func+0x34>)
 801dd3a:	f001 fdb3 	bl	801f8a4 <fiprintf>
 801dd3e:	f001 fe57 	bl	801f9f0 <abort>
 801dd42:	4b04      	ldr	r3, [pc, #16]	@ (801dd54 <__assert_func+0x38>)
 801dd44:	e7f4      	b.n	801dd30 <__assert_func+0x14>
 801dd46:	bf00      	nop
 801dd48:	24000044 	.word	0x24000044
 801dd4c:	08022fed 	.word	0x08022fed
 801dd50:	08022fbf 	.word	0x08022fbf
 801dd54:	08022fb2 	.word	0x08022fb2

0801dd58 <quorem>:
 801dd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd5c:	6903      	ldr	r3, [r0, #16]
 801dd5e:	690c      	ldr	r4, [r1, #16]
 801dd60:	42a3      	cmp	r3, r4
 801dd62:	4607      	mov	r7, r0
 801dd64:	db7e      	blt.n	801de64 <quorem+0x10c>
 801dd66:	3c01      	subs	r4, #1
 801dd68:	f101 0814 	add.w	r8, r1, #20
 801dd6c:	00a3      	lsls	r3, r4, #2
 801dd6e:	f100 0514 	add.w	r5, r0, #20
 801dd72:	9300      	str	r3, [sp, #0]
 801dd74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dd78:	9301      	str	r3, [sp, #4]
 801dd7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801dd7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dd82:	3301      	adds	r3, #1
 801dd84:	429a      	cmp	r2, r3
 801dd86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dd8a:	fbb2 f6f3 	udiv	r6, r2, r3
 801dd8e:	d32e      	bcc.n	801ddee <quorem+0x96>
 801dd90:	f04f 0a00 	mov.w	sl, #0
 801dd94:	46c4      	mov	ip, r8
 801dd96:	46ae      	mov	lr, r5
 801dd98:	46d3      	mov	fp, sl
 801dd9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dd9e:	b298      	uxth	r0, r3
 801dda0:	fb06 a000 	mla	r0, r6, r0, sl
 801dda4:	0c02      	lsrs	r2, r0, #16
 801dda6:	0c1b      	lsrs	r3, r3, #16
 801dda8:	fb06 2303 	mla	r3, r6, r3, r2
 801ddac:	f8de 2000 	ldr.w	r2, [lr]
 801ddb0:	b280      	uxth	r0, r0
 801ddb2:	b292      	uxth	r2, r2
 801ddb4:	1a12      	subs	r2, r2, r0
 801ddb6:	445a      	add	r2, fp
 801ddb8:	f8de 0000 	ldr.w	r0, [lr]
 801ddbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ddc0:	b29b      	uxth	r3, r3
 801ddc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ddc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ddca:	b292      	uxth	r2, r2
 801ddcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ddd0:	45e1      	cmp	r9, ip
 801ddd2:	f84e 2b04 	str.w	r2, [lr], #4
 801ddd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ddda:	d2de      	bcs.n	801dd9a <quorem+0x42>
 801dddc:	9b00      	ldr	r3, [sp, #0]
 801ddde:	58eb      	ldr	r3, [r5, r3]
 801dde0:	b92b      	cbnz	r3, 801ddee <quorem+0x96>
 801dde2:	9b01      	ldr	r3, [sp, #4]
 801dde4:	3b04      	subs	r3, #4
 801dde6:	429d      	cmp	r5, r3
 801dde8:	461a      	mov	r2, r3
 801ddea:	d32f      	bcc.n	801de4c <quorem+0xf4>
 801ddec:	613c      	str	r4, [r7, #16]
 801ddee:	4638      	mov	r0, r7
 801ddf0:	f001 f90a 	bl	801f008 <__mcmp>
 801ddf4:	2800      	cmp	r0, #0
 801ddf6:	db25      	blt.n	801de44 <quorem+0xec>
 801ddf8:	4629      	mov	r1, r5
 801ddfa:	2000      	movs	r0, #0
 801ddfc:	f858 2b04 	ldr.w	r2, [r8], #4
 801de00:	f8d1 c000 	ldr.w	ip, [r1]
 801de04:	fa1f fe82 	uxth.w	lr, r2
 801de08:	fa1f f38c 	uxth.w	r3, ip
 801de0c:	eba3 030e 	sub.w	r3, r3, lr
 801de10:	4403      	add	r3, r0
 801de12:	0c12      	lsrs	r2, r2, #16
 801de14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801de18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801de1c:	b29b      	uxth	r3, r3
 801de1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801de22:	45c1      	cmp	r9, r8
 801de24:	f841 3b04 	str.w	r3, [r1], #4
 801de28:	ea4f 4022 	mov.w	r0, r2, asr #16
 801de2c:	d2e6      	bcs.n	801ddfc <quorem+0xa4>
 801de2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801de32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801de36:	b922      	cbnz	r2, 801de42 <quorem+0xea>
 801de38:	3b04      	subs	r3, #4
 801de3a:	429d      	cmp	r5, r3
 801de3c:	461a      	mov	r2, r3
 801de3e:	d30b      	bcc.n	801de58 <quorem+0x100>
 801de40:	613c      	str	r4, [r7, #16]
 801de42:	3601      	adds	r6, #1
 801de44:	4630      	mov	r0, r6
 801de46:	b003      	add	sp, #12
 801de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de4c:	6812      	ldr	r2, [r2, #0]
 801de4e:	3b04      	subs	r3, #4
 801de50:	2a00      	cmp	r2, #0
 801de52:	d1cb      	bne.n	801ddec <quorem+0x94>
 801de54:	3c01      	subs	r4, #1
 801de56:	e7c6      	b.n	801dde6 <quorem+0x8e>
 801de58:	6812      	ldr	r2, [r2, #0]
 801de5a:	3b04      	subs	r3, #4
 801de5c:	2a00      	cmp	r2, #0
 801de5e:	d1ef      	bne.n	801de40 <quorem+0xe8>
 801de60:	3c01      	subs	r4, #1
 801de62:	e7ea      	b.n	801de3a <quorem+0xe2>
 801de64:	2000      	movs	r0, #0
 801de66:	e7ee      	b.n	801de46 <quorem+0xee>

0801de68 <_dtoa_r>:
 801de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de6c:	ed2d 8b02 	vpush	{d8}
 801de70:	69c7      	ldr	r7, [r0, #28]
 801de72:	b091      	sub	sp, #68	@ 0x44
 801de74:	ed8d 0b02 	vstr	d0, [sp, #8]
 801de78:	ec55 4b10 	vmov	r4, r5, d0
 801de7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801de7e:	9107      	str	r1, [sp, #28]
 801de80:	4681      	mov	r9, r0
 801de82:	9209      	str	r2, [sp, #36]	@ 0x24
 801de84:	930d      	str	r3, [sp, #52]	@ 0x34
 801de86:	b97f      	cbnz	r7, 801dea8 <_dtoa_r+0x40>
 801de88:	2010      	movs	r0, #16
 801de8a:	f000 fd8d 	bl	801e9a8 <malloc>
 801de8e:	4602      	mov	r2, r0
 801de90:	f8c9 001c 	str.w	r0, [r9, #28]
 801de94:	b920      	cbnz	r0, 801dea0 <_dtoa_r+0x38>
 801de96:	4ba0      	ldr	r3, [pc, #640]	@ (801e118 <_dtoa_r+0x2b0>)
 801de98:	21ef      	movs	r1, #239	@ 0xef
 801de9a:	48a0      	ldr	r0, [pc, #640]	@ (801e11c <_dtoa_r+0x2b4>)
 801de9c:	f7ff ff3e 	bl	801dd1c <__assert_func>
 801dea0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801dea4:	6007      	str	r7, [r0, #0]
 801dea6:	60c7      	str	r7, [r0, #12]
 801dea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801deac:	6819      	ldr	r1, [r3, #0]
 801deae:	b159      	cbz	r1, 801dec8 <_dtoa_r+0x60>
 801deb0:	685a      	ldr	r2, [r3, #4]
 801deb2:	604a      	str	r2, [r1, #4]
 801deb4:	2301      	movs	r3, #1
 801deb6:	4093      	lsls	r3, r2
 801deb8:	608b      	str	r3, [r1, #8]
 801deba:	4648      	mov	r0, r9
 801debc:	f000 fe6a 	bl	801eb94 <_Bfree>
 801dec0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801dec4:	2200      	movs	r2, #0
 801dec6:	601a      	str	r2, [r3, #0]
 801dec8:	1e2b      	subs	r3, r5, #0
 801deca:	bfbb      	ittet	lt
 801decc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ded0:	9303      	strlt	r3, [sp, #12]
 801ded2:	2300      	movge	r3, #0
 801ded4:	2201      	movlt	r2, #1
 801ded6:	bfac      	ite	ge
 801ded8:	6033      	strge	r3, [r6, #0]
 801deda:	6032      	strlt	r2, [r6, #0]
 801dedc:	4b90      	ldr	r3, [pc, #576]	@ (801e120 <_dtoa_r+0x2b8>)
 801dede:	9e03      	ldr	r6, [sp, #12]
 801dee0:	43b3      	bics	r3, r6
 801dee2:	d110      	bne.n	801df06 <_dtoa_r+0x9e>
 801dee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dee6:	f242 730f 	movw	r3, #9999	@ 0x270f
 801deea:	6013      	str	r3, [r2, #0]
 801deec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801def0:	4323      	orrs	r3, r4
 801def2:	f000 84de 	beq.w	801e8b2 <_dtoa_r+0xa4a>
 801def6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801def8:	4f8a      	ldr	r7, [pc, #552]	@ (801e124 <_dtoa_r+0x2bc>)
 801defa:	2b00      	cmp	r3, #0
 801defc:	f000 84e0 	beq.w	801e8c0 <_dtoa_r+0xa58>
 801df00:	1cfb      	adds	r3, r7, #3
 801df02:	f000 bcdb 	b.w	801e8bc <_dtoa_r+0xa54>
 801df06:	ed9d 8b02 	vldr	d8, [sp, #8]
 801df0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801df0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df12:	d10a      	bne.n	801df2a <_dtoa_r+0xc2>
 801df14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801df16:	2301      	movs	r3, #1
 801df18:	6013      	str	r3, [r2, #0]
 801df1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df1c:	b113      	cbz	r3, 801df24 <_dtoa_r+0xbc>
 801df1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801df20:	4b81      	ldr	r3, [pc, #516]	@ (801e128 <_dtoa_r+0x2c0>)
 801df22:	6013      	str	r3, [r2, #0]
 801df24:	4f81      	ldr	r7, [pc, #516]	@ (801e12c <_dtoa_r+0x2c4>)
 801df26:	f000 bccb 	b.w	801e8c0 <_dtoa_r+0xa58>
 801df2a:	aa0e      	add	r2, sp, #56	@ 0x38
 801df2c:	a90f      	add	r1, sp, #60	@ 0x3c
 801df2e:	4648      	mov	r0, r9
 801df30:	eeb0 0b48 	vmov.f64	d0, d8
 801df34:	f001 f918 	bl	801f168 <__d2b>
 801df38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801df3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df3e:	9001      	str	r0, [sp, #4]
 801df40:	2b00      	cmp	r3, #0
 801df42:	d045      	beq.n	801dfd0 <_dtoa_r+0x168>
 801df44:	eeb0 7b48 	vmov.f64	d7, d8
 801df48:	ee18 1a90 	vmov	r1, s17
 801df4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801df50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801df54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801df58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801df5c:	2500      	movs	r5, #0
 801df5e:	ee07 1a90 	vmov	s15, r1
 801df62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801df66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801e100 <_dtoa_r+0x298>
 801df6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801e108 <_dtoa_r+0x2a0>
 801df72:	eea7 6b05 	vfma.f64	d6, d7, d5
 801df76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801e110 <_dtoa_r+0x2a8>
 801df7a:	ee07 3a90 	vmov	s15, r3
 801df7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801df82:	eeb0 7b46 	vmov.f64	d7, d6
 801df86:	eea4 7b05 	vfma.f64	d7, d4, d5
 801df8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801df8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801df92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df96:	ee16 8a90 	vmov	r8, s13
 801df9a:	d508      	bpl.n	801dfae <_dtoa_r+0x146>
 801df9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801dfa0:	eeb4 6b47 	vcmp.f64	d6, d7
 801dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfa8:	bf18      	it	ne
 801dfaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 801dfae:	f1b8 0f16 	cmp.w	r8, #22
 801dfb2:	d82b      	bhi.n	801e00c <_dtoa_r+0x1a4>
 801dfb4:	495e      	ldr	r1, [pc, #376]	@ (801e130 <_dtoa_r+0x2c8>)
 801dfb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801dfba:	ed91 7b00 	vldr	d7, [r1]
 801dfbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfc6:	d501      	bpl.n	801dfcc <_dtoa_r+0x164>
 801dfc8:	f108 38ff 	add.w	r8, r8, #4294967295
 801dfcc:	2100      	movs	r1, #0
 801dfce:	e01e      	b.n	801e00e <_dtoa_r+0x1a6>
 801dfd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dfd2:	4413      	add	r3, r2
 801dfd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801dfd8:	2920      	cmp	r1, #32
 801dfda:	bfc1      	itttt	gt
 801dfdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801dfe0:	408e      	lslgt	r6, r1
 801dfe2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801dfe6:	fa24 f101 	lsrgt.w	r1, r4, r1
 801dfea:	bfd6      	itet	le
 801dfec:	f1c1 0120 	rsble	r1, r1, #32
 801dff0:	4331      	orrgt	r1, r6
 801dff2:	fa04 f101 	lslle.w	r1, r4, r1
 801dff6:	ee07 1a90 	vmov	s15, r1
 801dffa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801dffe:	3b01      	subs	r3, #1
 801e000:	ee17 1a90 	vmov	r1, s15
 801e004:	2501      	movs	r5, #1
 801e006:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801e00a:	e7a8      	b.n	801df5e <_dtoa_r+0xf6>
 801e00c:	2101      	movs	r1, #1
 801e00e:	1ad2      	subs	r2, r2, r3
 801e010:	1e53      	subs	r3, r2, #1
 801e012:	9306      	str	r3, [sp, #24]
 801e014:	bf45      	ittet	mi
 801e016:	f1c2 0301 	rsbmi	r3, r2, #1
 801e01a:	9305      	strmi	r3, [sp, #20]
 801e01c:	2300      	movpl	r3, #0
 801e01e:	2300      	movmi	r3, #0
 801e020:	bf4c      	ite	mi
 801e022:	9306      	strmi	r3, [sp, #24]
 801e024:	9305      	strpl	r3, [sp, #20]
 801e026:	f1b8 0f00 	cmp.w	r8, #0
 801e02a:	910c      	str	r1, [sp, #48]	@ 0x30
 801e02c:	db18      	blt.n	801e060 <_dtoa_r+0x1f8>
 801e02e:	9b06      	ldr	r3, [sp, #24]
 801e030:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801e034:	4443      	add	r3, r8
 801e036:	9306      	str	r3, [sp, #24]
 801e038:	2300      	movs	r3, #0
 801e03a:	9a07      	ldr	r2, [sp, #28]
 801e03c:	2a09      	cmp	r2, #9
 801e03e:	d849      	bhi.n	801e0d4 <_dtoa_r+0x26c>
 801e040:	2a05      	cmp	r2, #5
 801e042:	bfc4      	itt	gt
 801e044:	3a04      	subgt	r2, #4
 801e046:	9207      	strgt	r2, [sp, #28]
 801e048:	9a07      	ldr	r2, [sp, #28]
 801e04a:	f1a2 0202 	sub.w	r2, r2, #2
 801e04e:	bfcc      	ite	gt
 801e050:	2400      	movgt	r4, #0
 801e052:	2401      	movle	r4, #1
 801e054:	2a03      	cmp	r2, #3
 801e056:	d848      	bhi.n	801e0ea <_dtoa_r+0x282>
 801e058:	e8df f002 	tbb	[pc, r2]
 801e05c:	3a2c2e0b 	.word	0x3a2c2e0b
 801e060:	9b05      	ldr	r3, [sp, #20]
 801e062:	2200      	movs	r2, #0
 801e064:	eba3 0308 	sub.w	r3, r3, r8
 801e068:	9305      	str	r3, [sp, #20]
 801e06a:	920a      	str	r2, [sp, #40]	@ 0x28
 801e06c:	f1c8 0300 	rsb	r3, r8, #0
 801e070:	e7e3      	b.n	801e03a <_dtoa_r+0x1d2>
 801e072:	2200      	movs	r2, #0
 801e074:	9208      	str	r2, [sp, #32]
 801e076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e078:	2a00      	cmp	r2, #0
 801e07a:	dc39      	bgt.n	801e0f0 <_dtoa_r+0x288>
 801e07c:	f04f 0b01 	mov.w	fp, #1
 801e080:	46da      	mov	sl, fp
 801e082:	465a      	mov	r2, fp
 801e084:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801e088:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801e08c:	2100      	movs	r1, #0
 801e08e:	2004      	movs	r0, #4
 801e090:	f100 0614 	add.w	r6, r0, #20
 801e094:	4296      	cmp	r6, r2
 801e096:	d930      	bls.n	801e0fa <_dtoa_r+0x292>
 801e098:	6079      	str	r1, [r7, #4]
 801e09a:	4648      	mov	r0, r9
 801e09c:	9304      	str	r3, [sp, #16]
 801e09e:	f000 fd39 	bl	801eb14 <_Balloc>
 801e0a2:	9b04      	ldr	r3, [sp, #16]
 801e0a4:	4607      	mov	r7, r0
 801e0a6:	2800      	cmp	r0, #0
 801e0a8:	d146      	bne.n	801e138 <_dtoa_r+0x2d0>
 801e0aa:	4b22      	ldr	r3, [pc, #136]	@ (801e134 <_dtoa_r+0x2cc>)
 801e0ac:	4602      	mov	r2, r0
 801e0ae:	f240 11af 	movw	r1, #431	@ 0x1af
 801e0b2:	e6f2      	b.n	801de9a <_dtoa_r+0x32>
 801e0b4:	2201      	movs	r2, #1
 801e0b6:	e7dd      	b.n	801e074 <_dtoa_r+0x20c>
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	9208      	str	r2, [sp, #32]
 801e0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0be:	eb08 0b02 	add.w	fp, r8, r2
 801e0c2:	f10b 0a01 	add.w	sl, fp, #1
 801e0c6:	4652      	mov	r2, sl
 801e0c8:	2a01      	cmp	r2, #1
 801e0ca:	bfb8      	it	lt
 801e0cc:	2201      	movlt	r2, #1
 801e0ce:	e7db      	b.n	801e088 <_dtoa_r+0x220>
 801e0d0:	2201      	movs	r2, #1
 801e0d2:	e7f2      	b.n	801e0ba <_dtoa_r+0x252>
 801e0d4:	2401      	movs	r4, #1
 801e0d6:	2200      	movs	r2, #0
 801e0d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801e0dc:	f04f 3bff 	mov.w	fp, #4294967295
 801e0e0:	2100      	movs	r1, #0
 801e0e2:	46da      	mov	sl, fp
 801e0e4:	2212      	movs	r2, #18
 801e0e6:	9109      	str	r1, [sp, #36]	@ 0x24
 801e0e8:	e7ce      	b.n	801e088 <_dtoa_r+0x220>
 801e0ea:	2201      	movs	r2, #1
 801e0ec:	9208      	str	r2, [sp, #32]
 801e0ee:	e7f5      	b.n	801e0dc <_dtoa_r+0x274>
 801e0f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801e0f4:	46da      	mov	sl, fp
 801e0f6:	465a      	mov	r2, fp
 801e0f8:	e7c6      	b.n	801e088 <_dtoa_r+0x220>
 801e0fa:	3101      	adds	r1, #1
 801e0fc:	0040      	lsls	r0, r0, #1
 801e0fe:	e7c7      	b.n	801e090 <_dtoa_r+0x228>
 801e100:	636f4361 	.word	0x636f4361
 801e104:	3fd287a7 	.word	0x3fd287a7
 801e108:	8b60c8b3 	.word	0x8b60c8b3
 801e10c:	3fc68a28 	.word	0x3fc68a28
 801e110:	509f79fb 	.word	0x509f79fb
 801e114:	3fd34413 	.word	0x3fd34413
 801e118:	08022e0e 	.word	0x08022e0e
 801e11c:	08022ffb 	.word	0x08022ffb
 801e120:	7ff00000 	.word	0x7ff00000
 801e124:	08022ff7 	.word	0x08022ff7
 801e128:	08022f8f 	.word	0x08022f8f
 801e12c:	08022f8e 	.word	0x08022f8e
 801e130:	080230f8 	.word	0x080230f8
 801e134:	08023053 	.word	0x08023053
 801e138:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801e13c:	f1ba 0f0e 	cmp.w	sl, #14
 801e140:	6010      	str	r0, [r2, #0]
 801e142:	d86f      	bhi.n	801e224 <_dtoa_r+0x3bc>
 801e144:	2c00      	cmp	r4, #0
 801e146:	d06d      	beq.n	801e224 <_dtoa_r+0x3bc>
 801e148:	f1b8 0f00 	cmp.w	r8, #0
 801e14c:	f340 80c2 	ble.w	801e2d4 <_dtoa_r+0x46c>
 801e150:	4aca      	ldr	r2, [pc, #808]	@ (801e47c <_dtoa_r+0x614>)
 801e152:	f008 010f 	and.w	r1, r8, #15
 801e156:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801e15a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801e15e:	ed92 7b00 	vldr	d7, [r2]
 801e162:	ea4f 1128 	mov.w	r1, r8, asr #4
 801e166:	f000 80a9 	beq.w	801e2bc <_dtoa_r+0x454>
 801e16a:	4ac5      	ldr	r2, [pc, #788]	@ (801e480 <_dtoa_r+0x618>)
 801e16c:	ed92 6b08 	vldr	d6, [r2, #32]
 801e170:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801e174:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e178:	f001 010f 	and.w	r1, r1, #15
 801e17c:	2203      	movs	r2, #3
 801e17e:	48c0      	ldr	r0, [pc, #768]	@ (801e480 <_dtoa_r+0x618>)
 801e180:	2900      	cmp	r1, #0
 801e182:	f040 809d 	bne.w	801e2c0 <_dtoa_r+0x458>
 801e186:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e18a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801e18e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e192:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e194:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e198:	2900      	cmp	r1, #0
 801e19a:	f000 80c1 	beq.w	801e320 <_dtoa_r+0x4b8>
 801e19e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e1a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1aa:	f140 80b9 	bpl.w	801e320 <_dtoa_r+0x4b8>
 801e1ae:	f1ba 0f00 	cmp.w	sl, #0
 801e1b2:	f000 80b5 	beq.w	801e320 <_dtoa_r+0x4b8>
 801e1b6:	f1bb 0f00 	cmp.w	fp, #0
 801e1ba:	dd31      	ble.n	801e220 <_dtoa_r+0x3b8>
 801e1bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801e1c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e1c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e1c8:	f108 31ff 	add.w	r1, r8, #4294967295
 801e1cc:	9104      	str	r1, [sp, #16]
 801e1ce:	3201      	adds	r2, #1
 801e1d0:	465c      	mov	r4, fp
 801e1d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e1d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801e1da:	ee07 2a90 	vmov	s15, r2
 801e1de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e1e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 801e1e6:	ee15 2a90 	vmov	r2, s11
 801e1ea:	ec51 0b15 	vmov	r0, r1, d5
 801e1ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801e1f2:	2c00      	cmp	r4, #0
 801e1f4:	f040 8098 	bne.w	801e328 <_dtoa_r+0x4c0>
 801e1f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801e1fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e200:	ec41 0b17 	vmov	d7, r0, r1
 801e204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e20c:	f300 8261 	bgt.w	801e6d2 <_dtoa_r+0x86a>
 801e210:	eeb1 7b47 	vneg.f64	d7, d7
 801e214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e21c:	f100 80f5 	bmi.w	801e40a <_dtoa_r+0x5a2>
 801e220:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e224:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e226:	2a00      	cmp	r2, #0
 801e228:	f2c0 812c 	blt.w	801e484 <_dtoa_r+0x61c>
 801e22c:	f1b8 0f0e 	cmp.w	r8, #14
 801e230:	f300 8128 	bgt.w	801e484 <_dtoa_r+0x61c>
 801e234:	4b91      	ldr	r3, [pc, #580]	@ (801e47c <_dtoa_r+0x614>)
 801e236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e23a:	ed93 6b00 	vldr	d6, [r3]
 801e23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e240:	2b00      	cmp	r3, #0
 801e242:	da03      	bge.n	801e24c <_dtoa_r+0x3e4>
 801e244:	f1ba 0f00 	cmp.w	sl, #0
 801e248:	f340 80d2 	ble.w	801e3f0 <_dtoa_r+0x588>
 801e24c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801e250:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e254:	463e      	mov	r6, r7
 801e256:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801e25a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801e25e:	ee15 3a10 	vmov	r3, s10
 801e262:	3330      	adds	r3, #48	@ 0x30
 801e264:	f806 3b01 	strb.w	r3, [r6], #1
 801e268:	1bf3      	subs	r3, r6, r7
 801e26a:	459a      	cmp	sl, r3
 801e26c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801e270:	eea3 7b46 	vfms.f64	d7, d3, d6
 801e274:	f040 80f8 	bne.w	801e468 <_dtoa_r+0x600>
 801e278:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e27c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e284:	f300 80dd 	bgt.w	801e442 <_dtoa_r+0x5da>
 801e288:	eeb4 7b46 	vcmp.f64	d7, d6
 801e28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e290:	d104      	bne.n	801e29c <_dtoa_r+0x434>
 801e292:	ee15 3a10 	vmov	r3, s10
 801e296:	07db      	lsls	r3, r3, #31
 801e298:	f100 80d3 	bmi.w	801e442 <_dtoa_r+0x5da>
 801e29c:	9901      	ldr	r1, [sp, #4]
 801e29e:	4648      	mov	r0, r9
 801e2a0:	f000 fc78 	bl	801eb94 <_Bfree>
 801e2a4:	2300      	movs	r3, #0
 801e2a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e2a8:	7033      	strb	r3, [r6, #0]
 801e2aa:	f108 0301 	add.w	r3, r8, #1
 801e2ae:	6013      	str	r3, [r2, #0]
 801e2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	f000 8304 	beq.w	801e8c0 <_dtoa_r+0xa58>
 801e2b8:	601e      	str	r6, [r3, #0]
 801e2ba:	e301      	b.n	801e8c0 <_dtoa_r+0xa58>
 801e2bc:	2202      	movs	r2, #2
 801e2be:	e75e      	b.n	801e17e <_dtoa_r+0x316>
 801e2c0:	07cc      	lsls	r4, r1, #31
 801e2c2:	d504      	bpl.n	801e2ce <_dtoa_r+0x466>
 801e2c4:	ed90 6b00 	vldr	d6, [r0]
 801e2c8:	3201      	adds	r2, #1
 801e2ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e2ce:	1049      	asrs	r1, r1, #1
 801e2d0:	3008      	adds	r0, #8
 801e2d2:	e755      	b.n	801e180 <_dtoa_r+0x318>
 801e2d4:	d022      	beq.n	801e31c <_dtoa_r+0x4b4>
 801e2d6:	f1c8 0100 	rsb	r1, r8, #0
 801e2da:	4a68      	ldr	r2, [pc, #416]	@ (801e47c <_dtoa_r+0x614>)
 801e2dc:	f001 000f 	and.w	r0, r1, #15
 801e2e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801e2e4:	ed92 7b00 	vldr	d7, [r2]
 801e2e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 801e2ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e2f0:	4863      	ldr	r0, [pc, #396]	@ (801e480 <_dtoa_r+0x618>)
 801e2f2:	1109      	asrs	r1, r1, #4
 801e2f4:	2400      	movs	r4, #0
 801e2f6:	2202      	movs	r2, #2
 801e2f8:	b929      	cbnz	r1, 801e306 <_dtoa_r+0x49e>
 801e2fa:	2c00      	cmp	r4, #0
 801e2fc:	f43f af49 	beq.w	801e192 <_dtoa_r+0x32a>
 801e300:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e304:	e745      	b.n	801e192 <_dtoa_r+0x32a>
 801e306:	07ce      	lsls	r6, r1, #31
 801e308:	d505      	bpl.n	801e316 <_dtoa_r+0x4ae>
 801e30a:	ed90 6b00 	vldr	d6, [r0]
 801e30e:	3201      	adds	r2, #1
 801e310:	2401      	movs	r4, #1
 801e312:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e316:	1049      	asrs	r1, r1, #1
 801e318:	3008      	adds	r0, #8
 801e31a:	e7ed      	b.n	801e2f8 <_dtoa_r+0x490>
 801e31c:	2202      	movs	r2, #2
 801e31e:	e738      	b.n	801e192 <_dtoa_r+0x32a>
 801e320:	f8cd 8010 	str.w	r8, [sp, #16]
 801e324:	4654      	mov	r4, sl
 801e326:	e754      	b.n	801e1d2 <_dtoa_r+0x36a>
 801e328:	4a54      	ldr	r2, [pc, #336]	@ (801e47c <_dtoa_r+0x614>)
 801e32a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801e32e:	ed12 4b02 	vldr	d4, [r2, #-8]
 801e332:	9a08      	ldr	r2, [sp, #32]
 801e334:	ec41 0b17 	vmov	d7, r0, r1
 801e338:	443c      	add	r4, r7
 801e33a:	b34a      	cbz	r2, 801e390 <_dtoa_r+0x528>
 801e33c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801e340:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801e344:	463e      	mov	r6, r7
 801e346:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801e34a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801e34e:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e352:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e356:	ee14 2a90 	vmov	r2, s9
 801e35a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e35e:	3230      	adds	r2, #48	@ 0x30
 801e360:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36c:	f806 2b01 	strb.w	r2, [r6], #1
 801e370:	d438      	bmi.n	801e3e4 <_dtoa_r+0x57c>
 801e372:	ee32 5b46 	vsub.f64	d5, d2, d6
 801e376:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37e:	d462      	bmi.n	801e446 <_dtoa_r+0x5de>
 801e380:	42a6      	cmp	r6, r4
 801e382:	f43f af4d 	beq.w	801e220 <_dtoa_r+0x3b8>
 801e386:	ee27 7b03 	vmul.f64	d7, d7, d3
 801e38a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e38e:	e7e0      	b.n	801e352 <_dtoa_r+0x4ea>
 801e390:	4621      	mov	r1, r4
 801e392:	463e      	mov	r6, r7
 801e394:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e398:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801e39c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e3a0:	ee14 2a90 	vmov	r2, s9
 801e3a4:	3230      	adds	r2, #48	@ 0x30
 801e3a6:	f806 2b01 	strb.w	r2, [r6], #1
 801e3aa:	42a6      	cmp	r6, r4
 801e3ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e3b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e3b4:	d119      	bne.n	801e3ea <_dtoa_r+0x582>
 801e3b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801e3ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 801e3be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3c6:	dc3e      	bgt.n	801e446 <_dtoa_r+0x5de>
 801e3c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e3cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d4:	f57f af24 	bpl.w	801e220 <_dtoa_r+0x3b8>
 801e3d8:	460e      	mov	r6, r1
 801e3da:	3901      	subs	r1, #1
 801e3dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e3e0:	2b30      	cmp	r3, #48	@ 0x30
 801e3e2:	d0f9      	beq.n	801e3d8 <_dtoa_r+0x570>
 801e3e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801e3e8:	e758      	b.n	801e29c <_dtoa_r+0x434>
 801e3ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e3ee:	e7d5      	b.n	801e39c <_dtoa_r+0x534>
 801e3f0:	d10b      	bne.n	801e40a <_dtoa_r+0x5a2>
 801e3f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801e3f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e3fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e3fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e406:	f2c0 8161 	blt.w	801e6cc <_dtoa_r+0x864>
 801e40a:	2400      	movs	r4, #0
 801e40c:	4625      	mov	r5, r4
 801e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e410:	43db      	mvns	r3, r3
 801e412:	9304      	str	r3, [sp, #16]
 801e414:	463e      	mov	r6, r7
 801e416:	f04f 0800 	mov.w	r8, #0
 801e41a:	4621      	mov	r1, r4
 801e41c:	4648      	mov	r0, r9
 801e41e:	f000 fbb9 	bl	801eb94 <_Bfree>
 801e422:	2d00      	cmp	r5, #0
 801e424:	d0de      	beq.n	801e3e4 <_dtoa_r+0x57c>
 801e426:	f1b8 0f00 	cmp.w	r8, #0
 801e42a:	d005      	beq.n	801e438 <_dtoa_r+0x5d0>
 801e42c:	45a8      	cmp	r8, r5
 801e42e:	d003      	beq.n	801e438 <_dtoa_r+0x5d0>
 801e430:	4641      	mov	r1, r8
 801e432:	4648      	mov	r0, r9
 801e434:	f000 fbae 	bl	801eb94 <_Bfree>
 801e438:	4629      	mov	r1, r5
 801e43a:	4648      	mov	r0, r9
 801e43c:	f000 fbaa 	bl	801eb94 <_Bfree>
 801e440:	e7d0      	b.n	801e3e4 <_dtoa_r+0x57c>
 801e442:	f8cd 8010 	str.w	r8, [sp, #16]
 801e446:	4633      	mov	r3, r6
 801e448:	461e      	mov	r6, r3
 801e44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e44e:	2a39      	cmp	r2, #57	@ 0x39
 801e450:	d106      	bne.n	801e460 <_dtoa_r+0x5f8>
 801e452:	429f      	cmp	r7, r3
 801e454:	d1f8      	bne.n	801e448 <_dtoa_r+0x5e0>
 801e456:	9a04      	ldr	r2, [sp, #16]
 801e458:	3201      	adds	r2, #1
 801e45a:	9204      	str	r2, [sp, #16]
 801e45c:	2230      	movs	r2, #48	@ 0x30
 801e45e:	703a      	strb	r2, [r7, #0]
 801e460:	781a      	ldrb	r2, [r3, #0]
 801e462:	3201      	adds	r2, #1
 801e464:	701a      	strb	r2, [r3, #0]
 801e466:	e7bd      	b.n	801e3e4 <_dtoa_r+0x57c>
 801e468:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e46c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e474:	f47f aeef 	bne.w	801e256 <_dtoa_r+0x3ee>
 801e478:	e710      	b.n	801e29c <_dtoa_r+0x434>
 801e47a:	bf00      	nop
 801e47c:	080230f8 	.word	0x080230f8
 801e480:	080230d0 	.word	0x080230d0
 801e484:	9908      	ldr	r1, [sp, #32]
 801e486:	2900      	cmp	r1, #0
 801e488:	f000 80e3 	beq.w	801e652 <_dtoa_r+0x7ea>
 801e48c:	9907      	ldr	r1, [sp, #28]
 801e48e:	2901      	cmp	r1, #1
 801e490:	f300 80c8 	bgt.w	801e624 <_dtoa_r+0x7bc>
 801e494:	2d00      	cmp	r5, #0
 801e496:	f000 80c1 	beq.w	801e61c <_dtoa_r+0x7b4>
 801e49a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801e49e:	9e05      	ldr	r6, [sp, #20]
 801e4a0:	461c      	mov	r4, r3
 801e4a2:	9304      	str	r3, [sp, #16]
 801e4a4:	9b05      	ldr	r3, [sp, #20]
 801e4a6:	4413      	add	r3, r2
 801e4a8:	9305      	str	r3, [sp, #20]
 801e4aa:	9b06      	ldr	r3, [sp, #24]
 801e4ac:	2101      	movs	r1, #1
 801e4ae:	4413      	add	r3, r2
 801e4b0:	4648      	mov	r0, r9
 801e4b2:	9306      	str	r3, [sp, #24]
 801e4b4:	f000 fc22 	bl	801ecfc <__i2b>
 801e4b8:	9b04      	ldr	r3, [sp, #16]
 801e4ba:	4605      	mov	r5, r0
 801e4bc:	b166      	cbz	r6, 801e4d8 <_dtoa_r+0x670>
 801e4be:	9a06      	ldr	r2, [sp, #24]
 801e4c0:	2a00      	cmp	r2, #0
 801e4c2:	dd09      	ble.n	801e4d8 <_dtoa_r+0x670>
 801e4c4:	42b2      	cmp	r2, r6
 801e4c6:	9905      	ldr	r1, [sp, #20]
 801e4c8:	bfa8      	it	ge
 801e4ca:	4632      	movge	r2, r6
 801e4cc:	1a89      	subs	r1, r1, r2
 801e4ce:	9105      	str	r1, [sp, #20]
 801e4d0:	9906      	ldr	r1, [sp, #24]
 801e4d2:	1ab6      	subs	r6, r6, r2
 801e4d4:	1a8a      	subs	r2, r1, r2
 801e4d6:	9206      	str	r2, [sp, #24]
 801e4d8:	b1fb      	cbz	r3, 801e51a <_dtoa_r+0x6b2>
 801e4da:	9a08      	ldr	r2, [sp, #32]
 801e4dc:	2a00      	cmp	r2, #0
 801e4de:	f000 80bc 	beq.w	801e65a <_dtoa_r+0x7f2>
 801e4e2:	b19c      	cbz	r4, 801e50c <_dtoa_r+0x6a4>
 801e4e4:	4629      	mov	r1, r5
 801e4e6:	4622      	mov	r2, r4
 801e4e8:	4648      	mov	r0, r9
 801e4ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4ec:	f000 fcc6 	bl	801ee7c <__pow5mult>
 801e4f0:	9a01      	ldr	r2, [sp, #4]
 801e4f2:	4601      	mov	r1, r0
 801e4f4:	4605      	mov	r5, r0
 801e4f6:	4648      	mov	r0, r9
 801e4f8:	f000 fc16 	bl	801ed28 <__multiply>
 801e4fc:	9901      	ldr	r1, [sp, #4]
 801e4fe:	9004      	str	r0, [sp, #16]
 801e500:	4648      	mov	r0, r9
 801e502:	f000 fb47 	bl	801eb94 <_Bfree>
 801e506:	9a04      	ldr	r2, [sp, #16]
 801e508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e50a:	9201      	str	r2, [sp, #4]
 801e50c:	1b1a      	subs	r2, r3, r4
 801e50e:	d004      	beq.n	801e51a <_dtoa_r+0x6b2>
 801e510:	9901      	ldr	r1, [sp, #4]
 801e512:	4648      	mov	r0, r9
 801e514:	f000 fcb2 	bl	801ee7c <__pow5mult>
 801e518:	9001      	str	r0, [sp, #4]
 801e51a:	2101      	movs	r1, #1
 801e51c:	4648      	mov	r0, r9
 801e51e:	f000 fbed 	bl	801ecfc <__i2b>
 801e522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e524:	4604      	mov	r4, r0
 801e526:	2b00      	cmp	r3, #0
 801e528:	f000 81d0 	beq.w	801e8cc <_dtoa_r+0xa64>
 801e52c:	461a      	mov	r2, r3
 801e52e:	4601      	mov	r1, r0
 801e530:	4648      	mov	r0, r9
 801e532:	f000 fca3 	bl	801ee7c <__pow5mult>
 801e536:	9b07      	ldr	r3, [sp, #28]
 801e538:	2b01      	cmp	r3, #1
 801e53a:	4604      	mov	r4, r0
 801e53c:	f300 8095 	bgt.w	801e66a <_dtoa_r+0x802>
 801e540:	9b02      	ldr	r3, [sp, #8]
 801e542:	2b00      	cmp	r3, #0
 801e544:	f040 808b 	bne.w	801e65e <_dtoa_r+0x7f6>
 801e548:	9b03      	ldr	r3, [sp, #12]
 801e54a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801e54e:	2a00      	cmp	r2, #0
 801e550:	f040 8087 	bne.w	801e662 <_dtoa_r+0x7fa>
 801e554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801e558:	0d12      	lsrs	r2, r2, #20
 801e55a:	0512      	lsls	r2, r2, #20
 801e55c:	2a00      	cmp	r2, #0
 801e55e:	f000 8082 	beq.w	801e666 <_dtoa_r+0x7fe>
 801e562:	9b05      	ldr	r3, [sp, #20]
 801e564:	3301      	adds	r3, #1
 801e566:	9305      	str	r3, [sp, #20]
 801e568:	9b06      	ldr	r3, [sp, #24]
 801e56a:	3301      	adds	r3, #1
 801e56c:	9306      	str	r3, [sp, #24]
 801e56e:	2301      	movs	r3, #1
 801e570:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e574:	2b00      	cmp	r3, #0
 801e576:	f000 81af 	beq.w	801e8d8 <_dtoa_r+0xa70>
 801e57a:	6922      	ldr	r2, [r4, #16]
 801e57c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e580:	6910      	ldr	r0, [r2, #16]
 801e582:	f000 fb6f 	bl	801ec64 <__hi0bits>
 801e586:	f1c0 0020 	rsb	r0, r0, #32
 801e58a:	9b06      	ldr	r3, [sp, #24]
 801e58c:	4418      	add	r0, r3
 801e58e:	f010 001f 	ands.w	r0, r0, #31
 801e592:	d076      	beq.n	801e682 <_dtoa_r+0x81a>
 801e594:	f1c0 0220 	rsb	r2, r0, #32
 801e598:	2a04      	cmp	r2, #4
 801e59a:	dd69      	ble.n	801e670 <_dtoa_r+0x808>
 801e59c:	9b05      	ldr	r3, [sp, #20]
 801e59e:	f1c0 001c 	rsb	r0, r0, #28
 801e5a2:	4403      	add	r3, r0
 801e5a4:	9305      	str	r3, [sp, #20]
 801e5a6:	9b06      	ldr	r3, [sp, #24]
 801e5a8:	4406      	add	r6, r0
 801e5aa:	4403      	add	r3, r0
 801e5ac:	9306      	str	r3, [sp, #24]
 801e5ae:	9b05      	ldr	r3, [sp, #20]
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	dd05      	ble.n	801e5c0 <_dtoa_r+0x758>
 801e5b4:	9901      	ldr	r1, [sp, #4]
 801e5b6:	461a      	mov	r2, r3
 801e5b8:	4648      	mov	r0, r9
 801e5ba:	f000 fcb9 	bl	801ef30 <__lshift>
 801e5be:	9001      	str	r0, [sp, #4]
 801e5c0:	9b06      	ldr	r3, [sp, #24]
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	dd05      	ble.n	801e5d2 <_dtoa_r+0x76a>
 801e5c6:	4621      	mov	r1, r4
 801e5c8:	461a      	mov	r2, r3
 801e5ca:	4648      	mov	r0, r9
 801e5cc:	f000 fcb0 	bl	801ef30 <__lshift>
 801e5d0:	4604      	mov	r4, r0
 801e5d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d056      	beq.n	801e686 <_dtoa_r+0x81e>
 801e5d8:	9801      	ldr	r0, [sp, #4]
 801e5da:	4621      	mov	r1, r4
 801e5dc:	f000 fd14 	bl	801f008 <__mcmp>
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	da50      	bge.n	801e686 <_dtoa_r+0x81e>
 801e5e4:	f108 33ff 	add.w	r3, r8, #4294967295
 801e5e8:	9304      	str	r3, [sp, #16]
 801e5ea:	9901      	ldr	r1, [sp, #4]
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	220a      	movs	r2, #10
 801e5f0:	4648      	mov	r0, r9
 801e5f2:	f000 faf1 	bl	801ebd8 <__multadd>
 801e5f6:	9b08      	ldr	r3, [sp, #32]
 801e5f8:	9001      	str	r0, [sp, #4]
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	f000 816e 	beq.w	801e8dc <_dtoa_r+0xa74>
 801e600:	4629      	mov	r1, r5
 801e602:	2300      	movs	r3, #0
 801e604:	220a      	movs	r2, #10
 801e606:	4648      	mov	r0, r9
 801e608:	f000 fae6 	bl	801ebd8 <__multadd>
 801e60c:	f1bb 0f00 	cmp.w	fp, #0
 801e610:	4605      	mov	r5, r0
 801e612:	dc64      	bgt.n	801e6de <_dtoa_r+0x876>
 801e614:	9b07      	ldr	r3, [sp, #28]
 801e616:	2b02      	cmp	r3, #2
 801e618:	dc3e      	bgt.n	801e698 <_dtoa_r+0x830>
 801e61a:	e060      	b.n	801e6de <_dtoa_r+0x876>
 801e61c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e61e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801e622:	e73c      	b.n	801e49e <_dtoa_r+0x636>
 801e624:	f10a 34ff 	add.w	r4, sl, #4294967295
 801e628:	42a3      	cmp	r3, r4
 801e62a:	bfbf      	itttt	lt
 801e62c:	1ae2      	sublt	r2, r4, r3
 801e62e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e630:	189b      	addlt	r3, r3, r2
 801e632:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801e634:	bfae      	itee	ge
 801e636:	1b1c      	subge	r4, r3, r4
 801e638:	4623      	movlt	r3, r4
 801e63a:	2400      	movlt	r4, #0
 801e63c:	f1ba 0f00 	cmp.w	sl, #0
 801e640:	bfb5      	itete	lt
 801e642:	9a05      	ldrlt	r2, [sp, #20]
 801e644:	9e05      	ldrge	r6, [sp, #20]
 801e646:	eba2 060a 	sublt.w	r6, r2, sl
 801e64a:	4652      	movge	r2, sl
 801e64c:	bfb8      	it	lt
 801e64e:	2200      	movlt	r2, #0
 801e650:	e727      	b.n	801e4a2 <_dtoa_r+0x63a>
 801e652:	9e05      	ldr	r6, [sp, #20]
 801e654:	9d08      	ldr	r5, [sp, #32]
 801e656:	461c      	mov	r4, r3
 801e658:	e730      	b.n	801e4bc <_dtoa_r+0x654>
 801e65a:	461a      	mov	r2, r3
 801e65c:	e758      	b.n	801e510 <_dtoa_r+0x6a8>
 801e65e:	2300      	movs	r3, #0
 801e660:	e786      	b.n	801e570 <_dtoa_r+0x708>
 801e662:	9b02      	ldr	r3, [sp, #8]
 801e664:	e784      	b.n	801e570 <_dtoa_r+0x708>
 801e666:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e668:	e783      	b.n	801e572 <_dtoa_r+0x70a>
 801e66a:	2300      	movs	r3, #0
 801e66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e66e:	e784      	b.n	801e57a <_dtoa_r+0x712>
 801e670:	d09d      	beq.n	801e5ae <_dtoa_r+0x746>
 801e672:	9b05      	ldr	r3, [sp, #20]
 801e674:	321c      	adds	r2, #28
 801e676:	4413      	add	r3, r2
 801e678:	9305      	str	r3, [sp, #20]
 801e67a:	9b06      	ldr	r3, [sp, #24]
 801e67c:	4416      	add	r6, r2
 801e67e:	4413      	add	r3, r2
 801e680:	e794      	b.n	801e5ac <_dtoa_r+0x744>
 801e682:	4602      	mov	r2, r0
 801e684:	e7f5      	b.n	801e672 <_dtoa_r+0x80a>
 801e686:	f1ba 0f00 	cmp.w	sl, #0
 801e68a:	f8cd 8010 	str.w	r8, [sp, #16]
 801e68e:	46d3      	mov	fp, sl
 801e690:	dc21      	bgt.n	801e6d6 <_dtoa_r+0x86e>
 801e692:	9b07      	ldr	r3, [sp, #28]
 801e694:	2b02      	cmp	r3, #2
 801e696:	dd1e      	ble.n	801e6d6 <_dtoa_r+0x86e>
 801e698:	f1bb 0f00 	cmp.w	fp, #0
 801e69c:	f47f aeb7 	bne.w	801e40e <_dtoa_r+0x5a6>
 801e6a0:	4621      	mov	r1, r4
 801e6a2:	465b      	mov	r3, fp
 801e6a4:	2205      	movs	r2, #5
 801e6a6:	4648      	mov	r0, r9
 801e6a8:	f000 fa96 	bl	801ebd8 <__multadd>
 801e6ac:	4601      	mov	r1, r0
 801e6ae:	4604      	mov	r4, r0
 801e6b0:	9801      	ldr	r0, [sp, #4]
 801e6b2:	f000 fca9 	bl	801f008 <__mcmp>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	f77f aea9 	ble.w	801e40e <_dtoa_r+0x5a6>
 801e6bc:	463e      	mov	r6, r7
 801e6be:	2331      	movs	r3, #49	@ 0x31
 801e6c0:	f806 3b01 	strb.w	r3, [r6], #1
 801e6c4:	9b04      	ldr	r3, [sp, #16]
 801e6c6:	3301      	adds	r3, #1
 801e6c8:	9304      	str	r3, [sp, #16]
 801e6ca:	e6a4      	b.n	801e416 <_dtoa_r+0x5ae>
 801e6cc:	f8cd 8010 	str.w	r8, [sp, #16]
 801e6d0:	4654      	mov	r4, sl
 801e6d2:	4625      	mov	r5, r4
 801e6d4:	e7f2      	b.n	801e6bc <_dtoa_r+0x854>
 801e6d6:	9b08      	ldr	r3, [sp, #32]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	f000 8103 	beq.w	801e8e4 <_dtoa_r+0xa7c>
 801e6de:	2e00      	cmp	r6, #0
 801e6e0:	dd05      	ble.n	801e6ee <_dtoa_r+0x886>
 801e6e2:	4629      	mov	r1, r5
 801e6e4:	4632      	mov	r2, r6
 801e6e6:	4648      	mov	r0, r9
 801e6e8:	f000 fc22 	bl	801ef30 <__lshift>
 801e6ec:	4605      	mov	r5, r0
 801e6ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	d058      	beq.n	801e7a6 <_dtoa_r+0x93e>
 801e6f4:	6869      	ldr	r1, [r5, #4]
 801e6f6:	4648      	mov	r0, r9
 801e6f8:	f000 fa0c 	bl	801eb14 <_Balloc>
 801e6fc:	4606      	mov	r6, r0
 801e6fe:	b928      	cbnz	r0, 801e70c <_dtoa_r+0x8a4>
 801e700:	4b82      	ldr	r3, [pc, #520]	@ (801e90c <_dtoa_r+0xaa4>)
 801e702:	4602      	mov	r2, r0
 801e704:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e708:	f7ff bbc7 	b.w	801de9a <_dtoa_r+0x32>
 801e70c:	692a      	ldr	r2, [r5, #16]
 801e70e:	3202      	adds	r2, #2
 801e710:	0092      	lsls	r2, r2, #2
 801e712:	f105 010c 	add.w	r1, r5, #12
 801e716:	300c      	adds	r0, #12
 801e718:	f7ff faf1 	bl	801dcfe <memcpy>
 801e71c:	2201      	movs	r2, #1
 801e71e:	4631      	mov	r1, r6
 801e720:	4648      	mov	r0, r9
 801e722:	f000 fc05 	bl	801ef30 <__lshift>
 801e726:	1c7b      	adds	r3, r7, #1
 801e728:	9305      	str	r3, [sp, #20]
 801e72a:	eb07 030b 	add.w	r3, r7, fp
 801e72e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e730:	9b02      	ldr	r3, [sp, #8]
 801e732:	f003 0301 	and.w	r3, r3, #1
 801e736:	46a8      	mov	r8, r5
 801e738:	9308      	str	r3, [sp, #32]
 801e73a:	4605      	mov	r5, r0
 801e73c:	9b05      	ldr	r3, [sp, #20]
 801e73e:	9801      	ldr	r0, [sp, #4]
 801e740:	4621      	mov	r1, r4
 801e742:	f103 3bff 	add.w	fp, r3, #4294967295
 801e746:	f7ff fb07 	bl	801dd58 <quorem>
 801e74a:	4641      	mov	r1, r8
 801e74c:	9002      	str	r0, [sp, #8]
 801e74e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e752:	9801      	ldr	r0, [sp, #4]
 801e754:	f000 fc58 	bl	801f008 <__mcmp>
 801e758:	462a      	mov	r2, r5
 801e75a:	9006      	str	r0, [sp, #24]
 801e75c:	4621      	mov	r1, r4
 801e75e:	4648      	mov	r0, r9
 801e760:	f000 fc6e 	bl	801f040 <__mdiff>
 801e764:	68c2      	ldr	r2, [r0, #12]
 801e766:	4606      	mov	r6, r0
 801e768:	b9fa      	cbnz	r2, 801e7aa <_dtoa_r+0x942>
 801e76a:	4601      	mov	r1, r0
 801e76c:	9801      	ldr	r0, [sp, #4]
 801e76e:	f000 fc4b 	bl	801f008 <__mcmp>
 801e772:	4602      	mov	r2, r0
 801e774:	4631      	mov	r1, r6
 801e776:	4648      	mov	r0, r9
 801e778:	920a      	str	r2, [sp, #40]	@ 0x28
 801e77a:	f000 fa0b 	bl	801eb94 <_Bfree>
 801e77e:	9b07      	ldr	r3, [sp, #28]
 801e780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e782:	9e05      	ldr	r6, [sp, #20]
 801e784:	ea43 0102 	orr.w	r1, r3, r2
 801e788:	9b08      	ldr	r3, [sp, #32]
 801e78a:	4319      	orrs	r1, r3
 801e78c:	d10f      	bne.n	801e7ae <_dtoa_r+0x946>
 801e78e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e792:	d028      	beq.n	801e7e6 <_dtoa_r+0x97e>
 801e794:	9b06      	ldr	r3, [sp, #24]
 801e796:	2b00      	cmp	r3, #0
 801e798:	dd02      	ble.n	801e7a0 <_dtoa_r+0x938>
 801e79a:	9b02      	ldr	r3, [sp, #8]
 801e79c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801e7a0:	f88b a000 	strb.w	sl, [fp]
 801e7a4:	e639      	b.n	801e41a <_dtoa_r+0x5b2>
 801e7a6:	4628      	mov	r0, r5
 801e7a8:	e7bd      	b.n	801e726 <_dtoa_r+0x8be>
 801e7aa:	2201      	movs	r2, #1
 801e7ac:	e7e2      	b.n	801e774 <_dtoa_r+0x90c>
 801e7ae:	9b06      	ldr	r3, [sp, #24]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	db04      	blt.n	801e7be <_dtoa_r+0x956>
 801e7b4:	9907      	ldr	r1, [sp, #28]
 801e7b6:	430b      	orrs	r3, r1
 801e7b8:	9908      	ldr	r1, [sp, #32]
 801e7ba:	430b      	orrs	r3, r1
 801e7bc:	d120      	bne.n	801e800 <_dtoa_r+0x998>
 801e7be:	2a00      	cmp	r2, #0
 801e7c0:	ddee      	ble.n	801e7a0 <_dtoa_r+0x938>
 801e7c2:	9901      	ldr	r1, [sp, #4]
 801e7c4:	2201      	movs	r2, #1
 801e7c6:	4648      	mov	r0, r9
 801e7c8:	f000 fbb2 	bl	801ef30 <__lshift>
 801e7cc:	4621      	mov	r1, r4
 801e7ce:	9001      	str	r0, [sp, #4]
 801e7d0:	f000 fc1a 	bl	801f008 <__mcmp>
 801e7d4:	2800      	cmp	r0, #0
 801e7d6:	dc03      	bgt.n	801e7e0 <_dtoa_r+0x978>
 801e7d8:	d1e2      	bne.n	801e7a0 <_dtoa_r+0x938>
 801e7da:	f01a 0f01 	tst.w	sl, #1
 801e7de:	d0df      	beq.n	801e7a0 <_dtoa_r+0x938>
 801e7e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e7e4:	d1d9      	bne.n	801e79a <_dtoa_r+0x932>
 801e7e6:	2339      	movs	r3, #57	@ 0x39
 801e7e8:	f88b 3000 	strb.w	r3, [fp]
 801e7ec:	4633      	mov	r3, r6
 801e7ee:	461e      	mov	r6, r3
 801e7f0:	3b01      	subs	r3, #1
 801e7f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e7f6:	2a39      	cmp	r2, #57	@ 0x39
 801e7f8:	d053      	beq.n	801e8a2 <_dtoa_r+0xa3a>
 801e7fa:	3201      	adds	r2, #1
 801e7fc:	701a      	strb	r2, [r3, #0]
 801e7fe:	e60c      	b.n	801e41a <_dtoa_r+0x5b2>
 801e800:	2a00      	cmp	r2, #0
 801e802:	dd07      	ble.n	801e814 <_dtoa_r+0x9ac>
 801e804:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e808:	d0ed      	beq.n	801e7e6 <_dtoa_r+0x97e>
 801e80a:	f10a 0301 	add.w	r3, sl, #1
 801e80e:	f88b 3000 	strb.w	r3, [fp]
 801e812:	e602      	b.n	801e41a <_dtoa_r+0x5b2>
 801e814:	9b05      	ldr	r3, [sp, #20]
 801e816:	9a05      	ldr	r2, [sp, #20]
 801e818:	f803 ac01 	strb.w	sl, [r3, #-1]
 801e81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e81e:	4293      	cmp	r3, r2
 801e820:	d029      	beq.n	801e876 <_dtoa_r+0xa0e>
 801e822:	9901      	ldr	r1, [sp, #4]
 801e824:	2300      	movs	r3, #0
 801e826:	220a      	movs	r2, #10
 801e828:	4648      	mov	r0, r9
 801e82a:	f000 f9d5 	bl	801ebd8 <__multadd>
 801e82e:	45a8      	cmp	r8, r5
 801e830:	9001      	str	r0, [sp, #4]
 801e832:	f04f 0300 	mov.w	r3, #0
 801e836:	f04f 020a 	mov.w	r2, #10
 801e83a:	4641      	mov	r1, r8
 801e83c:	4648      	mov	r0, r9
 801e83e:	d107      	bne.n	801e850 <_dtoa_r+0x9e8>
 801e840:	f000 f9ca 	bl	801ebd8 <__multadd>
 801e844:	4680      	mov	r8, r0
 801e846:	4605      	mov	r5, r0
 801e848:	9b05      	ldr	r3, [sp, #20]
 801e84a:	3301      	adds	r3, #1
 801e84c:	9305      	str	r3, [sp, #20]
 801e84e:	e775      	b.n	801e73c <_dtoa_r+0x8d4>
 801e850:	f000 f9c2 	bl	801ebd8 <__multadd>
 801e854:	4629      	mov	r1, r5
 801e856:	4680      	mov	r8, r0
 801e858:	2300      	movs	r3, #0
 801e85a:	220a      	movs	r2, #10
 801e85c:	4648      	mov	r0, r9
 801e85e:	f000 f9bb 	bl	801ebd8 <__multadd>
 801e862:	4605      	mov	r5, r0
 801e864:	e7f0      	b.n	801e848 <_dtoa_r+0x9e0>
 801e866:	f1bb 0f00 	cmp.w	fp, #0
 801e86a:	bfcc      	ite	gt
 801e86c:	465e      	movgt	r6, fp
 801e86e:	2601      	movle	r6, #1
 801e870:	443e      	add	r6, r7
 801e872:	f04f 0800 	mov.w	r8, #0
 801e876:	9901      	ldr	r1, [sp, #4]
 801e878:	2201      	movs	r2, #1
 801e87a:	4648      	mov	r0, r9
 801e87c:	f000 fb58 	bl	801ef30 <__lshift>
 801e880:	4621      	mov	r1, r4
 801e882:	9001      	str	r0, [sp, #4]
 801e884:	f000 fbc0 	bl	801f008 <__mcmp>
 801e888:	2800      	cmp	r0, #0
 801e88a:	dcaf      	bgt.n	801e7ec <_dtoa_r+0x984>
 801e88c:	d102      	bne.n	801e894 <_dtoa_r+0xa2c>
 801e88e:	f01a 0f01 	tst.w	sl, #1
 801e892:	d1ab      	bne.n	801e7ec <_dtoa_r+0x984>
 801e894:	4633      	mov	r3, r6
 801e896:	461e      	mov	r6, r3
 801e898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e89c:	2a30      	cmp	r2, #48	@ 0x30
 801e89e:	d0fa      	beq.n	801e896 <_dtoa_r+0xa2e>
 801e8a0:	e5bb      	b.n	801e41a <_dtoa_r+0x5b2>
 801e8a2:	429f      	cmp	r7, r3
 801e8a4:	d1a3      	bne.n	801e7ee <_dtoa_r+0x986>
 801e8a6:	9b04      	ldr	r3, [sp, #16]
 801e8a8:	3301      	adds	r3, #1
 801e8aa:	9304      	str	r3, [sp, #16]
 801e8ac:	2331      	movs	r3, #49	@ 0x31
 801e8ae:	703b      	strb	r3, [r7, #0]
 801e8b0:	e5b3      	b.n	801e41a <_dtoa_r+0x5b2>
 801e8b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8b4:	4f16      	ldr	r7, [pc, #88]	@ (801e910 <_dtoa_r+0xaa8>)
 801e8b6:	b11b      	cbz	r3, 801e8c0 <_dtoa_r+0xa58>
 801e8b8:	f107 0308 	add.w	r3, r7, #8
 801e8bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e8be:	6013      	str	r3, [r2, #0]
 801e8c0:	4638      	mov	r0, r7
 801e8c2:	b011      	add	sp, #68	@ 0x44
 801e8c4:	ecbd 8b02 	vpop	{d8}
 801e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8cc:	9b07      	ldr	r3, [sp, #28]
 801e8ce:	2b01      	cmp	r3, #1
 801e8d0:	f77f ae36 	ble.w	801e540 <_dtoa_r+0x6d8>
 801e8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e8d8:	2001      	movs	r0, #1
 801e8da:	e656      	b.n	801e58a <_dtoa_r+0x722>
 801e8dc:	f1bb 0f00 	cmp.w	fp, #0
 801e8e0:	f77f aed7 	ble.w	801e692 <_dtoa_r+0x82a>
 801e8e4:	463e      	mov	r6, r7
 801e8e6:	9801      	ldr	r0, [sp, #4]
 801e8e8:	4621      	mov	r1, r4
 801e8ea:	f7ff fa35 	bl	801dd58 <quorem>
 801e8ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e8f2:	f806 ab01 	strb.w	sl, [r6], #1
 801e8f6:	1bf2      	subs	r2, r6, r7
 801e8f8:	4593      	cmp	fp, r2
 801e8fa:	ddb4      	ble.n	801e866 <_dtoa_r+0x9fe>
 801e8fc:	9901      	ldr	r1, [sp, #4]
 801e8fe:	2300      	movs	r3, #0
 801e900:	220a      	movs	r2, #10
 801e902:	4648      	mov	r0, r9
 801e904:	f000 f968 	bl	801ebd8 <__multadd>
 801e908:	9001      	str	r0, [sp, #4]
 801e90a:	e7ec      	b.n	801e8e6 <_dtoa_r+0xa7e>
 801e90c:	08023053 	.word	0x08023053
 801e910:	08022fee 	.word	0x08022fee

0801e914 <_free_r>:
 801e914:	b538      	push	{r3, r4, r5, lr}
 801e916:	4605      	mov	r5, r0
 801e918:	2900      	cmp	r1, #0
 801e91a:	d041      	beq.n	801e9a0 <_free_r+0x8c>
 801e91c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e920:	1f0c      	subs	r4, r1, #4
 801e922:	2b00      	cmp	r3, #0
 801e924:	bfb8      	it	lt
 801e926:	18e4      	addlt	r4, r4, r3
 801e928:	f000 f8e8 	bl	801eafc <__malloc_lock>
 801e92c:	4a1d      	ldr	r2, [pc, #116]	@ (801e9a4 <_free_r+0x90>)
 801e92e:	6813      	ldr	r3, [r2, #0]
 801e930:	b933      	cbnz	r3, 801e940 <_free_r+0x2c>
 801e932:	6063      	str	r3, [r4, #4]
 801e934:	6014      	str	r4, [r2, #0]
 801e936:	4628      	mov	r0, r5
 801e938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e93c:	f000 b8e4 	b.w	801eb08 <__malloc_unlock>
 801e940:	42a3      	cmp	r3, r4
 801e942:	d908      	bls.n	801e956 <_free_r+0x42>
 801e944:	6820      	ldr	r0, [r4, #0]
 801e946:	1821      	adds	r1, r4, r0
 801e948:	428b      	cmp	r3, r1
 801e94a:	bf01      	itttt	eq
 801e94c:	6819      	ldreq	r1, [r3, #0]
 801e94e:	685b      	ldreq	r3, [r3, #4]
 801e950:	1809      	addeq	r1, r1, r0
 801e952:	6021      	streq	r1, [r4, #0]
 801e954:	e7ed      	b.n	801e932 <_free_r+0x1e>
 801e956:	461a      	mov	r2, r3
 801e958:	685b      	ldr	r3, [r3, #4]
 801e95a:	b10b      	cbz	r3, 801e960 <_free_r+0x4c>
 801e95c:	42a3      	cmp	r3, r4
 801e95e:	d9fa      	bls.n	801e956 <_free_r+0x42>
 801e960:	6811      	ldr	r1, [r2, #0]
 801e962:	1850      	adds	r0, r2, r1
 801e964:	42a0      	cmp	r0, r4
 801e966:	d10b      	bne.n	801e980 <_free_r+0x6c>
 801e968:	6820      	ldr	r0, [r4, #0]
 801e96a:	4401      	add	r1, r0
 801e96c:	1850      	adds	r0, r2, r1
 801e96e:	4283      	cmp	r3, r0
 801e970:	6011      	str	r1, [r2, #0]
 801e972:	d1e0      	bne.n	801e936 <_free_r+0x22>
 801e974:	6818      	ldr	r0, [r3, #0]
 801e976:	685b      	ldr	r3, [r3, #4]
 801e978:	6053      	str	r3, [r2, #4]
 801e97a:	4408      	add	r0, r1
 801e97c:	6010      	str	r0, [r2, #0]
 801e97e:	e7da      	b.n	801e936 <_free_r+0x22>
 801e980:	d902      	bls.n	801e988 <_free_r+0x74>
 801e982:	230c      	movs	r3, #12
 801e984:	602b      	str	r3, [r5, #0]
 801e986:	e7d6      	b.n	801e936 <_free_r+0x22>
 801e988:	6820      	ldr	r0, [r4, #0]
 801e98a:	1821      	adds	r1, r4, r0
 801e98c:	428b      	cmp	r3, r1
 801e98e:	bf04      	itt	eq
 801e990:	6819      	ldreq	r1, [r3, #0]
 801e992:	685b      	ldreq	r3, [r3, #4]
 801e994:	6063      	str	r3, [r4, #4]
 801e996:	bf04      	itt	eq
 801e998:	1809      	addeq	r1, r1, r0
 801e99a:	6021      	streq	r1, [r4, #0]
 801e99c:	6054      	str	r4, [r2, #4]
 801e99e:	e7ca      	b.n	801e936 <_free_r+0x22>
 801e9a0:	bd38      	pop	{r3, r4, r5, pc}
 801e9a2:	bf00      	nop
 801e9a4:	2400cf10 	.word	0x2400cf10

0801e9a8 <malloc>:
 801e9a8:	4b02      	ldr	r3, [pc, #8]	@ (801e9b4 <malloc+0xc>)
 801e9aa:	4601      	mov	r1, r0
 801e9ac:	6818      	ldr	r0, [r3, #0]
 801e9ae:	f000 b825 	b.w	801e9fc <_malloc_r>
 801e9b2:	bf00      	nop
 801e9b4:	24000044 	.word	0x24000044

0801e9b8 <sbrk_aligned>:
 801e9b8:	b570      	push	{r4, r5, r6, lr}
 801e9ba:	4e0f      	ldr	r6, [pc, #60]	@ (801e9f8 <sbrk_aligned+0x40>)
 801e9bc:	460c      	mov	r4, r1
 801e9be:	6831      	ldr	r1, [r6, #0]
 801e9c0:	4605      	mov	r5, r0
 801e9c2:	b911      	cbnz	r1, 801e9ca <sbrk_aligned+0x12>
 801e9c4:	f001 f804 	bl	801f9d0 <_sbrk_r>
 801e9c8:	6030      	str	r0, [r6, #0]
 801e9ca:	4621      	mov	r1, r4
 801e9cc:	4628      	mov	r0, r5
 801e9ce:	f000 ffff 	bl	801f9d0 <_sbrk_r>
 801e9d2:	1c43      	adds	r3, r0, #1
 801e9d4:	d103      	bne.n	801e9de <sbrk_aligned+0x26>
 801e9d6:	f04f 34ff 	mov.w	r4, #4294967295
 801e9da:	4620      	mov	r0, r4
 801e9dc:	bd70      	pop	{r4, r5, r6, pc}
 801e9de:	1cc4      	adds	r4, r0, #3
 801e9e0:	f024 0403 	bic.w	r4, r4, #3
 801e9e4:	42a0      	cmp	r0, r4
 801e9e6:	d0f8      	beq.n	801e9da <sbrk_aligned+0x22>
 801e9e8:	1a21      	subs	r1, r4, r0
 801e9ea:	4628      	mov	r0, r5
 801e9ec:	f000 fff0 	bl	801f9d0 <_sbrk_r>
 801e9f0:	3001      	adds	r0, #1
 801e9f2:	d1f2      	bne.n	801e9da <sbrk_aligned+0x22>
 801e9f4:	e7ef      	b.n	801e9d6 <sbrk_aligned+0x1e>
 801e9f6:	bf00      	nop
 801e9f8:	2400cf0c 	.word	0x2400cf0c

0801e9fc <_malloc_r>:
 801e9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea00:	1ccd      	adds	r5, r1, #3
 801ea02:	f025 0503 	bic.w	r5, r5, #3
 801ea06:	3508      	adds	r5, #8
 801ea08:	2d0c      	cmp	r5, #12
 801ea0a:	bf38      	it	cc
 801ea0c:	250c      	movcc	r5, #12
 801ea0e:	2d00      	cmp	r5, #0
 801ea10:	4606      	mov	r6, r0
 801ea12:	db01      	blt.n	801ea18 <_malloc_r+0x1c>
 801ea14:	42a9      	cmp	r1, r5
 801ea16:	d904      	bls.n	801ea22 <_malloc_r+0x26>
 801ea18:	230c      	movs	r3, #12
 801ea1a:	6033      	str	r3, [r6, #0]
 801ea1c:	2000      	movs	r0, #0
 801ea1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801eaf8 <_malloc_r+0xfc>
 801ea26:	f000 f869 	bl	801eafc <__malloc_lock>
 801ea2a:	f8d8 3000 	ldr.w	r3, [r8]
 801ea2e:	461c      	mov	r4, r3
 801ea30:	bb44      	cbnz	r4, 801ea84 <_malloc_r+0x88>
 801ea32:	4629      	mov	r1, r5
 801ea34:	4630      	mov	r0, r6
 801ea36:	f7ff ffbf 	bl	801e9b8 <sbrk_aligned>
 801ea3a:	1c43      	adds	r3, r0, #1
 801ea3c:	4604      	mov	r4, r0
 801ea3e:	d158      	bne.n	801eaf2 <_malloc_r+0xf6>
 801ea40:	f8d8 4000 	ldr.w	r4, [r8]
 801ea44:	4627      	mov	r7, r4
 801ea46:	2f00      	cmp	r7, #0
 801ea48:	d143      	bne.n	801ead2 <_malloc_r+0xd6>
 801ea4a:	2c00      	cmp	r4, #0
 801ea4c:	d04b      	beq.n	801eae6 <_malloc_r+0xea>
 801ea4e:	6823      	ldr	r3, [r4, #0]
 801ea50:	4639      	mov	r1, r7
 801ea52:	4630      	mov	r0, r6
 801ea54:	eb04 0903 	add.w	r9, r4, r3
 801ea58:	f000 ffba 	bl	801f9d0 <_sbrk_r>
 801ea5c:	4581      	cmp	r9, r0
 801ea5e:	d142      	bne.n	801eae6 <_malloc_r+0xea>
 801ea60:	6821      	ldr	r1, [r4, #0]
 801ea62:	1a6d      	subs	r5, r5, r1
 801ea64:	4629      	mov	r1, r5
 801ea66:	4630      	mov	r0, r6
 801ea68:	f7ff ffa6 	bl	801e9b8 <sbrk_aligned>
 801ea6c:	3001      	adds	r0, #1
 801ea6e:	d03a      	beq.n	801eae6 <_malloc_r+0xea>
 801ea70:	6823      	ldr	r3, [r4, #0]
 801ea72:	442b      	add	r3, r5
 801ea74:	6023      	str	r3, [r4, #0]
 801ea76:	f8d8 3000 	ldr.w	r3, [r8]
 801ea7a:	685a      	ldr	r2, [r3, #4]
 801ea7c:	bb62      	cbnz	r2, 801ead8 <_malloc_r+0xdc>
 801ea7e:	f8c8 7000 	str.w	r7, [r8]
 801ea82:	e00f      	b.n	801eaa4 <_malloc_r+0xa8>
 801ea84:	6822      	ldr	r2, [r4, #0]
 801ea86:	1b52      	subs	r2, r2, r5
 801ea88:	d420      	bmi.n	801eacc <_malloc_r+0xd0>
 801ea8a:	2a0b      	cmp	r2, #11
 801ea8c:	d917      	bls.n	801eabe <_malloc_r+0xc2>
 801ea8e:	1961      	adds	r1, r4, r5
 801ea90:	42a3      	cmp	r3, r4
 801ea92:	6025      	str	r5, [r4, #0]
 801ea94:	bf18      	it	ne
 801ea96:	6059      	strne	r1, [r3, #4]
 801ea98:	6863      	ldr	r3, [r4, #4]
 801ea9a:	bf08      	it	eq
 801ea9c:	f8c8 1000 	streq.w	r1, [r8]
 801eaa0:	5162      	str	r2, [r4, r5]
 801eaa2:	604b      	str	r3, [r1, #4]
 801eaa4:	4630      	mov	r0, r6
 801eaa6:	f000 f82f 	bl	801eb08 <__malloc_unlock>
 801eaaa:	f104 000b 	add.w	r0, r4, #11
 801eaae:	1d23      	adds	r3, r4, #4
 801eab0:	f020 0007 	bic.w	r0, r0, #7
 801eab4:	1ac2      	subs	r2, r0, r3
 801eab6:	bf1c      	itt	ne
 801eab8:	1a1b      	subne	r3, r3, r0
 801eaba:	50a3      	strne	r3, [r4, r2]
 801eabc:	e7af      	b.n	801ea1e <_malloc_r+0x22>
 801eabe:	6862      	ldr	r2, [r4, #4]
 801eac0:	42a3      	cmp	r3, r4
 801eac2:	bf0c      	ite	eq
 801eac4:	f8c8 2000 	streq.w	r2, [r8]
 801eac8:	605a      	strne	r2, [r3, #4]
 801eaca:	e7eb      	b.n	801eaa4 <_malloc_r+0xa8>
 801eacc:	4623      	mov	r3, r4
 801eace:	6864      	ldr	r4, [r4, #4]
 801ead0:	e7ae      	b.n	801ea30 <_malloc_r+0x34>
 801ead2:	463c      	mov	r4, r7
 801ead4:	687f      	ldr	r7, [r7, #4]
 801ead6:	e7b6      	b.n	801ea46 <_malloc_r+0x4a>
 801ead8:	461a      	mov	r2, r3
 801eada:	685b      	ldr	r3, [r3, #4]
 801eadc:	42a3      	cmp	r3, r4
 801eade:	d1fb      	bne.n	801ead8 <_malloc_r+0xdc>
 801eae0:	2300      	movs	r3, #0
 801eae2:	6053      	str	r3, [r2, #4]
 801eae4:	e7de      	b.n	801eaa4 <_malloc_r+0xa8>
 801eae6:	230c      	movs	r3, #12
 801eae8:	6033      	str	r3, [r6, #0]
 801eaea:	4630      	mov	r0, r6
 801eaec:	f000 f80c 	bl	801eb08 <__malloc_unlock>
 801eaf0:	e794      	b.n	801ea1c <_malloc_r+0x20>
 801eaf2:	6005      	str	r5, [r0, #0]
 801eaf4:	e7d6      	b.n	801eaa4 <_malloc_r+0xa8>
 801eaf6:	bf00      	nop
 801eaf8:	2400cf10 	.word	0x2400cf10

0801eafc <__malloc_lock>:
 801eafc:	4801      	ldr	r0, [pc, #4]	@ (801eb04 <__malloc_lock+0x8>)
 801eafe:	f7ff b8fc 	b.w	801dcfa <__retarget_lock_acquire_recursive>
 801eb02:	bf00      	nop
 801eb04:	2400cf08 	.word	0x2400cf08

0801eb08 <__malloc_unlock>:
 801eb08:	4801      	ldr	r0, [pc, #4]	@ (801eb10 <__malloc_unlock+0x8>)
 801eb0a:	f7ff b8f7 	b.w	801dcfc <__retarget_lock_release_recursive>
 801eb0e:	bf00      	nop
 801eb10:	2400cf08 	.word	0x2400cf08

0801eb14 <_Balloc>:
 801eb14:	b570      	push	{r4, r5, r6, lr}
 801eb16:	69c6      	ldr	r6, [r0, #28]
 801eb18:	4604      	mov	r4, r0
 801eb1a:	460d      	mov	r5, r1
 801eb1c:	b976      	cbnz	r6, 801eb3c <_Balloc+0x28>
 801eb1e:	2010      	movs	r0, #16
 801eb20:	f7ff ff42 	bl	801e9a8 <malloc>
 801eb24:	4602      	mov	r2, r0
 801eb26:	61e0      	str	r0, [r4, #28]
 801eb28:	b920      	cbnz	r0, 801eb34 <_Balloc+0x20>
 801eb2a:	4b18      	ldr	r3, [pc, #96]	@ (801eb8c <_Balloc+0x78>)
 801eb2c:	4818      	ldr	r0, [pc, #96]	@ (801eb90 <_Balloc+0x7c>)
 801eb2e:	216b      	movs	r1, #107	@ 0x6b
 801eb30:	f7ff f8f4 	bl	801dd1c <__assert_func>
 801eb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eb38:	6006      	str	r6, [r0, #0]
 801eb3a:	60c6      	str	r6, [r0, #12]
 801eb3c:	69e6      	ldr	r6, [r4, #28]
 801eb3e:	68f3      	ldr	r3, [r6, #12]
 801eb40:	b183      	cbz	r3, 801eb64 <_Balloc+0x50>
 801eb42:	69e3      	ldr	r3, [r4, #28]
 801eb44:	68db      	ldr	r3, [r3, #12]
 801eb46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801eb4a:	b9b8      	cbnz	r0, 801eb7c <_Balloc+0x68>
 801eb4c:	2101      	movs	r1, #1
 801eb4e:	fa01 f605 	lsl.w	r6, r1, r5
 801eb52:	1d72      	adds	r2, r6, #5
 801eb54:	0092      	lsls	r2, r2, #2
 801eb56:	4620      	mov	r0, r4
 801eb58:	f000 ff51 	bl	801f9fe <_calloc_r>
 801eb5c:	b160      	cbz	r0, 801eb78 <_Balloc+0x64>
 801eb5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eb62:	e00e      	b.n	801eb82 <_Balloc+0x6e>
 801eb64:	2221      	movs	r2, #33	@ 0x21
 801eb66:	2104      	movs	r1, #4
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f000 ff48 	bl	801f9fe <_calloc_r>
 801eb6e:	69e3      	ldr	r3, [r4, #28]
 801eb70:	60f0      	str	r0, [r6, #12]
 801eb72:	68db      	ldr	r3, [r3, #12]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d1e4      	bne.n	801eb42 <_Balloc+0x2e>
 801eb78:	2000      	movs	r0, #0
 801eb7a:	bd70      	pop	{r4, r5, r6, pc}
 801eb7c:	6802      	ldr	r2, [r0, #0]
 801eb7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eb82:	2300      	movs	r3, #0
 801eb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801eb88:	e7f7      	b.n	801eb7a <_Balloc+0x66>
 801eb8a:	bf00      	nop
 801eb8c:	08022e0e 	.word	0x08022e0e
 801eb90:	08023064 	.word	0x08023064

0801eb94 <_Bfree>:
 801eb94:	b570      	push	{r4, r5, r6, lr}
 801eb96:	69c6      	ldr	r6, [r0, #28]
 801eb98:	4605      	mov	r5, r0
 801eb9a:	460c      	mov	r4, r1
 801eb9c:	b976      	cbnz	r6, 801ebbc <_Bfree+0x28>
 801eb9e:	2010      	movs	r0, #16
 801eba0:	f7ff ff02 	bl	801e9a8 <malloc>
 801eba4:	4602      	mov	r2, r0
 801eba6:	61e8      	str	r0, [r5, #28]
 801eba8:	b920      	cbnz	r0, 801ebb4 <_Bfree+0x20>
 801ebaa:	4b09      	ldr	r3, [pc, #36]	@ (801ebd0 <_Bfree+0x3c>)
 801ebac:	4809      	ldr	r0, [pc, #36]	@ (801ebd4 <_Bfree+0x40>)
 801ebae:	218f      	movs	r1, #143	@ 0x8f
 801ebb0:	f7ff f8b4 	bl	801dd1c <__assert_func>
 801ebb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ebb8:	6006      	str	r6, [r0, #0]
 801ebba:	60c6      	str	r6, [r0, #12]
 801ebbc:	b13c      	cbz	r4, 801ebce <_Bfree+0x3a>
 801ebbe:	69eb      	ldr	r3, [r5, #28]
 801ebc0:	6862      	ldr	r2, [r4, #4]
 801ebc2:	68db      	ldr	r3, [r3, #12]
 801ebc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ebc8:	6021      	str	r1, [r4, #0]
 801ebca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ebce:	bd70      	pop	{r4, r5, r6, pc}
 801ebd0:	08022e0e 	.word	0x08022e0e
 801ebd4:	08023064 	.word	0x08023064

0801ebd8 <__multadd>:
 801ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebdc:	690d      	ldr	r5, [r1, #16]
 801ebde:	4607      	mov	r7, r0
 801ebe0:	460c      	mov	r4, r1
 801ebe2:	461e      	mov	r6, r3
 801ebe4:	f101 0c14 	add.w	ip, r1, #20
 801ebe8:	2000      	movs	r0, #0
 801ebea:	f8dc 3000 	ldr.w	r3, [ip]
 801ebee:	b299      	uxth	r1, r3
 801ebf0:	fb02 6101 	mla	r1, r2, r1, r6
 801ebf4:	0c1e      	lsrs	r6, r3, #16
 801ebf6:	0c0b      	lsrs	r3, r1, #16
 801ebf8:	fb02 3306 	mla	r3, r2, r6, r3
 801ebfc:	b289      	uxth	r1, r1
 801ebfe:	3001      	adds	r0, #1
 801ec00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ec04:	4285      	cmp	r5, r0
 801ec06:	f84c 1b04 	str.w	r1, [ip], #4
 801ec0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ec0e:	dcec      	bgt.n	801ebea <__multadd+0x12>
 801ec10:	b30e      	cbz	r6, 801ec56 <__multadd+0x7e>
 801ec12:	68a3      	ldr	r3, [r4, #8]
 801ec14:	42ab      	cmp	r3, r5
 801ec16:	dc19      	bgt.n	801ec4c <__multadd+0x74>
 801ec18:	6861      	ldr	r1, [r4, #4]
 801ec1a:	4638      	mov	r0, r7
 801ec1c:	3101      	adds	r1, #1
 801ec1e:	f7ff ff79 	bl	801eb14 <_Balloc>
 801ec22:	4680      	mov	r8, r0
 801ec24:	b928      	cbnz	r0, 801ec32 <__multadd+0x5a>
 801ec26:	4602      	mov	r2, r0
 801ec28:	4b0c      	ldr	r3, [pc, #48]	@ (801ec5c <__multadd+0x84>)
 801ec2a:	480d      	ldr	r0, [pc, #52]	@ (801ec60 <__multadd+0x88>)
 801ec2c:	21ba      	movs	r1, #186	@ 0xba
 801ec2e:	f7ff f875 	bl	801dd1c <__assert_func>
 801ec32:	6922      	ldr	r2, [r4, #16]
 801ec34:	3202      	adds	r2, #2
 801ec36:	f104 010c 	add.w	r1, r4, #12
 801ec3a:	0092      	lsls	r2, r2, #2
 801ec3c:	300c      	adds	r0, #12
 801ec3e:	f7ff f85e 	bl	801dcfe <memcpy>
 801ec42:	4621      	mov	r1, r4
 801ec44:	4638      	mov	r0, r7
 801ec46:	f7ff ffa5 	bl	801eb94 <_Bfree>
 801ec4a:	4644      	mov	r4, r8
 801ec4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ec50:	3501      	adds	r5, #1
 801ec52:	615e      	str	r6, [r3, #20]
 801ec54:	6125      	str	r5, [r4, #16]
 801ec56:	4620      	mov	r0, r4
 801ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec5c:	08023053 	.word	0x08023053
 801ec60:	08023064 	.word	0x08023064

0801ec64 <__hi0bits>:
 801ec64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ec68:	4603      	mov	r3, r0
 801ec6a:	bf36      	itet	cc
 801ec6c:	0403      	lslcc	r3, r0, #16
 801ec6e:	2000      	movcs	r0, #0
 801ec70:	2010      	movcc	r0, #16
 801ec72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ec76:	bf3c      	itt	cc
 801ec78:	021b      	lslcc	r3, r3, #8
 801ec7a:	3008      	addcc	r0, #8
 801ec7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ec80:	bf3c      	itt	cc
 801ec82:	011b      	lslcc	r3, r3, #4
 801ec84:	3004      	addcc	r0, #4
 801ec86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ec8a:	bf3c      	itt	cc
 801ec8c:	009b      	lslcc	r3, r3, #2
 801ec8e:	3002      	addcc	r0, #2
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	db05      	blt.n	801eca0 <__hi0bits+0x3c>
 801ec94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ec98:	f100 0001 	add.w	r0, r0, #1
 801ec9c:	bf08      	it	eq
 801ec9e:	2020      	moveq	r0, #32
 801eca0:	4770      	bx	lr

0801eca2 <__lo0bits>:
 801eca2:	6803      	ldr	r3, [r0, #0]
 801eca4:	4602      	mov	r2, r0
 801eca6:	f013 0007 	ands.w	r0, r3, #7
 801ecaa:	d00b      	beq.n	801ecc4 <__lo0bits+0x22>
 801ecac:	07d9      	lsls	r1, r3, #31
 801ecae:	d421      	bmi.n	801ecf4 <__lo0bits+0x52>
 801ecb0:	0798      	lsls	r0, r3, #30
 801ecb2:	bf49      	itett	mi
 801ecb4:	085b      	lsrmi	r3, r3, #1
 801ecb6:	089b      	lsrpl	r3, r3, #2
 801ecb8:	2001      	movmi	r0, #1
 801ecba:	6013      	strmi	r3, [r2, #0]
 801ecbc:	bf5c      	itt	pl
 801ecbe:	6013      	strpl	r3, [r2, #0]
 801ecc0:	2002      	movpl	r0, #2
 801ecc2:	4770      	bx	lr
 801ecc4:	b299      	uxth	r1, r3
 801ecc6:	b909      	cbnz	r1, 801eccc <__lo0bits+0x2a>
 801ecc8:	0c1b      	lsrs	r3, r3, #16
 801ecca:	2010      	movs	r0, #16
 801eccc:	b2d9      	uxtb	r1, r3
 801ecce:	b909      	cbnz	r1, 801ecd4 <__lo0bits+0x32>
 801ecd0:	3008      	adds	r0, #8
 801ecd2:	0a1b      	lsrs	r3, r3, #8
 801ecd4:	0719      	lsls	r1, r3, #28
 801ecd6:	bf04      	itt	eq
 801ecd8:	091b      	lsreq	r3, r3, #4
 801ecda:	3004      	addeq	r0, #4
 801ecdc:	0799      	lsls	r1, r3, #30
 801ecde:	bf04      	itt	eq
 801ece0:	089b      	lsreq	r3, r3, #2
 801ece2:	3002      	addeq	r0, #2
 801ece4:	07d9      	lsls	r1, r3, #31
 801ece6:	d403      	bmi.n	801ecf0 <__lo0bits+0x4e>
 801ece8:	085b      	lsrs	r3, r3, #1
 801ecea:	f100 0001 	add.w	r0, r0, #1
 801ecee:	d003      	beq.n	801ecf8 <__lo0bits+0x56>
 801ecf0:	6013      	str	r3, [r2, #0]
 801ecf2:	4770      	bx	lr
 801ecf4:	2000      	movs	r0, #0
 801ecf6:	4770      	bx	lr
 801ecf8:	2020      	movs	r0, #32
 801ecfa:	4770      	bx	lr

0801ecfc <__i2b>:
 801ecfc:	b510      	push	{r4, lr}
 801ecfe:	460c      	mov	r4, r1
 801ed00:	2101      	movs	r1, #1
 801ed02:	f7ff ff07 	bl	801eb14 <_Balloc>
 801ed06:	4602      	mov	r2, r0
 801ed08:	b928      	cbnz	r0, 801ed16 <__i2b+0x1a>
 801ed0a:	4b05      	ldr	r3, [pc, #20]	@ (801ed20 <__i2b+0x24>)
 801ed0c:	4805      	ldr	r0, [pc, #20]	@ (801ed24 <__i2b+0x28>)
 801ed0e:	f240 1145 	movw	r1, #325	@ 0x145
 801ed12:	f7ff f803 	bl	801dd1c <__assert_func>
 801ed16:	2301      	movs	r3, #1
 801ed18:	6144      	str	r4, [r0, #20]
 801ed1a:	6103      	str	r3, [r0, #16]
 801ed1c:	bd10      	pop	{r4, pc}
 801ed1e:	bf00      	nop
 801ed20:	08023053 	.word	0x08023053
 801ed24:	08023064 	.word	0x08023064

0801ed28 <__multiply>:
 801ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed2c:	4614      	mov	r4, r2
 801ed2e:	690a      	ldr	r2, [r1, #16]
 801ed30:	6923      	ldr	r3, [r4, #16]
 801ed32:	429a      	cmp	r2, r3
 801ed34:	bfa8      	it	ge
 801ed36:	4623      	movge	r3, r4
 801ed38:	460f      	mov	r7, r1
 801ed3a:	bfa4      	itt	ge
 801ed3c:	460c      	movge	r4, r1
 801ed3e:	461f      	movge	r7, r3
 801ed40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ed44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ed48:	68a3      	ldr	r3, [r4, #8]
 801ed4a:	6861      	ldr	r1, [r4, #4]
 801ed4c:	eb0a 0609 	add.w	r6, sl, r9
 801ed50:	42b3      	cmp	r3, r6
 801ed52:	b085      	sub	sp, #20
 801ed54:	bfb8      	it	lt
 801ed56:	3101      	addlt	r1, #1
 801ed58:	f7ff fedc 	bl	801eb14 <_Balloc>
 801ed5c:	b930      	cbnz	r0, 801ed6c <__multiply+0x44>
 801ed5e:	4602      	mov	r2, r0
 801ed60:	4b44      	ldr	r3, [pc, #272]	@ (801ee74 <__multiply+0x14c>)
 801ed62:	4845      	ldr	r0, [pc, #276]	@ (801ee78 <__multiply+0x150>)
 801ed64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ed68:	f7fe ffd8 	bl	801dd1c <__assert_func>
 801ed6c:	f100 0514 	add.w	r5, r0, #20
 801ed70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ed74:	462b      	mov	r3, r5
 801ed76:	2200      	movs	r2, #0
 801ed78:	4543      	cmp	r3, r8
 801ed7a:	d321      	bcc.n	801edc0 <__multiply+0x98>
 801ed7c:	f107 0114 	add.w	r1, r7, #20
 801ed80:	f104 0214 	add.w	r2, r4, #20
 801ed84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ed88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ed8c:	9302      	str	r3, [sp, #8]
 801ed8e:	1b13      	subs	r3, r2, r4
 801ed90:	3b15      	subs	r3, #21
 801ed92:	f023 0303 	bic.w	r3, r3, #3
 801ed96:	3304      	adds	r3, #4
 801ed98:	f104 0715 	add.w	r7, r4, #21
 801ed9c:	42ba      	cmp	r2, r7
 801ed9e:	bf38      	it	cc
 801eda0:	2304      	movcc	r3, #4
 801eda2:	9301      	str	r3, [sp, #4]
 801eda4:	9b02      	ldr	r3, [sp, #8]
 801eda6:	9103      	str	r1, [sp, #12]
 801eda8:	428b      	cmp	r3, r1
 801edaa:	d80c      	bhi.n	801edc6 <__multiply+0x9e>
 801edac:	2e00      	cmp	r6, #0
 801edae:	dd03      	ble.n	801edb8 <__multiply+0x90>
 801edb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d05b      	beq.n	801ee70 <__multiply+0x148>
 801edb8:	6106      	str	r6, [r0, #16]
 801edba:	b005      	add	sp, #20
 801edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edc0:	f843 2b04 	str.w	r2, [r3], #4
 801edc4:	e7d8      	b.n	801ed78 <__multiply+0x50>
 801edc6:	f8b1 a000 	ldrh.w	sl, [r1]
 801edca:	f1ba 0f00 	cmp.w	sl, #0
 801edce:	d024      	beq.n	801ee1a <__multiply+0xf2>
 801edd0:	f104 0e14 	add.w	lr, r4, #20
 801edd4:	46a9      	mov	r9, r5
 801edd6:	f04f 0c00 	mov.w	ip, #0
 801edda:	f85e 7b04 	ldr.w	r7, [lr], #4
 801edde:	f8d9 3000 	ldr.w	r3, [r9]
 801ede2:	fa1f fb87 	uxth.w	fp, r7
 801ede6:	b29b      	uxth	r3, r3
 801ede8:	fb0a 330b 	mla	r3, sl, fp, r3
 801edec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801edf0:	f8d9 7000 	ldr.w	r7, [r9]
 801edf4:	4463      	add	r3, ip
 801edf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801edfa:	fb0a c70b 	mla	r7, sl, fp, ip
 801edfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ee02:	b29b      	uxth	r3, r3
 801ee04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ee08:	4572      	cmp	r2, lr
 801ee0a:	f849 3b04 	str.w	r3, [r9], #4
 801ee0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ee12:	d8e2      	bhi.n	801edda <__multiply+0xb2>
 801ee14:	9b01      	ldr	r3, [sp, #4]
 801ee16:	f845 c003 	str.w	ip, [r5, r3]
 801ee1a:	9b03      	ldr	r3, [sp, #12]
 801ee1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ee20:	3104      	adds	r1, #4
 801ee22:	f1b9 0f00 	cmp.w	r9, #0
 801ee26:	d021      	beq.n	801ee6c <__multiply+0x144>
 801ee28:	682b      	ldr	r3, [r5, #0]
 801ee2a:	f104 0c14 	add.w	ip, r4, #20
 801ee2e:	46ae      	mov	lr, r5
 801ee30:	f04f 0a00 	mov.w	sl, #0
 801ee34:	f8bc b000 	ldrh.w	fp, [ip]
 801ee38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ee3c:	fb09 770b 	mla	r7, r9, fp, r7
 801ee40:	4457      	add	r7, sl
 801ee42:	b29b      	uxth	r3, r3
 801ee44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ee48:	f84e 3b04 	str.w	r3, [lr], #4
 801ee4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ee50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ee54:	f8be 3000 	ldrh.w	r3, [lr]
 801ee58:	fb09 330a 	mla	r3, r9, sl, r3
 801ee5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ee60:	4562      	cmp	r2, ip
 801ee62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ee66:	d8e5      	bhi.n	801ee34 <__multiply+0x10c>
 801ee68:	9f01      	ldr	r7, [sp, #4]
 801ee6a:	51eb      	str	r3, [r5, r7]
 801ee6c:	3504      	adds	r5, #4
 801ee6e:	e799      	b.n	801eda4 <__multiply+0x7c>
 801ee70:	3e01      	subs	r6, #1
 801ee72:	e79b      	b.n	801edac <__multiply+0x84>
 801ee74:	08023053 	.word	0x08023053
 801ee78:	08023064 	.word	0x08023064

0801ee7c <__pow5mult>:
 801ee7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee80:	4615      	mov	r5, r2
 801ee82:	f012 0203 	ands.w	r2, r2, #3
 801ee86:	4607      	mov	r7, r0
 801ee88:	460e      	mov	r6, r1
 801ee8a:	d007      	beq.n	801ee9c <__pow5mult+0x20>
 801ee8c:	4c25      	ldr	r4, [pc, #148]	@ (801ef24 <__pow5mult+0xa8>)
 801ee8e:	3a01      	subs	r2, #1
 801ee90:	2300      	movs	r3, #0
 801ee92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ee96:	f7ff fe9f 	bl	801ebd8 <__multadd>
 801ee9a:	4606      	mov	r6, r0
 801ee9c:	10ad      	asrs	r5, r5, #2
 801ee9e:	d03d      	beq.n	801ef1c <__pow5mult+0xa0>
 801eea0:	69fc      	ldr	r4, [r7, #28]
 801eea2:	b97c      	cbnz	r4, 801eec4 <__pow5mult+0x48>
 801eea4:	2010      	movs	r0, #16
 801eea6:	f7ff fd7f 	bl	801e9a8 <malloc>
 801eeaa:	4602      	mov	r2, r0
 801eeac:	61f8      	str	r0, [r7, #28]
 801eeae:	b928      	cbnz	r0, 801eebc <__pow5mult+0x40>
 801eeb0:	4b1d      	ldr	r3, [pc, #116]	@ (801ef28 <__pow5mult+0xac>)
 801eeb2:	481e      	ldr	r0, [pc, #120]	@ (801ef2c <__pow5mult+0xb0>)
 801eeb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801eeb8:	f7fe ff30 	bl	801dd1c <__assert_func>
 801eebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801eec0:	6004      	str	r4, [r0, #0]
 801eec2:	60c4      	str	r4, [r0, #12]
 801eec4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801eec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801eecc:	b94c      	cbnz	r4, 801eee2 <__pow5mult+0x66>
 801eece:	f240 2171 	movw	r1, #625	@ 0x271
 801eed2:	4638      	mov	r0, r7
 801eed4:	f7ff ff12 	bl	801ecfc <__i2b>
 801eed8:	2300      	movs	r3, #0
 801eeda:	f8c8 0008 	str.w	r0, [r8, #8]
 801eede:	4604      	mov	r4, r0
 801eee0:	6003      	str	r3, [r0, #0]
 801eee2:	f04f 0900 	mov.w	r9, #0
 801eee6:	07eb      	lsls	r3, r5, #31
 801eee8:	d50a      	bpl.n	801ef00 <__pow5mult+0x84>
 801eeea:	4631      	mov	r1, r6
 801eeec:	4622      	mov	r2, r4
 801eeee:	4638      	mov	r0, r7
 801eef0:	f7ff ff1a 	bl	801ed28 <__multiply>
 801eef4:	4631      	mov	r1, r6
 801eef6:	4680      	mov	r8, r0
 801eef8:	4638      	mov	r0, r7
 801eefa:	f7ff fe4b 	bl	801eb94 <_Bfree>
 801eefe:	4646      	mov	r6, r8
 801ef00:	106d      	asrs	r5, r5, #1
 801ef02:	d00b      	beq.n	801ef1c <__pow5mult+0xa0>
 801ef04:	6820      	ldr	r0, [r4, #0]
 801ef06:	b938      	cbnz	r0, 801ef18 <__pow5mult+0x9c>
 801ef08:	4622      	mov	r2, r4
 801ef0a:	4621      	mov	r1, r4
 801ef0c:	4638      	mov	r0, r7
 801ef0e:	f7ff ff0b 	bl	801ed28 <__multiply>
 801ef12:	6020      	str	r0, [r4, #0]
 801ef14:	f8c0 9000 	str.w	r9, [r0]
 801ef18:	4604      	mov	r4, r0
 801ef1a:	e7e4      	b.n	801eee6 <__pow5mult+0x6a>
 801ef1c:	4630      	mov	r0, r6
 801ef1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef22:	bf00      	nop
 801ef24:	080230c0 	.word	0x080230c0
 801ef28:	08022e0e 	.word	0x08022e0e
 801ef2c:	08023064 	.word	0x08023064

0801ef30 <__lshift>:
 801ef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef34:	460c      	mov	r4, r1
 801ef36:	6849      	ldr	r1, [r1, #4]
 801ef38:	6923      	ldr	r3, [r4, #16]
 801ef3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ef3e:	68a3      	ldr	r3, [r4, #8]
 801ef40:	4607      	mov	r7, r0
 801ef42:	4691      	mov	r9, r2
 801ef44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ef48:	f108 0601 	add.w	r6, r8, #1
 801ef4c:	42b3      	cmp	r3, r6
 801ef4e:	db0b      	blt.n	801ef68 <__lshift+0x38>
 801ef50:	4638      	mov	r0, r7
 801ef52:	f7ff fddf 	bl	801eb14 <_Balloc>
 801ef56:	4605      	mov	r5, r0
 801ef58:	b948      	cbnz	r0, 801ef6e <__lshift+0x3e>
 801ef5a:	4602      	mov	r2, r0
 801ef5c:	4b28      	ldr	r3, [pc, #160]	@ (801f000 <__lshift+0xd0>)
 801ef5e:	4829      	ldr	r0, [pc, #164]	@ (801f004 <__lshift+0xd4>)
 801ef60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ef64:	f7fe feda 	bl	801dd1c <__assert_func>
 801ef68:	3101      	adds	r1, #1
 801ef6a:	005b      	lsls	r3, r3, #1
 801ef6c:	e7ee      	b.n	801ef4c <__lshift+0x1c>
 801ef6e:	2300      	movs	r3, #0
 801ef70:	f100 0114 	add.w	r1, r0, #20
 801ef74:	f100 0210 	add.w	r2, r0, #16
 801ef78:	4618      	mov	r0, r3
 801ef7a:	4553      	cmp	r3, sl
 801ef7c:	db33      	blt.n	801efe6 <__lshift+0xb6>
 801ef7e:	6920      	ldr	r0, [r4, #16]
 801ef80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ef84:	f104 0314 	add.w	r3, r4, #20
 801ef88:	f019 091f 	ands.w	r9, r9, #31
 801ef8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ef90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ef94:	d02b      	beq.n	801efee <__lshift+0xbe>
 801ef96:	f1c9 0e20 	rsb	lr, r9, #32
 801ef9a:	468a      	mov	sl, r1
 801ef9c:	2200      	movs	r2, #0
 801ef9e:	6818      	ldr	r0, [r3, #0]
 801efa0:	fa00 f009 	lsl.w	r0, r0, r9
 801efa4:	4310      	orrs	r0, r2
 801efa6:	f84a 0b04 	str.w	r0, [sl], #4
 801efaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801efae:	459c      	cmp	ip, r3
 801efb0:	fa22 f20e 	lsr.w	r2, r2, lr
 801efb4:	d8f3      	bhi.n	801ef9e <__lshift+0x6e>
 801efb6:	ebac 0304 	sub.w	r3, ip, r4
 801efba:	3b15      	subs	r3, #21
 801efbc:	f023 0303 	bic.w	r3, r3, #3
 801efc0:	3304      	adds	r3, #4
 801efc2:	f104 0015 	add.w	r0, r4, #21
 801efc6:	4584      	cmp	ip, r0
 801efc8:	bf38      	it	cc
 801efca:	2304      	movcc	r3, #4
 801efcc:	50ca      	str	r2, [r1, r3]
 801efce:	b10a      	cbz	r2, 801efd4 <__lshift+0xa4>
 801efd0:	f108 0602 	add.w	r6, r8, #2
 801efd4:	3e01      	subs	r6, #1
 801efd6:	4638      	mov	r0, r7
 801efd8:	612e      	str	r6, [r5, #16]
 801efda:	4621      	mov	r1, r4
 801efdc:	f7ff fdda 	bl	801eb94 <_Bfree>
 801efe0:	4628      	mov	r0, r5
 801efe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efe6:	f842 0f04 	str.w	r0, [r2, #4]!
 801efea:	3301      	adds	r3, #1
 801efec:	e7c5      	b.n	801ef7a <__lshift+0x4a>
 801efee:	3904      	subs	r1, #4
 801eff0:	f853 2b04 	ldr.w	r2, [r3], #4
 801eff4:	f841 2f04 	str.w	r2, [r1, #4]!
 801eff8:	459c      	cmp	ip, r3
 801effa:	d8f9      	bhi.n	801eff0 <__lshift+0xc0>
 801effc:	e7ea      	b.n	801efd4 <__lshift+0xa4>
 801effe:	bf00      	nop
 801f000:	08023053 	.word	0x08023053
 801f004:	08023064 	.word	0x08023064

0801f008 <__mcmp>:
 801f008:	690a      	ldr	r2, [r1, #16]
 801f00a:	4603      	mov	r3, r0
 801f00c:	6900      	ldr	r0, [r0, #16]
 801f00e:	1a80      	subs	r0, r0, r2
 801f010:	b530      	push	{r4, r5, lr}
 801f012:	d10e      	bne.n	801f032 <__mcmp+0x2a>
 801f014:	3314      	adds	r3, #20
 801f016:	3114      	adds	r1, #20
 801f018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f01c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f028:	4295      	cmp	r5, r2
 801f02a:	d003      	beq.n	801f034 <__mcmp+0x2c>
 801f02c:	d205      	bcs.n	801f03a <__mcmp+0x32>
 801f02e:	f04f 30ff 	mov.w	r0, #4294967295
 801f032:	bd30      	pop	{r4, r5, pc}
 801f034:	42a3      	cmp	r3, r4
 801f036:	d3f3      	bcc.n	801f020 <__mcmp+0x18>
 801f038:	e7fb      	b.n	801f032 <__mcmp+0x2a>
 801f03a:	2001      	movs	r0, #1
 801f03c:	e7f9      	b.n	801f032 <__mcmp+0x2a>
	...

0801f040 <__mdiff>:
 801f040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f044:	4689      	mov	r9, r1
 801f046:	4606      	mov	r6, r0
 801f048:	4611      	mov	r1, r2
 801f04a:	4648      	mov	r0, r9
 801f04c:	4614      	mov	r4, r2
 801f04e:	f7ff ffdb 	bl	801f008 <__mcmp>
 801f052:	1e05      	subs	r5, r0, #0
 801f054:	d112      	bne.n	801f07c <__mdiff+0x3c>
 801f056:	4629      	mov	r1, r5
 801f058:	4630      	mov	r0, r6
 801f05a:	f7ff fd5b 	bl	801eb14 <_Balloc>
 801f05e:	4602      	mov	r2, r0
 801f060:	b928      	cbnz	r0, 801f06e <__mdiff+0x2e>
 801f062:	4b3f      	ldr	r3, [pc, #252]	@ (801f160 <__mdiff+0x120>)
 801f064:	f240 2137 	movw	r1, #567	@ 0x237
 801f068:	483e      	ldr	r0, [pc, #248]	@ (801f164 <__mdiff+0x124>)
 801f06a:	f7fe fe57 	bl	801dd1c <__assert_func>
 801f06e:	2301      	movs	r3, #1
 801f070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f074:	4610      	mov	r0, r2
 801f076:	b003      	add	sp, #12
 801f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07c:	bfbc      	itt	lt
 801f07e:	464b      	movlt	r3, r9
 801f080:	46a1      	movlt	r9, r4
 801f082:	4630      	mov	r0, r6
 801f084:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f088:	bfba      	itte	lt
 801f08a:	461c      	movlt	r4, r3
 801f08c:	2501      	movlt	r5, #1
 801f08e:	2500      	movge	r5, #0
 801f090:	f7ff fd40 	bl	801eb14 <_Balloc>
 801f094:	4602      	mov	r2, r0
 801f096:	b918      	cbnz	r0, 801f0a0 <__mdiff+0x60>
 801f098:	4b31      	ldr	r3, [pc, #196]	@ (801f160 <__mdiff+0x120>)
 801f09a:	f240 2145 	movw	r1, #581	@ 0x245
 801f09e:	e7e3      	b.n	801f068 <__mdiff+0x28>
 801f0a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f0a4:	6926      	ldr	r6, [r4, #16]
 801f0a6:	60c5      	str	r5, [r0, #12]
 801f0a8:	f109 0310 	add.w	r3, r9, #16
 801f0ac:	f109 0514 	add.w	r5, r9, #20
 801f0b0:	f104 0e14 	add.w	lr, r4, #20
 801f0b4:	f100 0b14 	add.w	fp, r0, #20
 801f0b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f0bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f0c0:	9301      	str	r3, [sp, #4]
 801f0c2:	46d9      	mov	r9, fp
 801f0c4:	f04f 0c00 	mov.w	ip, #0
 801f0c8:	9b01      	ldr	r3, [sp, #4]
 801f0ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f0ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f0d2:	9301      	str	r3, [sp, #4]
 801f0d4:	fa1f f38a 	uxth.w	r3, sl
 801f0d8:	4619      	mov	r1, r3
 801f0da:	b283      	uxth	r3, r0
 801f0dc:	1acb      	subs	r3, r1, r3
 801f0de:	0c00      	lsrs	r0, r0, #16
 801f0e0:	4463      	add	r3, ip
 801f0e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f0e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f0ea:	b29b      	uxth	r3, r3
 801f0ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f0f0:	4576      	cmp	r6, lr
 801f0f2:	f849 3b04 	str.w	r3, [r9], #4
 801f0f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f0fa:	d8e5      	bhi.n	801f0c8 <__mdiff+0x88>
 801f0fc:	1b33      	subs	r3, r6, r4
 801f0fe:	3b15      	subs	r3, #21
 801f100:	f023 0303 	bic.w	r3, r3, #3
 801f104:	3415      	adds	r4, #21
 801f106:	3304      	adds	r3, #4
 801f108:	42a6      	cmp	r6, r4
 801f10a:	bf38      	it	cc
 801f10c:	2304      	movcc	r3, #4
 801f10e:	441d      	add	r5, r3
 801f110:	445b      	add	r3, fp
 801f112:	461e      	mov	r6, r3
 801f114:	462c      	mov	r4, r5
 801f116:	4544      	cmp	r4, r8
 801f118:	d30e      	bcc.n	801f138 <__mdiff+0xf8>
 801f11a:	f108 0103 	add.w	r1, r8, #3
 801f11e:	1b49      	subs	r1, r1, r5
 801f120:	f021 0103 	bic.w	r1, r1, #3
 801f124:	3d03      	subs	r5, #3
 801f126:	45a8      	cmp	r8, r5
 801f128:	bf38      	it	cc
 801f12a:	2100      	movcc	r1, #0
 801f12c:	440b      	add	r3, r1
 801f12e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f132:	b191      	cbz	r1, 801f15a <__mdiff+0x11a>
 801f134:	6117      	str	r7, [r2, #16]
 801f136:	e79d      	b.n	801f074 <__mdiff+0x34>
 801f138:	f854 1b04 	ldr.w	r1, [r4], #4
 801f13c:	46e6      	mov	lr, ip
 801f13e:	0c08      	lsrs	r0, r1, #16
 801f140:	fa1c fc81 	uxtah	ip, ip, r1
 801f144:	4471      	add	r1, lr
 801f146:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f14a:	b289      	uxth	r1, r1
 801f14c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f150:	f846 1b04 	str.w	r1, [r6], #4
 801f154:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f158:	e7dd      	b.n	801f116 <__mdiff+0xd6>
 801f15a:	3f01      	subs	r7, #1
 801f15c:	e7e7      	b.n	801f12e <__mdiff+0xee>
 801f15e:	bf00      	nop
 801f160:	08023053 	.word	0x08023053
 801f164:	08023064 	.word	0x08023064

0801f168 <__d2b>:
 801f168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f16c:	460f      	mov	r7, r1
 801f16e:	2101      	movs	r1, #1
 801f170:	ec59 8b10 	vmov	r8, r9, d0
 801f174:	4616      	mov	r6, r2
 801f176:	f7ff fccd 	bl	801eb14 <_Balloc>
 801f17a:	4604      	mov	r4, r0
 801f17c:	b930      	cbnz	r0, 801f18c <__d2b+0x24>
 801f17e:	4602      	mov	r2, r0
 801f180:	4b23      	ldr	r3, [pc, #140]	@ (801f210 <__d2b+0xa8>)
 801f182:	4824      	ldr	r0, [pc, #144]	@ (801f214 <__d2b+0xac>)
 801f184:	f240 310f 	movw	r1, #783	@ 0x30f
 801f188:	f7fe fdc8 	bl	801dd1c <__assert_func>
 801f18c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f194:	b10d      	cbz	r5, 801f19a <__d2b+0x32>
 801f196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f19a:	9301      	str	r3, [sp, #4]
 801f19c:	f1b8 0300 	subs.w	r3, r8, #0
 801f1a0:	d023      	beq.n	801f1ea <__d2b+0x82>
 801f1a2:	4668      	mov	r0, sp
 801f1a4:	9300      	str	r3, [sp, #0]
 801f1a6:	f7ff fd7c 	bl	801eca2 <__lo0bits>
 801f1aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f1ae:	b1d0      	cbz	r0, 801f1e6 <__d2b+0x7e>
 801f1b0:	f1c0 0320 	rsb	r3, r0, #32
 801f1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801f1b8:	430b      	orrs	r3, r1
 801f1ba:	40c2      	lsrs	r2, r0
 801f1bc:	6163      	str	r3, [r4, #20]
 801f1be:	9201      	str	r2, [sp, #4]
 801f1c0:	9b01      	ldr	r3, [sp, #4]
 801f1c2:	61a3      	str	r3, [r4, #24]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	bf0c      	ite	eq
 801f1c8:	2201      	moveq	r2, #1
 801f1ca:	2202      	movne	r2, #2
 801f1cc:	6122      	str	r2, [r4, #16]
 801f1ce:	b1a5      	cbz	r5, 801f1fa <__d2b+0x92>
 801f1d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f1d4:	4405      	add	r5, r0
 801f1d6:	603d      	str	r5, [r7, #0]
 801f1d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f1dc:	6030      	str	r0, [r6, #0]
 801f1de:	4620      	mov	r0, r4
 801f1e0:	b003      	add	sp, #12
 801f1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1e6:	6161      	str	r1, [r4, #20]
 801f1e8:	e7ea      	b.n	801f1c0 <__d2b+0x58>
 801f1ea:	a801      	add	r0, sp, #4
 801f1ec:	f7ff fd59 	bl	801eca2 <__lo0bits>
 801f1f0:	9b01      	ldr	r3, [sp, #4]
 801f1f2:	6163      	str	r3, [r4, #20]
 801f1f4:	3020      	adds	r0, #32
 801f1f6:	2201      	movs	r2, #1
 801f1f8:	e7e8      	b.n	801f1cc <__d2b+0x64>
 801f1fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f1fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f202:	6038      	str	r0, [r7, #0]
 801f204:	6918      	ldr	r0, [r3, #16]
 801f206:	f7ff fd2d 	bl	801ec64 <__hi0bits>
 801f20a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f20e:	e7e5      	b.n	801f1dc <__d2b+0x74>
 801f210:	08023053 	.word	0x08023053
 801f214:	08023064 	.word	0x08023064

0801f218 <__ssputs_r>:
 801f218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f21c:	688e      	ldr	r6, [r1, #8]
 801f21e:	461f      	mov	r7, r3
 801f220:	42be      	cmp	r6, r7
 801f222:	680b      	ldr	r3, [r1, #0]
 801f224:	4682      	mov	sl, r0
 801f226:	460c      	mov	r4, r1
 801f228:	4690      	mov	r8, r2
 801f22a:	d82d      	bhi.n	801f288 <__ssputs_r+0x70>
 801f22c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f234:	d026      	beq.n	801f284 <__ssputs_r+0x6c>
 801f236:	6965      	ldr	r5, [r4, #20]
 801f238:	6909      	ldr	r1, [r1, #16]
 801f23a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f23e:	eba3 0901 	sub.w	r9, r3, r1
 801f242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f246:	1c7b      	adds	r3, r7, #1
 801f248:	444b      	add	r3, r9
 801f24a:	106d      	asrs	r5, r5, #1
 801f24c:	429d      	cmp	r5, r3
 801f24e:	bf38      	it	cc
 801f250:	461d      	movcc	r5, r3
 801f252:	0553      	lsls	r3, r2, #21
 801f254:	d527      	bpl.n	801f2a6 <__ssputs_r+0x8e>
 801f256:	4629      	mov	r1, r5
 801f258:	f7ff fbd0 	bl	801e9fc <_malloc_r>
 801f25c:	4606      	mov	r6, r0
 801f25e:	b360      	cbz	r0, 801f2ba <__ssputs_r+0xa2>
 801f260:	6921      	ldr	r1, [r4, #16]
 801f262:	464a      	mov	r2, r9
 801f264:	f7fe fd4b 	bl	801dcfe <memcpy>
 801f268:	89a3      	ldrh	r3, [r4, #12]
 801f26a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f272:	81a3      	strh	r3, [r4, #12]
 801f274:	6126      	str	r6, [r4, #16]
 801f276:	6165      	str	r5, [r4, #20]
 801f278:	444e      	add	r6, r9
 801f27a:	eba5 0509 	sub.w	r5, r5, r9
 801f27e:	6026      	str	r6, [r4, #0]
 801f280:	60a5      	str	r5, [r4, #8]
 801f282:	463e      	mov	r6, r7
 801f284:	42be      	cmp	r6, r7
 801f286:	d900      	bls.n	801f28a <__ssputs_r+0x72>
 801f288:	463e      	mov	r6, r7
 801f28a:	6820      	ldr	r0, [r4, #0]
 801f28c:	4632      	mov	r2, r6
 801f28e:	4641      	mov	r1, r8
 801f290:	f7fe fc4c 	bl	801db2c <memmove>
 801f294:	68a3      	ldr	r3, [r4, #8]
 801f296:	1b9b      	subs	r3, r3, r6
 801f298:	60a3      	str	r3, [r4, #8]
 801f29a:	6823      	ldr	r3, [r4, #0]
 801f29c:	4433      	add	r3, r6
 801f29e:	6023      	str	r3, [r4, #0]
 801f2a0:	2000      	movs	r0, #0
 801f2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2a6:	462a      	mov	r2, r5
 801f2a8:	f000 fbcf 	bl	801fa4a <_realloc_r>
 801f2ac:	4606      	mov	r6, r0
 801f2ae:	2800      	cmp	r0, #0
 801f2b0:	d1e0      	bne.n	801f274 <__ssputs_r+0x5c>
 801f2b2:	6921      	ldr	r1, [r4, #16]
 801f2b4:	4650      	mov	r0, sl
 801f2b6:	f7ff fb2d 	bl	801e914 <_free_r>
 801f2ba:	230c      	movs	r3, #12
 801f2bc:	f8ca 3000 	str.w	r3, [sl]
 801f2c0:	89a3      	ldrh	r3, [r4, #12]
 801f2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f2c6:	81a3      	strh	r3, [r4, #12]
 801f2c8:	f04f 30ff 	mov.w	r0, #4294967295
 801f2cc:	e7e9      	b.n	801f2a2 <__ssputs_r+0x8a>
	...

0801f2d0 <_svfiprintf_r>:
 801f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d4:	4698      	mov	r8, r3
 801f2d6:	898b      	ldrh	r3, [r1, #12]
 801f2d8:	061b      	lsls	r3, r3, #24
 801f2da:	b09d      	sub	sp, #116	@ 0x74
 801f2dc:	4607      	mov	r7, r0
 801f2de:	460d      	mov	r5, r1
 801f2e0:	4614      	mov	r4, r2
 801f2e2:	d510      	bpl.n	801f306 <_svfiprintf_r+0x36>
 801f2e4:	690b      	ldr	r3, [r1, #16]
 801f2e6:	b973      	cbnz	r3, 801f306 <_svfiprintf_r+0x36>
 801f2e8:	2140      	movs	r1, #64	@ 0x40
 801f2ea:	f7ff fb87 	bl	801e9fc <_malloc_r>
 801f2ee:	6028      	str	r0, [r5, #0]
 801f2f0:	6128      	str	r0, [r5, #16]
 801f2f2:	b930      	cbnz	r0, 801f302 <_svfiprintf_r+0x32>
 801f2f4:	230c      	movs	r3, #12
 801f2f6:	603b      	str	r3, [r7, #0]
 801f2f8:	f04f 30ff 	mov.w	r0, #4294967295
 801f2fc:	b01d      	add	sp, #116	@ 0x74
 801f2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f302:	2340      	movs	r3, #64	@ 0x40
 801f304:	616b      	str	r3, [r5, #20]
 801f306:	2300      	movs	r3, #0
 801f308:	9309      	str	r3, [sp, #36]	@ 0x24
 801f30a:	2320      	movs	r3, #32
 801f30c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f310:	f8cd 800c 	str.w	r8, [sp, #12]
 801f314:	2330      	movs	r3, #48	@ 0x30
 801f316:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f4b4 <_svfiprintf_r+0x1e4>
 801f31a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f31e:	f04f 0901 	mov.w	r9, #1
 801f322:	4623      	mov	r3, r4
 801f324:	469a      	mov	sl, r3
 801f326:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f32a:	b10a      	cbz	r2, 801f330 <_svfiprintf_r+0x60>
 801f32c:	2a25      	cmp	r2, #37	@ 0x25
 801f32e:	d1f9      	bne.n	801f324 <_svfiprintf_r+0x54>
 801f330:	ebba 0b04 	subs.w	fp, sl, r4
 801f334:	d00b      	beq.n	801f34e <_svfiprintf_r+0x7e>
 801f336:	465b      	mov	r3, fp
 801f338:	4622      	mov	r2, r4
 801f33a:	4629      	mov	r1, r5
 801f33c:	4638      	mov	r0, r7
 801f33e:	f7ff ff6b 	bl	801f218 <__ssputs_r>
 801f342:	3001      	adds	r0, #1
 801f344:	f000 80a7 	beq.w	801f496 <_svfiprintf_r+0x1c6>
 801f348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f34a:	445a      	add	r2, fp
 801f34c:	9209      	str	r2, [sp, #36]	@ 0x24
 801f34e:	f89a 3000 	ldrb.w	r3, [sl]
 801f352:	2b00      	cmp	r3, #0
 801f354:	f000 809f 	beq.w	801f496 <_svfiprintf_r+0x1c6>
 801f358:	2300      	movs	r3, #0
 801f35a:	f04f 32ff 	mov.w	r2, #4294967295
 801f35e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f362:	f10a 0a01 	add.w	sl, sl, #1
 801f366:	9304      	str	r3, [sp, #16]
 801f368:	9307      	str	r3, [sp, #28]
 801f36a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f36e:	931a      	str	r3, [sp, #104]	@ 0x68
 801f370:	4654      	mov	r4, sl
 801f372:	2205      	movs	r2, #5
 801f374:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f378:	484e      	ldr	r0, [pc, #312]	@ (801f4b4 <_svfiprintf_r+0x1e4>)
 801f37a:	f7e0 ffc9 	bl	8000310 <memchr>
 801f37e:	9a04      	ldr	r2, [sp, #16]
 801f380:	b9d8      	cbnz	r0, 801f3ba <_svfiprintf_r+0xea>
 801f382:	06d0      	lsls	r0, r2, #27
 801f384:	bf44      	itt	mi
 801f386:	2320      	movmi	r3, #32
 801f388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f38c:	0711      	lsls	r1, r2, #28
 801f38e:	bf44      	itt	mi
 801f390:	232b      	movmi	r3, #43	@ 0x2b
 801f392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f396:	f89a 3000 	ldrb.w	r3, [sl]
 801f39a:	2b2a      	cmp	r3, #42	@ 0x2a
 801f39c:	d015      	beq.n	801f3ca <_svfiprintf_r+0xfa>
 801f39e:	9a07      	ldr	r2, [sp, #28]
 801f3a0:	4654      	mov	r4, sl
 801f3a2:	2000      	movs	r0, #0
 801f3a4:	f04f 0c0a 	mov.w	ip, #10
 801f3a8:	4621      	mov	r1, r4
 801f3aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f3ae:	3b30      	subs	r3, #48	@ 0x30
 801f3b0:	2b09      	cmp	r3, #9
 801f3b2:	d94b      	bls.n	801f44c <_svfiprintf_r+0x17c>
 801f3b4:	b1b0      	cbz	r0, 801f3e4 <_svfiprintf_r+0x114>
 801f3b6:	9207      	str	r2, [sp, #28]
 801f3b8:	e014      	b.n	801f3e4 <_svfiprintf_r+0x114>
 801f3ba:	eba0 0308 	sub.w	r3, r0, r8
 801f3be:	fa09 f303 	lsl.w	r3, r9, r3
 801f3c2:	4313      	orrs	r3, r2
 801f3c4:	9304      	str	r3, [sp, #16]
 801f3c6:	46a2      	mov	sl, r4
 801f3c8:	e7d2      	b.n	801f370 <_svfiprintf_r+0xa0>
 801f3ca:	9b03      	ldr	r3, [sp, #12]
 801f3cc:	1d19      	adds	r1, r3, #4
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	9103      	str	r1, [sp, #12]
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	bfbb      	ittet	lt
 801f3d6:	425b      	neglt	r3, r3
 801f3d8:	f042 0202 	orrlt.w	r2, r2, #2
 801f3dc:	9307      	strge	r3, [sp, #28]
 801f3de:	9307      	strlt	r3, [sp, #28]
 801f3e0:	bfb8      	it	lt
 801f3e2:	9204      	strlt	r2, [sp, #16]
 801f3e4:	7823      	ldrb	r3, [r4, #0]
 801f3e6:	2b2e      	cmp	r3, #46	@ 0x2e
 801f3e8:	d10a      	bne.n	801f400 <_svfiprintf_r+0x130>
 801f3ea:	7863      	ldrb	r3, [r4, #1]
 801f3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 801f3ee:	d132      	bne.n	801f456 <_svfiprintf_r+0x186>
 801f3f0:	9b03      	ldr	r3, [sp, #12]
 801f3f2:	1d1a      	adds	r2, r3, #4
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	9203      	str	r2, [sp, #12]
 801f3f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f3fc:	3402      	adds	r4, #2
 801f3fe:	9305      	str	r3, [sp, #20]
 801f400:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f4c4 <_svfiprintf_r+0x1f4>
 801f404:	7821      	ldrb	r1, [r4, #0]
 801f406:	2203      	movs	r2, #3
 801f408:	4650      	mov	r0, sl
 801f40a:	f7e0 ff81 	bl	8000310 <memchr>
 801f40e:	b138      	cbz	r0, 801f420 <_svfiprintf_r+0x150>
 801f410:	9b04      	ldr	r3, [sp, #16]
 801f412:	eba0 000a 	sub.w	r0, r0, sl
 801f416:	2240      	movs	r2, #64	@ 0x40
 801f418:	4082      	lsls	r2, r0
 801f41a:	4313      	orrs	r3, r2
 801f41c:	3401      	adds	r4, #1
 801f41e:	9304      	str	r3, [sp, #16]
 801f420:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f424:	4824      	ldr	r0, [pc, #144]	@ (801f4b8 <_svfiprintf_r+0x1e8>)
 801f426:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f42a:	2206      	movs	r2, #6
 801f42c:	f7e0 ff70 	bl	8000310 <memchr>
 801f430:	2800      	cmp	r0, #0
 801f432:	d036      	beq.n	801f4a2 <_svfiprintf_r+0x1d2>
 801f434:	4b21      	ldr	r3, [pc, #132]	@ (801f4bc <_svfiprintf_r+0x1ec>)
 801f436:	bb1b      	cbnz	r3, 801f480 <_svfiprintf_r+0x1b0>
 801f438:	9b03      	ldr	r3, [sp, #12]
 801f43a:	3307      	adds	r3, #7
 801f43c:	f023 0307 	bic.w	r3, r3, #7
 801f440:	3308      	adds	r3, #8
 801f442:	9303      	str	r3, [sp, #12]
 801f444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f446:	4433      	add	r3, r6
 801f448:	9309      	str	r3, [sp, #36]	@ 0x24
 801f44a:	e76a      	b.n	801f322 <_svfiprintf_r+0x52>
 801f44c:	fb0c 3202 	mla	r2, ip, r2, r3
 801f450:	460c      	mov	r4, r1
 801f452:	2001      	movs	r0, #1
 801f454:	e7a8      	b.n	801f3a8 <_svfiprintf_r+0xd8>
 801f456:	2300      	movs	r3, #0
 801f458:	3401      	adds	r4, #1
 801f45a:	9305      	str	r3, [sp, #20]
 801f45c:	4619      	mov	r1, r3
 801f45e:	f04f 0c0a 	mov.w	ip, #10
 801f462:	4620      	mov	r0, r4
 801f464:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f468:	3a30      	subs	r2, #48	@ 0x30
 801f46a:	2a09      	cmp	r2, #9
 801f46c:	d903      	bls.n	801f476 <_svfiprintf_r+0x1a6>
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d0c6      	beq.n	801f400 <_svfiprintf_r+0x130>
 801f472:	9105      	str	r1, [sp, #20]
 801f474:	e7c4      	b.n	801f400 <_svfiprintf_r+0x130>
 801f476:	fb0c 2101 	mla	r1, ip, r1, r2
 801f47a:	4604      	mov	r4, r0
 801f47c:	2301      	movs	r3, #1
 801f47e:	e7f0      	b.n	801f462 <_svfiprintf_r+0x192>
 801f480:	ab03      	add	r3, sp, #12
 801f482:	9300      	str	r3, [sp, #0]
 801f484:	462a      	mov	r2, r5
 801f486:	4b0e      	ldr	r3, [pc, #56]	@ (801f4c0 <_svfiprintf_r+0x1f0>)
 801f488:	a904      	add	r1, sp, #16
 801f48a:	4638      	mov	r0, r7
 801f48c:	f7fd fd58 	bl	801cf40 <_printf_float>
 801f490:	1c42      	adds	r2, r0, #1
 801f492:	4606      	mov	r6, r0
 801f494:	d1d6      	bne.n	801f444 <_svfiprintf_r+0x174>
 801f496:	89ab      	ldrh	r3, [r5, #12]
 801f498:	065b      	lsls	r3, r3, #25
 801f49a:	f53f af2d 	bmi.w	801f2f8 <_svfiprintf_r+0x28>
 801f49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f4a0:	e72c      	b.n	801f2fc <_svfiprintf_r+0x2c>
 801f4a2:	ab03      	add	r3, sp, #12
 801f4a4:	9300      	str	r3, [sp, #0]
 801f4a6:	462a      	mov	r2, r5
 801f4a8:	4b05      	ldr	r3, [pc, #20]	@ (801f4c0 <_svfiprintf_r+0x1f0>)
 801f4aa:	a904      	add	r1, sp, #16
 801f4ac:	4638      	mov	r0, r7
 801f4ae:	f7fd ffcf 	bl	801d450 <_printf_i>
 801f4b2:	e7ed      	b.n	801f490 <_svfiprintf_r+0x1c0>
 801f4b4:	080231c0 	.word	0x080231c0
 801f4b8:	080231ca 	.word	0x080231ca
 801f4bc:	0801cf41 	.word	0x0801cf41
 801f4c0:	0801f219 	.word	0x0801f219
 801f4c4:	080231c6 	.word	0x080231c6

0801f4c8 <__sfputc_r>:
 801f4c8:	6893      	ldr	r3, [r2, #8]
 801f4ca:	3b01      	subs	r3, #1
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	b410      	push	{r4}
 801f4d0:	6093      	str	r3, [r2, #8]
 801f4d2:	da08      	bge.n	801f4e6 <__sfputc_r+0x1e>
 801f4d4:	6994      	ldr	r4, [r2, #24]
 801f4d6:	42a3      	cmp	r3, r4
 801f4d8:	db01      	blt.n	801f4de <__sfputc_r+0x16>
 801f4da:	290a      	cmp	r1, #10
 801f4dc:	d103      	bne.n	801f4e6 <__sfputc_r+0x1e>
 801f4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4e2:	f7fe ba7e 	b.w	801d9e2 <__swbuf_r>
 801f4e6:	6813      	ldr	r3, [r2, #0]
 801f4e8:	1c58      	adds	r0, r3, #1
 801f4ea:	6010      	str	r0, [r2, #0]
 801f4ec:	7019      	strb	r1, [r3, #0]
 801f4ee:	4608      	mov	r0, r1
 801f4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4f4:	4770      	bx	lr

0801f4f6 <__sfputs_r>:
 801f4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4f8:	4606      	mov	r6, r0
 801f4fa:	460f      	mov	r7, r1
 801f4fc:	4614      	mov	r4, r2
 801f4fe:	18d5      	adds	r5, r2, r3
 801f500:	42ac      	cmp	r4, r5
 801f502:	d101      	bne.n	801f508 <__sfputs_r+0x12>
 801f504:	2000      	movs	r0, #0
 801f506:	e007      	b.n	801f518 <__sfputs_r+0x22>
 801f508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f50c:	463a      	mov	r2, r7
 801f50e:	4630      	mov	r0, r6
 801f510:	f7ff ffda 	bl	801f4c8 <__sfputc_r>
 801f514:	1c43      	adds	r3, r0, #1
 801f516:	d1f3      	bne.n	801f500 <__sfputs_r+0xa>
 801f518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f51c <_vfiprintf_r>:
 801f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f520:	460d      	mov	r5, r1
 801f522:	b09d      	sub	sp, #116	@ 0x74
 801f524:	4614      	mov	r4, r2
 801f526:	4698      	mov	r8, r3
 801f528:	4606      	mov	r6, r0
 801f52a:	b118      	cbz	r0, 801f534 <_vfiprintf_r+0x18>
 801f52c:	6a03      	ldr	r3, [r0, #32]
 801f52e:	b90b      	cbnz	r3, 801f534 <_vfiprintf_r+0x18>
 801f530:	f7fe f93a 	bl	801d7a8 <__sinit>
 801f534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f536:	07d9      	lsls	r1, r3, #31
 801f538:	d405      	bmi.n	801f546 <_vfiprintf_r+0x2a>
 801f53a:	89ab      	ldrh	r3, [r5, #12]
 801f53c:	059a      	lsls	r2, r3, #22
 801f53e:	d402      	bmi.n	801f546 <_vfiprintf_r+0x2a>
 801f540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f542:	f7fe fbda 	bl	801dcfa <__retarget_lock_acquire_recursive>
 801f546:	89ab      	ldrh	r3, [r5, #12]
 801f548:	071b      	lsls	r3, r3, #28
 801f54a:	d501      	bpl.n	801f550 <_vfiprintf_r+0x34>
 801f54c:	692b      	ldr	r3, [r5, #16]
 801f54e:	b99b      	cbnz	r3, 801f578 <_vfiprintf_r+0x5c>
 801f550:	4629      	mov	r1, r5
 801f552:	4630      	mov	r0, r6
 801f554:	f7fe fa84 	bl	801da60 <__swsetup_r>
 801f558:	b170      	cbz	r0, 801f578 <_vfiprintf_r+0x5c>
 801f55a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f55c:	07dc      	lsls	r4, r3, #31
 801f55e:	d504      	bpl.n	801f56a <_vfiprintf_r+0x4e>
 801f560:	f04f 30ff 	mov.w	r0, #4294967295
 801f564:	b01d      	add	sp, #116	@ 0x74
 801f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56a:	89ab      	ldrh	r3, [r5, #12]
 801f56c:	0598      	lsls	r0, r3, #22
 801f56e:	d4f7      	bmi.n	801f560 <_vfiprintf_r+0x44>
 801f570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f572:	f7fe fbc3 	bl	801dcfc <__retarget_lock_release_recursive>
 801f576:	e7f3      	b.n	801f560 <_vfiprintf_r+0x44>
 801f578:	2300      	movs	r3, #0
 801f57a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f57c:	2320      	movs	r3, #32
 801f57e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f582:	f8cd 800c 	str.w	r8, [sp, #12]
 801f586:	2330      	movs	r3, #48	@ 0x30
 801f588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f738 <_vfiprintf_r+0x21c>
 801f58c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f590:	f04f 0901 	mov.w	r9, #1
 801f594:	4623      	mov	r3, r4
 801f596:	469a      	mov	sl, r3
 801f598:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f59c:	b10a      	cbz	r2, 801f5a2 <_vfiprintf_r+0x86>
 801f59e:	2a25      	cmp	r2, #37	@ 0x25
 801f5a0:	d1f9      	bne.n	801f596 <_vfiprintf_r+0x7a>
 801f5a2:	ebba 0b04 	subs.w	fp, sl, r4
 801f5a6:	d00b      	beq.n	801f5c0 <_vfiprintf_r+0xa4>
 801f5a8:	465b      	mov	r3, fp
 801f5aa:	4622      	mov	r2, r4
 801f5ac:	4629      	mov	r1, r5
 801f5ae:	4630      	mov	r0, r6
 801f5b0:	f7ff ffa1 	bl	801f4f6 <__sfputs_r>
 801f5b4:	3001      	adds	r0, #1
 801f5b6:	f000 80a7 	beq.w	801f708 <_vfiprintf_r+0x1ec>
 801f5ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f5bc:	445a      	add	r2, fp
 801f5be:	9209      	str	r2, [sp, #36]	@ 0x24
 801f5c0:	f89a 3000 	ldrb.w	r3, [sl]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	f000 809f 	beq.w	801f708 <_vfiprintf_r+0x1ec>
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	f04f 32ff 	mov.w	r2, #4294967295
 801f5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f5d4:	f10a 0a01 	add.w	sl, sl, #1
 801f5d8:	9304      	str	r3, [sp, #16]
 801f5da:	9307      	str	r3, [sp, #28]
 801f5dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f5e0:	931a      	str	r3, [sp, #104]	@ 0x68
 801f5e2:	4654      	mov	r4, sl
 801f5e4:	2205      	movs	r2, #5
 801f5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5ea:	4853      	ldr	r0, [pc, #332]	@ (801f738 <_vfiprintf_r+0x21c>)
 801f5ec:	f7e0 fe90 	bl	8000310 <memchr>
 801f5f0:	9a04      	ldr	r2, [sp, #16]
 801f5f2:	b9d8      	cbnz	r0, 801f62c <_vfiprintf_r+0x110>
 801f5f4:	06d1      	lsls	r1, r2, #27
 801f5f6:	bf44      	itt	mi
 801f5f8:	2320      	movmi	r3, #32
 801f5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f5fe:	0713      	lsls	r3, r2, #28
 801f600:	bf44      	itt	mi
 801f602:	232b      	movmi	r3, #43	@ 0x2b
 801f604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f608:	f89a 3000 	ldrb.w	r3, [sl]
 801f60c:	2b2a      	cmp	r3, #42	@ 0x2a
 801f60e:	d015      	beq.n	801f63c <_vfiprintf_r+0x120>
 801f610:	9a07      	ldr	r2, [sp, #28]
 801f612:	4654      	mov	r4, sl
 801f614:	2000      	movs	r0, #0
 801f616:	f04f 0c0a 	mov.w	ip, #10
 801f61a:	4621      	mov	r1, r4
 801f61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f620:	3b30      	subs	r3, #48	@ 0x30
 801f622:	2b09      	cmp	r3, #9
 801f624:	d94b      	bls.n	801f6be <_vfiprintf_r+0x1a2>
 801f626:	b1b0      	cbz	r0, 801f656 <_vfiprintf_r+0x13a>
 801f628:	9207      	str	r2, [sp, #28]
 801f62a:	e014      	b.n	801f656 <_vfiprintf_r+0x13a>
 801f62c:	eba0 0308 	sub.w	r3, r0, r8
 801f630:	fa09 f303 	lsl.w	r3, r9, r3
 801f634:	4313      	orrs	r3, r2
 801f636:	9304      	str	r3, [sp, #16]
 801f638:	46a2      	mov	sl, r4
 801f63a:	e7d2      	b.n	801f5e2 <_vfiprintf_r+0xc6>
 801f63c:	9b03      	ldr	r3, [sp, #12]
 801f63e:	1d19      	adds	r1, r3, #4
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	9103      	str	r1, [sp, #12]
 801f644:	2b00      	cmp	r3, #0
 801f646:	bfbb      	ittet	lt
 801f648:	425b      	neglt	r3, r3
 801f64a:	f042 0202 	orrlt.w	r2, r2, #2
 801f64e:	9307      	strge	r3, [sp, #28]
 801f650:	9307      	strlt	r3, [sp, #28]
 801f652:	bfb8      	it	lt
 801f654:	9204      	strlt	r2, [sp, #16]
 801f656:	7823      	ldrb	r3, [r4, #0]
 801f658:	2b2e      	cmp	r3, #46	@ 0x2e
 801f65a:	d10a      	bne.n	801f672 <_vfiprintf_r+0x156>
 801f65c:	7863      	ldrb	r3, [r4, #1]
 801f65e:	2b2a      	cmp	r3, #42	@ 0x2a
 801f660:	d132      	bne.n	801f6c8 <_vfiprintf_r+0x1ac>
 801f662:	9b03      	ldr	r3, [sp, #12]
 801f664:	1d1a      	adds	r2, r3, #4
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	9203      	str	r2, [sp, #12]
 801f66a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f66e:	3402      	adds	r4, #2
 801f670:	9305      	str	r3, [sp, #20]
 801f672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f748 <_vfiprintf_r+0x22c>
 801f676:	7821      	ldrb	r1, [r4, #0]
 801f678:	2203      	movs	r2, #3
 801f67a:	4650      	mov	r0, sl
 801f67c:	f7e0 fe48 	bl	8000310 <memchr>
 801f680:	b138      	cbz	r0, 801f692 <_vfiprintf_r+0x176>
 801f682:	9b04      	ldr	r3, [sp, #16]
 801f684:	eba0 000a 	sub.w	r0, r0, sl
 801f688:	2240      	movs	r2, #64	@ 0x40
 801f68a:	4082      	lsls	r2, r0
 801f68c:	4313      	orrs	r3, r2
 801f68e:	3401      	adds	r4, #1
 801f690:	9304      	str	r3, [sp, #16]
 801f692:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f696:	4829      	ldr	r0, [pc, #164]	@ (801f73c <_vfiprintf_r+0x220>)
 801f698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f69c:	2206      	movs	r2, #6
 801f69e:	f7e0 fe37 	bl	8000310 <memchr>
 801f6a2:	2800      	cmp	r0, #0
 801f6a4:	d03f      	beq.n	801f726 <_vfiprintf_r+0x20a>
 801f6a6:	4b26      	ldr	r3, [pc, #152]	@ (801f740 <_vfiprintf_r+0x224>)
 801f6a8:	bb1b      	cbnz	r3, 801f6f2 <_vfiprintf_r+0x1d6>
 801f6aa:	9b03      	ldr	r3, [sp, #12]
 801f6ac:	3307      	adds	r3, #7
 801f6ae:	f023 0307 	bic.w	r3, r3, #7
 801f6b2:	3308      	adds	r3, #8
 801f6b4:	9303      	str	r3, [sp, #12]
 801f6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6b8:	443b      	add	r3, r7
 801f6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801f6bc:	e76a      	b.n	801f594 <_vfiprintf_r+0x78>
 801f6be:	fb0c 3202 	mla	r2, ip, r2, r3
 801f6c2:	460c      	mov	r4, r1
 801f6c4:	2001      	movs	r0, #1
 801f6c6:	e7a8      	b.n	801f61a <_vfiprintf_r+0xfe>
 801f6c8:	2300      	movs	r3, #0
 801f6ca:	3401      	adds	r4, #1
 801f6cc:	9305      	str	r3, [sp, #20]
 801f6ce:	4619      	mov	r1, r3
 801f6d0:	f04f 0c0a 	mov.w	ip, #10
 801f6d4:	4620      	mov	r0, r4
 801f6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f6da:	3a30      	subs	r2, #48	@ 0x30
 801f6dc:	2a09      	cmp	r2, #9
 801f6de:	d903      	bls.n	801f6e8 <_vfiprintf_r+0x1cc>
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d0c6      	beq.n	801f672 <_vfiprintf_r+0x156>
 801f6e4:	9105      	str	r1, [sp, #20]
 801f6e6:	e7c4      	b.n	801f672 <_vfiprintf_r+0x156>
 801f6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801f6ec:	4604      	mov	r4, r0
 801f6ee:	2301      	movs	r3, #1
 801f6f0:	e7f0      	b.n	801f6d4 <_vfiprintf_r+0x1b8>
 801f6f2:	ab03      	add	r3, sp, #12
 801f6f4:	9300      	str	r3, [sp, #0]
 801f6f6:	462a      	mov	r2, r5
 801f6f8:	4b12      	ldr	r3, [pc, #72]	@ (801f744 <_vfiprintf_r+0x228>)
 801f6fa:	a904      	add	r1, sp, #16
 801f6fc:	4630      	mov	r0, r6
 801f6fe:	f7fd fc1f 	bl	801cf40 <_printf_float>
 801f702:	4607      	mov	r7, r0
 801f704:	1c78      	adds	r0, r7, #1
 801f706:	d1d6      	bne.n	801f6b6 <_vfiprintf_r+0x19a>
 801f708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f70a:	07d9      	lsls	r1, r3, #31
 801f70c:	d405      	bmi.n	801f71a <_vfiprintf_r+0x1fe>
 801f70e:	89ab      	ldrh	r3, [r5, #12]
 801f710:	059a      	lsls	r2, r3, #22
 801f712:	d402      	bmi.n	801f71a <_vfiprintf_r+0x1fe>
 801f714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f716:	f7fe faf1 	bl	801dcfc <__retarget_lock_release_recursive>
 801f71a:	89ab      	ldrh	r3, [r5, #12]
 801f71c:	065b      	lsls	r3, r3, #25
 801f71e:	f53f af1f 	bmi.w	801f560 <_vfiprintf_r+0x44>
 801f722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f724:	e71e      	b.n	801f564 <_vfiprintf_r+0x48>
 801f726:	ab03      	add	r3, sp, #12
 801f728:	9300      	str	r3, [sp, #0]
 801f72a:	462a      	mov	r2, r5
 801f72c:	4b05      	ldr	r3, [pc, #20]	@ (801f744 <_vfiprintf_r+0x228>)
 801f72e:	a904      	add	r1, sp, #16
 801f730:	4630      	mov	r0, r6
 801f732:	f7fd fe8d 	bl	801d450 <_printf_i>
 801f736:	e7e4      	b.n	801f702 <_vfiprintf_r+0x1e6>
 801f738:	080231c0 	.word	0x080231c0
 801f73c:	080231ca 	.word	0x080231ca
 801f740:	0801cf41 	.word	0x0801cf41
 801f744:	0801f4f7 	.word	0x0801f4f7
 801f748:	080231c6 	.word	0x080231c6

0801f74c <__sflush_r>:
 801f74c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f754:	0716      	lsls	r6, r2, #28
 801f756:	4605      	mov	r5, r0
 801f758:	460c      	mov	r4, r1
 801f75a:	d454      	bmi.n	801f806 <__sflush_r+0xba>
 801f75c:	684b      	ldr	r3, [r1, #4]
 801f75e:	2b00      	cmp	r3, #0
 801f760:	dc02      	bgt.n	801f768 <__sflush_r+0x1c>
 801f762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f764:	2b00      	cmp	r3, #0
 801f766:	dd48      	ble.n	801f7fa <__sflush_r+0xae>
 801f768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f76a:	2e00      	cmp	r6, #0
 801f76c:	d045      	beq.n	801f7fa <__sflush_r+0xae>
 801f76e:	2300      	movs	r3, #0
 801f770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f774:	682f      	ldr	r7, [r5, #0]
 801f776:	6a21      	ldr	r1, [r4, #32]
 801f778:	602b      	str	r3, [r5, #0]
 801f77a:	d030      	beq.n	801f7de <__sflush_r+0x92>
 801f77c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f77e:	89a3      	ldrh	r3, [r4, #12]
 801f780:	0759      	lsls	r1, r3, #29
 801f782:	d505      	bpl.n	801f790 <__sflush_r+0x44>
 801f784:	6863      	ldr	r3, [r4, #4]
 801f786:	1ad2      	subs	r2, r2, r3
 801f788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f78a:	b10b      	cbz	r3, 801f790 <__sflush_r+0x44>
 801f78c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f78e:	1ad2      	subs	r2, r2, r3
 801f790:	2300      	movs	r3, #0
 801f792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f794:	6a21      	ldr	r1, [r4, #32]
 801f796:	4628      	mov	r0, r5
 801f798:	47b0      	blx	r6
 801f79a:	1c43      	adds	r3, r0, #1
 801f79c:	89a3      	ldrh	r3, [r4, #12]
 801f79e:	d106      	bne.n	801f7ae <__sflush_r+0x62>
 801f7a0:	6829      	ldr	r1, [r5, #0]
 801f7a2:	291d      	cmp	r1, #29
 801f7a4:	d82b      	bhi.n	801f7fe <__sflush_r+0xb2>
 801f7a6:	4a2a      	ldr	r2, [pc, #168]	@ (801f850 <__sflush_r+0x104>)
 801f7a8:	410a      	asrs	r2, r1
 801f7aa:	07d6      	lsls	r6, r2, #31
 801f7ac:	d427      	bmi.n	801f7fe <__sflush_r+0xb2>
 801f7ae:	2200      	movs	r2, #0
 801f7b0:	6062      	str	r2, [r4, #4]
 801f7b2:	04d9      	lsls	r1, r3, #19
 801f7b4:	6922      	ldr	r2, [r4, #16]
 801f7b6:	6022      	str	r2, [r4, #0]
 801f7b8:	d504      	bpl.n	801f7c4 <__sflush_r+0x78>
 801f7ba:	1c42      	adds	r2, r0, #1
 801f7bc:	d101      	bne.n	801f7c2 <__sflush_r+0x76>
 801f7be:	682b      	ldr	r3, [r5, #0]
 801f7c0:	b903      	cbnz	r3, 801f7c4 <__sflush_r+0x78>
 801f7c2:	6560      	str	r0, [r4, #84]	@ 0x54
 801f7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f7c6:	602f      	str	r7, [r5, #0]
 801f7c8:	b1b9      	cbz	r1, 801f7fa <__sflush_r+0xae>
 801f7ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f7ce:	4299      	cmp	r1, r3
 801f7d0:	d002      	beq.n	801f7d8 <__sflush_r+0x8c>
 801f7d2:	4628      	mov	r0, r5
 801f7d4:	f7ff f89e 	bl	801e914 <_free_r>
 801f7d8:	2300      	movs	r3, #0
 801f7da:	6363      	str	r3, [r4, #52]	@ 0x34
 801f7dc:	e00d      	b.n	801f7fa <__sflush_r+0xae>
 801f7de:	2301      	movs	r3, #1
 801f7e0:	4628      	mov	r0, r5
 801f7e2:	47b0      	blx	r6
 801f7e4:	4602      	mov	r2, r0
 801f7e6:	1c50      	adds	r0, r2, #1
 801f7e8:	d1c9      	bne.n	801f77e <__sflush_r+0x32>
 801f7ea:	682b      	ldr	r3, [r5, #0]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d0c6      	beq.n	801f77e <__sflush_r+0x32>
 801f7f0:	2b1d      	cmp	r3, #29
 801f7f2:	d001      	beq.n	801f7f8 <__sflush_r+0xac>
 801f7f4:	2b16      	cmp	r3, #22
 801f7f6:	d11e      	bne.n	801f836 <__sflush_r+0xea>
 801f7f8:	602f      	str	r7, [r5, #0]
 801f7fa:	2000      	movs	r0, #0
 801f7fc:	e022      	b.n	801f844 <__sflush_r+0xf8>
 801f7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f802:	b21b      	sxth	r3, r3
 801f804:	e01b      	b.n	801f83e <__sflush_r+0xf2>
 801f806:	690f      	ldr	r7, [r1, #16]
 801f808:	2f00      	cmp	r7, #0
 801f80a:	d0f6      	beq.n	801f7fa <__sflush_r+0xae>
 801f80c:	0793      	lsls	r3, r2, #30
 801f80e:	680e      	ldr	r6, [r1, #0]
 801f810:	bf08      	it	eq
 801f812:	694b      	ldreq	r3, [r1, #20]
 801f814:	600f      	str	r7, [r1, #0]
 801f816:	bf18      	it	ne
 801f818:	2300      	movne	r3, #0
 801f81a:	eba6 0807 	sub.w	r8, r6, r7
 801f81e:	608b      	str	r3, [r1, #8]
 801f820:	f1b8 0f00 	cmp.w	r8, #0
 801f824:	dde9      	ble.n	801f7fa <__sflush_r+0xae>
 801f826:	6a21      	ldr	r1, [r4, #32]
 801f828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f82a:	4643      	mov	r3, r8
 801f82c:	463a      	mov	r2, r7
 801f82e:	4628      	mov	r0, r5
 801f830:	47b0      	blx	r6
 801f832:	2800      	cmp	r0, #0
 801f834:	dc08      	bgt.n	801f848 <__sflush_r+0xfc>
 801f836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f83e:	81a3      	strh	r3, [r4, #12]
 801f840:	f04f 30ff 	mov.w	r0, #4294967295
 801f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f848:	4407      	add	r7, r0
 801f84a:	eba8 0800 	sub.w	r8, r8, r0
 801f84e:	e7e7      	b.n	801f820 <__sflush_r+0xd4>
 801f850:	dfbffffe 	.word	0xdfbffffe

0801f854 <_fflush_r>:
 801f854:	b538      	push	{r3, r4, r5, lr}
 801f856:	690b      	ldr	r3, [r1, #16]
 801f858:	4605      	mov	r5, r0
 801f85a:	460c      	mov	r4, r1
 801f85c:	b913      	cbnz	r3, 801f864 <_fflush_r+0x10>
 801f85e:	2500      	movs	r5, #0
 801f860:	4628      	mov	r0, r5
 801f862:	bd38      	pop	{r3, r4, r5, pc}
 801f864:	b118      	cbz	r0, 801f86e <_fflush_r+0x1a>
 801f866:	6a03      	ldr	r3, [r0, #32]
 801f868:	b90b      	cbnz	r3, 801f86e <_fflush_r+0x1a>
 801f86a:	f7fd ff9d 	bl	801d7a8 <__sinit>
 801f86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f872:	2b00      	cmp	r3, #0
 801f874:	d0f3      	beq.n	801f85e <_fflush_r+0xa>
 801f876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f878:	07d0      	lsls	r0, r2, #31
 801f87a:	d404      	bmi.n	801f886 <_fflush_r+0x32>
 801f87c:	0599      	lsls	r1, r3, #22
 801f87e:	d402      	bmi.n	801f886 <_fflush_r+0x32>
 801f880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f882:	f7fe fa3a 	bl	801dcfa <__retarget_lock_acquire_recursive>
 801f886:	4628      	mov	r0, r5
 801f888:	4621      	mov	r1, r4
 801f88a:	f7ff ff5f 	bl	801f74c <__sflush_r>
 801f88e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f890:	07da      	lsls	r2, r3, #31
 801f892:	4605      	mov	r5, r0
 801f894:	d4e4      	bmi.n	801f860 <_fflush_r+0xc>
 801f896:	89a3      	ldrh	r3, [r4, #12]
 801f898:	059b      	lsls	r3, r3, #22
 801f89a:	d4e1      	bmi.n	801f860 <_fflush_r+0xc>
 801f89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f89e:	f7fe fa2d 	bl	801dcfc <__retarget_lock_release_recursive>
 801f8a2:	e7dd      	b.n	801f860 <_fflush_r+0xc>

0801f8a4 <fiprintf>:
 801f8a4:	b40e      	push	{r1, r2, r3}
 801f8a6:	b503      	push	{r0, r1, lr}
 801f8a8:	4601      	mov	r1, r0
 801f8aa:	ab03      	add	r3, sp, #12
 801f8ac:	4805      	ldr	r0, [pc, #20]	@ (801f8c4 <fiprintf+0x20>)
 801f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8b2:	6800      	ldr	r0, [r0, #0]
 801f8b4:	9301      	str	r3, [sp, #4]
 801f8b6:	f7ff fe31 	bl	801f51c <_vfiprintf_r>
 801f8ba:	b002      	add	sp, #8
 801f8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8c0:	b003      	add	sp, #12
 801f8c2:	4770      	bx	lr
 801f8c4:	24000044 	.word	0x24000044

0801f8c8 <__swhatbuf_r>:
 801f8c8:	b570      	push	{r4, r5, r6, lr}
 801f8ca:	460c      	mov	r4, r1
 801f8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f8d0:	2900      	cmp	r1, #0
 801f8d2:	b096      	sub	sp, #88	@ 0x58
 801f8d4:	4615      	mov	r5, r2
 801f8d6:	461e      	mov	r6, r3
 801f8d8:	da0d      	bge.n	801f8f6 <__swhatbuf_r+0x2e>
 801f8da:	89a3      	ldrh	r3, [r4, #12]
 801f8dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f8e0:	f04f 0100 	mov.w	r1, #0
 801f8e4:	bf14      	ite	ne
 801f8e6:	2340      	movne	r3, #64	@ 0x40
 801f8e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f8ec:	2000      	movs	r0, #0
 801f8ee:	6031      	str	r1, [r6, #0]
 801f8f0:	602b      	str	r3, [r5, #0]
 801f8f2:	b016      	add	sp, #88	@ 0x58
 801f8f4:	bd70      	pop	{r4, r5, r6, pc}
 801f8f6:	466a      	mov	r2, sp
 801f8f8:	f000 f848 	bl	801f98c <_fstat_r>
 801f8fc:	2800      	cmp	r0, #0
 801f8fe:	dbec      	blt.n	801f8da <__swhatbuf_r+0x12>
 801f900:	9901      	ldr	r1, [sp, #4]
 801f902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f90a:	4259      	negs	r1, r3
 801f90c:	4159      	adcs	r1, r3
 801f90e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f912:	e7eb      	b.n	801f8ec <__swhatbuf_r+0x24>

0801f914 <__smakebuf_r>:
 801f914:	898b      	ldrh	r3, [r1, #12]
 801f916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f918:	079d      	lsls	r5, r3, #30
 801f91a:	4606      	mov	r6, r0
 801f91c:	460c      	mov	r4, r1
 801f91e:	d507      	bpl.n	801f930 <__smakebuf_r+0x1c>
 801f920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f924:	6023      	str	r3, [r4, #0]
 801f926:	6123      	str	r3, [r4, #16]
 801f928:	2301      	movs	r3, #1
 801f92a:	6163      	str	r3, [r4, #20]
 801f92c:	b003      	add	sp, #12
 801f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f930:	ab01      	add	r3, sp, #4
 801f932:	466a      	mov	r2, sp
 801f934:	f7ff ffc8 	bl	801f8c8 <__swhatbuf_r>
 801f938:	9f00      	ldr	r7, [sp, #0]
 801f93a:	4605      	mov	r5, r0
 801f93c:	4639      	mov	r1, r7
 801f93e:	4630      	mov	r0, r6
 801f940:	f7ff f85c 	bl	801e9fc <_malloc_r>
 801f944:	b948      	cbnz	r0, 801f95a <__smakebuf_r+0x46>
 801f946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f94a:	059a      	lsls	r2, r3, #22
 801f94c:	d4ee      	bmi.n	801f92c <__smakebuf_r+0x18>
 801f94e:	f023 0303 	bic.w	r3, r3, #3
 801f952:	f043 0302 	orr.w	r3, r3, #2
 801f956:	81a3      	strh	r3, [r4, #12]
 801f958:	e7e2      	b.n	801f920 <__smakebuf_r+0xc>
 801f95a:	89a3      	ldrh	r3, [r4, #12]
 801f95c:	6020      	str	r0, [r4, #0]
 801f95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f962:	81a3      	strh	r3, [r4, #12]
 801f964:	9b01      	ldr	r3, [sp, #4]
 801f966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f96a:	b15b      	cbz	r3, 801f984 <__smakebuf_r+0x70>
 801f96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f970:	4630      	mov	r0, r6
 801f972:	f000 f81d 	bl	801f9b0 <_isatty_r>
 801f976:	b128      	cbz	r0, 801f984 <__smakebuf_r+0x70>
 801f978:	89a3      	ldrh	r3, [r4, #12]
 801f97a:	f023 0303 	bic.w	r3, r3, #3
 801f97e:	f043 0301 	orr.w	r3, r3, #1
 801f982:	81a3      	strh	r3, [r4, #12]
 801f984:	89a3      	ldrh	r3, [r4, #12]
 801f986:	431d      	orrs	r5, r3
 801f988:	81a5      	strh	r5, [r4, #12]
 801f98a:	e7cf      	b.n	801f92c <__smakebuf_r+0x18>

0801f98c <_fstat_r>:
 801f98c:	b538      	push	{r3, r4, r5, lr}
 801f98e:	4d07      	ldr	r5, [pc, #28]	@ (801f9ac <_fstat_r+0x20>)
 801f990:	2300      	movs	r3, #0
 801f992:	4604      	mov	r4, r0
 801f994:	4608      	mov	r0, r1
 801f996:	4611      	mov	r1, r2
 801f998:	602b      	str	r3, [r5, #0]
 801f99a:	f7e1 ff55 	bl	8001848 <_fstat>
 801f99e:	1c43      	adds	r3, r0, #1
 801f9a0:	d102      	bne.n	801f9a8 <_fstat_r+0x1c>
 801f9a2:	682b      	ldr	r3, [r5, #0]
 801f9a4:	b103      	cbz	r3, 801f9a8 <_fstat_r+0x1c>
 801f9a6:	6023      	str	r3, [r4, #0]
 801f9a8:	bd38      	pop	{r3, r4, r5, pc}
 801f9aa:	bf00      	nop
 801f9ac:	2400cf04 	.word	0x2400cf04

0801f9b0 <_isatty_r>:
 801f9b0:	b538      	push	{r3, r4, r5, lr}
 801f9b2:	4d06      	ldr	r5, [pc, #24]	@ (801f9cc <_isatty_r+0x1c>)
 801f9b4:	2300      	movs	r3, #0
 801f9b6:	4604      	mov	r4, r0
 801f9b8:	4608      	mov	r0, r1
 801f9ba:	602b      	str	r3, [r5, #0]
 801f9bc:	f7e1 ff54 	bl	8001868 <_isatty>
 801f9c0:	1c43      	adds	r3, r0, #1
 801f9c2:	d102      	bne.n	801f9ca <_isatty_r+0x1a>
 801f9c4:	682b      	ldr	r3, [r5, #0]
 801f9c6:	b103      	cbz	r3, 801f9ca <_isatty_r+0x1a>
 801f9c8:	6023      	str	r3, [r4, #0]
 801f9ca:	bd38      	pop	{r3, r4, r5, pc}
 801f9cc:	2400cf04 	.word	0x2400cf04

0801f9d0 <_sbrk_r>:
 801f9d0:	b538      	push	{r3, r4, r5, lr}
 801f9d2:	4d06      	ldr	r5, [pc, #24]	@ (801f9ec <_sbrk_r+0x1c>)
 801f9d4:	2300      	movs	r3, #0
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	4608      	mov	r0, r1
 801f9da:	602b      	str	r3, [r5, #0]
 801f9dc:	f7e1 ff5c 	bl	8001898 <_sbrk>
 801f9e0:	1c43      	adds	r3, r0, #1
 801f9e2:	d102      	bne.n	801f9ea <_sbrk_r+0x1a>
 801f9e4:	682b      	ldr	r3, [r5, #0]
 801f9e6:	b103      	cbz	r3, 801f9ea <_sbrk_r+0x1a>
 801f9e8:	6023      	str	r3, [r4, #0]
 801f9ea:	bd38      	pop	{r3, r4, r5, pc}
 801f9ec:	2400cf04 	.word	0x2400cf04

0801f9f0 <abort>:
 801f9f0:	b508      	push	{r3, lr}
 801f9f2:	2006      	movs	r0, #6
 801f9f4:	f000 f88c 	bl	801fb10 <raise>
 801f9f8:	2001      	movs	r0, #1
 801f9fa:	f7e1 fef1 	bl	80017e0 <_exit>

0801f9fe <_calloc_r>:
 801f9fe:	b570      	push	{r4, r5, r6, lr}
 801fa00:	fba1 5402 	umull	r5, r4, r1, r2
 801fa04:	b93c      	cbnz	r4, 801fa16 <_calloc_r+0x18>
 801fa06:	4629      	mov	r1, r5
 801fa08:	f7fe fff8 	bl	801e9fc <_malloc_r>
 801fa0c:	4606      	mov	r6, r0
 801fa0e:	b928      	cbnz	r0, 801fa1c <_calloc_r+0x1e>
 801fa10:	2600      	movs	r6, #0
 801fa12:	4630      	mov	r0, r6
 801fa14:	bd70      	pop	{r4, r5, r6, pc}
 801fa16:	220c      	movs	r2, #12
 801fa18:	6002      	str	r2, [r0, #0]
 801fa1a:	e7f9      	b.n	801fa10 <_calloc_r+0x12>
 801fa1c:	462a      	mov	r2, r5
 801fa1e:	4621      	mov	r1, r4
 801fa20:	f7fe f89e 	bl	801db60 <memset>
 801fa24:	e7f5      	b.n	801fa12 <_calloc_r+0x14>

0801fa26 <__ascii_mbtowc>:
 801fa26:	b082      	sub	sp, #8
 801fa28:	b901      	cbnz	r1, 801fa2c <__ascii_mbtowc+0x6>
 801fa2a:	a901      	add	r1, sp, #4
 801fa2c:	b142      	cbz	r2, 801fa40 <__ascii_mbtowc+0x1a>
 801fa2e:	b14b      	cbz	r3, 801fa44 <__ascii_mbtowc+0x1e>
 801fa30:	7813      	ldrb	r3, [r2, #0]
 801fa32:	600b      	str	r3, [r1, #0]
 801fa34:	7812      	ldrb	r2, [r2, #0]
 801fa36:	1e10      	subs	r0, r2, #0
 801fa38:	bf18      	it	ne
 801fa3a:	2001      	movne	r0, #1
 801fa3c:	b002      	add	sp, #8
 801fa3e:	4770      	bx	lr
 801fa40:	4610      	mov	r0, r2
 801fa42:	e7fb      	b.n	801fa3c <__ascii_mbtowc+0x16>
 801fa44:	f06f 0001 	mvn.w	r0, #1
 801fa48:	e7f8      	b.n	801fa3c <__ascii_mbtowc+0x16>

0801fa4a <_realloc_r>:
 801fa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa4e:	4680      	mov	r8, r0
 801fa50:	4615      	mov	r5, r2
 801fa52:	460c      	mov	r4, r1
 801fa54:	b921      	cbnz	r1, 801fa60 <_realloc_r+0x16>
 801fa56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fa5a:	4611      	mov	r1, r2
 801fa5c:	f7fe bfce 	b.w	801e9fc <_malloc_r>
 801fa60:	b92a      	cbnz	r2, 801fa6e <_realloc_r+0x24>
 801fa62:	f7fe ff57 	bl	801e914 <_free_r>
 801fa66:	2400      	movs	r4, #0
 801fa68:	4620      	mov	r0, r4
 801fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa6e:	f000 f86b 	bl	801fb48 <_malloc_usable_size_r>
 801fa72:	4285      	cmp	r5, r0
 801fa74:	4606      	mov	r6, r0
 801fa76:	d802      	bhi.n	801fa7e <_realloc_r+0x34>
 801fa78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801fa7c:	d8f4      	bhi.n	801fa68 <_realloc_r+0x1e>
 801fa7e:	4629      	mov	r1, r5
 801fa80:	4640      	mov	r0, r8
 801fa82:	f7fe ffbb 	bl	801e9fc <_malloc_r>
 801fa86:	4607      	mov	r7, r0
 801fa88:	2800      	cmp	r0, #0
 801fa8a:	d0ec      	beq.n	801fa66 <_realloc_r+0x1c>
 801fa8c:	42b5      	cmp	r5, r6
 801fa8e:	462a      	mov	r2, r5
 801fa90:	4621      	mov	r1, r4
 801fa92:	bf28      	it	cs
 801fa94:	4632      	movcs	r2, r6
 801fa96:	f7fe f932 	bl	801dcfe <memcpy>
 801fa9a:	4621      	mov	r1, r4
 801fa9c:	4640      	mov	r0, r8
 801fa9e:	f7fe ff39 	bl	801e914 <_free_r>
 801faa2:	463c      	mov	r4, r7
 801faa4:	e7e0      	b.n	801fa68 <_realloc_r+0x1e>

0801faa6 <__ascii_wctomb>:
 801faa6:	4603      	mov	r3, r0
 801faa8:	4608      	mov	r0, r1
 801faaa:	b141      	cbz	r1, 801fabe <__ascii_wctomb+0x18>
 801faac:	2aff      	cmp	r2, #255	@ 0xff
 801faae:	d904      	bls.n	801faba <__ascii_wctomb+0x14>
 801fab0:	228a      	movs	r2, #138	@ 0x8a
 801fab2:	601a      	str	r2, [r3, #0]
 801fab4:	f04f 30ff 	mov.w	r0, #4294967295
 801fab8:	4770      	bx	lr
 801faba:	700a      	strb	r2, [r1, #0]
 801fabc:	2001      	movs	r0, #1
 801fabe:	4770      	bx	lr

0801fac0 <_raise_r>:
 801fac0:	291f      	cmp	r1, #31
 801fac2:	b538      	push	{r3, r4, r5, lr}
 801fac4:	4605      	mov	r5, r0
 801fac6:	460c      	mov	r4, r1
 801fac8:	d904      	bls.n	801fad4 <_raise_r+0x14>
 801faca:	2316      	movs	r3, #22
 801facc:	6003      	str	r3, [r0, #0]
 801face:	f04f 30ff 	mov.w	r0, #4294967295
 801fad2:	bd38      	pop	{r3, r4, r5, pc}
 801fad4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fad6:	b112      	cbz	r2, 801fade <_raise_r+0x1e>
 801fad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fadc:	b94b      	cbnz	r3, 801faf2 <_raise_r+0x32>
 801fade:	4628      	mov	r0, r5
 801fae0:	f000 f830 	bl	801fb44 <_getpid_r>
 801fae4:	4622      	mov	r2, r4
 801fae6:	4601      	mov	r1, r0
 801fae8:	4628      	mov	r0, r5
 801faea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801faee:	f000 b817 	b.w	801fb20 <_kill_r>
 801faf2:	2b01      	cmp	r3, #1
 801faf4:	d00a      	beq.n	801fb0c <_raise_r+0x4c>
 801faf6:	1c59      	adds	r1, r3, #1
 801faf8:	d103      	bne.n	801fb02 <_raise_r+0x42>
 801fafa:	2316      	movs	r3, #22
 801fafc:	6003      	str	r3, [r0, #0]
 801fafe:	2001      	movs	r0, #1
 801fb00:	e7e7      	b.n	801fad2 <_raise_r+0x12>
 801fb02:	2100      	movs	r1, #0
 801fb04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fb08:	4620      	mov	r0, r4
 801fb0a:	4798      	blx	r3
 801fb0c:	2000      	movs	r0, #0
 801fb0e:	e7e0      	b.n	801fad2 <_raise_r+0x12>

0801fb10 <raise>:
 801fb10:	4b02      	ldr	r3, [pc, #8]	@ (801fb1c <raise+0xc>)
 801fb12:	4601      	mov	r1, r0
 801fb14:	6818      	ldr	r0, [r3, #0]
 801fb16:	f7ff bfd3 	b.w	801fac0 <_raise_r>
 801fb1a:	bf00      	nop
 801fb1c:	24000044 	.word	0x24000044

0801fb20 <_kill_r>:
 801fb20:	b538      	push	{r3, r4, r5, lr}
 801fb22:	4d07      	ldr	r5, [pc, #28]	@ (801fb40 <_kill_r+0x20>)
 801fb24:	2300      	movs	r3, #0
 801fb26:	4604      	mov	r4, r0
 801fb28:	4608      	mov	r0, r1
 801fb2a:	4611      	mov	r1, r2
 801fb2c:	602b      	str	r3, [r5, #0]
 801fb2e:	f7e1 fe45 	bl	80017bc <_kill>
 801fb32:	1c43      	adds	r3, r0, #1
 801fb34:	d102      	bne.n	801fb3c <_kill_r+0x1c>
 801fb36:	682b      	ldr	r3, [r5, #0]
 801fb38:	b103      	cbz	r3, 801fb3c <_kill_r+0x1c>
 801fb3a:	6023      	str	r3, [r4, #0]
 801fb3c:	bd38      	pop	{r3, r4, r5, pc}
 801fb3e:	bf00      	nop
 801fb40:	2400cf04 	.word	0x2400cf04

0801fb44 <_getpid_r>:
 801fb44:	f7e1 be32 	b.w	80017ac <_getpid>

0801fb48 <_malloc_usable_size_r>:
 801fb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb4c:	1f18      	subs	r0, r3, #4
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	bfbc      	itt	lt
 801fb52:	580b      	ldrlt	r3, [r1, r0]
 801fb54:	18c0      	addlt	r0, r0, r3
 801fb56:	4770      	bx	lr

0801fb58 <_init>:
 801fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb5a:	bf00      	nop
 801fb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb5e:	bc08      	pop	{r3}
 801fb60:	469e      	mov	lr, r3
 801fb62:	4770      	bx	lr

0801fb64 <_fini>:
 801fb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb66:	bf00      	nop
 801fb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fb6a:	bc08      	pop	{r3}
 801fb6c:	469e      	mov	lr, r3
 801fb6e:	4770      	bx	lr
