
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f05c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003674  0801f330  0801f330  00020330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080229a4  080229a4  000239a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080229ac  080229ac  000239ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080229b0  080229b0  000239b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  080229b4  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000200  08022bb4  00024200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004b84  08027537  00028b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004be4  08027597  00028be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000082d0  24004c44  080275f7  00028c44  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400cf14  080275f7  00028f14  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00028c44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040019  00000000  00000000  00028c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008aaf  00000000  00000000  00068c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d50  00000000  00000000  00071740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023c0  00000000  00000000  00074490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000479e7  00000000  00000000  00076850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046471  00000000  00000000  000be237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a1f6  00000000  00000000  001046a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0028e89e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cd1c  00000000  00000000  0028e8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0029b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004c44 	.word	0x24004c44
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f314 	.word	0x0801f314

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004c48 	.word	0x24004c48
 800030c:	0801f314 	.word	0x0801f314

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <Fan_ON>:
uint32_t lastExecutionTime_mainTask = 0;
uint32_t lastExecutionTime_secondTask = 0;


// Turn on the fan
void Fan_ON(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Fan_ON+0x14>)
 80006ba:	f005 f9bf 	bl	8005a3c <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58020000 	.word	0x58020000

080006c8 <Fan_OFF>:

// Turn off the fan
void Fan_OFF(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <Fan_OFF+0x14>)
 80006d2:	f005 f9b3 	bl	8005a3c <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020000 	.word	0x58020000

080006e0 <ReadSensors>:

// Read sensor values
void ReadSensors(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af04      	add	r7, sp, #16
	uint32_t raw_value;

	// Start ADC
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006e6:	4844      	ldr	r0, [pc, #272]	@ (80007f8 <ReadSensors+0x118>)
 80006e8:	f002 f80a 	bl	8002700 <HAL_ADC_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <ReadSensors+0x1a>
		printf("Error: ADC Start failed!\r\n");
 80006f2:	4842      	ldr	r0, [pc, #264]	@ (80007fc <ReadSensors+0x11c>)
 80006f4:	f01c feae 	bl	801d454 <puts>
		return;
 80006f8:	e07a      	b.n	80007f0 <ReadSensors+0x110>
	}

	// LM35_1 (Channel 10)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <ReadSensors+0x118>)
 8000700:	f002 f8fc 	bl	80028fc <HAL_ADC_PollForConversion>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d117      	bne.n	800073a <ReadSensors+0x5a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800070a:	483b      	ldr	r0, [pc, #236]	@ (80007f8 <ReadSensors+0x118>)
 800070c:	f002 f9ea 	bl	8002ae4 <HAL_ADC_GetValue>
 8000710:	6078      	str	r0, [r7, #4]
		lm35_1_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000800 <ReadSensors+0x120>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000804 <ReadSensors+0x124>
 8000728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800072c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8000808 <ReadSensors+0x128>
 8000730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <ReadSensors+0x12c>)
 8000736:	edc3 7a00 	vstr	s15, [r3]
	}

	// LM35_2 (Channel 15)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800073a:	f04f 31ff 	mov.w	r1, #4294967295
 800073e:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <ReadSensors+0x118>)
 8000740:	f002 f8dc 	bl	80028fc <HAL_ADC_PollForConversion>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d117      	bne.n	800077a <ReadSensors+0x9a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800074a:	482b      	ldr	r0, [pc, #172]	@ (80007f8 <ReadSensors+0x118>)
 800074c:	f002 f9ca 	bl	8002ae4 <HAL_ADC_GetValue>
 8000750:	6078      	str	r0, [r7, #4]
		lm35_2_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000800 <ReadSensors+0x120>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000804 <ReadSensors+0x124>
 8000768:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000808 <ReadSensors+0x128>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <ReadSensors+0x130>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
	}

	// Dust Sensor (Channel 5)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800077a:	f04f 31ff 	mov.w	r1, #4294967295
 800077e:	481e      	ldr	r0, [pc, #120]	@ (80007f8 <ReadSensors+0x118>)
 8000780:	f002 f8bc 	bl	80028fc <HAL_ADC_PollForConversion>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d117      	bne.n	80007ba <ReadSensors+0xda>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <ReadSensors+0x118>)
 800078c:	f002 f9aa 	bl	8002ae4 <HAL_ADC_GetValue>
 8000790:	6078      	str	r0, [r7, #4]
		dust_density = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE * 100.0f; // Adjust scaling factor if needed
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000800 <ReadSensors+0x120>
 80007a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000804 <ReadSensors+0x124>
 80007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000814 <ReadSensors+0x134>
 80007b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <ReadSensors+0x138>)
 80007b6:	edc3 7a00 	vstr	s15, [r3]
	}

	// Stop ADC
	HAL_ADC_Stop(&hadc1);
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <ReadSensors+0x118>)
 80007bc:	f002 f86a 	bl	8002894 <HAL_ADC_Stop>

	// Display sensor readings
	printf("LM35_1: %.2f C | LM35_2: %.2f C | Dust: %.2f μg/m^3\r\n", lm35_1_temp, lm35_2_temp, dust_density);
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <ReadSensors+0x12c>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <ReadSensors+0x130>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ReadSensors+0x138>)
 80007d6:	edd3 6a00 	vldr	s13, [r3]
 80007da:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007e2:	ed8d 7b00 	vstr	d7, [sp]
 80007e6:	ec53 2b15 	vmov	r2, r3, d5
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <ReadSensors+0x13c>)
 80007ec:	f01c fdca 	bl	801d384 <iprintf>
}
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24004c6c 	.word	0x24004c6c
 80007fc:	0801f330 	.word	0x0801f330
 8000800:	457ff000 	.word	0x457ff000
 8000804:	40533333 	.word	0x40533333
 8000808:	3c23d70a 	.word	0x3c23d70a
 800080c:	24004c60 	.word	0x24004c60
 8000810:	24004c64 	.word	0x24004c64
 8000814:	42c80000 	.word	0x42c80000
 8000818:	24004c68 	.word	0x24004c68
 800081c:	0801f34c 	.word	0x0801f34c

08000820 <SendDustAlert>:

void SendDustAlert(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	char message[] = "ALERT\n"; // Message to send
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <SendDustAlert+0x54>)
 8000828:	463b      	mov	r3, r7
 800082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082e:	6018      	str	r0, [r3, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	8019      	strh	r1, [r3, #0]
 8000834:	3302      	adds	r3, #2
 8000836:	0c0a      	lsrs	r2, r1, #16
 8000838:	701a      	strb	r2, [r3, #0]

	// Transmit the message via Bluetooth (USART2)
	if (HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY) != HAL_OK) {
 800083a:	463b      	mov	r3, r7
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fdb7 	bl	80003b0 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	4639      	mov	r1, r7
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <SendDustAlert+0x58>)
 800084e:	f009 fe2f 	bl	800a4b0 <HAL_UART_Transmit>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d003      	beq.n	8000860 <SendDustAlert+0x40>
		printf("Error: Bluetooth message transmission failed!\r\n");
 8000858:	4808      	ldr	r0, [pc, #32]	@ (800087c <SendDustAlert+0x5c>)
 800085a:	f01c fdfb 	bl	801d454 <puts>
} else {
	printf("Bluetooth message sent: %s\r\n", message);
}
}
 800085e:	e004      	b.n	800086a <SendDustAlert+0x4a>
	printf("Bluetooth message sent: %s\r\n", message);
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4806      	ldr	r0, [pc, #24]	@ (8000880 <SendDustAlert+0x60>)
 8000866:	f01c fd8d 	bl	801d384 <iprintf>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0801f3d4 	.word	0x0801f3d4
 8000878:	24004dbc 	.word	0x24004dbc
 800087c:	0801f384 	.word	0x0801f384
 8000880:	0801f3b4 	.word	0x0801f3b4

08000884 <mainTask>:
		printf("Bluetooth transmission completed.\r\n");
	}
}

// Task for reading sensors and controlling the fan
void mainTask(void *argument) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    	  lastExecutionTime_mainTask = currentTime;

    	        printf("Time since last mainTask execution: %lu μs\r\n", timeSinceLastExecution);
		 */

		printf("Starting measurement cycle...\r\n");
 800088c:	4824      	ldr	r0, [pc, #144]	@ (8000920 <mainTask+0x9c>)
 800088e:	f01c fde1 	bl	801d454 <puts>
		ReadSensors();  // Perform sensor measurements
 8000892:	f7ff ff25 	bl	80006e0 <ReadSensors>

		// Control fan based on average temperature
		float avg_temp = (lm35_1_temp + lm35_2_temp) / 2.0f;
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <mainTask+0xa0>)
 8000898:	ed93 7a00 	vldr	s14, [r3]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <mainTask+0xa4>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80008aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ae:	edc7 7a03 	vstr	s15, [r7, #12]
		if (avg_temp > FAN_THRESHOLD) {
 80008b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80008b6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	dd0b      	ble.n	80008dc <mainTask+0x58>
			Fan_ON();
 80008c4:	f7ff fef4 	bl	80006b0 <Fan_ON>
			printf("Fan ON (Avg Temp: %.2f C)\r\n", avg_temp);
 80008c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	ec53 2b17 	vmov	r2, r3, d7
 80008d4:	4815      	ldr	r0, [pc, #84]	@ (800092c <mainTask+0xa8>)
 80008d6:	f01c fd55 	bl	801d384 <iprintf>
 80008da:	e00a      	b.n	80008f2 <mainTask+0x6e>
		} else {
			Fan_OFF();
 80008dc:	f7ff fef4 	bl	80006c8 <Fan_OFF>
			printf("Fan OFF (Avg Temp: %.2f C)\r\n", avg_temp);
 80008e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e8:	ec53 2b17 	vmov	r2, r3, d7
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <mainTask+0xac>)
 80008ee:	f01c fd49 	bl	801d384 <iprintf>
		}

		// Release semaphore if dust density exceeds threshold
		if (dust_density > DUST_THRESHOLD) {
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <mainTask+0xb0>)
 80008f4:	edd3 7a00 	vldr	s15, [r3]
 80008f8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	dd07      	ble.n	8000916 <mainTask+0x92>
			printf("Dust density exceeded threshold! Releasing semaphore...\r\n");
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <mainTask+0xb4>)
 8000908:	f01c fda4 	bl	801d454 <puts>
			osSemaphoreRelease(alertSemaphoreHandle);
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <mainTask+0xb8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f00c f8eb 	bl	800caec <osSemaphoreRelease>
		}

		osDelay(2000);  // Delay for 2 seconds
 8000916:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800091a:	f00b fe50 	bl	800c5be <osDelay>
	for (;;) {
 800091e:	e7b5      	b.n	800088c <mainTask+0x8>
 8000920:	0801f400 	.word	0x0801f400
 8000924:	24004c60 	.word	0x24004c60
 8000928:	24004c64 	.word	0x24004c64
 800092c:	0801f420 	.word	0x0801f420
 8000930:	0801f43c 	.word	0x0801f43c
 8000934:	24004c68 	.word	0x24004c68
 8000938:	0801f45c 	.word	0x0801f45c
 800093c:	24004ef4 	.word	0x24004ef4

08000940 <secondTask>:
	}
}

// Task for sending alerts via Bluetooth
void secondTask(void *argument) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Wait for semaphore to be released when dust density exceeds threshold
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <secondTask+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	4618      	mov	r0, r3
 8000952:	f00c f879 	bl	800ca48 <osSemaphoreAcquire>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <secondTask+0x20>
			SendDustAlert(); // Send "ALERT" message via HC-05
 800095c:	f7ff ff60 	bl	8000820 <SendDustAlert>
		}

		osDelay(100); // Allow other tasks to execute
 8000960:	2064      	movs	r0, #100	@ 0x64
 8000962:	f00b fe2c 	bl	800c5be <osDelay>
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000966:	e7ef      	b.n	8000948 <secondTask+0x8>
 8000968:	24004ef4 	.word	0x24004ef4

0800096c <_write>:
/* USER CODE BEGIN 0 */
// Redirecționare printf -> UART3


int _write(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b29a      	uxth	r2, r3
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <_write+0x28>)
 8000984:	f009 fd94 	bl	800a4b0 <HAL_UART_Transmit>
	return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	24004e50 	.word	0x24004e50

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f001 f94c 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f878 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 fac8 	bl	8000f38 <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 80009a8:	f000 fabe 	bl	8000f28 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80009ac:	f000 f8e2 	bl	8000b74 <MX_ADC1_Init>
  MX_TIM2_Init();
 80009b0:	f000 f97a 	bl	8000ca8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009b4:	f000 fa20 	bl	8000df8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009b8:	f000 f9d2 	bl	8000d60 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009bc:	f000 fa68 	bl	8000e90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	printf("Sistem pornit. Începe monitorizarea..\r\n");
 80009c0:	4823      	ldr	r0, [pc, #140]	@ (8000a50 <main+0xb8>)
 80009c2:	f01c fd47 	bl	801d454 <puts>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009c6:	2100      	movs	r1, #0
 80009c8:	4822      	ldr	r0, [pc, #136]	@ (8000a54 <main+0xbc>)
 80009ca:	f008 fd59 	bl	8009480 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ce:	f00b fd05 	bl	800c3dc <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of alertSemaphore */
  alertSemaphoreHandle = osSemaphoreNew(1, 1, &alertSemaphore_attributes);
 80009d2:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <main+0xc0>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	2001      	movs	r0, #1
 80009d8:	f00b ffac 	bl	800c934 <osSemaphoreNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <main+0xc4>)
 80009e0:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorTimer */
  SensorTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &SensorTimer_attributes);
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <main+0xc8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	481e      	ldr	r0, [pc, #120]	@ (8000a64 <main+0xcc>)
 80009ea:	f00b fe19 	bl	800c620 <osTimerNew>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <main+0xd0>)
 80009f2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <main+0xd4>)
 80009f6:	2100      	movs	r1, #0
 80009f8:	481d      	ldr	r0, [pc, #116]	@ (8000a70 <main+0xd8>)
 80009fa:	f00b fd4e 	bl	800c49a <osThreadNew>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <main+0xdc>)
 8000a02:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(mainTask, NULL, &SensorTask_attributes);
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <main+0xe0>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <main+0xe4>)
 8000a0a:	f00b fd46 	bl	800c49a <osThreadNew>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <main+0xe8>)
 8000a12:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(secondTask, NULL, &CommTask_attributes);
 8000a14:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <main+0xec>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <main+0xf0>)
 8000a1a:	f00b fd3e 	bl	800c49a <osThreadNew>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a1a      	ldr	r2, [pc, #104]	@ (8000a8c <main+0xf4>)
 8000a22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	alertSemaphoreHandle = osSemaphoreNew(1, 0, NULL);  // Binary semaphore
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f00b ff83 	bl	800c934 <osSemaphoreNew>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <main+0xc4>)
 8000a32:	6013      	str	r3, [r2, #0]
	    if (alertSemaphoreHandle == NULL) {
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <main+0xc4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <main+0xae>
	        printf("Error: Semaphore initialization failed!\r\n");
 8000a3c:	4814      	ldr	r0, [pc, #80]	@ (8000a90 <main+0xf8>)
 8000a3e:	f01c fd09 	bl	801d454 <puts>
	        while (1);  // Halt the program if semaphore initialization fails
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <main+0xaa>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a46:	f00b fced 	bl	800c424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a4a:	bf00      	nop
 8000a4c:	e7fd      	b.n	8000a4a <main+0xb2>
 8000a4e:	bf00      	nop
 8000a50:	0801f4d8 	.word	0x0801f4d8
 8000a54:	24004cdc 	.word	0x24004cdc
 8000a58:	0802244c 	.word	0x0802244c
 8000a5c:	24004ef4 	.word	0x24004ef4
 8000a60:	0802243c 	.word	0x0802243c
 8000a64:	08001169 	.word	0x08001169
 8000a68:	24004ef0 	.word	0x24004ef0
 8000a6c:	080223d0 	.word	0x080223d0
 8000a70:	08001155 	.word	0x08001155
 8000a74:	24004ee4 	.word	0x24004ee4
 8000a78:	080223f4 	.word	0x080223f4
 8000a7c:	08000885 	.word	0x08000885
 8000a80:	24004ee8 	.word	0x24004ee8
 8000a84:	08022418 	.word	0x08022418
 8000a88:	08000941 	.word	0x08000941
 8000a8c:	24004eec 	.word	0x24004eec
 8000a90:	0801f500 	.word	0x0801f500

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	@ 0x70
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	224c      	movs	r2, #76	@ 0x4c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f01c fdc6 	bl	801d634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f01c fdc0 	bl	801d634 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f004 ffdb 	bl	8005a70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad6:	bf00      	nop
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <SystemClock_Config+0xdc>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ae4:	d1f8      	bne.n	8000ad8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2321      	movs	r3, #33	@ 0x21
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b00:	f240 1313 	movw	r3, #275	@ 0x113
 8000b04:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b12:	2304      	movs	r3, #4
 8000b14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 ffde 	bl	8005ae4 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b2e:	f000 fb39 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	233f      	movs	r3, #63	@ 0x3f
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b42:	2340      	movs	r3, #64	@ 0x40
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b46:	2340      	movs	r3, #64	@ 0x40
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2103      	movs	r1, #3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 fb9d 	bl	8006298 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b64:	f000 fb1e 	bl	80011a4 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	@ 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58024800 	.word	0x58024800

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2224      	movs	r2, #36	@ 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f01c fd51 	bl	801d634 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b92:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000b94:	4a40      	ldr	r2, [pc, #256]	@ (8000c98 <MX_ADC1_Init+0x124>)
 8000b96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b98:	4b3e      	ldr	r3, [pc, #248]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b3a      	ldr	r3, [pc, #232]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb0:	4b38      	ldr	r3, [pc, #224]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb6:	4b37      	ldr	r3, [pc, #220]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000bbc:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b34      	ldr	r3, [pc, #208]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bca:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000bf8:	f001 fb7a 	bl	80022f0 <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 facf 	bl	80011a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000c12:	f002 ff5f 	bl	8003ad4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c1c:	f000 fac2 	bl	80011a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <MX_ADC1_Init+0x128>)
 8000c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2306      	movs	r3, #6
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c32:	2304      	movs	r3, #4
 8000c34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4813      	ldr	r0, [pc, #76]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000c46:	f001 ff5b 	bl	8002b00 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c50:	f000 faa8 	bl	80011a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_ADC1_Init+0x12c>)
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000c62:	f001 ff4d 	bl	8002b00 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000c6c:	f000 fa9a 	bl	80011a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_ADC1_Init+0x130>)
 8000c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c74:	2312      	movs	r3, #18
 8000c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_ADC1_Init+0x120>)
 8000c7e:	f001 ff3f 	bl	8002b00 <HAL_ADC_ConfigChannel>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000c88:	f000 fa8c 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24004c6c 	.word	0x24004c6c
 8000c98:	40022000 	.word	0x40022000
 8000c9c:	2a000400 	.word	0x2a000400
 8000ca0:	3ef08000 	.word	0x3ef08000
 8000ca4:	14f00020 	.word	0x14f00020

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cd6:	f240 3247 	movw	r2, #839	@ 0x347
 8000cda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000ce4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf6:	4819      	ldr	r0, [pc, #100]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000cf8:	f008 fb6a 	bl	80093d0 <HAL_TIM_PWM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000d02:	f000 fa4f 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000d16:	f009 fac1 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 fa40 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d24:	2360      	movs	r3, #96	@ 0x60
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 320;
 8000d28:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000d3e:	f008 fdc3 	bl	80098c8 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d48:	f000 fa2c 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM2_Init+0xb4>)
 8000d4e:	f000 fb21 	bl	8001394 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	@ 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24004cdc 	.word	0x24004cdc

08000d60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	@ (8000df4 <MX_USART1_UART_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da8:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000daa:	f009 fb31 	bl	800a410 <HAL_UART_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 f9f6 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000dbc:	f00a fccb 	bl	800b756 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc6:	f000 f9ed 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4808      	ldr	r0, [pc, #32]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000dce:	f00a fd00 	bl	800b7d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd8:	f000 f9e4 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_USART1_UART_Init+0x90>)
 8000dde:	f00a fc81 	bl	800b6e4 <HAL_UARTEx_DisableFifoMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f000 f9dc 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24004d28 	.word	0x24004d28
 8000df4:	40011000 	.word	0x40011000

08000df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e42:	f009 fae5 	bl	800a410 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f9aa 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e54:	f00a fc7f 	bl	800b756 <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f9a1 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e66:	f00a fcb4 	bl	800b7d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f000 f998 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e76:	f00a fc35 	bl	800b6e4 <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f990 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24004dbc 	.word	0x24004dbc
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	@ (8000f24 <MX_USART3_UART_Init+0x94>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed8:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eda:	f009 fa99 	bl	800a410 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 f95e 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000eec:	f00a fc33 	bl	800b756 <HAL_UARTEx_SetTxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f000 f955 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000efe:	f00a fc68 	bl	800b7d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 f94c 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_USART3_UART_Init+0x90>)
 8000f0e:	f00a fbe9 	bl	800b6e4 <HAL_UARTEx_DisableFifoMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f944 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24004e50 	.word	0x24004e50
 8000f24:	40004800 	.word	0x40004800

08000f28 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	@ 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	4a78      	ldr	r2, [pc, #480]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5e:	4b76      	ldr	r3, [pc, #472]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6c:	4b72      	ldr	r3, [pc, #456]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a71      	ldr	r2, [pc, #452]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9a:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a62      	ldr	r2, [pc, #392]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd6:	4b58      	ldr	r3, [pc, #352]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe4:	4b54      	ldr	r3, [pc, #336]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a53      	ldr	r2, [pc, #332]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b50      	ldr	r3, [pc, #320]	@ (8001138 <MX_GPIO_Init+0x200>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b4d      	ldr	r3, [pc, #308]	@ (8001138 <MX_GPIO_Init+0x200>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	4a4b      	ldr	r2, [pc, #300]	@ (8001138 <MX_GPIO_Init+0x200>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001012:	4b49      	ldr	r3, [pc, #292]	@ (8001138 <MX_GPIO_Init+0x200>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	f003 0310 	and.w	r3, r3, #16
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2140      	movs	r1, #64	@ 0x40
 8001024:	4845      	ldr	r0, [pc, #276]	@ (800113c <MX_GPIO_Init+0x204>)
 8001026:	f004 fd09 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001030:	4843      	ldr	r0, [pc, #268]	@ (8001140 <MX_GPIO_Init+0x208>)
 8001032:	f004 fd03 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103c:	4841      	ldr	r0, [pc, #260]	@ (8001144 <MX_GPIO_Init+0x20c>)
 800103e:	f004 fcfd 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2102      	movs	r1, #2
 8001046:	4840      	ldr	r0, [pc, #256]	@ (8001148 <MX_GPIO_Init+0x210>)
 8001048:	f004 fcf8 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	483a      	ldr	r0, [pc, #232]	@ (800114c <MX_GPIO_Init+0x214>)
 8001062:	f004 fb43 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	482f      	ldr	r0, [pc, #188]	@ (800113c <MX_GPIO_Init+0x204>)
 800107e:	f004 fb35 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001082:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4829      	ldr	r0, [pc, #164]	@ (8001140 <MX_GPIO_Init+0x208>)
 800109c:	f004 fb26 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4822      	ldr	r0, [pc, #136]	@ (8001144 <MX_GPIO_Init+0x20c>)
 80010ba:	f004 fb17 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	481f      	ldr	r0, [pc, #124]	@ (8001150 <MX_GPIO_Init+0x218>)
 80010d4:	f004 fb0a 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80010d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	@ (800113c <MX_GPIO_Init+0x204>)
 80010ee:	f004 fafd 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001104:	230a      	movs	r3, #10
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <MX_GPIO_Init+0x204>)
 8001110:	f004 faec 	bl	80056ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_GPIO_Init+0x210>)
 800112c:	f004 fade 	bl	80056ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001130:	bf00      	nop
 8001132:	3730      	adds	r7, #48	@ 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024400 	.word	0x58024400
 800113c:	58020000 	.word	0x58020000
 8001140:	58020400 	.word	0x58020400
 8001144:	58020c00 	.word	0x58020c00
 8001148:	58021000 	.word	0x58021000
 800114c:	58020800 	.word	0x58020800
 8001150:	58021800 	.word	0x58021800

08001154 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800115c:	f00a fbc6 	bl	800b8ec <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f00b fa2c 	bl	800c5be <osDelay>
 8001166:	e7fb      	b.n	8001160 <StartDefaultTask+0xc>

08001168 <Callback01>:
/* USER CODE END Header_mainTask */


/* Callback01 function */
void Callback01(void *argument)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	60fb      	str	r3, [r7, #12]
	        printf("Bluetooth transmission complete.\r\n");
	    }
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8001194:	f000 fd8c 	bl	8001cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40001000 	.word	0x40001000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_MspInit+0x38>)
 80011b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <HAL_MspInit+0x38>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_MspInit+0x38>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	210f      	movs	r1, #15
 80011d8:	f06f 0001 	mvn.w	r0, #1
 80011dc:	f002 fe14 	bl	8003e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ba      	sub	sp, #232	@ 0xe8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	22b8      	movs	r2, #184	@ 0xb8
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f01c fa11 	bl	801d634 <memset>
  if(hadc->Instance==ADC1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a4a      	ldr	r2, [pc, #296]	@ (8001340 <HAL_ADC_MspInit+0x154>)
 8001218:	4293      	cmp	r3, r2
 800121a:	f040 808c 	bne.w	8001336 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800121e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 800122e:	2318      	movs	r3, #24
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001232:	2302      	movs	r3, #2
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800123e:	23c0      	movs	r3, #192	@ 0xc0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fbed 	bl	8006a34 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001260:	f7ff ffa0 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 8001266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800126a:	4a36      	ldr	r2, [pc, #216]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001274:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 8001276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b30      	ldr	r3, [pc, #192]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001288:	4a2e      	ldr	r2, [pc, #184]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001292:	4b2c      	ldr	r3, [pc, #176]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_ADC_MspInit+0x158>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4814      	ldr	r0, [pc, #80]	@ (8001348 <HAL_ADC_MspInit+0x15c>)
 80012f6:	f004 f9f9 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fa:	2308      	movs	r3, #8
 80012fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001310:	4619      	mov	r1, r3
 8001312:	480e      	ldr	r0, [pc, #56]	@ (800134c <HAL_ADC_MspInit+0x160>)
 8001314:	f004 f9ea 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <HAL_ADC_MspInit+0x164>)
 8001332:	f004 f9db 	bl	80056ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	37e8      	adds	r7, #232	@ 0xe8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000
 8001344:	58024400 	.word	0x58024400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400

08001354 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001364:	d10e      	bne.n	8001384 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800136c:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	58024400 	.word	0x58024400

08001394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013b4:	d11e      	bne.n	80013f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_TIM_MspPostInit+0x68>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_TIM_MspPostInit+0x68>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_TIM_MspPostInit+0x68>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <HAL_TIM_MspPostInit+0x6c>)
 80013f0:	f004 f97c 	bl	80056ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020000 	.word	0x58020000

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0bc      	sub	sp, #240	@ 0xf0
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	22b8      	movs	r2, #184	@ 0xb8
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f01c f905 	bl	801d634 <memset>
  if(huart->Instance==USART1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a88      	ldr	r2, [pc, #544]	@ (8001650 <HAL_UART_MspInit+0x24c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d15c      	bne.n	80014ee <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001434:	f04f 0201 	mov.w	r2, #1
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	4618      	mov	r0, r3
 800144c:	f005 faf2 	bl	8006a34 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001456:	f7ff fea5 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145a:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001460:	4a7c      	ldr	r2, [pc, #496]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800146a:	4b7a      	ldr	r3, [pc, #488]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b76      	ldr	r3, [pc, #472]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	4a75      	ldr	r2, [pc, #468]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001488:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800149a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014b0:	2304      	movs	r3, #4
 80014b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014ba:	4619      	mov	r1, r3
 80014bc:	4866      	ldr	r0, [pc, #408]	@ (8001658 <HAL_UART_MspInit+0x254>)
 80014be:	f004 f915 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c2:	2340      	movs	r3, #64	@ 0x40
 80014c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014da:	2307      	movs	r3, #7
 80014dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014e4:	4619      	mov	r1, r3
 80014e6:	485c      	ldr	r0, [pc, #368]	@ (8001658 <HAL_UART_MspInit+0x254>)
 80014e8:	f004 f900 	bl	80056ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ec:	e0ac      	b.n	8001648 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5a      	ldr	r2, [pc, #360]	@ (800165c <HAL_UART_MspInit+0x258>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d15b      	bne.n	80015b0 <HAL_UART_MspInit+0x1ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f8:	f04f 0202 	mov.w	r2, #2
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	4618      	mov	r0, r3
 8001510:	f005 fa90 	bl	8006a34 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800151a:	f7ff fe43 	bl	80011a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	4b4d      	ldr	r3, [pc, #308]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001524:	4a4b      	ldr	r2, [pc, #300]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b45      	ldr	r3, [pc, #276]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a44      	ldr	r2, [pc, #272]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_UART_MspInit+0x250>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800155a:	2320      	movs	r3, #32
 800155c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001572:	2307      	movs	r3, #7
 8001574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001578:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800157c:	4619      	mov	r1, r3
 800157e:	4838      	ldr	r0, [pc, #224]	@ (8001660 <HAL_UART_MspInit+0x25c>)
 8001580:	f004 f8b4 	bl	80056ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001584:	2340      	movs	r3, #64	@ 0x40
 8001586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001590:	2301      	movs	r3, #1
 8001592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	2307      	movs	r3, #7
 800159e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a6:	4619      	mov	r1, r3
 80015a8:	482d      	ldr	r0, [pc, #180]	@ (8001660 <HAL_UART_MspInit+0x25c>)
 80015aa:	f004 f89f 	bl	80056ec <HAL_GPIO_Init>
}
 80015ae:	e04b      	b.n	8001648 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <HAL_UART_MspInit+0x260>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d146      	bne.n	8001648 <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ba:	f04f 0202 	mov.w	r2, #2
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 fa2f 	bl	8006a34 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80015dc:	f7ff fde2 	bl	80011a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <HAL_UART_MspInit+0x250>)
 80015e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0x250>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_UART_MspInit+0x250>)
 80015f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001604:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_UART_MspInit+0x250>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800161c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001620:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001636:	2307      	movs	r3, #7
 8001638:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	@ (8001660 <HAL_UART_MspInit+0x25c>)
 8001644:	f004 f852 	bl	80056ec <HAL_GPIO_Init>
}
 8001648:	bf00      	nop
 800164a:	37f0      	adds	r7, #240	@ 0xf0
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40011000 	.word	0x40011000
 8001654:	58024400 	.word	0x58024400
 8001658:	58020400 	.word	0x58020400
 800165c:	40004400 	.word	0x40004400
 8001660:	58020c00 	.word	0x58020c00
 8001664:	40004800 	.word	0x40004800

08001668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b090      	sub	sp, #64	@ 0x40
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d827      	bhi.n	80016c6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001676:	2200      	movs	r2, #0
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	2036      	movs	r0, #54	@ 0x36
 800167c:	f002 fbc4 	bl	8003e08 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001680:	2036      	movs	r0, #54	@ 0x36
 8001682:	f002 fbdb 	bl	8003e3c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_InitTick+0xc4>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800168c:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <HAL_InitTick+0xc8>)
 800168e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001692:	4a27      	ldr	r2, [pc, #156]	@ (8001730 <HAL_InitTick+0xc8>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_InitTick+0xc8>)
 800169e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016aa:	f107 0210 	add.w	r2, r7, #16
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f97b 	bl	80069b0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <HAL_InitTick+0x6a>
 80016c4:	e001      	b.n	80016ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e02b      	b.n	8001722 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ca:	f005 f945 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 80016ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80016d0:	e004      	b.n	80016dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016d2:	f005 f941 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <HAL_InitTick+0xcc>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	3b01      	subs	r3, #1
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_InitTick+0xd0>)
 80016ec:	4a13      	ldr	r2, [pc, #76]	@ (800173c <HAL_InitTick+0xd4>)
 80016ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_InitTick+0xd0>)
 80016f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_InitTick+0xd0>)
 80016fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_InitTick+0xd0>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <HAL_InitTick+0xd0>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800170a:	480b      	ldr	r0, [pc, #44]	@ (8001738 <HAL_InitTick+0xd0>)
 800170c:	f007 fd78 	bl	8009200 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d104      	bne.n	8001720 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001716:	4808      	ldr	r0, [pc, #32]	@ (8001738 <HAL_InitTick+0xd0>)
 8001718:	f007 fdd4 	bl	80092c4 <HAL_TIM_Base_Start_IT>
 800171c:	4603      	mov	r3, r0
 800171e:	e000      	b.n	8001722 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3740      	adds	r7, #64	@ 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24000008 	.word	0x24000008
 8001730:	58024400 	.word	0x58024400
 8001734:	431bde83 	.word	0x431bde83
 8001738:	24004f48 	.word	0x24004f48
 800173c:	40001000 	.word	0x40001000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <NMI_Handler+0x4>

08001748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <MemManage_Handler+0x4>

08001758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <UsageFault_Handler+0x4>

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM6_DAC_IRQHandler+0x10>)
 800177e:	f007 ff9b 	bl	80096b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	24004f48 	.word	0x24004f48

0800178c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_kill>:

int _kill(int pid, int sig)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <_kill+0x20>)
 80017a8:	2216      	movs	r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
  return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	2400cf04 	.word	0x2400cf04

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe5 	bl	800179c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d2:	bf00      	nop
 80017d4:	e7fd      	b.n	80017d2 <_exit+0x12>

080017d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e00a      	b.n	80017fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e8:	f3af 8000 	nop.w
 80017ec:	4601      	mov	r1, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	60ba      	str	r2, [r7, #8]
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	dbf0      	blt.n	80017e8 <_read+0x12>
  }

  return len;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001838:	605a      	str	r2, [r3, #4]
  return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_isatty>:

int _isatty(int file)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d205      	bcs.n	80018b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <_sbrk+0x6c>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	24050000 	.word	0x24050000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	24004f94 	.word	0x24004f94
 80018e0:	2400cf18 	.word	0x2400cf18
 80018e4:	2400cf04 	.word	0x2400cf04

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <SystemInit+0xd0>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a31      	ldr	r2, [pc, #196]	@ (80019b8 <SystemInit+0xd0>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <SystemInit+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	2b06      	cmp	r3, #6
 8001906:	d807      	bhi.n	8001918 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <SystemInit+0xd4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 030f 	bic.w	r3, r3, #15
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <SystemInit+0xd4>)
 8001912:	f043 0307 	orr.w	r3, r3, #7
 8001916:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001918:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <SystemInit+0xd8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <SystemInit+0xd8>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001924:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <SystemInit+0xd8>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800192a:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SystemInit+0xd8>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4924      	ldr	r1, [pc, #144]	@ (80019c0 <SystemInit+0xd8>)
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <SystemInit+0xdc>)
 8001932:	4013      	ands	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <SystemInit+0xd4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <SystemInit+0xd4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 030f 	bic.w	r3, r3, #15
 800194a:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <SystemInit+0xd4>)
 800194c:	f043 0307 	orr.w	r3, r3, #7
 8001950:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <SystemInit+0xd8>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <SystemInit+0xd8>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <SystemInit+0xd8>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <SystemInit+0xd8>)
 8001966:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <SystemInit+0xe0>)
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <SystemInit+0xd8>)
 800196c:	4a17      	ldr	r2, [pc, #92]	@ (80019cc <SystemInit+0xe4>)
 800196e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <SystemInit+0xd8>)
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <SystemInit+0xe8>)
 8001974:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <SystemInit+0xd8>)
 800197e:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <SystemInit+0xe8>)
 8001980:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <SystemInit+0xd8>)
 8001984:	2200      	movs	r2, #0
 8001986:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <SystemInit+0xd8>)
 800198a:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <SystemInit+0xe8>)
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <SystemInit+0xd8>)
 8001990:	2200      	movs	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <SystemInit+0xd8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <SystemInit+0xd8>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <SystemInit+0xd8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <SystemInit+0xec>)
 80019a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	52002000 	.word	0x52002000
 80019c0:	58024400 	.word	0x58024400
 80019c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019c8:	02020200 	.word	0x02020200
 80019cc:	01ff0000 	.word	0x01ff0000
 80019d0:	01010280 	.word	0x01010280
 80019d4:	52004000 	.word	0x52004000

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019dc:	f7ff ff84 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f01b febd 	bl	801d784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7fe ffc5 	bl	8000998 <main>
  bx  lr
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a18:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 8001a1c:	080229b4 	.word	0x080229b4
  ldr r2, =_sbss
 8001a20:	24004c44 	.word	0x24004c44
  ldr r4, =_ebss
 8001a24:	2400cf14 	.word	0x2400cf14

08001a28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC3_IRQHandler>

08001a2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <LAN8742_RegisterBusIO+0x28>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <LAN8742_RegisterBusIO+0x28>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <LAN8742_RegisterBusIO+0x28>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e014      	b.n	8001a82 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d139      	bne.n	8001b1e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e01c      	b.n	8001afe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	2112      	movs	r1, #18
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	4798      	blx	r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da03      	bge.n	8001ae0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001ad8:	f06f 0304 	mvn.w	r3, #4
 8001adc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001ade:	e00b      	b.n	8001af8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d105      	bne.n	8001af8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
         break;
 8001af6:	e005      	b.n	8001b04 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b1f      	cmp	r3, #31
 8001b02:	d9df      	bls.n	8001ac4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b1f      	cmp	r3, #31
 8001b0a:	d902      	bls.n	8001b12 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b0c:	f06f 0302 	mvn.w	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 }
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6810      	ldr	r0, [r2, #0]
 8001b3c:	f107 020c 	add.w	r2, r7, #12
 8001b40:	2101      	movs	r1, #1
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da02      	bge.n	8001b50 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b4a:	f06f 0304 	mvn.w	r3, #4
 8001b4e:	e06e      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6810      	ldr	r0, [r2, #0]
 8001b58:	f107 020c 	add.w	r2, r7, #12
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	4798      	blx	r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da02      	bge.n	8001b6c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b66:	f06f 0304 	mvn.w	r3, #4
 8001b6a:	e060      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e059      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6810      	ldr	r0, [r2, #0]
 8001b82:	f107 020c 	add.w	r2, r7, #12
 8001b86:	2100      	movs	r1, #0
 8001b88:	4798      	blx	r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da02      	bge.n	8001b96 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b90:	f06f 0304 	mvn.w	r3, #4
 8001b94:	e04b      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d006      	beq.n	8001bb8 <LAN8742_GetLinkState+0x90>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e03a      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e033      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e02c      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e02a      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	211f      	movs	r1, #31
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da02      	bge.n	8001bf4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001bee:	f06f 0304 	mvn.w	r3, #4
 8001bf2:	e01c      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e015      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f003 031c 	and.w	r3, r3, #28
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d101      	bne.n	8001c10 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e00e      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 031c 	and.w	r3, r3, #28
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d101      	bne.n	8001c1e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e007      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 031c 	and.w	r3, r3, #28
 8001c24:	2b14      	cmp	r3, #20
 8001c26:	d101      	bne.n	8001c2c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e000      	b.n	8001c2e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c2c:	2305      	movs	r3, #5
    }
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f002 f8d7 	bl	8003df2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c44:	f004 fcde 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_Init+0x68>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	4913      	ldr	r1, [pc, #76]	@ (8001ca4 <HAL_Init+0x6c>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <HAL_Init+0x68>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_Init+0x6c>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca8 <HAL_Init+0x70>)
 8001c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <HAL_Init+0x74>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fcf0 	bl	8001668 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e002      	b.n	8001c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c92:	f7ff fa8d 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	0802245c 	.word	0x0802245c
 8001ca8:	24000004 	.word	0x24000004
 8001cac:	24000000 	.word	0x24000000

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2400000c 	.word	0x2400000c
 8001cd4:	24004f98 	.word	0x24004f98

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	24004f98 	.word	0x24004f98

08001cf0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001d00:	4904      	ldr	r1, [pc, #16]	@ (8001d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	58000400 	.word	0x58000400

08001d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3360      	adds	r3, #96	@ 0x60
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <LL_ADC_SetOffset+0x60>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10b      	bne.n	8001dbc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dba:	e00b      	b.n	8001dd4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	58026000 	.word	0x58026000

08001de4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3360      	adds	r3, #96	@ 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00e      	beq.n	8001e76 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3360      	adds	r3, #96	@ 0x60
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]
  }
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	58026000 	.word	0x58026000

08001e88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <LL_ADC_SetOffsetSaturation+0x40>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10e      	bne.n	8001eba <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3360      	adds	r3, #96	@ 0x60
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	58026000 	.word	0x58026000

08001ecc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a0c      	ldr	r2, [pc, #48]	@ (8001f0c <LL_ADC_SetOffsetSign+0x40>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10e      	bne.n	8001efe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3360      	adds	r3, #96	@ 0x60
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	58026000 	.word	0x58026000

08001f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3360      	adds	r3, #96	@ 0x60
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <LL_ADC_SetOffsetState+0x50>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001f42:	e007      	b.n	8001f54 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58026000 	.word	0x58026000

08001f64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3330      	adds	r3, #48	@ 0x30
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	211f      	movs	r1, #31
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 011f 	and.w	r1, r3, #31
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b087      	sub	sp, #28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	0e5b      	lsrs	r3, r3, #25
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2107      	movs	r1, #7
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	0d1b      	lsrs	r3, r3, #20
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a1a      	ldr	r2, [pc, #104]	@ (80020b0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d115      	bne.n	8002078 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0318 	and.w	r3, r3, #24
 8002062:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002064:	40d9      	lsrs	r1, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	400b      	ands	r3, r1
 800206a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800206e:	431a      	orrs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002076:	e014      	b.n	80020a2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0318 	and.w	r3, r3, #24
 800208e:	4909      	ldr	r1, [pc, #36]	@ (80020b4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002090:	40d9      	lsrs	r1, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	400b      	ands	r3, r1
 8002096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58026000 	.word	0x58026000
 80020b4:	000fffff 	.word	0x000fffff

080020b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6093      	str	r3, [r2, #8]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	5fffffc0 	.word	0x5fffffc0

08002114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002128:	d101      	bne.n	800212e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <LL_ADC_EnableInternalRegulator+0x24>)
 800214a:	4013      	ands	r3, r2
 800214c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	6fffffc0 	.word	0x6fffffc0

08002164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <LL_ADC_Enable+0x24>)
 800219a:	4013      	ands	r3, r2
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	7fffffc0 	.word	0x7fffffc0

080021b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <LL_ADC_Disable+0x24>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	f043 0202 	orr.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	7fffffc0 	.word	0x7fffffc0

080021dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <LL_ADC_IsEnabled+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_ADC_IsEnabled+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d101      	bne.n	800221a <LL_ADC_IsDisableOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_IsDisableOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <LL_ADC_REG_StartConversion+0x24>)
 8002236:	4013      	ands	r3, r2
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	7fffffc0 	.word	0x7fffffc0

08002250 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <LL_ADC_REG_StopConversion+0x24>)
 800225e:	4013      	ands	r3, r2
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	7fffffc0 	.word	0x7fffffc0

08002278 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d101      	bne.n	8002290 <LL_ADC_REG_IsConversionOngoing+0x18>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <LL_ADC_INJ_StopConversion+0x24>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	7fffffc0 	.word	0x7fffffc0

080022c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d101      	bne.n	80022e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1ee      	b.n	80026e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe ff67 	bl	80011ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff feef 	bl	8002114 <LL_ADC_IsDeepPowerDownEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fed5 	bl	80020f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff0a 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d114      	bne.n	8002380 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff feee 	bl	800213c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002360:	4b8e      	ldr	r3, [pc, #568]	@ (800259c <HAL_ADC_Init+0x2ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	4a8e      	ldr	r2, [pc, #568]	@ (80025a0 <HAL_ADC_Init+0x2b0>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	3301      	adds	r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002372:	e002      	b.n	800237a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3b01      	subs	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff feed 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff61 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 80023b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8188 	bne.w	80026d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8184 	bne.w	80026d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fefa 	bl	80021dc <LL_ADC_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d136      	bne.n	800245c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6c      	ldr	r2, [pc, #432]	@ (80025a4 <HAL_ADC_Init+0x2b4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Init+0x112>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <HAL_ADC_Init+0x2b8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_ADC_Init+0x130>
 8002402:	4868      	ldr	r0, [pc, #416]	@ (80025a4 <HAL_ADC_Init+0x2b4>)
 8002404:	f7ff feea 	bl	80021dc <LL_ADC_IsEnabled>
 8002408:	4604      	mov	r4, r0
 800240a:	4867      	ldr	r0, [pc, #412]	@ (80025a8 <HAL_ADC_Init+0x2b8>)
 800240c:	f7ff fee6 	bl	80021dc <LL_ADC_IsEnabled>
 8002410:	4603      	mov	r3, r0
 8002412:	4323      	orrs	r3, r4
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e008      	b.n	8002432 <HAL_ADC_Init+0x142>
 8002420:	4862      	ldr	r0, [pc, #392]	@ (80025ac <HAL_ADC_Init+0x2bc>)
 8002422:	f7ff fedb 	bl	80021dc <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5a      	ldr	r2, [pc, #360]	@ (80025a4 <HAL_ADC_Init+0x2b4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_ADC_Init+0x15a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_ADC_Init+0x2b8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x15e>
 800244a:	4a59      	ldr	r2, [pc, #356]	@ (80025b0 <HAL_ADC_Init+0x2c0>)
 800244c:	e000      	b.n	8002450 <HAL_ADC_Init+0x160>
 800244e:	4a59      	ldr	r2, [pc, #356]	@ (80025b4 <HAL_ADC_Init+0x2c4>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff fc5e 	bl	8001d18 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_ADC_Init+0x2bc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d129      	bne.n	80024ba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e5b      	ldrb	r3, [r3, #25]
 800246a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002470:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002476:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d013      	beq.n	80024a8 <HAL_ADC_Init+0x1b8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d00d      	beq.n	80024a4 <HAL_ADC_Init+0x1b4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b1c      	cmp	r3, #28
 800248e:	d007      	beq.n	80024a0 <HAL_ADC_Init+0x1b0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b18      	cmp	r3, #24
 8002496:	d101      	bne.n	800249c <HAL_ADC_Init+0x1ac>
 8002498:	2318      	movs	r3, #24
 800249a:	e006      	b.n	80024aa <HAL_ADC_Init+0x1ba>
 800249c:	2300      	movs	r3, #0
 800249e:	e004      	b.n	80024aa <HAL_ADC_Init+0x1ba>
 80024a0:	2310      	movs	r3, #16
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Init+0x1ba>
 80024a4:	2308      	movs	r3, #8
 80024a6:	e000      	b.n	80024aa <HAL_ADC_Init+0x1ba>
 80024a8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80024aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e00e      	b.n	80024d8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e5b      	ldrb	r3, [r3, #25]
 80024be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	3b01      	subs	r3, #1
 80024e8:	045b      	lsls	r3, r3, #17
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_ADC_Init+0x2bc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d115      	bne.n	8002542 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <HAL_ADC_Init+0x2c8>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	69b9      	ldr	r1, [r7, #24]
 8002526:	430b      	orrs	r3, r1
 8002528:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	e009      	b.n	8002556 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <HAL_ADC_Init+0x2cc>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	69b9      	ldr	r1, [r7, #24]
 8002552:	430b      	orrs	r3, r1
 8002554:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fe8c 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 8002560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff feae 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 800256c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 808e 	bne.w	8002692 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 808a 	bne.w	8002692 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_ADC_Init+0x2bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d11b      	bne.n	80025c0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e1b      	ldrb	r3, [r3, #24]
 800258c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002594:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e018      	b.n	80025ce <HAL_ADC_Init+0x2de>
 800259c:	24000000 	.word	0x24000000
 80025a0:	053e2d63 	.word	0x053e2d63
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40022100 	.word	0x40022100
 80025ac:	58026000 	.word	0x58026000
 80025b0:	40022300 	.word	0x40022300
 80025b4:	58026300 	.word	0x58026300
 80025b8:	fff04007 	.word	0xfff04007
 80025bc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
 80025c4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <HAL_ADC_Init+0x400>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	69b9      	ldr	r1, [r7, #24]
 80025de:	430b      	orrs	r3, r1
 80025e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d137      	bne.n	800265c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3f      	ldr	r2, [pc, #252]	@ (80026f4 <HAL_ADC_Init+0x404>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d116      	bne.n	800262a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_ADC_Init+0x408>)
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800261a:	430a      	orrs	r2, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	e020      	b.n	800266c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_ADC_Init+0x40c>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002638:	3a01      	subs	r2, #1
 800263a:	0411      	lsls	r1, r2, #16
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e007      	b.n	800266c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_ADC_Init+0x404>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d002      	beq.n	8002692 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 f90d 	bl	80038ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10c      	bne.n	80026b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	f023 010f 	bic.w	r1, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026b2:	e007      	b.n	80026c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020f 	bic.w	r2, r2, #15
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c8:	f023 0303 	bic.w	r3, r3, #3
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80026d4:	e007      	b.n	80026e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	@ 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	ffffbffc 	.word	0xffffbffc
 80026f4:	58026000 	.word	0x58026000
 80026f8:	fc00f81f 	.word	0xfc00f81f
 80026fc:	fc00f81e 	.word	0xfc00f81e

08002700 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5c      	ldr	r2, [pc, #368]	@ (8002880 <HAL_ADC_Start+0x180>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_Start+0x1c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5b      	ldr	r2, [pc, #364]	@ (8002884 <HAL_ADC_Start+0x184>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_Start+0x20>
 800271c:	4b5a      	ldr	r3, [pc, #360]	@ (8002888 <HAL_ADC_Start+0x188>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_Start+0x22>
 8002720:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_ADC_Start+0x18c>)
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fcc8 	bl	80020b8 <LL_ADC_GetMultimode>
 8002728:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fda2 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 809a 	bne.w	8002870 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Start+0x4a>
 8002746:	2302      	movs	r3, #2
 8002748:	e095      	b.n	8002876 <HAL_ADC_Start+0x176>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 ffc0 	bl	80036d8 <ADC_Enable>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8081 	bne.w	8002866 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002768:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <HAL_ADC_Start+0x190>)
 800276a:	4013      	ands	r3, r2
 800276c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <HAL_ADC_Start+0x184>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d002      	beq.n	8002784 <HAL_ADC_Start+0x84>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e000      	b.n	8002786 <HAL_ADC_Start+0x86>
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_ADC_Start+0x180>)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4293      	cmp	r3, r2
 800278c:	d002      	beq.n	8002794 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b2:	f023 0206 	bic.w	r2, r3, #6
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	665a      	str	r2, [r3, #100]	@ 0x64
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	221c      	movs	r2, #28
 80027c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002884 <HAL_ADC_Start+0x184>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d002      	beq.n	80027e2 <HAL_ADC_Start+0xe2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	e000      	b.n	80027e4 <HAL_ADC_Start+0xe4>
 80027e2:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_ADC_Start+0x180>)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d008      	beq.n	80027fe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d002      	beq.n	80027fe <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b09      	cmp	r3, #9
 80027fc:	d114      	bne.n	8002828 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002810:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002814:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd01 	bl	8002228 <LL_ADC_REG_StartConversion>
 8002826:	e025      	b.n	8002874 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_ADC_Start+0x184>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d002      	beq.n	8002844 <HAL_ADC_Start+0x144>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e000      	b.n	8002846 <HAL_ADC_Start+0x146>
 8002844:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_ADC_Start+0x180>)
 8002846:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00f      	beq.n	8002874 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002858:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800285c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
 8002864:	e006      	b.n	8002874 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800286e:	e001      	b.n	8002874 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40022100 	.word	0x40022100
 8002888:	40022300 	.word	0x40022300
 800288c:	58026300 	.word	0x58026300
 8002890:	fffff0fe 	.word	0xfffff0fe

08002894 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Stop+0x16>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e021      	b.n	80028ee <HAL_ADC_Stop+0x5a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028b2:	2103      	movs	r1, #3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fe53 	bl	8003560 <ADC_ConversionStop>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 ff91 	bl	80037ec <ADC_Disable>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028d8:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <HAL_ADC_Stop+0x64>)
 80028da:	4013      	ands	r3, r2
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	ffffeefe 	.word	0xffffeefe

080028fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a72      	ldr	r2, [pc, #456]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1d8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_ADC_PollForConversion+0x1e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a70      	ldr	r2, [pc, #448]	@ (8002ad8 <HAL_ADC_PollForConversion+0x1dc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_ADC_PollForConversion+0x22>
 800291a:	4b70      	ldr	r3, [pc, #448]	@ (8002adc <HAL_ADC_PollForConversion+0x1e0>)
 800291c:	e000      	b.n	8002920 <HAL_ADC_PollForConversion+0x24>
 800291e:	4b70      	ldr	r3, [pc, #448]	@ (8002ae0 <HAL_ADC_PollForConversion+0x1e4>)
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbc9 	bl	80020b8 <LL_ADC_GetMultimode>
 8002926:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d102      	bne.n	8002936 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002930:	2308      	movs	r3, #8
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	e037      	b.n	80029a6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d002      	beq.n	8002948 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b09      	cmp	r3, #9
 8002946:	d111      	bne.n	800296c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0b1      	b.n	8002aca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002966:	2304      	movs	r3, #4
 8002968:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800296a:	e01c      	b.n	80029a6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a58      	ldr	r2, [pc, #352]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1d8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_ADC_PollForConversion+0x84>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a57      	ldr	r2, [pc, #348]	@ (8002ad8 <HAL_ADC_PollForConversion+0x1dc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_ADC_PollForConversion+0x88>
 8002980:	4b56      	ldr	r3, [pc, #344]	@ (8002adc <HAL_ADC_PollForConversion+0x1e0>)
 8002982:	e000      	b.n	8002986 <HAL_ADC_PollForConversion+0x8a>
 8002984:	4b56      	ldr	r3, [pc, #344]	@ (8002ae0 <HAL_ADC_PollForConversion+0x1e4>)
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fba4 	bl	80020d4 <LL_ADC_GetMultiDMATransfer>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e093      	b.n	8002aca <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029a2:	2304      	movs	r3, #4
 80029a4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029a6:	f7ff f997 	bl	8001cd8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029ac:	e021      	b.n	80029f2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d01d      	beq.n	80029f2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029b6:	f7ff f98f 	bl	8001cd8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <HAL_ADC_PollForConversion+0xd0>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d112      	bne.n	80029f2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e06b      	b.n	8002aca <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0d6      	beq.n	80029ae <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff faa7 	bl	8001f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e5b      	ldrb	r3, [r3, #25]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d118      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d111      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_ADC_PollForConversion+0x1dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x16a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_PollForConversion+0x16c>
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1d8>)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d008      	beq.n	8002a82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d002      	beq.n	8002a82 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d104      	bne.n	8002a8c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e00c      	b.n	8002aa6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <HAL_ADC_PollForConversion+0x1dc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d002      	beq.n	8002a9c <HAL_ADC_PollForConversion+0x1a0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_PollForConversion+0x1a2>
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1d8>)
 8002a9e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d104      	bne.n	8002ab6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e008      	b.n	8002ac8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40022100 	.word	0x40022100
 8002adc:	40022300 	.word	0x40022300
 8002ae0:	58026300 	.word	0x58026300

08002ae4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b0b9      	sub	sp, #228	@ 0xe4
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b1a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4aab      	ldr	r2, [pc, #684]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002b22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x34>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	f000 bcfe 	b.w	8003530 <HAL_ADC_ConfigChannel+0xa30>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb99 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 84e2 	bne.w	8003512 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db38      	blt.n	8002bc8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a9e      	ldr	r2, [pc, #632]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d033      	beq.n	8002bc8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d108      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x7e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2201      	movs	r2, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	e01d      	b.n	8002bba <HAL_ADC_ConfigChannel+0xba>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e004      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	69d1      	ldr	r1, [r2, #28]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff f9d8 	bl	8001f8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fb4a 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fb6b 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 8002bf2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8270 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 826b 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f7ff f9e3 	bl	8001fe2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6c      	ldr	r2, [pc, #432]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c40:	e032      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c4e:	d10b      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x168>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	e01d      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x1a4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10b      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x18e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	e00a      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x1a4>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d048      	beq.n	8002d42 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6919      	ldr	r1, [r3, #16]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cc0:	f7ff f85e 	bl	8001d80 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a42      	ldr	r2, [pc, #264]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d119      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f7ff f8f6 	bl	8001ecc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6919      	ldr	r1, [r3, #16]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1f8>
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cf6:	e000      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x1fa>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff f8c4 	bl	8001e88 <LL_ADC_SetOffsetSaturation>
 8002d00:	e1ee      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x21a>
 8002d14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d18:	e000      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x21c>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f7ff f891 	bl	8001e44 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6919      	ldr	r1, [r3, #16]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7e1b      	ldrb	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x238>
 8002d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d36:	e000      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x23a>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff f868 	bl	8001e10 <LL_ADC_SetDataRightShift>
 8002d40:	e1ce      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 8181 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f845 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x27a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f83a 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	e01e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x2b8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f82f 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002d98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e004      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x2dc>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	e01e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x30e>
 8002dd0:	47ff0000 	.word	0x47ff0000
 8002dd4:	58026000 	.word	0x58026000
 8002dd8:	5c001000 	.word	0x5c001000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f878 	bl	8001f10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffdc 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x34c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ffd1 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x38a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe ffc6 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x3a2>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	e018      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x3d4>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d106      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f815 	bl	8001f10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff79 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x412>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff6e 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	e01e      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x450>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2102      	movs	r1, #2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe ff63 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e004      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x468>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	e014      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x492>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e004      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d106      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe ffb6 	bl	8001f10 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2103      	movs	r1, #3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe ff1a 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x4d0>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe ff0f 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	0e9b      	lsrs	r3, r3, #26
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	e017      	b.n	8003000 <HAL_ADC_ConfigChannel+0x500>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2103      	movs	r1, #3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe ff04 	bl	8001de4 <LL_ADC_GetOffsetChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002fec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x518>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	e011      	b.n	800303c <HAL_ADC_ConfigChannel+0x53c>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003028:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800302a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	429a      	cmp	r2, r3
 800303e:	d14f      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	2103      	movs	r1, #3
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe ff61 	bl	8001f10 <LL_ADC_SetOffsetState>
 800304e:	e047      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003072:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800307a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003096:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800309e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	069b      	lsls	r3, r3, #26
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	069b      	lsls	r3, r3, #26
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f879 	bl	80021dc <LL_ADC_IsEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 8219 	bne.w	8003524 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f7fe ff9a 	bl	8002038 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4aa1      	ldr	r2, [pc, #644]	@ (8003390 <HAL_ADC_ConfigChannel+0x890>)
 800310a:	4293      	cmp	r3, r2
 800310c:	f040 812e 	bne.w	800336c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x638>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b09      	cmp	r3, #9
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e019      	b.n	800316c <HAL_ADC_ConfigChannel+0x66c>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003148:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b09      	cmp	r3, #9
 8003164:	bf94      	ite	ls
 8003166:	2301      	movls	r3, #1
 8003168:	2300      	movhi	r3, #0
 800316a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316c:	2b00      	cmp	r3, #0
 800316e:	d079      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_ADC_ConfigChannel+0x68c>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	3301      	adds	r3, #1
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318a:	e015      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x6b8>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800319a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800319c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800319e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80031a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	069b      	lsls	r3, r3, #26
 80031b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x6d8>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	e017      	b.n	8003208 <HAL_ADC_ConfigChannel+0x708>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e003      	b.n	80031fc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80031f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x72e>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	e018      	b.n	8003260 <HAL_ADC_ConfigChannel+0x760>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003260:	430b      	orrs	r3, r1
 8003262:	e07e      	b.n	8003362 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x780>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	069b      	lsls	r3, r3, #26
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327e:	e015      	b.n	80032ac <HAL_ADC_ConfigChannel+0x7ac>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x7cc>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	e017      	b.n	80032fc <HAL_ADC_ConfigChannel+0x7fc>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
  return result;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	ea42 0103 	orr.w	r1, r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x828>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	3b1e      	subs	r3, #30
 8003320:	051b      	lsls	r3, r3, #20
 8003322:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003326:	e01b      	b.n	8003360 <HAL_ADC_ConfigChannel+0x860>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	60fb      	str	r3, [r7, #12]
  return result;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 021f 	and.w	r2, r3, #31
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	3b1e      	subs	r3, #30
 800335a:	051b      	lsls	r3, r3, #20
 800335c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003360:	430b      	orrs	r3, r1
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	4619      	mov	r1, r3
 8003368:	f7fe fe3b 	bl	8001fe2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f280 80d7 	bge.w	8003524 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a06      	ldr	r2, [pc, #24]	@ (8003394 <HAL_ADC_ConfigChannel+0x894>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_ADC_ConfigChannel+0x88a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_ADC_ConfigChannel+0x898>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10a      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x8a0>
 800338a:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_ADC_ConfigChannel+0x89c>)
 800338c:	e009      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x8a2>
 800338e:	bf00      	nop
 8003390:	47ff0000 	.word	0x47ff0000
 8003394:	40022000 	.word	0x40022000
 8003398:	40022100 	.word	0x40022100
 800339c:	40022300 	.word	0x40022300
 80033a0:	4b65      	ldr	r3, [pc, #404]	@ (8003538 <HAL_ADC_ConfigChannel+0xa38>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fcde 	bl	8001d64 <LL_ADC_GetCommonPathInternalCh>
 80033a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a62      	ldr	r2, [pc, #392]	@ (800353c <HAL_ADC_ConfigChannel+0xa3c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x8c0>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a61      	ldr	r2, [pc, #388]	@ (8003540 <HAL_ADC_ConfigChannel+0xa40>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10e      	bne.n	80033de <HAL_ADC_ConfigChannel+0x8de>
 80033c0:	485e      	ldr	r0, [pc, #376]	@ (800353c <HAL_ADC_ConfigChannel+0xa3c>)
 80033c2:	f7fe ff0b 	bl	80021dc <LL_ADC_IsEnabled>
 80033c6:	4604      	mov	r4, r0
 80033c8:	485d      	ldr	r0, [pc, #372]	@ (8003540 <HAL_ADC_ConfigChannel+0xa40>)
 80033ca:	f7fe ff07 	bl	80021dc <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4323      	orrs	r3, r4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e008      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x8f0>
 80033de:	4859      	ldr	r0, [pc, #356]	@ (8003544 <HAL_ADC_ConfigChannel+0xa44>)
 80033e0:	f7fe fefc 	bl	80021dc <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8084 	beq.w	80034fe <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a53      	ldr	r2, [pc, #332]	@ (8003548 <HAL_ADC_ConfigChannel+0xa48>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d132      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x966>
 8003400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d12c      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4c      	ldr	r2, [pc, #304]	@ (8003544 <HAL_ADC_ConfigChannel+0xa44>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f040 8086 	bne.w	8003524 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a47      	ldr	r2, [pc, #284]	@ (800353c <HAL_ADC_ConfigChannel+0xa3c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_ADC_ConfigChannel+0x92c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a46      	ldr	r2, [pc, #280]	@ (8003540 <HAL_ADC_ConfigChannel+0xa40>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x930>
 800342c:	4a47      	ldr	r2, [pc, #284]	@ (800354c <HAL_ADC_ConfigChannel+0xa4c>)
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x932>
 8003430:	4a41      	ldr	r2, [pc, #260]	@ (8003538 <HAL_ADC_ConfigChannel+0xa38>)
 8003432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003436:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe fc7e 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003442:	4b43      	ldr	r3, [pc, #268]	@ (8003550 <HAL_ADC_ConfigChannel+0xa50>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	4a42      	ldr	r2, [pc, #264]	@ (8003554 <HAL_ADC_ConfigChannel+0xa54>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003456:	e002      	b.n	800345e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003464:	e05e      	b.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3b      	ldr	r2, [pc, #236]	@ (8003558 <HAL_ADC_ConfigChannel+0xa58>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d120      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x9b2>
 8003470:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11a      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a30      	ldr	r2, [pc, #192]	@ (8003544 <HAL_ADC_ConfigChannel+0xa44>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d14e      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <HAL_ADC_ConfigChannel+0xa3c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_ADC_ConfigChannel+0x99a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2a      	ldr	r2, [pc, #168]	@ (8003540 <HAL_ADC_ConfigChannel+0xa40>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x99e>
 800349a:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <HAL_ADC_ConfigChannel+0xa4c>)
 800349c:	e000      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x9a0>
 800349e:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <HAL_ADC_ConfigChannel+0xa38>)
 80034a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f7fe fc47 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b0:	e038      	b.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a29      	ldr	r2, [pc, #164]	@ (800355c <HAL_ADC_ConfigChannel+0xa5c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d133      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
 80034bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d12d      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003544 <HAL_ADC_ConfigChannel+0xa44>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d128      	bne.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	@ (800353c <HAL_ADC_ConfigChannel+0xa3c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x9e6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_ADC_ConfigChannel+0xa40>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x9ea>
 80034e6:	4a19      	ldr	r2, [pc, #100]	@ (800354c <HAL_ADC_ConfigChannel+0xa4c>)
 80034e8:	e000      	b.n	80034ec <HAL_ADC_ConfigChannel+0x9ec>
 80034ea:	4a13      	ldr	r2, [pc, #76]	@ (8003538 <HAL_ADC_ConfigChannel+0xa38>)
 80034ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f7fe fc21 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
 80034fc:	e012      	b.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003510:	e008      	b.n	8003524 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800352c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003530:	4618      	mov	r0, r3
 8003532:	37e4      	adds	r7, #228	@ 0xe4
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	58026300 	.word	0x58026300
 800353c:	40022000 	.word	0x40022000
 8003540:	40022100 	.word	0x40022100
 8003544:	58026000 	.word	0x58026000
 8003548:	c7520000 	.word	0xc7520000
 800354c:	40022300 	.word	0x40022300
 8003550:	24000000 	.word	0x24000000
 8003554:	053e2d63 	.word	0x053e2d63
 8003558:	c3210000 	.word	0xc3210000
 800355c:	cb840000 	.word	0xcb840000

08003560 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fe7e 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 800357c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fea0 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 8003588:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8098 	beq.w	80036c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7e5b      	ldrb	r3, [r3, #25]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d126      	bne.n	80035fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7e1b      	ldrb	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d122      	bne.n	80035fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ba:	e014      	b.n	80035e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4a45      	ldr	r2, [pc, #276]	@ (80036d4 <ADC_ConversionStop+0x174>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d90d      	bls.n	80035e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e074      	b.n	80036ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d1e3      	bne.n	80035bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2240      	movs	r2, #64	@ 0x40
 80035fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d014      	beq.n	800362c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fe36 	bl	8002278 <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fdf3 	bl	8002202 <LL_ADC_IsDisableOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fe12 	bl	8002250 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d014      	beq.n	800365c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fe46 	bl	80022c8 <LL_ADC_INJ_IsConversionOngoing>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fddb 	bl	8002202 <LL_ADC_IsDisableOngoing>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe22 	bl	80022a0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <ADC_ConversionStop+0x10e>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d105      	bne.n	8003674 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003668:	230c      	movs	r3, #12
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	e005      	b.n	800367a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800366e:	2308      	movs	r3, #8
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e002      	b.n	800367a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003674:	2304      	movs	r3, #4
 8003676:	617b      	str	r3, [r7, #20]
        break;
 8003678:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800367a:	f7fe fb2d 	bl	8001cd8 <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003680:	e01b      	b.n	80036ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003682:	f7fe fb29 	bl	8001cd8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d914      	bls.n	80036ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1dc      	bne.n	8003682 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	000cdbff 	.word	0x000cdbff

080036d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe fd79 	bl	80021dc <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d16e      	bne.n	80037ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	4b38      	ldr	r3, [pc, #224]	@ (80037d8 <ADC_Enable+0x100>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e05a      	b.n	80037d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fd34 	bl	800218c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003724:	f7fe fad8 	bl	8001cd8 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <ADC_Enable+0x104>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <ADC_Enable+0x66>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a29      	ldr	r2, [pc, #164]	@ (80037e0 <ADC_Enable+0x108>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <ADC_Enable+0x6a>
 800373e:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <ADC_Enable+0x10c>)
 8003740:	e000      	b.n	8003744 <ADC_Enable+0x6c>
 8003742:	4b29      	ldr	r3, [pc, #164]	@ (80037e8 <ADC_Enable+0x110>)
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fcb7 	bl	80020b8 <LL_ADC_GetMultimode>
 800374a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a23      	ldr	r2, [pc, #140]	@ (80037e0 <ADC_Enable+0x108>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d002      	beq.n	800375c <ADC_Enable+0x84>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	e000      	b.n	800375e <ADC_Enable+0x86>
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <ADC_Enable+0x104>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4293      	cmp	r3, r2
 8003764:	d02c      	beq.n	80037c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d130      	bne.n	80037ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376c:	e028      	b.n	80037c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fd32 	bl	80021dc <LL_ADC_IsEnabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd02 	bl	800218c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003788:	f7fe faa6 	bl	8001cd8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d914      	bls.n	80037c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00d      	beq.n	80037c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d1cf      	bne.n	800376e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	8000003f 	.word	0x8000003f
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40022100 	.word	0x40022100
 80037e4:	40022300 	.word	0x40022300
 80037e8:	58026300 	.word	0x58026300

080037ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fd02 	bl	8002202 <LL_ADC_IsDisableOngoing>
 80037fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fce9 	bl	80021dc <LL_ADC_IsEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d047      	beq.n	80038a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d144      	bne.n	80038a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030d 	and.w	r3, r3, #13
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fcc3 	bl	80021b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2203      	movs	r2, #3
 8003834:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003836:	f7fe fa4f 	bl	8001cd8 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800383c:	e029      	b.n	8003892 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	f043 0210 	orr.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e023      	b.n	80038a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800385a:	f7fe fa3d 	bl	8001cd8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d914      	bls.n	8003892 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	f043 0210 	orr.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e007      	b.n	80038a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1dc      	bne.n	800385a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6c      	ldr	r2, [pc, #432]	@ (8003a6c <ADC_ConfigureBoostMode+0x1c0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <ADC_ConfigureBoostMode+0x1c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003a70 <ADC_ConfigureBoostMode+0x1c4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d109      	bne.n	80038dc <ADC_ConfigureBoostMode+0x30>
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <ADC_ConfigureBoostMode+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e008      	b.n	80038ee <ADC_ConfigureBoostMode+0x42>
 80038dc:	4b66      	ldr	r3, [pc, #408]	@ (8003a78 <ADC_ConfigureBoostMode+0x1cc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01c      	beq.n	800392c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038f2:	f003 f801 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 80038f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003900:	d010      	beq.n	8003924 <ADC_ConfigureBoostMode+0x78>
 8003902:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003906:	d873      	bhi.n	80039f0 <ADC_ConfigureBoostMode+0x144>
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390c:	d002      	beq.n	8003914 <ADC_ConfigureBoostMode+0x68>
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003912:	d16d      	bne.n	80039f0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	60fb      	str	r3, [r7, #12]
        break;
 8003922:	e068      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	60fb      	str	r3, [r7, #12]
        break;
 800392a:	e064      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800392c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	f004 fa1e 	bl	8007d74 <HAL_RCCEx_GetPeriphCLKFreq>
 8003938:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003942:	d051      	beq.n	80039e8 <ADC_ConfigureBoostMode+0x13c>
 8003944:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003948:	d854      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 800394a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800394e:	d047      	beq.n	80039e0 <ADC_ConfigureBoostMode+0x134>
 8003950:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003954:	d84e      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 8003956:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800395a:	d03d      	beq.n	80039d8 <ADC_ConfigureBoostMode+0x12c>
 800395c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003960:	d848      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 8003962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003966:	d033      	beq.n	80039d0 <ADC_ConfigureBoostMode+0x124>
 8003968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800396c:	d842      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 800396e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003972:	d029      	beq.n	80039c8 <ADC_ConfigureBoostMode+0x11c>
 8003974:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003978:	d83c      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 800397a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800397e:	d01a      	beq.n	80039b6 <ADC_ConfigureBoostMode+0x10a>
 8003980:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003984:	d836      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 8003986:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800398a:	d014      	beq.n	80039b6 <ADC_ConfigureBoostMode+0x10a>
 800398c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003990:	d830      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003996:	d00e      	beq.n	80039b6 <ADC_ConfigureBoostMode+0x10a>
 8003998:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800399c:	d82a      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 800399e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039a2:	d008      	beq.n	80039b6 <ADC_ConfigureBoostMode+0x10a>
 80039a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039a8:	d824      	bhi.n	80039f4 <ADC_ConfigureBoostMode+0x148>
 80039aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ae:	d002      	beq.n	80039b6 <ADC_ConfigureBoostMode+0x10a>
 80039b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039b4:	d11e      	bne.n	80039f4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0c9b      	lsrs	r3, r3, #18
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	60fb      	str	r3, [r7, #12]
        break;
 80039c6:	e016      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
        break;
 80039ce:	e012      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	60fb      	str	r3, [r7, #12]
        break;
 80039d6:	e00e      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	60fb      	str	r3, [r7, #12]
        break;
 80039de:	e00a      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	09db      	lsrs	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
        break;
 80039e6:	e006      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	60fb      	str	r3, [r7, #12]
        break;
 80039ee:	e002      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80039f4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <ADC_ConfigureBoostMode+0x1d0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d808      	bhi.n	8003a16 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a14:	e025      	b.n	8003a62 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <ADC_ConfigureBoostMode+0x1d4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d80a      	bhi.n	8003a34 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a30:	609a      	str	r2, [r3, #8]
}
 8003a32:	e016      	b.n	8003a62 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <ADC_ConfigureBoostMode+0x1d8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d80a      	bhi.n	8003a52 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	e007      	b.n	8003a62 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40022100 	.word	0x40022100
 8003a74:	40022300 	.word	0x40022300
 8003a78:	58026300 	.word	0x58026300
 8003a7c:	005f5e10 	.word	0x005f5e10
 8003a80:	00bebc20 	.word	0x00bebc20
 8003a84:	017d7840 	.word	0x017d7840

08003a88 <LL_ADC_IsEnabled>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <LL_ADC_IsEnabled+0x18>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <LL_ADC_IsEnabled+0x1a>
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_ADC_REG_IsConversionOngoing>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b0a3      	sub	sp, #140	@ 0x8c
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0c1      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5e      	ldr	r2, [pc, #376]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d102      	bne.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b0c:	4b5d      	ldr	r3, [pc, #372]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e001      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0a0      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ffb9 	bl	8003aae <LL_ADC_REG_IsConversionOngoing>
 8003b3c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ffb2 	bl	8003aae <LL_ADC_REG_IsConversionOngoing>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 8081 	bne.w	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d17c      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a48      	ldr	r2, [pc, #288]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a46      	ldr	r2, [pc, #280]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003b6e:	4b46      	ldr	r3, [pc, #280]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b70:	e000      	b.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003b72:	4b46      	ldr	r3, [pc, #280]	@ (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b74:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d039      	beq.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3a      	ldr	r2, [pc, #232]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a39      	ldr	r2, [pc, #228]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003ba4:	4836      	ldr	r0, [pc, #216]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ba6:	f7ff ff6f 	bl	8003a88 <LL_ADC_IsEnabled>
 8003baa:	4604      	mov	r4, r0
 8003bac:	4835      	ldr	r0, [pc, #212]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bae:	f7ff ff6b 	bl	8003a88 <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4323      	orrs	r3, r4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e008      	b.n	8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003bc2:	4833      	ldr	r0, [pc, #204]	@ (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003bc4:	f7ff ff60 	bl	8003a88 <LL_ADC_IsEnabled>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d047      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6811      	ldr	r1, [r2, #0]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf0:	e03a      	b.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10e      	bne.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c12:	481b      	ldr	r0, [pc, #108]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c14:	f7ff ff38 	bl	8003a88 <LL_ADC_IsEnabled>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c1c:	f7ff ff34 	bl	8003a88 <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4323      	orrs	r3, r4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e008      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c30:	4817      	ldr	r0, [pc, #92]	@ (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c32:	f7ff ff29 	bl	8003a88 <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d010      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c52:	e009      	b.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003c66:	e000      	b.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003c72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	378c      	adds	r7, #140	@ 0x8c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40022100 	.word	0x40022100
 8003c88:	40022300 	.word	0x40022300
 8003c8c:	58026300 	.word	0x58026300
 8003c90:	58026000 	.word	0x58026000
 8003c94:	fffff0e0 	.word	0xfffff0e0

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	05fa0000 	.word	0x05fa0000

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	@ (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	@ (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	@ (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	@ 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff4c 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e16:	f7ff ff63 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	6978      	ldr	r0, [r7, #20]
 8003e22:	f7ff ffb3 	bl	8003d8c <NVIC_EncodePriority>
 8003e26:	4602      	mov	r2, r0
 8003e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ff82 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff56 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0e3      	b.n	8004032 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2223      	movs	r2, #35	@ 0x23
 8003e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f008 f81b 	bl	800beb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	4b6e      	ldr	r3, [pc, #440]	@ (800403c <HAL_ETH_Init+0x1e4>)
 8003e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e88:	4a6c      	ldr	r2, [pc, #432]	@ (800403c <HAL_ETH_Init+0x1e4>)
 8003e8a:	f043 0302 	orr.w	r3, r3, #2
 8003e8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_ETH_Init+0x1e4>)
 8003e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7a1b      	ldrb	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fd ff21 	bl	8001cf0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003eae:	e003      	b.n	8003eb8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003eb0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003eb4:	f7fd ff1c 	bl	8001cf0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003eb8:	4b61      	ldr	r3, [pc, #388]	@ (8004040 <HAL_ETH_Init+0x1e8>)
 8003eba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ed2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed4:	f7fd ff00 	bl	8001cd8 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003eda:	e011      	b.n	8003f00 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003edc:	f7fd fefc 	bl	8001cd8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003eea:	d909      	bls.n	8003f00 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	22e0      	movs	r2, #224	@ 0xe0
 8003ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e098      	b.n	8004032 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e4      	bne.n	8003edc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fe0a 	bl	8004b2c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f18:	f002 fcee 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a49      	ldr	r2, [pc, #292]	@ (8004044 <HAL_ETH_Init+0x1ec>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	0c9a      	lsrs	r2, r3, #18
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3a01      	subs	r2, #1
 8003f2c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fffb 	bl	8004f2c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f42:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f52:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	22e0      	movs	r2, #224	@ 0xe0
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e05d      	b.n	8004032 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003f82:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <HAL_ETH_Init+0x1f0>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	0051      	lsls	r1, r2, #1
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f96:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 f863 	bl	8005066 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 f8a9 	bl	80050f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	3305      	adds	r3, #5
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	021a      	lsls	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	3303      	adds	r3, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	061a      	lsls	r2, r3, #24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fe4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ff2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ff4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_ETH_Init+0x1f4>)
 8004006:	430b      	orrs	r3, r1
 8004008:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_ETH_Init+0x1f8>)
 800401a:	430b      	orrs	r3, r1
 800401c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2210      	movs	r2, #16
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	58000400 	.word	0x58000400
 8004044:	431bde83 	.word	0x431bde83
 8004048:	ffff8001 	.word	0xffff8001
 800404c:	0c020060 	.word	0x0c020060
 8004050:	0c20c000 	.word	0x0c20c000

08004054 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004062:	2b10      	cmp	r3, #16
 8004064:	d165      	bne.n	8004132 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2223      	movs	r2, #35	@ 0x23
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9e4 	bl	8004448 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004088:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004098:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040b4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80040cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040d0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0202 	orr.w	r2, r2, #2
 80040f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004110:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 800411c:	430b      	orrs	r3, r1
 800411e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004122:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2223      	movs	r2, #35	@ 0x23
 800412a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414a:	2b23      	cmp	r3, #35	@ 0x23
 800414c:	d165      	bne.n	800421a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2223      	movs	r2, #35	@ 0x23
 8004152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415e:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <HAL_ETH_Stop_IT+0xec>)
 8004168:	400b      	ands	r3, r1
 800416a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800416e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800417a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800418a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004196:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041a6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0202 	bic.w	r2, r2, #2
 80041dc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e00e      	b.n	8004202 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	3212      	adds	r2, #18
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3301      	adds	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d9ed      	bls.n	80041e4 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2210      	movs	r2, #16
 8004212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	ffff2f3e 	.word	0xffff2f3e

0800422c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e03a      	b.n	80042c6 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004256:	2b23      	cmp	r3, #35	@ 0x23
 8004258:	d134      	bne.n	80042c4 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004262:	2201      	movs	r2, #1
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 ffa4 	bl	80051b4 <ETH_Prepare_Tx_Descriptors>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e01f      	b.n	80042c6 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004286:	f3bf 8f4f 	dsb	sy
}
 800428a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	2b03      	cmp	r3, #3
 800429c:	d904      	bls.n	80042a8 <HAL_ETH_Transmit_IT+0x7c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	1f1a      	subs	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3106      	adds	r1, #6
 80042b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042bc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a2      	b.n	8004440 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004300:	2b23      	cmp	r3, #35	@ 0x23
 8004302:	d001      	beq.n	8004308 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e09b      	b.n	8004440 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	3212      	adds	r2, #18
 8004314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004318:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431e:	f1c3 0304 	rsb	r3, r3, #4
 8004322:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004324:	e064      	b.n	80043f0 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_ETH_ReadData+0x88>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03a      	beq.n	80043cc <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f007 ff5e 	bl	800c26c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	3301      	adds	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d902      	bls.n	80043de <HAL_ETH_ReadData+0x110>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3b04      	subs	r3, #4
 80043dc:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	3212      	adds	r2, #18
 80043e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3301      	adds	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db06      	blt.n	8004406 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d202      	bcs.n	8004406 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d08f      	beq.n	8004326 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f814 	bl	8004448 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800445c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	3212      	adds	r2, #18
 8004464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004468:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004470:	e038      	b.n	80044e4 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d112      	bne.n	80044a0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f007 fec4 	bl	800c20c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	74fb      	strb	r3, [r7, #19]
 800448e:	e007      	b.n	80044a0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	461a      	mov	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	461a      	mov	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01e      	beq.n	80044e4 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	e003      	b.n	80044c0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80044be:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d902      	bls.n	80044d2 <ETH_UpdateDescriptor+0x8a>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3b04      	subs	r3, #4
 80044d0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	3212      	adds	r2, #18
 80044d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044dc:	617b      	str	r3, [r7, #20]
      desccount--;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <ETH_UpdateDescriptor+0xa8>
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1c0      	bne.n	8004472 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d01b      	beq.n	8004532 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004504:	f3bf 8f5f 	dmb	sy
}
 8004508:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6919      	ldr	r1, [r3, #16]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	18ca      	adds	r2, r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004522:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3318      	adds	r3, #24
 8004546:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004558:	e047      	b.n	80045ea <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800455a:	2301      	movs	r3, #1
 800455c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	3b01      	subs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	3304      	adds	r3, #4
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	3301      	adds	r3, #1
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d902      	bls.n	8004586 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	3b04      	subs	r3, #4
 8004584:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02c      	beq.n	80045ea <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68d9      	ldr	r1, [r3, #12]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	db1f      	blt.n	80045e6 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3304      	adds	r3, #4
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f007 fec2 	bl	800c33c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3304      	adds	r3, #4
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	2200      	movs	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3301      	adds	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d902      	bls.n	80045d8 <HAL_ETH_ReleaseTxPacket+0x9e>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045e4:	e001      	b.n	80045ea <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_ETH_ReleaseTxPacket+0xbc>
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1b1      	bne.n	800455a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e03e      	b.n	80046a0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800462a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	055b      	lsls	r3, r3, #21
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f043 030c 	orr.w	r3, r3, #12
 800464e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004662:	f7fd fb39 	bl	8001cd8 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004668:	e009      	b.n	800467e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800466a:	f7fd fb35 	bl	8001cd8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004678:	d901      	bls.n	800467e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e010      	b.n	80046a0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ed      	bne.n	800466a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e03c      	b.n	8004744 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046d2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	055b      	lsls	r3, r3, #21
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 030c 	bic.w	r3, r3, #12
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b29a      	uxth	r2, r3
 8004708:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_ETH_WritePHYRegister+0xa4>)
 800470a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800470e:	4a0f      	ldr	r2, [pc, #60]	@ (800474c <HAL_ETH_WritePHYRegister+0xa4>)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004716:	f7fd fadf 	bl	8001cd8 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800471c:	e009      	b.n	8004732 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800471e:	f7fd fadb 	bl	8001cd8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800472c:	d901      	bls.n	8004732 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e008      	b.n	8004744 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ed      	bne.n	800471e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40028000 	.word	0x40028000

08004750 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e1c3      	b.n	8004aec <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 020c 	and.w	r2, r3, #12
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80047f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80048de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf14      	ite	ne
 800490e:	2301      	movne	r3, #1
 8004910:	2300      	moveq	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0e5b      	lsrs	r3, r3, #25
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004a78:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004a88:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf14      	ite	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	2300      	moveq	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e00b      	b.n	8004b24 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d105      	bne.n	8004b22 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f865 	bl	8004be8 <ETH_SetMACConfig>

    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b46:	f001 fed7 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8004b4a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d804      	bhi.n	8004b5e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e022      	b.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_ETH_SetMDIOClockRange+0x90>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d204      	bcs.n	8004b70 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e019      	b.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4a13      	ldr	r2, [pc, #76]	@ (8004bc0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d915      	bls.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a12      	ldr	r2, [pc, #72]	@ (8004bc4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d804      	bhi.n	8004b8a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e00c      	b.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d804      	bhi.n	8004b9c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e003      	b.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	02160ebf 	.word	0x02160ebf
 8004bbc:	03938700 	.word	0x03938700
 8004bc0:	05f5e0ff 	.word	0x05f5e0ff
 8004bc4:	08f0d17f 	.word	0x08f0d17f
 8004bc8:	0ee6b27f 	.word	0x0ee6b27f

08004bcc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004bfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	7b1b      	ldrb	r3, [r3, #12]
 8004c08:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	7b5b      	ldrb	r3, [r3, #13]
 8004c10:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	7b9b      	ldrb	r3, [r3, #14]
 8004c18:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	7bdb      	ldrb	r3, [r3, #15]
 8004c20:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	7c12      	ldrb	r2, [r2, #16]
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d102      	bne.n	8004c32 <ETH_SetMACConfig+0x4a>
 8004c2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c30:	e000      	b.n	8004c34 <ETH_SetMACConfig+0x4c>
 8004c32:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	7c52      	ldrb	r2, [r2, #17]
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	d102      	bne.n	8004c44 <ETH_SetMACConfig+0x5c>
 8004c3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c42:	e000      	b.n	8004c46 <ETH_SetMACConfig+0x5e>
 8004c44:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	7c9b      	ldrb	r3, [r3, #18]
 8004c4c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c4e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c54:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	7f1b      	ldrb	r3, [r3, #28]
 8004c60:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004c62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	7f5b      	ldrb	r3, [r3, #29]
 8004c68:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	7f92      	ldrb	r2, [r2, #30]
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	d102      	bne.n	8004c7a <ETH_SetMACConfig+0x92>
 8004c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c78:	e000      	b.n	8004c7c <ETH_SetMACConfig+0x94>
 8004c7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	7fdb      	ldrb	r3, [r3, #31]
 8004c82:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004c84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d102      	bne.n	8004c96 <ETH_SetMACConfig+0xae>
 8004c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c94:	e000      	b.n	8004c98 <ETH_SetMACConfig+0xb0>
 8004c96:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004c98:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004ca8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b56      	ldr	r3, [pc, #344]	@ (8004e14 <ETH_SetMACConfig+0x22c>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cd2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004cd4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cdc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ce6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ce8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	d102      	bne.n	8004cfa <ETH_SetMACConfig+0x112>
 8004cf4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004cf8:	e000      	b.n	8004cfc <ETH_SetMACConfig+0x114>
 8004cfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004cfc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b42      	ldr	r3, [pc, #264]	@ (8004e18 <ETH_SetMACConfig+0x230>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d20:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	4b3a      	ldr	r3, [pc, #232]	@ (8004e1c <ETH_SetMACConfig+0x234>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d44:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d4a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004d52:	2a00      	cmp	r2, #0
 8004d54:	d101      	bne.n	8004d5a <ETH_SetMACConfig+0x172>
 8004d56:	2280      	movs	r2, #128	@ 0x80
 8004d58:	e000      	b.n	8004d5c <ETH_SetMACConfig+0x174>
 8004d5a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004d5c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d62:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d6e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004d72:	4013      	ands	r3, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004d84:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004d8c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9a:	f023 0103 	bic.w	r1, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004db2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d101      	bne.n	8004dd6 <ETH_SetMACConfig+0x1ee>
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	e000      	b.n	8004dd8 <ETH_SetMACConfig+0x1f0>
 8004dd6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004dd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004de0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004dea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004df8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	00048083 	.word	0x00048083
 8004e18:	c0f88000 	.word	0xc0f88000
 8004e1c:	fffffef0 	.word	0xfffffef0

08004e20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b38      	ldr	r3, [pc, #224]	@ (8004f18 <ETH_SetDMAConfig+0xf8>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	6811      	ldr	r1, [r2, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e46:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	791b      	ldrb	r3, [r3, #4]
 8004e4c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e52:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	7b1b      	ldrb	r3, [r3, #12]
 8004e58:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	4b2c      	ldr	r3, [pc, #176]	@ (8004f1c <ETH_SetDMAConfig+0xfc>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	430b      	orrs	r3, r1
 8004e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e78:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	7b5b      	ldrb	r3, [r3, #13]
 8004e7e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e90:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004e94:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <ETH_SetDMAConfig+0x100>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ea4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	7d1b      	ldrb	r3, [r3, #20]
 8004eb0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004eb2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	7f5b      	ldrb	r3, [r3, #29]
 8004eb8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004eca:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <ETH_SetDMAConfig+0x104>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004eda:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	7f1b      	ldrb	r3, [r3, #28]
 8004ee2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <ETH_SetDMAConfig+0x108>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	430b      	orrs	r3, r1
 8004f04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f08:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	ffff87fd 	.word	0xffff87fd
 8004f1c:	ffff2ffe 	.word	0xffff2ffe
 8004f20:	fffec000 	.word	0xfffec000
 8004f24:	ffc0efef 	.word	0xffc0efef
 8004f28:	7fc0ffff 	.word	0x7fc0ffff

08004f2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b0a4      	sub	sp, #144	@ 0x90
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004f84:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004f88:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004f90:	2300      	movs	r3, #0
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004fd6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004fdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fe0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005006:	2300      	movs	r3, #0
 8005008:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fde6 	bl	8004be8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800501c:	2301      	movs	r3, #1
 800501e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800502e:	2300      	movs	r3, #0
 8005030:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005032:	2300      	movs	r3, #0
 8005034:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005036:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800503a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800503c:	2300      	movs	r3, #0
 800503e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005040:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005044:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800504c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fee1 	bl	8004e20 <ETH_SetDMAConfig>
}
 800505e:	bf00      	nop
 8005060:	3790      	adds	r7, #144	@ 0x90
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e01d      	b.n	80050b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68d9      	ldr	r1, [r3, #12]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	440b      	add	r3, r1
 8005084:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	3206      	adds	r2, #6
 80050a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d9de      	bls.n	8005074 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c4:	461a      	mov	r2, r3
 80050c6:	2303      	movs	r3, #3
 80050c8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e023      	b.n	800514e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6919      	ldr	r1, [r3, #16]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	440b      	add	r3, r1
 8005116:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2200      	movs	r2, #0
 800513a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	3212      	adds	r2, #18
 8005144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d9d8      	bls.n	8005106 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517a:	461a      	mov	r2, r3
 800517c:	2303      	movs	r3, #3
 800517e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800518e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b091      	sub	sp, #68	@ 0x44
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3318      	adds	r3, #24
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051de:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80051ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f6:	d007      	beq.n	8005208 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80051f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fc:	3304      	adds	r3, #4
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005208:	2302      	movs	r3, #2
 800520a:	e266      	b.n	80056da <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d044      	beq.n	80052a2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	4b75      	ldr	r3, [pc, #468]	@ (80053f4 <ETH_Prepare_Tx_Descriptors+0x240>)
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005224:	431a      	orrs	r2, r3
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005244:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d027      	beq.n	80052a2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	b29a      	uxth	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	431a      	orrs	r2, r3
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005290:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80052a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	4b51      	ldr	r3, [pc, #324]	@ (80053f8 <ETH_Prepare_Tx_Descriptors+0x244>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	6992      	ldr	r2, [r2, #24]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d036      	beq.n	8005352 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80052f0:	f3bf 8f5f 	dmb	sy
}
 80052f4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005304:	3301      	adds	r3, #1
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530a:	2b03      	cmp	r3, #3
 800530c:	d902      	bls.n	8005314 <ETH_Prepare_Tx_Descriptors+0x160>
 800530e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005310:	3b04      	subs	r3, #4
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	3301      	adds	r3, #1
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005330:	d10f      	bne.n	8005352 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800533c:	f3bf 8f5f 	dmb	sy
}
 8005340:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800534e:	2302      	movs	r3, #2
 8005350:	e1c3      	b.n	80056da <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005354:	3301      	adds	r3, #1
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005368:	4013      	ands	r3, r2
 800536a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536c:	6852      	ldr	r2, [r2, #4]
 800536e:	431a      	orrs	r2, r3
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d012      	beq.n	80053a2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <ETH_Prepare_Tx_Descriptors+0x248>)
 8005392:	4013      	ands	r3, r2
 8005394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005396:	6852      	ldr	r2, [r2, #4]
 8005398:	0412      	lsls	r2, r2, #16
 800539a:	431a      	orrs	r2, r3
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	e008      	b.n	80053b4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <ETH_Prepare_Tx_Descriptors+0x248>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d021      	beq.n	8005404 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	04db      	lsls	r3, r3, #19
 80053ce:	431a      	orrs	r2, r3
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	69d2      	ldr	r2, [r2, #28]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e02e      	b.n	8005452 <ETH_Prepare_Tx_Descriptors+0x29e>
 80053f4:	ffff0000 	.word	0xffff0000
 80053f8:	ffffc000 	.word	0xffffc000
 80053fc:	c000ffff 	.word	0xc000ffff
 8005400:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <ETH_Prepare_Tx_Descriptors+0x444>)
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	431a      	orrs	r2, r3
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	431a      	orrs	r2, r3
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	431a      	orrs	r2, r3
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005488:	f3bf 8f5f 	dmb	sy
}
 800548c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80da 	beq.w	800565c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054ba:	e0cf      	b.n	800565c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80054c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ca:	3301      	adds	r3, #1
 80054cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d902      	bls.n	80054da <ETH_Prepare_Tx_Descriptors+0x326>
 80054d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d6:	3b04      	subs	r3, #4
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054fc:	d007      	beq.n	800550e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80054fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005502:	3304      	adds	r3, #4
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d029      	beq.n	8005562 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800551c:	2300      	movs	r3, #0
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005520:	e019      	b.n	8005556 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005522:	f3bf 8f5f 	dmb	sy
}
 8005526:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005536:	3301      	adds	r3, #1
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800553a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553c:	2b03      	cmp	r3, #3
 800553e:	d902      	bls.n	8005546 <ETH_Prepare_Tx_Descriptors+0x392>
 8005540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005542:	3b04      	subs	r3, #4
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	3301      	adds	r3, #1
 8005554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005556:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	429a      	cmp	r2, r3
 800555c:	d3e1      	bcc.n	8005522 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800555e:	2302      	movs	r3, #2
 8005560:	e0bb      	b.n	80056da <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	3301      	adds	r3, #1
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	4b1f      	ldr	r3, [pc, #124]	@ (80055fc <ETH_Prepare_Tx_Descriptors+0x448>)
 800557e:	4013      	ands	r3, r2
 8005580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005582:	6852      	ldr	r2, [r2, #4]
 8005584:	431a      	orrs	r2, r3
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d012      	beq.n	80055b8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	4b16      	ldr	r3, [pc, #88]	@ (8005600 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ac:	6852      	ldr	r2, [r2, #4]
 80055ae:	0412      	lsls	r2, r2, #16
 80055b0:	431a      	orrs	r2, r3
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	609a      	str	r2, [r3, #8]
 80055b6:	e008      	b.n	80055ca <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d018      	beq.n	8005608 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <ETH_Prepare_Tx_Descriptors+0x450>)
 80055dc:	4013      	ands	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	69d2      	ldr	r2, [r2, #28]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	e020      	b.n	8005638 <ETH_Prepare_Tx_Descriptors+0x484>
 80055f6:	bf00      	nop
 80055f8:	ffff8000 	.word	0xffff8000
 80055fc:	ffffc000 	.word	0xffffc000
 8005600:	c000ffff 	.word	0xc000ffff
 8005604:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b36      	ldr	r3, [pc, #216]	@ (80056e8 <ETH_Prepare_Tx_Descriptors+0x534>)
 800560e:	4013      	ands	r3, r2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	431a      	orrs	r2, r3
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	431a      	orrs	r2, r3
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	3301      	adds	r3, #1
 800563c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800563e:	f3bf 8f5f 	dmb	sy
}
 8005642:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f47f af2b 	bne.w	80054bc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	e005      	b.n	8005686 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	3304      	adds	r3, #4
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ac:	613b      	str	r3, [r7, #16]
  return(result);
 80056ae:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	4413      	add	r3, r2
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f383 8810 	msr	PRIMASK, r3
}
 80056d6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3744      	adds	r7, #68	@ 0x44
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	ffff8000 	.word	0xffff8000

080056ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	@ 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056fa:	4b86      	ldr	r3, [pc, #536]	@ (8005914 <HAL_GPIO_Init+0x228>)
 80056fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056fe:	e18c      	b.n	8005a1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	4013      	ands	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 817e 	beq.w	8005a14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d005      	beq.n	8005730 <HAL_GPIO_Init+0x44>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d130      	bne.n	8005792 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005766:	2201      	movs	r2, #1
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0201 	and.w	r2, r3, #1
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4313      	orrs	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d017      	beq.n	80057ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2203      	movs	r2, #3
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d123      	bne.n	8005822 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	08da      	lsrs	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3208      	adds	r2, #8
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	08da      	lsrs	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3208      	adds	r2, #8
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0203 	and.w	r2, r3, #3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80d8 	beq.w	8005a14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005864:	4b2c      	ldr	r3, [pc, #176]	@ (8005918 <HAL_GPIO_Init+0x22c>)
 8005866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800586a:	4a2b      	ldr	r2, [pc, #172]	@ (8005918 <HAL_GPIO_Init+0x22c>)
 800586c:	f043 0302 	orr.w	r3, r3, #2
 8005870:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005874:	4b28      	ldr	r3, [pc, #160]	@ (8005918 <HAL_GPIO_Init+0x22c>)
 8005876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005882:	4a26      	ldr	r2, [pc, #152]	@ (800591c <HAL_GPIO_Init+0x230>)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	3302      	adds	r3, #2
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <HAL_GPIO_Init+0x234>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d04a      	beq.n	8005944 <HAL_GPIO_Init+0x258>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <HAL_GPIO_Init+0x238>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02b      	beq.n	800590e <HAL_GPIO_Init+0x222>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_GPIO_Init+0x23c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d025      	beq.n	800590a <HAL_GPIO_Init+0x21e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_GPIO_Init+0x240>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01f      	beq.n	8005906 <HAL_GPIO_Init+0x21a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_GPIO_Init+0x244>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d019      	beq.n	8005902 <HAL_GPIO_Init+0x216>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a18      	ldr	r2, [pc, #96]	@ (8005934 <HAL_GPIO_Init+0x248>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_GPIO_Init+0x212>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a17      	ldr	r2, [pc, #92]	@ (8005938 <HAL_GPIO_Init+0x24c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00d      	beq.n	80058fa <HAL_GPIO_Init+0x20e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a16      	ldr	r2, [pc, #88]	@ (800593c <HAL_GPIO_Init+0x250>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <HAL_GPIO_Init+0x20a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <HAL_GPIO_Init+0x254>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d101      	bne.n	80058f2 <HAL_GPIO_Init+0x206>
 80058ee:	2309      	movs	r3, #9
 80058f0:	e029      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 80058f2:	230a      	movs	r3, #10
 80058f4:	e027      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 80058f6:	2307      	movs	r3, #7
 80058f8:	e025      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 80058fa:	2306      	movs	r3, #6
 80058fc:	e023      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 80058fe:	2305      	movs	r3, #5
 8005900:	e021      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 8005902:	2304      	movs	r3, #4
 8005904:	e01f      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 8005906:	2303      	movs	r3, #3
 8005908:	e01d      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 800590a:	2302      	movs	r3, #2
 800590c:	e01b      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 800590e:	2301      	movs	r3, #1
 8005910:	e019      	b.n	8005946 <HAL_GPIO_Init+0x25a>
 8005912:	bf00      	nop
 8005914:	58000080 	.word	0x58000080
 8005918:	58024400 	.word	0x58024400
 800591c:	58000400 	.word	0x58000400
 8005920:	58020000 	.word	0x58020000
 8005924:	58020400 	.word	0x58020400
 8005928:	58020800 	.word	0x58020800
 800592c:	58020c00 	.word	0x58020c00
 8005930:	58021000 	.word	0x58021000
 8005934:	58021400 	.word	0x58021400
 8005938:	58021800 	.word	0x58021800
 800593c:	58021c00 	.word	0x58021c00
 8005940:	58022400 	.word	0x58022400
 8005944:	2300      	movs	r3, #0
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	f002 0203 	and.w	r2, r2, #3
 800594c:	0092      	lsls	r2, r2, #2
 800594e:	4093      	lsls	r3, r2
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005956:	4938      	ldr	r1, [pc, #224]	@ (8005a38 <HAL_GPIO_Init+0x34c>)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	3302      	adds	r3, #2
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800598a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f ae6b 	bne.w	8005700 <HAL_GPIO_Init+0x14>
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	3724      	adds	r7, #36	@ 0x24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	58000400 	.word	0x58000400

08005a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	807b      	strh	r3, [r7, #2]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a4c:	787b      	ldrb	r3, [r7, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a52:	887a      	ldrh	r2, [r7, #2]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a58:	e003      	b.n	8005a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	619a      	str	r2, [r3, #24]
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a78:	4b19      	ldr	r3, [pc, #100]	@ (8005ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d00a      	beq.n	8005a9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a84:	4b16      	ldr	r3, [pc, #88]	@ (8005ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e01f      	b.n	8005ad6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e01d      	b.n	8005ad6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 0207 	bic.w	r2, r3, #7
 8005aa2:	490f      	ldr	r1, [pc, #60]	@ (8005ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aaa:	f7fc f915 	bl	8001cd8 <HAL_GetTick>
 8005aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ab0:	e009      	b.n	8005ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ab2:	f7fc f911 	bl	8001cd8 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ac0:	d901      	bls.n	8005ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e007      	b.n	8005ad6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ac6:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad2:	d1ee      	bne.n	8005ab2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024800 	.word	0x58024800

08005ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08c      	sub	sp, #48	@ 0x30
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e3c8      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8087 	beq.w	8005c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b04:	4b88      	ldr	r3, [pc, #544]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b0e:	4b86      	ldr	r3, [pc, #536]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d007      	beq.n	8005b2a <HAL_RCC_OscConfig+0x46>
 8005b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1c:	2b18      	cmp	r3, #24
 8005b1e:	d110      	bne.n	8005b42 <HAL_RCC_OscConfig+0x5e>
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d06c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x12c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d168      	bne.n	8005c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e3a2      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_OscConfig+0x76>
 8005b4c:	4b76      	ldr	r3, [pc, #472]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a75      	ldr	r2, [pc, #468]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e02e      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd4>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x98>
 8005b62:	4b71      	ldr	r3, [pc, #452]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a70      	ldr	r2, [pc, #448]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6d      	ldr	r2, [pc, #436]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xbc>
 8005b86:	4b68      	ldr	r3, [pc, #416]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a67      	ldr	r2, [pc, #412]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b65      	ldr	r3, [pc, #404]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a64      	ldr	r2, [pc, #400]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd4>
 8005ba0:	4b61      	ldr	r3, [pc, #388]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a60      	ldr	r2, [pc, #384]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b5e      	ldr	r3, [pc, #376]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fc f88a 	bl	8001cd8 <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fc f886 	bl	8001cd8 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	@ 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e356      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bda:	4b53      	ldr	r3, [pc, #332]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xe4>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fc f876 	bl	8001cd8 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fc f872 	bl	8001cd8 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e342      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c02:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x10c>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 808c 	beq.w	8005d38 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c20:	4b41      	ldr	r3, [pc, #260]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_RCC_OscConfig+0x162>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b18      	cmp	r3, #24
 8005c3a:	d137      	bne.n	8005cac <HAL_RCC_OscConfig+0x1c8>
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d132      	bne.n	8005cac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c46:	4b38      	ldr	r3, [pc, #224]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x17a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e314      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c5e:	4b32      	ldr	r3, [pc, #200]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f023 0219 	bic.w	r2, r3, #25
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	492f      	ldr	r1, [pc, #188]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fc f832 	bl	8001cd8 <HAL_GetTick>
 8005c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fc f82e 	bl	8001cd8 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e2fe      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c8a:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b24      	ldr	r3, [pc, #144]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	4920      	ldr	r1, [pc, #128]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005caa:	e045      	b.n	8005d38 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d026      	beq.n	8005d02 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f023 0219 	bic.w	r2, r3, #25
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4919      	ldr	r1, [pc, #100]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fc f807 	bl	8001cd8 <HAL_GetTick>
 8005cca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cce:	f7fc f803 	bl	8001cd8 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e2d3      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce0:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cec:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	490b      	ldr	r1, [pc, #44]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
 8005d00:	e01a      	b.n	8005d38 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a08      	ldr	r2, [pc, #32]	@ (8005d28 <HAL_RCC_OscConfig+0x244>)
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fb ffe3 	bl	8001cd8 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d16:	f7fb ffdf 	bl	8001cd8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d903      	bls.n	8005d2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e2af      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
 8005d28:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d2c:	4b96      	ldr	r3, [pc, #600]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ee      	bne.n	8005d16 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d06a      	beq.n	8005e1a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d44:	4b90      	ldr	r3, [pc, #576]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d4e:	4b8e      	ldr	r3, [pc, #568]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d007      	beq.n	8005d6a <HAL_RCC_OscConfig+0x286>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	d11b      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2b4>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d6a:	4b87      	ldr	r3, [pc, #540]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x29e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b80      	cmp	r3, #128	@ 0x80
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e282      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d82:	4b81      	ldr	r3, [pc, #516]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	497d      	ldr	r1, [pc, #500]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d96:	e040      	b.n	8005e1a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d023      	beq.n	8005de8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005da0:	4b79      	ldr	r3, [pc, #484]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a78      	ldr	r2, [pc, #480]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fb ff94 	bl	8001cd8 <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005db4:	f7fb ff90 	bl	8001cd8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e260      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dc6:	4b70      	ldr	r3, [pc, #448]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	4969      	ldr	r1, [pc, #420]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]
 8005de6:	e018      	b.n	8005e1a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005de8:	4b67      	ldr	r3, [pc, #412]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a66      	ldr	r2, [pc, #408]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fb ff70 	bl	8001cd8 <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dfc:	f7fb ff6c 	bl	8001cd8 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e23c      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d036      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d019      	beq.n	8005e62 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2e:	4b56      	ldr	r3, [pc, #344]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e32:	4a55      	ldr	r2, [pc, #340]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fb ff4d 	bl	8001cd8 <HAL_GetTick>
 8005e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fb ff49 	bl	8001cd8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e219      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e54:	4b4c      	ldr	r3, [pc, #304]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x35e>
 8005e60:	e018      	b.n	8005e94 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e62:	4b49      	ldr	r3, [pc, #292]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	4a48      	ldr	r2, [pc, #288]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fb ff33 	bl	8001cd8 <HAL_GetTick>
 8005e72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e76:	f7fb ff2f 	bl	8001cd8 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e1ff      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e88:	4b3f      	ldr	r3, [pc, #252]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d036      	beq.n	8005f0e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d019      	beq.n	8005edc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ea8:	4b37      	ldr	r3, [pc, #220]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a36      	ldr	r2, [pc, #216]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005eae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005eb4:	f7fb ff10 	bl	8001cd8 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ebc:	f7fb ff0c 	bl	8001cd8 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1dc      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ece:	4b2e      	ldr	r3, [pc, #184]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x3d8>
 8005eda:	e018      	b.n	8005f0e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005edc:	4b2a      	ldr	r3, [pc, #168]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ee8:	f7fb fef6 	bl	8001cd8 <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ef0:	f7fb fef2 	bl	8001cd8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1c2      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f02:	4b21      	ldr	r3, [pc, #132]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 8086 	beq.w	8006028 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <HAL_RCC_OscConfig+0x4a8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	@ (8005f8c <HAL_RCC_OscConfig+0x4a8>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f28:	f7fb fed6 	bl	8001cd8 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f30:	f7fb fed2 	bl	8001cd8 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	@ 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1a2      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f42:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <HAL_RCC_OscConfig+0x4a8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_OscConfig+0x480>
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f62:	e032      	b.n	8005fca <HAL_RCC_OscConfig+0x4e6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d111      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4ac>
 8005f6c:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f70:	4a05      	ldr	r2, [pc, #20]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f78:	4b03      	ldr	r3, [pc, #12]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7c:	4a02      	ldr	r2, [pc, #8]	@ (8005f88 <HAL_RCC_OscConfig+0x4a4>)
 8005f7e:	f023 0304 	bic.w	r3, r3, #4
 8005f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f84:	e021      	b.n	8005fca <HAL_RCC_OscConfig+0x4e6>
 8005f86:	bf00      	nop
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	58024800 	.word	0x58024800
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b05      	cmp	r3, #5
 8005f96:	d10c      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x4ce>
 8005f98:	4b83      	ldr	r3, [pc, #524]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9c:	4a82      	ldr	r2, [pc, #520]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa4:	4b80      	ldr	r3, [pc, #512]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fb0:	e00b      	b.n	8005fca <HAL_RCC_OscConfig+0x4e6>
 8005fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	4a79      	ldr	r2, [pc, #484]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd2:	f7fb fe81 	bl	8001cd8 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fda:	f7fb fe7d 	bl	8001cd8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e14b      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0ee      	beq.n	8005fda <HAL_RCC_OscConfig+0x4f6>
 8005ffc:	e014      	b.n	8006028 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffe:	f7fb fe6b 	bl	8001cd8 <HAL_GetTick>
 8006002:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006004:	e00a      	b.n	800601c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006006:	f7fb fe67 	bl	8001cd8 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e135      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601c:	4b62      	ldr	r3, [pc, #392]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ee      	bne.n	8006006 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 812a 	beq.w	8006286 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006032:	4b5d      	ldr	r3, [pc, #372]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603a:	2b18      	cmp	r3, #24
 800603c:	f000 80ba 	beq.w	80061b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006044:	2b02      	cmp	r3, #2
 8006046:	f040 8095 	bne.w	8006174 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b57      	ldr	r3, [pc, #348]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a56      	ldr	r2, [pc, #344]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006050:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fb fe3f 	bl	8001cd8 <HAL_GetTick>
 800605a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605e:	f7fb fe3b 	bl	8001cd8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e10b      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006070:	4b4d      	ldr	r3, [pc, #308]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607c:	4b4a      	ldr	r3, [pc, #296]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800607e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006080:	4b4a      	ldr	r3, [pc, #296]	@ (80061ac <HAL_RCC_OscConfig+0x6c8>)
 8006082:	4013      	ands	r3, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	430a      	orrs	r2, r1
 8006090:	4945      	ldr	r1, [pc, #276]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	628b      	str	r3, [r1, #40]	@ 0x28
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	3b01      	subs	r3, #1
 800609c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a4:	3b01      	subs	r3, #1
 80060a6:	025b      	lsls	r3, r3, #9
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	3b01      	subs	r3, #1
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	3b01      	subs	r3, #1
 80060c0:	061b      	lsls	r3, r3, #24
 80060c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060c6:	4938      	ldr	r1, [pc, #224]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060cc:	4b36      	ldr	r3, [pc, #216]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4a35      	ldr	r2, [pc, #212]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060d8:	4b33      	ldr	r3, [pc, #204]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060dc:	4b34      	ldr	r3, [pc, #208]	@ (80061b0 <HAL_RCC_OscConfig+0x6cc>)
 80060de:	4013      	ands	r3, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060e4:	00d2      	lsls	r2, r2, #3
 80060e6:	4930      	ldr	r1, [pc, #192]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060ec:	4b2e      	ldr	r3, [pc, #184]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	f023 020c 	bic.w	r2, r3, #12
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	492b      	ldr	r1, [pc, #172]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060fe:	4b2a      	ldr	r3, [pc, #168]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	f023 0202 	bic.w	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	4927      	ldr	r1, [pc, #156]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800610c:	4313      	orrs	r3, r2
 800610e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006110:	4b25      	ldr	r3, [pc, #148]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	4a24      	ldr	r2, [pc, #144]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611c:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006128:	4b1f      	ldr	r3, [pc, #124]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800612a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612c:	4a1e      	ldr	r2, [pc, #120]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800612e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006134:	4b1c      	ldr	r3, [pc, #112]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800614a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fb fdc4 	bl	8001cd8 <HAL_GetTick>
 8006150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006154:	f7fb fdc0 	bl	8001cd8 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e090      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006166:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x670>
 8006172:	e088      	b.n	8006286 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a0b      	ldr	r2, [pc, #44]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800617a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800617e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fb fdaa 	bl	8001cd8 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006188:	f7fb fda6 	bl	8001cd8 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e076      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800619a:	4b03      	ldr	r3, [pc, #12]	@ (80061a8 <HAL_RCC_OscConfig+0x6c4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x6a4>
 80061a6:	e06e      	b.n	8006286 <HAL_RCC_OscConfig+0x7a2>
 80061a8:	58024400 	.word	0x58024400
 80061ac:	fffffc0c 	.word	0xfffffc0c
 80061b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061b4:	4b36      	ldr	r3, [pc, #216]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061ba:	4b35      	ldr	r3, [pc, #212]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d031      	beq.n	800622c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f003 0203 	and.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d12a      	bne.n	800622c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d122      	bne.n	800622c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d11a      	bne.n	800622c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	0a5b      	lsrs	r3, r3, #9
 80061fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006202:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006204:	429a      	cmp	r2, r3
 8006206:	d111      	bne.n	800622c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006216:	429a      	cmp	r2, r3
 8006218:	d108      	bne.n	800622c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	0e1b      	lsrs	r3, r3, #24
 800621e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006226:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e02b      	b.n	8006288 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006230:	4b17      	ldr	r3, [pc, #92]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 8006232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006234:	08db      	lsrs	r3, r3, #3
 8006236:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800623a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d01f      	beq.n	8006286 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006246:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	4a11      	ldr	r2, [pc, #68]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006252:	f7fb fd41 	bl	8001cd8 <HAL_GetTick>
 8006256:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006258:	bf00      	nop
 800625a:	f7fb fd3d 	bl	8001cd8 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	4293      	cmp	r3, r2
 8006264:	d0f9      	beq.n	800625a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 8006268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626a:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <HAL_RCC_OscConfig+0x7b0>)
 800626c:	4013      	ands	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	4906      	ldr	r1, [pc, #24]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 8006276:	4313      	orrs	r3, r2
 8006278:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800627a:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a04      	ldr	r2, [pc, #16]	@ (8006290 <HAL_RCC_OscConfig+0x7ac>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3730      	adds	r7, #48	@ 0x30
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	58024400 	.word	0x58024400
 8006294:	ffff0007 	.word	0xffff0007

08006298 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e19c      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062ac:	4b8a      	ldr	r3, [pc, #552]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d910      	bls.n	80062dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ba:	4b87      	ldr	r3, [pc, #540]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 020f 	bic.w	r2, r3, #15
 80062c2:	4985      	ldr	r1, [pc, #532]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ca:	4b83      	ldr	r3, [pc, #524]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d001      	beq.n	80062dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e184      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	4b7b      	ldr	r3, [pc, #492]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d908      	bls.n	800630a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062f8:	4b78      	ldr	r3, [pc, #480]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	4975      	ldr	r1, [pc, #468]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006306:	4313      	orrs	r3, r2
 8006308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	4b70      	ldr	r3, [pc, #448]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006322:	429a      	cmp	r2, r3
 8006324:	d908      	bls.n	8006338 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006326:	4b6d      	ldr	r3, [pc, #436]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	496a      	ldr	r1, [pc, #424]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006334:	4313      	orrs	r3, r2
 8006336:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	4b64      	ldr	r3, [pc, #400]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006350:	429a      	cmp	r2, r3
 8006352:	d908      	bls.n	8006366 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006354:	4b61      	ldr	r3, [pc, #388]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	495e      	ldr	r1, [pc, #376]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006362:	4313      	orrs	r3, r2
 8006364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d010      	beq.n	8006394 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	4b59      	ldr	r3, [pc, #356]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800637e:	429a      	cmp	r2, r3
 8006380:	d908      	bls.n	8006394 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006382:	4b56      	ldr	r3, [pc, #344]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	4953      	ldr	r1, [pc, #332]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006390:	4313      	orrs	r3, r2
 8006392:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	4b4d      	ldr	r3, [pc, #308]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d908      	bls.n	80063c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b0:	4b4a      	ldr	r3, [pc, #296]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f023 020f 	bic.w	r2, r3, #15
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4947      	ldr	r1, [pc, #284]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d055      	beq.n	800647a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ce:	4b43      	ldr	r3, [pc, #268]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4940      	ldr	r1, [pc, #256]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063e8:	4b3c      	ldr	r3, [pc, #240]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d121      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0f6      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d107      	bne.n	8006410 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006400:	4b36      	ldr	r3, [pc, #216]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d115      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0ea      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d107      	bne.n	8006428 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006418:	4b30      	ldr	r3, [pc, #192]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0de      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006428:	4b2c      	ldr	r3, [pc, #176]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d6      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006438:	4b28      	ldr	r3, [pc, #160]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f023 0207 	bic.w	r2, r3, #7
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4925      	ldr	r1, [pc, #148]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006446:	4313      	orrs	r3, r2
 8006448:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644a:	f7fb fc45 	bl	8001cd8 <HAL_GetTick>
 800644e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006450:	e00a      	b.n	8006468 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006452:	f7fb fc41 	bl	8001cd8 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006460:	4293      	cmp	r3, r2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e0be      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006468:	4b1c      	ldr	r3, [pc, #112]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	429a      	cmp	r2, r3
 8006478:	d1eb      	bne.n	8006452 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	4b14      	ldr	r3, [pc, #80]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	429a      	cmp	r2, r3
 8006494:	d208      	bcs.n	80064a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006496:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f023 020f 	bic.w	r2, r3, #15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	490e      	ldr	r1, [pc, #56]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064a8:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d214      	bcs.n	80064e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b6:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 020f 	bic.w	r2, r3, #15
 80064be:	4906      	ldr	r1, [pc, #24]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b04      	ldr	r3, [pc, #16]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e086      	b.n	80065e6 <HAL_RCC_ClockConfig+0x34e>
 80064d8:	52002000 	.word	0x52002000
 80064dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d010      	beq.n	800650e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	4b3f      	ldr	r3, [pc, #252]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d208      	bcs.n	800650e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064fc:	4b3c      	ldr	r3, [pc, #240]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	4939      	ldr	r1, [pc, #228]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 800650a:	4313      	orrs	r3, r2
 800650c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d010      	beq.n	800653c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006526:	429a      	cmp	r2, r3
 8006528:	d208      	bcs.n	800653c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800652a:	4b31      	ldr	r3, [pc, #196]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	492e      	ldr	r1, [pc, #184]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 8006538:	4313      	orrs	r3, r2
 800653a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	4b28      	ldr	r3, [pc, #160]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006554:	429a      	cmp	r2, r3
 8006556:	d208      	bcs.n	800656a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006558:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	4922      	ldr	r1, [pc, #136]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 8006566:	4313      	orrs	r3, r2
 8006568:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d010      	beq.n	8006598 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006582:	429a      	cmp	r2, r3
 8006584:	d208      	bcs.n	8006598 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006586:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	4917      	ldr	r1, [pc, #92]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 8006594:	4313      	orrs	r3, r2
 8006596:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006598:	f000 f834 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	4912      	ldr	r1, [pc, #72]	@ (80065f4 <HAL_RCC_ClockConfig+0x35c>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065b6:	4b0e      	ldr	r3, [pc, #56]	@ (80065f0 <HAL_RCC_ClockConfig+0x358>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	4a0d      	ldr	r2, [pc, #52]	@ (80065f4 <HAL_RCC_ClockConfig+0x35c>)
 80065c0:	5cd3      	ldrb	r3, [r2, r3]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	4a0a      	ldr	r2, [pc, #40]	@ (80065f8 <HAL_RCC_ClockConfig+0x360>)
 80065ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065d0:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <HAL_RCC_ClockConfig+0x364>)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <HAL_RCC_ClockConfig+0x368>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb f844 	bl	8001668 <HAL_InitTick>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
 80065f4:	0802245c 	.word	0x0802245c
 80065f8:	24000004 	.word	0x24000004
 80065fc:	24000000 	.word	0x24000000
 8006600:	24000008 	.word	0x24000008

08006604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	b089      	sub	sp, #36	@ 0x24
 8006608:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800660a:	4bb3      	ldr	r3, [pc, #716]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006612:	2b18      	cmp	r3, #24
 8006614:	f200 8155 	bhi.w	80068c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006618:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <HAL_RCC_GetSysClockFreq+0x1c>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006685 	.word	0x08006685
 8006624:	080068c3 	.word	0x080068c3
 8006628:	080068c3 	.word	0x080068c3
 800662c:	080068c3 	.word	0x080068c3
 8006630:	080068c3 	.word	0x080068c3
 8006634:	080068c3 	.word	0x080068c3
 8006638:	080068c3 	.word	0x080068c3
 800663c:	080068c3 	.word	0x080068c3
 8006640:	080066ab 	.word	0x080066ab
 8006644:	080068c3 	.word	0x080068c3
 8006648:	080068c3 	.word	0x080068c3
 800664c:	080068c3 	.word	0x080068c3
 8006650:	080068c3 	.word	0x080068c3
 8006654:	080068c3 	.word	0x080068c3
 8006658:	080068c3 	.word	0x080068c3
 800665c:	080068c3 	.word	0x080068c3
 8006660:	080066b1 	.word	0x080066b1
 8006664:	080068c3 	.word	0x080068c3
 8006668:	080068c3 	.word	0x080068c3
 800666c:	080068c3 	.word	0x080068c3
 8006670:	080068c3 	.word	0x080068c3
 8006674:	080068c3 	.word	0x080068c3
 8006678:	080068c3 	.word	0x080068c3
 800667c:	080068c3 	.word	0x080068c3
 8006680:	080066b7 	.word	0x080066b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006684:	4b94      	ldr	r3, [pc, #592]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006690:	4b91      	ldr	r3, [pc, #580]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a90      	ldr	r2, [pc, #576]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066a2:	e111      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066a4:	4b8d      	ldr	r3, [pc, #564]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066a6:	61bb      	str	r3, [r7, #24]
      break;
 80066a8:	e10e      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066aa:	4b8d      	ldr	r3, [pc, #564]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066ac:	61bb      	str	r3, [r7, #24]
      break;
 80066ae:	e10b      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066b0:	4b8c      	ldr	r3, [pc, #560]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066b2:	61bb      	str	r3, [r7, #24]
      break;
 80066b4:	e108      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b6:	4b88      	ldr	r3, [pc, #544]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066c0:	4b85      	ldr	r3, [pc, #532]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066cc:	4b82      	ldr	r3, [pc, #520]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066d6:	4b80      	ldr	r3, [pc, #512]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80e1 	beq.w	80068bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f000 8083 	beq.w	8006808 <HAL_RCC_GetSysClockFreq+0x204>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b02      	cmp	r3, #2
 8006706:	f200 80a1 	bhi.w	800684c <HAL_RCC_GetSysClockFreq+0x248>
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x114>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d056      	beq.n	80067c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006716:	e099      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006718:	4b6f      	ldr	r3, [pc, #444]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d02d      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006724:	4b6c      	ldr	r3, [pc, #432]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	4a6b      	ldr	r2, [pc, #428]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b62      	ldr	r3, [pc, #392]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006762:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80068e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800677e:	e087      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80068ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b51      	ldr	r3, [pc, #324]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80068e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067c2:	e065      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80068f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b40      	ldr	r3, [pc, #256]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80068e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006806:	e043      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80068f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b2f      	ldr	r3, [pc, #188]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a02 	vldr	s12, [r7, #8]
 800682e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80068e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800684a:	e021      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80068f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b1e      	ldr	r3, [pc, #120]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006872:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80068e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800688e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006890:	4b11      	ldr	r3, [pc, #68]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006894:	0a5b      	lsrs	r3, r3, #9
 8006896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800689a:	3301      	adds	r3, #1
 800689c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b4:	ee17 3a90 	vmov	r3, s15
 80068b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068ba:	e005      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
      break;
 80068c0:	e002      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068c2:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068c4:	61bb      	str	r3, [r7, #24]
      break;
 80068c6:	bf00      	nop
  }

  return sysclockfreq;
 80068c8:	69bb      	ldr	r3, [r7, #24]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3724      	adds	r7, #36	@ 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	58024400 	.word	0x58024400
 80068dc:	03d09000 	.word	0x03d09000
 80068e0:	003d0900 	.word	0x003d0900
 80068e4:	007a1200 	.word	0x007a1200
 80068e8:	46000000 	.word	0x46000000
 80068ec:	4c742400 	.word	0x4c742400
 80068f0:	4a742400 	.word	0x4a742400
 80068f4:	4af42400 	.word	0x4af42400

080068f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068fe:	f7ff fe81 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8006902:	4602      	mov	r2, r0
 8006904:	4b10      	ldr	r3, [pc, #64]	@ (8006948 <HAL_RCC_GetHCLKFreq+0x50>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	490f      	ldr	r1, [pc, #60]	@ (800694c <HAL_RCC_GetHCLKFreq+0x54>)
 8006910:	5ccb      	ldrb	r3, [r1, r3]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <HAL_RCC_GetHCLKFreq+0x50>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	4a09      	ldr	r2, [pc, #36]	@ (800694c <HAL_RCC_GetHCLKFreq+0x54>)
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	4a07      	ldr	r2, [pc, #28]	@ (8006950 <HAL_RCC_GetHCLKFreq+0x58>)
 8006934:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006936:	4a07      	ldr	r2, [pc, #28]	@ (8006954 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <HAL_RCC_GetHCLKFreq+0x58>)
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	0802245c 	.word	0x0802245c
 8006950:	24000004 	.word	0x24000004
 8006954:	24000000 	.word	0x24000000

08006958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800695c:	f7ff ffcc 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006960:	4602      	mov	r2, r0
 8006962:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	4904      	ldr	r1, [pc, #16]	@ (8006980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800696e:	5ccb      	ldrb	r3, [r1, r3]
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	0802245c 	.word	0x0802245c

08006984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006988:	f7ff ffb6 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 800698c:	4602      	mov	r2, r0
 800698e:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	4904      	ldr	r1, [pc, #16]	@ (80069ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800699a:	5ccb      	ldrb	r3, [r1, r3]
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	58024400 	.word	0x58024400
 80069ac:	0802245c 	.word	0x0802245c

080069b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	223f      	movs	r2, #63	@ 0x3f
 80069be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069c0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0207 	and.w	r2, r3, #7
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80069cc:	4b17      	ldr	r3, [pc, #92]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80069d8:	4b14      	ldr	r3, [pc, #80]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80069e4:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80069f0:	4b0e      	ldr	r3, [pc, #56]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80069fc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006a08:	4b08      	ldr	r3, [pc, #32]	@ (8006a2c <HAL_RCC_GetClockConfig+0x7c>)
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a14:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <HAL_RCC_GetClockConfig+0x80>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 020f 	and.w	r2, r3, #15
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	601a      	str	r2, [r3, #0]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	52002000 	.word	0x52002000

08006a34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a38:	b0c6      	sub	sp, #280	@ 0x118
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a58:	2500      	movs	r5, #0
 8006a5a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a5e:	d049      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a6a:	d02f      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a70:	d828      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a76:	d01a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a7c:	d822      	bhi.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a86:	d007      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a88:	e01c      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8a:	4bab      	ldr	r3, [pc, #684]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	4aaa      	ldr	r2, [pc, #680]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a96:	e01a      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f002 fa49 	bl	8008f38 <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aac:	e00f      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	3328      	adds	r3, #40	@ 0x28
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 faf0 	bl	800909c <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ac2:	e004      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aca:	e000      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ad6:	4b98      	ldr	r3, [pc, #608]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae4:	4a94      	ldr	r2, [pc, #592]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b00:	f04f 0900 	mov.w	r9, #0
 8006b04:	ea58 0309 	orrs.w	r3, r8, r9
 8006b08:	d047      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d82a      	bhi.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b14:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b3f 	.word	0x08006b3f
 8006b24:	08006b55 	.word	0x08006b55
 8006b28:	08006b73 	.word	0x08006b73
 8006b2c:	08006b73 	.word	0x08006b73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4b81      	ldr	r3, [pc, #516]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	4a80      	ldr	r2, [pc, #512]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b3c:	e01a      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b42:	3308      	adds	r3, #8
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f002 f9f6 	bl	8008f38 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b52:	e00f      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b58:	3328      	adds	r3, #40	@ 0x28
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f002 fa9d 	bl	800909c <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b68:	e004      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b70:	e000      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b7c:	4b6e      	ldr	r3, [pc, #440]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b80:	f023 0107 	bic.w	r1, r3, #7
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006ba6:	f04f 0b00 	mov.w	fp, #0
 8006baa:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bae:	d05b      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bb8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bbc:	d03b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bbe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bc2:	d834      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bc8:	d037      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bce:	d82e      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bd4:	d033      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006bd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bda:	d828      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be0:	d01a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d822      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bf0:	d007      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006bf2:	e01c      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4b50      	ldr	r3, [pc, #320]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c00:	e01e      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	3308      	adds	r3, #8
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 f994 	bl	8008f38 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c16:	e013      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1c:	3328      	adds	r3, #40	@ 0x28
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f002 fa3b 	bl	800909c <RCCEx_PLL3_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c2c:	e008      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c34:	e004      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c36:	bf00      	nop
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c48:	4b3b      	ldr	r3, [pc, #236]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c58:	4a37      	ldr	r2, [pc, #220]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c5e:	e003      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006c82:	460b      	mov	r3, r1
 8006c84:	4313      	orrs	r3, r2
 8006c86:	d05d      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c90:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006c94:	d03b      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c96:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006c9a:	d834      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ca0:	d037      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006ca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ca6:	d82e      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ca8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cac:	d033      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006cae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cb2:	d828      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb8:	d01a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cbe:	d822      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cc8:	d007      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cca:	e01c      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd8:	e01e      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	3308      	adds	r3, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f002 f928 	bl	8008f38 <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cee:	e013      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	3328      	adds	r3, #40	@ 0x28
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 f9cf 	bl	800909c <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d04:	e008      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d0c:	e004      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d20:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d30:	4a01      	ldr	r2, [pc, #4]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d32:	430b      	orrs	r3, r1
 8006d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d36:	e005      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d5a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d03a      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6a:	2b30      	cmp	r3, #48	@ 0x30
 8006d6c:	d01f      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006d6e:	2b30      	cmp	r3, #48	@ 0x30
 8006d70:	d819      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d00c      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d815      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d019      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d111      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d82:	4baa      	ldr	r3, [pc, #680]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	4aa9      	ldr	r2, [pc, #676]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d8e:	e011      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	3308      	adds	r3, #8
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 f8cd 	bl	8008f38 <RCCEx_PLL2_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006dbc:	4b9b      	ldr	r3, [pc, #620]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dca:	4a98      	ldr	r2, [pc, #608]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006de6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006df0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	d051      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e04:	d035      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e0a:	d82e      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e10:	d031      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e16:	d828      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1c:	d01a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e22:	d822      	bhi.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2c:	d007      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e2e:	e01c      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b7e      	ldr	r3, [pc, #504]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	4a7d      	ldr	r2, [pc, #500]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e3c:	e01c      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	3308      	adds	r3, #8
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 f876 	bl	8008f38 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e52:	e011      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	3328      	adds	r3, #40	@ 0x28
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 f91d 	bl	800909c <RCCEx_PLL3_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e68:	e006      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e70:	e002      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e80:	4b6a      	ldr	r3, [pc, #424]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8e:	4a67      	ldr	r2, [pc, #412]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e94:	e003      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eb4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d053      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ec8:	d033      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006eca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ece:	d82c      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ed0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ed4:	d02f      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ed6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eda:	d826      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006edc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ee0:	d02b      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006ee2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ee6:	d820      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eec:	d012      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef2:	d81a      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d022      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efc:	d115      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f02:	3308      	adds	r3, #8
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 f816 	bl	8008f38 <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f12:	e015      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	3328      	adds	r3, #40	@ 0x28
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f8bd 	bl	800909c <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f28:	e00a      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f30:	e006      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f32:	bf00      	nop
 8006f34:	e004      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f48:	4b38      	ldr	r3, [pc, #224]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f56:	4a35      	ldr	r2, [pc, #212]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f76:	2300      	movs	r3, #0
 8006f78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f7c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d058      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f92:	d033      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f98:	d82c      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9e:	d02f      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa4:	d826      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006faa:	d02b      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fb0:	d820      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb6:	d012      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fbc:	d81a      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d022      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc6:	d115      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	3308      	adds	r3, #8
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 ffb1 	bl	8008f38 <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fdc:	e015      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	3328      	adds	r3, #40	@ 0x28
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 f858 	bl	800909c <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ff2:	e00a      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ffa:	e006      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ffc:	bf00      	nop
 8006ffe:	e004      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10e      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007012:	4b06      	ldr	r3, [pc, #24]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800701a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007022:	4a02      	ldr	r2, [pc, #8]	@ (800702c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007024:	430b      	orrs	r3, r1
 8007026:	6593      	str	r3, [r2, #88]	@ 0x58
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800704e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d037      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800705e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007062:	d00e      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007068:	d816      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d018      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800706e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007072:	d111      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007074:	4bc4      	ldr	r3, [pc, #784]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	4ac3      	ldr	r2, [pc, #780]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800707a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800707e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007080:	e00f      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	3308      	adds	r3, #8
 8007088:	2101      	movs	r1, #1
 800708a:	4618      	mov	r0, r3
 800708c:	f001 ff54 	bl	8008f38 <RCCEx_PLL2_Config>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007096:	e004      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80070a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070aa:	4bb7      	ldr	r3, [pc, #732]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b8:	4ab3      	ldr	r2, [pc, #716]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80070be:	e003      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d039      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d81c      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007135 	.word	0x08007135
 80070fc:	08007109 	.word	0x08007109
 8007100:	08007117 	.word	0x08007117
 8007104:	08007135 	.word	0x08007135
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007108:	4b9f      	ldr	r3, [pc, #636]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	4a9e      	ldr	r2, [pc, #632]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007114:	e00f      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711a:	3308      	adds	r3, #8
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f001 ff0a 	bl	8008f38 <RCCEx_PLL2_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800712a:	e004      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800713e:	4b92      	ldr	r3, [pc, #584]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007142:	f023 0103 	bic.w	r1, r3, #3
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714c:	4a8e      	ldr	r2, [pc, #568]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800714e:	430b      	orrs	r3, r1
 8007150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007152:	e003      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800716c:	2300      	movs	r3, #0
 800716e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007172:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	f000 8099 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800717e:	4b83      	ldr	r3, [pc, #524]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a82      	ldr	r2, [pc, #520]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800718a:	f7fa fda5 	bl	8001cd8 <HAL_GetTick>
 800718e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007192:	e00b      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007194:	f7fa fda0 	bl	8001cd8 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b64      	cmp	r3, #100	@ 0x64
 80071a2:	d903      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071aa:	e005      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ac:	4b77      	ldr	r3, [pc, #476]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ed      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d173      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071c0:	4b71      	ldr	r3, [pc, #452]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071cc:	4053      	eors	r3, r2
 80071ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d015      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071e2:	4b69      	ldr	r3, [pc, #420]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e6:	4a68      	ldr	r2, [pc, #416]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ee:	4b66      	ldr	r3, [pc, #408]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	4a65      	ldr	r2, [pc, #404]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071fa:	4a63      	ldr	r2, [pc, #396]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007200:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800720a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720e:	d118      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fa fd62 	bl	8001cd8 <HAL_GetTick>
 8007214:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007218:	e00d      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721a:	f7fa fd5d 	bl	8001cd8 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007224:	1ad2      	subs	r2, r2, r3
 8007226:	f241 3388 	movw	r3, #5000	@ 0x1388
 800722a:	429a      	cmp	r2, r3
 800722c:	d903      	bls.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007234:	e005      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007236:	4b54      	ldr	r3, [pc, #336]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0eb      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007242:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007246:	2b00      	cmp	r3, #0
 8007248:	d129      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800725a:	d10e      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800725c:	4b4a      	ldr	r3, [pc, #296]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800726c:	091a      	lsrs	r2, r3, #4
 800726e:	4b48      	ldr	r3, [pc, #288]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007270:	4013      	ands	r3, r2
 8007272:	4a45      	ldr	r2, [pc, #276]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007274:	430b      	orrs	r3, r1
 8007276:	6113      	str	r3, [r2, #16]
 8007278:	e005      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800727a:	4b43      	ldr	r3, [pc, #268]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	4a42      	ldr	r2, [pc, #264]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007280:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007284:	6113      	str	r3, [r2, #16]
 8007286:	4b40      	ldr	r3, [pc, #256]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007288:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007296:	4a3c      	ldr	r2, [pc, #240]	@ (8007388 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007298:	430b      	orrs	r3, r1
 800729a:	6713      	str	r3, [r2, #112]	@ 0x70
 800729c:	e008      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800729e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80072a6:	e003      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f002 0301 	and.w	r3, r2, #1
 80072bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f000 808f 	beq.w	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072d8:	2b28      	cmp	r3, #40	@ 0x28
 80072da:	d871      	bhi.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072dc:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	080073c9 	.word	0x080073c9
 80072e8:	080073c1 	.word	0x080073c1
 80072ec:	080073c1 	.word	0x080073c1
 80072f0:	080073c1 	.word	0x080073c1
 80072f4:	080073c1 	.word	0x080073c1
 80072f8:	080073c1 	.word	0x080073c1
 80072fc:	080073c1 	.word	0x080073c1
 8007300:	080073c1 	.word	0x080073c1
 8007304:	08007395 	.word	0x08007395
 8007308:	080073c1 	.word	0x080073c1
 800730c:	080073c1 	.word	0x080073c1
 8007310:	080073c1 	.word	0x080073c1
 8007314:	080073c1 	.word	0x080073c1
 8007318:	080073c1 	.word	0x080073c1
 800731c:	080073c1 	.word	0x080073c1
 8007320:	080073c1 	.word	0x080073c1
 8007324:	080073ab 	.word	0x080073ab
 8007328:	080073c1 	.word	0x080073c1
 800732c:	080073c1 	.word	0x080073c1
 8007330:	080073c1 	.word	0x080073c1
 8007334:	080073c1 	.word	0x080073c1
 8007338:	080073c1 	.word	0x080073c1
 800733c:	080073c1 	.word	0x080073c1
 8007340:	080073c1 	.word	0x080073c1
 8007344:	080073c9 	.word	0x080073c9
 8007348:	080073c1 	.word	0x080073c1
 800734c:	080073c1 	.word	0x080073c1
 8007350:	080073c1 	.word	0x080073c1
 8007354:	080073c1 	.word	0x080073c1
 8007358:	080073c1 	.word	0x080073c1
 800735c:	080073c1 	.word	0x080073c1
 8007360:	080073c1 	.word	0x080073c1
 8007364:	080073c9 	.word	0x080073c9
 8007368:	080073c1 	.word	0x080073c1
 800736c:	080073c1 	.word	0x080073c1
 8007370:	080073c1 	.word	0x080073c1
 8007374:	080073c1 	.word	0x080073c1
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073c1 	.word	0x080073c1
 8007380:	080073c1 	.word	0x080073c1
 8007384:	080073c9 	.word	0x080073c9
 8007388:	58024400 	.word	0x58024400
 800738c:	58024800 	.word	0x58024800
 8007390:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	3308      	adds	r3, #8
 800739a:	2101      	movs	r1, #1
 800739c:	4618      	mov	r0, r3
 800739e:	f001 fdcb 	bl	8008f38 <RCCEx_PLL2_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073a8:	e00f      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ae:	3328      	adds	r3, #40	@ 0x28
 80073b0:	2101      	movs	r1, #1
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fe72 	bl	800909c <RCCEx_PLL3_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073be:	e004      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073d2:	4bbf      	ldr	r3, [pc, #764]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073e0:	4abb      	ldr	r2, [pc, #748]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073e2:	430b      	orrs	r3, r1
 80073e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80073e6:	e003      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f002 0302 	and.w	r3, r2, #2
 80073fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007400:	2300      	movs	r3, #0
 8007402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007406:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	d041      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007416:	2b05      	cmp	r3, #5
 8007418:	d824      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800741a:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	0800746d 	.word	0x0800746d
 8007424:	08007439 	.word	0x08007439
 8007428:	0800744f 	.word	0x0800744f
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800746d 	.word	0x0800746d
 8007434:	0800746d 	.word	0x0800746d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	3308      	adds	r3, #8
 800743e:	2101      	movs	r1, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fd79 	bl	8008f38 <RCCEx_PLL2_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	3328      	adds	r3, #40	@ 0x28
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fe20 	bl	800909c <RCCEx_PLL3_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007462:	e004      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800746a:	e000      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800746c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007476:	4b96      	ldr	r3, [pc, #600]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	f023 0107 	bic.w	r1, r3, #7
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007484:	4a92      	ldr	r2, [pc, #584]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007486:	430b      	orrs	r3, r1
 8007488:	6553      	str	r3, [r2, #84]	@ 0x54
 800748a:	e003      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007490:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f002 0304 	and.w	r3, r2, #4
 80074a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074a4:	2300      	movs	r3, #0
 80074a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074ae:	460b      	mov	r3, r1
 80074b0:	4313      	orrs	r3, r2
 80074b2:	d044      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	2b05      	cmp	r3, #5
 80074be:	d825      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074c0:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	08007515 	.word	0x08007515
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074f7 	.word	0x080074f7
 80074d4:	08007515 	.word	0x08007515
 80074d8:	08007515 	.word	0x08007515
 80074dc:	08007515 	.word	0x08007515
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3308      	adds	r3, #8
 80074e6:	2101      	movs	r1, #1
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 fd25 	bl	8008f38 <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074f4:	e00f      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	3328      	adds	r3, #40	@ 0x28
 80074fc:	2101      	movs	r1, #1
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fdcc 	bl	800909c <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800750a:	e004      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751e:	4b6c      	ldr	r3, [pc, #432]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007522:	f023 0107 	bic.w	r1, r3, #7
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	4a68      	ldr	r2, [pc, #416]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007530:	430b      	orrs	r3, r1
 8007532:	6593      	str	r3, [r2, #88]	@ 0x58
 8007534:	e003      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f002 0320 	and.w	r3, r2, #32
 800754a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007554:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d055      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800756a:	d033      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800756c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007570:	d82c      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007576:	d02f      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757c:	d826      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800757e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007582:	d02b      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007584:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007588:	d820      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758e:	d012      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007594:	d81a      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d022      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800759a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800759e:	d115      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	3308      	adds	r3, #8
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fcc5 	bl	8008f38 <RCCEx_PLL2_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075b4:	e015      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	3328      	adds	r3, #40	@ 0x28
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fd6c 	bl	800909c <RCCEx_PLL3_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ca:	e00a      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075d2:	e006      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d4:	bf00      	nop
 80075d6:	e004      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ea:	4b39      	ldr	r3, [pc, #228]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075fa:	4a35      	ldr	r2, [pc, #212]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007600:	e003      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007606:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007616:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800761a:	2300      	movs	r3, #0
 800761c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007620:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d058      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007632:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007636:	d033      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007638:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800763c:	d82c      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007642:	d02f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007648:	d826      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800764a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800764e:	d02b      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007654:	d820      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765a:	d012      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800765c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007660:	d81a      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d022      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766a:	d115      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	3308      	adds	r3, #8
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fc5f 	bl	8008f38 <RCCEx_PLL2_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007680:	e015      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	3328      	adds	r3, #40	@ 0x28
 8007688:	2102      	movs	r1, #2
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fd06 	bl	800909c <RCCEx_PLL3_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007696:	e00a      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800769e:	e006      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a0:	bf00      	nop
 80076a2:	e004      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a4:	bf00      	nop
 80076a6:	e002      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10e      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b6:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076c6:	4a02      	ldr	r2, [pc, #8]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80076cc:	e006      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80076f6:	460b      	mov	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d055      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007704:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007708:	d033      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800770a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800770e:	d82c      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007714:	d02f      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800771a:	d826      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800771c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007720:	d02b      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007722:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007726:	d820      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800772c:	d012      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800772e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007732:	d81a      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d022      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773c:	d115      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007742:	3308      	adds	r3, #8
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f001 fbf6 	bl	8008f38 <RCCEx_PLL2_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007752:	e015      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007758:	3328      	adds	r3, #40	@ 0x28
 800775a:	2102      	movs	r1, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fc9d 	bl	800909c <RCCEx_PLL3_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007768:	e00a      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007772:	bf00      	nop
 8007774:	e004      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007780:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007788:	4ba0      	ldr	r3, [pc, #640]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800778a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007798:	4a9c      	ldr	r2, [pc, #624]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800779a:	430b      	orrs	r3, r1
 800779c:	6593      	str	r3, [r2, #88]	@ 0x58
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f002 0308 	and.w	r3, r2, #8
 80077b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d01e      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d4:	d10c      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	3328      	adds	r3, #40	@ 0x28
 80077dc:	2102      	movs	r1, #2
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fc5c 	bl	800909c <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80077f0:	4b86      	ldr	r3, [pc, #536]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007800:	4a82      	ldr	r2, [pc, #520]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007802:	430b      	orrs	r3, r1
 8007804:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f002 0310 	and.w	r3, r2, #16
 8007812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800781c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d01e      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800782e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007832:	d10c      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	3328      	adds	r3, #40	@ 0x28
 800783a:	2102      	movs	r1, #2
 800783c:	4618      	mov	r0, r3
 800783e:	f001 fc2d 	bl	800909c <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800784e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007852:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800785e:	4a6b      	ldr	r2, [pc, #428]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007860:	430b      	orrs	r3, r1
 8007862:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007870:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007872:	2300      	movs	r3, #0
 8007874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007876:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d03e      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800788c:	d022      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800788e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007892:	d81b      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800789c:	d00b      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800789e:	e015      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	3308      	adds	r3, #8
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 fb45 	bl	8008f38 <RCCEx_PLL2_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078b4:	e00f      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ba:	3328      	adds	r3, #40	@ 0x28
 80078bc:	2102      	movs	r1, #2
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 fbec 	bl	800909c <RCCEx_PLL3_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078ca:	e004      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078d2:	e000      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80078d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10b      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078de:	4b4b      	ldr	r3, [pc, #300]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078ee:	4a47      	ldr	r2, [pc, #284]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80078f4:	e003      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800790a:	673b      	str	r3, [r7, #112]	@ 0x70
 800790c:	2300      	movs	r3, #0
 800790e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007910:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d03b      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007926:	d01f      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007928:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800792c:	d818      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800792e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007932:	d003      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007938:	d007      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800793a:	e011      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800793c:	4b33      	ldr	r3, [pc, #204]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800793e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007940:	4a32      	ldr	r2, [pc, #200]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007948:	e00f      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794e:	3328      	adds	r3, #40	@ 0x28
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fba2 	bl	800909c <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007972:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007982:	4a22      	ldr	r2, [pc, #136]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6553      	str	r3, [r2, #84]	@ 0x54
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800798e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800799e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079a0:	2300      	movs	r3, #0
 80079a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079a8:	460b      	mov	r3, r1
 80079aa:	4313      	orrs	r3, r2
 80079ac:	d034      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079bc:	d007      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079be:	e011      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c0:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a11      	ldr	r2, [pc, #68]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079cc:	e00e      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	3308      	adds	r3, #8
 80079d4:	2102      	movs	r1, #2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 faae 	bl	8008f38 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079f4:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a02:	4a02      	ldr	r2, [pc, #8]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a08:	e006      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a24:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a26:	2300      	movs	r3, #0
 8007a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4313      	orrs	r3, r2
 8007a32:	d00c      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	3328      	adds	r3, #40	@ 0x28
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fb2d 	bl	800909c <RCCEx_PLL3_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a60:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a64:	460b      	mov	r3, r1
 8007a66:	4313      	orrs	r3, r2
 8007a68:	d036      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a74:	d018      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a7a:	d811      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a80:	d014      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a86:	d80b      	bhi.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d011      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a90:	d106      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a92:	4bb7      	ldr	r3, [pc, #732]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a96:	4ab6      	ldr	r2, [pc, #728]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aa6:	e004      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e002      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10a      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007aba:	4bad      	ldr	r3, [pc, #692]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ac8:	4aa9      	ldr	r2, [pc, #676]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aca:	430b      	orrs	r3, r1
 8007acc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007af4:	4b9e      	ldr	r3, [pc, #632]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b02:	4a9b      	ldr	r2, [pc, #620]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b16:	2300      	movs	r3, #0
 8007b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d009      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b24:	4b92      	ldr	r3, [pc, #584]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b32:	4a8f      	ldr	r2, [pc, #572]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b34:	430b      	orrs	r3, r1
 8007b36:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b46:	2300      	movs	r3, #0
 8007b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4313      	orrs	r3, r2
 8007b52:	d00e      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b54:	4b86      	ldr	r3, [pc, #536]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	4a85      	ldr	r2, [pc, #532]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b5e:	6113      	str	r3, [r2, #16]
 8007b60:	4b83      	ldr	r3, [pc, #524]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b62:	6919      	ldr	r1, [r3, #16]
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b6c:	4a80      	ldr	r2, [pc, #512]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b80:	2300      	movs	r3, #0
 8007b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b8e:	4b78      	ldr	r3, [pc, #480]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9c:	4a74      	ldr	r2, [pc, #464]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	4a68      	ldr	r2, [pc, #416]	@ (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007be6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d011      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f99d 	bl	8008f38 <RCCEx_PLL2_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6239      	str	r1, [r7, #32]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d011      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	3308      	adds	r3, #8
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f97d 	bl	8008f38 <RCCEx_PLL2_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	61b9      	str	r1, [r7, #24]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d011      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c74:	3308      	adds	r3, #8
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 f95d 	bl	8008f38 <RCCEx_PLL2_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6139      	str	r1, [r7, #16]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007caa:	460b      	mov	r3, r1
 8007cac:	4313      	orrs	r3, r2
 8007cae:	d011      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb4:	3328      	adds	r3, #40	@ 0x28
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f9ef 	bl	800909c <RCCEx_PLL3_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cea:	460b      	mov	r3, r1
 8007cec:	4313      	orrs	r3, r2
 8007cee:	d011      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf4:	3328      	adds	r3, #40	@ 0x28
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 f9cf 	bl	800909c <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6039      	str	r1, [r7, #0]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d011      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	3328      	adds	r3, #40	@ 0x28
 8007d36:	2102      	movs	r1, #2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 f9af 	bl	800909c <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007d54:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e000      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400

08007d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b090      	sub	sp, #64	@ 0x40
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d82:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f040 8094 	bne.w	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d8c:	4b9b      	ldr	r3, [pc, #620]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	f200 8087 	bhi.w	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007ea5 	.word	0x08007ea5
 8007db4:	08007e31 	.word	0x08007e31
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007db8:	4b90      	ldr	r3, [pc, #576]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dc4:	d108      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 ff62 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd4:	f000 bc93 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ddc:	f000 bc8f 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007de0:	4b86      	ldr	r3, [pc, #536]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dec:	d108      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fca6 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dfc:	f000 bc7f 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e04:	f000 bc7b 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e08:	4b7c      	ldr	r3, [pc, #496]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e14:	d108      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fde6 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e24:	f000 bc6b 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2c:	f000 bc67 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e30:	4b72      	ldr	r3, [pc, #456]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e3a:	4b70      	ldr	r3, [pc, #448]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	08db      	lsrs	r3, r3, #3
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	4a6a      	ldr	r2, [pc, #424]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5e:	e01f      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e60:	4b66      	ldr	r3, [pc, #408]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e76:	4b63      	ldr	r3, [pc, #396]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7a:	e011      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e88:	d106      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e90:	d102      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e92:	4b5d      	ldr	r3, [pc, #372]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e96:	e003      	b.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e9c:	f000 bc2f 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ea0:	f000 bc2d 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ea4:	4b59      	ldr	r3, [pc, #356]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	f000 bc29 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb0:	f000 bc25 	b.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	f040 80a7 	bne.w	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007eca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ed2:	d054      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007eda:	f200 808b 	bhi.w	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ee4:	f000 8083 	beq.w	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007eee:	f200 8081 	bhi.w	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef8:	d02f      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f00:	d878      	bhi.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f0e:	d012      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007f10:	e070      	b.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f12:	4b3a      	ldr	r3, [pc, #232]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 feb5 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2e:	e3e6      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f34:	e3e3      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f36:	4b31      	ldr	r3, [pc, #196]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f42:	d107      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f44:	f107 0318 	add.w	r3, r7, #24
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fbfb 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f52:	e3d4      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f58:	e3d1      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f5a:	4b28      	ldr	r3, [pc, #160]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f66:	d107      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fd3d 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f76:	e3c2      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7c:	e3bf      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f88:	4b1c      	ldr	r3, [pc, #112]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d10c      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f9a:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	08db      	lsrs	r3, r3, #3
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fac:	e01e      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fae:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fba:	d106      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc2:	d102      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc8:	e010      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fca:	4b0c      	ldr	r3, [pc, #48]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fd6:	d106      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fde:	d102      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fe0:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe4:	e002      	b.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fea:	e388      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fec:	e387      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fee:	4b07      	ldr	r3, [pc, #28]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff2:	e384      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff8:	e381      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ffa:	bf00      	nop
 8007ffc:	58024400 	.word	0x58024400
 8008000:	03d09000 	.word	0x03d09000
 8008004:	003d0900 	.word	0x003d0900
 8008008:	007a1200 	.word	0x007a1200
 800800c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008014:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008018:	430b      	orrs	r3, r1
 800801a:	f040 809c 	bne.w	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800801e:	4b9e      	ldr	r3, [pc, #632]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008022:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008026:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800802e:	d054      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008036:	f200 808b 	bhi.w	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008040:	f000 8083 	beq.w	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800804a:	f200 8081 	bhi.w	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008054:	d02f      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800805c:	d878      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800806a:	d012      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800806c:	e070      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800806e:	4b8a      	ldr	r3, [pc, #552]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800807a:	d107      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800807c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fe07 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800808a:	e338      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008090:	e335      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008092:	4b81      	ldr	r3, [pc, #516]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800809a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800809e:	d107      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a0:	f107 0318 	add.w	r3, r7, #24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fb4d 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ae:	e326      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b4:	e323      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080b6:	4b78      	ldr	r3, [pc, #480]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c2:	d107      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c4:	f107 030c 	add.w	r3, r7, #12
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fc8f 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d2:	e314      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d8:	e311      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080da:	4b6f      	ldr	r3, [pc, #444]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080e4:	4b6c      	ldr	r3, [pc, #432]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d10c      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80080f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f6:	4b68      	ldr	r3, [pc, #416]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	08db      	lsrs	r3, r3, #3
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	4a66      	ldr	r2, [pc, #408]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008102:	fa22 f303 	lsr.w	r3, r2, r3
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008108:	e01e      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800810a:	4b63      	ldr	r3, [pc, #396]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008116:	d106      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800811e:	d102      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008120:	4b5f      	ldr	r3, [pc, #380]	@ (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008124:	e010      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008126:	4b5c      	ldr	r3, [pc, #368]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800812e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008132:	d106      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800813a:	d102      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800813c:	4b59      	ldr	r3, [pc, #356]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008140:	e002      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008146:	e2da      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008148:	e2d9      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800814a:	4b57      	ldr	r3, [pc, #348]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e2d6      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e2d3      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800815e:	430b      	orrs	r3, r1
 8008160:	f040 80a7 	bne.w	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008164:	4b4c      	ldr	r3, [pc, #304]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008168:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800816c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008174:	d055      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800817c:	f200 8096 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008186:	f000 8084 	beq.w	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008190:	f200 808c 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819a:	d030      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800819c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a2:	f200 8083 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b2:	d012      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081b4:	e07a      	b.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081b6:	4b38      	ldr	r3, [pc, #224]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081c2:	d107      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fd63 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d2:	e294      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d8:	e291      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081da:	4b2f      	ldr	r3, [pc, #188]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e6:	d107      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e8:	f107 0318 	add.w	r3, r7, #24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 faa9 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f6:	e282      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081fc:	e27f      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081fe:	4b26      	ldr	r3, [pc, #152]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800820a:	d107      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820c:	f107 030c 	add.w	r3, r7, #12
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fbeb 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821a:	e270      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008220:	e26d      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800822a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800822c:	4b1a      	ldr	r3, [pc, #104]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d10c      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800823e:	4b16      	ldr	r3, [pc, #88]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a14      	ldr	r2, [pc, #80]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008250:	e01e      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008252:	4b11      	ldr	r3, [pc, #68]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800825e:	d106      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008266:	d102      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008268:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800826c:	e010      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800826e:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800827a:	d106      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800827c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008282:	d102      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008284:	4b07      	ldr	r3, [pc, #28]	@ (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008288:	e002      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800828e:	e236      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008290:	e235      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008292:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008296:	e232      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008298:	58024400 	.word	0x58024400
 800829c:	03d09000 	.word	0x03d09000
 80082a0:	003d0900 	.word	0x003d0900
 80082a4:	007a1200 	.word	0x007a1200
 80082a8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b0:	e225      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80082ba:	430b      	orrs	r3, r1
 80082bc:	f040 8085 	bne.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082c0:	4b9c      	ldr	r3, [pc, #624]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80082ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d0:	d06b      	beq.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d8:	d874      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e0:	d056      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e8:	d86c      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f0:	d03b      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082f8:	d864      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008300:	d021      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008308:	d85c      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008316:	d004      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008318:	e054      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800831a:	f7fe fb1d 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 800831e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008320:	e1ed      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008322:	4b84      	ldr	r3, [pc, #528]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800832a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800832e:	d107      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fa05 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800833e:	e1de      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008344:	e1db      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008346:	4b7b      	ldr	r3, [pc, #492]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008352:	d107      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fb47 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008362:	e1cc      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008368:	e1c9      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800836a:	4b72      	ldr	r3, [pc, #456]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b04      	cmp	r3, #4
 8008374:	d109      	bne.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008376:	4b6f      	ldr	r3, [pc, #444]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	08db      	lsrs	r3, r3, #3
 800837c:	f003 0303 	and.w	r3, r3, #3
 8008380:	4a6d      	ldr	r2, [pc, #436]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008382:	fa22 f303 	lsr.w	r3, r2, r3
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008388:	e1b9      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800838e:	e1b6      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008390:	4b68      	ldr	r3, [pc, #416]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839c:	d102      	bne.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800839e:	4b67      	ldr	r3, [pc, #412]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a2:	e1ac      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a8:	e1a9      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083aa:	4b62      	ldr	r3, [pc, #392]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b6:	d102      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80083b8:	4b61      	ldr	r3, [pc, #388]	@ (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083bc:	e19f      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c2:	e19c      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e199      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ce:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80083d2:	430b      	orrs	r3, r1
 80083d4:	d173      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083d6:	4b57      	ldr	r3, [pc, #348]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e6:	d02f      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ee:	d863      	bhi.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fc:	d012      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80083fe:	e05b      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008400:	4b4c      	ldr	r3, [pc, #304]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800840c:	d107      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f996 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841c:	e16f      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008422:	e16c      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008424:	4b43      	ldr	r3, [pc, #268]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800842c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008430:	d107      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fad8 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008440:	e15d      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008446:	e15a      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008448:	4b3a      	ldr	r3, [pc, #232]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800844a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008450:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008452:	4b38      	ldr	r3, [pc, #224]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b04      	cmp	r3, #4
 800845c:	d10c      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800845e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008464:	4b33      	ldr	r3, [pc, #204]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	4a32      	ldr	r2, [pc, #200]	@ (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008476:	e01e      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008478:	4b2e      	ldr	r3, [pc, #184]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008484:	d106      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800848c:	d102      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800848e:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008492:	e010      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008494:	4b27      	ldr	r3, [pc, #156]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800849c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084a0:	d106      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a8:	d102      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084aa:	4b25      	ldr	r3, [pc, #148]	@ (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80084ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ae:	e002      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084b4:	e123      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084b6:	e122      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084bc:	e11f      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084c2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80084c6:	430b      	orrs	r3, r1
 80084c8:	d13c      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e0:	d012      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80084e2:	e023      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084e4:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084f0:	d107      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fbcc 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008500:	e0fd      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008506:	e0fa      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008508:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008514:	d107      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008516:	f107 0318 	add.w	r3, r7, #24
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f912 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008524:	e0eb      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852a:	e0e8      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008530:	e0e5      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
 8008538:	03d09000 	.word	0x03d09000
 800853c:	003d0900 	.word	0x003d0900
 8008540:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008548:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800854c:	430b      	orrs	r3, r1
 800854e:	f040 8085 	bne.w	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008552:	4b6d      	ldr	r3, [pc, #436]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008556:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800855a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008562:	d06b      	beq.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800856a:	d874      	bhi.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008572:	d056      	beq.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857a:	d86c      	bhi.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008582:	d03b      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800858a:	d864      	bhi.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008592:	d021      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800859a:	d85c      	bhi.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a8:	d004      	beq.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085aa:	e054      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085ac:	f000 f8b4 	bl	8008718 <HAL_RCCEx_GetD3PCLK1Freq>
 80085b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085b2:	e0a4      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085b4:	4b54      	ldr	r3, [pc, #336]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c0:	d107      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c2:	f107 0318 	add.w	r3, r7, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f8bc 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d0:	e095      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d6:	e092      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d8:	4b4b      	ldr	r3, [pc, #300]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e4:	d107      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 f9fe 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f4:	e083      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fa:	e080      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085fc:	4b42      	ldr	r3, [pc, #264]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b04      	cmp	r3, #4
 8008606:	d109      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008608:	4b3f      	ldr	r3, [pc, #252]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	08db      	lsrs	r3, r3, #3
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	4a3e      	ldr	r2, [pc, #248]	@ (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861a:	e070      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008620:	e06d      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008622:	4b39      	ldr	r3, [pc, #228]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862e:	d102      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008630:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008634:	e063      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863a:	e060      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800863c:	4b32      	ldr	r3, [pc, #200]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008648:	d102      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800864a:	4b32      	ldr	r3, [pc, #200]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	e056      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e053      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865a:	e050      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800865c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008660:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008664:	430b      	orrs	r3, r1
 8008666:	d148      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008668:	4b27      	ldr	r3, [pc, #156]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800866a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008670:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008678:	d02a      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800867a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008680:	d838      	bhi.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800868e:	d00d      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008690:	e030      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008692:	4b1d      	ldr	r3, [pc, #116]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800869a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800869e:	d102      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80086a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a4:	e02b      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086aa:	e028      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ac:	4b16      	ldr	r3, [pc, #88]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b8:	d107      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fae8 	bl	8008c94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c8:	e019      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ce:	e016      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f82e 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e007      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f2:	e004      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f8:	e001      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80086fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008700:	4618      	mov	r0, r3
 8008702:	3740      	adds	r7, #64	@ 0x40
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	003d0900 	.word	0x003d0900
 8008714:	007a1200 	.word	0x007a1200

08008718 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800871c:	f7fe f8ec 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8008720:	4602      	mov	r2, r0
 8008722:	4b06      	ldr	r3, [pc, #24]	@ (800873c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	091b      	lsrs	r3, r3, #4
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	4904      	ldr	r1, [pc, #16]	@ (8008740 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800872e:	5ccb      	ldrb	r3, [r1, r3]
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008738:	4618      	mov	r0, r3
 800873a:	bd80      	pop	{r7, pc}
 800873c:	58024400 	.word	0x58024400
 8008740:	0802245c 	.word	0x0802245c

08008744 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008744:	b480      	push	{r7}
 8008746:	b089      	sub	sp, #36	@ 0x24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800874c:	4ba1      	ldr	r3, [pc, #644]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800874e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008756:	4b9f      	ldr	r3, [pc, #636]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875a:	0b1b      	lsrs	r3, r3, #12
 800875c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008760:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008762:	4b9c      	ldr	r3, [pc, #624]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	091b      	lsrs	r3, r3, #4
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800876e:	4b99      	ldr	r3, [pc, #612]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 8111 	beq.w	80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b02      	cmp	r3, #2
 8008796:	f000 8083 	beq.w	80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b02      	cmp	r3, #2
 800879e:	f200 80a1 	bhi.w	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d056      	beq.n	800885c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087ae:	e099      	b.n	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087b0:	4b88      	ldr	r3, [pc, #544]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d02d      	beq.n	8008818 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087bc:	4b85      	ldr	r3, [pc, #532]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a84      	ldr	r2, [pc, #528]	@ (80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b7b      	ldr	r3, [pc, #492]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008816:	e087      	b.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b6a      	ldr	r3, [pc, #424]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a03 	vldr	s12, [r7, #12]
 800883e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800885a:	e065      	b.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b59      	ldr	r3, [pc, #356]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008882:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889e:	e043      	b.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b48      	ldr	r3, [pc, #288]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e2:	e021      	b.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b37      	ldr	r3, [pc, #220]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008926:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008928:	4b2a      	ldr	r3, [pc, #168]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892c:	0a5b      	lsrs	r3, r3, #9
 800892e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008942:	edd7 6a07 	vldr	s13, [r7, #28]
 8008946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800894a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894e:	ee17 2a90 	vmov	r2, s15
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008956:	4b1f      	ldr	r3, [pc, #124]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895a:	0c1b      	lsrs	r3, r3, #16
 800895c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800896c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008970:	edd7 6a07 	vldr	s13, [r7, #28]
 8008974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897c:	ee17 2a90 	vmov	r2, s15
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008984:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	0e1b      	lsrs	r3, r3, #24
 800898a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800899a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800899e:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089aa:	ee17 2a90 	vmov	r2, s15
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089b2:	e008      	b.n	80089c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	609a      	str	r2, [r3, #8]
}
 80089c6:	bf00      	nop
 80089c8:	3724      	adds	r7, #36	@ 0x24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	03d09000 	.word	0x03d09000
 80089dc:	46000000 	.word	0x46000000
 80089e0:	4c742400 	.word	0x4c742400
 80089e4:	4a742400 	.word	0x4a742400
 80089e8:	4af42400 	.word	0x4af42400

080089ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b089      	sub	sp, #36	@ 0x24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089f4:	4ba1      	ldr	r3, [pc, #644]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089fe:	4b9f      	ldr	r3, [pc, #636]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a02:	0d1b      	lsrs	r3, r3, #20
 8008a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	0a1b      	lsrs	r3, r3, #8
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a16:	4b99      	ldr	r3, [pc, #612]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1a:	08db      	lsrs	r3, r3, #3
 8008a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8111 	beq.w	8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f000 8083 	beq.w	8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	f200 80a1 	bhi.w	8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d056      	beq.n	8008b04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a56:	e099      	b.n	8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a58:	4b88      	ldr	r3, [pc, #544]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d02d      	beq.n	8008ac0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a64:	4b85      	ldr	r3, [pc, #532]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	08db      	lsrs	r3, r3, #3
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	4a84      	ldr	r2, [pc, #528]	@ (8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
 8008a74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008abe:	e087      	b.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b02:	e065      	b.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b59      	ldr	r3, [pc, #356]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b46:	e043      	b.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b48      	ldr	r3, [pc, #288]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b8a:	e021      	b.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b37      	ldr	r3, [pc, #220]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	0a5b      	lsrs	r3, r3, #9
 8008bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf6:	ee17 2a90 	vmov	r2, s15
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c24:	ee17 2a90 	vmov	r2, s15
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c2c:	4b13      	ldr	r3, [pc, #76]	@ (8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c30:	0e1b      	lsrs	r3, r3, #24
 8008c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c52:	ee17 2a90 	vmov	r2, s15
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c5a:	e008      	b.n	8008c6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	609a      	str	r2, [r3, #8]
}
 8008c6e:	bf00      	nop
 8008c70:	3724      	adds	r7, #36	@ 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	03d09000 	.word	0x03d09000
 8008c84:	46000000 	.word	0x46000000
 8008c88:	4c742400 	.word	0x4c742400
 8008c8c:	4a742400 	.word	0x4a742400
 8008c90:	4af42400 	.word	0x4af42400

08008c94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b089      	sub	sp, #36	@ 0x24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ca6:	4b9e      	ldr	r3, [pc, #632]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cb0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008cb2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cbc:	4b98      	ldr	r3, [pc, #608]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	ee07 3a90 	vmov	s15, r3
 8008cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8111 	beq.w	8008f02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	f000 8083 	beq.w	8008dee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	f200 80a1 	bhi.w	8008e32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d056      	beq.n	8008daa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008cfc:	e099      	b.n	8008e32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cfe:	4b88      	ldr	r3, [pc, #544]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d02d      	beq.n	8008d66 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d0a:	4b85      	ldr	r3, [pc, #532]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	08db      	lsrs	r3, r3, #3
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	4a83      	ldr	r2, [pc, #524]	@ (8008f24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d16:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	ee07 3a90 	vmov	s15, r3
 8008d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d34:	4b7a      	ldr	r3, [pc, #488]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3c:	ee07 3a90 	vmov	s15, r3
 8008d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d48:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d60:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d64:	e087      	b.n	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d70:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d78:	4b69      	ldr	r3, [pc, #420]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da8:	e065      	b.n	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008f30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbc:	4b58      	ldr	r3, [pc, #352]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dec:	e043      	b.n	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e00:	4b47      	ldr	r3, [pc, #284]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e14:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e30:	e021      	b.n	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008f2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e44:	4b36      	ldr	r3, [pc, #216]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e58:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008f28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e76:	4b2a      	ldr	r3, [pc, #168]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7a:	0a5b      	lsrs	r3, r3, #9
 8008e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e9c:	ee17 2a90 	vmov	r2, s15
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea8:	0c1b      	lsrs	r3, r3, #16
 8008eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eca:	ee17 2a90 	vmov	r2, s15
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ed2:	4b13      	ldr	r3, [pc, #76]	@ (8008f20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed6:	0e1b      	lsrs	r3, r3, #24
 8008ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef8:	ee17 2a90 	vmov	r2, s15
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f00:	e008      	b.n	8008f14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	3724      	adds	r7, #36	@ 0x24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	58024400 	.word	0x58024400
 8008f24:	03d09000 	.word	0x03d09000
 8008f28:	46000000 	.word	0x46000000
 8008f2c:	4c742400 	.word	0x4c742400
 8008f30:	4a742400 	.word	0x4a742400
 8008f34:	4af42400 	.word	0x4af42400

08008f38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f46:	4b53      	ldr	r3, [pc, #332]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d101      	bne.n	8008f56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e099      	b.n	800908a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f56:	4b4f      	ldr	r3, [pc, #316]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f62:	f7f8 feb9 	bl	8001cd8 <HAL_GetTick>
 8008f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f68:	e008      	b.n	8008f7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f6a:	f7f8 feb5 	bl	8001cd8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e086      	b.n	800908a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f7c:	4b45      	ldr	r3, [pc, #276]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f0      	bne.n	8008f6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f88:	4b42      	ldr	r3, [pc, #264]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	031b      	lsls	r3, r3, #12
 8008f96:	493f      	ldr	r1, [pc, #252]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	025b      	lsls	r3, r3, #9
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	041b      	lsls	r3, r3, #16
 8008fba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	061b      	lsls	r3, r3, #24
 8008fc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fcc:	4931      	ldr	r1, [pc, #196]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008fd2:	4b30      	ldr	r3, [pc, #192]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	492d      	ldr	r1, [pc, #180]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	f023 0220 	bic.w	r2, r3, #32
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	4928      	ldr	r1, [pc, #160]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ff6:	4b27      	ldr	r3, [pc, #156]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	4a26      	ldr	r2, [pc, #152]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	f023 0310 	bic.w	r3, r3, #16
 8009000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009002:	4b24      	ldr	r3, [pc, #144]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009006:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <RCCEx_PLL2_Config+0x160>)
 8009008:	4013      	ands	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	69d2      	ldr	r2, [r2, #28]
 800900e:	00d2      	lsls	r2, r2, #3
 8009010:	4920      	ldr	r1, [pc, #128]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800901c:	f043 0310 	orr.w	r3, r3, #16
 8009020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800902e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009034:	e00f      	b.n	8009056 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d106      	bne.n	800904a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800903c:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	4a14      	ldr	r2, [pc, #80]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009048:	e005      	b.n	8009056 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800904a:	4b12      	ldr	r3, [pc, #72]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904e:	4a11      	ldr	r2, [pc, #68]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009050:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009054:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009056:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a0e      	ldr	r2, [pc, #56]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800905c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009062:	f7f8 fe39 	bl	8001cd8 <HAL_GetTick>
 8009066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009068:	e008      	b.n	800907c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800906a:	f7f8 fe35 	bl	8001cd8 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e006      	b.n	800908a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <RCCEx_PLL2_Config+0x15c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0f0      	beq.n	800906a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	ffff0007 	.word	0xffff0007

0800909c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090aa:	4b53      	ldr	r3, [pc, #332]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d101      	bne.n	80090ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e099      	b.n	80091ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090ba:	4b4f      	ldr	r3, [pc, #316]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a4e      	ldr	r2, [pc, #312]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7f8 fe07 	bl	8001cd8 <HAL_GetTick>
 80090ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090cc:	e008      	b.n	80090e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ce:	f7f8 fe03 	bl	8001cd8 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e086      	b.n	80091ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090e0:	4b45      	ldr	r3, [pc, #276]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f0      	bne.n	80090ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090ec:	4b42      	ldr	r3, [pc, #264]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	051b      	lsls	r3, r3, #20
 80090fa:	493f      	ldr	r1, [pc, #252]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	3b01      	subs	r3, #1
 8009106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	3b01      	subs	r3, #1
 8009110:	025b      	lsls	r3, r3, #9
 8009112:	b29b      	uxth	r3, r3
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	3b01      	subs	r3, #1
 800911c:	041b      	lsls	r3, r3, #16
 800911e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	3b01      	subs	r3, #1
 800912a:	061b      	lsls	r3, r3, #24
 800912c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009130:	4931      	ldr	r1, [pc, #196]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009136:	4b30      	ldr	r3, [pc, #192]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	492d      	ldr	r1, [pc, #180]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009144:	4313      	orrs	r3, r2
 8009146:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009148:	4b2b      	ldr	r3, [pc, #172]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4928      	ldr	r1, [pc, #160]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009156:	4313      	orrs	r3, r2
 8009158:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800915a:	4b27      	ldr	r3, [pc, #156]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	4a26      	ldr	r2, [pc, #152]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009166:	4b24      	ldr	r3, [pc, #144]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916a:	4b24      	ldr	r3, [pc, #144]	@ (80091fc <RCCEx_PLL3_Config+0x160>)
 800916c:	4013      	ands	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	69d2      	ldr	r2, [r2, #28]
 8009172:	00d2      	lsls	r2, r2, #3
 8009174:	4920      	ldr	r1, [pc, #128]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800917a:	4b1f      	ldr	r3, [pc, #124]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a1e      	ldr	r2, [pc, #120]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800918c:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4a19      	ldr	r2, [pc, #100]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 8009192:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009198:	e00f      	b.n	80091ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d106      	bne.n	80091ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091a0:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a14      	ldr	r2, [pc, #80]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091ac:	e005      	b.n	80091ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	4a11      	ldr	r2, [pc, #68]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091ba:	4b0f      	ldr	r3, [pc, #60]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a0e      	ldr	r2, [pc, #56]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c6:	f7f8 fd87 	bl	8001cd8 <HAL_GetTick>
 80091ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091cc:	e008      	b.n	80091e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091ce:	f7f8 fd83 	bl	8001cd8 <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e006      	b.n	80091ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091e0:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <RCCEx_PLL3_Config+0x15c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f0      	beq.n	80091ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	ffff0007 	.word	0xffff0007

08009200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e049      	b.n	80092a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f841 	bl	80092ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	4619      	mov	r1, r3
 800923e:	4610      	mov	r0, r2
 8009240:	f000 fc7e 	bl	8009b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d001      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e05e      	b.n	800939a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a2b      	ldr	r2, [pc, #172]	@ (80093a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d02c      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009306:	d027      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a27      	ldr	r2, [pc, #156]	@ (80093ac <HAL_TIM_Base_Start_IT+0xe8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d022      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a26      	ldr	r2, [pc, #152]	@ (80093b0 <HAL_TIM_Base_Start_IT+0xec>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d01d      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a24      	ldr	r2, [pc, #144]	@ (80093b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d018      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a23      	ldr	r2, [pc, #140]	@ (80093b8 <HAL_TIM_Base_Start_IT+0xf4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d013      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a21      	ldr	r2, [pc, #132]	@ (80093bc <HAL_TIM_Base_Start_IT+0xf8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d00e      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a20      	ldr	r2, [pc, #128]	@ (80093c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d009      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1e      	ldr	r2, [pc, #120]	@ (80093c4 <HAL_TIM_Base_Start_IT+0x100>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d004      	beq.n	8009358 <HAL_TIM_Base_Start_IT+0x94>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1d      	ldr	r2, [pc, #116]	@ (80093c8 <HAL_TIM_Base_Start_IT+0x104>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d115      	bne.n	8009384 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	4b1b      	ldr	r3, [pc, #108]	@ (80093cc <HAL_TIM_Base_Start_IT+0x108>)
 8009360:	4013      	ands	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b06      	cmp	r3, #6
 8009368:	d015      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0xd2>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009370:	d011      	beq.n	8009396 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0201 	orr.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009382:	e008      	b.n	8009396 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e000      	b.n	8009398 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	40010000 	.word	0x40010000
 80093ac:	40000400 	.word	0x40000400
 80093b0:	40000800 	.word	0x40000800
 80093b4:	40000c00 	.word	0x40000c00
 80093b8:	40010400 	.word	0x40010400
 80093bc:	40001800 	.word	0x40001800
 80093c0:	40014000 	.word	0x40014000
 80093c4:	4000e000 	.word	0x4000e000
 80093c8:	4000e400 	.word	0x4000e400
 80093cc:	00010007 	.word	0x00010007

080093d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e049      	b.n	8009476 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7f7 ffac 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f000 fb96 	bl	8009b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d109      	bne.n	80094a4 <HAL_TIM_PWM_Start+0x24>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b01      	cmp	r3, #1
 800949a:	bf14      	ite	ne
 800949c:	2301      	movne	r3, #1
 800949e:	2300      	moveq	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	e03c      	b.n	800951e <HAL_TIM_PWM_Start+0x9e>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d109      	bne.n	80094be <HAL_TIM_PWM_Start+0x3e>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	bf14      	ite	ne
 80094b6:	2301      	movne	r3, #1
 80094b8:	2300      	moveq	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	e02f      	b.n	800951e <HAL_TIM_PWM_Start+0x9e>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d109      	bne.n	80094d8 <HAL_TIM_PWM_Start+0x58>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	bf14      	ite	ne
 80094d0:	2301      	movne	r3, #1
 80094d2:	2300      	moveq	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	e022      	b.n	800951e <HAL_TIM_PWM_Start+0x9e>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b0c      	cmp	r3, #12
 80094dc:	d109      	bne.n	80094f2 <HAL_TIM_PWM_Start+0x72>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	bf14      	ite	ne
 80094ea:	2301      	movne	r3, #1
 80094ec:	2300      	moveq	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	e015      	b.n	800951e <HAL_TIM_PWM_Start+0x9e>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b10      	cmp	r3, #16
 80094f6:	d109      	bne.n	800950c <HAL_TIM_PWM_Start+0x8c>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b01      	cmp	r3, #1
 8009502:	bf14      	ite	ne
 8009504:	2301      	movne	r3, #1
 8009506:	2300      	moveq	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	e008      	b.n	800951e <HAL_TIM_PWM_Start+0x9e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	bf14      	ite	ne
 8009518:	2301      	movne	r3, #1
 800951a:	2300      	moveq	r3, #0
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e0ab      	b.n	800967e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <HAL_TIM_PWM_Start+0xb6>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009534:	e023      	b.n	800957e <HAL_TIM_PWM_Start+0xfe>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b04      	cmp	r3, #4
 800953a:	d104      	bne.n	8009546 <HAL_TIM_PWM_Start+0xc6>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009544:	e01b      	b.n	800957e <HAL_TIM_PWM_Start+0xfe>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b08      	cmp	r3, #8
 800954a:	d104      	bne.n	8009556 <HAL_TIM_PWM_Start+0xd6>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009554:	e013      	b.n	800957e <HAL_TIM_PWM_Start+0xfe>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b0c      	cmp	r3, #12
 800955a:	d104      	bne.n	8009566 <HAL_TIM_PWM_Start+0xe6>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009564:	e00b      	b.n	800957e <HAL_TIM_PWM_Start+0xfe>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b10      	cmp	r3, #16
 800956a:	d104      	bne.n	8009576 <HAL_TIM_PWM_Start+0xf6>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009574:	e003      	b.n	800957e <HAL_TIM_PWM_Start+0xfe>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2202      	movs	r2, #2
 800957a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2201      	movs	r2, #1
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fe62 	bl	800a250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a3d      	ldr	r2, [pc, #244]	@ (8009688 <HAL_TIM_PWM_Start+0x208>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d013      	beq.n	80095be <HAL_TIM_PWM_Start+0x13e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a3c      	ldr	r2, [pc, #240]	@ (800968c <HAL_TIM_PWM_Start+0x20c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00e      	beq.n	80095be <HAL_TIM_PWM_Start+0x13e>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a3a      	ldr	r2, [pc, #232]	@ (8009690 <HAL_TIM_PWM_Start+0x210>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d009      	beq.n	80095be <HAL_TIM_PWM_Start+0x13e>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a39      	ldr	r2, [pc, #228]	@ (8009694 <HAL_TIM_PWM_Start+0x214>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <HAL_TIM_PWM_Start+0x13e>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a37      	ldr	r2, [pc, #220]	@ (8009698 <HAL_TIM_PWM_Start+0x218>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d101      	bne.n	80095c2 <HAL_TIM_PWM_Start+0x142>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <HAL_TIM_PWM_Start+0x144>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009688 <HAL_TIM_PWM_Start+0x208>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d02c      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ea:	d027      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a2a      	ldr	r2, [pc, #168]	@ (800969c <HAL_TIM_PWM_Start+0x21c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d022      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a29      	ldr	r2, [pc, #164]	@ (80096a0 <HAL_TIM_PWM_Start+0x220>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d01d      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a27      	ldr	r2, [pc, #156]	@ (80096a4 <HAL_TIM_PWM_Start+0x224>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d018      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a1f      	ldr	r2, [pc, #124]	@ (800968c <HAL_TIM_PWM_Start+0x20c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a23      	ldr	r2, [pc, #140]	@ (80096a8 <HAL_TIM_PWM_Start+0x228>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00e      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1b      	ldr	r2, [pc, #108]	@ (8009690 <HAL_TIM_PWM_Start+0x210>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d009      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <HAL_TIM_PWM_Start+0x22c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d004      	beq.n	800963c <HAL_TIM_PWM_Start+0x1bc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1e      	ldr	r2, [pc, #120]	@ (80096b0 <HAL_TIM_PWM_Start+0x230>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d115      	bne.n	8009668 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689a      	ldr	r2, [r3, #8]
 8009642:	4b1c      	ldr	r3, [pc, #112]	@ (80096b4 <HAL_TIM_PWM_Start+0x234>)
 8009644:	4013      	ands	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b06      	cmp	r3, #6
 800964c:	d015      	beq.n	800967a <HAL_TIM_PWM_Start+0x1fa>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009654:	d011      	beq.n	800967a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f042 0201 	orr.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009666:	e008      	b.n	800967a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	e000      	b.n	800967c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40010000 	.word	0x40010000
 800968c:	40010400 	.word	0x40010400
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400
 8009698:	40014800 	.word	0x40014800
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40001800 	.word	0x40001800
 80096ac:	4000e000 	.word	0x4000e000
 80096b0:	4000e400 	.word	0x4000e400
 80096b4:	00010007 	.word	0x00010007

080096b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d020      	beq.n	800971c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01b      	beq.n	800971c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f06f 0202 	mvn.w	r2, #2
 80096ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9fe 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 8009708:	e005      	b.n	8009716 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f9f0 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa01 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d020      	beq.n	8009768 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01b      	beq.n	8009768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f06f 0204 	mvn.w	r2, #4
 8009738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f9d8 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 8009754:	e005      	b.n	8009762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f9ca 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f9db 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d020      	beq.n	80097b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01b      	beq.n	80097b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f06f 0208 	mvn.w	r2, #8
 8009784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2204      	movs	r2, #4
 800978a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f003 0303 	and.w	r3, r3, #3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9b2 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 80097a0:	e005      	b.n	80097ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9a4 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9b5 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d020      	beq.n	8009800 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01b      	beq.n	8009800 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f06f 0210 	mvn.w	r2, #16
 80097d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2208      	movs	r2, #8
 80097d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f98c 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 80097ec:	e005      	b.n	80097fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f97e 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f98f 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00c      	beq.n	8009824 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f06f 0201 	mvn.w	r2, #1
 800981c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f7 fcac 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00c      	beq.n	8009852 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800983e:	2b00      	cmp	r3, #0
 8009840:	d007      	beq.n	8009852 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800984a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fdcb 	bl	800a3e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00c      	beq.n	8009876 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009862:	2b00      	cmp	r3, #0
 8009864:	d007      	beq.n	8009876 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800986e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fdc3 	bl	800a3fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00c      	beq.n	800989a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f949 	bl	8009b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00c      	beq.n	80098be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f06f 0220 	mvn.w	r2, #32
 80098b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fd8b 	bl	800a3d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e0ff      	b.n	8009ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b14      	cmp	r3, #20
 80098f2:	f200 80f0 	bhi.w	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80098f6:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009951 	.word	0x08009951
 8009900:	08009ad7 	.word	0x08009ad7
 8009904:	08009ad7 	.word	0x08009ad7
 8009908:	08009ad7 	.word	0x08009ad7
 800990c:	08009991 	.word	0x08009991
 8009910:	08009ad7 	.word	0x08009ad7
 8009914:	08009ad7 	.word	0x08009ad7
 8009918:	08009ad7 	.word	0x08009ad7
 800991c:	080099d3 	.word	0x080099d3
 8009920:	08009ad7 	.word	0x08009ad7
 8009924:	08009ad7 	.word	0x08009ad7
 8009928:	08009ad7 	.word	0x08009ad7
 800992c:	08009a13 	.word	0x08009a13
 8009930:	08009ad7 	.word	0x08009ad7
 8009934:	08009ad7 	.word	0x08009ad7
 8009938:	08009ad7 	.word	0x08009ad7
 800993c:	08009a55 	.word	0x08009a55
 8009940:	08009ad7 	.word	0x08009ad7
 8009944:	08009ad7 	.word	0x08009ad7
 8009948:	08009ad7 	.word	0x08009ad7
 800994c:	08009a95 	.word	0x08009a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68b9      	ldr	r1, [r7, #8]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f9a4 	bl	8009ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699a      	ldr	r2, [r3, #24]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0208 	orr.w	r2, r2, #8
 800996a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699a      	ldr	r2, [r3, #24]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0204 	bic.w	r2, r2, #4
 800997a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6999      	ldr	r1, [r3, #24]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	691a      	ldr	r2, [r3, #16]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	619a      	str	r2, [r3, #24]
      break;
 800998e:	e0a5      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fa14 	bl	8009dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699a      	ldr	r2, [r3, #24]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6999      	ldr	r1, [r3, #24]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	619a      	str	r2, [r3, #24]
      break;
 80099d0:	e084      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 fa7d 	bl	8009ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69da      	ldr	r2, [r3, #28]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0208 	orr.w	r2, r2, #8
 80099ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69da      	ldr	r2, [r3, #28]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f022 0204 	bic.w	r2, r2, #4
 80099fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69d9      	ldr	r1, [r3, #28]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	691a      	ldr	r2, [r3, #16]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	61da      	str	r2, [r3, #28]
      break;
 8009a10:	e064      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68b9      	ldr	r1, [r7, #8]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fae5 	bl	8009fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69da      	ldr	r2, [r3, #28]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69da      	ldr	r2, [r3, #28]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69d9      	ldr	r1, [r3, #28]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	021a      	lsls	r2, r3, #8
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	61da      	str	r2, [r3, #28]
      break;
 8009a52:	e043      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fb2e 	bl	800a0bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0208 	orr.w	r2, r2, #8
 8009a6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0204 	bic.w	r2, r2, #4
 8009a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691a      	ldr	r2, [r3, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a92:	e023      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68b9      	ldr	r1, [r7, #8]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fb72 	bl	800a184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009abe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ad4:	e002      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8009ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop

08009af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a4a      	ldr	r2, [pc, #296]	@ (8009c7c <TIM_Base_SetConfig+0x13c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5e:	d00f      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a47      	ldr	r2, [pc, #284]	@ (8009c80 <TIM_Base_SetConfig+0x140>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a46      	ldr	r2, [pc, #280]	@ (8009c84 <TIM_Base_SetConfig+0x144>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a45      	ldr	r2, [pc, #276]	@ (8009c88 <TIM_Base_SetConfig+0x148>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a44      	ldr	r2, [pc, #272]	@ (8009c8c <TIM_Base_SetConfig+0x14c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d108      	bne.n	8009b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a39      	ldr	r2, [pc, #228]	@ (8009c7c <TIM_Base_SetConfig+0x13c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d027      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba0:	d023      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a36      	ldr	r2, [pc, #216]	@ (8009c80 <TIM_Base_SetConfig+0x140>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01f      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a35      	ldr	r2, [pc, #212]	@ (8009c84 <TIM_Base_SetConfig+0x144>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d01b      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a34      	ldr	r2, [pc, #208]	@ (8009c88 <TIM_Base_SetConfig+0x148>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d017      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a33      	ldr	r2, [pc, #204]	@ (8009c8c <TIM_Base_SetConfig+0x14c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a32      	ldr	r2, [pc, #200]	@ (8009c90 <TIM_Base_SetConfig+0x150>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00f      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a31      	ldr	r2, [pc, #196]	@ (8009c94 <TIM_Base_SetConfig+0x154>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00b      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a30      	ldr	r2, [pc, #192]	@ (8009c98 <TIM_Base_SetConfig+0x158>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d007      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8009c9c <TIM_Base_SetConfig+0x15c>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_Base_SetConfig+0xaa>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a2e      	ldr	r2, [pc, #184]	@ (8009ca0 <TIM_Base_SetConfig+0x160>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d108      	bne.n	8009bfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a16      	ldr	r2, [pc, #88]	@ (8009c7c <TIM_Base_SetConfig+0x13c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00f      	beq.n	8009c48 <TIM_Base_SetConfig+0x108>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a18      	ldr	r2, [pc, #96]	@ (8009c8c <TIM_Base_SetConfig+0x14c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d00b      	beq.n	8009c48 <TIM_Base_SetConfig+0x108>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a17      	ldr	r2, [pc, #92]	@ (8009c90 <TIM_Base_SetConfig+0x150>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d007      	beq.n	8009c48 <TIM_Base_SetConfig+0x108>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a16      	ldr	r2, [pc, #88]	@ (8009c94 <TIM_Base_SetConfig+0x154>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d003      	beq.n	8009c48 <TIM_Base_SetConfig+0x108>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a15      	ldr	r2, [pc, #84]	@ (8009c98 <TIM_Base_SetConfig+0x158>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d103      	bne.n	8009c50 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d105      	bne.n	8009c6e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f023 0201 	bic.w	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	611a      	str	r2, [r3, #16]
  }
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	40010000 	.word	0x40010000
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40010400 	.word	0x40010400
 8009c90:	40014000 	.word	0x40014000
 8009c94:	40014400 	.word	0x40014400
 8009c98:	40014800 	.word	0x40014800
 8009c9c:	4000e000 	.word	0x4000e000
 8009ca0:	4000e400 	.word	0x4000e400

08009ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	f023 0201 	bic.w	r2, r3, #1
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4b37      	ldr	r3, [pc, #220]	@ (8009dac <TIM_OC1_SetConfig+0x108>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f023 0302 	bic.w	r3, r3, #2
 8009cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8009db0 <TIM_OC1_SetConfig+0x10c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00f      	beq.n	8009d20 <TIM_OC1_SetConfig+0x7c>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a2c      	ldr	r2, [pc, #176]	@ (8009db4 <TIM_OC1_SetConfig+0x110>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00b      	beq.n	8009d20 <TIM_OC1_SetConfig+0x7c>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8009db8 <TIM_OC1_SetConfig+0x114>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d007      	beq.n	8009d20 <TIM_OC1_SetConfig+0x7c>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a2a      	ldr	r2, [pc, #168]	@ (8009dbc <TIM_OC1_SetConfig+0x118>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_OC1_SetConfig+0x7c>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a29      	ldr	r2, [pc, #164]	@ (8009dc0 <TIM_OC1_SetConfig+0x11c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d10c      	bne.n	8009d3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f023 0308 	bic.w	r3, r3, #8
 8009d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f023 0304 	bic.w	r3, r3, #4
 8009d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009db0 <TIM_OC1_SetConfig+0x10c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00f      	beq.n	8009d62 <TIM_OC1_SetConfig+0xbe>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a1b      	ldr	r2, [pc, #108]	@ (8009db4 <TIM_OC1_SetConfig+0x110>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00b      	beq.n	8009d62 <TIM_OC1_SetConfig+0xbe>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009db8 <TIM_OC1_SetConfig+0x114>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d007      	beq.n	8009d62 <TIM_OC1_SetConfig+0xbe>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a19      	ldr	r2, [pc, #100]	@ (8009dbc <TIM_OC1_SetConfig+0x118>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_OC1_SetConfig+0xbe>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a18      	ldr	r2, [pc, #96]	@ (8009dc0 <TIM_OC1_SetConfig+0x11c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d111      	bne.n	8009d86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	621a      	str	r2, [r3, #32]
}
 8009da0:	bf00      	nop
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	fffeff8f 	.word	0xfffeff8f
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	40014800 	.word	0x40014800

08009dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	f023 0210 	bic.w	r2, r3, #16
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4b34      	ldr	r3, [pc, #208]	@ (8009ec0 <TIM_OC2_SetConfig+0xfc>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	021b      	lsls	r3, r3, #8
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f023 0320 	bic.w	r3, r3, #32
 8009e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	011b      	lsls	r3, r3, #4
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a29      	ldr	r2, [pc, #164]	@ (8009ec4 <TIM_OC2_SetConfig+0x100>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <TIM_OC2_SetConfig+0x68>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a28      	ldr	r2, [pc, #160]	@ (8009ec8 <TIM_OC2_SetConfig+0x104>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d10d      	bne.n	8009e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ec4 <TIM_OC2_SetConfig+0x100>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00f      	beq.n	8009e70 <TIM_OC2_SetConfig+0xac>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a1d      	ldr	r2, [pc, #116]	@ (8009ec8 <TIM_OC2_SetConfig+0x104>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d00b      	beq.n	8009e70 <TIM_OC2_SetConfig+0xac>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8009ecc <TIM_OC2_SetConfig+0x108>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d007      	beq.n	8009e70 <TIM_OC2_SetConfig+0xac>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed0 <TIM_OC2_SetConfig+0x10c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d003      	beq.n	8009e70 <TIM_OC2_SetConfig+0xac>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ed4 <TIM_OC2_SetConfig+0x110>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d113      	bne.n	8009e98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	621a      	str	r2, [r3, #32]
}
 8009eb2:	bf00      	nop
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	feff8fff 	.word	0xfeff8fff
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40010400 	.word	0x40010400
 8009ecc:	40014000 	.word	0x40014000
 8009ed0:	40014400 	.word	0x40014400
 8009ed4:	40014800 	.word	0x40014800

08009ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4b33      	ldr	r3, [pc, #204]	@ (8009fd0 <TIM_OC3_SetConfig+0xf8>)
 8009f04:	4013      	ands	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
 8009f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a28      	ldr	r2, [pc, #160]	@ (8009fd4 <TIM_OC3_SetConfig+0xfc>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d003      	beq.n	8009f3e <TIM_OC3_SetConfig+0x66>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a27      	ldr	r2, [pc, #156]	@ (8009fd8 <TIM_OC3_SetConfig+0x100>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d10d      	bne.n	8009f5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd4 <TIM_OC3_SetConfig+0xfc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00f      	beq.n	8009f82 <TIM_OC3_SetConfig+0xaa>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a1c      	ldr	r2, [pc, #112]	@ (8009fd8 <TIM_OC3_SetConfig+0x100>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00b      	beq.n	8009f82 <TIM_OC3_SetConfig+0xaa>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fdc <TIM_OC3_SetConfig+0x104>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d007      	beq.n	8009f82 <TIM_OC3_SetConfig+0xaa>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1a      	ldr	r2, [pc, #104]	@ (8009fe0 <TIM_OC3_SetConfig+0x108>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d003      	beq.n	8009f82 <TIM_OC3_SetConfig+0xaa>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a19      	ldr	r2, [pc, #100]	@ (8009fe4 <TIM_OC3_SetConfig+0x10c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d113      	bne.n	8009faa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	621a      	str	r2, [r3, #32]
}
 8009fc4:	bf00      	nop
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	fffeff8f 	.word	0xfffeff8f
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800

08009fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b24      	ldr	r3, [pc, #144]	@ (800a0a4 <TIM_OC4_SetConfig+0xbc>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	031b      	lsls	r3, r3, #12
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a19      	ldr	r2, [pc, #100]	@ (800a0a8 <TIM_OC4_SetConfig+0xc0>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00f      	beq.n	800a068 <TIM_OC4_SetConfig+0x80>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a18      	ldr	r2, [pc, #96]	@ (800a0ac <TIM_OC4_SetConfig+0xc4>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00b      	beq.n	800a068 <TIM_OC4_SetConfig+0x80>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a17      	ldr	r2, [pc, #92]	@ (800a0b0 <TIM_OC4_SetConfig+0xc8>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d007      	beq.n	800a068 <TIM_OC4_SetConfig+0x80>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a16      	ldr	r2, [pc, #88]	@ (800a0b4 <TIM_OC4_SetConfig+0xcc>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_OC4_SetConfig+0x80>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a15      	ldr	r2, [pc, #84]	@ (800a0b8 <TIM_OC4_SetConfig+0xd0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d109      	bne.n	800a07c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a06e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	019b      	lsls	r3, r3, #6
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4313      	orrs	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	621a      	str	r2, [r3, #32]
}
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	feff8fff 	.word	0xfeff8fff
 800a0a8:	40010000 	.word	0x40010000
 800a0ac:	40010400 	.word	0x40010400
 800a0b0:	40014000 	.word	0x40014000
 800a0b4:	40014400 	.word	0x40014400
 800a0b8:	40014800 	.word	0x40014800

0800a0bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	4b21      	ldr	r3, [pc, #132]	@ (800a16c <TIM_OC5_SetConfig+0xb0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	041b      	lsls	r3, r3, #16
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a18      	ldr	r2, [pc, #96]	@ (800a170 <TIM_OC5_SetConfig+0xb4>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d00f      	beq.n	800a132 <TIM_OC5_SetConfig+0x76>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a17      	ldr	r2, [pc, #92]	@ (800a174 <TIM_OC5_SetConfig+0xb8>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00b      	beq.n	800a132 <TIM_OC5_SetConfig+0x76>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a16      	ldr	r2, [pc, #88]	@ (800a178 <TIM_OC5_SetConfig+0xbc>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d007      	beq.n	800a132 <TIM_OC5_SetConfig+0x76>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a15      	ldr	r2, [pc, #84]	@ (800a17c <TIM_OC5_SetConfig+0xc0>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_OC5_SetConfig+0x76>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a14      	ldr	r2, [pc, #80]	@ (800a180 <TIM_OC5_SetConfig+0xc4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d109      	bne.n	800a146 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	621a      	str	r2, [r3, #32]
}
 800a160:	bf00      	nop
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	fffeff8f 	.word	0xfffeff8f
 800a170:	40010000 	.word	0x40010000
 800a174:	40010400 	.word	0x40010400
 800a178:	40014000 	.word	0x40014000
 800a17c:	40014400 	.word	0x40014400
 800a180:	40014800 	.word	0x40014800

0800a184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4b22      	ldr	r3, [pc, #136]	@ (800a238 <TIM_OC6_SetConfig+0xb4>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	051b      	lsls	r3, r3, #20
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a19      	ldr	r2, [pc, #100]	@ (800a23c <TIM_OC6_SetConfig+0xb8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00f      	beq.n	800a1fc <TIM_OC6_SetConfig+0x78>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a18      	ldr	r2, [pc, #96]	@ (800a240 <TIM_OC6_SetConfig+0xbc>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00b      	beq.n	800a1fc <TIM_OC6_SetConfig+0x78>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a17      	ldr	r2, [pc, #92]	@ (800a244 <TIM_OC6_SetConfig+0xc0>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d007      	beq.n	800a1fc <TIM_OC6_SetConfig+0x78>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a16      	ldr	r2, [pc, #88]	@ (800a248 <TIM_OC6_SetConfig+0xc4>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_OC6_SetConfig+0x78>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a15      	ldr	r2, [pc, #84]	@ (800a24c <TIM_OC6_SetConfig+0xc8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d109      	bne.n	800a210 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	029b      	lsls	r3, r3, #10
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	621a      	str	r2, [r3, #32]
}
 800a22a:	bf00      	nop
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	feff8fff 	.word	0xfeff8fff
 800a23c:	40010000 	.word	0x40010000
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 031f 	and.w	r3, r3, #31
 800a262:	2201      	movs	r2, #1
 800a264:	fa02 f303 	lsl.w	r3, r2, r3
 800a268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a1a      	ldr	r2, [r3, #32]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	43db      	mvns	r3, r3
 800a272:	401a      	ands	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a1a      	ldr	r2, [r3, #32]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	fa01 f303 	lsl.w	r3, r1, r3
 800a288:	431a      	orrs	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	621a      	str	r2, [r3, #32]
}
 800a28e:	bf00      	nop
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
	...

0800a29c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e077      	b.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a35      	ldr	r2, [pc, #212]	@ (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a34      	ldr	r2, [pc, #208]	@ (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d108      	bne.n	800a2fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a2ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a25      	ldr	r2, [pc, #148]	@ (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d02c      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a326:	d027      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a22      	ldr	r2, [pc, #136]	@ (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d022      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a21      	ldr	r2, [pc, #132]	@ (800a3bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d01d      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a1f      	ldr	r2, [pc, #124]	@ (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d018      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a1a      	ldr	r2, [pc, #104]	@ (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d013      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a1b      	ldr	r2, [pc, #108]	@ (800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00e      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a1a      	ldr	r2, [pc, #104]	@ (800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d009      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a18      	ldr	r2, [pc, #96]	@ (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a17      	ldr	r2, [pc, #92]	@ (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d10c      	bne.n	800a392 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a37e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	4313      	orrs	r3, r2
 800a388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400
 800a3b8:	40000400 	.word	0x40000400
 800a3bc:	40000800 	.word	0x40000800
 800a3c0:	40000c00 	.word	0x40000c00
 800a3c4:	40001800 	.word	0x40001800
 800a3c8:	40014000 	.word	0x40014000
 800a3cc:	4000e000 	.word	0x4000e000
 800a3d0:	4000e400 	.word	0x4000e400

0800a3d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e042      	b.n	800a4a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7f6 ffe5 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2224      	movs	r2, #36	@ 0x24
 800a43e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0201 	bic.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 ff22 	bl	800b2a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f8b3 	bl	800a5cc <UART_SetConfig>
 800a466:	4603      	mov	r3, r0
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e01b      	b.n	800a4a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a47e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a48e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 ffa1 	bl	800b3e8 <UART_CheckIdleState>
 800a4a6:	4603      	mov	r3, r0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	@ 0x28
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d17b      	bne.n	800a5c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <HAL_UART_Transmit+0x26>
 800a4d0:	88fb      	ldrh	r3, [r7, #6]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e074      	b.n	800a5c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2221      	movs	r2, #33	@ 0x21
 800a4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4ea:	f7f7 fbf5 	bl	8001cd8 <HAL_GetTick>
 800a4ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	88fa      	ldrh	r2, [r7, #6]
 800a4f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	88fa      	ldrh	r2, [r7, #6]
 800a4fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a508:	d108      	bne.n	800a51c <HAL_UART_Transmit+0x6c>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d104      	bne.n	800a51c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	e003      	b.n	800a524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a524:	e030      	b.n	800a588 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	2180      	movs	r1, #128	@ 0x80
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f001 f803 	bl	800b53c <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e03d      	b.n	800a5c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10b      	bne.n	800a566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a55c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	3302      	adds	r3, #2
 800a562:	61bb      	str	r3, [r7, #24]
 800a564:	e007      	b.n	800a576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	3301      	adds	r3, #1
 800a574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	3b01      	subs	r3, #1
 800a580:	b29a      	uxth	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a58e:	b29b      	uxth	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1c8      	bne.n	800a526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2200      	movs	r2, #0
 800a59c:	2140      	movs	r1, #64	@ 0x40
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 ffcc 	bl	800b53c <UART_WaitOnFlagUntilTimeout>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d005      	beq.n	800a5b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e006      	b.n	800a5c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e000      	b.n	800a5c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a5c2:	2302      	movs	r3, #2
  }
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3720      	adds	r7, #32
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5d0:	b092      	sub	sp, #72	@ 0x48
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4bbe      	ldr	r3, [pc, #760]	@ (800a8f4 <UART_SetConfig+0x328>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a604:	430b      	orrs	r3, r1
 800a606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4ab3      	ldr	r2, [pc, #716]	@ (800a8f8 <UART_SetConfig+0x32c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d004      	beq.n	800a638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a634:	4313      	orrs	r3, r2
 800a636:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689a      	ldr	r2, [r3, #8]
 800a63e:	4baf      	ldr	r3, [pc, #700]	@ (800a8fc <UART_SetConfig+0x330>)
 800a640:	4013      	ands	r3, r2
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	6812      	ldr	r2, [r2, #0]
 800a646:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a648:	430b      	orrs	r3, r1
 800a64a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a652:	f023 010f 	bic.w	r1, r3, #15
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4aa6      	ldr	r2, [pc, #664]	@ (800a900 <UART_SetConfig+0x334>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d177      	bne.n	800a75c <UART_SetConfig+0x190>
 800a66c:	4ba5      	ldr	r3, [pc, #660]	@ (800a904 <UART_SetConfig+0x338>)
 800a66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a674:	2b28      	cmp	r3, #40	@ 0x28
 800a676:	d86d      	bhi.n	800a754 <UART_SetConfig+0x188>
 800a678:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <UART_SetConfig+0xb4>)
 800a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67e:	bf00      	nop
 800a680:	0800a725 	.word	0x0800a725
 800a684:	0800a755 	.word	0x0800a755
 800a688:	0800a755 	.word	0x0800a755
 800a68c:	0800a755 	.word	0x0800a755
 800a690:	0800a755 	.word	0x0800a755
 800a694:	0800a755 	.word	0x0800a755
 800a698:	0800a755 	.word	0x0800a755
 800a69c:	0800a755 	.word	0x0800a755
 800a6a0:	0800a72d 	.word	0x0800a72d
 800a6a4:	0800a755 	.word	0x0800a755
 800a6a8:	0800a755 	.word	0x0800a755
 800a6ac:	0800a755 	.word	0x0800a755
 800a6b0:	0800a755 	.word	0x0800a755
 800a6b4:	0800a755 	.word	0x0800a755
 800a6b8:	0800a755 	.word	0x0800a755
 800a6bc:	0800a755 	.word	0x0800a755
 800a6c0:	0800a735 	.word	0x0800a735
 800a6c4:	0800a755 	.word	0x0800a755
 800a6c8:	0800a755 	.word	0x0800a755
 800a6cc:	0800a755 	.word	0x0800a755
 800a6d0:	0800a755 	.word	0x0800a755
 800a6d4:	0800a755 	.word	0x0800a755
 800a6d8:	0800a755 	.word	0x0800a755
 800a6dc:	0800a755 	.word	0x0800a755
 800a6e0:	0800a73d 	.word	0x0800a73d
 800a6e4:	0800a755 	.word	0x0800a755
 800a6e8:	0800a755 	.word	0x0800a755
 800a6ec:	0800a755 	.word	0x0800a755
 800a6f0:	0800a755 	.word	0x0800a755
 800a6f4:	0800a755 	.word	0x0800a755
 800a6f8:	0800a755 	.word	0x0800a755
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a745 	.word	0x0800a745
 800a704:	0800a755 	.word	0x0800a755
 800a708:	0800a755 	.word	0x0800a755
 800a70c:	0800a755 	.word	0x0800a755
 800a710:	0800a755 	.word	0x0800a755
 800a714:	0800a755 	.word	0x0800a755
 800a718:	0800a755 	.word	0x0800a755
 800a71c:	0800a755 	.word	0x0800a755
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e326      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e322      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e31e      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e31a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a744:	2320      	movs	r3, #32
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e316      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a74c:	2340      	movs	r3, #64	@ 0x40
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e312      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a754:	2380      	movs	r3, #128	@ 0x80
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e30e      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a69      	ldr	r2, [pc, #420]	@ (800a908 <UART_SetConfig+0x33c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d130      	bne.n	800a7c8 <UART_SetConfig+0x1fc>
 800a766:	4b67      	ldr	r3, [pc, #412]	@ (800a904 <UART_SetConfig+0x338>)
 800a768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d826      	bhi.n	800a7c0 <UART_SetConfig+0x1f4>
 800a772:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <UART_SetConfig+0x1ac>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e2f0      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e2ec      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a6:	e2e8      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ae:	e2e4      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b6:	e2e0      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7b8:	2340      	movs	r3, #64	@ 0x40
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e2dc      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7c0:	2380      	movs	r3, #128	@ 0x80
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e2d8      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a4f      	ldr	r2, [pc, #316]	@ (800a90c <UART_SetConfig+0x340>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d130      	bne.n	800a834 <UART_SetConfig+0x268>
 800a7d2:	4b4c      	ldr	r3, [pc, #304]	@ (800a904 <UART_SetConfig+0x338>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d826      	bhi.n	800a82c <UART_SetConfig+0x260>
 800a7de:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <UART_SetConfig+0x218>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a7fd 	.word	0x0800a7fd
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e2ba      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e2b6      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a812:	e2b2      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e2ae      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a81c:	2320      	movs	r3, #32
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a822:	e2aa      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a824:	2340      	movs	r3, #64	@ 0x40
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82a:	e2a6      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a82c:	2380      	movs	r3, #128	@ 0x80
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e2a2      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a35      	ldr	r2, [pc, #212]	@ (800a910 <UART_SetConfig+0x344>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d130      	bne.n	800a8a0 <UART_SetConfig+0x2d4>
 800a83e:	4b31      	ldr	r3, [pc, #196]	@ (800a904 <UART_SetConfig+0x338>)
 800a840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b05      	cmp	r3, #5
 800a848:	d826      	bhi.n	800a898 <UART_SetConfig+0x2cc>
 800a84a:	a201      	add	r2, pc, #4	@ (adr r2, 800a850 <UART_SetConfig+0x284>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a869 	.word	0x0800a869
 800a854:	0800a871 	.word	0x0800a871
 800a858:	0800a879 	.word	0x0800a879
 800a85c:	0800a881 	.word	0x0800a881
 800a860:	0800a889 	.word	0x0800a889
 800a864:	0800a891 	.word	0x0800a891
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e284      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a870:	2304      	movs	r3, #4
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e280      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a878:	2308      	movs	r3, #8
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e27c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a880:	2310      	movs	r3, #16
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e278      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a888:	2320      	movs	r3, #32
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e274      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a890:	2340      	movs	r3, #64	@ 0x40
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e270      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a898:	2380      	movs	r3, #128	@ 0x80
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e26c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a914 <UART_SetConfig+0x348>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d142      	bne.n	800a930 <UART_SetConfig+0x364>
 800a8aa:	4b16      	ldr	r3, [pc, #88]	@ (800a904 <UART_SetConfig+0x338>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d838      	bhi.n	800a928 <UART_SetConfig+0x35c>
 800a8b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8bc <UART_SetConfig+0x2f0>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8e5 	.word	0x0800a8e5
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a919 	.word	0x0800a919
 800a8d0:	0800a921 	.word	0x0800a921
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e24e      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e24a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e246      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e242      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a8f4:	cfff69f3 	.word	0xcfff69f3
 800a8f8:	58000c00 	.word	0x58000c00
 800a8fc:	11fff4ff 	.word	0x11fff4ff
 800a900:	40011000 	.word	0x40011000
 800a904:	58024400 	.word	0x58024400
 800a908:	40004400 	.word	0x40004400
 800a90c:	40004800 	.word	0x40004800
 800a910:	40004c00 	.word	0x40004c00
 800a914:	40005000 	.word	0x40005000
 800a918:	2320      	movs	r3, #32
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e22c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a920:	2340      	movs	r3, #64	@ 0x40
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e228      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a928:	2380      	movs	r3, #128	@ 0x80
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92e:	e224      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4ab1      	ldr	r2, [pc, #708]	@ (800abfc <UART_SetConfig+0x630>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d176      	bne.n	800aa28 <UART_SetConfig+0x45c>
 800a93a:	4bb1      	ldr	r3, [pc, #708]	@ (800ac00 <UART_SetConfig+0x634>)
 800a93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a93e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a942:	2b28      	cmp	r3, #40	@ 0x28
 800a944:	d86c      	bhi.n	800aa20 <UART_SetConfig+0x454>
 800a946:	a201      	add	r2, pc, #4	@ (adr r2, 800a94c <UART_SetConfig+0x380>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a9f1 	.word	0x0800a9f1
 800a950:	0800aa21 	.word	0x0800aa21
 800a954:	0800aa21 	.word	0x0800aa21
 800a958:	0800aa21 	.word	0x0800aa21
 800a95c:	0800aa21 	.word	0x0800aa21
 800a960:	0800aa21 	.word	0x0800aa21
 800a964:	0800aa21 	.word	0x0800aa21
 800a968:	0800aa21 	.word	0x0800aa21
 800a96c:	0800a9f9 	.word	0x0800a9f9
 800a970:	0800aa21 	.word	0x0800aa21
 800a974:	0800aa21 	.word	0x0800aa21
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800aa21 	.word	0x0800aa21
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa21 	.word	0x0800aa21
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa01 	.word	0x0800aa01
 800a990:	0800aa21 	.word	0x0800aa21
 800a994:	0800aa21 	.word	0x0800aa21
 800a998:	0800aa21 	.word	0x0800aa21
 800a99c:	0800aa21 	.word	0x0800aa21
 800a9a0:	0800aa21 	.word	0x0800aa21
 800a9a4:	0800aa21 	.word	0x0800aa21
 800a9a8:	0800aa21 	.word	0x0800aa21
 800a9ac:	0800aa09 	.word	0x0800aa09
 800a9b0:	0800aa21 	.word	0x0800aa21
 800a9b4:	0800aa21 	.word	0x0800aa21
 800a9b8:	0800aa21 	.word	0x0800aa21
 800a9bc:	0800aa21 	.word	0x0800aa21
 800a9c0:	0800aa21 	.word	0x0800aa21
 800a9c4:	0800aa21 	.word	0x0800aa21
 800a9c8:	0800aa21 	.word	0x0800aa21
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800aa21 	.word	0x0800aa21
 800a9d8:	0800aa21 	.word	0x0800aa21
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	0800aa21 	.word	0x0800aa21
 800a9e4:	0800aa21 	.word	0x0800aa21
 800a9e8:	0800aa21 	.word	0x0800aa21
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e1c0      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	e1bc      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa06:	e1b8      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0e:	e1b4      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa10:	2320      	movs	r3, #32
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa16:	e1b0      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa18:	2340      	movs	r3, #64	@ 0x40
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa1e:	e1ac      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa20:	2380      	movs	r3, #128	@ 0x80
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa26:	e1a8      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a75      	ldr	r2, [pc, #468]	@ (800ac04 <UART_SetConfig+0x638>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d130      	bne.n	800aa94 <UART_SetConfig+0x4c8>
 800aa32:	4b73      	ldr	r3, [pc, #460]	@ (800ac00 <UART_SetConfig+0x634>)
 800aa34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b05      	cmp	r3, #5
 800aa3c:	d826      	bhi.n	800aa8c <UART_SetConfig+0x4c0>
 800aa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa44 <UART_SetConfig+0x478>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa5d 	.word	0x0800aa5d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	0800aa6d 	.word	0x0800aa6d
 800aa50:	0800aa75 	.word	0x0800aa75
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e18a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e186      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e182      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7a:	e17e      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa82:	e17a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa84:	2340      	movs	r3, #64	@ 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8a:	e176      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa8c:	2380      	movs	r3, #128	@ 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa92:	e172      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a5b      	ldr	r2, [pc, #364]	@ (800ac08 <UART_SetConfig+0x63c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d130      	bne.n	800ab00 <UART_SetConfig+0x534>
 800aa9e:	4b58      	ldr	r3, [pc, #352]	@ (800ac00 <UART_SetConfig+0x634>)
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d826      	bhi.n	800aaf8 <UART_SetConfig+0x52c>
 800aaaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <UART_SetConfig+0x4e4>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac9 	.word	0x0800aac9
 800aab4:	0800aad1 	.word	0x0800aad1
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800aae1 	.word	0x0800aae1
 800aac0:	0800aae9 	.word	0x0800aae9
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	2300      	movs	r3, #0
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e154      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e150      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e14c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e148      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aae8:	2320      	movs	r3, #32
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaee:	e144      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aaf0:	2340      	movs	r3, #64	@ 0x40
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf6:	e140      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800aaf8:	2380      	movs	r3, #128	@ 0x80
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafe:	e13c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a41      	ldr	r2, [pc, #260]	@ (800ac0c <UART_SetConfig+0x640>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	f040 8082 	bne.w	800ac10 <UART_SetConfig+0x644>
 800ab0c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac00 <UART_SetConfig+0x634>)
 800ab0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab14:	2b28      	cmp	r3, #40	@ 0x28
 800ab16:	d86d      	bhi.n	800abf4 <UART_SetConfig+0x628>
 800ab18:	a201      	add	r2, pc, #4	@ (adr r2, 800ab20 <UART_SetConfig+0x554>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800abc5 	.word	0x0800abc5
 800ab24:	0800abf5 	.word	0x0800abf5
 800ab28:	0800abf5 	.word	0x0800abf5
 800ab2c:	0800abf5 	.word	0x0800abf5
 800ab30:	0800abf5 	.word	0x0800abf5
 800ab34:	0800abf5 	.word	0x0800abf5
 800ab38:	0800abf5 	.word	0x0800abf5
 800ab3c:	0800abf5 	.word	0x0800abf5
 800ab40:	0800abcd 	.word	0x0800abcd
 800ab44:	0800abf5 	.word	0x0800abf5
 800ab48:	0800abf5 	.word	0x0800abf5
 800ab4c:	0800abf5 	.word	0x0800abf5
 800ab50:	0800abf5 	.word	0x0800abf5
 800ab54:	0800abf5 	.word	0x0800abf5
 800ab58:	0800abf5 	.word	0x0800abf5
 800ab5c:	0800abf5 	.word	0x0800abf5
 800ab60:	0800abd5 	.word	0x0800abd5
 800ab64:	0800abf5 	.word	0x0800abf5
 800ab68:	0800abf5 	.word	0x0800abf5
 800ab6c:	0800abf5 	.word	0x0800abf5
 800ab70:	0800abf5 	.word	0x0800abf5
 800ab74:	0800abf5 	.word	0x0800abf5
 800ab78:	0800abf5 	.word	0x0800abf5
 800ab7c:	0800abf5 	.word	0x0800abf5
 800ab80:	0800abdd 	.word	0x0800abdd
 800ab84:	0800abf5 	.word	0x0800abf5
 800ab88:	0800abf5 	.word	0x0800abf5
 800ab8c:	0800abf5 	.word	0x0800abf5
 800ab90:	0800abf5 	.word	0x0800abf5
 800ab94:	0800abf5 	.word	0x0800abf5
 800ab98:	0800abf5 	.word	0x0800abf5
 800ab9c:	0800abf5 	.word	0x0800abf5
 800aba0:	0800abe5 	.word	0x0800abe5
 800aba4:	0800abf5 	.word	0x0800abf5
 800aba8:	0800abf5 	.word	0x0800abf5
 800abac:	0800abf5 	.word	0x0800abf5
 800abb0:	0800abf5 	.word	0x0800abf5
 800abb4:	0800abf5 	.word	0x0800abf5
 800abb8:	0800abf5 	.word	0x0800abf5
 800abbc:	0800abf5 	.word	0x0800abf5
 800abc0:	0800abed 	.word	0x0800abed
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e0d6      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abcc:	2304      	movs	r3, #4
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e0d2      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abd4:	2308      	movs	r3, #8
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e0ce      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abdc:	2310      	movs	r3, #16
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe2:	e0ca      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abe4:	2320      	movs	r3, #32
 800abe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abea:	e0c6      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abec:	2340      	movs	r3, #64	@ 0x40
 800abee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf2:	e0c2      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abf4:	2380      	movs	r3, #128	@ 0x80
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e0be      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800abfc:	40011400 	.word	0x40011400
 800ac00:	58024400 	.word	0x58024400
 800ac04:	40007800 	.word	0x40007800
 800ac08:	40007c00 	.word	0x40007c00
 800ac0c:	40011800 	.word	0x40011800
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4aad      	ldr	r2, [pc, #692]	@ (800aecc <UART_SetConfig+0x900>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d176      	bne.n	800ad08 <UART_SetConfig+0x73c>
 800ac1a:	4bad      	ldr	r3, [pc, #692]	@ (800aed0 <UART_SetConfig+0x904>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac22:	2b28      	cmp	r3, #40	@ 0x28
 800ac24:	d86c      	bhi.n	800ad00 <UART_SetConfig+0x734>
 800ac26:	a201      	add	r2, pc, #4	@ (adr r2, 800ac2c <UART_SetConfig+0x660>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800acd1 	.word	0x0800acd1
 800ac30:	0800ad01 	.word	0x0800ad01
 800ac34:	0800ad01 	.word	0x0800ad01
 800ac38:	0800ad01 	.word	0x0800ad01
 800ac3c:	0800ad01 	.word	0x0800ad01
 800ac40:	0800ad01 	.word	0x0800ad01
 800ac44:	0800ad01 	.word	0x0800ad01
 800ac48:	0800ad01 	.word	0x0800ad01
 800ac4c:	0800acd9 	.word	0x0800acd9
 800ac50:	0800ad01 	.word	0x0800ad01
 800ac54:	0800ad01 	.word	0x0800ad01
 800ac58:	0800ad01 	.word	0x0800ad01
 800ac5c:	0800ad01 	.word	0x0800ad01
 800ac60:	0800ad01 	.word	0x0800ad01
 800ac64:	0800ad01 	.word	0x0800ad01
 800ac68:	0800ad01 	.word	0x0800ad01
 800ac6c:	0800ace1 	.word	0x0800ace1
 800ac70:	0800ad01 	.word	0x0800ad01
 800ac74:	0800ad01 	.word	0x0800ad01
 800ac78:	0800ad01 	.word	0x0800ad01
 800ac7c:	0800ad01 	.word	0x0800ad01
 800ac80:	0800ad01 	.word	0x0800ad01
 800ac84:	0800ad01 	.word	0x0800ad01
 800ac88:	0800ad01 	.word	0x0800ad01
 800ac8c:	0800ace9 	.word	0x0800ace9
 800ac90:	0800ad01 	.word	0x0800ad01
 800ac94:	0800ad01 	.word	0x0800ad01
 800ac98:	0800ad01 	.word	0x0800ad01
 800ac9c:	0800ad01 	.word	0x0800ad01
 800aca0:	0800ad01 	.word	0x0800ad01
 800aca4:	0800ad01 	.word	0x0800ad01
 800aca8:	0800ad01 	.word	0x0800ad01
 800acac:	0800acf1 	.word	0x0800acf1
 800acb0:	0800ad01 	.word	0x0800ad01
 800acb4:	0800ad01 	.word	0x0800ad01
 800acb8:	0800ad01 	.word	0x0800ad01
 800acbc:	0800ad01 	.word	0x0800ad01
 800acc0:	0800ad01 	.word	0x0800ad01
 800acc4:	0800ad01 	.word	0x0800ad01
 800acc8:	0800ad01 	.word	0x0800ad01
 800accc:	0800acf9 	.word	0x0800acf9
 800acd0:	2301      	movs	r3, #1
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e050      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800acd8:	2304      	movs	r3, #4
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e04c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ace0:	2308      	movs	r3, #8
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e048      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ace8:	2310      	movs	r3, #16
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acee:	e044      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800acf0:	2320      	movs	r3, #32
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e040      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800acf8:	2340      	movs	r3, #64	@ 0x40
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e03c      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad00:	2380      	movs	r3, #128	@ 0x80
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e038      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a71      	ldr	r2, [pc, #452]	@ (800aed4 <UART_SetConfig+0x908>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d130      	bne.n	800ad74 <UART_SetConfig+0x7a8>
 800ad12:	4b6f      	ldr	r3, [pc, #444]	@ (800aed0 <UART_SetConfig+0x904>)
 800ad14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad16:	f003 0307 	and.w	r3, r3, #7
 800ad1a:	2b05      	cmp	r3, #5
 800ad1c:	d826      	bhi.n	800ad6c <UART_SetConfig+0x7a0>
 800ad1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <UART_SetConfig+0x758>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad3d 	.word	0x0800ad3d
 800ad28:	0800ad45 	.word	0x0800ad45
 800ad2c:	0800ad4d 	.word	0x0800ad4d
 800ad30:	0800ad55 	.word	0x0800ad55
 800ad34:	0800ad5d 	.word	0x0800ad5d
 800ad38:	0800ad65 	.word	0x0800ad65
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e01a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad44:	2304      	movs	r3, #4
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e016      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad4c:	2308      	movs	r3, #8
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e012      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad54:	2310      	movs	r3, #16
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e00e      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad5c:	2320      	movs	r3, #32
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e00a      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad64:	2340      	movs	r3, #64	@ 0x40
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e006      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad6c:	2380      	movs	r3, #128	@ 0x80
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e002      	b.n	800ad7a <UART_SetConfig+0x7ae>
 800ad74:	2380      	movs	r3, #128	@ 0x80
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a55      	ldr	r2, [pc, #340]	@ (800aed4 <UART_SetConfig+0x908>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	f040 80f8 	bne.w	800af76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	dc46      	bgt.n	800ae1c <UART_SetConfig+0x850>
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	db75      	blt.n	800ae7e <UART_SetConfig+0x8b2>
 800ad92:	3b02      	subs	r3, #2
 800ad94:	2b1e      	cmp	r3, #30
 800ad96:	d872      	bhi.n	800ae7e <UART_SetConfig+0x8b2>
 800ad98:	a201      	add	r2, pc, #4	@ (adr r2, 800ada0 <UART_SetConfig+0x7d4>)
 800ad9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9e:	bf00      	nop
 800ada0:	0800ae23 	.word	0x0800ae23
 800ada4:	0800ae7f 	.word	0x0800ae7f
 800ada8:	0800ae2b 	.word	0x0800ae2b
 800adac:	0800ae7f 	.word	0x0800ae7f
 800adb0:	0800ae7f 	.word	0x0800ae7f
 800adb4:	0800ae7f 	.word	0x0800ae7f
 800adb8:	0800ae3b 	.word	0x0800ae3b
 800adbc:	0800ae7f 	.word	0x0800ae7f
 800adc0:	0800ae7f 	.word	0x0800ae7f
 800adc4:	0800ae7f 	.word	0x0800ae7f
 800adc8:	0800ae7f 	.word	0x0800ae7f
 800adcc:	0800ae7f 	.word	0x0800ae7f
 800add0:	0800ae7f 	.word	0x0800ae7f
 800add4:	0800ae7f 	.word	0x0800ae7f
 800add8:	0800ae4b 	.word	0x0800ae4b
 800addc:	0800ae7f 	.word	0x0800ae7f
 800ade0:	0800ae7f 	.word	0x0800ae7f
 800ade4:	0800ae7f 	.word	0x0800ae7f
 800ade8:	0800ae7f 	.word	0x0800ae7f
 800adec:	0800ae7f 	.word	0x0800ae7f
 800adf0:	0800ae7f 	.word	0x0800ae7f
 800adf4:	0800ae7f 	.word	0x0800ae7f
 800adf8:	0800ae7f 	.word	0x0800ae7f
 800adfc:	0800ae7f 	.word	0x0800ae7f
 800ae00:	0800ae7f 	.word	0x0800ae7f
 800ae04:	0800ae7f 	.word	0x0800ae7f
 800ae08:	0800ae7f 	.word	0x0800ae7f
 800ae0c:	0800ae7f 	.word	0x0800ae7f
 800ae10:	0800ae7f 	.word	0x0800ae7f
 800ae14:	0800ae7f 	.word	0x0800ae7f
 800ae18:	0800ae71 	.word	0x0800ae71
 800ae1c:	2b40      	cmp	r3, #64	@ 0x40
 800ae1e:	d02a      	beq.n	800ae76 <UART_SetConfig+0x8aa>
 800ae20:	e02d      	b.n	800ae7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae22:	f7fd fc79 	bl	8008718 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae28:	e02f      	b.n	800ae8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fd fc88 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae38:	e027      	b.n	800ae8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae3a:	f107 0318 	add.w	r3, r7, #24
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd fdd4 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae48:	e01f      	b.n	800ae8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae4a:	4b21      	ldr	r3, [pc, #132]	@ (800aed0 <UART_SetConfig+0x904>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0320 	and.w	r3, r3, #32
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae56:	4b1e      	ldr	r3, [pc, #120]	@ (800aed0 <UART_SetConfig+0x904>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	08db      	lsrs	r3, r3, #3
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	4a1d      	ldr	r2, [pc, #116]	@ (800aed8 <UART_SetConfig+0x90c>)
 800ae62:	fa22 f303 	lsr.w	r3, r2, r3
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae68:	e00f      	b.n	800ae8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae6a:	4b1b      	ldr	r3, [pc, #108]	@ (800aed8 <UART_SetConfig+0x90c>)
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e00c      	b.n	800ae8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae70:	4b1a      	ldr	r3, [pc, #104]	@ (800aedc <UART_SetConfig+0x910>)
 800ae72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae74:	e009      	b.n	800ae8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7c:	e005      	b.n	800ae8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 81ee 	beq.w	800b26e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	4a12      	ldr	r2, [pc, #72]	@ (800aee0 <UART_SetConfig+0x914>)
 800ae98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aea0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aea4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	4413      	add	r3, r2
 800aeb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d305      	bcc.n	800aec2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d910      	bls.n	800aee4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aec8:	e1d1      	b.n	800b26e <UART_SetConfig+0xca2>
 800aeca:	bf00      	nop
 800aecc:	40011c00 	.word	0x40011c00
 800aed0:	58024400 	.word	0x58024400
 800aed4:	58000c00 	.word	0x58000c00
 800aed8:	03d09000 	.word	0x03d09000
 800aedc:	003d0900 	.word	0x003d0900
 800aee0:	0802246c 	.word	0x0802246c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee6:	2200      	movs	r2, #0
 800aee8:	60bb      	str	r3, [r7, #8]
 800aeea:	60fa      	str	r2, [r7, #12]
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	4ac0      	ldr	r2, [pc, #768]	@ (800b1f4 <UART_SetConfig+0xc28>)
 800aef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2200      	movs	r2, #0
 800aefa:	603b      	str	r3, [r7, #0]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af06:	f7f5 fa5b 	bl	80003c0 <__aeabi_uldivmod>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4610      	mov	r0, r2
 800af10:	4619      	mov	r1, r3
 800af12:	f04f 0200 	mov.w	r2, #0
 800af16:	f04f 0300 	mov.w	r3, #0
 800af1a:	020b      	lsls	r3, r1, #8
 800af1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af20:	0202      	lsls	r2, r0, #8
 800af22:	6979      	ldr	r1, [r7, #20]
 800af24:	6849      	ldr	r1, [r1, #4]
 800af26:	0849      	lsrs	r1, r1, #1
 800af28:	2000      	movs	r0, #0
 800af2a:	460c      	mov	r4, r1
 800af2c:	4605      	mov	r5, r0
 800af2e:	eb12 0804 	adds.w	r8, r2, r4
 800af32:	eb43 0905 	adc.w	r9, r3, r5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	469a      	mov	sl, r3
 800af3e:	4693      	mov	fp, r2
 800af40:	4652      	mov	r2, sl
 800af42:	465b      	mov	r3, fp
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 fa3a 	bl	80003c0 <__aeabi_uldivmod>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4613      	mov	r3, r2
 800af52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af5a:	d308      	bcc.n	800af6e <UART_SetConfig+0x9a2>
 800af5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af62:	d204      	bcs.n	800af6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	e17f      	b.n	800b26e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af74:	e17b      	b.n	800b26e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af7e:	f040 80bd 	bne.w	800b0fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800af82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af86:	2b20      	cmp	r3, #32
 800af88:	dc48      	bgt.n	800b01c <UART_SetConfig+0xa50>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	db7b      	blt.n	800b086 <UART_SetConfig+0xaba>
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d879      	bhi.n	800b086 <UART_SetConfig+0xaba>
 800af92:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <UART_SetConfig+0x9cc>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800b023 	.word	0x0800b023
 800af9c:	0800b02b 	.word	0x0800b02b
 800afa0:	0800b087 	.word	0x0800b087
 800afa4:	0800b087 	.word	0x0800b087
 800afa8:	0800b033 	.word	0x0800b033
 800afac:	0800b087 	.word	0x0800b087
 800afb0:	0800b087 	.word	0x0800b087
 800afb4:	0800b087 	.word	0x0800b087
 800afb8:	0800b043 	.word	0x0800b043
 800afbc:	0800b087 	.word	0x0800b087
 800afc0:	0800b087 	.word	0x0800b087
 800afc4:	0800b087 	.word	0x0800b087
 800afc8:	0800b087 	.word	0x0800b087
 800afcc:	0800b087 	.word	0x0800b087
 800afd0:	0800b087 	.word	0x0800b087
 800afd4:	0800b087 	.word	0x0800b087
 800afd8:	0800b053 	.word	0x0800b053
 800afdc:	0800b087 	.word	0x0800b087
 800afe0:	0800b087 	.word	0x0800b087
 800afe4:	0800b087 	.word	0x0800b087
 800afe8:	0800b087 	.word	0x0800b087
 800afec:	0800b087 	.word	0x0800b087
 800aff0:	0800b087 	.word	0x0800b087
 800aff4:	0800b087 	.word	0x0800b087
 800aff8:	0800b087 	.word	0x0800b087
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b087 	.word	0x0800b087
 800b004:	0800b087 	.word	0x0800b087
 800b008:	0800b087 	.word	0x0800b087
 800b00c:	0800b087 	.word	0x0800b087
 800b010:	0800b087 	.word	0x0800b087
 800b014:	0800b087 	.word	0x0800b087
 800b018:	0800b079 	.word	0x0800b079
 800b01c:	2b40      	cmp	r3, #64	@ 0x40
 800b01e:	d02e      	beq.n	800b07e <UART_SetConfig+0xab2>
 800b020:	e031      	b.n	800b086 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b022:	f7fb fc99 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 800b026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b028:	e033      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b02a:	f7fb fcab 	bl	8006984 <HAL_RCC_GetPCLK2Freq>
 800b02e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b030:	e02f      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b036:	4618      	mov	r0, r3
 800b038:	f7fd fb84 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b040:	e027      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b042:	f107 0318 	add.w	r3, r7, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fd fcd0 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b050:	e01f      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b052:	4b69      	ldr	r3, [pc, #420]	@ (800b1f8 <UART_SetConfig+0xc2c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d009      	beq.n	800b072 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b05e:	4b66      	ldr	r3, [pc, #408]	@ (800b1f8 <UART_SetConfig+0xc2c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	08db      	lsrs	r3, r3, #3
 800b064:	f003 0303 	and.w	r3, r3, #3
 800b068:	4a64      	ldr	r2, [pc, #400]	@ (800b1fc <UART_SetConfig+0xc30>)
 800b06a:	fa22 f303 	lsr.w	r3, r2, r3
 800b06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b070:	e00f      	b.n	800b092 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b072:	4b62      	ldr	r3, [pc, #392]	@ (800b1fc <UART_SetConfig+0xc30>)
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b076:	e00c      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b078:	4b61      	ldr	r3, [pc, #388]	@ (800b200 <UART_SetConfig+0xc34>)
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b07c:	e009      	b.n	800b092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b084:	e005      	b.n	800b092 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 80ea 	beq.w	800b26e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09e:	4a55      	ldr	r2, [pc, #340]	@ (800b1f4 <UART_SetConfig+0xc28>)
 800b0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ac:	005a      	lsls	r2, r3, #1
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	441a      	add	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d916      	bls.n	800b0f4 <UART_SetConfig+0xb28>
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0cc:	d212      	bcs.n	800b0f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f023 030f 	bic.w	r3, r3, #15
 800b0d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b0f0:	60da      	str	r2, [r3, #12]
 800b0f2:	e0bc      	b.n	800b26e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b0fa:	e0b8      	b.n	800b26e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b100:	2b20      	cmp	r3, #32
 800b102:	dc4b      	bgt.n	800b19c <UART_SetConfig+0xbd0>
 800b104:	2b00      	cmp	r3, #0
 800b106:	f2c0 8087 	blt.w	800b218 <UART_SetConfig+0xc4c>
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	f200 8084 	bhi.w	800b218 <UART_SetConfig+0xc4c>
 800b110:	a201      	add	r2, pc, #4	@ (adr r2, 800b118 <UART_SetConfig+0xb4c>)
 800b112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b116:	bf00      	nop
 800b118:	0800b1a3 	.word	0x0800b1a3
 800b11c:	0800b1ab 	.word	0x0800b1ab
 800b120:	0800b219 	.word	0x0800b219
 800b124:	0800b219 	.word	0x0800b219
 800b128:	0800b1b3 	.word	0x0800b1b3
 800b12c:	0800b219 	.word	0x0800b219
 800b130:	0800b219 	.word	0x0800b219
 800b134:	0800b219 	.word	0x0800b219
 800b138:	0800b1c3 	.word	0x0800b1c3
 800b13c:	0800b219 	.word	0x0800b219
 800b140:	0800b219 	.word	0x0800b219
 800b144:	0800b219 	.word	0x0800b219
 800b148:	0800b219 	.word	0x0800b219
 800b14c:	0800b219 	.word	0x0800b219
 800b150:	0800b219 	.word	0x0800b219
 800b154:	0800b219 	.word	0x0800b219
 800b158:	0800b1d3 	.word	0x0800b1d3
 800b15c:	0800b219 	.word	0x0800b219
 800b160:	0800b219 	.word	0x0800b219
 800b164:	0800b219 	.word	0x0800b219
 800b168:	0800b219 	.word	0x0800b219
 800b16c:	0800b219 	.word	0x0800b219
 800b170:	0800b219 	.word	0x0800b219
 800b174:	0800b219 	.word	0x0800b219
 800b178:	0800b219 	.word	0x0800b219
 800b17c:	0800b219 	.word	0x0800b219
 800b180:	0800b219 	.word	0x0800b219
 800b184:	0800b219 	.word	0x0800b219
 800b188:	0800b219 	.word	0x0800b219
 800b18c:	0800b219 	.word	0x0800b219
 800b190:	0800b219 	.word	0x0800b219
 800b194:	0800b219 	.word	0x0800b219
 800b198:	0800b20b 	.word	0x0800b20b
 800b19c:	2b40      	cmp	r3, #64	@ 0x40
 800b19e:	d037      	beq.n	800b210 <UART_SetConfig+0xc44>
 800b1a0:	e03a      	b.n	800b218 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1a2:	f7fb fbd9 	bl	8006958 <HAL_RCC_GetPCLK1Freq>
 800b1a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1a8:	e03c      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1aa:	f7fb fbeb 	bl	8006984 <HAL_RCC_GetPCLK2Freq>
 800b1ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1b0:	e038      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fd fac4 	bl	8008744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c0:	e030      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c2:	f107 0318 	add.w	r3, r7, #24
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd fc10 	bl	80089ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d0:	e028      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1d2:	4b09      	ldr	r3, [pc, #36]	@ (800b1f8 <UART_SetConfig+0xc2c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d012      	beq.n	800b204 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1de:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <UART_SetConfig+0xc2c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	08db      	lsrs	r3, r3, #3
 800b1e4:	f003 0303 	and.w	r3, r3, #3
 800b1e8:	4a04      	ldr	r2, [pc, #16]	@ (800b1fc <UART_SetConfig+0xc30>)
 800b1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1f0:	e018      	b.n	800b224 <UART_SetConfig+0xc58>
 800b1f2:	bf00      	nop
 800b1f4:	0802246c 	.word	0x0802246c
 800b1f8:	58024400 	.word	0x58024400
 800b1fc:	03d09000 	.word	0x03d09000
 800b200:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b204:	4b24      	ldr	r3, [pc, #144]	@ (800b298 <UART_SetConfig+0xccc>)
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b208:	e00c      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b20a:	4b24      	ldr	r3, [pc, #144]	@ (800b29c <UART_SetConfig+0xcd0>)
 800b20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20e:	e009      	b.n	800b224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b216:	e005      	b.n	800b224 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b222:	bf00      	nop
    }

    if (pclk != 0U)
 800b224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d021      	beq.n	800b26e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2a0 <UART_SetConfig+0xcd4>)
 800b230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b234:	461a      	mov	r2, r3
 800b236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b238:	fbb3 f2f2 	udiv	r2, r3, r2
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	441a      	add	r2, r3
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	2b0f      	cmp	r3, #15
 800b252:	d909      	bls.n	800b268 <UART_SetConfig+0xc9c>
 800b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b25a:	d205      	bcs.n	800b268 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	b29a      	uxth	r2, r3
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60da      	str	r2, [r3, #12]
 800b266:	e002      	b.n	800b26e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2201      	movs	r2, #1
 800b272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2201      	movs	r2, #1
 800b27a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2200      	movs	r2, #0
 800b282:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2200      	movs	r2, #0
 800b288:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b28a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3748      	adds	r7, #72	@ 0x48
 800b292:	46bd      	mov	sp, r7
 800b294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b298:	03d09000 	.word	0x03d09000
 800b29c:	003d0900 	.word	0x003d0900
 800b2a0:	0802246c 	.word	0x0802246c

0800b2a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00a      	beq.n	800b2ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	f003 0310 	and.w	r3, r3, #16
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d01a      	beq.n	800b3ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3a2:	d10a      	bne.n	800b3ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00a      	beq.n	800b3dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	605a      	str	r2, [r3, #4]
  }
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b098      	sub	sp, #96	@ 0x60
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3f8:	f7f6 fc6e 	bl	8001cd8 <HAL_GetTick>
 800b3fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b08      	cmp	r3, #8
 800b40a:	d12f      	bne.n	800b46c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b40c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b414:	2200      	movs	r2, #0
 800b416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f88e 	bl	800b53c <UART_WaitOnFlagUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d022      	beq.n	800b46c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42e:	e853 3f00 	ldrex	r3, [r3]
 800b432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b43a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b444:	647b      	str	r3, [r7, #68]	@ 0x44
 800b446:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e6      	bne.n	800b426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2220      	movs	r2, #32
 800b45c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b468:	2303      	movs	r3, #3
 800b46a:	e063      	b.n	800b534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 0304 	and.w	r3, r3, #4
 800b476:	2b04      	cmp	r3, #4
 800b478:	d149      	bne.n	800b50e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b47a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b482:	2200      	movs	r2, #0
 800b484:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f857 	bl	800b53c <UART_WaitOnFlagUntilTimeout>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d03c      	beq.n	800b50e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e6      	bne.n	800b494 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f023 0301 	bic.w	r3, r3, #1
 800b4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4e6:	61fa      	str	r2, [r7, #28]
 800b4e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	69b9      	ldr	r1, [r7, #24]
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e5      	bne.n	800b4c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2220      	movs	r2, #32
 800b4fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e012      	b.n	800b534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3758      	adds	r7, #88	@ 0x58
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	4613      	mov	r3, r2
 800b54a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b54c:	e04f      	b.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b554:	d04b      	beq.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b556:	f7f6 fbbf 	bl	8001cd8 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	429a      	cmp	r2, r3
 800b564:	d302      	bcc.n	800b56c <UART_WaitOnFlagUntilTimeout+0x30>
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e04e      	b.n	800b60e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 0304 	and.w	r3, r3, #4
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d037      	beq.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2b80      	cmp	r3, #128	@ 0x80
 800b582:	d034      	beq.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2b40      	cmp	r3, #64	@ 0x40
 800b588:	d031      	beq.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	69db      	ldr	r3, [r3, #28]
 800b590:	f003 0308 	and.w	r3, r3, #8
 800b594:	2b08      	cmp	r3, #8
 800b596:	d110      	bne.n	800b5ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2208      	movs	r2, #8
 800b59e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 f839 	bl	800b618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e029      	b.n	800b60e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	69db      	ldr	r3, [r3, #28]
 800b5c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c8:	d111      	bne.n	800b5ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f81f 	bl	800b618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e00f      	b.n	800b60e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69da      	ldr	r2, [r3, #28]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2301      	moveq	r3, #1
 800b600:	2300      	movne	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	461a      	mov	r2, r3
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d0a0      	beq.n	800b54e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b618:	b480      	push	{r7}
 800b61a:	b095      	sub	sp, #84	@ 0x54
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b628:	e853 3f00 	ldrex	r3, [r3]
 800b62c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b646:	e841 2300 	strex	r3, r2, [r1]
 800b64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1e6      	bne.n	800b620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3308      	adds	r3, #8
 800b658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	61fb      	str	r3, [r7, #28]
   return(result);
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	4b1e      	ldr	r3, [pc, #120]	@ (800b6e0 <UART_EndRxTransfer+0xc8>)
 800b666:	4013      	ands	r3, r2
 800b668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3308      	adds	r3, #8
 800b670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e5      	bne.n	800b652 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d118      	bne.n	800b6c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f023 0310 	bic.w	r3, r3, #16
 800b6a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	6979      	ldr	r1, [r7, #20]
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e6      	bne.n	800b68e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6d4:	bf00      	nop
 800b6d6:	3754      	adds	r7, #84	@ 0x54
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	effffffe 	.word	0xeffffffe

0800b6e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d101      	bne.n	800b6fa <HAL_UARTEx_DisableFifoMode+0x16>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e027      	b.n	800b74a <HAL_UARTEx_DisableFifoMode+0x66>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2224      	movs	r2, #36	@ 0x24
 800b706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f022 0201 	bic.w	r2, r2, #1
 800b720:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2220      	movs	r2, #32
 800b73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b766:	2b01      	cmp	r3, #1
 800b768:	d101      	bne.n	800b76e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b76a:	2302      	movs	r3, #2
 800b76c:	e02d      	b.n	800b7ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2224      	movs	r2, #36	@ 0x24
 800b77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0201 	bic.w	r2, r2, #1
 800b794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f850 	bl	800b850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d101      	bne.n	800b7ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	e02d      	b.n	800b846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2224      	movs	r2, #36	@ 0x24
 800b7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0201 	bic.w	r2, r2, #1
 800b810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f812 	bl	800b850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2220      	movs	r2, #32
 800b838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
	...

0800b850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d108      	bne.n	800b872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b870:	e031      	b.n	800b8d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b872:	2310      	movs	r3, #16
 800b874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b876:	2310      	movs	r3, #16
 800b878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	0e5b      	lsrs	r3, r3, #25
 800b882:	b2db      	uxtb	r3, r3
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	0f5b      	lsrs	r3, r3, #29
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 0307 	and.w	r3, r3, #7
 800b898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	7b3a      	ldrb	r2, [r7, #12]
 800b89e:	4911      	ldr	r1, [pc, #68]	@ (800b8e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b8a0:	5c8a      	ldrb	r2, [r1, r2]
 800b8a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8a6:	7b3a      	ldrb	r2, [r7, #12]
 800b8a8:	490f      	ldr	r1, [pc, #60]	@ (800b8e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b8aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	7b7a      	ldrb	r2, [r7, #13]
 800b8bc:	4909      	ldr	r1, [pc, #36]	@ (800b8e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b8be:	5c8a      	ldrb	r2, [r1, r2]
 800b8c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8c4:	7b7a      	ldrb	r2, [r7, #13]
 800b8c6:	4908      	ldr	r1, [pc, #32]	@ (800b8e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b8c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8d6:	bf00      	nop
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	08022484 	.word	0x08022484
 800b8e8:	0802248c 	.word	0x0802248c

0800b8ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f004 fe47 	bl	8010588 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800b8fa:	4b1c      	ldr	r3, [pc, #112]	@ (800b96c <MX_LWIP_Init+0x80>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800b900:	4b1b      	ldr	r3, [pc, #108]	@ (800b970 <MX_LWIP_Init+0x84>)
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800b906:	4b1b      	ldr	r3, [pc, #108]	@ (800b974 <MX_LWIP_Init+0x88>)
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b90c:	4b1a      	ldr	r3, [pc, #104]	@ (800b978 <MX_LWIP_Init+0x8c>)
 800b90e:	9302      	str	r3, [sp, #8]
 800b910:	4b1a      	ldr	r3, [pc, #104]	@ (800b97c <MX_LWIP_Init+0x90>)
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	2300      	movs	r3, #0
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4b16      	ldr	r3, [pc, #88]	@ (800b974 <MX_LWIP_Init+0x88>)
 800b91a:	4a15      	ldr	r2, [pc, #84]	@ (800b970 <MX_LWIP_Init+0x84>)
 800b91c:	4913      	ldr	r1, [pc, #76]	@ (800b96c <MX_LWIP_Init+0x80>)
 800b91e:	4818      	ldr	r0, [pc, #96]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b920:	f005 fcb4 	bl	801128c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b924:	4816      	ldr	r0, [pc, #88]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b926:	f005 fe6b 	bl	8011600 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b92a:	4815      	ldr	r0, [pc, #84]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b92c:	f005 fe78 	bl	8011620 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b930:	4914      	ldr	r1, [pc, #80]	@ (800b984 <MX_LWIP_Init+0x98>)
 800b932:	4813      	ldr	r0, [pc, #76]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b934:	f005 ff7a 	bl	801182c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b938:	2224      	movs	r2, #36	@ 0x24
 800b93a:	2100      	movs	r1, #0
 800b93c:	4812      	ldr	r0, [pc, #72]	@ (800b988 <MX_LWIP_Init+0x9c>)
 800b93e:	f011 fe79 	bl	801d634 <memset>
  attributes.name = "EthLink";
 800b942:	4b11      	ldr	r3, [pc, #68]	@ (800b988 <MX_LWIP_Init+0x9c>)
 800b944:	4a11      	ldr	r2, [pc, #68]	@ (800b98c <MX_LWIP_Init+0xa0>)
 800b946:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b948:	4b0f      	ldr	r3, [pc, #60]	@ (800b988 <MX_LWIP_Init+0x9c>)
 800b94a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b94e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b950:	4b0d      	ldr	r3, [pc, #52]	@ (800b988 <MX_LWIP_Init+0x9c>)
 800b952:	2210      	movs	r2, #16
 800b954:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b956:	4a0c      	ldr	r2, [pc, #48]	@ (800b988 <MX_LWIP_Init+0x9c>)
 800b958:	4909      	ldr	r1, [pc, #36]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b95a:	480d      	ldr	r0, [pc, #52]	@ (800b990 <MX_LWIP_Init+0xa4>)
 800b95c:	f000 fd9d 	bl	800c49a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b960:	4807      	ldr	r0, [pc, #28]	@ (800b980 <MX_LWIP_Init+0x94>)
 800b962:	f00d f8c7 	bl	8018af4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b966:	bf00      	nop
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	24004fd4 	.word	0x24004fd4
 800b970:	24004fd8 	.word	0x24004fd8
 800b974:	24004fdc 	.word	0x24004fdc
 800b978:	080104c5 	.word	0x080104c5
 800b97c:	0800be0d 	.word	0x0800be0d
 800b980:	24004f9c 	.word	0x24004f9c
 800b984:	0800b995 	.word	0x0800b995
 800b988:	24004fe0 	.word	0x24004fe0
 800b98c:	0801f52c 	.word	0x0801f52c
 800b990:	0800c0f1 	.word	0x0800c0f1

0800b994 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b0aa      	sub	sp, #168	@ 0xa8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b9c2:	f107 0310 	add.w	r3, r7, #16
 800b9c6:	2264      	movs	r2, #100	@ 0x64
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f011 fe32 	bl	801d634 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b9d0:	4b89      	ldr	r3, [pc, #548]	@ (800bbf8 <low_level_init+0x250>)
 800b9d2:	4a8a      	ldr	r2, [pc, #552]	@ (800bbfc <low_level_init+0x254>)
 800b9d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b9da:	2380      	movs	r3, #128	@ 0x80
 800b9dc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b9de:	23e1      	movs	r3, #225	@ 0xe1
 800b9e0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b9ee:	4a82      	ldr	r2, [pc, #520]	@ (800bbf8 <low_level_init+0x250>)
 800b9f0:	f107 0308 	add.w	r3, r7, #8
 800b9f4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b9f6:	4b80      	ldr	r3, [pc, #512]	@ (800bbf8 <low_level_init+0x250>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b9fc:	4b7e      	ldr	r3, [pc, #504]	@ (800bbf8 <low_level_init+0x250>)
 800b9fe:	4a80      	ldr	r2, [pc, #512]	@ (800bc00 <low_level_init+0x258>)
 800ba00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ba02:	4b7d      	ldr	r3, [pc, #500]	@ (800bbf8 <low_level_init+0x250>)
 800ba04:	4a7f      	ldr	r2, [pc, #508]	@ (800bc04 <low_level_init+0x25c>)
 800ba06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ba08:	4b7b      	ldr	r3, [pc, #492]	@ (800bbf8 <low_level_init+0x250>)
 800ba0a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ba0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ba10:	4879      	ldr	r0, [pc, #484]	@ (800bbf8 <low_level_init+0x250>)
 800ba12:	f7f8 fa21 	bl	8003e58 <HAL_ETH_Init>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ba1c:	2238      	movs	r2, #56	@ 0x38
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4879      	ldr	r0, [pc, #484]	@ (800bc08 <low_level_init+0x260>)
 800ba22:	f011 fe07 	bl	801d634 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ba26:	4b78      	ldr	r3, [pc, #480]	@ (800bc08 <low_level_init+0x260>)
 800ba28:	2221      	movs	r2, #33	@ 0x21
 800ba2a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ba2c:	4b76      	ldr	r3, [pc, #472]	@ (800bc08 <low_level_init+0x260>)
 800ba2e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800ba32:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ba34:	4b74      	ldr	r3, [pc, #464]	@ (800bc08 <low_level_init+0x260>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ba3a:	4874      	ldr	r0, [pc, #464]	@ (800bc0c <low_level_init+0x264>)
 800ba3c:	f005 fae0 	bl	8011000 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2206      	movs	r2, #6
 800ba44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ba48:	4b6b      	ldr	r3, [pc, #428]	@ (800bbf8 <low_level_init+0x250>)
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	781a      	ldrb	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ba54:	4b68      	ldr	r3, [pc, #416]	@ (800bbf8 <low_level_init+0x250>)
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	785a      	ldrb	r2, [r3, #1]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ba60:	4b65      	ldr	r3, [pc, #404]	@ (800bbf8 <low_level_init+0x250>)
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	789a      	ldrb	r2, [r3, #2]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ba6c:	4b62      	ldr	r3, [pc, #392]	@ (800bbf8 <low_level_init+0x250>)
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	78da      	ldrb	r2, [r3, #3]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ba78:	4b5f      	ldr	r3, [pc, #380]	@ (800bbf8 <low_level_init+0x250>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	791a      	ldrb	r2, [r3, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ba84:	4b5c      	ldr	r3, [pc, #368]	@ (800bbf8 <low_level_init+0x250>)
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	795a      	ldrb	r2, [r3, #5]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ba96:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ba9e:	f043 030a 	orr.w	r3, r3, #10
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800baaa:	2200      	movs	r2, #0
 800baac:	2100      	movs	r1, #0
 800baae:	2001      	movs	r0, #1
 800bab0:	f000 ff40 	bl	800c934 <osSemaphoreNew>
 800bab4:	4603      	mov	r3, r0
 800bab6:	4a56      	ldr	r2, [pc, #344]	@ (800bc10 <low_level_init+0x268>)
 800bab8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800baba:	2200      	movs	r2, #0
 800babc:	2100      	movs	r1, #0
 800babe:	2001      	movs	r0, #1
 800bac0:	f000 ff38 	bl	800c934 <osSemaphoreNew>
 800bac4:	4603      	mov	r3, r0
 800bac6:	4a53      	ldr	r2, [pc, #332]	@ (800bc14 <low_level_init+0x26c>)
 800bac8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800baca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bace:	2224      	movs	r2, #36	@ 0x24
 800bad0:	2100      	movs	r1, #0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f011 fdae 	bl	801d634 <memset>
  attributes.name = "EthIf";
 800bad8:	4b4f      	ldr	r3, [pc, #316]	@ (800bc18 <low_level_init+0x270>)
 800bada:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800badc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800bae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bae4:	2330      	movs	r3, #48	@ 0x30
 800bae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800baea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800baee:	461a      	mov	r2, r3
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	484a      	ldr	r0, [pc, #296]	@ (800bc1c <low_level_init+0x274>)
 800baf4:	f000 fcd1 	bl	800c49a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800baf8:	4949      	ldr	r1, [pc, #292]	@ (800bc20 <low_level_init+0x278>)
 800bafa:	484a      	ldr	r0, [pc, #296]	@ (800bc24 <low_level_init+0x27c>)
 800bafc:	f7f5 ff95 	bl	8001a2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bb00:	4848      	ldr	r0, [pc, #288]	@ (800bc24 <low_level_init+0x27c>)
 800bb02:	f7f5 ffc4 	bl	8001a8e <LAN8742_Init>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d006      	beq.n	800bb1a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f005 fe5d 	bl	80117cc <netif_set_link_down>
    netif_set_down(netif);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f005 fdf0 	bl	80116f8 <netif_set_down>
 800bb18:	e06b      	b.n	800bbf2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bb1a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d165      	bne.n	800bbee <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bb22:	4840      	ldr	r0, [pc, #256]	@ (800bc24 <low_level_init+0x27c>)
 800bb24:	f7f6 f800 	bl	8001b28 <LAN8742_GetLinkState>
 800bb28:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bb2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	dc06      	bgt.n	800bb42 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f005 fe49 	bl	80117cc <netif_set_link_down>
      netif_set_down(netif);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f005 fddc 	bl	80116f8 <netif_set_down>
 800bb40:	e057      	b.n	800bbf2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bb42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb46:	3b02      	subs	r3, #2
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d82b      	bhi.n	800bba4 <low_level_init+0x1fc>
 800bb4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb54 <low_level_init+0x1ac>)
 800bb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb52:	bf00      	nop
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb77 	.word	0x0800bb77
 800bb5c:	0800bb87 	.word	0x0800bb87
 800bb60:	0800bb97 	.word	0x0800bb97
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bb64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bb6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bb74:	e01f      	b.n	800bbb6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bb7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bb84:	e017      	b.n	800bbb6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bb86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bb94:	e00f      	b.n	800bbb6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bba2:	e008      	b.n	800bbb6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800bba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bbac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bbb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bbb4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bbb6:	f107 0310 	add.w	r3, r7, #16
 800bbba:	4619      	mov	r1, r3
 800bbbc:	480e      	ldr	r0, [pc, #56]	@ (800bbf8 <low_level_init+0x250>)
 800bbbe:	f7f8 fdc7 	bl	8004750 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800bbc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800bbc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bbce:	f107 0310 	add.w	r3, r7, #16
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4808      	ldr	r0, [pc, #32]	@ (800bbf8 <low_level_init+0x250>)
 800bbd6:	f7f8 ff8f 	bl	8004af8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800bbda:	4807      	ldr	r0, [pc, #28]	@ (800bbf8 <low_level_init+0x250>)
 800bbdc:	f7f8 fa3a 	bl	8004054 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f005 fd1d 	bl	8011620 <netif_set_up>
    netif_set_link_up(netif);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f005 fdb8 	bl	801175c <netif_set_link_up>
 800bbec:	e001      	b.n	800bbf2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800bbee:	f7f5 fad9 	bl	80011a4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bbf2:	37a8      	adds	r7, #168	@ 0xa8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	24005014 	.word	0x24005014
 800bbfc:	40028000 	.word	0x40028000
 800bc00:	24004be4 	.word	0x24004be4
 800bc04:	24004b84 	.word	0x24004b84
 800bc08:	240050c4 	.word	0x240050c4
 800bc0c:	08022494 	.word	0x08022494
 800bc10:	2400500c 	.word	0x2400500c
 800bc14:	24005010 	.word	0x24005010
 800bc18:	0801f534 	.word	0x0801f534
 800bc1c:	0800bdb9 	.word	0x0800bdb9
 800bc20:	24000010 	.word	0x24000010
 800bc24:	240050fc 	.word	0x240050fc

0800bc28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b092      	sub	sp, #72	@ 0x48
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bc40:	f107 030c 	add.w	r3, r7, #12
 800bc44:	2230      	movs	r2, #48	@ 0x30
 800bc46:	2100      	movs	r1, #0
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f011 fcf3 	bl	801d634 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	2230      	movs	r2, #48	@ 0x30
 800bc54:	2100      	movs	r1, #0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f011 fcec 	bl	801d634 <memset>

  for(q = p; q != NULL; q = q->next)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc60:	e045      	b.n	800bcee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bc62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d902      	bls.n	800bc6e <low_level_output+0x46>
      return ERR_IF;
 800bc68:	f06f 030b 	mvn.w	r3, #11
 800bc6c:	e07f      	b.n	800bd6e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc70:	6859      	ldr	r1, [r3, #4]
 800bc72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc74:	4613      	mov	r3, r2
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	3348      	adds	r3, #72	@ 0x48
 800bc7e:	443b      	add	r3, r7
 800bc80:	3b3c      	subs	r3, #60	@ 0x3c
 800bc82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc86:	895b      	ldrh	r3, [r3, #10]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	3348      	adds	r3, #72	@ 0x48
 800bc96:	443b      	add	r3, r7
 800bc98:	3b38      	subs	r3, #56	@ 0x38
 800bc9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bc9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d011      	beq.n	800bcc6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bca4:	1e5a      	subs	r2, r3, #1
 800bca6:	f107 000c 	add.w	r0, r7, #12
 800bcaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bcac:	460b      	mov	r3, r1
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	440b      	add	r3, r1
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	18c1      	adds	r1, r0, r3
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	3348      	adds	r3, #72	@ 0x48
 800bcc0:	443b      	add	r3, r7
 800bcc2:	3b34      	subs	r3, #52	@ 0x34
 800bcc4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bcc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d109      	bne.n	800bce2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bcce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	3348      	adds	r3, #72	@ 0x48
 800bcda:	443b      	add	r3, r7
 800bcdc:	3b34      	subs	r3, #52	@ 0x34
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce4:	3301      	adds	r3, #1
 800bce6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1b6      	bne.n	800bc62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	891b      	ldrh	r3, [r3, #8]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800bd78 <low_level_output+0x150>)
 800bcfc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800bd78 <low_level_output+0x150>)
 800bd00:	f107 030c 	add.w	r3, r7, #12
 800bd04:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bd06:	4a1c      	ldr	r2, [pc, #112]	@ (800bd78 <low_level_output+0x150>)
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800bd0c:	6838      	ldr	r0, [r7, #0]
 800bd0e:	f006 f9e1 	bl	80120d4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800bd12:	4919      	ldr	r1, [pc, #100]	@ (800bd78 <low_level_output+0x150>)
 800bd14:	4819      	ldr	r0, [pc, #100]	@ (800bd7c <low_level_output+0x154>)
 800bd16:	f7f8 fa89 	bl	800422c <HAL_ETH_Transmit_IT>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d103      	bne.n	800bd28 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bd26:	e01b      	b.n	800bd60 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bd28:	4814      	ldr	r0, [pc, #80]	@ (800bd7c <low_level_output+0x154>)
 800bd2a:	f7f8 ff4f 	bl	8004bcc <HAL_ETH_GetError>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f003 0302 	and.w	r3, r3, #2
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00d      	beq.n	800bd54 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bd38:	4b11      	ldr	r3, [pc, #68]	@ (800bd80 <low_level_output+0x158>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fe81 	bl	800ca48 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bd46:	480d      	ldr	r0, [pc, #52]	@ (800bd7c <low_level_output+0x154>)
 800bd48:	f7f8 fbf7 	bl	800453a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bd4c:	23fe      	movs	r3, #254	@ 0xfe
 800bd4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bd52:	e005      	b.n	800bd60 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bd54:	6838      	ldr	r0, [r7, #0]
 800bd56:	f006 f917 	bl	8011f88 <pbuf_free>
        errval =  ERR_IF;
 800bd5a:	23f4      	movs	r3, #244	@ 0xf4
 800bd5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bd60:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bd64:	f113 0f02 	cmn.w	r3, #2
 800bd68:	d0d3      	beq.n	800bd12 <low_level_output+0xea>

  return errval;
 800bd6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3748      	adds	r7, #72	@ 0x48
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	240050c4 	.word	0x240050c4
 800bd7c:	24005014 	.word	0x24005014
 800bd80:	24005010 	.word	0x24005010

0800bd84 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bd90:	4b07      	ldr	r3, [pc, #28]	@ (800bdb0 <low_level_input+0x2c>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d105      	bne.n	800bda4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4805      	ldr	r0, [pc, #20]	@ (800bdb4 <low_level_input+0x30>)
 800bda0:	f7f8 fa95 	bl	80042ce <HAL_ETH_ReadData>
  }

  return p;
 800bda4:	68fb      	ldr	r3, [r7, #12]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	24005008 	.word	0x24005008
 800bdb4:	24005014 	.word	0x24005014

0800bdb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bdc8:	4b0f      	ldr	r3, [pc, #60]	@ (800be08 <ethernetif_input+0x50>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f04f 31ff 	mov.w	r1, #4294967295
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fe39 	bl	800ca48 <osSemaphoreAcquire>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1f5      	bne.n	800bdc8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f7ff ffd1 	bl	800bd84 <low_level_input>
 800bde2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	4798      	blx	r3
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f006 f8c4 	bl	8011f88 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1ea      	bne.n	800bddc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800be06:	e7df      	b.n	800bdc8 <ethernetif_input+0x10>
 800be08:	2400500c 	.word	0x2400500c

0800be0c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <ethernetif_init+0x1c>
 800be1a:	4b0e      	ldr	r3, [pc, #56]	@ (800be54 <ethernetif_init+0x48>)
 800be1c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be20:	490d      	ldr	r1, [pc, #52]	@ (800be58 <ethernetif_init+0x4c>)
 800be22:	480e      	ldr	r0, [pc, #56]	@ (800be5c <ethernetif_init+0x50>)
 800be24:	f011 faae 	bl	801d384 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2273      	movs	r2, #115	@ 0x73
 800be2c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2274      	movs	r2, #116	@ 0x74
 800be34:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a09      	ldr	r2, [pc, #36]	@ (800be60 <ethernetif_init+0x54>)
 800be3c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a08      	ldr	r2, [pc, #32]	@ (800be64 <ethernetif_init+0x58>)
 800be42:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7ff fdaf 	bl	800b9a8 <low_level_init>

  return ERR_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801f53c 	.word	0x0801f53c
 800be58:	0801f558 	.word	0x0801f558
 800be5c:	0801f568 	.word	0x0801f568
 800be60:	0801a9b5 	.word	0x0801a9b5
 800be64:	0800bc29 	.word	0x0800bc29

0800be68 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800be74:	68f9      	ldr	r1, [r7, #12]
 800be76:	4809      	ldr	r0, [pc, #36]	@ (800be9c <pbuf_free_custom+0x34>)
 800be78:	f005 f9b2 	bl	80111e0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800be7c:	4b08      	ldr	r3, [pc, #32]	@ (800bea0 <pbuf_free_custom+0x38>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d107      	bne.n	800be94 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800be84:	4b06      	ldr	r3, [pc, #24]	@ (800bea0 <pbuf_free_custom+0x38>)
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800be8a:	4b06      	ldr	r3, [pc, #24]	@ (800bea4 <pbuf_free_custom+0x3c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fe2c 	bl	800caec <osSemaphoreRelease>
  }
}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	08022494 	.word	0x08022494
 800bea0:	24005008 	.word	0x24005008
 800bea4:	2400500c 	.word	0x2400500c

0800bea8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800beac:	f7f5 ff14 	bl	8001cd8 <HAL_GetTick>
 800beb0:	4603      	mov	r3, r0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08e      	sub	sp, #56	@ 0x38
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	605a      	str	r2, [r3, #4]
 800beca:	609a      	str	r2, [r3, #8]
 800becc:	60da      	str	r2, [r3, #12]
 800bece:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a59      	ldr	r2, [pc, #356]	@ (800c03c <HAL_ETH_MspInit+0x184>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	f040 80ab 	bne.w	800c032 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bedc:	4b58      	ldr	r3, [pc, #352]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bee2:	4a57      	ldr	r2, [pc, #348]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800beec:	4b54      	ldr	r3, [pc, #336]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800beee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bef6:	623b      	str	r3, [r7, #32]
 800bef8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800befa:	4b51      	ldr	r3, [pc, #324]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800befc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf00:	4a4f      	ldr	r2, [pc, #316]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf0a:	4b4d      	ldr	r3, [pc, #308]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf14:	61fb      	str	r3, [r7, #28]
 800bf16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bf18:	4b49      	ldr	r3, [pc, #292]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf1e:	4a48      	ldr	r2, [pc, #288]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf28:	4b45      	ldr	r3, [pc, #276]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf32:	61bb      	str	r3, [r7, #24]
 800bf34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf36:	4b42      	ldr	r3, [pc, #264]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf3c:	4a40      	ldr	r2, [pc, #256]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf3e:	f043 0304 	orr.w	r3, r3, #4
 800bf42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf46:	4b3e      	ldr	r3, [pc, #248]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	617b      	str	r3, [r7, #20]
 800bf52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf54:	4b3a      	ldr	r3, [pc, #232]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf5a:	4a39      	ldr	r2, [pc, #228]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf5c:	f043 0301 	orr.w	r3, r3, #1
 800bf60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf64:	4b36      	ldr	r3, [pc, #216]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf72:	4b33      	ldr	r3, [pc, #204]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf78:	4a31      	ldr	r2, [pc, #196]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf7a:	f043 0302 	orr.w	r3, r3, #2
 800bf7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf82:	4b2f      	ldr	r3, [pc, #188]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bf90:	4b2b      	ldr	r3, [pc, #172]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf96:	4a2a      	ldr	r2, [pc, #168]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bf98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bfa0:	4b27      	ldr	r3, [pc, #156]	@ (800c040 <HAL_ETH_MspInit+0x188>)
 800bfa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfaa:	60bb      	str	r3, [r7, #8]
 800bfac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bfae:	2332      	movs	r3, #50	@ 0x32
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bfbe:	230b      	movs	r3, #11
 800bfc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	481e      	ldr	r0, [pc, #120]	@ (800c044 <HAL_ETH_MspInit+0x18c>)
 800bfca:	f7f9 fb8f 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bfce:	2386      	movs	r3, #134	@ 0x86
 800bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bfde:	230b      	movs	r3, #11
 800bfe0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4817      	ldr	r0, [pc, #92]	@ (800c048 <HAL_ETH_MspInit+0x190>)
 800bfea:	f7f9 fb7f 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bfee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff4:	2302      	movs	r3, #2
 800bff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bffc:	2300      	movs	r3, #0
 800bffe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c000:	230b      	movs	r3, #11
 800c002:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c008:	4619      	mov	r1, r3
 800c00a:	4810      	ldr	r0, [pc, #64]	@ (800c04c <HAL_ETH_MspInit+0x194>)
 800c00c:	f7f9 fb6e 	bl	80056ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c010:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c016:	2302      	movs	r3, #2
 800c018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c01e:	2300      	movs	r3, #0
 800c020:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c022:	230b      	movs	r3, #11
 800c024:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c02a:	4619      	mov	r1, r3
 800c02c:	4808      	ldr	r0, [pc, #32]	@ (800c050 <HAL_ETH_MspInit+0x198>)
 800c02e:	f7f9 fb5d 	bl	80056ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c032:	bf00      	nop
 800c034:	3738      	adds	r7, #56	@ 0x38
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	40028000 	.word	0x40028000
 800c040:	58024400 	.word	0x58024400
 800c044:	58020800 	.word	0x58020800
 800c048:	58020000 	.word	0x58020000
 800c04c:	58020400 	.word	0x58020400
 800c050:	58021800 	.word	0x58021800

0800c054 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c058:	4802      	ldr	r0, [pc, #8]	@ (800c064 <ETH_PHY_IO_Init+0x10>)
 800c05a:	f7f8 fd67 	bl	8004b2c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	bd80      	pop	{r7, pc}
 800c064:	24005014 	.word	0x24005014

0800c068 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
  return 0;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	4807      	ldr	r0, [pc, #28]	@ (800c0a8 <ETH_PHY_IO_ReadReg+0x30>)
 800c08c:	f7f8 fab8 	bl	8004600 <HAL_ETH_ReadPHYRegister>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c096:	f04f 33ff 	mov.w	r3, #4294967295
 800c09a:	e000      	b.n	800c09e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	24005014 	.word	0x24005014

0800c0ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	68f9      	ldr	r1, [r7, #12]
 800c0be:	4807      	ldr	r0, [pc, #28]	@ (800c0dc <ETH_PHY_IO_WriteReg+0x30>)
 800c0c0:	f7f8 faf2 	bl	80046a8 <HAL_ETH_WritePHYRegister>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ce:	e000      	b.n	800c0d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	24005014 	.word	0x24005014

0800c0e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c0e4:	f7f5 fdf8 	bl	8001cd8 <HAL_GetTick>
 800c0e8:	4603      	mov	r3, r0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b0a0      	sub	sp, #128	@ 0x80
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	2264      	movs	r2, #100	@ 0x64
 800c0fe:	2100      	movs	r1, #0
 800c100:	4618      	mov	r0, r3
 800c102:	f011 fa97 	bl	801d634 <memset>
  int32_t PHYLinkState = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c10e:	2300      	movs	r3, #0
 800c110:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c112:	2300      	movs	r3, #0
 800c114:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c11a:	483a      	ldr	r0, [pc, #232]	@ (800c204 <ethernet_link_thread+0x114>)
 800c11c:	f7f5 fd04 	bl	8001b28 <LAN8742_GetLinkState>
 800c120:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c124:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c128:	089b      	lsrs	r3, r3, #2
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00c      	beq.n	800c14e <ethernet_link_thread+0x5e>
 800c134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c136:	2b01      	cmp	r3, #1
 800c138:	dc09      	bgt.n	800c14e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c13a:	4833      	ldr	r0, [pc, #204]	@ (800c208 <ethernet_link_thread+0x118>)
 800c13c:	f7f7 fffe 	bl	800413c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c140:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c142:	f005 fad9 	bl	80116f8 <netif_set_down>
    netif_set_link_down(netif);
 800c146:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c148:	f005 fb40 	bl	80117cc <netif_set_link_down>
 800c14c:	e055      	b.n	800c1fa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c14e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c150:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c154:	f003 0304 	and.w	r3, r3, #4
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d14e      	bne.n	800c1fa <ethernet_link_thread+0x10a>
 800c15c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c15e:	2b01      	cmp	r3, #1
 800c160:	dd4b      	ble.n	800c1fa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c164:	3b02      	subs	r3, #2
 800c166:	2b03      	cmp	r3, #3
 800c168:	d82a      	bhi.n	800c1c0 <ethernet_link_thread+0xd0>
 800c16a:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <ethernet_link_thread+0x80>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c181 	.word	0x0800c181
 800c174:	0800c193 	.word	0x0800c193
 800c178:	0800c1a3 	.word	0x0800c1a3
 800c17c:	0800c1b3 	.word	0x0800c1b3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c184:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c186:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c18a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c18c:	2301      	movs	r3, #1
 800c18e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c190:	e017      	b.n	800c1c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c192:	2300      	movs	r3, #0
 800c194:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c196:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c19a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1a0:	e00f      	b.n	800c1c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c1a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c1a6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1b0:	e007      	b.n	800c1c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1be:	e000      	b.n	800c1c2 <ethernet_link_thread+0xd2>
    default:
      break;
 800c1c0:	bf00      	nop
    }

    if(linkchanged)
 800c1c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d018      	beq.n	800c1fa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c1c8:	f107 0308 	add.w	r3, r7, #8
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	480e      	ldr	r0, [pc, #56]	@ (800c208 <ethernet_link_thread+0x118>)
 800c1d0:	f7f8 fabe 	bl	8004750 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c1d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1d6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c1d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1da:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c1dc:	f107 0308 	add.w	r3, r7, #8
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4809      	ldr	r0, [pc, #36]	@ (800c208 <ethernet_link_thread+0x118>)
 800c1e4:	f7f8 fc88 	bl	8004af8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c1e8:	4807      	ldr	r0, [pc, #28]	@ (800c208 <ethernet_link_thread+0x118>)
 800c1ea:	f7f7 ff33 	bl	8004054 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c1ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c1f0:	f005 fa16 	bl	8011620 <netif_set_up>
      netif_set_link_up(netif);
 800c1f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c1f6:	f005 fab1 	bl	801175c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c1fa:	2064      	movs	r0, #100	@ 0x64
 800c1fc:	f000 f9df 	bl	800c5be <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c200:	e78b      	b.n	800c11a <ethernet_link_thread+0x2a>
 800c202:	bf00      	nop
 800c204:	240050fc 	.word	0x240050fc
 800c208:	24005014 	.word	0x24005014

0800c20c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af02      	add	r7, sp, #8
 800c212:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c214:	4812      	ldr	r0, [pc, #72]	@ (800c260 <HAL_ETH_RxAllocateCallback+0x54>)
 800c216:	f004 ff6f 	bl	80110f8 <memp_malloc_pool>
 800c21a:	60f8      	str	r0, [r7, #12]
  if (p)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d014      	beq.n	800c24c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f103 0220 	add.w	r2, r3, #32
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4a0d      	ldr	r2, [pc, #52]	@ (800c264 <HAL_ETH_RxAllocateCallback+0x58>)
 800c230:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c23a:	9201      	str	r2, [sp, #4]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2241      	movs	r2, #65	@ 0x41
 800c242:	2100      	movs	r1, #0
 800c244:	2000      	movs	r0, #0
 800c246:	f005 fce5 	bl	8011c14 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c24a:	e005      	b.n	800c258 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c24c:	4b06      	ldr	r3, [pc, #24]	@ (800c268 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c24e:	2201      	movs	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
}
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	08022494 	.word	0x08022494
 800c264:	0800be69 	.word	0x0800be69
 800c268:	24005008 	.word	0x24005008

0800c26c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b08d      	sub	sp, #52	@ 0x34
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3b20      	subs	r3, #32
 800c28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c294:	2200      	movs	r2, #0
 800c296:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29a:	887a      	ldrh	r2, [r7, #2]
 800c29c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d103      	bne.n	800c2ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	e003      	b.n	800c2b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2c2:	e009      	b.n	800c2d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c6:	891a      	ldrh	r2, [r3, #8]
 800c2c8:	887b      	ldrh	r3, [r7, #2]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f2      	bne.n	800c2c4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c2de:	887b      	ldrh	r3, [r7, #2]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	623a      	str	r2, [r7, #32]
 800c2e4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dd1d      	ble.n	800c328 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	f003 021f 	and.w	r2, r3, #31
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c2fc:	f3bf 8f4f 	dsb	sy
}
 800c300:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c302:	4a0d      	ldr	r2, [pc, #52]	@ (800c338 <HAL_ETH_RxLinkCallback+0xcc>)
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	3320      	adds	r3, #32
 800c30e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	3b20      	subs	r3, #32
 800c314:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dcf2      	bgt.n	800c302 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c31c:	f3bf 8f4f 	dsb	sy
}
 800c320:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c322:	f3bf 8f6f 	isb	sy
}
 800c326:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c328:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c32a:	bf00      	nop
 800c32c:	3734      	adds	r7, #52	@ 0x34
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	e000ed00 	.word	0xe000ed00

0800c33c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f005 fe1f 	bl	8011f88 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <__NVIC_SetPriority>:
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c364:	2b00      	cmp	r3, #0
 800c366:	db0a      	blt.n	800c37e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	490c      	ldr	r1, [pc, #48]	@ (800c3a0 <__NVIC_SetPriority+0x4c>)
 800c36e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c372:	0112      	lsls	r2, r2, #4
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	440b      	add	r3, r1
 800c378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c37c:	e00a      	b.n	800c394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	b2da      	uxtb	r2, r3
 800c382:	4908      	ldr	r1, [pc, #32]	@ (800c3a4 <__NVIC_SetPriority+0x50>)
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	f003 030f 	and.w	r3, r3, #15
 800c38a:	3b04      	subs	r3, #4
 800c38c:	0112      	lsls	r2, r2, #4
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	440b      	add	r3, r1
 800c392:	761a      	strb	r2, [r3, #24]
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	e000e100 	.word	0xe000e100
 800c3a4:	e000ed00 	.word	0xe000ed00

0800c3a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3ac:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <SysTick_Handler+0x1c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3b0:	f002 fd58 	bl	800ee64 <xTaskGetSchedulerState>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d001      	beq.n	800c3be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3ba:	f003 fd0d 	bl	800fdd8 <xPortSysTickHandler>
  }
}
 800c3be:	bf00      	nop
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	e000e010 	.word	0xe000e010

0800c3c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	f06f 0004 	mvn.w	r0, #4
 800c3d2:	f7ff ffbf 	bl	800c354 <__NVIC_SetPriority>
#endif
}
 800c3d6:	bf00      	nop
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e2:	f3ef 8305 	mrs	r3, IPSR
 800c3e6:	603b      	str	r3, [r7, #0]
  return(result);
 800c3e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3ee:	f06f 0305 	mvn.w	r3, #5
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	e00c      	b.n	800c410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c420 <osKernelInitialize+0x44>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d105      	bne.n	800c40a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3fe:	4b08      	ldr	r3, [pc, #32]	@ (800c420 <osKernelInitialize+0x44>)
 800c400:	2201      	movs	r2, #1
 800c402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c404:	2300      	movs	r3, #0
 800c406:	607b      	str	r3, [r7, #4]
 800c408:	e002      	b.n	800c410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295
 800c40e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c410:	687b      	ldr	r3, [r7, #4]
}
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	2400511c 	.word	0x2400511c

0800c424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c42a:	f3ef 8305 	mrs	r3, IPSR
 800c42e:	603b      	str	r3, [r7, #0]
  return(result);
 800c430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c432:	2b00      	cmp	r3, #0
 800c434:	d003      	beq.n	800c43e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c436:	f06f 0305 	mvn.w	r3, #5
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	e010      	b.n	800c460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c43e:	4b0b      	ldr	r3, [pc, #44]	@ (800c46c <osKernelStart+0x48>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d109      	bne.n	800c45a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c446:	f7ff ffbf 	bl	800c3c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c44a:	4b08      	ldr	r3, [pc, #32]	@ (800c46c <osKernelStart+0x48>)
 800c44c:	2202      	movs	r2, #2
 800c44e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c450:	f002 f882 	bl	800e558 <vTaskStartScheduler>
      stat = osOK;
 800c454:	2300      	movs	r3, #0
 800c456:	607b      	str	r3, [r7, #4]
 800c458:	e002      	b.n	800c460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c45a:	f04f 33ff 	mov.w	r3, #4294967295
 800c45e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c460:	687b      	ldr	r3, [r7, #4]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	2400511c 	.word	0x2400511c

0800c470 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c476:	f3ef 8305 	mrs	r3, IPSR
 800c47a:	603b      	str	r3, [r7, #0]
  return(result);
 800c47c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c482:	f002 f995 	bl	800e7b0 <xTaskGetTickCountFromISR>
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	e002      	b.n	800c490 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c48a:	f002 f981 	bl	800e790 <xTaskGetTickCount>
 800c48e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c490:	687b      	ldr	r3, [r7, #4]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b08e      	sub	sp, #56	@ 0x38
 800c49e:	af04      	add	r7, sp, #16
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	617b      	str	r3, [r7, #20]
  return(result);
 800c4b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d17e      	bne.n	800c5b4 <osThreadNew+0x11a>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d07b      	beq.n	800c5b4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c4bc:	2380      	movs	r3, #128	@ 0x80
 800c4be:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c4c0:	2318      	movs	r3, #24
 800c4c2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d045      	beq.n	800c560 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <osThreadNew+0x48>
        name = attr->name;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d002      	beq.n	800c4f0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d008      	beq.n	800c508 <osThreadNew+0x6e>
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	2b38      	cmp	r3, #56	@ 0x38
 800c4fa:	d805      	bhi.n	800c508 <osThreadNew+0x6e>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <osThreadNew+0x72>
        return (NULL);
 800c508:	2300      	movs	r3, #0
 800c50a:	e054      	b.n	800c5b6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	089b      	lsrs	r3, r3, #2
 800c51a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <osThreadNew+0xa8>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2ba7      	cmp	r3, #167	@ 0xa7
 800c52a:	d90a      	bls.n	800c542 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <osThreadNew+0xa8>
        mem = 1;
 800c53c:	2301      	movs	r3, #1
 800c53e:	61bb      	str	r3, [r7, #24]
 800c540:	e010      	b.n	800c564 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10c      	bne.n	800c564 <osThreadNew+0xca>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d108      	bne.n	800c564 <osThreadNew+0xca>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d104      	bne.n	800c564 <osThreadNew+0xca>
          mem = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	e001      	b.n	800c564 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d110      	bne.n	800c58c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c572:	9202      	str	r2, [sp, #8]
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6a3a      	ldr	r2, [r7, #32]
 800c57e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f001 fdf5 	bl	800e170 <xTaskCreateStatic>
 800c586:	4603      	mov	r3, r0
 800c588:	613b      	str	r3, [r7, #16]
 800c58a:	e013      	b.n	800c5b4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d110      	bne.n	800c5b4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	b29a      	uxth	r2, r3
 800c596:	f107 0310 	add.w	r3, r7, #16
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f001 fe43 	bl	800e230 <xTaskCreate>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d001      	beq.n	800c5b4 <osThreadNew+0x11a>
            hTask = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c5b4:	693b      	ldr	r3, [r7, #16]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3728      	adds	r7, #40	@ 0x28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c6:	f3ef 8305 	mrs	r3, IPSR
 800c5ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <osDelay+0x1c>
    stat = osErrorISR;
 800c5d2:	f06f 0305 	mvn.w	r3, #5
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	e007      	b.n	800c5ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 ff81 	bl	800e4ec <vTaskDelay>
    }
  }

  return (stat);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f003 fa0b 	bl	800fa18 <pvTimerGetTimerID>
 800c602:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	6852      	ldr	r2, [r2, #4]
 800c612:	4610      	mov	r0, r2
 800c614:	4798      	blx	r3
  }
}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b08c      	sub	sp, #48	@ 0x30
 800c624:	af02      	add	r7, sp, #8
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	607a      	str	r2, [r7, #4]
 800c62a:	603b      	str	r3, [r7, #0]
 800c62c:	460b      	mov	r3, r1
 800c62e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c630:	2300      	movs	r3, #0
 800c632:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c634:	f3ef 8305 	mrs	r3, IPSR
 800c638:	613b      	str	r3, [r7, #16]
  return(result);
 800c63a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d163      	bne.n	800c708 <osTimerNew+0xe8>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d060      	beq.n	800c708 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c646:	2008      	movs	r0, #8
 800c648:	f003 fc58 	bl	800fefc <pvPortMalloc>
 800c64c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d059      	beq.n	800c708 <osTimerNew+0xe8>
      callb->func = func;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c660:	7afb      	ldrb	r3, [r7, #11]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d102      	bne.n	800c66c <osTimerNew+0x4c>
        reload = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	61fb      	str	r3, [r7, #28]
 800c66a:	e001      	b.n	800c670 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c66c:	2301      	movs	r3, #1
 800c66e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d01c      	beq.n	800c6ba <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <osTimerNew+0x6e>
          name = attr->name;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d006      	beq.n	800c6a4 <osTimerNew+0x84>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c69c:	d902      	bls.n	800c6a4 <osTimerNew+0x84>
          mem = 1;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	e00c      	b.n	800c6be <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d108      	bne.n	800c6be <osTimerNew+0x9e>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d104      	bne.n	800c6be <osTimerNew+0x9e>
            mem = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	61bb      	str	r3, [r7, #24]
 800c6b8:	e001      	b.n	800c6be <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d10c      	bne.n	800c6de <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	4b12      	ldr	r3, [pc, #72]	@ (800c714 <osTimerNew+0xf4>)
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6d6:	f002 fe12 	bl	800f2fe <xTimerCreateStatic>
 800c6da:	6238      	str	r0, [r7, #32]
 800c6dc:	e00b      	b.n	800c6f6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d108      	bne.n	800c6f6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c6e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c714 <osTimerNew+0xf4>)
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6f0:	f002 fde4 	bl	800f2bc <xTimerCreate>
 800c6f4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d105      	bne.n	800c708 <osTimerNew+0xe8>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <osTimerNew+0xe8>
        vPortFree (callb);
 800c702:	6978      	ldr	r0, [r7, #20]
 800c704:	f003 fcc8 	bl	8010098 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c708:	6a3b      	ldr	r3, [r7, #32]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3728      	adds	r7, #40	@ 0x28
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	0800c5f5 	.word	0x0800c5f5

0800c718 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c724:	f3ef 8305 	mrs	r3, IPSR
 800c728:	60bb      	str	r3, [r7, #8]
  return(result);
 800c72a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d174      	bne.n	800c81a <osMutexNew+0x102>
    if (attr != NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <osMutexNew+0x26>
      type = attr->attr_bits;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	e001      	b.n	800c742 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c73e:	2300      	movs	r3, #0
 800c740:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <osMutexNew+0x3a>
      rmtx = 1U;
 800c74c:	2301      	movs	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	e001      	b.n	800c756 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	f003 0308 	and.w	r3, r3, #8
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d15c      	bne.n	800c81a <osMutexNew+0x102>
      mem = -1;
 800c760:	f04f 33ff 	mov.w	r3, #4294967295
 800c764:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d015      	beq.n	800c798 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <osMutexNew+0x6a>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	2b4f      	cmp	r3, #79	@ 0x4f
 800c77a:	d902      	bls.n	800c782 <osMutexNew+0x6a>
          mem = 1;
 800c77c:	2301      	movs	r3, #1
 800c77e:	613b      	str	r3, [r7, #16]
 800c780:	e00c      	b.n	800c79c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d108      	bne.n	800c79c <osMutexNew+0x84>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d104      	bne.n	800c79c <osMutexNew+0x84>
            mem = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	613b      	str	r3, [r7, #16]
 800c796:	e001      	b.n	800c79c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d112      	bne.n	800c7c8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d007      	beq.n	800c7b8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	2004      	movs	r0, #4
 800c7b0:	f000 fd71 	bl	800d296 <xQueueCreateMutexStatic>
 800c7b4:	61f8      	str	r0, [r7, #28]
 800c7b6:	e016      	b.n	800c7e6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	2001      	movs	r0, #1
 800c7c0:	f000 fd69 	bl	800d296 <xQueueCreateMutexStatic>
 800c7c4:	61f8      	str	r0, [r7, #28]
 800c7c6:	e00e      	b.n	800c7e6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10b      	bne.n	800c7e6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d004      	beq.n	800c7de <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c7d4:	2004      	movs	r0, #4
 800c7d6:	f000 fd46 	bl	800d266 <xQueueCreateMutex>
 800c7da:	61f8      	str	r0, [r7, #28]
 800c7dc:	e003      	b.n	800c7e6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c7de:	2001      	movs	r0, #1
 800c7e0:	f000 fd41 	bl	800d266 <xQueueCreateMutex>
 800c7e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00c      	beq.n	800c806 <osMutexNew+0xee>
        if (attr != NULL) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <osMutexNew+0xe2>
          name = attr->name;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	e001      	b.n	800c7fe <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c7fe:	68f9      	ldr	r1, [r7, #12]
 800c800:	69f8      	ldr	r0, [r7, #28]
 800c802:	f001 fc2d 	bl	800e060 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d006      	beq.n	800c81a <osMutexNew+0x102>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c81a:	69fb      	ldr	r3, [r7, #28]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3720      	adds	r7, #32
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f023 0301 	bic.w	r3, r3, #1
 800c834:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c842:	f3ef 8305 	mrs	r3, IPSR
 800c846:	60bb      	str	r3, [r7, #8]
  return(result);
 800c848:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c84e:	f06f 0305 	mvn.w	r3, #5
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e02c      	b.n	800c8b0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c85c:	f06f 0303 	mvn.w	r3, #3
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	e025      	b.n	800c8b0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d011      	beq.n	800c88e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6938      	ldr	r0, [r7, #16]
 800c86e:	f000 fd62 	bl	800d336 <xQueueTakeMutexRecursive>
 800c872:	4603      	mov	r3, r0
 800c874:	2b01      	cmp	r3, #1
 800c876:	d01b      	beq.n	800c8b0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c87e:	f06f 0301 	mvn.w	r3, #1
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	e014      	b.n	800c8b0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c886:	f06f 0302 	mvn.w	r3, #2
 800c88a:	617b      	str	r3, [r7, #20]
 800c88c:	e010      	b.n	800c8b0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6938      	ldr	r0, [r7, #16]
 800c892:	f001 f907 	bl	800daa4 <xQueueSemaphoreTake>
 800c896:	4603      	mov	r3, r0
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d009      	beq.n	800c8b0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c8a2:	f06f 0301 	mvn.w	r3, #1
 800c8a6:	617b      	str	r3, [r7, #20]
 800c8a8:	e002      	b.n	800c8b0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c8aa:	f06f 0302 	mvn.w	r3, #2
 800c8ae:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c8b0:	697b      	ldr	r3, [r7, #20]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f023 0301 	bic.w	r3, r3, #1
 800c8c8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8d6:	f3ef 8305 	mrs	r3, IPSR
 800c8da:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8dc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <osMutexRelease+0x30>
    stat = osErrorISR;
 800c8e2:	f06f 0305 	mvn.w	r3, #5
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	e01f      	b.n	800c92a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d103      	bne.n	800c8f8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c8f0:	f06f 0303 	mvn.w	r3, #3
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	e018      	b.n	800c92a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d009      	beq.n	800c912 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c8fe:	6938      	ldr	r0, [r7, #16]
 800c900:	f000 fce4 	bl	800d2cc <xQueueGiveMutexRecursive>
 800c904:	4603      	mov	r3, r0
 800c906:	2b01      	cmp	r3, #1
 800c908:	d00f      	beq.n	800c92a <osMutexRelease+0x70>
        stat = osErrorResource;
 800c90a:	f06f 0302 	mvn.w	r3, #2
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e00b      	b.n	800c92a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c912:	2300      	movs	r3, #0
 800c914:	2200      	movs	r2, #0
 800c916:	2100      	movs	r1, #0
 800c918:	6938      	ldr	r0, [r7, #16]
 800c91a:	f000 fdb1 	bl	800d480 <xQueueGenericSend>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b01      	cmp	r3, #1
 800c922:	d002      	beq.n	800c92a <osMutexRelease+0x70>
        stat = osErrorResource;
 800c924:	f06f 0302 	mvn.w	r3, #2
 800c928:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c92a:	697b      	ldr	r3, [r7, #20]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b08a      	sub	sp, #40	@ 0x28
 800c938:	af02      	add	r7, sp, #8
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c944:	f3ef 8305 	mrs	r3, IPSR
 800c948:	613b      	str	r3, [r7, #16]
  return(result);
 800c94a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d175      	bne.n	800ca3c <osSemaphoreNew+0x108>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d072      	beq.n	800ca3c <osSemaphoreNew+0x108>
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d86e      	bhi.n	800ca3c <osSemaphoreNew+0x108>
    mem = -1;
 800c95e:	f04f 33ff 	mov.w	r3, #4294967295
 800c962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d015      	beq.n	800c996 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d006      	beq.n	800c980 <osSemaphoreNew+0x4c>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	2b4f      	cmp	r3, #79	@ 0x4f
 800c978:	d902      	bls.n	800c980 <osSemaphoreNew+0x4c>
        mem = 1;
 800c97a:	2301      	movs	r3, #1
 800c97c:	61bb      	str	r3, [r7, #24]
 800c97e:	e00c      	b.n	800c99a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <osSemaphoreNew+0x66>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d104      	bne.n	800c99a <osSemaphoreNew+0x66>
          mem = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	61bb      	str	r3, [r7, #24]
 800c994:	e001      	b.n	800c99a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d04c      	beq.n	800ca3c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d128      	bne.n	800c9fa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d10a      	bne.n	800c9c4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	2203      	movs	r2, #3
 800c9b4:	9200      	str	r2, [sp, #0]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	f000 fb5e 	bl	800d07c <xQueueGenericCreateStatic>
 800c9c0:	61f8      	str	r0, [r7, #28]
 800c9c2:	e005      	b.n	800c9d0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c9c4:	2203      	movs	r2, #3
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f000 fbd4 	bl	800d176 <xQueueGenericCreate>
 800c9ce:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d022      	beq.n	800ca1c <osSemaphoreNew+0xe8>
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d01f      	beq.n	800ca1c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	69f8      	ldr	r0, [r7, #28]
 800c9e4:	f000 fd4c 	bl	800d480 <xQueueGenericSend>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d016      	beq.n	800ca1c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c9ee:	69f8      	ldr	r0, [r7, #28]
 800c9f0:	f001 f9ea 	bl	800ddc8 <vQueueDelete>
            hSemaphore = NULL;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	e010      	b.n	800ca1c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d108      	bne.n	800ca12 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	461a      	mov	r2, r3
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 fccb 	bl	800d3a4 <xQueueCreateCountingSemaphoreStatic>
 800ca0e:	61f8      	str	r0, [r7, #28]
 800ca10:	e004      	b.n	800ca1c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f000 fcfe 	bl	800d416 <xQueueCreateCountingSemaphore>
 800ca1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00c      	beq.n	800ca3c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	e001      	b.n	800ca34 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ca34:	6979      	ldr	r1, [r7, #20]
 800ca36:	69f8      	ldr	r0, [r7, #28]
 800ca38:	f001 fb12 	bl	800e060 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ca3c:	69fb      	ldr	r3, [r7, #28]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d103      	bne.n	800ca68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ca60:	f06f 0303 	mvn.w	r3, #3
 800ca64:	617b      	str	r3, [r7, #20]
 800ca66:	e039      	b.n	800cadc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca68:	f3ef 8305 	mrs	r3, IPSR
 800ca6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d022      	beq.n	800caba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ca7a:	f06f 0303 	mvn.w	r3, #3
 800ca7e:	617b      	str	r3, [r7, #20]
 800ca80:	e02c      	b.n	800cadc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	6938      	ldr	r0, [r7, #16]
 800ca90:	f001 f918 	bl	800dcc4 <xQueueReceiveFromISR>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d003      	beq.n	800caa2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ca9a:	f06f 0302 	mvn.w	r3, #2
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	e01c      	b.n	800cadc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d019      	beq.n	800cadc <osSemaphoreAcquire+0x94>
 800caa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cae8 <osSemaphoreAcquire+0xa0>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	e010      	b.n	800cadc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6938      	ldr	r0, [r7, #16]
 800cabe:	f000 fff1 	bl	800daa4 <xQueueSemaphoreTake>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d009      	beq.n	800cadc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cace:	f06f 0301 	mvn.w	r3, #1
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	e002      	b.n	800cadc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cad6:	f06f 0302 	mvn.w	r3, #2
 800cada:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cadc:	697b      	ldr	r3, [r7, #20]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d103      	bne.n	800cb0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cb02:	f06f 0303 	mvn.w	r3, #3
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	e02c      	b.n	800cb64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb0a:	f3ef 8305 	mrs	r3, IPSR
 800cb0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d01a      	beq.n	800cb4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cb1a:	f107 0308 	add.w	r3, r7, #8
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6938      	ldr	r0, [r7, #16]
 800cb22:	f000 fe4d 	bl	800d7c0 <xQueueGiveFromISR>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d003      	beq.n	800cb34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cb2c:	f06f 0302 	mvn.w	r3, #2
 800cb30:	617b      	str	r3, [r7, #20]
 800cb32:	e017      	b.n	800cb64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d014      	beq.n	800cb64 <osSemaphoreRelease+0x78>
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb70 <osSemaphoreRelease+0x84>)
 800cb3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	e00b      	b.n	800cb64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	6938      	ldr	r0, [r7, #16]
 800cb54:	f000 fc94 	bl	800d480 <xQueueGenericSend>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d002      	beq.n	800cb64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cb5e:	f06f 0302 	mvn.w	r3, #2
 800cb62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cb64:	697b      	ldr	r3, [r7, #20]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	e000ed04 	.word	0xe000ed04

0800cb74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb84:	f3ef 8305 	mrs	r3, IPSR
 800cb88:	613b      	str	r3, [r7, #16]
  return(result);
 800cb8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d15f      	bne.n	800cc50 <osMessageQueueNew+0xdc>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d05c      	beq.n	800cc50 <osMessageQueueNew+0xdc>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d059      	beq.n	800cc50 <osMessageQueueNew+0xdc>
    mem = -1;
 800cb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cba0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d029      	beq.n	800cbfc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d012      	beq.n	800cbd6 <osMessageQueueNew+0x62>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	2b4f      	cmp	r3, #79	@ 0x4f
 800cbb6:	d90e      	bls.n	800cbd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00a      	beq.n	800cbd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	695a      	ldr	r2, [r3, #20]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d302      	bcc.n	800cbd6 <osMessageQueueNew+0x62>
        mem = 1;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	e014      	b.n	800cc00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d110      	bne.n	800cc00 <osMessageQueueNew+0x8c>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10c      	bne.n	800cc00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d108      	bne.n	800cc00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d104      	bne.n	800cc00 <osMessageQueueNew+0x8c>
          mem = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	61bb      	str	r3, [r7, #24]
 800cbfa:	e001      	b.n	800cc00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d10b      	bne.n	800cc1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	691a      	ldr	r2, [r3, #16]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	2100      	movs	r1, #0
 800cc10:	9100      	str	r1, [sp, #0]
 800cc12:	68b9      	ldr	r1, [r7, #8]
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 fa31 	bl	800d07c <xQueueGenericCreateStatic>
 800cc1a:	61f8      	str	r0, [r7, #28]
 800cc1c:	e008      	b.n	800cc30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d105      	bne.n	800cc30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cc24:	2200      	movs	r2, #0
 800cc26:	68b9      	ldr	r1, [r7, #8]
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 faa4 	bl	800d176 <xQueueGenericCreate>
 800cc2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00c      	beq.n	800cc50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	e001      	b.n	800cc48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cc48:	6979      	ldr	r1, [r7, #20]
 800cc4a:	69f8      	ldr	r0, [r7, #28]
 800cc4c:	f001 fa08 	bl	800e060 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cc50:	69fb      	ldr	r3, [r7, #28]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
	...

0800cc5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b088      	sub	sp, #32
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	603b      	str	r3, [r7, #0]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc74:	f3ef 8305 	mrs	r3, IPSR
 800cc78:	617b      	str	r3, [r7, #20]
  return(result);
 800cc7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d028      	beq.n	800ccd2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <osMessageQueuePut+0x36>
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <osMessageQueuePut+0x36>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cc92:	f06f 0303 	mvn.w	r3, #3
 800cc96:	61fb      	str	r3, [r7, #28]
 800cc98:	e038      	b.n	800cd0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cc9e:	f107 0210 	add.w	r2, r7, #16
 800cca2:	2300      	movs	r3, #0
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	69b8      	ldr	r0, [r7, #24]
 800cca8:	f000 fcec 	bl	800d684 <xQueueGenericSendFromISR>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d003      	beq.n	800ccba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ccb2:	f06f 0302 	mvn.w	r3, #2
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	e028      	b.n	800cd0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d025      	beq.n	800cd0c <osMessageQueuePut+0xb0>
 800ccc0:	4b15      	ldr	r3, [pc, #84]	@ (800cd18 <osMessageQueuePut+0xbc>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	e01c      	b.n	800cd0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <osMessageQueuePut+0x82>
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d103      	bne.n	800cce6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ccde:	f06f 0303 	mvn.w	r3, #3
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e012      	b.n	800cd0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cce6:	2300      	movs	r3, #0
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	69b8      	ldr	r0, [r7, #24]
 800ccee:	f000 fbc7 	bl	800d480 <xQueueGenericSend>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d009      	beq.n	800cd0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ccfe:	f06f 0301 	mvn.w	r3, #1
 800cd02:	61fb      	str	r3, [r7, #28]
 800cd04:	e002      	b.n	800cd0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cd06:	f06f 0302 	mvn.w	r3, #2
 800cd0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	e000ed04 	.word	0xe000ed04

0800cd1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd32:	f3ef 8305 	mrs	r3, IPSR
 800cd36:	617b      	str	r3, [r7, #20]
  return(result);
 800cd38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d028      	beq.n	800cd90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d005      	beq.n	800cd50 <osMessageQueueGet+0x34>
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d002      	beq.n	800cd50 <osMessageQueueGet+0x34>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d003      	beq.n	800cd58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cd50:	f06f 0303 	mvn.w	r3, #3
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e037      	b.n	800cdc8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cd5c:	f107 0310 	add.w	r3, r7, #16
 800cd60:	461a      	mov	r2, r3
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	69b8      	ldr	r0, [r7, #24]
 800cd66:	f000 ffad 	bl	800dcc4 <xQueueReceiveFromISR>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d003      	beq.n	800cd78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cd70:	f06f 0302 	mvn.w	r3, #2
 800cd74:	61fb      	str	r3, [r7, #28]
 800cd76:	e027      	b.n	800cdc8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d024      	beq.n	800cdc8 <osMessageQueueGet+0xac>
 800cd7e:	4b15      	ldr	r3, [pc, #84]	@ (800cdd4 <osMessageQueueGet+0xb8>)
 800cd80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	e01b      	b.n	800cdc8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d002      	beq.n	800cd9c <osMessageQueueGet+0x80>
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d103      	bne.n	800cda4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cd9c:	f06f 0303 	mvn.w	r3, #3
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	e011      	b.n	800cdc8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	69b8      	ldr	r0, [r7, #24]
 800cdaa:	f000 fd99 	bl	800d8e0 <xQueueReceive>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d009      	beq.n	800cdc8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cdba:	f06f 0301 	mvn.w	r3, #1
 800cdbe:	61fb      	str	r3, [r7, #28]
 800cdc0:	e002      	b.n	800cdc8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cdc2:	f06f 0302 	mvn.w	r3, #2
 800cdc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cdc8:	69fb      	ldr	r3, [r7, #28]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	4a07      	ldr	r2, [pc, #28]	@ (800ce04 <vApplicationGetIdleTaskMemory+0x2c>)
 800cde8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	4a06      	ldr	r2, [pc, #24]	@ (800ce08 <vApplicationGetIdleTaskMemory+0x30>)
 800cdee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2280      	movs	r2, #128	@ 0x80
 800cdf4:	601a      	str	r2, [r3, #0]
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	24005120 	.word	0x24005120
 800ce08:	240051c8 	.word	0x240051c8

0800ce0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4a07      	ldr	r2, [pc, #28]	@ (800ce38 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4a06      	ldr	r2, [pc, #24]	@ (800ce3c <vApplicationGetTimerTaskMemory+0x30>)
 800ce22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce2a:	601a      	str	r2, [r3, #0]
}
 800ce2c:	bf00      	nop
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	240053c8 	.word	0x240053c8
 800ce3c:	24005470 	.word	0x24005470

0800ce40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f103 0208 	add.w	r2, r3, #8
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f04f 32ff 	mov.w	r2, #4294967295
 800ce58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f103 0208 	add.w	r2, r3, #8
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f103 0208 	add.w	r2, r3, #8
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b085      	sub	sp, #20
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	689a      	ldr	r2, [r3, #8]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	601a      	str	r2, [r3, #0]
}
 800ced6:	bf00      	nop
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cee2:	b480      	push	{r7}
 800cee4:	b085      	sub	sp, #20
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef8:	d103      	bne.n	800cf02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e00c      	b.n	800cf1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3308      	adds	r3, #8
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	e002      	b.n	800cf10 <vListInsert+0x2e>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	60fb      	str	r3, [r7, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d2f6      	bcs.n	800cf0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	1c5a      	adds	r2, r3, #1
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	601a      	str	r2, [r3, #0]
}
 800cf48:	bf00      	nop
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	6892      	ldr	r2, [r2, #8]
 800cf6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	6852      	ldr	r2, [r2, #4]
 800cf74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d103      	bne.n	800cf88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	689a      	ldr	r2, [r3, #8]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	1e5a      	subs	r2, r3, #1
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cfce:	bf00      	nop
 800cfd0:	bf00      	nop
 800cfd2:	e7fd      	b.n	800cfd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfd4:	f002 fe70 	bl	800fcb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe0:	68f9      	ldr	r1, [r7, #12]
 800cfe2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cfe4:	fb01 f303 	mul.w	r3, r1, r3
 800cfe8:	441a      	add	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d004:	3b01      	subs	r3, #1
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d00a:	fb01 f303 	mul.w	r3, r1, r3
 800d00e:	441a      	add	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	22ff      	movs	r2, #255	@ 0xff
 800d018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	22ff      	movs	r2, #255	@ 0xff
 800d020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d114      	bne.n	800d054 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d01a      	beq.n	800d068 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3310      	adds	r3, #16
 800d036:	4618      	mov	r0, r3
 800d038:	f001 fd3e 	bl	800eab8 <xTaskRemoveFromEventList>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d012      	beq.n	800d068 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d042:	4b0d      	ldr	r3, [pc, #52]	@ (800d078 <xQueueGenericReset+0xd0>)
 800d044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	e009      	b.n	800d068 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3310      	adds	r3, #16
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fef1 	bl	800ce40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3324      	adds	r3, #36	@ 0x24
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff feec 	bl	800ce40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d068:	f002 fe58 	bl	800fd1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d06c:	2301      	movs	r3, #1
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	e000ed04 	.word	0xe000ed04

0800d07c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08e      	sub	sp, #56	@ 0x38
 800d080:	af02      	add	r7, sp, #8
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10b      	bne.n	800d0a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0a2:	bf00      	nop
 800d0a4:	bf00      	nop
 800d0a6:	e7fd      	b.n	800d0a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	e7fd      	b.n	800d0c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <xQueueGenericCreateStatic+0x56>
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <xQueueGenericCreateStatic+0x5a>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e000      	b.n	800d0d8 <xQueueGenericCreateStatic+0x5c>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10b      	bne.n	800d0f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	623b      	str	r3, [r7, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	bf00      	nop
 800d0f2:	e7fd      	b.n	800d0f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d102      	bne.n	800d100 <xQueueGenericCreateStatic+0x84>
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <xQueueGenericCreateStatic+0x88>
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <xQueueGenericCreateStatic+0x8a>
 800d104:	2300      	movs	r3, #0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10b      	bne.n	800d122 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	61fb      	str	r3, [r7, #28]
}
 800d11c:	bf00      	nop
 800d11e:	bf00      	nop
 800d120:	e7fd      	b.n	800d11e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d122:	2350      	movs	r3, #80	@ 0x50
 800d124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b50      	cmp	r3, #80	@ 0x50
 800d12a:	d00b      	beq.n	800d144 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	61bb      	str	r3, [r7, #24]
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	e7fd      	b.n	800d140 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d144:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00d      	beq.n	800d16c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d158:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	4613      	mov	r3, r2
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	68b9      	ldr	r1, [r7, #8]
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f000 f840 	bl	800d1ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d16e:	4618      	mov	r0, r3
 800d170:	3730      	adds	r7, #48	@ 0x30
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d176:	b580      	push	{r7, lr}
 800d178:	b08a      	sub	sp, #40	@ 0x28
 800d17a:	af02      	add	r7, sp, #8
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	4613      	mov	r3, r2
 800d182:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	613b      	str	r3, [r7, #16]
}
 800d19c:	bf00      	nop
 800d19e:	bf00      	nop
 800d1a0:	e7fd      	b.n	800d19e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	fb02 f303 	mul.w	r3, r2, r3
 800d1aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	3350      	adds	r3, #80	@ 0x50
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f002 fea3 	bl	800fefc <pvPortMalloc>
 800d1b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d011      	beq.n	800d1e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	3350      	adds	r3, #80	@ 0x50
 800d1c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1d0:	79fa      	ldrb	r2, [r7, #7]
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 f805 	bl	800d1ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1e2:	69bb      	ldr	r3, [r7, #24]
	}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3720      	adds	r7, #32
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	e002      	b.n	800d20e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d21a:	2101      	movs	r1, #1
 800d21c:	69b8      	ldr	r0, [r7, #24]
 800d21e:	f7ff fec3 	bl	800cfa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	78fa      	ldrb	r2, [r7, #3]
 800d226:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00e      	beq.n	800d25e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d252:	2300      	movs	r3, #0
 800d254:	2200      	movs	r2, #0
 800d256:	2100      	movs	r1, #0
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f911 	bl	800d480 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d266:	b580      	push	{r7, lr}
 800d268:	b086      	sub	sp, #24
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	4603      	mov	r3, r0
 800d26e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d270:	2301      	movs	r3, #1
 800d272:	617b      	str	r3, [r7, #20]
 800d274:	2300      	movs	r3, #0
 800d276:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	461a      	mov	r2, r3
 800d27c:	6939      	ldr	r1, [r7, #16]
 800d27e:	6978      	ldr	r0, [r7, #20]
 800d280:	f7ff ff79 	bl	800d176 <xQueueGenericCreate>
 800d284:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f7ff ffd3 	bl	800d232 <prvInitialiseMutex>

		return xNewQueue;
 800d28c:	68fb      	ldr	r3, [r7, #12]
	}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d296:	b580      	push	{r7, lr}
 800d298:	b088      	sub	sp, #32
 800d29a:	af02      	add	r7, sp, #8
 800d29c:	4603      	mov	r3, r0
 800d29e:	6039      	str	r1, [r7, #0]
 800d2a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	617b      	str	r3, [r7, #20]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	6939      	ldr	r1, [r7, #16]
 800d2b4:	6978      	ldr	r0, [r7, #20]
 800d2b6:	f7ff fee1 	bl	800d07c <xQueueGenericCreateStatic>
 800d2ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f7ff ffb8 	bl	800d232 <prvInitialiseMutex>

		return xNewQueue;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
	}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3718      	adds	r7, #24
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10b      	bne.n	800d2f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	60fb      	str	r3, [r7, #12]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	689c      	ldr	r4, [r3, #8]
 800d2fa:	f001 fda3 	bl	800ee44 <xTaskGetCurrentTaskHandle>
 800d2fe:	4603      	mov	r3, r0
 800d300:	429c      	cmp	r4, r3
 800d302:	d111      	bne.n	800d328 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	1e5a      	subs	r2, r3, #1
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d105      	bne.n	800d322 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d316:	2300      	movs	r3, #0
 800d318:	2200      	movs	r2, #0
 800d31a:	2100      	movs	r1, #0
 800d31c:	6938      	ldr	r0, [r7, #16]
 800d31e:	f000 f8af 	bl	800d480 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d322:	2301      	movs	r3, #1
 800d324:	617b      	str	r3, [r7, #20]
 800d326:	e001      	b.n	800d32c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d32c:	697b      	ldr	r3, [r7, #20]
	}
 800d32e:	4618      	mov	r0, r3
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	bd90      	pop	{r4, r7, pc}

0800d336 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d336:	b590      	push	{r4, r7, lr}
 800d338:	b087      	sub	sp, #28
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10b      	bne.n	800d362 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	60fb      	str	r3, [r7, #12]
}
 800d35c:	bf00      	nop
 800d35e:	bf00      	nop
 800d360:	e7fd      	b.n	800d35e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	689c      	ldr	r4, [r3, #8]
 800d366:	f001 fd6d 	bl	800ee44 <xTaskGetCurrentTaskHandle>
 800d36a:	4603      	mov	r3, r0
 800d36c:	429c      	cmp	r4, r3
 800d36e:	d107      	bne.n	800d380 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d37a:	2301      	movs	r3, #1
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e00c      	b.n	800d39a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	6938      	ldr	r0, [r7, #16]
 800d384:	f000 fb8e 	bl	800daa4 <xQueueSemaphoreTake>
 800d388:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d004      	beq.n	800d39a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	1c5a      	adds	r2, r3, #1
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d39a:	697b      	ldr	r3, [r7, #20]
	}
 800d39c:	4618      	mov	r0, r3
 800d39e:	371c      	adds	r7, #28
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd90      	pop	{r4, r7, pc}

0800d3a4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08a      	sub	sp, #40	@ 0x28
 800d3a8:	af02      	add	r7, sp, #8
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10b      	bne.n	800d3ce <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	61bb      	str	r3, [r7, #24]
}
 800d3c8:	bf00      	nop
 800d3ca:	bf00      	nop
 800d3cc:	e7fd      	b.n	800d3ca <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d90b      	bls.n	800d3ee <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	617b      	str	r3, [r7, #20]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff fe3f 	bl	800d07c <xQueueGenericCreateStatic>
 800d3fe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d40c:	69fb      	ldr	r3, [r7, #28]
	}
 800d40e:	4618      	mov	r0, r3
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d416:	b580      	push	{r7, lr}
 800d418:	b086      	sub	sp, #24
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10b      	bne.n	800d43e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	613b      	str	r3, [r7, #16]
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	429a      	cmp	r2, r3
 800d444:	d90b      	bls.n	800d45e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	e7fd      	b.n	800d45a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d45e:	2202      	movs	r2, #2
 800d460:	2100      	movs	r1, #0
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7ff fe87 	bl	800d176 <xQueueGenericCreate>
 800d468:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d476:	697b      	ldr	r3, [r7, #20]
	}
 800d478:	4618      	mov	r0, r3
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08e      	sub	sp, #56	@ 0x38
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
 800d48c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d48e:	2300      	movs	r3, #0
 800d490:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10b      	bne.n	800d4b4 <xQueueGenericSend+0x34>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4ae:	bf00      	nop
 800d4b0:	bf00      	nop
 800d4b2:	e7fd      	b.n	800d4b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <xQueueGenericSend+0x42>
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <xQueueGenericSend+0x46>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <xQueueGenericSend+0x48>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10b      	bne.n	800d4e4 <xQueueGenericSend+0x64>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4de:	bf00      	nop
 800d4e0:	bf00      	nop
 800d4e2:	e7fd      	b.n	800d4e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d103      	bne.n	800d4f2 <xQueueGenericSend+0x72>
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d101      	bne.n	800d4f6 <xQueueGenericSend+0x76>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <xQueueGenericSend+0x78>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10b      	bne.n	800d514 <xQueueGenericSend+0x94>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	623b      	str	r3, [r7, #32]
}
 800d50e:	bf00      	nop
 800d510:	bf00      	nop
 800d512:	e7fd      	b.n	800d510 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d514:	f001 fca6 	bl	800ee64 <xTaskGetSchedulerState>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <xQueueGenericSend+0xa4>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <xQueueGenericSend+0xa8>
 800d524:	2301      	movs	r3, #1
 800d526:	e000      	b.n	800d52a <xQueueGenericSend+0xaa>
 800d528:	2300      	movs	r3, #0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10b      	bne.n	800d546 <xQueueGenericSend+0xc6>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	61fb      	str	r3, [r7, #28]
}
 800d540:	bf00      	nop
 800d542:	bf00      	nop
 800d544:	e7fd      	b.n	800d542 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d546:	f002 fbb7 	bl	800fcb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d552:	429a      	cmp	r2, r3
 800d554:	d302      	bcc.n	800d55c <xQueueGenericSend+0xdc>
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d129      	bne.n	800d5b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	68b9      	ldr	r1, [r7, #8]
 800d560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d562:	f000 fc6d 	bl	800de40 <prvCopyDataToQueue>
 800d566:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d010      	beq.n	800d592 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	3324      	adds	r3, #36	@ 0x24
 800d574:	4618      	mov	r0, r3
 800d576:	f001 fa9f 	bl	800eab8 <xTaskRemoveFromEventList>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d013      	beq.n	800d5a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d580:	4b3f      	ldr	r3, [pc, #252]	@ (800d680 <xQueueGenericSend+0x200>)
 800d582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	e00a      	b.n	800d5a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d598:	4b39      	ldr	r3, [pc, #228]	@ (800d680 <xQueueGenericSend+0x200>)
 800d59a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5a8:	f002 fbb8 	bl	800fd1c <vPortExitCritical>
				return pdPASS;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e063      	b.n	800d678 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d103      	bne.n	800d5be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5b6:	f002 fbb1 	bl	800fd1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e05c      	b.n	800d678 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5c4:	f107 0314 	add.w	r3, r7, #20
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f001 fad9 	bl	800eb80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5d2:	f002 fba3 	bl	800fd1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5d6:	f001 f82f 	bl	800e638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5da:	f002 fb6d 	bl	800fcb8 <vPortEnterCritical>
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5e4:	b25b      	sxtb	r3, r3
 800d5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ea:	d103      	bne.n	800d5f4 <xQueueGenericSend+0x174>
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5fa:	b25b      	sxtb	r3, r3
 800d5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d600:	d103      	bne.n	800d60a <xQueueGenericSend+0x18a>
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	2200      	movs	r2, #0
 800d606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d60a:	f002 fb87 	bl	800fd1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d60e:	1d3a      	adds	r2, r7, #4
 800d610:	f107 0314 	add.w	r3, r7, #20
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f001 fac8 	bl	800ebac <xTaskCheckForTimeOut>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d124      	bne.n	800d66c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d622:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d624:	f000 fd04 	bl	800e030 <prvIsQueueFull>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d018      	beq.n	800d660 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	3310      	adds	r3, #16
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	4611      	mov	r1, r2
 800d636:	4618      	mov	r0, r3
 800d638:	f001 f9ec 	bl	800ea14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d63c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d63e:	f000 fc8f 	bl	800df60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d642:	f001 f807 	bl	800e654 <xTaskResumeAll>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f47f af7c 	bne.w	800d546 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d64e:	4b0c      	ldr	r3, [pc, #48]	@ (800d680 <xQueueGenericSend+0x200>)
 800d650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	e772      	b.n	800d546 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d662:	f000 fc7d 	bl	800df60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d666:	f000 fff5 	bl	800e654 <xTaskResumeAll>
 800d66a:	e76c      	b.n	800d546 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d66c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d66e:	f000 fc77 	bl	800df60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d672:	f000 ffef 	bl	800e654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d676:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3738      	adds	r7, #56	@ 0x38
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	e000ed04 	.word	0xe000ed04

0800d684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b090      	sub	sp, #64	@ 0x40
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	e7fd      	b.n	800d6b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <xQueueGenericSendFromISR+0x3e>
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xQueueGenericSendFromISR+0x42>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericSendFromISR+0x44>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d103      	bne.n	800d6f2 <xQueueGenericSendFromISR+0x6e>
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d101      	bne.n	800d6f6 <xQueueGenericSendFromISR+0x72>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <xQueueGenericSendFromISR+0x74>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	623b      	str	r3, [r7, #32]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d714:	f002 fbb0 	bl	800fe78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d718:	f3ef 8211 	mrs	r2, BASEPRI
 800d71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	61fa      	str	r2, [r7, #28]
 800d72e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d730:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d732:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d302      	bcc.n	800d746 <xQueueGenericSendFromISR+0xc2>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b02      	cmp	r3, #2
 800d744:	d12f      	bne.n	800d7a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d74c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d754:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d756:	683a      	ldr	r2, [r7, #0]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d75c:	f000 fb70 	bl	800de40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d760:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d768:	d112      	bne.n	800d790 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d016      	beq.n	800d7a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d774:	3324      	adds	r3, #36	@ 0x24
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f99e 	bl	800eab8 <xTaskRemoveFromEventList>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00e      	beq.n	800d7a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00b      	beq.n	800d7a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	e007      	b.n	800d7a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d794:	3301      	adds	r3, #1
 800d796:	b2db      	uxtb	r3, r3
 800d798:	b25a      	sxtb	r2, r3
 800d79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d7a4:	e001      	b.n	800d7aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3740      	adds	r7, #64	@ 0x40
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08e      	sub	sp, #56	@ 0x38
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	623b      	str	r3, [r7, #32]
}
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
 800d7ea:	e7fd      	b.n	800d7e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	61fb      	str	r3, [r7, #28]
}
 800d806:	bf00      	nop
 800d808:	bf00      	nop
 800d80a:	e7fd      	b.n	800d808 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d103      	bne.n	800d81c <xQueueGiveFromISR+0x5c>
 800d814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d101      	bne.n	800d820 <xQueueGiveFromISR+0x60>
 800d81c:	2301      	movs	r3, #1
 800d81e:	e000      	b.n	800d822 <xQueueGiveFromISR+0x62>
 800d820:	2300      	movs	r3, #0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10b      	bne.n	800d83e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	61bb      	str	r3, [r7, #24]
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	e7fd      	b.n	800d83a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d83e:	f002 fb1b 	bl	800fe78 <vPortValidateInterruptPriority>
	__asm volatile
 800d842:	f3ef 8211 	mrs	r2, BASEPRI
 800d846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	617a      	str	r2, [r7, #20]
 800d858:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d85a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d862:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d22b      	bcs.n	800d8c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d880:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	d112      	bne.n	800d8b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d016      	beq.n	800d8c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	3324      	adds	r3, #36	@ 0x24
 800d896:	4618      	mov	r0, r3
 800d898:	f001 f90e 	bl	800eab8 <xTaskRemoveFromEventList>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00e      	beq.n	800d8c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	e007      	b.n	800d8c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	b25a      	sxtb	r2, r3
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c4:	e001      	b.n	800d8ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f383 8811 	msr	BASEPRI, r3
}
 800d8d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3738      	adds	r7, #56	@ 0x38
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b08c      	sub	sp, #48	@ 0x30
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10b      	bne.n	800d912 <xQueueReceive+0x32>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	623b      	str	r3, [r7, #32]
}
 800d90c:	bf00      	nop
 800d90e:	bf00      	nop
 800d910:	e7fd      	b.n	800d90e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d103      	bne.n	800d920 <xQueueReceive+0x40>
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <xQueueReceive+0x44>
 800d920:	2301      	movs	r3, #1
 800d922:	e000      	b.n	800d926 <xQueueReceive+0x46>
 800d924:	2300      	movs	r3, #0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10b      	bne.n	800d942 <xQueueReceive+0x62>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	61fb      	str	r3, [r7, #28]
}
 800d93c:	bf00      	nop
 800d93e:	bf00      	nop
 800d940:	e7fd      	b.n	800d93e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d942:	f001 fa8f 	bl	800ee64 <xTaskGetSchedulerState>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <xQueueReceive+0x72>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <xQueueReceive+0x76>
 800d952:	2301      	movs	r3, #1
 800d954:	e000      	b.n	800d958 <xQueueReceive+0x78>
 800d956:	2300      	movs	r3, #0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10b      	bne.n	800d974 <xQueueReceive+0x94>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	61bb      	str	r3, [r7, #24]
}
 800d96e:	bf00      	nop
 800d970:	bf00      	nop
 800d972:	e7fd      	b.n	800d970 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d974:	f002 f9a0 	bl	800fcb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01f      	beq.n	800d9c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d988:	f000 fac4 	bl	800df14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98e:	1e5a      	subs	r2, r3, #1
 800d990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d992:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00f      	beq.n	800d9bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	3310      	adds	r3, #16
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f001 f889 	bl	800eab8 <xTaskRemoveFromEventList>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d007      	beq.n	800d9bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9ac:	4b3c      	ldr	r3, [pc, #240]	@ (800daa0 <xQueueReceive+0x1c0>)
 800d9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9bc:	f002 f9ae 	bl	800fd1c <vPortExitCritical>
				return pdPASS;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e069      	b.n	800da98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9ca:	f002 f9a7 	bl	800fd1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	e062      	b.n	800da98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9d8:	f107 0310 	add.w	r3, r7, #16
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 f8cf 	bl	800eb80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9e6:	f002 f999 	bl	800fd1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ea:	f000 fe25 	bl	800e638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9ee:	f002 f963 	bl	800fcb8 <vPortEnterCritical>
 800d9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fe:	d103      	bne.n	800da08 <xQueueReceive+0x128>
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da0e:	b25b      	sxtb	r3, r3
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d103      	bne.n	800da1e <xQueueReceive+0x13e>
 800da16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da1e:	f002 f97d 	bl	800fd1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da22:	1d3a      	adds	r2, r7, #4
 800da24:	f107 0310 	add.w	r3, r7, #16
 800da28:	4611      	mov	r1, r2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f001 f8be 	bl	800ebac <xTaskCheckForTimeOut>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d123      	bne.n	800da7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da38:	f000 fae4 	bl	800e004 <prvIsQueueEmpty>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d017      	beq.n	800da72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da44:	3324      	adds	r3, #36	@ 0x24
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 ffe2 	bl	800ea14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da52:	f000 fa85 	bl	800df60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da56:	f000 fdfd 	bl	800e654 <xTaskResumeAll>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d189      	bne.n	800d974 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da60:	4b0f      	ldr	r3, [pc, #60]	@ (800daa0 <xQueueReceive+0x1c0>)
 800da62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	e780      	b.n	800d974 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da74:	f000 fa74 	bl	800df60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da78:	f000 fdec 	bl	800e654 <xTaskResumeAll>
 800da7c:	e77a      	b.n	800d974 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da80:	f000 fa6e 	bl	800df60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da84:	f000 fde6 	bl	800e654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da8a:	f000 fabb 	bl	800e004 <prvIsQueueEmpty>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	f43f af6f 	beq.w	800d974 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3730      	adds	r7, #48	@ 0x30
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	e000ed04 	.word	0xe000ed04

0800daa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08e      	sub	sp, #56	@ 0x38
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800daae:	2300      	movs	r3, #0
 800dab0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800daba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10b      	bne.n	800dad8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	623b      	str	r3, [r7, #32]
}
 800dad2:	bf00      	nop
 800dad4:	bf00      	nop
 800dad6:	e7fd      	b.n	800dad4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00b      	beq.n	800daf8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	61fb      	str	r3, [r7, #28]
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	e7fd      	b.n	800daf4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800daf8:	f001 f9b4 	bl	800ee64 <xTaskGetSchedulerState>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d102      	bne.n	800db08 <xQueueSemaphoreTake+0x64>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <xQueueSemaphoreTake+0x68>
 800db08:	2301      	movs	r3, #1
 800db0a:	e000      	b.n	800db0e <xQueueSemaphoreTake+0x6a>
 800db0c:	2300      	movs	r3, #0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d10b      	bne.n	800db2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	61bb      	str	r3, [r7, #24]
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	e7fd      	b.n	800db26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db2a:	f002 f8c5 	bl	800fcb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	2b00      	cmp	r3, #0
 800db38:	d024      	beq.n	800db84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3c:	1e5a      	subs	r2, r3, #1
 800db3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d104      	bne.n	800db54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db4a:	f001 fb05 	bl	800f158 <pvTaskIncrementMutexHeldCount>
 800db4e:	4602      	mov	r2, r0
 800db50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00f      	beq.n	800db7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	3310      	adds	r3, #16
 800db60:	4618      	mov	r0, r3
 800db62:	f000 ffa9 	bl	800eab8 <xTaskRemoveFromEventList>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d007      	beq.n	800db7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db6c:	4b54      	ldr	r3, [pc, #336]	@ (800dcc0 <xQueueSemaphoreTake+0x21c>)
 800db6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db7c:	f002 f8ce 	bl	800fd1c <vPortExitCritical>
				return pdPASS;
 800db80:	2301      	movs	r3, #1
 800db82:	e098      	b.n	800dcb6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d112      	bne.n	800dbb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	617b      	str	r3, [r7, #20]
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	e7fd      	b.n	800dba4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dba8:	f002 f8b8 	bl	800fd1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e082      	b.n	800dcb6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d106      	bne.n	800dbc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbb6:	f107 030c 	add.w	r3, r7, #12
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 ffe0 	bl	800eb80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbc4:	f002 f8aa 	bl	800fd1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbc8:	f000 fd36 	bl	800e638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbcc:	f002 f874 	bl	800fcb8 <vPortEnterCritical>
 800dbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbd6:	b25b      	sxtb	r3, r3
 800dbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbdc:	d103      	bne.n	800dbe6 <xQueueSemaphoreTake+0x142>
 800dbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbec:	b25b      	sxtb	r3, r3
 800dbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf2:	d103      	bne.n	800dbfc <xQueueSemaphoreTake+0x158>
 800dbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbfc:	f002 f88e 	bl	800fd1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc00:	463a      	mov	r2, r7
 800dc02:	f107 030c 	add.w	r3, r7, #12
 800dc06:	4611      	mov	r1, r2
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 ffcf 	bl	800ebac <xTaskCheckForTimeOut>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d132      	bne.n	800dc7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc16:	f000 f9f5 	bl	800e004 <prvIsQueueEmpty>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d026      	beq.n	800dc6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d109      	bne.n	800dc3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dc28:	f002 f846 	bl	800fcb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f001 f935 	bl	800eea0 <xTaskPriorityInherit>
 800dc36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dc38:	f002 f870 	bl	800fd1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3e:	3324      	adds	r3, #36	@ 0x24
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	4611      	mov	r1, r2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fee5 	bl	800ea14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc4c:	f000 f988 	bl	800df60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc50:	f000 fd00 	bl	800e654 <xTaskResumeAll>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f47f af67 	bne.w	800db2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dc5c:	4b18      	ldr	r3, [pc, #96]	@ (800dcc0 <xQueueSemaphoreTake+0x21c>)
 800dc5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	e75d      	b.n	800db2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc70:	f000 f976 	bl	800df60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc74:	f000 fcee 	bl	800e654 <xTaskResumeAll>
 800dc78:	e757      	b.n	800db2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc7c:	f000 f970 	bl	800df60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc80:	f000 fce8 	bl	800e654 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc86:	f000 f9bd 	bl	800e004 <prvIsQueueEmpty>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f43f af4c 	beq.w	800db2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00d      	beq.n	800dcb4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dc98:	f002 f80e 	bl	800fcb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc9e:	f000 f8b7 	bl	800de10 <prvGetDisinheritPriorityAfterTimeout>
 800dca2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f001 f9d0 	bl	800f050 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dcb0:	f002 f834 	bl	800fd1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3738      	adds	r7, #56	@ 0x38
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed04 	.word	0xe000ed04

0800dcc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08e      	sub	sp, #56	@ 0x38
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10b      	bne.n	800dcf2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	623b      	str	r3, [r7, #32]
}
 800dcec:	bf00      	nop
 800dcee:	bf00      	nop
 800dcf0:	e7fd      	b.n	800dcee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d103      	bne.n	800dd00 <xQueueReceiveFromISR+0x3c>
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <xQueueReceiveFromISR+0x40>
 800dd00:	2301      	movs	r3, #1
 800dd02:	e000      	b.n	800dd06 <xQueueReceiveFromISR+0x42>
 800dd04:	2300      	movs	r3, #0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10b      	bne.n	800dd22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	61fb      	str	r3, [r7, #28]
}
 800dd1c:	bf00      	nop
 800dd1e:	bf00      	nop
 800dd20:	e7fd      	b.n	800dd1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd22:	f002 f8a9 	bl	800fe78 <vPortValidateInterruptPriority>
	__asm volatile
 800dd26:	f3ef 8211 	mrs	r2, BASEPRI
 800dd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2e:	f383 8811 	msr	BASEPRI, r3
 800dd32:	f3bf 8f6f 	isb	sy
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	61ba      	str	r2, [r7, #24]
 800dd3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d02f      	beq.n	800ddae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd58:	68b9      	ldr	r1, [r7, #8]
 800dd5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd5c:	f000 f8da 	bl	800df14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd62:	1e5a      	subs	r2, r3, #1
 800dd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d112      	bne.n	800dd98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d016      	beq.n	800dda8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7c:	3310      	adds	r3, #16
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 fe9a 	bl	800eab8 <xTaskRemoveFromEventList>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00e      	beq.n	800dda8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00b      	beq.n	800dda8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	e007      	b.n	800dda8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	b25a      	sxtb	r2, r3
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddac:	e001      	b.n	800ddb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f383 8811 	msr	BASEPRI, r3
}
 800ddbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3738      	adds	r7, #56	@ 0x38
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10b      	bne.n	800ddf2 <vQueueDelete+0x2a>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	60bb      	str	r3, [r7, #8]
}
 800ddec:	bf00      	nop
 800ddee:	bf00      	nop
 800ddf0:	e7fd      	b.n	800ddee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f95e 	bl	800e0b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d102      	bne.n	800de08 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f002 f948 	bl	8010098 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d006      	beq.n	800de2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	e001      	b.n	800de32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800de32:	68fb      	ldr	r3, [r7, #12]
	}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10d      	bne.n	800de7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d14d      	bne.n	800df02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f001 f880 	bl	800ef70 <xTaskPriorityDisinherit>
 800de70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	609a      	str	r2, [r3, #8]
 800de78:	e043      	b.n	800df02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d119      	bne.n	800deb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6858      	ldr	r0, [r3, #4]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de88:	461a      	mov	r2, r3
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	f00f fca1 	bl	801d7d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de98:	441a      	add	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d32b      	bcc.n	800df02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	e026      	b.n	800df02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68d8      	ldr	r0, [r3, #12]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800debc:	461a      	mov	r2, r3
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	f00f fc87 	bl	801d7d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68da      	ldr	r2, [r3, #12]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800decc:	425b      	negs	r3, r3
 800dece:	441a      	add	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	68da      	ldr	r2, [r3, #12]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d207      	bcs.n	800def0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dee8:	425b      	negs	r3, r3
 800deea:	441a      	add	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b02      	cmp	r3, #2
 800def4:	d105      	bne.n	800df02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	3b01      	subs	r3, #1
 800df00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	1c5a      	adds	r2, r3, #1
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800df0a:	697b      	ldr	r3, [r7, #20]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df22:	2b00      	cmp	r3, #0
 800df24:	d018      	beq.n	800df58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df2e:	441a      	add	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	68da      	ldr	r2, [r3, #12]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d303      	bcc.n	800df48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68d9      	ldr	r1, [r3, #12]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df50:	461a      	mov	r2, r3
 800df52:	6838      	ldr	r0, [r7, #0]
 800df54:	f00f fc3d 	bl	801d7d2 <memcpy>
	}
}
 800df58:	bf00      	nop
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df68:	f001 fea6 	bl	800fcb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df74:	e011      	b.n	800df9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d012      	beq.n	800dfa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3324      	adds	r3, #36	@ 0x24
 800df82:	4618      	mov	r0, r3
 800df84:	f000 fd98 	bl	800eab8 <xTaskRemoveFromEventList>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df8e:	f000 fe71 	bl	800ec74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	3b01      	subs	r3, #1
 800df96:	b2db      	uxtb	r3, r3
 800df98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	dce9      	bgt.n	800df76 <prvUnlockQueue+0x16>
 800dfa2:	e000      	b.n	800dfa6 <prvUnlockQueue+0x46>
					break;
 800dfa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	22ff      	movs	r2, #255	@ 0xff
 800dfaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dfae:	f001 feb5 	bl	800fd1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfb2:	f001 fe81 	bl	800fcb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfbe:	e011      	b.n	800dfe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d012      	beq.n	800dfee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3310      	adds	r3, #16
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 fd73 	bl	800eab8 <xTaskRemoveFromEventList>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dfd8:	f000 fe4c 	bl	800ec74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dfdc:	7bbb      	ldrb	r3, [r7, #14]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	dce9      	bgt.n	800dfc0 <prvUnlockQueue+0x60>
 800dfec:	e000      	b.n	800dff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dfee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	22ff      	movs	r2, #255	@ 0xff
 800dff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dff8:	f001 fe90 	bl	800fd1c <vPortExitCritical>
}
 800dffc:	bf00      	nop
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e00c:	f001 fe54 	bl	800fcb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d102      	bne.n	800e01e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e018:	2301      	movs	r3, #1
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	e001      	b.n	800e022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e022:	f001 fe7b 	bl	800fd1c <vPortExitCritical>

	return xReturn;
 800e026:	68fb      	ldr	r3, [r7, #12]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e038:	f001 fe3e 	bl	800fcb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e044:	429a      	cmp	r2, r3
 800e046:	d102      	bne.n	800e04e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	e001      	b.n	800e052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e052:	f001 fe63 	bl	800fd1c <vPortExitCritical>

	return xReturn;
 800e056:	68fb      	ldr	r3, [r7, #12]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e06a:	2300      	movs	r3, #0
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	e014      	b.n	800e09a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e070:	4a0f      	ldr	r2, [pc, #60]	@ (800e0b0 <vQueueAddToRegistry+0x50>)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10b      	bne.n	800e094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e07c:	490c      	ldr	r1, [pc, #48]	@ (800e0b0 <vQueueAddToRegistry+0x50>)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e086:	4a0a      	ldr	r2, [pc, #40]	@ (800e0b0 <vQueueAddToRegistry+0x50>)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	4413      	add	r3, r2
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e092:	e006      	b.n	800e0a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	3301      	adds	r3, #1
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b07      	cmp	r3, #7
 800e09e:	d9e7      	bls.n	800e070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	24005870 	.word	0x24005870

0800e0b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	e016      	b.n	800e0f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0c2:	4a10      	ldr	r2, [pc, #64]	@ (800e104 <vQueueUnregisterQueue+0x50>)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	4413      	add	r3, r2
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d10b      	bne.n	800e0ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e0d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e104 <vQueueUnregisterQueue+0x50>)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e0dc:	4a09      	ldr	r2, [pc, #36]	@ (800e104 <vQueueUnregisterQueue+0x50>)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	00db      	lsls	r3, r3, #3
 800e0e2:	4413      	add	r3, r2
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	605a      	str	r2, [r3, #4]
				break;
 800e0e8:	e006      	b.n	800e0f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b07      	cmp	r3, #7
 800e0f4:	d9e5      	bls.n	800e0c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e0f6:	bf00      	nop
 800e0f8:	bf00      	nop
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	24005870 	.word	0x24005870

0800e108 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e118:	f001 fdce 	bl	800fcb8 <vPortEnterCritical>
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e122:	b25b      	sxtb	r3, r3
 800e124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e128:	d103      	bne.n	800e132 <vQueueWaitForMessageRestricted+0x2a>
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e138:	b25b      	sxtb	r3, r3
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d103      	bne.n	800e148 <vQueueWaitForMessageRestricted+0x40>
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e148:	f001 fde8 	bl	800fd1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e150:	2b00      	cmp	r3, #0
 800e152:	d106      	bne.n	800e162 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	3324      	adds	r3, #36	@ 0x24
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	68b9      	ldr	r1, [r7, #8]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fc7f 	bl	800ea60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e162:	6978      	ldr	r0, [r7, #20]
 800e164:	f7ff fefc 	bl	800df60 <prvUnlockQueue>
	}
 800e168:	bf00      	nop
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08e      	sub	sp, #56	@ 0x38
 800e174:	af04      	add	r7, sp, #16
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10b      	bne.n	800e19c <xTaskCreateStatic+0x2c>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	623b      	str	r3, [r7, #32]
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	e7fd      	b.n	800e198 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10b      	bne.n	800e1ba <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	61fb      	str	r3, [r7, #28]
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop
 800e1b8:	e7fd      	b.n	800e1b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1ba:	23a8      	movs	r3, #168	@ 0xa8
 800e1bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2ba8      	cmp	r3, #168	@ 0xa8
 800e1c2:	d00b      	beq.n	800e1dc <xTaskCreateStatic+0x6c>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	61bb      	str	r3, [r7, #24]
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	e7fd      	b.n	800e1d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d01e      	beq.n	800e222 <xTaskCreateStatic+0xb2>
 800e1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d01b      	beq.n	800e222 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9303      	str	r3, [sp, #12]
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	f107 0314 	add.w	r3, r7, #20
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	68b9      	ldr	r1, [r7, #8]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f000 f851 	bl	800e2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e21a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e21c:	f000 f8f6 	bl	800e40c <prvAddNewTaskToReadyList>
 800e220:	e001      	b.n	800e226 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e226:	697b      	ldr	r3, [r7, #20]
	}
 800e228:	4618      	mov	r0, r3
 800e22a:	3728      	adds	r7, #40	@ 0x28
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08c      	sub	sp, #48	@ 0x30
 800e234:	af04      	add	r7, sp, #16
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	4613      	mov	r3, r2
 800e23e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e240:	88fb      	ldrh	r3, [r7, #6]
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4618      	mov	r0, r3
 800e246:	f001 fe59 	bl	800fefc <pvPortMalloc>
 800e24a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00e      	beq.n	800e270 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e252:	20a8      	movs	r0, #168	@ 0xa8
 800e254:	f001 fe52 	bl	800fefc <pvPortMalloc>
 800e258:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d003      	beq.n	800e268 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	631a      	str	r2, [r3, #48]	@ 0x30
 800e266:	e005      	b.n	800e274 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e268:	6978      	ldr	r0, [r7, #20]
 800e26a:	f001 ff15 	bl	8010098 <vPortFree>
 800e26e:	e001      	b.n	800e274 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e270:	2300      	movs	r3, #0
 800e272:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d017      	beq.n	800e2aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e282:	88fa      	ldrh	r2, [r7, #6]
 800e284:	2300      	movs	r3, #0
 800e286:	9303      	str	r3, [sp, #12]
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	9302      	str	r3, [sp, #8]
 800e28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 f80f 	bl	800e2bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e29e:	69f8      	ldr	r0, [r7, #28]
 800e2a0:	f000 f8b4 	bl	800e40c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	61bb      	str	r3, [r7, #24]
 800e2a8:	e002      	b.n	800e2b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2b0:	69bb      	ldr	r3, [r7, #24]
	}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3720      	adds	r7, #32
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
	...

0800e2bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	21a5      	movs	r1, #165	@ 0xa5
 800e2d6:	f00f f9ad 	bl	801d634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2de:	6879      	ldr	r1, [r7, #4]
 800e2e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e2e4:	440b      	add	r3, r1
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	f023 0307 	bic.w	r3, r3, #7
 800e2f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	f003 0307 	and.w	r3, r3, #7
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00b      	beq.n	800e316 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	617b      	str	r3, [r7, #20]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01f      	beq.n	800e35c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e012      	b.n	800e348 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	4413      	add	r3, r2
 800e328:	7819      	ldrb	r1, [r3, #0]
 800e32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	3334      	adds	r3, #52	@ 0x34
 800e332:	460a      	mov	r2, r1
 800e334:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	4413      	add	r3, r2
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	3301      	adds	r3, #1
 800e346:	61fb      	str	r3, [r7, #28]
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2b0f      	cmp	r3, #15
 800e34c:	d9e9      	bls.n	800e322 <prvInitialiseNewTask+0x66>
 800e34e:	e000      	b.n	800e352 <prvInitialiseNewTask+0x96>
			{
				break;
 800e350:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e35a:	e003      	b.n	800e364 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e366:	2b37      	cmp	r3, #55	@ 0x37
 800e368:	d901      	bls.n	800e36e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e36a:	2337      	movs	r3, #55	@ 0x37
 800e36c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e372:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e378:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e37c:	2200      	movs	r2, #0
 800e37e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e382:	3304      	adds	r3, #4
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fd7b 	bl	800ce80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38c:	3318      	adds	r3, #24
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe fd76 	bl	800ce80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e398:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3bc:	3354      	adds	r3, #84	@ 0x54
 800e3be:	224c      	movs	r2, #76	@ 0x4c
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f00f f936 	bl	801d634 <memset>
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e400 <prvInitialiseNewTask+0x144>)
 800e3cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e404 <prvInitialiseNewTask+0x148>)
 800e3d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e408 <prvInitialiseNewTask+0x14c>)
 800e3d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3da:	683a      	ldr	r2, [r7, #0]
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	69b8      	ldr	r0, [r7, #24]
 800e3e0:	f001 fb3c 	bl	800fa5c <pxPortInitialiseStack>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3f6:	bf00      	nop
 800e3f8:	3720      	adds	r7, #32
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	2400cdc8 	.word	0x2400cdc8
 800e404:	2400ce30 	.word	0x2400ce30
 800e408:	2400ce98 	.word	0x2400ce98

0800e40c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e414:	f001 fc50 	bl	800fcb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e418:	4b2d      	ldr	r3, [pc, #180]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc4>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	4a2c      	ldr	r2, [pc, #176]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc4>)
 800e420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e422:	4b2c      	ldr	r3, [pc, #176]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d109      	bne.n	800e43e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e42a:	4a2a      	ldr	r2, [pc, #168]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e430:	4b27      	ldr	r3, [pc, #156]	@ (800e4d0 <prvAddNewTaskToReadyList+0xc4>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d110      	bne.n	800e45a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e438:	f000 fc40 	bl	800ecbc <prvInitialiseTaskLists>
 800e43c:	e00d      	b.n	800e45a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e43e:	4b26      	ldr	r3, [pc, #152]	@ (800e4d8 <prvAddNewTaskToReadyList+0xcc>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d109      	bne.n	800e45a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e446:	4b23      	ldr	r3, [pc, #140]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e450:	429a      	cmp	r2, r3
 800e452:	d802      	bhi.n	800e45a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e454:	4a1f      	ldr	r2, [pc, #124]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e45a:	4b20      	ldr	r3, [pc, #128]	@ (800e4dc <prvAddNewTaskToReadyList+0xd0>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	4a1e      	ldr	r2, [pc, #120]	@ (800e4dc <prvAddNewTaskToReadyList+0xd0>)
 800e462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e464:	4b1d      	ldr	r3, [pc, #116]	@ (800e4dc <prvAddNewTaskToReadyList+0xd0>)
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e470:	4b1b      	ldr	r3, [pc, #108]	@ (800e4e0 <prvAddNewTaskToReadyList+0xd4>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d903      	bls.n	800e480 <prvAddNewTaskToReadyList+0x74>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47c:	4a18      	ldr	r2, [pc, #96]	@ (800e4e0 <prvAddNewTaskToReadyList+0xd4>)
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e484:	4613      	mov	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4a15      	ldr	r2, [pc, #84]	@ (800e4e4 <prvAddNewTaskToReadyList+0xd8>)
 800e48e:	441a      	add	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	3304      	adds	r3, #4
 800e494:	4619      	mov	r1, r3
 800e496:	4610      	mov	r0, r2
 800e498:	f7fe fcff 	bl	800ce9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e49c:	f001 fc3e 	bl	800fd1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d8 <prvAddNewTaskToReadyList+0xcc>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00e      	beq.n	800e4c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d4 <prvAddNewTaskToReadyList+0xc8>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d207      	bcs.n	800e4c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e8 <prvAddNewTaskToReadyList+0xdc>)
 800e4b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	24005d84 	.word	0x24005d84
 800e4d4:	240058b0 	.word	0x240058b0
 800e4d8:	24005d90 	.word	0x24005d90
 800e4dc:	24005da0 	.word	0x24005da0
 800e4e0:	24005d8c 	.word	0x24005d8c
 800e4e4:	240058b4 	.word	0x240058b4
 800e4e8:	e000ed04 	.word	0xe000ed04

0800e4ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d018      	beq.n	800e530 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e4fe:	4b14      	ldr	r3, [pc, #80]	@ (800e550 <vTaskDelay+0x64>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00b      	beq.n	800e51e <vTaskDelay+0x32>
	__asm volatile
 800e506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50a:	f383 8811 	msr	BASEPRI, r3
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f3bf 8f4f 	dsb	sy
 800e516:	60bb      	str	r3, [r7, #8]
}
 800e518:	bf00      	nop
 800e51a:	bf00      	nop
 800e51c:	e7fd      	b.n	800e51a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e51e:	f000 f88b 	bl	800e638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e522:	2100      	movs	r1, #0
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fe2b 	bl	800f180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e52a:	f000 f893 	bl	800e654 <xTaskResumeAll>
 800e52e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d107      	bne.n	800e546 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e536:	4b07      	ldr	r3, [pc, #28]	@ (800e554 <vTaskDelay+0x68>)
 800e538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e546:	bf00      	nop
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	24005dac 	.word	0x24005dac
 800e554:	e000ed04 	.word	0xe000ed04

0800e558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08a      	sub	sp, #40	@ 0x28
 800e55c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e566:	463a      	mov	r2, r7
 800e568:	1d39      	adds	r1, r7, #4
 800e56a:	f107 0308 	add.w	r3, r7, #8
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe fc32 	bl	800cdd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	9202      	str	r2, [sp, #8]
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	2300      	movs	r3, #0
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	2300      	movs	r3, #0
 800e584:	460a      	mov	r2, r1
 800e586:	4924      	ldr	r1, [pc, #144]	@ (800e618 <vTaskStartScheduler+0xc0>)
 800e588:	4824      	ldr	r0, [pc, #144]	@ (800e61c <vTaskStartScheduler+0xc4>)
 800e58a:	f7ff fdf1 	bl	800e170 <xTaskCreateStatic>
 800e58e:	4603      	mov	r3, r0
 800e590:	4a23      	ldr	r2, [pc, #140]	@ (800e620 <vTaskStartScheduler+0xc8>)
 800e592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e594:	4b22      	ldr	r3, [pc, #136]	@ (800e620 <vTaskStartScheduler+0xc8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e59c:	2301      	movs	r3, #1
 800e59e:	617b      	str	r3, [r7, #20]
 800e5a0:	e001      	b.n	800e5a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d102      	bne.n	800e5b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5ac:	f000 fe3c 	bl	800f228 <xTimerCreateTimerTask>
 800e5b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d11b      	bne.n	800e5f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	613b      	str	r3, [r7, #16]
}
 800e5ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5cc:	4b15      	ldr	r3, [pc, #84]	@ (800e624 <vTaskStartScheduler+0xcc>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	3354      	adds	r3, #84	@ 0x54
 800e5d2:	4a15      	ldr	r2, [pc, #84]	@ (800e628 <vTaskStartScheduler+0xd0>)
 800e5d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e5d6:	4b15      	ldr	r3, [pc, #84]	@ (800e62c <vTaskStartScheduler+0xd4>)
 800e5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e5de:	4b14      	ldr	r3, [pc, #80]	@ (800e630 <vTaskStartScheduler+0xd8>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e5e4:	4b13      	ldr	r3, [pc, #76]	@ (800e634 <vTaskStartScheduler+0xdc>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e5ea:	f001 fac1 	bl	800fb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e5ee:	e00f      	b.n	800e610 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f6:	d10b      	bne.n	800e610 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	60fb      	str	r3, [r7, #12]
}
 800e60a:	bf00      	nop
 800e60c:	bf00      	nop
 800e60e:	e7fd      	b.n	800e60c <vTaskStartScheduler+0xb4>
}
 800e610:	bf00      	nop
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0801f590 	.word	0x0801f590
 800e61c:	0800ec8d 	.word	0x0800ec8d
 800e620:	24005da8 	.word	0x24005da8
 800e624:	240058b0 	.word	0x240058b0
 800e628:	24000044 	.word	0x24000044
 800e62c:	24005da4 	.word	0x24005da4
 800e630:	24005d90 	.word	0x24005d90
 800e634:	24005d88 	.word	0x24005d88

0800e638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e638:	b480      	push	{r7}
 800e63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e63c:	4b04      	ldr	r3, [pc, #16]	@ (800e650 <vTaskSuspendAll+0x18>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3301      	adds	r3, #1
 800e642:	4a03      	ldr	r2, [pc, #12]	@ (800e650 <vTaskSuspendAll+0x18>)
 800e644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e646:	bf00      	nop
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	24005dac 	.word	0x24005dac

0800e654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e65e:	2300      	movs	r3, #0
 800e660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e662:	4b42      	ldr	r3, [pc, #264]	@ (800e76c <xTaskResumeAll+0x118>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10b      	bne.n	800e682 <xTaskResumeAll+0x2e>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	603b      	str	r3, [r7, #0]
}
 800e67c:	bf00      	nop
 800e67e:	bf00      	nop
 800e680:	e7fd      	b.n	800e67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e682:	f001 fb19 	bl	800fcb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e686:	4b39      	ldr	r3, [pc, #228]	@ (800e76c <xTaskResumeAll+0x118>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3b01      	subs	r3, #1
 800e68c:	4a37      	ldr	r2, [pc, #220]	@ (800e76c <xTaskResumeAll+0x118>)
 800e68e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e690:	4b36      	ldr	r3, [pc, #216]	@ (800e76c <xTaskResumeAll+0x118>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d162      	bne.n	800e75e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e698:	4b35      	ldr	r3, [pc, #212]	@ (800e770 <xTaskResumeAll+0x11c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d05e      	beq.n	800e75e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6a0:	e02f      	b.n	800e702 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a2:	4b34      	ldr	r3, [pc, #208]	@ (800e774 <xTaskResumeAll+0x120>)
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	3318      	adds	r3, #24
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe fc50 	bl	800cf54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3304      	adds	r3, #4
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fc4b 	bl	800cf54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6c2:	4b2d      	ldr	r3, [pc, #180]	@ (800e778 <xTaskResumeAll+0x124>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d903      	bls.n	800e6d2 <xTaskResumeAll+0x7e>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e778 <xTaskResumeAll+0x124>)
 800e6d0:	6013      	str	r3, [r2, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4413      	add	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4a27      	ldr	r2, [pc, #156]	@ (800e77c <xTaskResumeAll+0x128>)
 800e6e0:	441a      	add	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	f7fe fbd6 	bl	800ce9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f2:	4b23      	ldr	r3, [pc, #140]	@ (800e780 <xTaskResumeAll+0x12c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d302      	bcc.n	800e702 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e6fc:	4b21      	ldr	r3, [pc, #132]	@ (800e784 <xTaskResumeAll+0x130>)
 800e6fe:	2201      	movs	r2, #1
 800e700:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e702:	4b1c      	ldr	r3, [pc, #112]	@ (800e774 <xTaskResumeAll+0x120>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1cb      	bne.n	800e6a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e710:	f000 fb78 	bl	800ee04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e714:	4b1c      	ldr	r3, [pc, #112]	@ (800e788 <xTaskResumeAll+0x134>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d010      	beq.n	800e742 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e720:	f000 f858 	bl	800e7d4 <xTaskIncrementTick>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d002      	beq.n	800e730 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e72a:	4b16      	ldr	r3, [pc, #88]	@ (800e784 <xTaskResumeAll+0x130>)
 800e72c:	2201      	movs	r2, #1
 800e72e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3b01      	subs	r3, #1
 800e734:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1f1      	bne.n	800e720 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e73c:	4b12      	ldr	r3, [pc, #72]	@ (800e788 <xTaskResumeAll+0x134>)
 800e73e:	2200      	movs	r2, #0
 800e740:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e742:	4b10      	ldr	r3, [pc, #64]	@ (800e784 <xTaskResumeAll+0x130>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d009      	beq.n	800e75e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e74a:	2301      	movs	r3, #1
 800e74c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e74e:	4b0f      	ldr	r3, [pc, #60]	@ (800e78c <xTaskResumeAll+0x138>)
 800e750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e754:	601a      	str	r2, [r3, #0]
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e75e:	f001 fadd 	bl	800fd1c <vPortExitCritical>

	return xAlreadyYielded;
 800e762:	68bb      	ldr	r3, [r7, #8]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	24005dac 	.word	0x24005dac
 800e770:	24005d84 	.word	0x24005d84
 800e774:	24005d44 	.word	0x24005d44
 800e778:	24005d8c 	.word	0x24005d8c
 800e77c:	240058b4 	.word	0x240058b4
 800e780:	240058b0 	.word	0x240058b0
 800e784:	24005d98 	.word	0x24005d98
 800e788:	24005d94 	.word	0x24005d94
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e796:	4b05      	ldr	r3, [pc, #20]	@ (800e7ac <xTaskGetTickCount+0x1c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e79c:	687b      	ldr	r3, [r7, #4]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	24005d88 	.word	0x24005d88

0800e7b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7b6:	f001 fb5f 	bl	800fe78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e7be:	4b04      	ldr	r3, [pc, #16]	@ (800e7d0 <xTaskGetTickCountFromISR+0x20>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7c4:	683b      	ldr	r3, [r7, #0]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	24005d88 	.word	0x24005d88

0800e7d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7de:	4b4f      	ldr	r3, [pc, #316]	@ (800e91c <xTaskIncrementTick+0x148>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f040 8090 	bne.w	800e908 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7e8:	4b4d      	ldr	r3, [pc, #308]	@ (800e920 <xTaskIncrementTick+0x14c>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7f0:	4a4b      	ldr	r2, [pc, #300]	@ (800e920 <xTaskIncrementTick+0x14c>)
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d121      	bne.n	800e840 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7fc:	4b49      	ldr	r3, [pc, #292]	@ (800e924 <xTaskIncrementTick+0x150>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00b      	beq.n	800e81e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	603b      	str	r3, [r7, #0]
}
 800e818:	bf00      	nop
 800e81a:	bf00      	nop
 800e81c:	e7fd      	b.n	800e81a <xTaskIncrementTick+0x46>
 800e81e:	4b41      	ldr	r3, [pc, #260]	@ (800e924 <xTaskIncrementTick+0x150>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	4b40      	ldr	r3, [pc, #256]	@ (800e928 <xTaskIncrementTick+0x154>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a3e      	ldr	r2, [pc, #248]	@ (800e924 <xTaskIncrementTick+0x150>)
 800e82a:	6013      	str	r3, [r2, #0]
 800e82c:	4a3e      	ldr	r2, [pc, #248]	@ (800e928 <xTaskIncrementTick+0x154>)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	4b3e      	ldr	r3, [pc, #248]	@ (800e92c <xTaskIncrementTick+0x158>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	3301      	adds	r3, #1
 800e838:	4a3c      	ldr	r2, [pc, #240]	@ (800e92c <xTaskIncrementTick+0x158>)
 800e83a:	6013      	str	r3, [r2, #0]
 800e83c:	f000 fae2 	bl	800ee04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e840:	4b3b      	ldr	r3, [pc, #236]	@ (800e930 <xTaskIncrementTick+0x15c>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	429a      	cmp	r2, r3
 800e848:	d349      	bcc.n	800e8de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e84a:	4b36      	ldr	r3, [pc, #216]	@ (800e924 <xTaskIncrementTick+0x150>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d104      	bne.n	800e85e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e854:	4b36      	ldr	r3, [pc, #216]	@ (800e930 <xTaskIncrementTick+0x15c>)
 800e856:	f04f 32ff 	mov.w	r2, #4294967295
 800e85a:	601a      	str	r2, [r3, #0]
					break;
 800e85c:	e03f      	b.n	800e8de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e85e:	4b31      	ldr	r3, [pc, #196]	@ (800e924 <xTaskIncrementTick+0x150>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e86e:	693a      	ldr	r2, [r7, #16]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	429a      	cmp	r2, r3
 800e874:	d203      	bcs.n	800e87e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e876:	4a2e      	ldr	r2, [pc, #184]	@ (800e930 <xTaskIncrementTick+0x15c>)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e87c:	e02f      	b.n	800e8de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	3304      	adds	r3, #4
 800e882:	4618      	mov	r0, r3
 800e884:	f7fe fb66 	bl	800cf54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d004      	beq.n	800e89a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	3318      	adds	r3, #24
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fb5d 	bl	800cf54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e89e:	4b25      	ldr	r3, [pc, #148]	@ (800e934 <xTaskIncrementTick+0x160>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d903      	bls.n	800e8ae <xTaskIncrementTick+0xda>
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8aa:	4a22      	ldr	r2, [pc, #136]	@ (800e934 <xTaskIncrementTick+0x160>)
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4a1f      	ldr	r2, [pc, #124]	@ (800e938 <xTaskIncrementTick+0x164>)
 800e8bc:	441a      	add	r2, r3
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	4610      	mov	r0, r2
 800e8c6:	f7fe fae8 	bl	800ce9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e93c <xTaskIncrementTick+0x168>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d3b8      	bcc.n	800e84a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8dc:	e7b5      	b.n	800e84a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8de:	4b17      	ldr	r3, [pc, #92]	@ (800e93c <xTaskIncrementTick+0x168>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e4:	4914      	ldr	r1, [pc, #80]	@ (800e938 <xTaskIncrementTick+0x164>)
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	440b      	add	r3, r1
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d901      	bls.n	800e8fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8fa:	4b11      	ldr	r3, [pc, #68]	@ (800e940 <xTaskIncrementTick+0x16c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d007      	beq.n	800e912 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e902:	2301      	movs	r3, #1
 800e904:	617b      	str	r3, [r7, #20]
 800e906:	e004      	b.n	800e912 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e908:	4b0e      	ldr	r3, [pc, #56]	@ (800e944 <xTaskIncrementTick+0x170>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	3301      	adds	r3, #1
 800e90e:	4a0d      	ldr	r2, [pc, #52]	@ (800e944 <xTaskIncrementTick+0x170>)
 800e910:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e912:	697b      	ldr	r3, [r7, #20]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	24005dac 	.word	0x24005dac
 800e920:	24005d88 	.word	0x24005d88
 800e924:	24005d3c 	.word	0x24005d3c
 800e928:	24005d40 	.word	0x24005d40
 800e92c:	24005d9c 	.word	0x24005d9c
 800e930:	24005da4 	.word	0x24005da4
 800e934:	24005d8c 	.word	0x24005d8c
 800e938:	240058b4 	.word	0x240058b4
 800e93c:	240058b0 	.word	0x240058b0
 800e940:	24005d98 	.word	0x24005d98
 800e944:	24005d94 	.word	0x24005d94

0800e948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e94e:	4b2b      	ldr	r3, [pc, #172]	@ (800e9fc <vTaskSwitchContext+0xb4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d003      	beq.n	800e95e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e956:	4b2a      	ldr	r3, [pc, #168]	@ (800ea00 <vTaskSwitchContext+0xb8>)
 800e958:	2201      	movs	r2, #1
 800e95a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e95c:	e047      	b.n	800e9ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e95e:	4b28      	ldr	r3, [pc, #160]	@ (800ea00 <vTaskSwitchContext+0xb8>)
 800e960:	2200      	movs	r2, #0
 800e962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e964:	4b27      	ldr	r3, [pc, #156]	@ (800ea04 <vTaskSwitchContext+0xbc>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	60fb      	str	r3, [r7, #12]
 800e96a:	e011      	b.n	800e990 <vTaskSwitchContext+0x48>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10b      	bne.n	800e98a <vTaskSwitchContext+0x42>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	607b      	str	r3, [r7, #4]
}
 800e984:	bf00      	nop
 800e986:	bf00      	nop
 800e988:	e7fd      	b.n	800e986 <vTaskSwitchContext+0x3e>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	60fb      	str	r3, [r7, #12]
 800e990:	491d      	ldr	r1, [pc, #116]	@ (800ea08 <vTaskSwitchContext+0xc0>)
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	4613      	mov	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	440b      	add	r3, r1
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d0e3      	beq.n	800e96c <vTaskSwitchContext+0x24>
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4413      	add	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4a16      	ldr	r2, [pc, #88]	@ (800ea08 <vTaskSwitchContext+0xc0>)
 800e9b0:	4413      	add	r3, r2
 800e9b2:	60bb      	str	r3, [r7, #8]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	605a      	str	r2, [r3, #4]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	685a      	ldr	r2, [r3, #4]
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	3308      	adds	r3, #8
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d104      	bne.n	800e9d4 <vTaskSwitchContext+0x8c>
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	605a      	str	r2, [r3, #4]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	4a0c      	ldr	r2, [pc, #48]	@ (800ea0c <vTaskSwitchContext+0xc4>)
 800e9dc:	6013      	str	r3, [r2, #0]
 800e9de:	4a09      	ldr	r2, [pc, #36]	@ (800ea04 <vTaskSwitchContext+0xbc>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9e4:	4b09      	ldr	r3, [pc, #36]	@ (800ea0c <vTaskSwitchContext+0xc4>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3354      	adds	r3, #84	@ 0x54
 800e9ea:	4a09      	ldr	r2, [pc, #36]	@ (800ea10 <vTaskSwitchContext+0xc8>)
 800e9ec:	6013      	str	r3, [r2, #0]
}
 800e9ee:	bf00      	nop
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	24005dac 	.word	0x24005dac
 800ea00:	24005d98 	.word	0x24005d98
 800ea04:	24005d8c 	.word	0x24005d8c
 800ea08:	240058b4 	.word	0x240058b4
 800ea0c:	240058b0 	.word	0x240058b0
 800ea10:	24000044 	.word	0x24000044

0800ea14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10b      	bne.n	800ea3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	60fb      	str	r3, [r7, #12]
}
 800ea36:	bf00      	nop
 800ea38:	bf00      	nop
 800ea3a:	e7fd      	b.n	800ea38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea3c:	4b07      	ldr	r3, [pc, #28]	@ (800ea5c <vTaskPlaceOnEventList+0x48>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3318      	adds	r3, #24
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7fe fa4c 	bl	800cee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	6838      	ldr	r0, [r7, #0]
 800ea4e:	f000 fb97 	bl	800f180 <prvAddCurrentTaskToDelayedList>
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	240058b0 	.word	0x240058b0

0800ea60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10b      	bne.n	800ea8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ea72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	617b      	str	r3, [r7, #20]
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
 800ea88:	e7fd      	b.n	800ea86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea8a:	4b0a      	ldr	r3, [pc, #40]	@ (800eab4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	3318      	adds	r3, #24
 800ea90:	4619      	mov	r1, r3
 800ea92:	68f8      	ldr	r0, [r7, #12]
 800ea94:	f7fe fa01 	bl	800ce9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ea9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	68b8      	ldr	r0, [r7, #8]
 800eaa8:	f000 fb6a 	bl	800f180 <prvAddCurrentTaskToDelayedList>
	}
 800eaac:	bf00      	nop
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	240058b0 	.word	0x240058b0

0800eab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10b      	bne.n	800eae6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	60fb      	str	r3, [r7, #12]
}
 800eae0:	bf00      	nop
 800eae2:	bf00      	nop
 800eae4:	e7fd      	b.n	800eae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	3318      	adds	r3, #24
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fe fa32 	bl	800cf54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaf0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb68 <xTaskRemoveFromEventList+0xb0>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d11d      	bne.n	800eb34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fe fa29 	bl	800cf54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb06:	4b19      	ldr	r3, [pc, #100]	@ (800eb6c <xTaskRemoveFromEventList+0xb4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d903      	bls.n	800eb16 <xTaskRemoveFromEventList+0x5e>
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb12:	4a16      	ldr	r2, [pc, #88]	@ (800eb6c <xTaskRemoveFromEventList+0xb4>)
 800eb14:	6013      	str	r3, [r2, #0]
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	4a13      	ldr	r2, [pc, #76]	@ (800eb70 <xTaskRemoveFromEventList+0xb8>)
 800eb24:	441a      	add	r2, r3
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	3304      	adds	r3, #4
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	f7fe f9b4 	bl	800ce9a <vListInsertEnd>
 800eb32:	e005      	b.n	800eb40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	3318      	adds	r3, #24
 800eb38:	4619      	mov	r1, r3
 800eb3a:	480e      	ldr	r0, [pc, #56]	@ (800eb74 <xTaskRemoveFromEventList+0xbc>)
 800eb3c:	f7fe f9ad 	bl	800ce9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb44:	4b0c      	ldr	r3, [pc, #48]	@ (800eb78 <xTaskRemoveFromEventList+0xc0>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d905      	bls.n	800eb5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb52:	4b0a      	ldr	r3, [pc, #40]	@ (800eb7c <xTaskRemoveFromEventList+0xc4>)
 800eb54:	2201      	movs	r2, #1
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	e001      	b.n	800eb5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb5e:	697b      	ldr	r3, [r7, #20]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	24005dac 	.word	0x24005dac
 800eb6c:	24005d8c 	.word	0x24005d8c
 800eb70:	240058b4 	.word	0x240058b4
 800eb74:	24005d44 	.word	0x24005d44
 800eb78:	240058b0 	.word	0x240058b0
 800eb7c:	24005d98 	.word	0x24005d98

0800eb80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb88:	4b06      	ldr	r3, [pc, #24]	@ (800eba4 <vTaskInternalSetTimeOutState+0x24>)
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb90:	4b05      	ldr	r3, [pc, #20]	@ (800eba8 <vTaskInternalSetTimeOutState+0x28>)
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	605a      	str	r2, [r3, #4]
}
 800eb98:	bf00      	nop
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr
 800eba4:	24005d9c 	.word	0x24005d9c
 800eba8:	24005d88 	.word	0x24005d88

0800ebac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10b      	bne.n	800ebd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	613b      	str	r3, [r7, #16]
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	e7fd      	b.n	800ebd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10b      	bne.n	800ebf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	60fb      	str	r3, [r7, #12]
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	e7fd      	b.n	800ebee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ebf2:	f001 f861 	bl	800fcb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ebf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ec6c <xTaskCheckForTimeOut+0xc0>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	69ba      	ldr	r2, [r7, #24]
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0e:	d102      	bne.n	800ec16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec10:	2300      	movs	r3, #0
 800ec12:	61fb      	str	r3, [r7, #28]
 800ec14:	e023      	b.n	800ec5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4b15      	ldr	r3, [pc, #84]	@ (800ec70 <xTaskCheckForTimeOut+0xc4>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d007      	beq.n	800ec32 <xTaskCheckForTimeOut+0x86>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	69ba      	ldr	r2, [r7, #24]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d302      	bcc.n	800ec32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	e015      	b.n	800ec5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	697a      	ldr	r2, [r7, #20]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d20b      	bcs.n	800ec54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	1ad2      	subs	r2, r2, r3
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff ff99 	bl	800eb80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61fb      	str	r3, [r7, #28]
 800ec52:	e004      	b.n	800ec5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2200      	movs	r2, #0
 800ec58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec5e:	f001 f85d 	bl	800fd1c <vPortExitCritical>

	return xReturn;
 800ec62:	69fb      	ldr	r3, [r7, #28]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	24005d88 	.word	0x24005d88
 800ec70:	24005d9c 	.word	0x24005d9c

0800ec74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec74:	b480      	push	{r7}
 800ec76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec78:	4b03      	ldr	r3, [pc, #12]	@ (800ec88 <vTaskMissedYield+0x14>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]
}
 800ec7e:	bf00      	nop
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	24005d98 	.word	0x24005d98

0800ec8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec94:	f000 f852 	bl	800ed3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec98:	4b06      	ldr	r3, [pc, #24]	@ (800ecb4 <prvIdleTask+0x28>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d9f9      	bls.n	800ec94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eca0:	4b05      	ldr	r3, [pc, #20]	@ (800ecb8 <prvIdleTask+0x2c>)
 800eca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecb0:	e7f0      	b.n	800ec94 <prvIdleTask+0x8>
 800ecb2:	bf00      	nop
 800ecb4:	240058b4 	.word	0x240058b4
 800ecb8:	e000ed04 	.word	0xe000ed04

0800ecbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	e00c      	b.n	800ece2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	4613      	mov	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4a12      	ldr	r2, [pc, #72]	@ (800ed1c <prvInitialiseTaskLists+0x60>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fe f8b2 	bl	800ce40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3301      	adds	r3, #1
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b37      	cmp	r3, #55	@ 0x37
 800ece6:	d9ef      	bls.n	800ecc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ece8:	480d      	ldr	r0, [pc, #52]	@ (800ed20 <prvInitialiseTaskLists+0x64>)
 800ecea:	f7fe f8a9 	bl	800ce40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ecee:	480d      	ldr	r0, [pc, #52]	@ (800ed24 <prvInitialiseTaskLists+0x68>)
 800ecf0:	f7fe f8a6 	bl	800ce40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ecf4:	480c      	ldr	r0, [pc, #48]	@ (800ed28 <prvInitialiseTaskLists+0x6c>)
 800ecf6:	f7fe f8a3 	bl	800ce40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ecfa:	480c      	ldr	r0, [pc, #48]	@ (800ed2c <prvInitialiseTaskLists+0x70>)
 800ecfc:	f7fe f8a0 	bl	800ce40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed00:	480b      	ldr	r0, [pc, #44]	@ (800ed30 <prvInitialiseTaskLists+0x74>)
 800ed02:	f7fe f89d 	bl	800ce40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed06:	4b0b      	ldr	r3, [pc, #44]	@ (800ed34 <prvInitialiseTaskLists+0x78>)
 800ed08:	4a05      	ldr	r2, [pc, #20]	@ (800ed20 <prvInitialiseTaskLists+0x64>)
 800ed0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed38 <prvInitialiseTaskLists+0x7c>)
 800ed0e:	4a05      	ldr	r2, [pc, #20]	@ (800ed24 <prvInitialiseTaskLists+0x68>)
 800ed10:	601a      	str	r2, [r3, #0]
}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	240058b4 	.word	0x240058b4
 800ed20:	24005d14 	.word	0x24005d14
 800ed24:	24005d28 	.word	0x24005d28
 800ed28:	24005d44 	.word	0x24005d44
 800ed2c:	24005d58 	.word	0x24005d58
 800ed30:	24005d70 	.word	0x24005d70
 800ed34:	24005d3c 	.word	0x24005d3c
 800ed38:	24005d40 	.word	0x24005d40

0800ed3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed42:	e019      	b.n	800ed78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed44:	f000 ffb8 	bl	800fcb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed48:	4b10      	ldr	r3, [pc, #64]	@ (800ed8c <prvCheckTasksWaitingTermination+0x50>)
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fe f8fd 	bl	800cf54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed90 <prvCheckTasksWaitingTermination+0x54>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	4a0b      	ldr	r2, [pc, #44]	@ (800ed90 <prvCheckTasksWaitingTermination+0x54>)
 800ed62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed64:	4b0b      	ldr	r3, [pc, #44]	@ (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4a0a      	ldr	r2, [pc, #40]	@ (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed6e:	f000 ffd5 	bl	800fd1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f810 	bl	800ed98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed78:	4b06      	ldr	r3, [pc, #24]	@ (800ed94 <prvCheckTasksWaitingTermination+0x58>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e1      	bne.n	800ed44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed80:	bf00      	nop
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	24005d58 	.word	0x24005d58
 800ed90:	24005d84 	.word	0x24005d84
 800ed94:	24005d6c 	.word	0x24005d6c

0800ed98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3354      	adds	r3, #84	@ 0x54
 800eda4:	4618      	mov	r0, r3
 800eda6:	f00e fc61 	bl	801d66c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d108      	bne.n	800edc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edb8:	4618      	mov	r0, r3
 800edba:	f001 f96d 	bl	8010098 <vPortFree>
				vPortFree( pxTCB );
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f001 f96a 	bl	8010098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edc4:	e019      	b.n	800edfa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d103      	bne.n	800edd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 f961 	bl	8010098 <vPortFree>
	}
 800edd6:	e010      	b.n	800edfa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d00b      	beq.n	800edfa <prvDeleteTCB+0x62>
	__asm volatile
 800ede2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	60fb      	str	r3, [r7, #12]
}
 800edf4:	bf00      	nop
 800edf6:	bf00      	nop
 800edf8:	e7fd      	b.n	800edf6 <prvDeleteTCB+0x5e>
	}
 800edfa:	bf00      	nop
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ee3c <prvResetNextTaskUnblockTime+0x38>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee14:	4b0a      	ldr	r3, [pc, #40]	@ (800ee40 <prvResetNextTaskUnblockTime+0x3c>)
 800ee16:	f04f 32ff 	mov.w	r2, #4294967295
 800ee1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee1c:	e008      	b.n	800ee30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee1e:	4b07      	ldr	r3, [pc, #28]	@ (800ee3c <prvResetNextTaskUnblockTime+0x38>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	4a04      	ldr	r2, [pc, #16]	@ (800ee40 <prvResetNextTaskUnblockTime+0x3c>)
 800ee2e:	6013      	str	r3, [r2, #0]
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	24005d3c 	.word	0x24005d3c
 800ee40:	24005da4 	.word	0x24005da4

0800ee44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ee4a:	4b05      	ldr	r3, [pc, #20]	@ (800ee60 <xTaskGetCurrentTaskHandle+0x1c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ee50:	687b      	ldr	r3, [r7, #4]
	}
 800ee52:	4618      	mov	r0, r3
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	240058b0 	.word	0x240058b0

0800ee64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee98 <xTaskGetSchedulerState+0x34>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee72:	2301      	movs	r3, #1
 800ee74:	607b      	str	r3, [r7, #4]
 800ee76:	e008      	b.n	800ee8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee78:	4b08      	ldr	r3, [pc, #32]	@ (800ee9c <xTaskGetSchedulerState+0x38>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee80:	2302      	movs	r3, #2
 800ee82:	607b      	str	r3, [r7, #4]
 800ee84:	e001      	b.n	800ee8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee86:	2300      	movs	r3, #0
 800ee88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee8a:	687b      	ldr	r3, [r7, #4]
	}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	24005d90 	.word	0x24005d90
 800ee9c:	24005dac 	.word	0x24005dac

0800eea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eeac:	2300      	movs	r3, #0
 800eeae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d051      	beq.n	800ef5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeba:	4b2a      	ldr	r3, [pc, #168]	@ (800ef64 <xTaskPriorityInherit+0xc4>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d241      	bcs.n	800ef48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	db06      	blt.n	800eeda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eecc:	4b25      	ldr	r3, [pc, #148]	@ (800ef64 <xTaskPriorityInherit+0xc4>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	6959      	ldr	r1, [r3, #20]
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eee2:	4613      	mov	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4413      	add	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4a1f      	ldr	r2, [pc, #124]	@ (800ef68 <xTaskPriorityInherit+0xc8>)
 800eeec:	4413      	add	r3, r2
 800eeee:	4299      	cmp	r1, r3
 800eef0:	d122      	bne.n	800ef38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	3304      	adds	r3, #4
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fe f82c 	bl	800cf54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eefc:	4b19      	ldr	r3, [pc, #100]	@ (800ef64 <xTaskPriorityInherit+0xc4>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	4b18      	ldr	r3, [pc, #96]	@ (800ef6c <xTaskPriorityInherit+0xcc>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d903      	bls.n	800ef1a <xTaskPriorityInherit+0x7a>
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef16:	4a15      	ldr	r2, [pc, #84]	@ (800ef6c <xTaskPriorityInherit+0xcc>)
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef1e:	4613      	mov	r3, r2
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	4413      	add	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4a10      	ldr	r2, [pc, #64]	@ (800ef68 <xTaskPriorityInherit+0xc8>)
 800ef28:	441a      	add	r2, r3
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7fd ffb2 	bl	800ce9a <vListInsertEnd>
 800ef36:	e004      	b.n	800ef42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef38:	4b0a      	ldr	r3, [pc, #40]	@ (800ef64 <xTaskPriorityInherit+0xc4>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef42:	2301      	movs	r3, #1
 800ef44:	60fb      	str	r3, [r7, #12]
 800ef46:	e008      	b.n	800ef5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef4c:	4b05      	ldr	r3, [pc, #20]	@ (800ef64 <xTaskPriorityInherit+0xc4>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d201      	bcs.n	800ef5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef56:	2301      	movs	r3, #1
 800ef58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
	}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	240058b0 	.word	0x240058b0
 800ef68:	240058b4 	.word	0x240058b4
 800ef6c:	24005d8c 	.word	0x24005d8c

0800ef70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d058      	beq.n	800f038 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef86:	4b2f      	ldr	r3, [pc, #188]	@ (800f044 <xTaskPriorityDisinherit+0xd4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d00b      	beq.n	800efa8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	60fb      	str	r3, [r7, #12]
}
 800efa2:	bf00      	nop
 800efa4:	bf00      	nop
 800efa6:	e7fd      	b.n	800efa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10b      	bne.n	800efc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	60bb      	str	r3, [r7, #8]
}
 800efc2:	bf00      	nop
 800efc4:	bf00      	nop
 800efc6:	e7fd      	b.n	800efc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efcc:	1e5a      	subs	r2, r3, #1
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efda:	429a      	cmp	r2, r3
 800efdc:	d02c      	beq.n	800f038 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d128      	bne.n	800f038 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	3304      	adds	r3, #4
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd ffb2 	bl	800cf54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f008:	4b0f      	ldr	r3, [pc, #60]	@ (800f048 <xTaskPriorityDisinherit+0xd8>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d903      	bls.n	800f018 <xTaskPriorityDisinherit+0xa8>
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f014:	4a0c      	ldr	r2, [pc, #48]	@ (800f048 <xTaskPriorityDisinherit+0xd8>)
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f01c:	4613      	mov	r3, r2
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	4413      	add	r3, r2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	4a09      	ldr	r2, [pc, #36]	@ (800f04c <xTaskPriorityDisinherit+0xdc>)
 800f026:	441a      	add	r2, r3
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	3304      	adds	r3, #4
 800f02c:	4619      	mov	r1, r3
 800f02e:	4610      	mov	r0, r2
 800f030:	f7fd ff33 	bl	800ce9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f034:	2301      	movs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f038:	697b      	ldr	r3, [r7, #20]
	}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	240058b0 	.word	0x240058b0
 800f048:	24005d8c 	.word	0x24005d8c
 800f04c:	240058b4 	.word	0x240058b4

0800f050 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d06c      	beq.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10b      	bne.n	800f088 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60fb      	str	r3, [r7, #12]
}
 800f082:	bf00      	nop
 800f084:	bf00      	nop
 800f086:	e7fd      	b.n	800f084 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d902      	bls.n	800f098 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	61fb      	str	r3, [r7, #28]
 800f096:	e002      	b.n	800f09e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f09c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0a2:	69fa      	ldr	r2, [r7, #28]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d04c      	beq.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d147      	bne.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f0b2:	4b26      	ldr	r3, [pc, #152]	@ (800f14c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	69ba      	ldr	r2, [r7, #24]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d10b      	bne.n	800f0d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	60bb      	str	r3, [r7, #8]
}
 800f0ce:	bf00      	nop
 800f0d0:	bf00      	nop
 800f0d2:	e7fd      	b.n	800f0d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	69fa      	ldr	r2, [r7, #28]
 800f0de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	699b      	ldr	r3, [r3, #24]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	db04      	blt.n	800f0f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	6959      	ldr	r1, [r3, #20]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	4a13      	ldr	r2, [pc, #76]	@ (800f150 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f102:	4413      	add	r3, r2
 800f104:	4299      	cmp	r1, r3
 800f106:	d11c      	bne.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	3304      	adds	r3, #4
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fd ff21 	bl	800cf54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f116:	4b0f      	ldr	r3, [pc, #60]	@ (800f154 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d903      	bls.n	800f126 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f122:	4a0c      	ldr	r2, [pc, #48]	@ (800f154 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f12a:	4613      	mov	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	4a07      	ldr	r2, [pc, #28]	@ (800f150 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f134:	441a      	add	r2, r3
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	3304      	adds	r3, #4
 800f13a:	4619      	mov	r1, r3
 800f13c:	4610      	mov	r0, r2
 800f13e:	f7fd feac 	bl	800ce9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f142:	bf00      	nop
 800f144:	3720      	adds	r7, #32
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	240058b0 	.word	0x240058b0
 800f150:	240058b4 	.word	0x240058b4
 800f154:	24005d8c 	.word	0x24005d8c

0800f158 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f158:	b480      	push	{r7}
 800f15a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f15c:	4b07      	ldr	r3, [pc, #28]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d004      	beq.n	800f16e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f164:	4b05      	ldr	r3, [pc, #20]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f16a:	3201      	adds	r2, #1
 800f16c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f16e:	4b03      	ldr	r3, [pc, #12]	@ (800f17c <pvTaskIncrementMutexHeldCount+0x24>)
 800f170:	681b      	ldr	r3, [r3, #0]
	}
 800f172:	4618      	mov	r0, r3
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	240058b0 	.word	0x240058b0

0800f180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f18a:	4b21      	ldr	r3, [pc, #132]	@ (800f210 <prvAddCurrentTaskToDelayedList+0x90>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f190:	4b20      	ldr	r3, [pc, #128]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x94>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	3304      	adds	r3, #4
 800f196:	4618      	mov	r0, r3
 800f198:	f7fd fedc 	bl	800cf54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a2:	d10a      	bne.n	800f1ba <prvAddCurrentTaskToDelayedList+0x3a>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d007      	beq.n	800f1ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1aa:	4b1a      	ldr	r3, [pc, #104]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4819      	ldr	r0, [pc, #100]	@ (800f218 <prvAddCurrentTaskToDelayedList+0x98>)
 800f1b4:	f7fd fe71 	bl	800ce9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1b8:	e026      	b.n	800f208 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4413      	add	r3, r2
 800f1c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1c2:	4b14      	ldr	r3, [pc, #80]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68ba      	ldr	r2, [r7, #8]
 800f1c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d209      	bcs.n	800f1e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1d2:	4b12      	ldr	r3, [pc, #72]	@ (800f21c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3304      	adds	r3, #4
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4610      	mov	r0, r2
 800f1e0:	f7fd fe7f 	bl	800cee2 <vListInsert>
}
 800f1e4:	e010      	b.n	800f208 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f220 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	f7fd fe75 	bl	800cee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f224 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d202      	bcs.n	800f208 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f202:	4a08      	ldr	r2, [pc, #32]	@ (800f224 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	6013      	str	r3, [r2, #0]
}
 800f208:	bf00      	nop
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	24005d88 	.word	0x24005d88
 800f214:	240058b0 	.word	0x240058b0
 800f218:	24005d70 	.word	0x24005d70
 800f21c:	24005d40 	.word	0x24005d40
 800f220:	24005d3c 	.word	0x24005d3c
 800f224:	24005da4 	.word	0x24005da4

0800f228 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08a      	sub	sp, #40	@ 0x28
 800f22c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f22e:	2300      	movs	r3, #0
 800f230:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f232:	f000 fbb1 	bl	800f998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f236:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <xTimerCreateTimerTask+0x84>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d021      	beq.n	800f282 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f242:	2300      	movs	r3, #0
 800f244:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f246:	1d3a      	adds	r2, r7, #4
 800f248:	f107 0108 	add.w	r1, r7, #8
 800f24c:	f107 030c 	add.w	r3, r7, #12
 800f250:	4618      	mov	r0, r3
 800f252:	f7fd fddb 	bl	800ce0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	9202      	str	r2, [sp, #8]
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	2302      	movs	r3, #2
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	2300      	movs	r3, #0
 800f266:	460a      	mov	r2, r1
 800f268:	4911      	ldr	r1, [pc, #68]	@ (800f2b0 <xTimerCreateTimerTask+0x88>)
 800f26a:	4812      	ldr	r0, [pc, #72]	@ (800f2b4 <xTimerCreateTimerTask+0x8c>)
 800f26c:	f7fe ff80 	bl	800e170 <xTaskCreateStatic>
 800f270:	4603      	mov	r3, r0
 800f272:	4a11      	ldr	r2, [pc, #68]	@ (800f2b8 <xTimerCreateTimerTask+0x90>)
 800f274:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <xTimerCreateTimerTask+0x90>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f27e:	2301      	movs	r3, #1
 800f280:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10b      	bne.n	800f2a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	613b      	str	r3, [r7, #16]
}
 800f29a:	bf00      	nop
 800f29c:	bf00      	nop
 800f29e:	e7fd      	b.n	800f29c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2a0:	697b      	ldr	r3, [r7, #20]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	24005de0 	.word	0x24005de0
 800f2b0:	0801f598 	.word	0x0801f598
 800f2b4:	0800f531 	.word	0x0800f531
 800f2b8:	24005de4 	.word	0x24005de4

0800f2bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f2ca:	202c      	movs	r0, #44	@ 0x2c
 800f2cc:	f000 fe16 	bl	800fefc <pvPortMalloc>
 800f2d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00d      	beq.n	800f2f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	9301      	str	r3, [sp, #4]
 800f2e4:	6a3b      	ldr	r3, [r7, #32]
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	68b9      	ldr	r1, [r7, #8]
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f000 f845 	bl	800f37e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f2f4:	697b      	ldr	r3, [r7, #20]
	}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b08a      	sub	sp, #40	@ 0x28
 800f302:	af02      	add	r7, sp, #8
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
 800f30a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f30c:	232c      	movs	r3, #44	@ 0x2c
 800f30e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	2b2c      	cmp	r3, #44	@ 0x2c
 800f314:	d00b      	beq.n	800f32e <xTimerCreateStatic+0x30>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	61bb      	str	r3, [r7, #24]
}
 800f328:	bf00      	nop
 800f32a:	bf00      	nop
 800f32c:	e7fd      	b.n	800f32a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f32e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10b      	bne.n	800f34e <xTimerCreateStatic+0x50>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33a:	f383 8811 	msr	BASEPRI, r3
 800f33e:	f3bf 8f6f 	isb	sy
 800f342:	f3bf 8f4f 	dsb	sy
 800f346:	617b      	str	r3, [r7, #20]
}
 800f348:	bf00      	nop
 800f34a:	bf00      	nop
 800f34c:	e7fd      	b.n	800f34a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f350:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00d      	beq.n	800f374 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	9301      	str	r3, [sp, #4]
 800f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	68b9      	ldr	r1, [r7, #8]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f000 f805 	bl	800f37e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f374:	69fb      	ldr	r3, [r7, #28]
	}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b086      	sub	sp, #24
 800f382:	af00      	add	r7, sp, #0
 800f384:	60f8      	str	r0, [r7, #12]
 800f386:	60b9      	str	r1, [r7, #8]
 800f388:	607a      	str	r2, [r7, #4]
 800f38a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10b      	bne.n	800f3aa <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	617b      	str	r3, [r7, #20]
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop
 800f3a8:	e7fd      	b.n	800f3a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01e      	beq.n	800f3ee <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3b0:	f000 faf2 	bl	800f998 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c8:	6a3a      	ldr	r2, [r7, #32]
 800f3ca:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fd fd55 	bl	800ce80 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d008      	beq.n	800f3ee <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3e2:	f043 0304 	orr.w	r3, r3, #4
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f3ee:	bf00      	nop
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b08a      	sub	sp, #40	@ 0x28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f406:	2300      	movs	r3, #0
 800f408:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10b      	bne.n	800f428 <xTimerGenericCommand+0x30>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f414:	f383 8811 	msr	BASEPRI, r3
 800f418:	f3bf 8f6f 	isb	sy
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	623b      	str	r3, [r7, #32]
}
 800f422:	bf00      	nop
 800f424:	bf00      	nop
 800f426:	e7fd      	b.n	800f424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f428:	4b19      	ldr	r3, [pc, #100]	@ (800f490 <xTimerGenericCommand+0x98>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d02a      	beq.n	800f486 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b05      	cmp	r3, #5
 800f440:	dc18      	bgt.n	800f474 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f442:	f7ff fd0f 	bl	800ee64 <xTaskGetSchedulerState>
 800f446:	4603      	mov	r3, r0
 800f448:	2b02      	cmp	r3, #2
 800f44a:	d109      	bne.n	800f460 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f44c:	4b10      	ldr	r3, [pc, #64]	@ (800f490 <xTimerGenericCommand+0x98>)
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	f107 0110 	add.w	r1, r7, #16
 800f454:	2300      	movs	r3, #0
 800f456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f458:	f7fe f812 	bl	800d480 <xQueueGenericSend>
 800f45c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f45e:	e012      	b.n	800f486 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f460:	4b0b      	ldr	r3, [pc, #44]	@ (800f490 <xTimerGenericCommand+0x98>)
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	f107 0110 	add.w	r1, r7, #16
 800f468:	2300      	movs	r3, #0
 800f46a:	2200      	movs	r2, #0
 800f46c:	f7fe f808 	bl	800d480 <xQueueGenericSend>
 800f470:	6278      	str	r0, [r7, #36]	@ 0x24
 800f472:	e008      	b.n	800f486 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f474:	4b06      	ldr	r3, [pc, #24]	@ (800f490 <xTimerGenericCommand+0x98>)
 800f476:	6818      	ldr	r0, [r3, #0]
 800f478:	f107 0110 	add.w	r1, r7, #16
 800f47c:	2300      	movs	r3, #0
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	f7fe f900 	bl	800d684 <xQueueGenericSendFromISR>
 800f484:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3728      	adds	r7, #40	@ 0x28
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	24005de0 	.word	0x24005de0

0800f494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af02      	add	r7, sp, #8
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f49e:	4b23      	ldr	r3, [pc, #140]	@ (800f52c <prvProcessExpiredTimer+0x98>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd fd51 	bl	800cf54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4b8:	f003 0304 	and.w	r3, r3, #4
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d023      	beq.n	800f508 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	699a      	ldr	r2, [r3, #24]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	18d1      	adds	r1, r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	6978      	ldr	r0, [r7, #20]
 800f4ce:	f000 f8d5 	bl	800f67c <prvInsertTimerInActiveList>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d020      	beq.n	800f51a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4d8:	2300      	movs	r3, #0
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	6978      	ldr	r0, [r7, #20]
 800f4e4:	f7ff ff88 	bl	800f3f8 <xTimerGenericCommand>
 800f4e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d114      	bne.n	800f51a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f4:	f383 8811 	msr	BASEPRI, r3
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	60fb      	str	r3, [r7, #12]
}
 800f502:	bf00      	nop
 800f504:	bf00      	nop
 800f506:	e7fd      	b.n	800f504 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f50e:	f023 0301 	bic.w	r3, r3, #1
 800f512:	b2da      	uxtb	r2, r3
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	6a1b      	ldr	r3, [r3, #32]
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	4798      	blx	r3
}
 800f522:	bf00      	nop
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	24005dd8 	.word	0x24005dd8

0800f530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f538:	f107 0308 	add.w	r3, r7, #8
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 f859 	bl	800f5f4 <prvGetNextExpireTime>
 800f542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	4619      	mov	r1, r3
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f000 f805 	bl	800f558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f54e:	f000 f8d7 	bl	800f700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f552:	bf00      	nop
 800f554:	e7f0      	b.n	800f538 <prvTimerTask+0x8>
	...

0800f558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f562:	f7ff f869 	bl	800e638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f566:	f107 0308 	add.w	r3, r7, #8
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 f866 	bl	800f63c <prvSampleTimeNow>
 800f570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d130      	bne.n	800f5da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <prvProcessTimerOrBlockTask+0x3c>
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	429a      	cmp	r2, r3
 800f584:	d806      	bhi.n	800f594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f586:	f7ff f865 	bl	800e654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f58a:	68f9      	ldr	r1, [r7, #12]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ff81 	bl	800f494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f592:	e024      	b.n	800f5de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d008      	beq.n	800f5ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f59a:	4b13      	ldr	r3, [pc, #76]	@ (800f5e8 <prvProcessTimerOrBlockTask+0x90>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d101      	bne.n	800f5a8 <prvProcessTimerOrBlockTask+0x50>
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e000      	b.n	800f5aa <prvProcessTimerOrBlockTask+0x52>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f5ec <prvProcessTimerOrBlockTask+0x94>)
 800f5ae:	6818      	ldr	r0, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f7fe fda5 	bl	800e108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5be:	f7ff f849 	bl	800e654 <xTaskResumeAll>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10a      	bne.n	800f5de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5c8:	4b09      	ldr	r3, [pc, #36]	@ (800f5f0 <prvProcessTimerOrBlockTask+0x98>)
 800f5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	f3bf 8f6f 	isb	sy
}
 800f5d8:	e001      	b.n	800f5de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5da:	f7ff f83b 	bl	800e654 <xTaskResumeAll>
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	24005ddc 	.word	0x24005ddc
 800f5ec:	24005de0 	.word	0x24005de0
 800f5f0:	e000ed04 	.word	0xe000ed04

0800f5f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f638 <prvGetNextExpireTime+0x44>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <prvGetNextExpireTime+0x16>
 800f606:	2201      	movs	r2, #1
 800f608:	e000      	b.n	800f60c <prvGetNextExpireTime+0x18>
 800f60a:	2200      	movs	r2, #0
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d105      	bne.n	800f624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f618:	4b07      	ldr	r3, [pc, #28]	@ (800f638 <prvGetNextExpireTime+0x44>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	60fb      	str	r3, [r7, #12]
 800f622:	e001      	b.n	800f628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f624:	2300      	movs	r3, #0
 800f626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f628:	68fb      	ldr	r3, [r7, #12]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3714      	adds	r7, #20
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	24005dd8 	.word	0x24005dd8

0800f63c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f644:	f7ff f8a4 	bl	800e790 <xTaskGetTickCount>
 800f648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f64a:	4b0b      	ldr	r3, [pc, #44]	@ (800f678 <prvSampleTimeNow+0x3c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	429a      	cmp	r2, r3
 800f652:	d205      	bcs.n	800f660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f654:	f000 f93a 	bl	800f8cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	e002      	b.n	800f666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f666:	4a04      	ldr	r2, [pc, #16]	@ (800f678 <prvSampleTimeNow+0x3c>)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f66c:	68fb      	ldr	r3, [r7, #12]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	24005de8 	.word	0x24005de8

0800f67c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	607a      	str	r2, [r7, #4]
 800f688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f68a:	2300      	movs	r3, #0
 800f68c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d812      	bhi.n	800f6c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	1ad2      	subs	r2, r2, r3
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d302      	bcc.n	800f6b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	617b      	str	r3, [r7, #20]
 800f6b4:	e01b      	b.n	800f6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6b6:	4b10      	ldr	r3, [pc, #64]	@ (800f6f8 <prvInsertTimerInActiveList+0x7c>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3304      	adds	r3, #4
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	f7fd fc0e 	bl	800cee2 <vListInsert>
 800f6c6:	e012      	b.n	800f6ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d206      	bcs.n	800f6de <prvInsertTimerInActiveList+0x62>
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d302      	bcc.n	800f6de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	617b      	str	r3, [r7, #20]
 800f6dc:	e007      	b.n	800f6ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6de:	4b07      	ldr	r3, [pc, #28]	@ (800f6fc <prvInsertTimerInActiveList+0x80>)
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3304      	adds	r3, #4
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	f7fd fbfa 	bl	800cee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6ee:	697b      	ldr	r3, [r7, #20]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3718      	adds	r7, #24
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	24005ddc 	.word	0x24005ddc
 800f6fc:	24005dd8 	.word	0x24005dd8

0800f700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08e      	sub	sp, #56	@ 0x38
 800f704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f706:	e0ce      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	da19      	bge.n	800f742 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f70e:	1d3b      	adds	r3, r7, #4
 800f710:	3304      	adds	r3, #4
 800f712:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10b      	bne.n	800f732 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	61fb      	str	r3, [r7, #28]
}
 800f72c:	bf00      	nop
 800f72e:	bf00      	nop
 800f730:	e7fd      	b.n	800f72e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f738:	6850      	ldr	r0, [r2, #4]
 800f73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f73c:	6892      	ldr	r2, [r2, #8]
 800f73e:	4611      	mov	r1, r2
 800f740:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	f2c0 80ae 	blt.w	800f8a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f750:	695b      	ldr	r3, [r3, #20]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d004      	beq.n	800f760 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f758:	3304      	adds	r3, #4
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fd fbfa 	bl	800cf54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f760:	463b      	mov	r3, r7
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff ff6a 	bl	800f63c <prvSampleTimeNow>
 800f768:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	f200 8097 	bhi.w	800f8a0 <prvProcessReceivedCommands+0x1a0>
 800f772:	a201      	add	r2, pc, #4	@ (adr r2, 800f778 <prvProcessReceivedCommands+0x78>)
 800f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f778:	0800f7a1 	.word	0x0800f7a1
 800f77c:	0800f7a1 	.word	0x0800f7a1
 800f780:	0800f7a1 	.word	0x0800f7a1
 800f784:	0800f817 	.word	0x0800f817
 800f788:	0800f82b 	.word	0x0800f82b
 800f78c:	0800f877 	.word	0x0800f877
 800f790:	0800f7a1 	.word	0x0800f7a1
 800f794:	0800f7a1 	.word	0x0800f7a1
 800f798:	0800f817 	.word	0x0800f817
 800f79c:	0800f82b 	.word	0x0800f82b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7a6:	f043 0301 	orr.w	r3, r3, #1
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b6:	699b      	ldr	r3, [r3, #24]
 800f7b8:	18d1      	adds	r1, r2, r3
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7c0:	f7ff ff5c 	bl	800f67c <prvInsertTimerInActiveList>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d06c      	beq.n	800f8a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7d8:	f003 0304 	and.w	r3, r3, #4
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d061      	beq.n	800f8a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	441a      	add	r2, r3
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7f2:	f7ff fe01 	bl	800f3f8 <xTimerGenericCommand>
 800f7f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d152      	bne.n	800f8a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	61bb      	str	r3, [r7, #24]
}
 800f810:	bf00      	nop
 800f812:	bf00      	nop
 800f814:	e7fd      	b.n	800f812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f81c:	f023 0301 	bic.w	r3, r3, #1
 800f820:	b2da      	uxtb	r2, r3
 800f822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f824:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f828:	e03d      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f830:	f043 0301 	orr.w	r3, r3, #1
 800f834:	b2da      	uxtb	r2, r3
 800f836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f840:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d10b      	bne.n	800f862 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	617b      	str	r3, [r7, #20]
}
 800f85c:	bf00      	nop
 800f85e:	bf00      	nop
 800f860:	e7fd      	b.n	800f85e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f864:	699a      	ldr	r2, [r3, #24]
 800f866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f868:	18d1      	adds	r1, r2, r3
 800f86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f870:	f7ff ff04 	bl	800f67c <prvInsertTimerInActiveList>
					break;
 800f874:	e017      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f87c:	f003 0302 	and.w	r3, r3, #2
 800f880:	2b00      	cmp	r3, #0
 800f882:	d103      	bne.n	800f88c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f886:	f000 fc07 	bl	8010098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f88a:	e00c      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f892:	f023 0301 	bic.w	r3, r3, #1
 800f896:	b2da      	uxtb	r2, r3
 800f898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f89e:	e002      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f8a0:	bf00      	nop
 800f8a2:	e000      	b.n	800f8a6 <prvProcessReceivedCommands+0x1a6>
					break;
 800f8a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8a6:	4b08      	ldr	r3, [pc, #32]	@ (800f8c8 <prvProcessReceivedCommands+0x1c8>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	1d39      	adds	r1, r7, #4
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe f816 	bl	800d8e0 <xQueueReceive>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f47f af26 	bne.w	800f708 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f8bc:	bf00      	nop
 800f8be:	bf00      	nop
 800f8c0:	3730      	adds	r7, #48	@ 0x30
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	24005de0 	.word	0x24005de0

0800f8cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b088      	sub	sp, #32
 800f8d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8d2:	e049      	b.n	800f968 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8d4:	4b2e      	ldr	r3, [pc, #184]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8de:	4b2c      	ldr	r3, [pc, #176]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd fb31 	bl	800cf54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f900:	f003 0304 	and.w	r3, r3, #4
 800f904:	2b00      	cmp	r3, #0
 800f906:	d02f      	beq.n	800f968 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	699b      	ldr	r3, [r3, #24]
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	4413      	add	r3, r2
 800f910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	429a      	cmp	r2, r3
 800f918:	d90e      	bls.n	800f938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68ba      	ldr	r2, [r7, #8]
 800f91e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f926:	4b1a      	ldr	r3, [pc, #104]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	3304      	adds	r3, #4
 800f92e:	4619      	mov	r1, r3
 800f930:	4610      	mov	r0, r2
 800f932:	f7fd fad6 	bl	800cee2 <vListInsert>
 800f936:	e017      	b.n	800f968 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f938:	2300      	movs	r3, #0
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	2300      	movs	r3, #0
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	2100      	movs	r1, #0
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7ff fd58 	bl	800f3f8 <xTimerGenericCommand>
 800f948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10b      	bne.n	800f968 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	603b      	str	r3, [r7, #0]
}
 800f962:	bf00      	nop
 800f964:	bf00      	nop
 800f966:	e7fd      	b.n	800f964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f968:	4b09      	ldr	r3, [pc, #36]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1b0      	bne.n	800f8d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f972:	4b07      	ldr	r3, [pc, #28]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f978:	4b06      	ldr	r3, [pc, #24]	@ (800f994 <prvSwitchTimerLists+0xc8>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a04      	ldr	r2, [pc, #16]	@ (800f990 <prvSwitchTimerLists+0xc4>)
 800f97e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f980:	4a04      	ldr	r2, [pc, #16]	@ (800f994 <prvSwitchTimerLists+0xc8>)
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	6013      	str	r3, [r2, #0]
}
 800f986:	bf00      	nop
 800f988:	3718      	adds	r7, #24
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	24005dd8 	.word	0x24005dd8
 800f994:	24005ddc 	.word	0x24005ddc

0800f998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f99e:	f000 f98b 	bl	800fcb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9a2:	4b15      	ldr	r3, [pc, #84]	@ (800f9f8 <prvCheckForValidListAndQueue+0x60>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d120      	bne.n	800f9ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9aa:	4814      	ldr	r0, [pc, #80]	@ (800f9fc <prvCheckForValidListAndQueue+0x64>)
 800f9ac:	f7fd fa48 	bl	800ce40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9b0:	4813      	ldr	r0, [pc, #76]	@ (800fa00 <prvCheckForValidListAndQueue+0x68>)
 800f9b2:	f7fd fa45 	bl	800ce40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9b6:	4b13      	ldr	r3, [pc, #76]	@ (800fa04 <prvCheckForValidListAndQueue+0x6c>)
 800f9b8:	4a10      	ldr	r2, [pc, #64]	@ (800f9fc <prvCheckForValidListAndQueue+0x64>)
 800f9ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9bc:	4b12      	ldr	r3, [pc, #72]	@ (800fa08 <prvCheckForValidListAndQueue+0x70>)
 800f9be:	4a10      	ldr	r2, [pc, #64]	@ (800fa00 <prvCheckForValidListAndQueue+0x68>)
 800f9c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	4b11      	ldr	r3, [pc, #68]	@ (800fa0c <prvCheckForValidListAndQueue+0x74>)
 800f9c8:	4a11      	ldr	r2, [pc, #68]	@ (800fa10 <prvCheckForValidListAndQueue+0x78>)
 800f9ca:	2110      	movs	r1, #16
 800f9cc:	200a      	movs	r0, #10
 800f9ce:	f7fd fb55 	bl	800d07c <xQueueGenericCreateStatic>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	4a08      	ldr	r2, [pc, #32]	@ (800f9f8 <prvCheckForValidListAndQueue+0x60>)
 800f9d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f9d8:	4b07      	ldr	r3, [pc, #28]	@ (800f9f8 <prvCheckForValidListAndQueue+0x60>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d005      	beq.n	800f9ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f9e0:	4b05      	ldr	r3, [pc, #20]	@ (800f9f8 <prvCheckForValidListAndQueue+0x60>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	490b      	ldr	r1, [pc, #44]	@ (800fa14 <prvCheckForValidListAndQueue+0x7c>)
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fe fb3a 	bl	800e060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9ec:	f000 f996 	bl	800fd1c <vPortExitCritical>
}
 800f9f0:	bf00      	nop
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	24005de0 	.word	0x24005de0
 800f9fc:	24005db0 	.word	0x24005db0
 800fa00:	24005dc4 	.word	0x24005dc4
 800fa04:	24005dd8 	.word	0x24005dd8
 800fa08:	24005ddc 	.word	0x24005ddc
 800fa0c:	24005e8c 	.word	0x24005e8c
 800fa10:	24005dec 	.word	0x24005dec
 800fa14:	0801f5a0 	.word	0x0801f5a0

0800fa18 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d10b      	bne.n	800fa42 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	60fb      	str	r3, [r7, #12]
}
 800fa3c:	bf00      	nop
 800fa3e:	bf00      	nop
 800fa40:	e7fd      	b.n	800fa3e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800fa42:	f000 f939 	bl	800fcb8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800fa4c:	f000 f966 	bl	800fd1c <vPortExitCritical>

	return pvReturn;
 800fa50:	693b      	ldr	r3, [r7, #16]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
	...

0800fa5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	3b04      	subs	r3, #4
 800fa6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	3b04      	subs	r3, #4
 800fa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	f023 0201 	bic.w	r2, r3, #1
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	3b04      	subs	r3, #4
 800fa8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa8c:	4a0c      	ldr	r2, [pc, #48]	@ (800fac0 <pxPortInitialiseStack+0x64>)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	3b14      	subs	r3, #20
 800fa96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3b04      	subs	r3, #4
 800faa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f06f 0202 	mvn.w	r2, #2
 800faaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3b20      	subs	r3, #32
 800fab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fab2:	68fb      	ldr	r3, [r7, #12]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3714      	adds	r7, #20
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	0800fac5 	.word	0x0800fac5

0800fac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800face:	4b13      	ldr	r3, [pc, #76]	@ (800fb1c <prvTaskExitError+0x58>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d00b      	beq.n	800faf0 <prvTaskExitError+0x2c>
	__asm volatile
 800fad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fadc:	f383 8811 	msr	BASEPRI, r3
 800fae0:	f3bf 8f6f 	isb	sy
 800fae4:	f3bf 8f4f 	dsb	sy
 800fae8:	60fb      	str	r3, [r7, #12]
}
 800faea:	bf00      	nop
 800faec:	bf00      	nop
 800faee:	e7fd      	b.n	800faec <prvTaskExitError+0x28>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	60bb      	str	r3, [r7, #8]
}
 800fb02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb04:	bf00      	nop
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d0fc      	beq.n	800fb06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb0c:	bf00      	nop
 800fb0e:	bf00      	nop
 800fb10:	3714      	adds	r7, #20
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	24000024 	.word	0x24000024

0800fb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb20:	4b07      	ldr	r3, [pc, #28]	@ (800fb40 <pxCurrentTCBConst2>)
 800fb22:	6819      	ldr	r1, [r3, #0]
 800fb24:	6808      	ldr	r0, [r1, #0]
 800fb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2a:	f380 8809 	msr	PSP, r0
 800fb2e:	f3bf 8f6f 	isb	sy
 800fb32:	f04f 0000 	mov.w	r0, #0
 800fb36:	f380 8811 	msr	BASEPRI, r0
 800fb3a:	4770      	bx	lr
 800fb3c:	f3af 8000 	nop.w

0800fb40 <pxCurrentTCBConst2>:
 800fb40:	240058b0 	.word	0x240058b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop

0800fb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb48:	4808      	ldr	r0, [pc, #32]	@ (800fb6c <prvPortStartFirstTask+0x24>)
 800fb4a:	6800      	ldr	r0, [r0, #0]
 800fb4c:	6800      	ldr	r0, [r0, #0]
 800fb4e:	f380 8808 	msr	MSP, r0
 800fb52:	f04f 0000 	mov.w	r0, #0
 800fb56:	f380 8814 	msr	CONTROL, r0
 800fb5a:	b662      	cpsie	i
 800fb5c:	b661      	cpsie	f
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	df00      	svc	0
 800fb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb6a:	bf00      	nop
 800fb6c:	e000ed08 	.word	0xe000ed08

0800fb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb76:	4b47      	ldr	r3, [pc, #284]	@ (800fc94 <xPortStartScheduler+0x124>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a47      	ldr	r2, [pc, #284]	@ (800fc98 <xPortStartScheduler+0x128>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d10b      	bne.n	800fb98 <xPortStartScheduler+0x28>
	__asm volatile
 800fb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	613b      	str	r3, [r7, #16]
}
 800fb92:	bf00      	nop
 800fb94:	bf00      	nop
 800fb96:	e7fd      	b.n	800fb94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb98:	4b3e      	ldr	r3, [pc, #248]	@ (800fc94 <xPortStartScheduler+0x124>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a3f      	ldr	r2, [pc, #252]	@ (800fc9c <xPortStartScheduler+0x12c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d10b      	bne.n	800fbba <xPortStartScheduler+0x4a>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	60fb      	str	r3, [r7, #12]
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop
 800fbb8:	e7fd      	b.n	800fbb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbba:	4b39      	ldr	r3, [pc, #228]	@ (800fca0 <xPortStartScheduler+0x130>)
 800fbbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	22ff      	movs	r2, #255	@ 0xff
 800fbca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	4b31      	ldr	r3, [pc, #196]	@ (800fca4 <xPortStartScheduler+0x134>)
 800fbe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbe2:	4b31      	ldr	r3, [pc, #196]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fbe4:	2207      	movs	r2, #7
 800fbe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbe8:	e009      	b.n	800fbfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fbea:	4b2f      	ldr	r3, [pc, #188]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	4a2d      	ldr	r2, [pc, #180]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fbf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbf4:	78fb      	ldrb	r3, [r7, #3]
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbfe:	78fb      	ldrb	r3, [r7, #3]
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc06:	2b80      	cmp	r3, #128	@ 0x80
 800fc08:	d0ef      	beq.n	800fbea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc0a:	4b27      	ldr	r3, [pc, #156]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f1c3 0307 	rsb	r3, r3, #7
 800fc12:	2b04      	cmp	r3, #4
 800fc14:	d00b      	beq.n	800fc2e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	60bb      	str	r3, [r7, #8]
}
 800fc28:	bf00      	nop
 800fc2a:	bf00      	nop
 800fc2c:	e7fd      	b.n	800fc2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	021b      	lsls	r3, r3, #8
 800fc34:	4a1c      	ldr	r2, [pc, #112]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fc36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc38:	4b1b      	ldr	r3, [pc, #108]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc40:	4a19      	ldr	r2, [pc, #100]	@ (800fca8 <xPortStartScheduler+0x138>)
 800fc42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc4c:	4b17      	ldr	r3, [pc, #92]	@ (800fcac <xPortStartScheduler+0x13c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a16      	ldr	r2, [pc, #88]	@ (800fcac <xPortStartScheduler+0x13c>)
 800fc52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fc56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc58:	4b14      	ldr	r3, [pc, #80]	@ (800fcac <xPortStartScheduler+0x13c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4a13      	ldr	r2, [pc, #76]	@ (800fcac <xPortStartScheduler+0x13c>)
 800fc5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fc62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc64:	f000 f8da 	bl	800fe1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc68:	4b11      	ldr	r3, [pc, #68]	@ (800fcb0 <xPortStartScheduler+0x140>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc6e:	f000 f8f9 	bl	800fe64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc72:	4b10      	ldr	r3, [pc, #64]	@ (800fcb4 <xPortStartScheduler+0x144>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a0f      	ldr	r2, [pc, #60]	@ (800fcb4 <xPortStartScheduler+0x144>)
 800fc78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fc7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc7e:	f7ff ff63 	bl	800fb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc82:	f7fe fe61 	bl	800e948 <vTaskSwitchContext>
	prvTaskExitError();
 800fc86:	f7ff ff1d 	bl	800fac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc8a:	2300      	movs	r3, #0
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3718      	adds	r7, #24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	e000ed00 	.word	0xe000ed00
 800fc98:	410fc271 	.word	0x410fc271
 800fc9c:	410fc270 	.word	0x410fc270
 800fca0:	e000e400 	.word	0xe000e400
 800fca4:	24005edc 	.word	0x24005edc
 800fca8:	24005ee0 	.word	0x24005ee0
 800fcac:	e000ed20 	.word	0xe000ed20
 800fcb0:	24000024 	.word	0x24000024
 800fcb4:	e000ef34 	.word	0xe000ef34

0800fcb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	607b      	str	r3, [r7, #4]
}
 800fcd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcd2:	4b10      	ldr	r3, [pc, #64]	@ (800fd14 <vPortEnterCritical+0x5c>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	4a0e      	ldr	r2, [pc, #56]	@ (800fd14 <vPortEnterCritical+0x5c>)
 800fcda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fcdc:	4b0d      	ldr	r3, [pc, #52]	@ (800fd14 <vPortEnterCritical+0x5c>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d110      	bne.n	800fd06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fce4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd18 <vPortEnterCritical+0x60>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00b      	beq.n	800fd06 <vPortEnterCritical+0x4e>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	603b      	str	r3, [r7, #0]
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	e7fd      	b.n	800fd02 <vPortEnterCritical+0x4a>
	}
}
 800fd06:	bf00      	nop
 800fd08:	370c      	adds	r7, #12
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	24000024 	.word	0x24000024
 800fd18:	e000ed04 	.word	0xe000ed04

0800fd1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd22:	4b12      	ldr	r3, [pc, #72]	@ (800fd6c <vPortExitCritical+0x50>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d10b      	bne.n	800fd42 <vPortExitCritical+0x26>
	__asm volatile
 800fd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2e:	f383 8811 	msr	BASEPRI, r3
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	f3bf 8f4f 	dsb	sy
 800fd3a:	607b      	str	r3, [r7, #4]
}
 800fd3c:	bf00      	nop
 800fd3e:	bf00      	nop
 800fd40:	e7fd      	b.n	800fd3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd42:	4b0a      	ldr	r3, [pc, #40]	@ (800fd6c <vPortExitCritical+0x50>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3b01      	subs	r3, #1
 800fd48:	4a08      	ldr	r2, [pc, #32]	@ (800fd6c <vPortExitCritical+0x50>)
 800fd4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd4c:	4b07      	ldr	r3, [pc, #28]	@ (800fd6c <vPortExitCritical+0x50>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d105      	bne.n	800fd60 <vPortExitCritical+0x44>
 800fd54:	2300      	movs	r3, #0
 800fd56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	f383 8811 	msr	BASEPRI, r3
}
 800fd5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	24000024 	.word	0x24000024

0800fd70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd70:	f3ef 8009 	mrs	r0, PSP
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	4b15      	ldr	r3, [pc, #84]	@ (800fdd0 <pxCurrentTCBConst>)
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	f01e 0f10 	tst.w	lr, #16
 800fd80:	bf08      	it	eq
 800fd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8a:	6010      	str	r0, [r2, #0]
 800fd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fd94:	f380 8811 	msr	BASEPRI, r0
 800fd98:	f3bf 8f4f 	dsb	sy
 800fd9c:	f3bf 8f6f 	isb	sy
 800fda0:	f7fe fdd2 	bl	800e948 <vTaskSwitchContext>
 800fda4:	f04f 0000 	mov.w	r0, #0
 800fda8:	f380 8811 	msr	BASEPRI, r0
 800fdac:	bc09      	pop	{r0, r3}
 800fdae:	6819      	ldr	r1, [r3, #0]
 800fdb0:	6808      	ldr	r0, [r1, #0]
 800fdb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb6:	f01e 0f10 	tst.w	lr, #16
 800fdba:	bf08      	it	eq
 800fdbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdc0:	f380 8809 	msr	PSP, r0
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	f3af 8000 	nop.w

0800fdd0 <pxCurrentTCBConst>:
 800fdd0:	240058b0 	.word	0x240058b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fdd4:	bf00      	nop
 800fdd6:	bf00      	nop

0800fdd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	607b      	str	r3, [r7, #4]
}
 800fdf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fdf2:	f7fe fcef 	bl	800e7d4 <xTaskIncrementTick>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdfc:	4b06      	ldr	r3, [pc, #24]	@ (800fe18 <xPortSysTickHandler+0x40>)
 800fdfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	2300      	movs	r3, #0
 800fe06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	f383 8811 	msr	BASEPRI, r3
}
 800fe0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe10:	bf00      	nop
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	e000ed04 	.word	0xe000ed04

0800fe1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe20:	4b0b      	ldr	r3, [pc, #44]	@ (800fe50 <vPortSetupTimerInterrupt+0x34>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe26:	4b0b      	ldr	r3, [pc, #44]	@ (800fe54 <vPortSetupTimerInterrupt+0x38>)
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe2c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe58 <vPortSetupTimerInterrupt+0x3c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a0a      	ldr	r2, [pc, #40]	@ (800fe5c <vPortSetupTimerInterrupt+0x40>)
 800fe32:	fba2 2303 	umull	r2, r3, r2, r3
 800fe36:	099b      	lsrs	r3, r3, #6
 800fe38:	4a09      	ldr	r2, [pc, #36]	@ (800fe60 <vPortSetupTimerInterrupt+0x44>)
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe3e:	4b04      	ldr	r3, [pc, #16]	@ (800fe50 <vPortSetupTimerInterrupt+0x34>)
 800fe40:	2207      	movs	r2, #7
 800fe42:	601a      	str	r2, [r3, #0]
}
 800fe44:	bf00      	nop
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	e000e010 	.word	0xe000e010
 800fe54:	e000e018 	.word	0xe000e018
 800fe58:	24000000 	.word	0x24000000
 800fe5c:	10624dd3 	.word	0x10624dd3
 800fe60:	e000e014 	.word	0xe000e014

0800fe64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fe74 <vPortEnableVFP+0x10>
 800fe68:	6801      	ldr	r1, [r0, #0]
 800fe6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fe6e:	6001      	str	r1, [r0, #0]
 800fe70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe72:	bf00      	nop
 800fe74:	e000ed88 	.word	0xe000ed88

0800fe78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe78:	b480      	push	{r7}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe7e:	f3ef 8305 	mrs	r3, IPSR
 800fe82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b0f      	cmp	r3, #15
 800fe88:	d915      	bls.n	800feb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe8a:	4a18      	ldr	r2, [pc, #96]	@ (800feec <vPortValidateInterruptPriority+0x74>)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe94:	4b16      	ldr	r3, [pc, #88]	@ (800fef0 <vPortValidateInterruptPriority+0x78>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	7afa      	ldrb	r2, [r7, #11]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d20b      	bcs.n	800feb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	607b      	str	r3, [r7, #4]
}
 800feb0:	bf00      	nop
 800feb2:	bf00      	nop
 800feb4:	e7fd      	b.n	800feb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800feb6:	4b0f      	ldr	r3, [pc, #60]	@ (800fef4 <vPortValidateInterruptPriority+0x7c>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800febe:	4b0e      	ldr	r3, [pc, #56]	@ (800fef8 <vPortValidateInterruptPriority+0x80>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d90b      	bls.n	800fede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feca:	f383 8811 	msr	BASEPRI, r3
 800fece:	f3bf 8f6f 	isb	sy
 800fed2:	f3bf 8f4f 	dsb	sy
 800fed6:	603b      	str	r3, [r7, #0]
}
 800fed8:	bf00      	nop
 800feda:	bf00      	nop
 800fedc:	e7fd      	b.n	800feda <vPortValidateInterruptPriority+0x62>
	}
 800fede:	bf00      	nop
 800fee0:	3714      	adds	r7, #20
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	e000e3f0 	.word	0xe000e3f0
 800fef0:	24005edc 	.word	0x24005edc
 800fef4:	e000ed0c 	.word	0xe000ed0c
 800fef8:	24005ee0 	.word	0x24005ee0

0800fefc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b08a      	sub	sp, #40	@ 0x28
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff04:	2300      	movs	r3, #0
 800ff06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff08:	f7fe fb96 	bl	800e638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff0c:	4b5c      	ldr	r3, [pc, #368]	@ (8010080 <pvPortMalloc+0x184>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d101      	bne.n	800ff18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff14:	f000 f924 	bl	8010160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff18:	4b5a      	ldr	r3, [pc, #360]	@ (8010084 <pvPortMalloc+0x188>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4013      	ands	r3, r2
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f040 8095 	bne.w	8010050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d01e      	beq.n	800ff6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff2c:	2208      	movs	r2, #8
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4413      	add	r3, r2
 800ff32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f003 0307 	and.w	r3, r3, #7
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d015      	beq.n	800ff6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f023 0307 	bic.w	r3, r3, #7
 800ff44:	3308      	adds	r3, #8
 800ff46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f003 0307 	and.w	r3, r3, #7
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00b      	beq.n	800ff6a <pvPortMalloc+0x6e>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	617b      	str	r3, [r7, #20]
}
 800ff64:	bf00      	nop
 800ff66:	bf00      	nop
 800ff68:	e7fd      	b.n	800ff66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d06f      	beq.n	8010050 <pvPortMalloc+0x154>
 800ff70:	4b45      	ldr	r3, [pc, #276]	@ (8010088 <pvPortMalloc+0x18c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d86a      	bhi.n	8010050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff7a:	4b44      	ldr	r3, [pc, #272]	@ (801008c <pvPortMalloc+0x190>)
 800ff7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff7e:	4b43      	ldr	r3, [pc, #268]	@ (801008c <pvPortMalloc+0x190>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff84:	e004      	b.n	800ff90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d903      	bls.n	800ffa2 <pvPortMalloc+0xa6>
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f1      	bne.n	800ff86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffa2:	4b37      	ldr	r3, [pc, #220]	@ (8010080 <pvPortMalloc+0x184>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d051      	beq.n	8010050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2208      	movs	r2, #8
 800ffb2:	4413      	add	r3, r2
 800ffb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc0:	685a      	ldr	r2, [r3, #4]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	1ad2      	subs	r2, r2, r3
 800ffc6:	2308      	movs	r3, #8
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d920      	bls.n	8010010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	f003 0307 	and.w	r3, r3, #7
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00b      	beq.n	800fff8 <pvPortMalloc+0xfc>
	__asm volatile
 800ffe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffe4:	f383 8811 	msr	BASEPRI, r3
 800ffe8:	f3bf 8f6f 	isb	sy
 800ffec:	f3bf 8f4f 	dsb	sy
 800fff0:	613b      	str	r3, [r7, #16]
}
 800fff2:	bf00      	nop
 800fff4:	bf00      	nop
 800fff6:	e7fd      	b.n	800fff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	1ad2      	subs	r2, r2, r3
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801000a:	69b8      	ldr	r0, [r7, #24]
 801000c:	f000 f90a 	bl	8010224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010010:	4b1d      	ldr	r3, [pc, #116]	@ (8010088 <pvPortMalloc+0x18c>)
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	4a1b      	ldr	r2, [pc, #108]	@ (8010088 <pvPortMalloc+0x18c>)
 801001c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801001e:	4b1a      	ldr	r3, [pc, #104]	@ (8010088 <pvPortMalloc+0x18c>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	4b1b      	ldr	r3, [pc, #108]	@ (8010090 <pvPortMalloc+0x194>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d203      	bcs.n	8010032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801002a:	4b17      	ldr	r3, [pc, #92]	@ (8010088 <pvPortMalloc+0x18c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a18      	ldr	r2, [pc, #96]	@ (8010090 <pvPortMalloc+0x194>)
 8010030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <pvPortMalloc+0x188>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	431a      	orrs	r2, r3
 801003c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010042:	2200      	movs	r2, #0
 8010044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010046:	4b13      	ldr	r3, [pc, #76]	@ (8010094 <pvPortMalloc+0x198>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	3301      	adds	r3, #1
 801004c:	4a11      	ldr	r2, [pc, #68]	@ (8010094 <pvPortMalloc+0x198>)
 801004e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010050:	f7fe fb00 	bl	800e654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	f003 0307 	and.w	r3, r3, #7
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00b      	beq.n	8010076 <pvPortMalloc+0x17a>
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	60fb      	str	r3, [r7, #12]
}
 8010070:	bf00      	nop
 8010072:	bf00      	nop
 8010074:	e7fd      	b.n	8010072 <pvPortMalloc+0x176>
	return pvReturn;
 8010076:	69fb      	ldr	r3, [r7, #28]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3728      	adds	r7, #40	@ 0x28
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	24009aec 	.word	0x24009aec
 8010084:	24009b00 	.word	0x24009b00
 8010088:	24009af0 	.word	0x24009af0
 801008c:	24009ae4 	.word	0x24009ae4
 8010090:	24009af4 	.word	0x24009af4
 8010094:	24009af8 	.word	0x24009af8

08010098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b086      	sub	sp, #24
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d04f      	beq.n	801014a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100aa:	2308      	movs	r3, #8
 80100ac:	425b      	negs	r3, r3
 80100ae:	697a      	ldr	r2, [r7, #20]
 80100b0:	4413      	add	r3, r2
 80100b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	685a      	ldr	r2, [r3, #4]
 80100bc:	4b25      	ldr	r3, [pc, #148]	@ (8010154 <vPortFree+0xbc>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4013      	ands	r3, r2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d10b      	bne.n	80100de <vPortFree+0x46>
	__asm volatile
 80100c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ca:	f383 8811 	msr	BASEPRI, r3
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	f3bf 8f4f 	dsb	sy
 80100d6:	60fb      	str	r3, [r7, #12]
}
 80100d8:	bf00      	nop
 80100da:	bf00      	nop
 80100dc:	e7fd      	b.n	80100da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00b      	beq.n	80100fe <vPortFree+0x66>
	__asm volatile
 80100e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ea:	f383 8811 	msr	BASEPRI, r3
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	f3bf 8f4f 	dsb	sy
 80100f6:	60bb      	str	r3, [r7, #8]
}
 80100f8:	bf00      	nop
 80100fa:	bf00      	nop
 80100fc:	e7fd      	b.n	80100fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	4b14      	ldr	r3, [pc, #80]	@ (8010154 <vPortFree+0xbc>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4013      	ands	r3, r2
 8010108:	2b00      	cmp	r3, #0
 801010a:	d01e      	beq.n	801014a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d11a      	bne.n	801014a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	685a      	ldr	r2, [r3, #4]
 8010118:	4b0e      	ldr	r3, [pc, #56]	@ (8010154 <vPortFree+0xbc>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	43db      	mvns	r3, r3
 801011e:	401a      	ands	r2, r3
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010124:	f7fe fa88 	bl	800e638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	4b0a      	ldr	r3, [pc, #40]	@ (8010158 <vPortFree+0xc0>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4413      	add	r3, r2
 8010132:	4a09      	ldr	r2, [pc, #36]	@ (8010158 <vPortFree+0xc0>)
 8010134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010136:	6938      	ldr	r0, [r7, #16]
 8010138:	f000 f874 	bl	8010224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801013c:	4b07      	ldr	r3, [pc, #28]	@ (801015c <vPortFree+0xc4>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	3301      	adds	r3, #1
 8010142:	4a06      	ldr	r2, [pc, #24]	@ (801015c <vPortFree+0xc4>)
 8010144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010146:	f7fe fa85 	bl	800e654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801014a:	bf00      	nop
 801014c:	3718      	adds	r7, #24
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	24009b00 	.word	0x24009b00
 8010158:	24009af0 	.word	0x24009af0
 801015c:	24009afc 	.word	0x24009afc

08010160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801016a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801016c:	4b27      	ldr	r3, [pc, #156]	@ (801020c <prvHeapInit+0xac>)
 801016e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f003 0307 	and.w	r3, r3, #7
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00c      	beq.n	8010194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3307      	adds	r3, #7
 801017e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f023 0307 	bic.w	r3, r3, #7
 8010186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	4a1f      	ldr	r2, [pc, #124]	@ (801020c <prvHeapInit+0xac>)
 8010190:	4413      	add	r3, r2
 8010192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010198:	4a1d      	ldr	r2, [pc, #116]	@ (8010210 <prvHeapInit+0xb0>)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801019e:	4b1c      	ldr	r3, [pc, #112]	@ (8010210 <prvHeapInit+0xb0>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	4413      	add	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101ac:	2208      	movs	r2, #8
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	1a9b      	subs	r3, r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f023 0307 	bic.w	r3, r3, #7
 80101ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	4a15      	ldr	r2, [pc, #84]	@ (8010214 <prvHeapInit+0xb4>)
 80101c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101c2:	4b14      	ldr	r3, [pc, #80]	@ (8010214 <prvHeapInit+0xb4>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2200      	movs	r2, #0
 80101c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ca:	4b12      	ldr	r3, [pc, #72]	@ (8010214 <prvHeapInit+0xb4>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2200      	movs	r2, #0
 80101d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	1ad2      	subs	r2, r2, r3
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010214 <prvHeapInit+0xb4>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	4a0a      	ldr	r2, [pc, #40]	@ (8010218 <prvHeapInit+0xb8>)
 80101ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	4a09      	ldr	r2, [pc, #36]	@ (801021c <prvHeapInit+0xbc>)
 80101f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101f8:	4b09      	ldr	r3, [pc, #36]	@ (8010220 <prvHeapInit+0xc0>)
 80101fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80101fe:	601a      	str	r2, [r3, #0]
}
 8010200:	bf00      	nop
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	24005ee4 	.word	0x24005ee4
 8010210:	24009ae4 	.word	0x24009ae4
 8010214:	24009aec 	.word	0x24009aec
 8010218:	24009af4 	.word	0x24009af4
 801021c:	24009af0 	.word	0x24009af0
 8010220:	24009b00 	.word	0x24009b00

08010224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801022c:	4b28      	ldr	r3, [pc, #160]	@ (80102d0 <prvInsertBlockIntoFreeList+0xac>)
 801022e:	60fb      	str	r3, [r7, #12]
 8010230:	e002      	b.n	8010238 <prvInsertBlockIntoFreeList+0x14>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	429a      	cmp	r2, r3
 8010240:	d8f7      	bhi.n	8010232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	4413      	add	r3, r2
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	429a      	cmp	r2, r3
 8010252:	d108      	bne.n	8010266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	685a      	ldr	r2, [r3, #4]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	441a      	add	r2, r3
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	441a      	add	r2, r3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d118      	bne.n	80102ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	4b15      	ldr	r3, [pc, #84]	@ (80102d4 <prvInsertBlockIntoFreeList+0xb0>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	d00d      	beq.n	80102a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	441a      	add	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	601a      	str	r2, [r3, #0]
 80102a0:	e008      	b.n	80102b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102a2:	4b0c      	ldr	r3, [pc, #48]	@ (80102d4 <prvInsertBlockIntoFreeList+0xb0>)
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	e003      	b.n	80102b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102b4:	68fa      	ldr	r2, [r7, #12]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d002      	beq.n	80102c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102c2:	bf00      	nop
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	24009ae4 	.word	0x24009ae4
 80102d4:	24009aec 	.word	0x24009aec

080102d8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80102e2:	f007 fb95 	bl	8017a10 <sys_timeouts_sleeptime>
 80102e6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ee:	d10b      	bne.n	8010308 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80102f0:	4813      	ldr	r0, [pc, #76]	@ (8010340 <tcpip_timeouts_mbox_fetch+0x68>)
 80102f2:	f00c fac4 	bl	801c87e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80102f6:	2200      	movs	r2, #0
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f00c fa4c 	bl	801c798 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010300:	480f      	ldr	r0, [pc, #60]	@ (8010340 <tcpip_timeouts_mbox_fetch+0x68>)
 8010302:	f00c faad 	bl	801c860 <sys_mutex_lock>
    return;
 8010306:	e018      	b.n	801033a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d102      	bne.n	8010314 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801030e:	f007 fb45 	bl	801799c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010312:	e7e6      	b.n	80102e2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010314:	480a      	ldr	r0, [pc, #40]	@ (8010340 <tcpip_timeouts_mbox_fetch+0x68>)
 8010316:	f00c fab2 	bl	801c87e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f00c fa3a 	bl	801c798 <sys_arch_mbox_fetch>
 8010324:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010326:	4806      	ldr	r0, [pc, #24]	@ (8010340 <tcpip_timeouts_mbox_fetch+0x68>)
 8010328:	f00c fa9a 	bl	801c860 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010332:	d102      	bne.n	801033a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010334:	f007 fb32 	bl	801799c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010338:	e7d3      	b.n	80102e2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	24009b10 	.word	0x24009b10

08010344 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801034c:	4810      	ldr	r0, [pc, #64]	@ (8010390 <tcpip_thread+0x4c>)
 801034e:	f00c fa87 	bl	801c860 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010352:	4b10      	ldr	r3, [pc, #64]	@ (8010394 <tcpip_thread+0x50>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d005      	beq.n	8010366 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801035a:	4b0e      	ldr	r3, [pc, #56]	@ (8010394 <tcpip_thread+0x50>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a0e      	ldr	r2, [pc, #56]	@ (8010398 <tcpip_thread+0x54>)
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	4610      	mov	r0, r2
 8010364:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010366:	f107 030c 	add.w	r3, r7, #12
 801036a:	4619      	mov	r1, r3
 801036c:	480b      	ldr	r0, [pc, #44]	@ (801039c <tcpip_thread+0x58>)
 801036e:	f7ff ffb3 	bl	80102d8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d106      	bne.n	8010386 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010378:	4b09      	ldr	r3, [pc, #36]	@ (80103a0 <tcpip_thread+0x5c>)
 801037a:	2291      	movs	r2, #145	@ 0x91
 801037c:	4909      	ldr	r1, [pc, #36]	@ (80103a4 <tcpip_thread+0x60>)
 801037e:	480a      	ldr	r0, [pc, #40]	@ (80103a8 <tcpip_thread+0x64>)
 8010380:	f00d f800 	bl	801d384 <iprintf>
      continue;
 8010384:	e003      	b.n	801038e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	4618      	mov	r0, r3
 801038a:	f000 f80f 	bl	80103ac <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801038e:	e7ea      	b.n	8010366 <tcpip_thread+0x22>
 8010390:	24009b10 	.word	0x24009b10
 8010394:	24009b04 	.word	0x24009b04
 8010398:	24009b08 	.word	0x24009b08
 801039c:	24009b0c 	.word	0x24009b0c
 80103a0:	0801f5a8 	.word	0x0801f5a8
 80103a4:	0801f5d8 	.word	0x0801f5d8
 80103a8:	0801f5f8 	.word	0x0801f5f8

080103ac <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d026      	beq.n	801040a <tcpip_thread_handle_msg+0x5e>
 80103bc:	2b02      	cmp	r3, #2
 80103be:	dc2b      	bgt.n	8010418 <tcpip_thread_handle_msg+0x6c>
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <tcpip_thread_handle_msg+0x1e>
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d015      	beq.n	80103f4 <tcpip_thread_handle_msg+0x48>
 80103c8:	e026      	b.n	8010418 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	6850      	ldr	r0, [r2, #4]
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	6892      	ldr	r2, [r2, #8]
 80103d6:	4611      	mov	r1, r2
 80103d8:	4798      	blx	r3
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f001 fdcf 	bl	8011f88 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80103ea:	6879      	ldr	r1, [r7, #4]
 80103ec:	2009      	movs	r0, #9
 80103ee:	f000 ff1b 	bl	8011228 <memp_free>
      break;
 80103f2:	e018      	b.n	8010426 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	6892      	ldr	r2, [r2, #8]
 80103fc:	4610      	mov	r0, r2
 80103fe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010400:	6879      	ldr	r1, [r7, #4]
 8010402:	2008      	movs	r0, #8
 8010404:	f000 ff10 	bl	8011228 <memp_free>
      break;
 8010408:	e00d      	b.n	8010426 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	6892      	ldr	r2, [r2, #8]
 8010412:	4610      	mov	r0, r2
 8010414:	4798      	blx	r3
      break;
 8010416:	e006      	b.n	8010426 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010418:	4b05      	ldr	r3, [pc, #20]	@ (8010430 <tcpip_thread_handle_msg+0x84>)
 801041a:	22cf      	movs	r2, #207	@ 0xcf
 801041c:	4905      	ldr	r1, [pc, #20]	@ (8010434 <tcpip_thread_handle_msg+0x88>)
 801041e:	4806      	ldr	r0, [pc, #24]	@ (8010438 <tcpip_thread_handle_msg+0x8c>)
 8010420:	f00c ffb0 	bl	801d384 <iprintf>
      break;
 8010424:	bf00      	nop
  }
}
 8010426:	bf00      	nop
 8010428:	3708      	adds	r7, #8
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	0801f5a8 	.word	0x0801f5a8
 8010434:	0801f5d8 	.word	0x0801f5d8
 8010438:	0801f5f8 	.word	0x0801f5f8

0801043c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010448:	481a      	ldr	r0, [pc, #104]	@ (80104b4 <tcpip_inpkt+0x78>)
 801044a:	f00c f9d6 	bl	801c7fa <sys_mbox_valid>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d105      	bne.n	8010460 <tcpip_inpkt+0x24>
 8010454:	4b18      	ldr	r3, [pc, #96]	@ (80104b8 <tcpip_inpkt+0x7c>)
 8010456:	22fc      	movs	r2, #252	@ 0xfc
 8010458:	4918      	ldr	r1, [pc, #96]	@ (80104bc <tcpip_inpkt+0x80>)
 801045a:	4819      	ldr	r0, [pc, #100]	@ (80104c0 <tcpip_inpkt+0x84>)
 801045c:	f00c ff92 	bl	801d384 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010460:	2009      	movs	r0, #9
 8010462:	f000 fe6b 	bl	801113c <memp_malloc>
 8010466:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d102      	bne.n	8010474 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801046e:	f04f 33ff 	mov.w	r3, #4294967295
 8010472:	e01a      	b.n	80104aa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	68ba      	ldr	r2, [r7, #8]
 8010484:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801048c:	6979      	ldr	r1, [r7, #20]
 801048e:	4809      	ldr	r0, [pc, #36]	@ (80104b4 <tcpip_inpkt+0x78>)
 8010490:	f00c f968 	bl	801c764 <sys_mbox_trypost>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d006      	beq.n	80104a8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801049a:	6979      	ldr	r1, [r7, #20]
 801049c:	2009      	movs	r0, #9
 801049e:	f000 fec3 	bl	8011228 <memp_free>
    return ERR_MEM;
 80104a2:	f04f 33ff 	mov.w	r3, #4294967295
 80104a6:	e000      	b.n	80104aa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80104a8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	24009b0c 	.word	0x24009b0c
 80104b8:	0801f5a8 	.word	0x0801f5a8
 80104bc:	0801f620 	.word	0x0801f620
 80104c0:	0801f5f8 	.word	0x0801f5f8

080104c4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80104d4:	f003 0318 	and.w	r3, r3, #24
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d006      	beq.n	80104ea <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80104dc:	4a08      	ldr	r2, [pc, #32]	@ (8010500 <tcpip_input+0x3c>)
 80104de:	6839      	ldr	r1, [r7, #0]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff ffab 	bl	801043c <tcpip_inpkt>
 80104e6:	4603      	mov	r3, r0
 80104e8:	e005      	b.n	80104f6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80104ea:	4a06      	ldr	r2, [pc, #24]	@ (8010504 <tcpip_input+0x40>)
 80104ec:	6839      	ldr	r1, [r7, #0]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff ffa4 	bl	801043c <tcpip_inpkt>
 80104f4:	4603      	mov	r3, r0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	0801c585 	.word	0x0801c585
 8010504:	0801b451 	.word	0x0801b451

08010508 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010512:	4819      	ldr	r0, [pc, #100]	@ (8010578 <tcpip_try_callback+0x70>)
 8010514:	f00c f971 	bl	801c7fa <sys_mbox_valid>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d106      	bne.n	801052c <tcpip_try_callback+0x24>
 801051e:	4b17      	ldr	r3, [pc, #92]	@ (801057c <tcpip_try_callback+0x74>)
 8010520:	f240 125d 	movw	r2, #349	@ 0x15d
 8010524:	4916      	ldr	r1, [pc, #88]	@ (8010580 <tcpip_try_callback+0x78>)
 8010526:	4817      	ldr	r0, [pc, #92]	@ (8010584 <tcpip_try_callback+0x7c>)
 8010528:	f00c ff2c 	bl	801d384 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801052c:	2008      	movs	r0, #8
 801052e:	f000 fe05 	bl	801113c <memp_malloc>
 8010532:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d102      	bne.n	8010540 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801053a:	f04f 33ff 	mov.w	r3, #4294967295
 801053e:	e017      	b.n	8010570 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2201      	movs	r2, #1
 8010544:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	683a      	ldr	r2, [r7, #0]
 8010550:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010552:	68f9      	ldr	r1, [r7, #12]
 8010554:	4808      	ldr	r0, [pc, #32]	@ (8010578 <tcpip_try_callback+0x70>)
 8010556:	f00c f905 	bl	801c764 <sys_mbox_trypost>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d006      	beq.n	801056e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010560:	68f9      	ldr	r1, [r7, #12]
 8010562:	2008      	movs	r0, #8
 8010564:	f000 fe60 	bl	8011228 <memp_free>
    return ERR_MEM;
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	e000      	b.n	8010570 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3710      	adds	r7, #16
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	24009b0c 	.word	0x24009b0c
 801057c:	0801f5a8 	.word	0x0801f5a8
 8010580:	0801f620 	.word	0x0801f620
 8010584:	0801f5f8 	.word	0x0801f5f8

08010588 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af02      	add	r7, sp, #8
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010592:	f000 f92d 	bl	80107f0 <lwip_init>

  tcpip_init_done = initfunc;
 8010596:	4a17      	ldr	r2, [pc, #92]	@ (80105f4 <tcpip_init+0x6c>)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801059c:	4a16      	ldr	r2, [pc, #88]	@ (80105f8 <tcpip_init+0x70>)
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80105a2:	2106      	movs	r1, #6
 80105a4:	4815      	ldr	r0, [pc, #84]	@ (80105fc <tcpip_init+0x74>)
 80105a6:	f00c f8c3 	bl	801c730 <sys_mbox_new>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d006      	beq.n	80105be <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80105b0:	4b13      	ldr	r3, [pc, #76]	@ (8010600 <tcpip_init+0x78>)
 80105b2:	f240 2261 	movw	r2, #609	@ 0x261
 80105b6:	4913      	ldr	r1, [pc, #76]	@ (8010604 <tcpip_init+0x7c>)
 80105b8:	4813      	ldr	r0, [pc, #76]	@ (8010608 <tcpip_init+0x80>)
 80105ba:	f00c fee3 	bl	801d384 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80105be:	4813      	ldr	r0, [pc, #76]	@ (801060c <tcpip_init+0x84>)
 80105c0:	f00c f938 	bl	801c834 <sys_mutex_new>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d006      	beq.n	80105d8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80105ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010600 <tcpip_init+0x78>)
 80105cc:	f240 2265 	movw	r2, #613	@ 0x265
 80105d0:	490f      	ldr	r1, [pc, #60]	@ (8010610 <tcpip_init+0x88>)
 80105d2:	480d      	ldr	r0, [pc, #52]	@ (8010608 <tcpip_init+0x80>)
 80105d4:	f00c fed6 	bl	801d384 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80105d8:	2318      	movs	r3, #24
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105e0:	2200      	movs	r2, #0
 80105e2:	490c      	ldr	r1, [pc, #48]	@ (8010614 <tcpip_init+0x8c>)
 80105e4:	480c      	ldr	r0, [pc, #48]	@ (8010618 <tcpip_init+0x90>)
 80105e6:	f00c f957 	bl	801c898 <sys_thread_new>
}
 80105ea:	bf00      	nop
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	24009b04 	.word	0x24009b04
 80105f8:	24009b08 	.word	0x24009b08
 80105fc:	24009b0c 	.word	0x24009b0c
 8010600:	0801f5a8 	.word	0x0801f5a8
 8010604:	0801f630 	.word	0x0801f630
 8010608:	0801f5f8 	.word	0x0801f5f8
 801060c:	24009b10 	.word	0x24009b10
 8010610:	0801f654 	.word	0x0801f654
 8010614:	08010345 	.word	0x08010345
 8010618:	0801f678 	.word	0x0801f678

0801061c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	4603      	mov	r3, r0
 8010624:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010626:	88fb      	ldrh	r3, [r7, #6]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	b21a      	sxth	r2, r3
 801062c:	88fb      	ldrh	r3, [r7, #6]
 801062e:	0a1b      	lsrs	r3, r3, #8
 8010630:	b29b      	uxth	r3, r3
 8010632:	b21b      	sxth	r3, r3
 8010634:	4313      	orrs	r3, r2
 8010636:	b21b      	sxth	r3, r3
 8010638:	b29b      	uxth	r3, r3
}
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	061a      	lsls	r2, r3, #24
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	021b      	lsls	r3, r3, #8
 8010656:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801065a:	431a      	orrs	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	0a1b      	lsrs	r3, r3, #8
 8010660:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010664:	431a      	orrs	r2, r3
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	0e1b      	lsrs	r3, r3, #24
 801066a:	4313      	orrs	r3, r2
}
 801066c:	4618      	mov	r0, r3
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010678:	b480      	push	{r7}
 801067a:	b089      	sub	sp, #36	@ 0x24
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00d      	beq.n	80106b8 <lwip_standard_chksum+0x40>
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	dd0a      	ble.n	80106b8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	1c53      	adds	r3, r2, #1
 80106a6:	61fb      	str	r3, [r7, #28]
 80106a8:	f107 030e 	add.w	r3, r7, #14
 80106ac:	3301      	adds	r3, #1
 80106ae:	7812      	ldrb	r2, [r2, #0]
 80106b0:	701a      	strb	r2, [r3, #0]
    len--;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80106bc:	e00a      	b.n	80106d4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	1c9a      	adds	r2, r3, #2
 80106c2:	61ba      	str	r2, [r7, #24]
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	4413      	add	r3, r2
 80106cc:	617b      	str	r3, [r7, #20]
    len -= 2;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	3b02      	subs	r3, #2
 80106d2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	dcf1      	bgt.n	80106be <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	dd04      	ble.n	80106ea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80106e0:	f107 030e 	add.w	r3, r7, #14
 80106e4:	69ba      	ldr	r2, [r7, #24]
 80106e6:	7812      	ldrb	r2, [r2, #0]
 80106e8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	461a      	mov	r2, r3
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	4413      	add	r3, r2
 80106f2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	0c1a      	lsrs	r2, r3, #16
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	4413      	add	r3, r2
 80106fe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	0c1a      	lsrs	r2, r3, #16
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	b29b      	uxth	r3, r3
 8010708:	4413      	add	r3, r2
 801070a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d007      	beq.n	8010722 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	b29a      	uxth	r2, r3
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	0a1b      	lsrs	r3, r3, #8
 801071c:	b2db      	uxtb	r3, r3
 801071e:	4313      	orrs	r3, r2
 8010720:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	b29b      	uxth	r3, r3
}
 8010726:	4618      	mov	r0, r3
 8010728:	3724      	adds	r7, #36	@ 0x24
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr

08010732 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b082      	sub	sp, #8
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	460b      	mov	r3, r1
 801073c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801073e:	887b      	ldrh	r3, [r7, #2]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ff98 	bl	8010678 <lwip_standard_chksum>
 8010748:	4603      	mov	r3, r0
 801074a:	43db      	mvns	r3, r3
 801074c:	b29b      	uxth	r3, r3
}
 801074e:	4618      	mov	r0, r3
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b086      	sub	sp, #24
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	613b      	str	r3, [r7, #16]
 801076a:	e02b      	b.n	80107c4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	895b      	ldrh	r3, [r3, #10]
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7ff ff7e 	bl	8010678 <lwip_standard_chksum>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	4413      	add	r3, r2
 8010784:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	0c1a      	lsrs	r2, r3, #16
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	b29b      	uxth	r3, r3
 801078e:	4413      	add	r3, r2
 8010790:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	895b      	ldrh	r3, [r3, #10]
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	b29b      	uxth	r3, r3
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00e      	beq.n	80107be <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	bf0c      	ite	eq
 80107a6:	2301      	moveq	r3, #1
 80107a8:	2300      	movne	r3, #0
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	021b      	lsls	r3, r3, #8
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	0a1b      	lsrs	r3, r3, #8
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	4313      	orrs	r3, r2
 80107bc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	613b      	str	r3, [r7, #16]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1d0      	bne.n	801076c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d007      	beq.n	80107e0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	021b      	lsls	r3, r3, #8
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	0a1b      	lsrs	r3, r3, #8
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	4313      	orrs	r3, r2
 80107de:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	43db      	mvns	r3, r3
 80107e6:	b29b      	uxth	r3, r3
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3718      	adds	r7, #24
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80107f6:	2300      	movs	r3, #0
 80107f8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80107fa:	f00c f80f 	bl	801c81c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80107fe:	f000 f8d5 	bl	80109ac <mem_init>
  memp_init();
 8010802:	f000 fc2d 	bl	8011060 <memp_init>
  pbuf_init();
  netif_init();
 8010806:	f000 fd39 	bl	801127c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801080a:	f007 f939 	bl	8017a80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801080e:	f001 fe65 	bl	80124dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010812:	f007 f87b 	bl	801790c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010816:	bf00      	nop
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
	...

08010820 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	4603      	mov	r3, r0
 8010828:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801082a:	4b05      	ldr	r3, [pc, #20]	@ (8010840 <ptr_to_mem+0x20>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	88fb      	ldrh	r3, [r7, #6]
 8010830:	4413      	add	r3, r2
}
 8010832:	4618      	mov	r0, r3
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	24009b2c 	.word	0x24009b2c

08010844 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801084c:	4b05      	ldr	r3, [pc, #20]	@ (8010864 <mem_to_ptr+0x20>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29b      	uxth	r3, r3
}
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	24009b2c 	.word	0x24009b2c

08010868 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010870:	4b45      	ldr	r3, [pc, #276]	@ (8010988 <plug_holes+0x120>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	429a      	cmp	r2, r3
 8010878:	d206      	bcs.n	8010888 <plug_holes+0x20>
 801087a:	4b44      	ldr	r3, [pc, #272]	@ (801098c <plug_holes+0x124>)
 801087c:	f240 12df 	movw	r2, #479	@ 0x1df
 8010880:	4943      	ldr	r1, [pc, #268]	@ (8010990 <plug_holes+0x128>)
 8010882:	4844      	ldr	r0, [pc, #272]	@ (8010994 <plug_holes+0x12c>)
 8010884:	f00c fd7e 	bl	801d384 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010888:	4b43      	ldr	r3, [pc, #268]	@ (8010998 <plug_holes+0x130>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	429a      	cmp	r2, r3
 8010890:	d306      	bcc.n	80108a0 <plug_holes+0x38>
 8010892:	4b3e      	ldr	r3, [pc, #248]	@ (801098c <plug_holes+0x124>)
 8010894:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010898:	4940      	ldr	r1, [pc, #256]	@ (801099c <plug_holes+0x134>)
 801089a:	483e      	ldr	r0, [pc, #248]	@ (8010994 <plug_holes+0x12c>)
 801089c:	f00c fd72 	bl	801d384 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	791b      	ldrb	r3, [r3, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d006      	beq.n	80108b6 <plug_holes+0x4e>
 80108a8:	4b38      	ldr	r3, [pc, #224]	@ (801098c <plug_holes+0x124>)
 80108aa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80108ae:	493c      	ldr	r1, [pc, #240]	@ (80109a0 <plug_holes+0x138>)
 80108b0:	4838      	ldr	r0, [pc, #224]	@ (8010994 <plug_holes+0x12c>)
 80108b2:	f00c fd67 	bl	801d384 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80108be:	d906      	bls.n	80108ce <plug_holes+0x66>
 80108c0:	4b32      	ldr	r3, [pc, #200]	@ (801098c <plug_holes+0x124>)
 80108c2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80108c6:	4937      	ldr	r1, [pc, #220]	@ (80109a4 <plug_holes+0x13c>)
 80108c8:	4832      	ldr	r0, [pc, #200]	@ (8010994 <plug_holes+0x12c>)
 80108ca:	f00c fd5b 	bl	801d384 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7ff ffa4 	bl	8010820 <ptr_to_mem>
 80108d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d024      	beq.n	801092c <plug_holes+0xc4>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	791b      	ldrb	r3, [r3, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d120      	bne.n	801092c <plug_holes+0xc4>
 80108ea:	4b2b      	ldr	r3, [pc, #172]	@ (8010998 <plug_holes+0x130>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d01b      	beq.n	801092c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80108f4:	4b2c      	ldr	r3, [pc, #176]	@ (80109a8 <plug_holes+0x140>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d102      	bne.n	8010904 <plug_holes+0x9c>
      lfree = mem;
 80108fe:	4a2a      	ldr	r2, [pc, #168]	@ (80109a8 <plug_holes+0x140>)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	881a      	ldrh	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010914:	d00a      	beq.n	801092c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff ff80 	bl	8010820 <ptr_to_mem>
 8010920:	4604      	mov	r4, r0
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff ff8e 	bl	8010844 <mem_to_ptr>
 8010928:	4603      	mov	r3, r0
 801092a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	885b      	ldrh	r3, [r3, #2]
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff ff75 	bl	8010820 <ptr_to_mem>
 8010936:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	429a      	cmp	r2, r3
 801093e:	d01f      	beq.n	8010980 <plug_holes+0x118>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	791b      	ldrb	r3, [r3, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d11b      	bne.n	8010980 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010948:	4b17      	ldr	r3, [pc, #92]	@ (80109a8 <plug_holes+0x140>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	429a      	cmp	r2, r3
 8010950:	d102      	bne.n	8010958 <plug_holes+0xf0>
      lfree = pmem;
 8010952:	4a15      	ldr	r2, [pc, #84]	@ (80109a8 <plug_holes+0x140>)
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	881a      	ldrh	r2, [r3, #0]
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010968:	d00a      	beq.n	8010980 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff ff56 	bl	8010820 <ptr_to_mem>
 8010974:	4604      	mov	r4, r0
 8010976:	68b8      	ldr	r0, [r7, #8]
 8010978:	f7ff ff64 	bl	8010844 <mem_to_ptr>
 801097c:	4603      	mov	r3, r0
 801097e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010980:	bf00      	nop
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	bd90      	pop	{r4, r7, pc}
 8010988:	24009b2c 	.word	0x24009b2c
 801098c:	0801f688 	.word	0x0801f688
 8010990:	0801f6b8 	.word	0x0801f6b8
 8010994:	0801f6d0 	.word	0x0801f6d0
 8010998:	24009b30 	.word	0x24009b30
 801099c:	0801f6f8 	.word	0x0801f6f8
 80109a0:	0801f714 	.word	0x0801f714
 80109a4:	0801f730 	.word	0x0801f730
 80109a8:	24009b38 	.word	0x24009b38

080109ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80109b2:	4b1d      	ldr	r3, [pc, #116]	@ (8010a28 <mem_init+0x7c>)
 80109b4:	4a1d      	ldr	r2, [pc, #116]	@ (8010a2c <mem_init+0x80>)
 80109b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80109b8:	4b1b      	ldr	r3, [pc, #108]	@ (8010a28 <mem_init+0x7c>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80109c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80109d2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80109d6:	f7ff ff23 	bl	8010820 <ptr_to_mem>
 80109da:	4603      	mov	r3, r0
 80109dc:	4a14      	ldr	r2, [pc, #80]	@ (8010a30 <mem_init+0x84>)
 80109de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80109e0:	4b13      	ldr	r3, [pc, #76]	@ (8010a30 <mem_init+0x84>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2201      	movs	r2, #1
 80109e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80109e8:	4b11      	ldr	r3, [pc, #68]	@ (8010a30 <mem_init+0x84>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80109f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80109f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010a30 <mem_init+0x84>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80109fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80109fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010a28 <mem_init+0x7c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a0c      	ldr	r2, [pc, #48]	@ (8010a34 <mem_init+0x88>)
 8010a02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010a04:	480c      	ldr	r0, [pc, #48]	@ (8010a38 <mem_init+0x8c>)
 8010a06:	f00b ff15 	bl	801c834 <sys_mutex_new>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d006      	beq.n	8010a1e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010a10:	4b0a      	ldr	r3, [pc, #40]	@ (8010a3c <mem_init+0x90>)
 8010a12:	f240 221f 	movw	r2, #543	@ 0x21f
 8010a16:	490a      	ldr	r1, [pc, #40]	@ (8010a40 <mem_init+0x94>)
 8010a18:	480a      	ldr	r0, [pc, #40]	@ (8010a44 <mem_init+0x98>)
 8010a1a:	f00c fcb3 	bl	801d384 <iprintf>
  }
}
 8010a1e:	bf00      	nop
 8010a20:	3708      	adds	r7, #8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	24009b2c 	.word	0x24009b2c
 8010a2c:	30004000 	.word	0x30004000
 8010a30:	24009b30 	.word	0x24009b30
 8010a34:	24009b38 	.word	0x24009b38
 8010a38:	24009b34 	.word	0x24009b34
 8010a3c:	0801f688 	.word	0x0801f688
 8010a40:	0801f75c 	.word	0x0801f75c
 8010a44:	0801f6d0 	.word	0x0801f6d0

08010a48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7ff fef7 	bl	8010844 <mem_to_ptr>
 8010a56:	4603      	mov	r3, r0
 8010a58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff fede 	bl	8010820 <ptr_to_mem>
 8010a64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	885b      	ldrh	r3, [r3, #2]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ff fed8 	bl	8010820 <ptr_to_mem>
 8010a70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010a7a:	d818      	bhi.n	8010aae <mem_link_valid+0x66>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	885b      	ldrh	r3, [r3, #2]
 8010a80:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010a84:	d813      	bhi.n	8010aae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010a8a:	8afa      	ldrh	r2, [r7, #22]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d004      	beq.n	8010a9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	881b      	ldrh	r3, [r3, #0]
 8010a94:	8afa      	ldrh	r2, [r7, #22]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d109      	bne.n	8010aae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010a9a:	4b08      	ldr	r3, [pc, #32]	@ (8010abc <mem_link_valid+0x74>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d006      	beq.n	8010ab2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	885b      	ldrh	r3, [r3, #2]
 8010aa8:	8afa      	ldrh	r2, [r7, #22]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d001      	beq.n	8010ab2 <mem_link_valid+0x6a>
    return 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e000      	b.n	8010ab4 <mem_link_valid+0x6c>
  }
  return 1;
 8010ab2:	2301      	movs	r3, #1
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3718      	adds	r7, #24
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	24009b30 	.word	0x24009b30

08010ac0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b088      	sub	sp, #32
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d070      	beq.n	8010bb0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f003 0303 	and.w	r3, r3, #3
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00d      	beq.n	8010af4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010ad8:	4b37      	ldr	r3, [pc, #220]	@ (8010bb8 <mem_free+0xf8>)
 8010ada:	f240 2273 	movw	r2, #627	@ 0x273
 8010ade:	4937      	ldr	r1, [pc, #220]	@ (8010bbc <mem_free+0xfc>)
 8010ae0:	4837      	ldr	r0, [pc, #220]	@ (8010bc0 <mem_free+0x100>)
 8010ae2:	f00c fc4f 	bl	801d384 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010ae6:	f00b fef7 	bl	801c8d8 <sys_arch_protect>
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f00b ff01 	bl	801c8f4 <sys_arch_unprotect>
    return;
 8010af2:	e05e      	b.n	8010bb2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	3b08      	subs	r3, #8
 8010af8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010afa:	4b32      	ldr	r3, [pc, #200]	@ (8010bc4 <mem_free+0x104>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	69fa      	ldr	r2, [r7, #28]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d306      	bcc.n	8010b12 <mem_free+0x52>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f103 020c 	add.w	r2, r3, #12
 8010b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010bc8 <mem_free+0x108>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d90d      	bls.n	8010b2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010b12:	4b29      	ldr	r3, [pc, #164]	@ (8010bb8 <mem_free+0xf8>)
 8010b14:	f240 227f 	movw	r2, #639	@ 0x27f
 8010b18:	492c      	ldr	r1, [pc, #176]	@ (8010bcc <mem_free+0x10c>)
 8010b1a:	4829      	ldr	r0, [pc, #164]	@ (8010bc0 <mem_free+0x100>)
 8010b1c:	f00c fc32 	bl	801d384 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b20:	f00b feda 	bl	801c8d8 <sys_arch_protect>
 8010b24:	6138      	str	r0, [r7, #16]
 8010b26:	6938      	ldr	r0, [r7, #16]
 8010b28:	f00b fee4 	bl	801c8f4 <sys_arch_unprotect>
    return;
 8010b2c:	e041      	b.n	8010bb2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010b2e:	4828      	ldr	r0, [pc, #160]	@ (8010bd0 <mem_free+0x110>)
 8010b30:	f00b fe96 	bl	801c860 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	791b      	ldrb	r3, [r3, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d110      	bne.n	8010b5e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8010bb8 <mem_free+0xf8>)
 8010b3e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010b42:	4924      	ldr	r1, [pc, #144]	@ (8010bd4 <mem_free+0x114>)
 8010b44:	481e      	ldr	r0, [pc, #120]	@ (8010bc0 <mem_free+0x100>)
 8010b46:	f00c fc1d 	bl	801d384 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010b4a:	4821      	ldr	r0, [pc, #132]	@ (8010bd0 <mem_free+0x110>)
 8010b4c:	f00b fe97 	bl	801c87e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b50:	f00b fec2 	bl	801c8d8 <sys_arch_protect>
 8010b54:	6178      	str	r0, [r7, #20]
 8010b56:	6978      	ldr	r0, [r7, #20]
 8010b58:	f00b fecc 	bl	801c8f4 <sys_arch_unprotect>
    return;
 8010b5c:	e029      	b.n	8010bb2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010b5e:	69f8      	ldr	r0, [r7, #28]
 8010b60:	f7ff ff72 	bl	8010a48 <mem_link_valid>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d110      	bne.n	8010b8c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010b6a:	4b13      	ldr	r3, [pc, #76]	@ (8010bb8 <mem_free+0xf8>)
 8010b6c:	f240 2295 	movw	r2, #661	@ 0x295
 8010b70:	4919      	ldr	r1, [pc, #100]	@ (8010bd8 <mem_free+0x118>)
 8010b72:	4813      	ldr	r0, [pc, #76]	@ (8010bc0 <mem_free+0x100>)
 8010b74:	f00c fc06 	bl	801d384 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010b78:	4815      	ldr	r0, [pc, #84]	@ (8010bd0 <mem_free+0x110>)
 8010b7a:	f00b fe80 	bl	801c87e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b7e:	f00b feab 	bl	801c8d8 <sys_arch_protect>
 8010b82:	61b8      	str	r0, [r7, #24]
 8010b84:	69b8      	ldr	r0, [r7, #24]
 8010b86:	f00b feb5 	bl	801c8f4 <sys_arch_unprotect>
    return;
 8010b8a:	e012      	b.n	8010bb2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010b92:	4b12      	ldr	r3, [pc, #72]	@ (8010bdc <mem_free+0x11c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	69fa      	ldr	r2, [r7, #28]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d202      	bcs.n	8010ba2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8010bdc <mem_free+0x11c>)
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010ba2:	69f8      	ldr	r0, [r7, #28]
 8010ba4:	f7ff fe60 	bl	8010868 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010ba8:	4809      	ldr	r0, [pc, #36]	@ (8010bd0 <mem_free+0x110>)
 8010baa:	f00b fe68 	bl	801c87e <sys_mutex_unlock>
 8010bae:	e000      	b.n	8010bb2 <mem_free+0xf2>
    return;
 8010bb0:	bf00      	nop
}
 8010bb2:	3720      	adds	r7, #32
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801f688 	.word	0x0801f688
 8010bbc:	0801f778 	.word	0x0801f778
 8010bc0:	0801f6d0 	.word	0x0801f6d0
 8010bc4:	24009b2c 	.word	0x24009b2c
 8010bc8:	24009b30 	.word	0x24009b30
 8010bcc:	0801f79c 	.word	0x0801f79c
 8010bd0:	24009b34 	.word	0x24009b34
 8010bd4:	0801f7b8 	.word	0x0801f7b8
 8010bd8:	0801f7e0 	.word	0x0801f7e0
 8010bdc:	24009b38 	.word	0x24009b38

08010be0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010bec:	887b      	ldrh	r3, [r7, #2]
 8010bee:	3303      	adds	r3, #3
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	f023 0303 	bic.w	r3, r3, #3
 8010bf6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010bf8:	8bfb      	ldrh	r3, [r7, #30]
 8010bfa:	2b0b      	cmp	r3, #11
 8010bfc:	d801      	bhi.n	8010c02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010bfe:	230c      	movs	r3, #12
 8010c00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010c02:	8bfb      	ldrh	r3, [r7, #30]
 8010c04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010c08:	d803      	bhi.n	8010c12 <mem_trim+0x32>
 8010c0a:	8bfa      	ldrh	r2, [r7, #30]
 8010c0c:	887b      	ldrh	r3, [r7, #2]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d201      	bcs.n	8010c16 <mem_trim+0x36>
    return NULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e0d8      	b.n	8010dc8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010c16:	4b6e      	ldr	r3, [pc, #440]	@ (8010dd0 <mem_trim+0x1f0>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d304      	bcc.n	8010c2a <mem_trim+0x4a>
 8010c20:	4b6c      	ldr	r3, [pc, #432]	@ (8010dd4 <mem_trim+0x1f4>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d306      	bcc.n	8010c38 <mem_trim+0x58>
 8010c2a:	4b6b      	ldr	r3, [pc, #428]	@ (8010dd8 <mem_trim+0x1f8>)
 8010c2c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010c30:	496a      	ldr	r1, [pc, #424]	@ (8010ddc <mem_trim+0x1fc>)
 8010c32:	486b      	ldr	r0, [pc, #428]	@ (8010de0 <mem_trim+0x200>)
 8010c34:	f00c fba6 	bl	801d384 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010c38:	4b65      	ldr	r3, [pc, #404]	@ (8010dd0 <mem_trim+0x1f0>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d304      	bcc.n	8010c4c <mem_trim+0x6c>
 8010c42:	4b64      	ldr	r3, [pc, #400]	@ (8010dd4 <mem_trim+0x1f4>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d307      	bcc.n	8010c5c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c4c:	f00b fe44 	bl	801c8d8 <sys_arch_protect>
 8010c50:	60b8      	str	r0, [r7, #8]
 8010c52:	68b8      	ldr	r0, [r7, #8]
 8010c54:	f00b fe4e 	bl	801c8f4 <sys_arch_unprotect>
    return rmem;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	e0b5      	b.n	8010dc8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	3b08      	subs	r3, #8
 8010c60:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010c62:	69b8      	ldr	r0, [r7, #24]
 8010c64:	f7ff fdee 	bl	8010844 <mem_to_ptr>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	881a      	ldrh	r2, [r3, #0]
 8010c70:	8afb      	ldrh	r3, [r7, #22]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	3b08      	subs	r3, #8
 8010c78:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010c7a:	8bfa      	ldrh	r2, [r7, #30]
 8010c7c:	8abb      	ldrh	r3, [r7, #20]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d906      	bls.n	8010c90 <mem_trim+0xb0>
 8010c82:	4b55      	ldr	r3, [pc, #340]	@ (8010dd8 <mem_trim+0x1f8>)
 8010c84:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010c88:	4956      	ldr	r1, [pc, #344]	@ (8010de4 <mem_trim+0x204>)
 8010c8a:	4855      	ldr	r0, [pc, #340]	@ (8010de0 <mem_trim+0x200>)
 8010c8c:	f00c fb7a 	bl	801d384 <iprintf>
  if (newsize > size) {
 8010c90:	8bfa      	ldrh	r2, [r7, #30]
 8010c92:	8abb      	ldrh	r3, [r7, #20]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d901      	bls.n	8010c9c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e095      	b.n	8010dc8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010c9c:	8bfa      	ldrh	r2, [r7, #30]
 8010c9e:	8abb      	ldrh	r3, [r7, #20]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d101      	bne.n	8010ca8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	e08f      	b.n	8010dc8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010ca8:	484f      	ldr	r0, [pc, #316]	@ (8010de8 <mem_trim+0x208>)
 8010caa:	f00b fdd9 	bl	801c860 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010cae:	69bb      	ldr	r3, [r7, #24]
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff fdb4 	bl	8010820 <ptr_to_mem>
 8010cb8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	791b      	ldrb	r3, [r3, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d13f      	bne.n	8010d42 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010cca:	d106      	bne.n	8010cda <mem_trim+0xfa>
 8010ccc:	4b42      	ldr	r3, [pc, #264]	@ (8010dd8 <mem_trim+0x1f8>)
 8010cce:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010cd2:	4946      	ldr	r1, [pc, #280]	@ (8010dec <mem_trim+0x20c>)
 8010cd4:	4842      	ldr	r0, [pc, #264]	@ (8010de0 <mem_trim+0x200>)
 8010cd6:	f00c fb55 	bl	801d384 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010ce0:	8afa      	ldrh	r2, [r7, #22]
 8010ce2:	8bfb      	ldrh	r3, [r7, #30]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	3308      	adds	r3, #8
 8010cea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010cec:	4b40      	ldr	r3, [pc, #256]	@ (8010df0 <mem_trim+0x210>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	693a      	ldr	r2, [r7, #16]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d106      	bne.n	8010d04 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010cf6:	89fb      	ldrh	r3, [r7, #14]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ff fd91 	bl	8010820 <ptr_to_mem>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	4a3b      	ldr	r2, [pc, #236]	@ (8010df0 <mem_trim+0x210>)
 8010d02:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010d04:	89fb      	ldrh	r3, [r7, #14]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff fd8a 	bl	8010820 <ptr_to_mem>
 8010d0c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2200      	movs	r2, #0
 8010d12:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	89ba      	ldrh	r2, [r7, #12]
 8010d18:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	8afa      	ldrh	r2, [r7, #22]
 8010d1e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	89fa      	ldrh	r2, [r7, #14]
 8010d24:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	881b      	ldrh	r3, [r3, #0]
 8010d2a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d2e:	d047      	beq.n	8010dc0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7ff fd73 	bl	8010820 <ptr_to_mem>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	89fb      	ldrh	r3, [r7, #14]
 8010d3e:	8053      	strh	r3, [r2, #2]
 8010d40:	e03e      	b.n	8010dc0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010d42:	8bfb      	ldrh	r3, [r7, #30]
 8010d44:	f103 0214 	add.w	r2, r3, #20
 8010d48:	8abb      	ldrh	r3, [r7, #20]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d838      	bhi.n	8010dc0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d4e:	8afa      	ldrh	r2, [r7, #22]
 8010d50:	8bfb      	ldrh	r3, [r7, #30]
 8010d52:	4413      	add	r3, r2
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	3308      	adds	r3, #8
 8010d58:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d62:	d106      	bne.n	8010d72 <mem_trim+0x192>
 8010d64:	4b1c      	ldr	r3, [pc, #112]	@ (8010dd8 <mem_trim+0x1f8>)
 8010d66:	f240 3216 	movw	r2, #790	@ 0x316
 8010d6a:	4920      	ldr	r1, [pc, #128]	@ (8010dec <mem_trim+0x20c>)
 8010d6c:	481c      	ldr	r0, [pc, #112]	@ (8010de0 <mem_trim+0x200>)
 8010d6e:	f00c fb09 	bl	801d384 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010d72:	89fb      	ldrh	r3, [r7, #14]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff fd53 	bl	8010820 <ptr_to_mem>
 8010d7a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8010df0 <mem_trim+0x210>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d202      	bcs.n	8010d8c <mem_trim+0x1ac>
      lfree = mem2;
 8010d86:	4a1a      	ldr	r2, [pc, #104]	@ (8010df0 <mem_trim+0x210>)
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	881a      	ldrh	r2, [r3, #0]
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	8afa      	ldrh	r2, [r7, #22]
 8010d9e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	89fa      	ldrh	r2, [r7, #14]
 8010da4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010dae:	d007      	beq.n	8010dc0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fd33 	bl	8010820 <ptr_to_mem>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	89fb      	ldrh	r3, [r7, #14]
 8010dbe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010dc0:	4809      	ldr	r0, [pc, #36]	@ (8010de8 <mem_trim+0x208>)
 8010dc2:	f00b fd5c 	bl	801c87e <sys_mutex_unlock>
  return rmem;
 8010dc6:	687b      	ldr	r3, [r7, #4]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3720      	adds	r7, #32
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	24009b2c 	.word	0x24009b2c
 8010dd4:	24009b30 	.word	0x24009b30
 8010dd8:	0801f688 	.word	0x0801f688
 8010ddc:	0801f814 	.word	0x0801f814
 8010de0:	0801f6d0 	.word	0x0801f6d0
 8010de4:	0801f82c 	.word	0x0801f82c
 8010de8:	24009b34 	.word	0x24009b34
 8010dec:	0801f84c 	.word	0x0801f84c
 8010df0:	24009b38 	.word	0x24009b38

08010df4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010dfe:	88fb      	ldrh	r3, [r7, #6]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d101      	bne.n	8010e08 <mem_malloc+0x14>
    return NULL;
 8010e04:	2300      	movs	r3, #0
 8010e06:	e0e2      	b.n	8010fce <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010e08:	88fb      	ldrh	r3, [r7, #6]
 8010e0a:	3303      	adds	r3, #3
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	f023 0303 	bic.w	r3, r3, #3
 8010e12:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010e14:	8bbb      	ldrh	r3, [r7, #28]
 8010e16:	2b0b      	cmp	r3, #11
 8010e18:	d801      	bhi.n	8010e1e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010e1a:	230c      	movs	r3, #12
 8010e1c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010e1e:	8bbb      	ldrh	r3, [r7, #28]
 8010e20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e24:	d803      	bhi.n	8010e2e <mem_malloc+0x3a>
 8010e26:	8bba      	ldrh	r2, [r7, #28]
 8010e28:	88fb      	ldrh	r3, [r7, #6]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d201      	bcs.n	8010e32 <mem_malloc+0x3e>
    return NULL;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	e0cd      	b.n	8010fce <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010e32:	4869      	ldr	r0, [pc, #420]	@ (8010fd8 <mem_malloc+0x1e4>)
 8010e34:	f00b fd14 	bl	801c860 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010e38:	4b68      	ldr	r3, [pc, #416]	@ (8010fdc <mem_malloc+0x1e8>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fd01 	bl	8010844 <mem_to_ptr>
 8010e42:	4603      	mov	r3, r0
 8010e44:	83fb      	strh	r3, [r7, #30]
 8010e46:	e0b7      	b.n	8010fb8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010e48:	8bfb      	ldrh	r3, [r7, #30]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff fce8 	bl	8010820 <ptr_to_mem>
 8010e50:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	791b      	ldrb	r3, [r3, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f040 80a7 	bne.w	8010faa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	881b      	ldrh	r3, [r3, #0]
 8010e60:	461a      	mov	r2, r3
 8010e62:	8bfb      	ldrh	r3, [r7, #30]
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	f1a3 0208 	sub.w	r2, r3, #8
 8010e6a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	f0c0 809c 	bcc.w	8010faa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	461a      	mov	r2, r3
 8010e78:	8bfb      	ldrh	r3, [r7, #30]
 8010e7a:	1ad3      	subs	r3, r2, r3
 8010e7c:	f1a3 0208 	sub.w	r2, r3, #8
 8010e80:	8bbb      	ldrh	r3, [r7, #28]
 8010e82:	3314      	adds	r3, #20
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d333      	bcc.n	8010ef0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010e88:	8bfa      	ldrh	r2, [r7, #30]
 8010e8a:	8bbb      	ldrh	r3, [r7, #28]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	3308      	adds	r3, #8
 8010e92:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010e94:	8a7b      	ldrh	r3, [r7, #18]
 8010e96:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e9a:	d106      	bne.n	8010eaa <mem_malloc+0xb6>
 8010e9c:	4b50      	ldr	r3, [pc, #320]	@ (8010fe0 <mem_malloc+0x1ec>)
 8010e9e:	f240 3287 	movw	r2, #903	@ 0x387
 8010ea2:	4950      	ldr	r1, [pc, #320]	@ (8010fe4 <mem_malloc+0x1f0>)
 8010ea4:	4850      	ldr	r0, [pc, #320]	@ (8010fe8 <mem_malloc+0x1f4>)
 8010ea6:	f00c fa6d 	bl	801d384 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010eaa:	8a7b      	ldrh	r3, [r7, #18]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff fcb7 	bl	8010820 <ptr_to_mem>
 8010eb2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	881a      	ldrh	r2, [r3, #0]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	8bfa      	ldrh	r2, [r7, #30]
 8010ec6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	8a7a      	ldrh	r2, [r7, #18]
 8010ecc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010edc:	d00b      	beq.n	8010ef6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7ff fc9c 	bl	8010820 <ptr_to_mem>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	8a7b      	ldrh	r3, [r7, #18]
 8010eec:	8053      	strh	r3, [r2, #2]
 8010eee:	e002      	b.n	8010ef6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010ef6:	4b39      	ldr	r3, [pc, #228]	@ (8010fdc <mem_malloc+0x1e8>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	697a      	ldr	r2, [r7, #20]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d127      	bne.n	8010f50 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010f00:	4b36      	ldr	r3, [pc, #216]	@ (8010fdc <mem_malloc+0x1e8>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010f06:	e005      	b.n	8010f14 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	881b      	ldrh	r3, [r3, #0]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff fc87 	bl	8010820 <ptr_to_mem>
 8010f12:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	791b      	ldrb	r3, [r3, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <mem_malloc+0x132>
 8010f1c:	4b33      	ldr	r3, [pc, #204]	@ (8010fec <mem_malloc+0x1f8>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	69ba      	ldr	r2, [r7, #24]
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d1f0      	bne.n	8010f08 <mem_malloc+0x114>
          }
          lfree = cur;
 8010f26:	4a2d      	ldr	r2, [pc, #180]	@ (8010fdc <mem_malloc+0x1e8>)
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8010fdc <mem_malloc+0x1e8>)
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	4b2e      	ldr	r3, [pc, #184]	@ (8010fec <mem_malloc+0x1f8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d00b      	beq.n	8010f50 <mem_malloc+0x15c>
 8010f38:	4b28      	ldr	r3, [pc, #160]	@ (8010fdc <mem_malloc+0x1e8>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	791b      	ldrb	r3, [r3, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d006      	beq.n	8010f50 <mem_malloc+0x15c>
 8010f42:	4b27      	ldr	r3, [pc, #156]	@ (8010fe0 <mem_malloc+0x1ec>)
 8010f44:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010f48:	4929      	ldr	r1, [pc, #164]	@ (8010ff0 <mem_malloc+0x1fc>)
 8010f4a:	4827      	ldr	r0, [pc, #156]	@ (8010fe8 <mem_malloc+0x1f4>)
 8010f4c:	f00c fa1a 	bl	801d384 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010f50:	4821      	ldr	r0, [pc, #132]	@ (8010fd8 <mem_malloc+0x1e4>)
 8010f52:	f00b fc94 	bl	801c87e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010f56:	8bba      	ldrh	r2, [r7, #28]
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	4a23      	ldr	r2, [pc, #140]	@ (8010fec <mem_malloc+0x1f8>)
 8010f60:	6812      	ldr	r2, [r2, #0]
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d906      	bls.n	8010f74 <mem_malloc+0x180>
 8010f66:	4b1e      	ldr	r3, [pc, #120]	@ (8010fe0 <mem_malloc+0x1ec>)
 8010f68:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010f6c:	4921      	ldr	r1, [pc, #132]	@ (8010ff4 <mem_malloc+0x200>)
 8010f6e:	481e      	ldr	r0, [pc, #120]	@ (8010fe8 <mem_malloc+0x1f4>)
 8010f70:	f00c fa08 	bl	801d384 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	f003 0303 	and.w	r3, r3, #3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d006      	beq.n	8010f8c <mem_malloc+0x198>
 8010f7e:	4b18      	ldr	r3, [pc, #96]	@ (8010fe0 <mem_malloc+0x1ec>)
 8010f80:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010f84:	491c      	ldr	r1, [pc, #112]	@ (8010ff8 <mem_malloc+0x204>)
 8010f86:	4818      	ldr	r0, [pc, #96]	@ (8010fe8 <mem_malloc+0x1f4>)
 8010f88:	f00c f9fc 	bl	801d384 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	f003 0303 	and.w	r3, r3, #3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d006      	beq.n	8010fa4 <mem_malloc+0x1b0>
 8010f96:	4b12      	ldr	r3, [pc, #72]	@ (8010fe0 <mem_malloc+0x1ec>)
 8010f98:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010f9c:	4917      	ldr	r1, [pc, #92]	@ (8010ffc <mem_malloc+0x208>)
 8010f9e:	4812      	ldr	r0, [pc, #72]	@ (8010fe8 <mem_malloc+0x1f4>)
 8010fa0:	f00c f9f0 	bl	801d384 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	3308      	adds	r3, #8
 8010fa8:	e011      	b.n	8010fce <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010faa:	8bfb      	ldrh	r3, [r7, #30]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fc37 	bl	8010820 <ptr_to_mem>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	881b      	ldrh	r3, [r3, #0]
 8010fb6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010fb8:	8bfa      	ldrh	r2, [r7, #30]
 8010fba:	8bbb      	ldrh	r3, [r7, #28]
 8010fbc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	f4ff af41 	bcc.w	8010e48 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010fc6:	4804      	ldr	r0, [pc, #16]	@ (8010fd8 <mem_malloc+0x1e4>)
 8010fc8:	f00b fc59 	bl	801c87e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3720      	adds	r7, #32
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	24009b34 	.word	0x24009b34
 8010fdc:	24009b38 	.word	0x24009b38
 8010fe0:	0801f688 	.word	0x0801f688
 8010fe4:	0801f84c 	.word	0x0801f84c
 8010fe8:	0801f6d0 	.word	0x0801f6d0
 8010fec:	24009b30 	.word	0x24009b30
 8010ff0:	0801f860 	.word	0x0801f860
 8010ff4:	0801f87c 	.word	0x0801f87c
 8010ff8:	0801f8ac 	.word	0x0801f8ac
 8010ffc:	0801f8dc 	.word	0x0801f8dc

08011000 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	2200      	movs	r2, #0
 801100e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	3303      	adds	r3, #3
 8011016:	f023 0303 	bic.w	r3, r3, #3
 801101a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801101c:	2300      	movs	r3, #0
 801101e:	60fb      	str	r3, [r7, #12]
 8011020:	e011      	b.n	8011046 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	689b      	ldr	r3, [r3, #8]
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689b      	ldr	r3, [r3, #8]
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	461a      	mov	r2, r3
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	4413      	add	r3, r2
 801103e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	3301      	adds	r3, #1
 8011044:	60fb      	str	r3, [r7, #12]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	885b      	ldrh	r3, [r3, #2]
 801104a:	461a      	mov	r2, r3
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	4293      	cmp	r3, r2
 8011050:	dbe7      	blt.n	8011022 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011052:	bf00      	nop
 8011054:	bf00      	nop
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011066:	2300      	movs	r3, #0
 8011068:	80fb      	strh	r3, [r7, #6]
 801106a:	e009      	b.n	8011080 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801106c:	88fb      	ldrh	r3, [r7, #6]
 801106e:	4a08      	ldr	r2, [pc, #32]	@ (8011090 <memp_init+0x30>)
 8011070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff ffc3 	bl	8011000 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801107a:	88fb      	ldrh	r3, [r7, #6]
 801107c:	3301      	adds	r3, #1
 801107e:	80fb      	strh	r3, [r7, #6]
 8011080:	88fb      	ldrh	r3, [r7, #6]
 8011082:	2b0c      	cmp	r3, #12
 8011084:	d9f2      	bls.n	801106c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011086:	bf00      	nop
 8011088:	bf00      	nop
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0802253c 	.word	0x0802253c

08011094 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801109c:	f00b fc1c 	bl	801c8d8 <sys_arch_protect>
 80110a0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d015      	beq.n	80110dc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	6812      	ldr	r2, [r2, #0]
 80110b8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	f003 0303 	and.w	r3, r3, #3
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d006      	beq.n	80110d2 <do_memp_malloc_pool+0x3e>
 80110c4:	4b09      	ldr	r3, [pc, #36]	@ (80110ec <do_memp_malloc_pool+0x58>)
 80110c6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80110ca:	4909      	ldr	r1, [pc, #36]	@ (80110f0 <do_memp_malloc_pool+0x5c>)
 80110cc:	4809      	ldr	r0, [pc, #36]	@ (80110f4 <do_memp_malloc_pool+0x60>)
 80110ce:	f00c f959 	bl	801d384 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f00b fc0e 	bl	801c8f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	e003      	b.n	80110e4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f00b fc09 	bl	801c8f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	0801f900 	.word	0x0801f900
 80110f0:	0801f930 	.word	0x0801f930
 80110f4:	0801f954 	.word	0x0801f954

080110f8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d106      	bne.n	8011114 <memp_malloc_pool+0x1c>
 8011106:	4b0a      	ldr	r3, [pc, #40]	@ (8011130 <memp_malloc_pool+0x38>)
 8011108:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801110c:	4909      	ldr	r1, [pc, #36]	@ (8011134 <memp_malloc_pool+0x3c>)
 801110e:	480a      	ldr	r0, [pc, #40]	@ (8011138 <memp_malloc_pool+0x40>)
 8011110:	f00c f938 	bl	801d384 <iprintf>
  if (desc == NULL) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <memp_malloc_pool+0x26>
    return NULL;
 801111a:	2300      	movs	r3, #0
 801111c:	e003      	b.n	8011126 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7ff ffb8 	bl	8011094 <do_memp_malloc_pool>
 8011124:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011126:	4618      	mov	r0, r3
 8011128:	3708      	adds	r7, #8
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	0801f900 	.word	0x0801f900
 8011134:	0801f97c 	.word	0x0801f97c
 8011138:	0801f954 	.word	0x0801f954

0801113c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	2b0c      	cmp	r3, #12
 801114a:	d908      	bls.n	801115e <memp_malloc+0x22>
 801114c:	4b0a      	ldr	r3, [pc, #40]	@ (8011178 <memp_malloc+0x3c>)
 801114e:	f240 1257 	movw	r2, #343	@ 0x157
 8011152:	490a      	ldr	r1, [pc, #40]	@ (801117c <memp_malloc+0x40>)
 8011154:	480a      	ldr	r0, [pc, #40]	@ (8011180 <memp_malloc+0x44>)
 8011156:	f00c f915 	bl	801d384 <iprintf>
 801115a:	2300      	movs	r3, #0
 801115c:	e008      	b.n	8011170 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	4a08      	ldr	r2, [pc, #32]	@ (8011184 <memp_malloc+0x48>)
 8011162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff ff94 	bl	8011094 <do_memp_malloc_pool>
 801116c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801116e:	68fb      	ldr	r3, [r7, #12]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	0801f900 	.word	0x0801f900
 801117c:	0801f990 	.word	0x0801f990
 8011180:	0801f954 	.word	0x0801f954
 8011184:	0802253c 	.word	0x0802253c

08011188 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	f003 0303 	and.w	r3, r3, #3
 8011198:	2b00      	cmp	r3, #0
 801119a:	d006      	beq.n	80111aa <do_memp_free_pool+0x22>
 801119c:	4b0d      	ldr	r3, [pc, #52]	@ (80111d4 <do_memp_free_pool+0x4c>)
 801119e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80111a2:	490d      	ldr	r1, [pc, #52]	@ (80111d8 <do_memp_free_pool+0x50>)
 80111a4:	480d      	ldr	r0, [pc, #52]	@ (80111dc <do_memp_free_pool+0x54>)
 80111a6:	f00c f8ed 	bl	801d384 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80111ae:	f00b fb93 	bl	801c8d8 <sys_arch_protect>
 80111b2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	689b      	ldr	r3, [r3, #8]
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80111c6:	68b8      	ldr	r0, [r7, #8]
 80111c8:	f00b fb94 	bl	801c8f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80111cc:	bf00      	nop
 80111ce:	3710      	adds	r7, #16
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	0801f900 	.word	0x0801f900
 80111d8:	0801f9b0 	.word	0x0801f9b0
 80111dc:	0801f954 	.word	0x0801f954

080111e0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d106      	bne.n	80111fe <memp_free_pool+0x1e>
 80111f0:	4b0a      	ldr	r3, [pc, #40]	@ (801121c <memp_free_pool+0x3c>)
 80111f2:	f240 1295 	movw	r2, #405	@ 0x195
 80111f6:	490a      	ldr	r1, [pc, #40]	@ (8011220 <memp_free_pool+0x40>)
 80111f8:	480a      	ldr	r0, [pc, #40]	@ (8011224 <memp_free_pool+0x44>)
 80111fa:	f00c f8c3 	bl	801d384 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d007      	beq.n	8011214 <memp_free_pool+0x34>
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d004      	beq.n	8011214 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801120a:	6839      	ldr	r1, [r7, #0]
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ffbb 	bl	8011188 <do_memp_free_pool>
 8011212:	e000      	b.n	8011216 <memp_free_pool+0x36>
    return;
 8011214:	bf00      	nop
}
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	0801f900 	.word	0x0801f900
 8011220:	0801f97c 	.word	0x0801f97c
 8011224:	0801f954 	.word	0x0801f954

08011228 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	4603      	mov	r3, r0
 8011230:	6039      	str	r1, [r7, #0]
 8011232:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011234:	79fb      	ldrb	r3, [r7, #7]
 8011236:	2b0c      	cmp	r3, #12
 8011238:	d907      	bls.n	801124a <memp_free+0x22>
 801123a:	4b0c      	ldr	r3, [pc, #48]	@ (801126c <memp_free+0x44>)
 801123c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011240:	490b      	ldr	r1, [pc, #44]	@ (8011270 <memp_free+0x48>)
 8011242:	480c      	ldr	r0, [pc, #48]	@ (8011274 <memp_free+0x4c>)
 8011244:	f00c f89e 	bl	801d384 <iprintf>
 8011248:	e00c      	b.n	8011264 <memp_free+0x3c>

  if (mem == NULL) {
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d008      	beq.n	8011262 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011250:	79fb      	ldrb	r3, [r7, #7]
 8011252:	4a09      	ldr	r2, [pc, #36]	@ (8011278 <memp_free+0x50>)
 8011254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff ff94 	bl	8011188 <do_memp_free_pool>
 8011260:	e000      	b.n	8011264 <memp_free+0x3c>
    return;
 8011262:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	0801f900 	.word	0x0801f900
 8011270:	0801f9d0 	.word	0x0801f9d0
 8011274:	0801f954 	.word	0x0801f954
 8011278:	0802253c 	.word	0x0802253c

0801127c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801127c:	b480      	push	{r7}
 801127e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011280:	bf00      	nop
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
	...

0801128c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b086      	sub	sp, #24
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
 8011298:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d108      	bne.n	80112b2 <netif_add+0x26>
 80112a0:	4b5b      	ldr	r3, [pc, #364]	@ (8011410 <netif_add+0x184>)
 80112a2:	f240 1227 	movw	r2, #295	@ 0x127
 80112a6:	495b      	ldr	r1, [pc, #364]	@ (8011414 <netif_add+0x188>)
 80112a8:	485b      	ldr	r0, [pc, #364]	@ (8011418 <netif_add+0x18c>)
 80112aa:	f00c f86b 	bl	801d384 <iprintf>
 80112ae:	2300      	movs	r3, #0
 80112b0:	e0a9      	b.n	8011406 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80112b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d108      	bne.n	80112ca <netif_add+0x3e>
 80112b8:	4b55      	ldr	r3, [pc, #340]	@ (8011410 <netif_add+0x184>)
 80112ba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80112be:	4957      	ldr	r1, [pc, #348]	@ (801141c <netif_add+0x190>)
 80112c0:	4855      	ldr	r0, [pc, #340]	@ (8011418 <netif_add+0x18c>)
 80112c2:	f00c f85f 	bl	801d384 <iprintf>
 80112c6:	2300      	movs	r3, #0
 80112c8:	e09d      	b.n	8011406 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d101      	bne.n	80112d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80112d0:	4b53      	ldr	r3, [pc, #332]	@ (8011420 <netif_add+0x194>)
 80112d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d101      	bne.n	80112de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80112da:	4b51      	ldr	r3, [pc, #324]	@ (8011420 <netif_add+0x194>)
 80112dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80112e4:	4b4e      	ldr	r3, [pc, #312]	@ (8011420 <netif_add+0x194>)
 80112e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2200      	movs	r2, #0
 80112ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2200      	movs	r2, #0
 80112f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2200      	movs	r2, #0
 80112f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	4a49      	ldr	r2, [pc, #292]	@ (8011424 <netif_add+0x198>)
 80112fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	2200      	movs	r2, #0
 8011304:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	3324      	adds	r3, #36	@ 0x24
 8011312:	2204      	movs	r2, #4
 8011314:	2100      	movs	r1, #0
 8011316:	4618      	mov	r0, r3
 8011318:	f00c f98c 	bl	801d634 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6a3a      	ldr	r2, [r7, #32]
 8011326:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011328:	4b3f      	ldr	r3, [pc, #252]	@ (8011428 <netif_add+0x19c>)
 801132a:	781a      	ldrb	r2, [r3, #0]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011336:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	68b9      	ldr	r1, [r7, #8]
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f000 f914 	bl	801156c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	4798      	blx	r3
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <netif_add+0xc8>
    return NULL;
 8011350:	2300      	movs	r3, #0
 8011352:	e058      	b.n	8011406 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801135a:	2bff      	cmp	r3, #255	@ 0xff
 801135c:	d103      	bne.n	8011366 <netif_add+0xda>
        netif->num = 0;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2200      	movs	r2, #0
 8011362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8011366:	2300      	movs	r3, #0
 8011368:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801136a:	4b30      	ldr	r3, [pc, #192]	@ (801142c <netif_add+0x1a0>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	617b      	str	r3, [r7, #20]
 8011370:	e02b      	b.n	80113ca <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011372:	697a      	ldr	r2, [r7, #20]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	429a      	cmp	r2, r3
 8011378:	d106      	bne.n	8011388 <netif_add+0xfc>
 801137a:	4b25      	ldr	r3, [pc, #148]	@ (8011410 <netif_add+0x184>)
 801137c:	f240 128b 	movw	r2, #395	@ 0x18b
 8011380:	492b      	ldr	r1, [pc, #172]	@ (8011430 <netif_add+0x1a4>)
 8011382:	4825      	ldr	r0, [pc, #148]	@ (8011418 <netif_add+0x18c>)
 8011384:	f00b fffe 	bl	801d384 <iprintf>
        num_netifs++;
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	3301      	adds	r3, #1
 801138c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2bff      	cmp	r3, #255	@ 0xff
 8011392:	dd06      	ble.n	80113a2 <netif_add+0x116>
 8011394:	4b1e      	ldr	r3, [pc, #120]	@ (8011410 <netif_add+0x184>)
 8011396:	f240 128d 	movw	r2, #397	@ 0x18d
 801139a:	4926      	ldr	r1, [pc, #152]	@ (8011434 <netif_add+0x1a8>)
 801139c:	481e      	ldr	r0, [pc, #120]	@ (8011418 <netif_add+0x18c>)
 801139e:	f00b fff1 	bl	801d384 <iprintf>
        if (netif2->num == netif->num) {
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d108      	bne.n	80113c4 <netif_add+0x138>
          netif->num++;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113b8:	3301      	adds	r3, #1
 80113ba:	b2da      	uxtb	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80113c2:	e005      	b.n	80113d0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	617b      	str	r3, [r7, #20]
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1d0      	bne.n	8011372 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d1be      	bne.n	8011354 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80113de:	d103      	bne.n	80113e8 <netif_add+0x15c>
    netif_num = 0;
 80113e0:	4b11      	ldr	r3, [pc, #68]	@ (8011428 <netif_add+0x19c>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
 80113e6:	e006      	b.n	80113f6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113ee:	3301      	adds	r3, #1
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011428 <netif_add+0x19c>)
 80113f4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80113f6:	4b0d      	ldr	r3, [pc, #52]	@ (801142c <netif_add+0x1a0>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80113fe:	4a0b      	ldr	r2, [pc, #44]	@ (801142c <netif_add+0x1a0>)
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011404:	68fb      	ldr	r3, [r7, #12]
}
 8011406:	4618      	mov	r0, r3
 8011408:	3718      	adds	r7, #24
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0801f9ec 	.word	0x0801f9ec
 8011414:	0801fa80 	.word	0x0801fa80
 8011418:	0801fa3c 	.word	0x0801fa3c
 801141c:	0801fa9c 	.word	0x0801fa9c
 8011420:	080225c0 	.word	0x080225c0
 8011424:	0801184f 	.word	0x0801184f
 8011428:	2400cc30 	.word	0x2400cc30
 801142c:	2400cc28 	.word	0x2400cc28
 8011430:	0801fac0 	.word	0x0801fac0
 8011434:	0801fad4 	.word	0x0801fad4

08011438 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011442:	6839      	ldr	r1, [r7, #0]
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f002 fb93 	bl	8013b70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801144a:	6839      	ldr	r1, [r7, #0]
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f006 ffa3 	bl	8018398 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011452:	bf00      	nop
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
	...

0801145c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b086      	sub	sp, #24
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <netif_do_set_ipaddr+0x20>
 801146e:	4b1d      	ldr	r3, [pc, #116]	@ (80114e4 <netif_do_set_ipaddr+0x88>)
 8011470:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011474:	491c      	ldr	r1, [pc, #112]	@ (80114e8 <netif_do_set_ipaddr+0x8c>)
 8011476:	481d      	ldr	r0, [pc, #116]	@ (80114ec <netif_do_set_ipaddr+0x90>)
 8011478:	f00b ff84 	bl	801d384 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d106      	bne.n	8011490 <netif_do_set_ipaddr+0x34>
 8011482:	4b18      	ldr	r3, [pc, #96]	@ (80114e4 <netif_do_set_ipaddr+0x88>)
 8011484:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011488:	4917      	ldr	r1, [pc, #92]	@ (80114e8 <netif_do_set_ipaddr+0x8c>)
 801148a:	4818      	ldr	r0, [pc, #96]	@ (80114ec <netif_do_set_ipaddr+0x90>)
 801148c:	f00b ff7a 	bl	801d384 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	3304      	adds	r3, #4
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	429a      	cmp	r2, r3
 801149c:	d01c      	beq.n	80114d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	3304      	adds	r3, #4
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80114ae:	f107 0314 	add.w	r3, r7, #20
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7ff ffbf 	bl	8011438 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <netif_do_set_ipaddr+0x6a>
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	e000      	b.n	80114c8 <netif_do_set_ipaddr+0x6c>
 80114c6:	2300      	movs	r3, #0
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80114cc:	2101      	movs	r1, #1
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f000 f8d2 	bl	8011678 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80114d4:	2301      	movs	r3, #1
 80114d6:	e000      	b.n	80114da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3718      	adds	r7, #24
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	bf00      	nop
 80114e4:	0801f9ec 	.word	0x0801f9ec
 80114e8:	0801fb04 	.word	0x0801fb04
 80114ec:	0801fa3c 	.word	0x0801fa3c

080114f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	3308      	adds	r3, #8
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	429a      	cmp	r2, r3
 8011508:	d00a      	beq.n	8011520 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d002      	beq.n	8011516 <netif_do_set_netmask+0x26>
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	e000      	b.n	8011518 <netif_do_set_netmask+0x28>
 8011516:	2300      	movs	r3, #0
 8011518:	68fa      	ldr	r2, [r7, #12]
 801151a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801151c:	2301      	movs	r3, #1
 801151e:	e000      	b.n	8011522 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801152e:	b480      	push	{r7}
 8011530:	b085      	sub	sp, #20
 8011532:	af00      	add	r7, sp, #0
 8011534:	60f8      	str	r0, [r7, #12]
 8011536:	60b9      	str	r1, [r7, #8]
 8011538:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	330c      	adds	r3, #12
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	429a      	cmp	r2, r3
 8011546:	d00a      	beq.n	801155e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <netif_do_set_gw+0x26>
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	e000      	b.n	8011556 <netif_do_set_gw+0x28>
 8011554:	2300      	movs	r3, #0
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801155a:	2301      	movs	r3, #1
 801155c:	e000      	b.n	8011560 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	3714      	adds	r7, #20
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
 8011578:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801157a:	2300      	movs	r3, #0
 801157c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801157e:	2300      	movs	r3, #0
 8011580:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d101      	bne.n	801158c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011588:	4b1c      	ldr	r3, [pc, #112]	@ (80115fc <netif_set_addr+0x90>)
 801158a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d101      	bne.n	8011596 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011592:	4b1a      	ldr	r3, [pc, #104]	@ (80115fc <netif_set_addr+0x90>)
 8011594:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801159c:	4b17      	ldr	r3, [pc, #92]	@ (80115fc <netif_set_addr+0x90>)
 801159e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <netif_set_addr+0x42>
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <netif_set_addr+0x46>
 80115ae:	2301      	movs	r3, #1
 80115b0:	e000      	b.n	80115b4 <netif_set_addr+0x48>
 80115b2:	2300      	movs	r3, #0
 80115b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80115bc:	f107 0310 	add.w	r3, r7, #16
 80115c0:	461a      	mov	r2, r3
 80115c2:	68b9      	ldr	r1, [r7, #8]
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f7ff ff49 	bl	801145c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80115ca:	69fa      	ldr	r2, [r7, #28]
 80115cc:	6879      	ldr	r1, [r7, #4]
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f7ff ff8e 	bl	80114f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80115d4:	69ba      	ldr	r2, [r7, #24]
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f7ff ffa8 	bl	801152e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d106      	bne.n	80115f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80115e4:	f107 0310 	add.w	r3, r7, #16
 80115e8:	461a      	mov	r2, r3
 80115ea:	68b9      	ldr	r1, [r7, #8]
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f7ff ff35 	bl	801145c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80115f2:	bf00      	nop
 80115f4:	3720      	adds	r7, #32
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	080225c0 	.word	0x080225c0

08011600 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011608:	4a04      	ldr	r2, [pc, #16]	@ (801161c <netif_set_default+0x1c>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801160e:	bf00      	nop
 8011610:	370c      	adds	r7, #12
 8011612:	46bd      	mov	sp, r7
 8011614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	2400cc2c 	.word	0x2400cc2c

08011620 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d107      	bne.n	801163e <netif_set_up+0x1e>
 801162e:	4b0f      	ldr	r3, [pc, #60]	@ (801166c <netif_set_up+0x4c>)
 8011630:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011634:	490e      	ldr	r1, [pc, #56]	@ (8011670 <netif_set_up+0x50>)
 8011636:	480f      	ldr	r0, [pc, #60]	@ (8011674 <netif_set_up+0x54>)
 8011638:	f00b fea4 	bl	801d384 <iprintf>
 801163c:	e013      	b.n	8011666 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d10c      	bne.n	8011666 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011652:	f043 0301 	orr.w	r3, r3, #1
 8011656:	b2da      	uxtb	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801165e:	2103      	movs	r1, #3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 f809 	bl	8011678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	0801f9ec 	.word	0x0801f9ec
 8011670:	0801fb74 	.word	0x0801fb74
 8011674:	0801fa3c 	.word	0x0801fa3c

08011678 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	460b      	mov	r3, r1
 8011682:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d106      	bne.n	8011698 <netif_issue_reports+0x20>
 801168a:	4b18      	ldr	r3, [pc, #96]	@ (80116ec <netif_issue_reports+0x74>)
 801168c:	f240 326d 	movw	r2, #877	@ 0x36d
 8011690:	4917      	ldr	r1, [pc, #92]	@ (80116f0 <netif_issue_reports+0x78>)
 8011692:	4818      	ldr	r0, [pc, #96]	@ (80116f4 <netif_issue_reports+0x7c>)
 8011694:	f00b fe76 	bl	801d384 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801169e:	f003 0304 	and.w	r3, r3, #4
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d01e      	beq.n	80116e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d017      	beq.n	80116e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	f003 0301 	and.w	r3, r3, #1
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d013      	beq.n	80116e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	3304      	adds	r3, #4
 80116c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00e      	beq.n	80116e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116ce:	f003 0308 	and.w	r3, r3, #8
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d007      	beq.n	80116e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	3304      	adds	r3, #4
 80116da:	4619      	mov	r1, r3
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f009 fc57 	bl	801af90 <etharp_request>
 80116e2:	e000      	b.n	80116e6 <netif_issue_reports+0x6e>
    return;
 80116e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	0801f9ec 	.word	0x0801f9ec
 80116f0:	0801fb90 	.word	0x0801fb90
 80116f4:	0801fa3c 	.word	0x0801fa3c

080116f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d107      	bne.n	8011716 <netif_set_down+0x1e>
 8011706:	4b12      	ldr	r3, [pc, #72]	@ (8011750 <netif_set_down+0x58>)
 8011708:	f240 329b 	movw	r2, #923	@ 0x39b
 801170c:	4911      	ldr	r1, [pc, #68]	@ (8011754 <netif_set_down+0x5c>)
 801170e:	4812      	ldr	r0, [pc, #72]	@ (8011758 <netif_set_down+0x60>)
 8011710:	f00b fe38 	bl	801d384 <iprintf>
 8011714:	e019      	b.n	801174a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801171c:	f003 0301 	and.w	r3, r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	d012      	beq.n	801174a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801172a:	f023 0301 	bic.w	r3, r3, #1
 801172e:	b2da      	uxtb	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801173c:	f003 0308 	and.w	r3, r3, #8
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f008 ffdd 	bl	801a704 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	0801f9ec 	.word	0x0801f9ec
 8011754:	0801fbb4 	.word	0x0801fbb4
 8011758:	0801fa3c 	.word	0x0801fa3c

0801175c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d107      	bne.n	801177a <netif_set_link_up+0x1e>
 801176a:	4b15      	ldr	r3, [pc, #84]	@ (80117c0 <netif_set_link_up+0x64>)
 801176c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011770:	4914      	ldr	r1, [pc, #80]	@ (80117c4 <netif_set_link_up+0x68>)
 8011772:	4815      	ldr	r0, [pc, #84]	@ (80117c8 <netif_set_link_up+0x6c>)
 8011774:	f00b fe06 	bl	801d384 <iprintf>
 8011778:	e01e      	b.n	80117b8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011780:	f003 0304 	and.w	r3, r3, #4
 8011784:	2b00      	cmp	r3, #0
 8011786:	d117      	bne.n	80117b8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801178e:	f043 0304 	orr.w	r3, r3, #4
 8011792:	b2da      	uxtb	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f007 fa28 	bl	8018bf0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80117a0:	2103      	movs	r1, #3
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff ff68 	bl	8011678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	69db      	ldr	r3, [r3, #28]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d003      	beq.n	80117b8 <netif_set_link_up+0x5c>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	0801f9ec 	.word	0x0801f9ec
 80117c4:	0801fbd4 	.word	0x0801fbd4
 80117c8:	0801fa3c 	.word	0x0801fa3c

080117cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d107      	bne.n	80117ea <netif_set_link_down+0x1e>
 80117da:	4b11      	ldr	r3, [pc, #68]	@ (8011820 <netif_set_link_down+0x54>)
 80117dc:	f240 4206 	movw	r2, #1030	@ 0x406
 80117e0:	4910      	ldr	r1, [pc, #64]	@ (8011824 <netif_set_link_down+0x58>)
 80117e2:	4811      	ldr	r0, [pc, #68]	@ (8011828 <netif_set_link_down+0x5c>)
 80117e4:	f00b fdce 	bl	801d384 <iprintf>
 80117e8:	e017      	b.n	801181a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80117f0:	f003 0304 	and.w	r3, r3, #4
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d010      	beq.n	801181a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80117fe:	f023 0304 	bic.w	r3, r3, #4
 8011802:	b2da      	uxtb	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	69db      	ldr	r3, [r3, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d003      	beq.n	801181a <netif_set_link_down+0x4e>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	69db      	ldr	r3, [r3, #28]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	0801f9ec 	.word	0x0801f9ec
 8011824:	0801fbf8 	.word	0x0801fbf8
 8011828:	0801fa3c 	.word	0x0801fa3c

0801182c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	683a      	ldr	r2, [r7, #0]
 8011840:	61da      	str	r2, [r3, #28]
  }
}
 8011842:	bf00      	nop
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801184e:	b480      	push	{r7}
 8011850:	b085      	sub	sp, #20
 8011852:	af00      	add	r7, sp, #0
 8011854:	60f8      	str	r0, [r7, #12]
 8011856:	60b9      	str	r1, [r7, #8]
 8011858:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801185a:	f06f 030b 	mvn.w	r3, #11
}
 801185e:	4618      	mov	r0, r3
 8011860:	3714      	adds	r7, #20
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
	...

0801186c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801186c:	b480      	push	{r7}
 801186e:	b085      	sub	sp, #20
 8011870:	af00      	add	r7, sp, #0
 8011872:	4603      	mov	r3, r0
 8011874:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011876:	79fb      	ldrb	r3, [r7, #7]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d013      	beq.n	80118a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801187c:	4b0d      	ldr	r3, [pc, #52]	@ (80118b4 <netif_get_by_index+0x48>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	e00c      	b.n	801189e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801188a:	3301      	adds	r3, #1
 801188c:	b2db      	uxtb	r3, r3
 801188e:	79fa      	ldrb	r2, [r7, #7]
 8011890:	429a      	cmp	r2, r3
 8011892:	d101      	bne.n	8011898 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	e006      	b.n	80118a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1ef      	bne.n	8011884 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	2400cc28 	.word	0x2400cc28

080118b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80118be:	f00b f80b 	bl	801c8d8 <sys_arch_protect>
 80118c2:	6038      	str	r0, [r7, #0]
 80118c4:	4b0d      	ldr	r3, [pc, #52]	@ (80118fc <pbuf_free_ooseq+0x44>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	701a      	strb	r2, [r3, #0]
 80118ca:	6838      	ldr	r0, [r7, #0]
 80118cc:	f00b f812 	bl	801c8f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80118d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011900 <pbuf_free_ooseq+0x48>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	607b      	str	r3, [r7, #4]
 80118d6:	e00a      	b.n	80118ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d003      	beq.n	80118e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f002 f983 	bl	8013bec <tcp_free_ooseq>
      return;
 80118e6:	e005      	b.n	80118f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	607b      	str	r3, [r7, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1f1      	bne.n	80118d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	2400cc31 	.word	0x2400cc31
 8011900:	2400cc40 	.word	0x2400cc40

08011904 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801190c:	f7ff ffd4 	bl	80118b8 <pbuf_free_ooseq>
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801191e:	f00a ffdb 	bl	801c8d8 <sys_arch_protect>
 8011922:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011924:	4b0f      	ldr	r3, [pc, #60]	@ (8011964 <pbuf_pool_is_empty+0x4c>)
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801192a:	4b0e      	ldr	r3, [pc, #56]	@ (8011964 <pbuf_pool_is_empty+0x4c>)
 801192c:	2201      	movs	r2, #1
 801192e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f00a ffdf 	bl	801c8f4 <sys_arch_unprotect>

  if (!queued) {
 8011936:	78fb      	ldrb	r3, [r7, #3]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d10f      	bne.n	801195c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801193c:	2100      	movs	r1, #0
 801193e:	480a      	ldr	r0, [pc, #40]	@ (8011968 <pbuf_pool_is_empty+0x50>)
 8011940:	f7fe fde2 	bl	8010508 <tcpip_try_callback>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d008      	beq.n	801195c <pbuf_pool_is_empty+0x44>
 801194a:	f00a ffc5 	bl	801c8d8 <sys_arch_protect>
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	4b04      	ldr	r3, [pc, #16]	@ (8011964 <pbuf_pool_is_empty+0x4c>)
 8011952:	2200      	movs	r2, #0
 8011954:	701a      	strb	r2, [r3, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f00a ffcc 	bl	801c8f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	2400cc31 	.word	0x2400cc31
 8011968:	08011905 	.word	0x08011905

0801196c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801196c:	b480      	push	{r7}
 801196e:	b085      	sub	sp, #20
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	60b9      	str	r1, [r7, #8]
 8011976:	4611      	mov	r1, r2
 8011978:	461a      	mov	r2, r3
 801197a:	460b      	mov	r3, r1
 801197c:	80fb      	strh	r3, [r7, #6]
 801197e:	4613      	mov	r3, r2
 8011980:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	88fa      	ldrh	r2, [r7, #6]
 8011992:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	88ba      	ldrh	r2, [r7, #4]
 8011998:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801199a:	8b3b      	ldrh	r3, [r7, #24]
 801199c:	b2da      	uxtb	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	7f3a      	ldrb	r2, [r7, #28]
 80119a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2201      	movs	r2, #1
 80119ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2200      	movs	r2, #0
 80119b2:	73da      	strb	r2, [r3, #15]
}
 80119b4:	bf00      	nop
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08c      	sub	sp, #48	@ 0x30
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	4603      	mov	r3, r0
 80119c8:	71fb      	strb	r3, [r7, #7]
 80119ca:	460b      	mov	r3, r1
 80119cc:	80bb      	strh	r3, [r7, #4]
 80119ce:	4613      	mov	r3, r2
 80119d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80119d2:	79fb      	ldrb	r3, [r7, #7]
 80119d4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80119d6:	887b      	ldrh	r3, [r7, #2]
 80119d8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80119dc:	d07f      	beq.n	8011ade <pbuf_alloc+0x11e>
 80119de:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80119e2:	f300 80c8 	bgt.w	8011b76 <pbuf_alloc+0x1b6>
 80119e6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80119ea:	d010      	beq.n	8011a0e <pbuf_alloc+0x4e>
 80119ec:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80119f0:	f300 80c1 	bgt.w	8011b76 <pbuf_alloc+0x1b6>
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d002      	beq.n	80119fe <pbuf_alloc+0x3e>
 80119f8:	2b41      	cmp	r3, #65	@ 0x41
 80119fa:	f040 80bc 	bne.w	8011b76 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80119fe:	887a      	ldrh	r2, [r7, #2]
 8011a00:	88bb      	ldrh	r3, [r7, #4]
 8011a02:	4619      	mov	r1, r3
 8011a04:	2000      	movs	r0, #0
 8011a06:	f000 f8d1 	bl	8011bac <pbuf_alloc_reference>
 8011a0a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011a0c:	e0bd      	b.n	8011b8a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011a16:	88bb      	ldrh	r3, [r7, #4]
 8011a18:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011a1a:	200c      	movs	r0, #12
 8011a1c:	f7ff fb8e 	bl	801113c <memp_malloc>
 8011a20:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d109      	bne.n	8011a3c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011a28:	f7ff ff76 	bl	8011918 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d002      	beq.n	8011a38 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a34:	f000 faa8 	bl	8011f88 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	e0a7      	b.n	8011b8c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011a3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a3e:	3303      	adds	r3, #3
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	f023 0303 	bic.w	r3, r3, #3
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	8b7a      	ldrh	r2, [r7, #26]
 8011a50:	4293      	cmp	r3, r2
 8011a52:	bf28      	it	cs
 8011a54:	4613      	movcs	r3, r2
 8011a56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011a58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a5a:	3310      	adds	r3, #16
 8011a5c:	693a      	ldr	r2, [r7, #16]
 8011a5e:	4413      	add	r3, r2
 8011a60:	3303      	adds	r3, #3
 8011a62:	f023 0303 	bic.w	r3, r3, #3
 8011a66:	4618      	mov	r0, r3
 8011a68:	89f9      	ldrh	r1, [r7, #14]
 8011a6a:	8b7a      	ldrh	r2, [r7, #26]
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	887b      	ldrh	r3, [r7, #2]
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	460b      	mov	r3, r1
 8011a76:	4601      	mov	r1, r0
 8011a78:	6938      	ldr	r0, [r7, #16]
 8011a7a:	f7ff ff77 	bl	801196c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	f003 0303 	and.w	r3, r3, #3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d006      	beq.n	8011a98 <pbuf_alloc+0xd8>
 8011a8a:	4b42      	ldr	r3, [pc, #264]	@ (8011b94 <pbuf_alloc+0x1d4>)
 8011a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a90:	4941      	ldr	r1, [pc, #260]	@ (8011b98 <pbuf_alloc+0x1d8>)
 8011a92:	4842      	ldr	r0, [pc, #264]	@ (8011b9c <pbuf_alloc+0x1dc>)
 8011a94:	f00b fc76 	bl	801d384 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011a98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a9a:	3303      	adds	r3, #3
 8011a9c:	f023 0303 	bic.w	r3, r3, #3
 8011aa0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011aa4:	d106      	bne.n	8011ab4 <pbuf_alloc+0xf4>
 8011aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8011b94 <pbuf_alloc+0x1d4>)
 8011aa8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011aac:	493c      	ldr	r1, [pc, #240]	@ (8011ba0 <pbuf_alloc+0x1e0>)
 8011aae:	483b      	ldr	r0, [pc, #236]	@ (8011b9c <pbuf_alloc+0x1dc>)
 8011ab0:	f00b fc68 	bl	801d384 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8011abe:	e002      	b.n	8011ac6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	693a      	ldr	r2, [r7, #16]
 8011ac4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011aca:	8b7a      	ldrh	r2, [r7, #26]
 8011acc:	89fb      	ldrh	r3, [r7, #14]
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011ad6:	8b7b      	ldrh	r3, [r7, #26]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d19e      	bne.n	8011a1a <pbuf_alloc+0x5a>
      break;
 8011adc:	e055      	b.n	8011b8a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ae0:	3303      	adds	r3, #3
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	f023 0303 	bic.w	r3, r3, #3
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	88bb      	ldrh	r3, [r7, #4]
 8011aec:	3303      	adds	r3, #3
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	f023 0303 	bic.w	r3, r3, #3
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	4413      	add	r3, r2
 8011af8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011afa:	8b3b      	ldrh	r3, [r7, #24]
 8011afc:	3310      	adds	r3, #16
 8011afe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011b00:	8b3a      	ldrh	r2, [r7, #24]
 8011b02:	88bb      	ldrh	r3, [r7, #4]
 8011b04:	3303      	adds	r3, #3
 8011b06:	f023 0303 	bic.w	r3, r3, #3
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d306      	bcc.n	8011b1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011b0e:	8afa      	ldrh	r2, [r7, #22]
 8011b10:	88bb      	ldrh	r3, [r7, #4]
 8011b12:	3303      	adds	r3, #3
 8011b14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d201      	bcs.n	8011b20 <pbuf_alloc+0x160>
        return NULL;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	e035      	b.n	8011b8c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011b20:	8afb      	ldrh	r3, [r7, #22]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7ff f966 	bl	8010df4 <mem_malloc>
 8011b28:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d101      	bne.n	8011b34 <pbuf_alloc+0x174>
        return NULL;
 8011b30:	2300      	movs	r3, #0
 8011b32:	e02b      	b.n	8011b8c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011b34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b36:	3310      	adds	r3, #16
 8011b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b3a:	4413      	add	r3, r2
 8011b3c:	3303      	adds	r3, #3
 8011b3e:	f023 0303 	bic.w	r3, r3, #3
 8011b42:	4618      	mov	r0, r3
 8011b44:	88b9      	ldrh	r1, [r7, #4]
 8011b46:	88ba      	ldrh	r2, [r7, #4]
 8011b48:	2300      	movs	r3, #0
 8011b4a:	9301      	str	r3, [sp, #4]
 8011b4c:	887b      	ldrh	r3, [r7, #2]
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	460b      	mov	r3, r1
 8011b52:	4601      	mov	r1, r0
 8011b54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b56:	f7ff ff09 	bl	801196c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	f003 0303 	and.w	r3, r3, #3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d010      	beq.n	8011b88 <pbuf_alloc+0x1c8>
 8011b66:	4b0b      	ldr	r3, [pc, #44]	@ (8011b94 <pbuf_alloc+0x1d4>)
 8011b68:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011b6c:	490d      	ldr	r1, [pc, #52]	@ (8011ba4 <pbuf_alloc+0x1e4>)
 8011b6e:	480b      	ldr	r0, [pc, #44]	@ (8011b9c <pbuf_alloc+0x1dc>)
 8011b70:	f00b fc08 	bl	801d384 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011b74:	e008      	b.n	8011b88 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011b76:	4b07      	ldr	r3, [pc, #28]	@ (8011b94 <pbuf_alloc+0x1d4>)
 8011b78:	f240 1227 	movw	r2, #295	@ 0x127
 8011b7c:	490a      	ldr	r1, [pc, #40]	@ (8011ba8 <pbuf_alloc+0x1e8>)
 8011b7e:	4807      	ldr	r0, [pc, #28]	@ (8011b9c <pbuf_alloc+0x1dc>)
 8011b80:	f00b fc00 	bl	801d384 <iprintf>
      return NULL;
 8011b84:	2300      	movs	r3, #0
 8011b86:	e001      	b.n	8011b8c <pbuf_alloc+0x1cc>
      break;
 8011b88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3728      	adds	r7, #40	@ 0x28
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	0801fc1c 	.word	0x0801fc1c
 8011b98:	0801fc4c 	.word	0x0801fc4c
 8011b9c:	0801fc7c 	.word	0x0801fc7c
 8011ba0:	0801fca4 	.word	0x0801fca4
 8011ba4:	0801fcd8 	.word	0x0801fcd8
 8011ba8:	0801fd04 	.word	0x0801fd04

08011bac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af02      	add	r7, sp, #8
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	807b      	strh	r3, [r7, #2]
 8011bb8:	4613      	mov	r3, r2
 8011bba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011bbc:	883b      	ldrh	r3, [r7, #0]
 8011bbe:	2b41      	cmp	r3, #65	@ 0x41
 8011bc0:	d009      	beq.n	8011bd6 <pbuf_alloc_reference+0x2a>
 8011bc2:	883b      	ldrh	r3, [r7, #0]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d006      	beq.n	8011bd6 <pbuf_alloc_reference+0x2a>
 8011bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011c08 <pbuf_alloc_reference+0x5c>)
 8011bca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011bce:	490f      	ldr	r1, [pc, #60]	@ (8011c0c <pbuf_alloc_reference+0x60>)
 8011bd0:	480f      	ldr	r0, [pc, #60]	@ (8011c10 <pbuf_alloc_reference+0x64>)
 8011bd2:	f00b fbd7 	bl	801d384 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011bd6:	200b      	movs	r0, #11
 8011bd8:	f7ff fab0 	bl	801113c <memp_malloc>
 8011bdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d101      	bne.n	8011be8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011be4:	2300      	movs	r3, #0
 8011be6:	e00b      	b.n	8011c00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011be8:	8879      	ldrh	r1, [r7, #2]
 8011bea:	887a      	ldrh	r2, [r7, #2]
 8011bec:	2300      	movs	r3, #0
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	883b      	ldrh	r3, [r7, #0]
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	6879      	ldr	r1, [r7, #4]
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f7ff feb7 	bl	801196c <pbuf_init_alloced_pbuf>
  return p;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3710      	adds	r7, #16
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0801fc1c 	.word	0x0801fc1c
 8011c0c:	0801fd20 	.word	0x0801fd20
 8011c10:	0801fc7c 	.word	0x0801fc7c

08011c14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b088      	sub	sp, #32
 8011c18:	af02      	add	r7, sp, #8
 8011c1a:	607b      	str	r3, [r7, #4]
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	73fb      	strb	r3, [r7, #15]
 8011c20:	460b      	mov	r3, r1
 8011c22:	81bb      	strh	r3, [r7, #12]
 8011c24:	4613      	mov	r3, r2
 8011c26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
 8011c2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011c2c:	8a7b      	ldrh	r3, [r7, #18]
 8011c2e:	3303      	adds	r3, #3
 8011c30:	f023 0203 	bic.w	r2, r3, #3
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	441a      	add	r2, r3
 8011c38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d901      	bls.n	8011c42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e018      	b.n	8011c74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011c42:	6a3b      	ldr	r3, [r7, #32]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d007      	beq.n	8011c58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011c48:	8a7b      	ldrh	r3, [r7, #18]
 8011c4a:	3303      	adds	r3, #3
 8011c4c:	f023 0303 	bic.w	r3, r3, #3
 8011c50:	6a3a      	ldr	r2, [r7, #32]
 8011c52:	4413      	add	r3, r2
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	e001      	b.n	8011c5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	89b9      	ldrh	r1, [r7, #12]
 8011c60:	89ba      	ldrh	r2, [r7, #12]
 8011c62:	2302      	movs	r3, #2
 8011c64:	9301      	str	r3, [sp, #4]
 8011c66:	897b      	ldrh	r3, [r7, #10]
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	6979      	ldr	r1, [r7, #20]
 8011c6e:	f7ff fe7d 	bl	801196c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011c72:	687b      	ldr	r3, [r7, #4]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3718      	adds	r7, #24
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d106      	bne.n	8011c9c <pbuf_realloc+0x20>
 8011c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8011d78 <pbuf_realloc+0xfc>)
 8011c90:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011c94:	4939      	ldr	r1, [pc, #228]	@ (8011d7c <pbuf_realloc+0x100>)
 8011c96:	483a      	ldr	r0, [pc, #232]	@ (8011d80 <pbuf_realloc+0x104>)
 8011c98:	f00b fb74 	bl	801d384 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	891b      	ldrh	r3, [r3, #8]
 8011ca0:	887a      	ldrh	r2, [r7, #2]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d263      	bcs.n	8011d6e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	891a      	ldrh	r2, [r3, #8]
 8011caa:	887b      	ldrh	r3, [r7, #2]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011cb0:	887b      	ldrh	r3, [r7, #2]
 8011cb2:	817b      	strh	r3, [r7, #10]
  q = p;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011cb8:	e018      	b.n	8011cec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	895b      	ldrh	r3, [r3, #10]
 8011cbe:	897a      	ldrh	r2, [r7, #10]
 8011cc0:	1ad3      	subs	r3, r2, r3
 8011cc2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	891a      	ldrh	r2, [r3, #8]
 8011cc8:	893b      	ldrh	r3, [r7, #8]
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <pbuf_realloc+0x70>
 8011cde:	4b26      	ldr	r3, [pc, #152]	@ (8011d78 <pbuf_realloc+0xfc>)
 8011ce0:	f240 12af 	movw	r2, #431	@ 0x1af
 8011ce4:	4927      	ldr	r1, [pc, #156]	@ (8011d84 <pbuf_realloc+0x108>)
 8011ce6:	4826      	ldr	r0, [pc, #152]	@ (8011d80 <pbuf_realloc+0x104>)
 8011ce8:	f00b fb4c 	bl	801d384 <iprintf>
  while (rem_len > q->len) {
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	895b      	ldrh	r3, [r3, #10]
 8011cf0:	897a      	ldrh	r2, [r7, #10]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d8e1      	bhi.n	8011cba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	7b1b      	ldrb	r3, [r3, #12]
 8011cfa:	f003 030f 	and.w	r3, r3, #15
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d121      	bne.n	8011d46 <pbuf_realloc+0xca>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	895b      	ldrh	r3, [r3, #10]
 8011d06:	897a      	ldrh	r2, [r7, #10]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d01c      	beq.n	8011d46 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	7b5b      	ldrb	r3, [r3, #13]
 8011d10:	f003 0302 	and.w	r3, r3, #2
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d116      	bne.n	8011d46 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	685a      	ldr	r2, [r3, #4]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	897b      	ldrh	r3, [r7, #10]
 8011d24:	4413      	add	r3, r2
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	4619      	mov	r1, r3
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f7fe ff58 	bl	8010be0 <mem_trim>
 8011d30:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d106      	bne.n	8011d46 <pbuf_realloc+0xca>
 8011d38:	4b0f      	ldr	r3, [pc, #60]	@ (8011d78 <pbuf_realloc+0xfc>)
 8011d3a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011d3e:	4912      	ldr	r1, [pc, #72]	@ (8011d88 <pbuf_realloc+0x10c>)
 8011d40:	480f      	ldr	r0, [pc, #60]	@ (8011d80 <pbuf_realloc+0x104>)
 8011d42:	f00b fb1f 	bl	801d384 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	897a      	ldrh	r2, [r7, #10]
 8011d4a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	895a      	ldrh	r2, [r3, #10]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d004      	beq.n	8011d66 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4618      	mov	r0, r3
 8011d62:	f000 f911 	bl	8011f88 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	601a      	str	r2, [r3, #0]
 8011d6c:	e000      	b.n	8011d70 <pbuf_realloc+0xf4>
    return;
 8011d6e:	bf00      	nop

}
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	0801fc1c 	.word	0x0801fc1c
 8011d7c:	0801fd34 	.word	0x0801fd34
 8011d80:	0801fc7c 	.word	0x0801fc7c
 8011d84:	0801fd4c 	.word	0x0801fd4c
 8011d88:	0801fd64 	.word	0x0801fd64

08011d8c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	4613      	mov	r3, r2
 8011d98:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <pbuf_add_header_impl+0x22>
 8011da0:	4b2b      	ldr	r3, [pc, #172]	@ (8011e50 <pbuf_add_header_impl+0xc4>)
 8011da2:	f240 12df 	movw	r2, #479	@ 0x1df
 8011da6:	492b      	ldr	r1, [pc, #172]	@ (8011e54 <pbuf_add_header_impl+0xc8>)
 8011da8:	482b      	ldr	r0, [pc, #172]	@ (8011e58 <pbuf_add_header_impl+0xcc>)
 8011daa:	f00b faeb 	bl	801d384 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d003      	beq.n	8011dbc <pbuf_add_header_impl+0x30>
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011dba:	d301      	bcc.n	8011dc0 <pbuf_add_header_impl+0x34>
    return 1;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e043      	b.n	8011e48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <pbuf_add_header_impl+0x3e>
    return 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e03e      	b.n	8011e48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	891a      	ldrh	r2, [r3, #8]
 8011dd2:	8a7b      	ldrh	r3, [r7, #18]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	8a7a      	ldrh	r2, [r7, #18]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d901      	bls.n	8011de2 <pbuf_add_header_impl+0x56>
    return 1;
 8011dde:	2301      	movs	r3, #1
 8011de0:	e032      	b.n	8011e48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	7b1b      	ldrb	r3, [r3, #12]
 8011de6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011de8:	8a3b      	ldrh	r3, [r7, #16]
 8011dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00c      	beq.n	8011e0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	685a      	ldr	r2, [r3, #4]
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	425b      	negs	r3, r3
 8011dfa:	4413      	add	r3, r2
 8011dfc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	3310      	adds	r3, #16
 8011e02:	697a      	ldr	r2, [r7, #20]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d20d      	bcs.n	8011e24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e01d      	b.n	8011e48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011e0c:	79fb      	ldrb	r3, [r7, #7]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d006      	beq.n	8011e20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	685a      	ldr	r2, [r3, #4]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	425b      	negs	r3, r3
 8011e1a:	4413      	add	r3, r2
 8011e1c:	617b      	str	r3, [r7, #20]
 8011e1e:	e001      	b.n	8011e24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011e20:	2301      	movs	r3, #1
 8011e22:	e011      	b.n	8011e48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	697a      	ldr	r2, [r7, #20]
 8011e28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	895a      	ldrh	r2, [r3, #10]
 8011e2e:	8a7b      	ldrh	r3, [r7, #18]
 8011e30:	4413      	add	r3, r2
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	891a      	ldrh	r2, [r3, #8]
 8011e3c:	8a7b      	ldrh	r3, [r7, #18]
 8011e3e:	4413      	add	r3, r2
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	811a      	strh	r2, [r3, #8]


  return 0;
 8011e46:	2300      	movs	r3, #0
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3718      	adds	r7, #24
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	0801fc1c 	.word	0x0801fc1c
 8011e54:	0801fd80 	.word	0x0801fd80
 8011e58:	0801fc7c 	.word	0x0801fc7c

08011e5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011e66:	2200      	movs	r2, #0
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7ff ff8e 	bl	8011d8c <pbuf_add_header_impl>
 8011e70:	4603      	mov	r3, r0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
	...

08011e7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d106      	bne.n	8011e9a <pbuf_remove_header+0x1e>
 8011e8c:	4b20      	ldr	r3, [pc, #128]	@ (8011f10 <pbuf_remove_header+0x94>)
 8011e8e:	f240 224b 	movw	r2, #587	@ 0x24b
 8011e92:	4920      	ldr	r1, [pc, #128]	@ (8011f14 <pbuf_remove_header+0x98>)
 8011e94:	4820      	ldr	r0, [pc, #128]	@ (8011f18 <pbuf_remove_header+0x9c>)
 8011e96:	f00b fa75 	bl	801d384 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d003      	beq.n	8011ea8 <pbuf_remove_header+0x2c>
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ea6:	d301      	bcc.n	8011eac <pbuf_remove_header+0x30>
    return 1;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e02c      	b.n	8011f06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d101      	bne.n	8011eb6 <pbuf_remove_header+0x3a>
    return 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	e027      	b.n	8011f06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	895b      	ldrh	r3, [r3, #10]
 8011ebe:	89fa      	ldrh	r2, [r7, #14]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d908      	bls.n	8011ed6 <pbuf_remove_header+0x5a>
 8011ec4:	4b12      	ldr	r3, [pc, #72]	@ (8011f10 <pbuf_remove_header+0x94>)
 8011ec6:	f240 2255 	movw	r2, #597	@ 0x255
 8011eca:	4914      	ldr	r1, [pc, #80]	@ (8011f1c <pbuf_remove_header+0xa0>)
 8011ecc:	4812      	ldr	r0, [pc, #72]	@ (8011f18 <pbuf_remove_header+0x9c>)
 8011ece:	f00b fa59 	bl	801d384 <iprintf>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e017      	b.n	8011f06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685a      	ldr	r2, [r3, #4]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	441a      	add	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	895a      	ldrh	r2, [r3, #10]
 8011eec:	89fb      	ldrh	r3, [r7, #14]
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	891a      	ldrh	r2, [r3, #8]
 8011efa:	89fb      	ldrh	r3, [r7, #14]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	0801fc1c 	.word	0x0801fc1c
 8011f14:	0801fd80 	.word	0x0801fd80
 8011f18:	0801fc7c 	.word	0x0801fc7c
 8011f1c:	0801fd8c 	.word	0x0801fd8c

08011f20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	807b      	strh	r3, [r7, #2]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	da08      	bge.n	8011f4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011f38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f3c:	425b      	negs	r3, r3
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff ff9b 	bl	8011e7c <pbuf_remove_header>
 8011f46:	4603      	mov	r3, r0
 8011f48:	e007      	b.n	8011f5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011f4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f4e:	787a      	ldrb	r2, [r7, #1]
 8011f50:	4619      	mov	r1, r3
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7ff ff1a 	bl	8011d8c <pbuf_add_header_impl>
 8011f58:	4603      	mov	r3, r0
  }
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b082      	sub	sp, #8
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011f6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f72:	2201      	movs	r2, #1
 8011f74:	4619      	mov	r1, r3
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff ffd2 	bl	8011f20 <pbuf_header_impl>
 8011f7c:	4603      	mov	r3, r0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d10b      	bne.n	8011fae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <pbuf_free+0x22>
 8011f9c:	4b3b      	ldr	r3, [pc, #236]	@ (801208c <pbuf_free+0x104>)
 8011f9e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011fa2:	493b      	ldr	r1, [pc, #236]	@ (8012090 <pbuf_free+0x108>)
 8011fa4:	483b      	ldr	r0, [pc, #236]	@ (8012094 <pbuf_free+0x10c>)
 8011fa6:	f00b f9ed 	bl	801d384 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	e069      	b.n	8012082 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011fb2:	e062      	b.n	801207a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011fb4:	f00a fc90 	bl	801c8d8 <sys_arch_protect>
 8011fb8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	7b9b      	ldrb	r3, [r3, #14]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d106      	bne.n	8011fd0 <pbuf_free+0x48>
 8011fc2:	4b32      	ldr	r3, [pc, #200]	@ (801208c <pbuf_free+0x104>)
 8011fc4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011fc8:	4933      	ldr	r1, [pc, #204]	@ (8012098 <pbuf_free+0x110>)
 8011fca:	4832      	ldr	r0, [pc, #200]	@ (8012094 <pbuf_free+0x10c>)
 8011fcc:	f00b f9da 	bl	801d384 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	7b9b      	ldrb	r3, [r3, #14]
 8011fd4:	3b01      	subs	r3, #1
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	739a      	strb	r2, [r3, #14]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	7b9b      	ldrb	r3, [r3, #14]
 8011fe0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011fe2:	69b8      	ldr	r0, [r7, #24]
 8011fe4:	f00a fc86 	bl	801c8f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011fe8:	7dfb      	ldrb	r3, [r7, #23]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d143      	bne.n	8012076 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	7b1b      	ldrb	r3, [r3, #12]
 8011ff8:	f003 030f 	and.w	r3, r3, #15
 8011ffc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	7b5b      	ldrb	r3, [r3, #13]
 8012002:	f003 0302 	and.w	r3, r3, #2
 8012006:	2b00      	cmp	r3, #0
 8012008:	d011      	beq.n	801202e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d106      	bne.n	8012024 <pbuf_free+0x9c>
 8012016:	4b1d      	ldr	r3, [pc, #116]	@ (801208c <pbuf_free+0x104>)
 8012018:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801201c:	491f      	ldr	r1, [pc, #124]	@ (801209c <pbuf_free+0x114>)
 801201e:	481d      	ldr	r0, [pc, #116]	@ (8012094 <pbuf_free+0x10c>)
 8012020:	f00b f9b0 	bl	801d384 <iprintf>
        pc->custom_free_function(p);
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	691b      	ldr	r3, [r3, #16]
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	4798      	blx	r3
 801202c:	e01d      	b.n	801206a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801202e:	7bfb      	ldrb	r3, [r7, #15]
 8012030:	2b02      	cmp	r3, #2
 8012032:	d104      	bne.n	801203e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012034:	6879      	ldr	r1, [r7, #4]
 8012036:	200c      	movs	r0, #12
 8012038:	f7ff f8f6 	bl	8011228 <memp_free>
 801203c:	e015      	b.n	801206a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801203e:	7bfb      	ldrb	r3, [r7, #15]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d104      	bne.n	801204e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012044:	6879      	ldr	r1, [r7, #4]
 8012046:	200b      	movs	r0, #11
 8012048:	f7ff f8ee 	bl	8011228 <memp_free>
 801204c:	e00d      	b.n	801206a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801204e:	7bfb      	ldrb	r3, [r7, #15]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d103      	bne.n	801205c <pbuf_free+0xd4>
          mem_free(p);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7fe fd33 	bl	8010ac0 <mem_free>
 801205a:	e006      	b.n	801206a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801205c:	4b0b      	ldr	r3, [pc, #44]	@ (801208c <pbuf_free+0x104>)
 801205e:	f240 320f 	movw	r2, #783	@ 0x30f
 8012062:	490f      	ldr	r1, [pc, #60]	@ (80120a0 <pbuf_free+0x118>)
 8012064:	480b      	ldr	r0, [pc, #44]	@ (8012094 <pbuf_free+0x10c>)
 8012066:	f00b f98d 	bl	801d384 <iprintf>
        }
      }
      count++;
 801206a:	7ffb      	ldrb	r3, [r7, #31]
 801206c:	3301      	adds	r3, #1
 801206e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	607b      	str	r3, [r7, #4]
 8012074:	e001      	b.n	801207a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012076:	2300      	movs	r3, #0
 8012078:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d199      	bne.n	8011fb4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012080:	7ffb      	ldrb	r3, [r7, #31]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3720      	adds	r7, #32
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	0801fc1c 	.word	0x0801fc1c
 8012090:	0801fd80 	.word	0x0801fd80
 8012094:	0801fc7c 	.word	0x0801fc7c
 8012098:	0801fdac 	.word	0x0801fdac
 801209c:	0801fdc4 	.word	0x0801fdc4
 80120a0:	0801fde8 	.word	0x0801fde8

080120a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80120b0:	e005      	b.n	80120be <pbuf_clen+0x1a>
    ++len;
 80120b2:	89fb      	ldrh	r3, [r7, #14]
 80120b4:	3301      	adds	r3, #1
 80120b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1f6      	bne.n	80120b2 <pbuf_clen+0xe>
  }
  return len;
 80120c4:	89fb      	ldrh	r3, [r7, #14]
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
	...

080120d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d016      	beq.n	8012110 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80120e2:	f00a fbf9 	bl	801c8d8 <sys_arch_protect>
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	7b9b      	ldrb	r3, [r3, #14]
 80120ec:	3301      	adds	r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	739a      	strb	r2, [r3, #14]
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f00a fbfd 	bl	801c8f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	7b9b      	ldrb	r3, [r3, #14]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <pbuf_ref+0x3c>
 8012102:	4b05      	ldr	r3, [pc, #20]	@ (8012118 <pbuf_ref+0x44>)
 8012104:	f240 3242 	movw	r2, #834	@ 0x342
 8012108:	4904      	ldr	r1, [pc, #16]	@ (801211c <pbuf_ref+0x48>)
 801210a:	4805      	ldr	r0, [pc, #20]	@ (8012120 <pbuf_ref+0x4c>)
 801210c:	f00b f93a 	bl	801d384 <iprintf>
  }
}
 8012110:	bf00      	nop
 8012112:	3710      	adds	r7, #16
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	0801fc1c 	.word	0x0801fc1c
 801211c:	0801fdfc 	.word	0x0801fdfc
 8012120:	0801fc7c 	.word	0x0801fc7c

08012124 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d002      	beq.n	801213a <pbuf_cat+0x16>
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d107      	bne.n	801214a <pbuf_cat+0x26>
 801213a:	4b20      	ldr	r3, [pc, #128]	@ (80121bc <pbuf_cat+0x98>)
 801213c:	f240 3259 	movw	r2, #857	@ 0x359
 8012140:	491f      	ldr	r1, [pc, #124]	@ (80121c0 <pbuf_cat+0x9c>)
 8012142:	4820      	ldr	r0, [pc, #128]	@ (80121c4 <pbuf_cat+0xa0>)
 8012144:	f00b f91e 	bl	801d384 <iprintf>
 8012148:	e034      	b.n	80121b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	60fb      	str	r3, [r7, #12]
 801214e:	e00a      	b.n	8012166 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	891a      	ldrh	r2, [r3, #8]
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	891b      	ldrh	r3, [r3, #8]
 8012158:	4413      	add	r3, r2
 801215a:	b29a      	uxth	r2, r3
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1f0      	bne.n	8012150 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	891a      	ldrh	r2, [r3, #8]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	895b      	ldrh	r3, [r3, #10]
 8012176:	429a      	cmp	r2, r3
 8012178:	d006      	beq.n	8012188 <pbuf_cat+0x64>
 801217a:	4b10      	ldr	r3, [pc, #64]	@ (80121bc <pbuf_cat+0x98>)
 801217c:	f240 3262 	movw	r2, #866	@ 0x362
 8012180:	4911      	ldr	r1, [pc, #68]	@ (80121c8 <pbuf_cat+0xa4>)
 8012182:	4810      	ldr	r0, [pc, #64]	@ (80121c4 <pbuf_cat+0xa0>)
 8012184:	f00b f8fe 	bl	801d384 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <pbuf_cat+0x7a>
 8012190:	4b0a      	ldr	r3, [pc, #40]	@ (80121bc <pbuf_cat+0x98>)
 8012192:	f240 3263 	movw	r2, #867	@ 0x363
 8012196:	490d      	ldr	r1, [pc, #52]	@ (80121cc <pbuf_cat+0xa8>)
 8012198:	480a      	ldr	r0, [pc, #40]	@ (80121c4 <pbuf_cat+0xa0>)
 801219a:	f00b f8f3 	bl	801d384 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	891a      	ldrh	r2, [r3, #8]
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	891b      	ldrh	r3, [r3, #8]
 80121a6:	4413      	add	r3, r2
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80121b4:	3710      	adds	r7, #16
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	0801fc1c 	.word	0x0801fc1c
 80121c0:	0801fe10 	.word	0x0801fe10
 80121c4:	0801fc7c 	.word	0x0801fc7c
 80121c8:	0801fe48 	.word	0x0801fe48
 80121cc:	0801fe78 	.word	0x0801fe78

080121d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80121da:	6839      	ldr	r1, [r7, #0]
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff ffa1 	bl	8012124 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80121e2:	6838      	ldr	r0, [r7, #0]
 80121e4:	f7ff ff76 	bl	80120d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80121e8:	bf00      	nop
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80121fa:	2300      	movs	r3, #0
 80121fc:	617b      	str	r3, [r7, #20]
 80121fe:	2300      	movs	r3, #0
 8012200:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d008      	beq.n	801221a <pbuf_copy+0x2a>
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d005      	beq.n	801221a <pbuf_copy+0x2a>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	891a      	ldrh	r2, [r3, #8]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	891b      	ldrh	r3, [r3, #8]
 8012216:	429a      	cmp	r2, r3
 8012218:	d209      	bcs.n	801222e <pbuf_copy+0x3e>
 801221a:	4b57      	ldr	r3, [pc, #348]	@ (8012378 <pbuf_copy+0x188>)
 801221c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012220:	4956      	ldr	r1, [pc, #344]	@ (801237c <pbuf_copy+0x18c>)
 8012222:	4857      	ldr	r0, [pc, #348]	@ (8012380 <pbuf_copy+0x190>)
 8012224:	f00b f8ae 	bl	801d384 <iprintf>
 8012228:	f06f 030f 	mvn.w	r3, #15
 801222c:	e09f      	b.n	801236e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	895b      	ldrh	r3, [r3, #10]
 8012232:	461a      	mov	r2, r3
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	1ad2      	subs	r2, r2, r3
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	895b      	ldrh	r3, [r3, #10]
 801223c:	4619      	mov	r1, r3
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	1acb      	subs	r3, r1, r3
 8012242:	429a      	cmp	r2, r3
 8012244:	d306      	bcc.n	8012254 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	895b      	ldrh	r3, [r3, #10]
 801224a:	461a      	mov	r2, r3
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	60fb      	str	r3, [r7, #12]
 8012252:	e005      	b.n	8012260 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	895b      	ldrh	r3, [r3, #10]
 8012258:	461a      	mov	r2, r3
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	1ad3      	subs	r3, r2, r3
 801225e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685a      	ldr	r2, [r3, #4]
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	18d0      	adds	r0, r2, r3
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	685a      	ldr	r2, [r3, #4]
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	4413      	add	r3, r2
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	4619      	mov	r1, r3
 8012274:	f00b faad 	bl	801d7d2 <memcpy>
    offset_to += len;
 8012278:	697a      	ldr	r2, [r7, #20]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	4413      	add	r3, r2
 801227e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012280:	693a      	ldr	r2, [r7, #16]
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	4413      	add	r3, r2
 8012286:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	895b      	ldrh	r3, [r3, #10]
 801228c:	461a      	mov	r2, r3
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	4293      	cmp	r3, r2
 8012292:	d906      	bls.n	80122a2 <pbuf_copy+0xb2>
 8012294:	4b38      	ldr	r3, [pc, #224]	@ (8012378 <pbuf_copy+0x188>)
 8012296:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801229a:	493a      	ldr	r1, [pc, #232]	@ (8012384 <pbuf_copy+0x194>)
 801229c:	4838      	ldr	r0, [pc, #224]	@ (8012380 <pbuf_copy+0x190>)
 801229e:	f00b f871 	bl	801d384 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	895b      	ldrh	r3, [r3, #10]
 80122a6:	461a      	mov	r2, r3
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d906      	bls.n	80122bc <pbuf_copy+0xcc>
 80122ae:	4b32      	ldr	r3, [pc, #200]	@ (8012378 <pbuf_copy+0x188>)
 80122b0:	f240 32da 	movw	r2, #986	@ 0x3da
 80122b4:	4934      	ldr	r1, [pc, #208]	@ (8012388 <pbuf_copy+0x198>)
 80122b6:	4832      	ldr	r0, [pc, #200]	@ (8012380 <pbuf_copy+0x190>)
 80122b8:	f00b f864 	bl	801d384 <iprintf>
    if (offset_from >= p_from->len) {
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	895b      	ldrh	r3, [r3, #10]
 80122c0:	461a      	mov	r2, r3
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d304      	bcc.n	80122d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80122c8:	2300      	movs	r3, #0
 80122ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	895b      	ldrh	r3, [r3, #10]
 80122d6:	461a      	mov	r2, r3
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	4293      	cmp	r3, r2
 80122dc:	d114      	bne.n	8012308 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80122de:	2300      	movs	r3, #0
 80122e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d10c      	bne.n	8012308 <pbuf_copy+0x118>
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d009      	beq.n	8012308 <pbuf_copy+0x118>
 80122f4:	4b20      	ldr	r3, [pc, #128]	@ (8012378 <pbuf_copy+0x188>)
 80122f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80122fa:	4924      	ldr	r1, [pc, #144]	@ (801238c <pbuf_copy+0x19c>)
 80122fc:	4820      	ldr	r0, [pc, #128]	@ (8012380 <pbuf_copy+0x190>)
 80122fe:	f00b f841 	bl	801d384 <iprintf>
 8012302:	f06f 030f 	mvn.w	r3, #15
 8012306:	e032      	b.n	801236e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d013      	beq.n	8012336 <pbuf_copy+0x146>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	895a      	ldrh	r2, [r3, #10]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	891b      	ldrh	r3, [r3, #8]
 8012316:	429a      	cmp	r2, r3
 8012318:	d10d      	bne.n	8012336 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d009      	beq.n	8012336 <pbuf_copy+0x146>
 8012322:	4b15      	ldr	r3, [pc, #84]	@ (8012378 <pbuf_copy+0x188>)
 8012324:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012328:	4919      	ldr	r1, [pc, #100]	@ (8012390 <pbuf_copy+0x1a0>)
 801232a:	4815      	ldr	r0, [pc, #84]	@ (8012380 <pbuf_copy+0x190>)
 801232c:	f00b f82a 	bl	801d384 <iprintf>
 8012330:	f06f 0305 	mvn.w	r3, #5
 8012334:	e01b      	b.n	801236e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d013      	beq.n	8012364 <pbuf_copy+0x174>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	895a      	ldrh	r2, [r3, #10]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	429a      	cmp	r2, r3
 8012346:	d10d      	bne.n	8012364 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d009      	beq.n	8012364 <pbuf_copy+0x174>
 8012350:	4b09      	ldr	r3, [pc, #36]	@ (8012378 <pbuf_copy+0x188>)
 8012352:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012356:	490e      	ldr	r1, [pc, #56]	@ (8012390 <pbuf_copy+0x1a0>)
 8012358:	4809      	ldr	r0, [pc, #36]	@ (8012380 <pbuf_copy+0x190>)
 801235a:	f00b f813 	bl	801d384 <iprintf>
 801235e:	f06f 0305 	mvn.w	r3, #5
 8012362:	e004      	b.n	801236e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	f47f af61 	bne.w	801222e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801236c:	2300      	movs	r3, #0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3718      	adds	r7, #24
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	0801fc1c 	.word	0x0801fc1c
 801237c:	0801fec4 	.word	0x0801fec4
 8012380:	0801fc7c 	.word	0x0801fc7c
 8012384:	0801fef4 	.word	0x0801fef4
 8012388:	0801ff0c 	.word	0x0801ff0c
 801238c:	0801ff28 	.word	0x0801ff28
 8012390:	0801ff38 	.word	0x0801ff38

08012394 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b088      	sub	sp, #32
 8012398:	af00      	add	r7, sp, #0
 801239a:	60f8      	str	r0, [r7, #12]
 801239c:	60b9      	str	r1, [r7, #8]
 801239e:	4611      	mov	r1, r2
 80123a0:	461a      	mov	r2, r3
 80123a2:	460b      	mov	r3, r1
 80123a4:	80fb      	strh	r3, [r7, #6]
 80123a6:	4613      	mov	r3, r2
 80123a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80123aa:	2300      	movs	r3, #0
 80123ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80123ae:	2300      	movs	r3, #0
 80123b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d108      	bne.n	80123ca <pbuf_copy_partial+0x36>
 80123b8:	4b2b      	ldr	r3, [pc, #172]	@ (8012468 <pbuf_copy_partial+0xd4>)
 80123ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80123be:	492b      	ldr	r1, [pc, #172]	@ (801246c <pbuf_copy_partial+0xd8>)
 80123c0:	482b      	ldr	r0, [pc, #172]	@ (8012470 <pbuf_copy_partial+0xdc>)
 80123c2:	f00a ffdf 	bl	801d384 <iprintf>
 80123c6:	2300      	movs	r3, #0
 80123c8:	e04a      	b.n	8012460 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d108      	bne.n	80123e2 <pbuf_copy_partial+0x4e>
 80123d0:	4b25      	ldr	r3, [pc, #148]	@ (8012468 <pbuf_copy_partial+0xd4>)
 80123d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80123d6:	4927      	ldr	r1, [pc, #156]	@ (8012474 <pbuf_copy_partial+0xe0>)
 80123d8:	4825      	ldr	r0, [pc, #148]	@ (8012470 <pbuf_copy_partial+0xdc>)
 80123da:	f00a ffd3 	bl	801d384 <iprintf>
 80123de:	2300      	movs	r3, #0
 80123e0:	e03e      	b.n	8012460 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	61fb      	str	r3, [r7, #28]
 80123e6:	e034      	b.n	8012452 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80123e8:	88bb      	ldrh	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00a      	beq.n	8012404 <pbuf_copy_partial+0x70>
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	895b      	ldrh	r3, [r3, #10]
 80123f2:	88ba      	ldrh	r2, [r7, #4]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d305      	bcc.n	8012404 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	895b      	ldrh	r3, [r3, #10]
 80123fc:	88ba      	ldrh	r2, [r7, #4]
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	80bb      	strh	r3, [r7, #4]
 8012402:	e023      	b.n	801244c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	895a      	ldrh	r2, [r3, #10]
 8012408:	88bb      	ldrh	r3, [r7, #4]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801240e:	8b3a      	ldrh	r2, [r7, #24]
 8012410:	88fb      	ldrh	r3, [r7, #6]
 8012412:	429a      	cmp	r2, r3
 8012414:	d901      	bls.n	801241a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012416:	88fb      	ldrh	r3, [r7, #6]
 8012418:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801241a:	8b7b      	ldrh	r3, [r7, #26]
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	18d0      	adds	r0, r2, r3
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	685a      	ldr	r2, [r3, #4]
 8012424:	88bb      	ldrh	r3, [r7, #4]
 8012426:	4413      	add	r3, r2
 8012428:	8b3a      	ldrh	r2, [r7, #24]
 801242a:	4619      	mov	r1, r3
 801242c:	f00b f9d1 	bl	801d7d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012430:	8afa      	ldrh	r2, [r7, #22]
 8012432:	8b3b      	ldrh	r3, [r7, #24]
 8012434:	4413      	add	r3, r2
 8012436:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012438:	8b7a      	ldrh	r2, [r7, #26]
 801243a:	8b3b      	ldrh	r3, [r7, #24]
 801243c:	4413      	add	r3, r2
 801243e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012440:	88fa      	ldrh	r2, [r7, #6]
 8012442:	8b3b      	ldrh	r3, [r7, #24]
 8012444:	1ad3      	subs	r3, r2, r3
 8012446:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	61fb      	str	r3, [r7, #28]
 8012452:	88fb      	ldrh	r3, [r7, #6]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d002      	beq.n	801245e <pbuf_copy_partial+0xca>
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d1c4      	bne.n	80123e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801245e:	8afb      	ldrh	r3, [r7, #22]
}
 8012460:	4618      	mov	r0, r3
 8012462:	3720      	adds	r7, #32
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	0801fc1c 	.word	0x0801fc1c
 801246c:	0801ff64 	.word	0x0801ff64
 8012470:	0801fc7c 	.word	0x0801fc7c
 8012474:	0801ff84 	.word	0x0801ff84

08012478 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	4603      	mov	r3, r0
 8012480:	603a      	str	r2, [r7, #0]
 8012482:	71fb      	strb	r3, [r7, #7]
 8012484:	460b      	mov	r3, r1
 8012486:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	8919      	ldrh	r1, [r3, #8]
 801248c:	88ba      	ldrh	r2, [r7, #4]
 801248e:	79fb      	ldrb	r3, [r7, #7]
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff fa95 	bl	80119c0 <pbuf_alloc>
 8012496:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d101      	bne.n	80124a2 <pbuf_clone+0x2a>
    return NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	e011      	b.n	80124c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80124a2:	6839      	ldr	r1, [r7, #0]
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff fea3 	bl	80121f0 <pbuf_copy>
 80124aa:	4603      	mov	r3, r0
 80124ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80124ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d006      	beq.n	80124c4 <pbuf_clone+0x4c>
 80124b6:	4b06      	ldr	r3, [pc, #24]	@ (80124d0 <pbuf_clone+0x58>)
 80124b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80124bc:	4905      	ldr	r1, [pc, #20]	@ (80124d4 <pbuf_clone+0x5c>)
 80124be:	4806      	ldr	r0, [pc, #24]	@ (80124d8 <pbuf_clone+0x60>)
 80124c0:	f00a ff60 	bl	801d384 <iprintf>
  return q;
 80124c4:	68fb      	ldr	r3, [r7, #12]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	0801fc1c 	.word	0x0801fc1c
 80124d4:	08020090 	.word	0x08020090
 80124d8:	0801fc7c 	.word	0x0801fc7c

080124dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80124e0:	f00a fa18 	bl	801c914 <rand>
 80124e4:	4603      	mov	r3, r0
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	4b01      	ldr	r3, [pc, #4]	@ (80124fc <tcp_init+0x20>)
 80124f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80124f8:	bf00      	nop
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	24000028 	.word	0x24000028

08012500 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	7d1b      	ldrb	r3, [r3, #20]
 801250c:	2b01      	cmp	r3, #1
 801250e:	d105      	bne.n	801251c <tcp_free+0x1c>
 8012510:	4b06      	ldr	r3, [pc, #24]	@ (801252c <tcp_free+0x2c>)
 8012512:	22d4      	movs	r2, #212	@ 0xd4
 8012514:	4906      	ldr	r1, [pc, #24]	@ (8012530 <tcp_free+0x30>)
 8012516:	4807      	ldr	r0, [pc, #28]	@ (8012534 <tcp_free+0x34>)
 8012518:	f00a ff34 	bl	801d384 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801251c:	6879      	ldr	r1, [r7, #4]
 801251e:	2001      	movs	r0, #1
 8012520:	f7fe fe82 	bl	8011228 <memp_free>
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	0802011c 	.word	0x0802011c
 8012530:	0802014c 	.word	0x0802014c
 8012534:	08020160 	.word	0x08020160

08012538 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	7d1b      	ldrb	r3, [r3, #20]
 8012544:	2b01      	cmp	r3, #1
 8012546:	d105      	bne.n	8012554 <tcp_free_listen+0x1c>
 8012548:	4b06      	ldr	r3, [pc, #24]	@ (8012564 <tcp_free_listen+0x2c>)
 801254a:	22df      	movs	r2, #223	@ 0xdf
 801254c:	4906      	ldr	r1, [pc, #24]	@ (8012568 <tcp_free_listen+0x30>)
 801254e:	4807      	ldr	r0, [pc, #28]	@ (801256c <tcp_free_listen+0x34>)
 8012550:	f00a ff18 	bl	801d384 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012554:	6879      	ldr	r1, [r7, #4]
 8012556:	2002      	movs	r0, #2
 8012558:	f7fe fe66 	bl	8011228 <memp_free>
}
 801255c:	bf00      	nop
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	0802011c 	.word	0x0802011c
 8012568:	08020188 	.word	0x08020188
 801256c:	08020160 	.word	0x08020160

08012570 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012574:	f000 fea4 	bl	80132c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012578:	4b07      	ldr	r3, [pc, #28]	@ (8012598 <tcp_tmr+0x28>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	3301      	adds	r3, #1
 801257e:	b2da      	uxtb	r2, r3
 8012580:	4b05      	ldr	r3, [pc, #20]	@ (8012598 <tcp_tmr+0x28>)
 8012582:	701a      	strb	r2, [r3, #0]
 8012584:	4b04      	ldr	r3, [pc, #16]	@ (8012598 <tcp_tmr+0x28>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	f003 0301 	and.w	r3, r3, #1
 801258c:	2b00      	cmp	r3, #0
 801258e:	d001      	beq.n	8012594 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012590:	f000 fb54 	bl	8012c3c <tcp_slowtmr>
  }
}
 8012594:	bf00      	nop
 8012596:	bd80      	pop	{r7, pc}
 8012598:	2400cc49 	.word	0x2400cc49

0801259c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d105      	bne.n	80125b8 <tcp_remove_listener+0x1c>
 80125ac:	4b0d      	ldr	r3, [pc, #52]	@ (80125e4 <tcp_remove_listener+0x48>)
 80125ae:	22ff      	movs	r2, #255	@ 0xff
 80125b0:	490d      	ldr	r1, [pc, #52]	@ (80125e8 <tcp_remove_listener+0x4c>)
 80125b2:	480e      	ldr	r0, [pc, #56]	@ (80125ec <tcp_remove_listener+0x50>)
 80125b4:	f00a fee6 	bl	801d384 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60fb      	str	r3, [r7, #12]
 80125bc:	e00a      	b.n	80125d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d102      	bne.n	80125ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2200      	movs	r2, #0
 80125cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	60fb      	str	r3, [r7, #12]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1f1      	bne.n	80125be <tcp_remove_listener+0x22>
    }
  }
}
 80125da:	bf00      	nop
 80125dc:	bf00      	nop
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0802011c 	.word	0x0802011c
 80125e8:	080201a4 	.word	0x080201a4
 80125ec:	08020160 	.word	0x08020160

080125f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d106      	bne.n	801260c <tcp_listen_closed+0x1c>
 80125fe:	4b14      	ldr	r3, [pc, #80]	@ (8012650 <tcp_listen_closed+0x60>)
 8012600:	f240 1211 	movw	r2, #273	@ 0x111
 8012604:	4913      	ldr	r1, [pc, #76]	@ (8012654 <tcp_listen_closed+0x64>)
 8012606:	4814      	ldr	r0, [pc, #80]	@ (8012658 <tcp_listen_closed+0x68>)
 8012608:	f00a febc 	bl	801d384 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d006      	beq.n	8012622 <tcp_listen_closed+0x32>
 8012614:	4b0e      	ldr	r3, [pc, #56]	@ (8012650 <tcp_listen_closed+0x60>)
 8012616:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801261a:	4910      	ldr	r1, [pc, #64]	@ (801265c <tcp_listen_closed+0x6c>)
 801261c:	480e      	ldr	r0, [pc, #56]	@ (8012658 <tcp_listen_closed+0x68>)
 801261e:	f00a feb1 	bl	801d384 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012622:	2301      	movs	r3, #1
 8012624:	60fb      	str	r3, [r7, #12]
 8012626:	e00b      	b.n	8012640 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012628:	4a0d      	ldr	r2, [pc, #52]	@ (8012660 <tcp_listen_closed+0x70>)
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	6879      	ldr	r1, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	f7ff ffb1 	bl	801259c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	3301      	adds	r3, #1
 801263e:	60fb      	str	r3, [r7, #12]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2b03      	cmp	r3, #3
 8012644:	d9f0      	bls.n	8012628 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012646:	bf00      	nop
 8012648:	bf00      	nop
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	0802011c 	.word	0x0802011c
 8012654:	080201cc 	.word	0x080201cc
 8012658:	08020160 	.word	0x08020160
 801265c:	080201d8 	.word	0x080201d8
 8012660:	08022588 	.word	0x08022588

08012664 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012664:	b5b0      	push	{r4, r5, r7, lr}
 8012666:	b088      	sub	sp, #32
 8012668:	af04      	add	r7, sp, #16
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	460b      	mov	r3, r1
 801266e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d106      	bne.n	8012684 <tcp_close_shutdown+0x20>
 8012676:	4b63      	ldr	r3, [pc, #396]	@ (8012804 <tcp_close_shutdown+0x1a0>)
 8012678:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801267c:	4962      	ldr	r1, [pc, #392]	@ (8012808 <tcp_close_shutdown+0x1a4>)
 801267e:	4863      	ldr	r0, [pc, #396]	@ (801280c <tcp_close_shutdown+0x1a8>)
 8012680:	f00a fe80 	bl	801d384 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012684:	78fb      	ldrb	r3, [r7, #3]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d066      	beq.n	8012758 <tcp_close_shutdown+0xf4>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7d1b      	ldrb	r3, [r3, #20]
 801268e:	2b04      	cmp	r3, #4
 8012690:	d003      	beq.n	801269a <tcp_close_shutdown+0x36>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	7d1b      	ldrb	r3, [r3, #20]
 8012696:	2b07      	cmp	r3, #7
 8012698:	d15e      	bne.n	8012758 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d104      	bne.n	80126ac <tcp_close_shutdown+0x48>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80126a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80126aa:	d055      	beq.n	8012758 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	8b5b      	ldrh	r3, [r3, #26]
 80126b0:	f003 0310 	and.w	r3, r3, #16
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d106      	bne.n	80126c6 <tcp_close_shutdown+0x62>
 80126b8:	4b52      	ldr	r3, [pc, #328]	@ (8012804 <tcp_close_shutdown+0x1a0>)
 80126ba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80126be:	4954      	ldr	r1, [pc, #336]	@ (8012810 <tcp_close_shutdown+0x1ac>)
 80126c0:	4852      	ldr	r0, [pc, #328]	@ (801280c <tcp_close_shutdown+0x1a8>)
 80126c2:	f00a fe5f 	bl	801d384 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80126ce:	687d      	ldr	r5, [r7, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3304      	adds	r3, #4
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	8ad2      	ldrh	r2, [r2, #22]
 80126d8:	6879      	ldr	r1, [r7, #4]
 80126da:	8b09      	ldrh	r1, [r1, #24]
 80126dc:	9102      	str	r1, [sp, #8]
 80126de:	9201      	str	r2, [sp, #4]
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	462b      	mov	r3, r5
 80126e4:	4622      	mov	r2, r4
 80126e6:	4601      	mov	r1, r0
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f004 fe8d 	bl	8017408 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f001 f8c8 	bl	8013884 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80126f4:	4b47      	ldr	r3, [pc, #284]	@ (8012814 <tcp_close_shutdown+0x1b0>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d105      	bne.n	801270a <tcp_close_shutdown+0xa6>
 80126fe:	4b45      	ldr	r3, [pc, #276]	@ (8012814 <tcp_close_shutdown+0x1b0>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	4a43      	ldr	r2, [pc, #268]	@ (8012814 <tcp_close_shutdown+0x1b0>)
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	e013      	b.n	8012732 <tcp_close_shutdown+0xce>
 801270a:	4b42      	ldr	r3, [pc, #264]	@ (8012814 <tcp_close_shutdown+0x1b0>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	e00c      	b.n	801272c <tcp_close_shutdown+0xc8>
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	68db      	ldr	r3, [r3, #12]
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	429a      	cmp	r2, r3
 801271a:	d104      	bne.n	8012726 <tcp_close_shutdown+0xc2>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68da      	ldr	r2, [r3, #12]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	60da      	str	r2, [r3, #12]
 8012724:	e005      	b.n	8012732 <tcp_close_shutdown+0xce>
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	60fb      	str	r3, [r7, #12]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1ef      	bne.n	8012712 <tcp_close_shutdown+0xae>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	60da      	str	r2, [r3, #12]
 8012738:	4b37      	ldr	r3, [pc, #220]	@ (8012818 <tcp_close_shutdown+0x1b4>)
 801273a:	2201      	movs	r2, #1
 801273c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801273e:	4b37      	ldr	r3, [pc, #220]	@ (801281c <tcp_close_shutdown+0x1b8>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d102      	bne.n	801274e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012748:	f003 fd5c 	bl	8016204 <tcp_trigger_input_pcb_close>
 801274c:	e002      	b.n	8012754 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff fed6 	bl	8012500 <tcp_free>
      }
      return ERR_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	e050      	b.n	80127fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	7d1b      	ldrb	r3, [r3, #20]
 801275c:	2b02      	cmp	r3, #2
 801275e:	d03b      	beq.n	80127d8 <tcp_close_shutdown+0x174>
 8012760:	2b02      	cmp	r3, #2
 8012762:	dc44      	bgt.n	80127ee <tcp_close_shutdown+0x18a>
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <tcp_close_shutdown+0x10a>
 8012768:	2b01      	cmp	r3, #1
 801276a:	d02a      	beq.n	80127c2 <tcp_close_shutdown+0x15e>
 801276c:	e03f      	b.n	80127ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	8adb      	ldrh	r3, [r3, #22]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d021      	beq.n	80127ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012776:	4b2a      	ldr	r3, [pc, #168]	@ (8012820 <tcp_close_shutdown+0x1bc>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	429a      	cmp	r2, r3
 801277e:	d105      	bne.n	801278c <tcp_close_shutdown+0x128>
 8012780:	4b27      	ldr	r3, [pc, #156]	@ (8012820 <tcp_close_shutdown+0x1bc>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	4a26      	ldr	r2, [pc, #152]	@ (8012820 <tcp_close_shutdown+0x1bc>)
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	e013      	b.n	80127b4 <tcp_close_shutdown+0x150>
 801278c:	4b24      	ldr	r3, [pc, #144]	@ (8012820 <tcp_close_shutdown+0x1bc>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	60bb      	str	r3, [r7, #8]
 8012792:	e00c      	b.n	80127ae <tcp_close_shutdown+0x14a>
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	429a      	cmp	r2, r3
 801279c:	d104      	bne.n	80127a8 <tcp_close_shutdown+0x144>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68da      	ldr	r2, [r3, #12]
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	60da      	str	r2, [r3, #12]
 80127a6:	e005      	b.n	80127b4 <tcp_close_shutdown+0x150>
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	60bb      	str	r3, [r7, #8]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1ef      	bne.n	8012794 <tcp_close_shutdown+0x130>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7ff fea0 	bl	8012500 <tcp_free>
      break;
 80127c0:	e01a      	b.n	80127f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7ff ff14 	bl	80125f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80127c8:	6879      	ldr	r1, [r7, #4]
 80127ca:	4816      	ldr	r0, [pc, #88]	@ (8012824 <tcp_close_shutdown+0x1c0>)
 80127cc:	f001 f8aa 	bl	8013924 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7ff feb1 	bl	8012538 <tcp_free_listen>
      break;
 80127d6:	e00f      	b.n	80127f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80127d8:	6879      	ldr	r1, [r7, #4]
 80127da:	480e      	ldr	r0, [pc, #56]	@ (8012814 <tcp_close_shutdown+0x1b0>)
 80127dc:	f001 f8a2 	bl	8013924 <tcp_pcb_remove>
 80127e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012818 <tcp_close_shutdown+0x1b4>)
 80127e2:	2201      	movs	r2, #1
 80127e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7ff fe8a 	bl	8012500 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80127ec:	e004      	b.n	80127f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 f81a 	bl	8012828 <tcp_close_shutdown_fin>
 80127f4:	4603      	mov	r3, r0
 80127f6:	e000      	b.n	80127fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80127f8:	2300      	movs	r3, #0
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bdb0      	pop	{r4, r5, r7, pc}
 8012802:	bf00      	nop
 8012804:	0802011c 	.word	0x0802011c
 8012808:	080201f0 	.word	0x080201f0
 801280c:	08020160 	.word	0x08020160
 8012810:	08020210 	.word	0x08020210
 8012814:	2400cc40 	.word	0x2400cc40
 8012818:	2400cc48 	.word	0x2400cc48
 801281c:	2400cc80 	.word	0x2400cc80
 8012820:	2400cc38 	.word	0x2400cc38
 8012824:	2400cc3c 	.word	0x2400cc3c

08012828 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d106      	bne.n	8012844 <tcp_close_shutdown_fin+0x1c>
 8012836:	4b2e      	ldr	r3, [pc, #184]	@ (80128f0 <tcp_close_shutdown_fin+0xc8>)
 8012838:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801283c:	492d      	ldr	r1, [pc, #180]	@ (80128f4 <tcp_close_shutdown_fin+0xcc>)
 801283e:	482e      	ldr	r0, [pc, #184]	@ (80128f8 <tcp_close_shutdown_fin+0xd0>)
 8012840:	f00a fda0 	bl	801d384 <iprintf>

  switch (pcb->state) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7d1b      	ldrb	r3, [r3, #20]
 8012848:	2b07      	cmp	r3, #7
 801284a:	d020      	beq.n	801288e <tcp_close_shutdown_fin+0x66>
 801284c:	2b07      	cmp	r3, #7
 801284e:	dc2b      	bgt.n	80128a8 <tcp_close_shutdown_fin+0x80>
 8012850:	2b03      	cmp	r3, #3
 8012852:	d002      	beq.n	801285a <tcp_close_shutdown_fin+0x32>
 8012854:	2b04      	cmp	r3, #4
 8012856:	d00d      	beq.n	8012874 <tcp_close_shutdown_fin+0x4c>
 8012858:	e026      	b.n	80128a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f003 fee2 	bl	8016624 <tcp_send_fin>
 8012860:	4603      	mov	r3, r0
 8012862:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d11f      	bne.n	80128ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2205      	movs	r2, #5
 8012870:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012872:	e01b      	b.n	80128ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f003 fed5 	bl	8016624 <tcp_send_fin>
 801287a:	4603      	mov	r3, r0
 801287c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d114      	bne.n	80128b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2205      	movs	r2, #5
 801288a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801288c:	e010      	b.n	80128b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f003 fec8 	bl	8016624 <tcp_send_fin>
 8012894:	4603      	mov	r3, r0
 8012896:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d109      	bne.n	80128b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2209      	movs	r2, #9
 80128a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80128a6:	e005      	b.n	80128b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80128a8:	2300      	movs	r3, #0
 80128aa:	e01c      	b.n	80128e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80128ac:	bf00      	nop
 80128ae:	e002      	b.n	80128b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80128b0:	bf00      	nop
 80128b2:	e000      	b.n	80128b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80128b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80128b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d103      	bne.n	80128c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f003 ffee 	bl	80168a0 <tcp_output>
 80128c4:	e00d      	b.n	80128e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80128c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ce:	d108      	bne.n	80128e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	8b5b      	ldrh	r3, [r3, #26]
 80128d4:	f043 0308 	orr.w	r3, r3, #8
 80128d8:	b29a      	uxth	r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	e001      	b.n	80128e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80128e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	0802011c 	.word	0x0802011c
 80128f4:	080201cc 	.word	0x080201cc
 80128f8:	08020160 	.word	0x08020160

080128fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d109      	bne.n	801291e <tcp_close+0x22>
 801290a:	4b0f      	ldr	r3, [pc, #60]	@ (8012948 <tcp_close+0x4c>)
 801290c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012910:	490e      	ldr	r1, [pc, #56]	@ (801294c <tcp_close+0x50>)
 8012912:	480f      	ldr	r0, [pc, #60]	@ (8012950 <tcp_close+0x54>)
 8012914:	f00a fd36 	bl	801d384 <iprintf>
 8012918:	f06f 030f 	mvn.w	r3, #15
 801291c:	e00f      	b.n	801293e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	7d1b      	ldrb	r3, [r3, #20]
 8012922:	2b01      	cmp	r3, #1
 8012924:	d006      	beq.n	8012934 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	8b5b      	ldrh	r3, [r3, #26]
 801292a:	f043 0310 	orr.w	r3, r3, #16
 801292e:	b29a      	uxth	r2, r3
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012934:	2101      	movs	r1, #1
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff fe94 	bl	8012664 <tcp_close_shutdown>
 801293c:	4603      	mov	r3, r0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	0802011c 	.word	0x0802011c
 801294c:	0802022c 	.word	0x0802022c
 8012950:	08020160 	.word	0x08020160

08012954 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b08e      	sub	sp, #56	@ 0x38
 8012958:	af04      	add	r7, sp, #16
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d107      	bne.n	8012974 <tcp_abandon+0x20>
 8012964:	4b52      	ldr	r3, [pc, #328]	@ (8012ab0 <tcp_abandon+0x15c>)
 8012966:	f240 223d 	movw	r2, #573	@ 0x23d
 801296a:	4952      	ldr	r1, [pc, #328]	@ (8012ab4 <tcp_abandon+0x160>)
 801296c:	4852      	ldr	r0, [pc, #328]	@ (8012ab8 <tcp_abandon+0x164>)
 801296e:	f00a fd09 	bl	801d384 <iprintf>
 8012972:	e099      	b.n	8012aa8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	7d1b      	ldrb	r3, [r3, #20]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d106      	bne.n	801298a <tcp_abandon+0x36>
 801297c:	4b4c      	ldr	r3, [pc, #304]	@ (8012ab0 <tcp_abandon+0x15c>)
 801297e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012982:	494e      	ldr	r1, [pc, #312]	@ (8012abc <tcp_abandon+0x168>)
 8012984:	484c      	ldr	r0, [pc, #304]	@ (8012ab8 <tcp_abandon+0x164>)
 8012986:	f00a fcfd 	bl	801d384 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	7d1b      	ldrb	r3, [r3, #20]
 801298e:	2b0a      	cmp	r3, #10
 8012990:	d107      	bne.n	80129a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012992:	6879      	ldr	r1, [r7, #4]
 8012994:	484a      	ldr	r0, [pc, #296]	@ (8012ac0 <tcp_abandon+0x16c>)
 8012996:	f000 ffc5 	bl	8013924 <tcp_pcb_remove>
    tcp_free(pcb);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f7ff fdb0 	bl	8012500 <tcp_free>
 80129a0:	e082      	b.n	8012aa8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	7d1b      	ldrb	r3, [r3, #20]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d126      	bne.n	8012a1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	8adb      	ldrh	r3, [r3, #22]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d02e      	beq.n	8012a32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80129d4:	4b3b      	ldr	r3, [pc, #236]	@ (8012ac4 <tcp_abandon+0x170>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d105      	bne.n	80129ea <tcp_abandon+0x96>
 80129de:	4b39      	ldr	r3, [pc, #228]	@ (8012ac4 <tcp_abandon+0x170>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	4a37      	ldr	r2, [pc, #220]	@ (8012ac4 <tcp_abandon+0x170>)
 80129e6:	6013      	str	r3, [r2, #0]
 80129e8:	e013      	b.n	8012a12 <tcp_abandon+0xbe>
 80129ea:	4b36      	ldr	r3, [pc, #216]	@ (8012ac4 <tcp_abandon+0x170>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	61fb      	str	r3, [r7, #28]
 80129f0:	e00c      	b.n	8012a0c <tcp_abandon+0xb8>
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d104      	bne.n	8012a06 <tcp_abandon+0xb2>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	68da      	ldr	r2, [r3, #12]
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	60da      	str	r2, [r3, #12]
 8012a04:	e005      	b.n	8012a12 <tcp_abandon+0xbe>
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	61fb      	str	r3, [r7, #28]
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d1ef      	bne.n	80129f2 <tcp_abandon+0x9e>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2200      	movs	r2, #0
 8012a16:	60da      	str	r2, [r3, #12]
 8012a18:	e00b      	b.n	8012a32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	8adb      	ldrh	r3, [r3, #22]
 8012a22:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012a24:	6879      	ldr	r1, [r7, #4]
 8012a26:	4828      	ldr	r0, [pc, #160]	@ (8012ac8 <tcp_abandon+0x174>)
 8012a28:	f000 ff7c 	bl	8013924 <tcp_pcb_remove>
 8012a2c:	4b27      	ldr	r3, [pc, #156]	@ (8012acc <tcp_abandon+0x178>)
 8012a2e:	2201      	movs	r2, #1
 8012a30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d004      	beq.n	8012a44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 fd1e 	bl	8013480 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d004      	beq.n	8012a56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a50:	4618      	mov	r0, r3
 8012a52:	f000 fd15 	bl	8013480 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d004      	beq.n	8012a68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a62:	4618      	mov	r0, r3
 8012a64:	f000 fd0c 	bl	8013480 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00e      	beq.n	8012a8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012a6e:	6879      	ldr	r1, [r7, #4]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3304      	adds	r3, #4
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	8b12      	ldrh	r2, [r2, #24]
 8012a78:	9202      	str	r2, [sp, #8]
 8012a7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012a7c:	9201      	str	r2, [sp, #4]
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	460b      	mov	r3, r1
 8012a82:	697a      	ldr	r2, [r7, #20]
 8012a84:	69b9      	ldr	r1, [r7, #24]
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f004 fcbe 	bl	8017408 <tcp_rst>
    }
    last_state = pcb->state;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	7d1b      	ldrb	r3, [r3, #20]
 8012a90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7ff fd34 	bl	8012500 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d004      	beq.n	8012aa8 <tcp_abandon+0x154>
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	f06f 010c 	mvn.w	r1, #12
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	4798      	blx	r3
  }
}
 8012aa8:	3728      	adds	r7, #40	@ 0x28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0802011c 	.word	0x0802011c
 8012ab4:	08020260 	.word	0x08020260
 8012ab8:	08020160 	.word	0x08020160
 8012abc:	0802027c 	.word	0x0802027c
 8012ac0:	2400cc44 	.word	0x2400cc44
 8012ac4:	2400cc38 	.word	0x2400cc38
 8012ac8:	2400cc40 	.word	0x2400cc40
 8012acc:	2400cc48 	.word	0x2400cc48

08012ad0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012ad8:	2101      	movs	r1, #1
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7ff ff3a 	bl	8012954 <tcp_abandon>
}
 8012ae0:	bf00      	nop
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d106      	bne.n	8012b04 <tcp_update_rcv_ann_wnd+0x1c>
 8012af6:	4b25      	ldr	r3, [pc, #148]	@ (8012b8c <tcp_update_rcv_ann_wnd+0xa4>)
 8012af8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012afc:	4924      	ldr	r1, [pc, #144]	@ (8012b90 <tcp_update_rcv_ann_wnd+0xa8>)
 8012afe:	4825      	ldr	r0, [pc, #148]	@ (8012b94 <tcp_update_rcv_ann_wnd+0xac>)
 8012b00:	f00a fc40 	bl	801d384 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012b0c:	4413      	add	r3, r2
 8012b0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012b18:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012b1c:	bf28      	it	cs
 8012b1e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8012b22:	b292      	uxth	r2, r2
 8012b24:	4413      	add	r3, r2
 8012b26:	68fa      	ldr	r2, [r7, #12]
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	db08      	blt.n	8012b40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	e020      	b.n	8012b82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b48:	1ad3      	subs	r3, r2, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	dd03      	ble.n	8012b56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2200      	movs	r2, #0
 8012b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012b54:	e014      	b.n	8012b80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b68:	d306      	bcc.n	8012b78 <tcp_update_rcv_ann_wnd+0x90>
 8012b6a:	4b08      	ldr	r3, [pc, #32]	@ (8012b8c <tcp_update_rcv_ann_wnd+0xa4>)
 8012b6c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012b70:	4909      	ldr	r1, [pc, #36]	@ (8012b98 <tcp_update_rcv_ann_wnd+0xb0>)
 8012b72:	4808      	ldr	r0, [pc, #32]	@ (8012b94 <tcp_update_rcv_ann_wnd+0xac>)
 8012b74:	f00a fc06 	bl	801d384 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012b80:	2300      	movs	r3, #0
  }
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	0802011c 	.word	0x0802011c
 8012b90:	08020378 	.word	0x08020378
 8012b94:	08020160 	.word	0x08020160
 8012b98:	0802039c 	.word	0x0802039c

08012b9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d107      	bne.n	8012bbe <tcp_recved+0x22>
 8012bae:	4b1f      	ldr	r3, [pc, #124]	@ (8012c2c <tcp_recved+0x90>)
 8012bb0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012bb4:	491e      	ldr	r1, [pc, #120]	@ (8012c30 <tcp_recved+0x94>)
 8012bb6:	481f      	ldr	r0, [pc, #124]	@ (8012c34 <tcp_recved+0x98>)
 8012bb8:	f00a fbe4 	bl	801d384 <iprintf>
 8012bbc:	e032      	b.n	8012c24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	7d1b      	ldrb	r3, [r3, #20]
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d106      	bne.n	8012bd4 <tcp_recved+0x38>
 8012bc6:	4b19      	ldr	r3, [pc, #100]	@ (8012c2c <tcp_recved+0x90>)
 8012bc8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012bcc:	491a      	ldr	r1, [pc, #104]	@ (8012c38 <tcp_recved+0x9c>)
 8012bce:	4819      	ldr	r0, [pc, #100]	@ (8012c34 <tcp_recved+0x98>)
 8012bd0:	f00a fbd8 	bl	801d384 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012bd8:	887b      	ldrh	r3, [r7, #2]
 8012bda:	4413      	add	r3, r2
 8012bdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012bde:	89fb      	ldrh	r3, [r7, #14]
 8012be0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012be4:	d804      	bhi.n	8012bf0 <tcp_recved+0x54>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bea:	89fa      	ldrh	r2, [r7, #14]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d204      	bcs.n	8012bfa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012bf8:	e002      	b.n	8012c00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	89fa      	ldrh	r2, [r7, #14]
 8012bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7ff ff71 	bl	8012ae8 <tcp_update_rcv_ann_wnd>
 8012c06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012c0e:	d309      	bcc.n	8012c24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	8b5b      	ldrh	r3, [r3, #26]
 8012c14:	f043 0302 	orr.w	r3, r3, #2
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f003 fe3e 	bl	80168a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	0802011c 	.word	0x0802011c
 8012c30:	080203b8 	.word	0x080203b8
 8012c34:	08020160 	.word	0x08020160
 8012c38:	080203d0 	.word	0x080203d0

08012c3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012c3c:	b5b0      	push	{r4, r5, r7, lr}
 8012c3e:	b090      	sub	sp, #64	@ 0x40
 8012c40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012c42:	2300      	movs	r3, #0
 8012c44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012c48:	4b95      	ldr	r3, [pc, #596]	@ (8012ea0 <tcp_slowtmr+0x264>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	4a94      	ldr	r2, [pc, #592]	@ (8012ea0 <tcp_slowtmr+0x264>)
 8012c50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012c52:	4b94      	ldr	r3, [pc, #592]	@ (8012ea4 <tcp_slowtmr+0x268>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	3301      	adds	r3, #1
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	4b92      	ldr	r3, [pc, #584]	@ (8012ea4 <tcp_slowtmr+0x268>)
 8012c5c:	701a      	strb	r2, [r3, #0]
 8012c5e:	e000      	b.n	8012c62 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012c60:	bf00      	nop
  prev = NULL;
 8012c62:	2300      	movs	r3, #0
 8012c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8012c66:	4b90      	ldr	r3, [pc, #576]	@ (8012ea8 <tcp_slowtmr+0x26c>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012c6c:	e29d      	b.n	80131aa <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c70:	7d1b      	ldrb	r3, [r3, #20]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <tcp_slowtmr+0x48>
 8012c76:	4b8d      	ldr	r3, [pc, #564]	@ (8012eac <tcp_slowtmr+0x270>)
 8012c78:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012c7c:	498c      	ldr	r1, [pc, #560]	@ (8012eb0 <tcp_slowtmr+0x274>)
 8012c7e:	488d      	ldr	r0, [pc, #564]	@ (8012eb4 <tcp_slowtmr+0x278>)
 8012c80:	f00a fb80 	bl	801d384 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c86:	7d1b      	ldrb	r3, [r3, #20]
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d106      	bne.n	8012c9a <tcp_slowtmr+0x5e>
 8012c8c:	4b87      	ldr	r3, [pc, #540]	@ (8012eac <tcp_slowtmr+0x270>)
 8012c8e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012c92:	4989      	ldr	r1, [pc, #548]	@ (8012eb8 <tcp_slowtmr+0x27c>)
 8012c94:	4887      	ldr	r0, [pc, #540]	@ (8012eb4 <tcp_slowtmr+0x278>)
 8012c96:	f00a fb75 	bl	801d384 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c9c:	7d1b      	ldrb	r3, [r3, #20]
 8012c9e:	2b0a      	cmp	r3, #10
 8012ca0:	d106      	bne.n	8012cb0 <tcp_slowtmr+0x74>
 8012ca2:	4b82      	ldr	r3, [pc, #520]	@ (8012eac <tcp_slowtmr+0x270>)
 8012ca4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012ca8:	4984      	ldr	r1, [pc, #528]	@ (8012ebc <tcp_slowtmr+0x280>)
 8012caa:	4882      	ldr	r0, [pc, #520]	@ (8012eb4 <tcp_slowtmr+0x278>)
 8012cac:	f00a fb6a 	bl	801d384 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb2:	7f9a      	ldrb	r2, [r3, #30]
 8012cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8012ea4 <tcp_slowtmr+0x268>)
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d105      	bne.n	8012cc8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8012cc6:	e270      	b.n	80131aa <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8012cc8:	4b76      	ldr	r3, [pc, #472]	@ (8012ea4 <tcp_slowtmr+0x268>)
 8012cca:	781a      	ldrb	r2, [r3, #0]
 8012ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cce:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cde:	7d1b      	ldrb	r3, [r3, #20]
 8012ce0:	2b02      	cmp	r3, #2
 8012ce2:	d10a      	bne.n	8012cfa <tcp_slowtmr+0xbe>
 8012ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012cea:	2b05      	cmp	r3, #5
 8012cec:	d905      	bls.n	8012cfa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012cf8:	e11e      	b.n	8012f38 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d00:	2b0b      	cmp	r3, #11
 8012d02:	d905      	bls.n	8012d10 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8012d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d08:	3301      	adds	r3, #1
 8012d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d0e:	e113      	b.n	8012f38 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d075      	beq.n	8012e06 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d006      	beq.n	8012d30 <tcp_slowtmr+0xf4>
 8012d22:	4b62      	ldr	r3, [pc, #392]	@ (8012eac <tcp_slowtmr+0x270>)
 8012d24:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012d28:	4965      	ldr	r1, [pc, #404]	@ (8012ec0 <tcp_slowtmr+0x284>)
 8012d2a:	4862      	ldr	r0, [pc, #392]	@ (8012eb4 <tcp_slowtmr+0x278>)
 8012d2c:	f00a fb2a 	bl	801d384 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d106      	bne.n	8012d46 <tcp_slowtmr+0x10a>
 8012d38:	4b5c      	ldr	r3, [pc, #368]	@ (8012eac <tcp_slowtmr+0x270>)
 8012d3a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012d3e:	4961      	ldr	r1, [pc, #388]	@ (8012ec4 <tcp_slowtmr+0x288>)
 8012d40:	485c      	ldr	r0, [pc, #368]	@ (8012eb4 <tcp_slowtmr+0x278>)
 8012d42:	f00a fb1f 	bl	801d384 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d48:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012d4c:	2b0b      	cmp	r3, #11
 8012d4e:	d905      	bls.n	8012d5c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d54:	3301      	adds	r3, #1
 8012d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d5a:	e0ed      	b.n	8012f38 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012d62:	3b01      	subs	r3, #1
 8012d64:	4a58      	ldr	r2, [pc, #352]	@ (8012ec8 <tcp_slowtmr+0x28c>)
 8012d66:	5cd3      	ldrb	r3, [r2, r3]
 8012d68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012d70:	7c7a      	ldrb	r2, [r7, #17]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d907      	bls.n	8012d86 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8012d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d82:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8012d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012d8c:	7c7a      	ldrb	r2, [r7, #17]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	f200 80d2 	bhi.w	8012f38 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8012d94:	2301      	movs	r3, #1
 8012d96:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d108      	bne.n	8012db4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012da2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012da4:	f004 fc24 	bl	80175f0 <tcp_zero_window_probe>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d014      	beq.n	8012dd8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012dae:	2300      	movs	r3, #0
 8012db0:	623b      	str	r3, [r7, #32]
 8012db2:	e011      	b.n	8012dd8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012dba:	4619      	mov	r1, r3
 8012dbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dbe:	f003 fae9 	bl	8016394 <tcp_split_unsent_seg>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d107      	bne.n	8012dd8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012dc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dca:	f003 fd69 	bl	80168a0 <tcp_output>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 80ac 	beq.w	8012f38 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012de2:	2200      	movs	r2, #0
 8012de4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012dee:	2b06      	cmp	r3, #6
 8012df0:	f200 80a2 	bhi.w	8012f38 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	b2da      	uxtb	r2, r3
 8012dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012e04:	e098      	b.n	8012f38 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	db0f      	blt.n	8012e30 <tcp_slowtmr+0x1f4>
 8012e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e16:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d008      	beq.n	8012e30 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	3301      	adds	r3, #1
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	b21a      	sxth	r2, r3
 8012e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e32:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	db7b      	blt.n	8012f38 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012e40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e42:	f004 f821 	bl	8016e88 <tcp_rexmit_rto_prepare>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d007      	beq.n	8012e5c <tcp_slowtmr+0x220>
 8012e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d171      	bne.n	8012f38 <tcp_slowtmr+0x2fc>
 8012e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d06d      	beq.n	8012f38 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e5e:	7d1b      	ldrb	r3, [r3, #20]
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d03a      	beq.n	8012eda <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e6a:	2b0c      	cmp	r3, #12
 8012e6c:	bf28      	it	cs
 8012e6e:	230c      	movcs	r3, #12
 8012e70:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012e78:	10db      	asrs	r3, r3, #3
 8012e7a:	b21b      	sxth	r3, r3
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012e84:	4413      	add	r3, r2
 8012e86:	7efa      	ldrb	r2, [r7, #27]
 8012e88:	4910      	ldr	r1, [pc, #64]	@ (8012ecc <tcp_slowtmr+0x290>)
 8012e8a:	5c8a      	ldrb	r2, [r1, r2]
 8012e8c:	4093      	lsls	r3, r2
 8012e8e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012e96:	4293      	cmp	r3, r2
 8012e98:	dc1a      	bgt.n	8012ed0 <tcp_slowtmr+0x294>
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	b21a      	sxth	r2, r3
 8012e9e:	e019      	b.n	8012ed4 <tcp_slowtmr+0x298>
 8012ea0:	2400cc34 	.word	0x2400cc34
 8012ea4:	2400cc4a 	.word	0x2400cc4a
 8012ea8:	2400cc40 	.word	0x2400cc40
 8012eac:	0802011c 	.word	0x0802011c
 8012eb0:	08020460 	.word	0x08020460
 8012eb4:	08020160 	.word	0x08020160
 8012eb8:	0802048c 	.word	0x0802048c
 8012ebc:	080204b8 	.word	0x080204b8
 8012ec0:	080204e8 	.word	0x080204e8
 8012ec4:	0802051c 	.word	0x0802051c
 8012ec8:	08022580 	.word	0x08022580
 8012ecc:	08022570 	.word	0x08022570
 8012ed0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012edc:	2200      	movs	r2, #0
 8012ede:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012eec:	4293      	cmp	r3, r2
 8012eee:	bf28      	it	cs
 8012ef0:	4613      	movcs	r3, r2
 8012ef2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012ef4:	8a7b      	ldrh	r3, [r7, #18]
 8012ef6:	085b      	lsrs	r3, r3, #1
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012efc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f0a:	005b      	lsls	r3, r3, #1
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d206      	bcs.n	8012f20 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f16:	005b      	lsls	r3, r3, #1
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f22:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012f32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f34:	f004 f818 	bl	8016f68 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f3a:	7d1b      	ldrb	r3, [r3, #20]
 8012f3c:	2b06      	cmp	r3, #6
 8012f3e:	d111      	bne.n	8012f64 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f42:	8b5b      	ldrh	r3, [r3, #26]
 8012f44:	f003 0310 	and.w	r3, r3, #16
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00b      	beq.n	8012f64 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80131c0 <tcp_slowtmr+0x584>)
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f52:	6a1b      	ldr	r3, [r3, #32]
 8012f54:	1ad3      	subs	r3, r2, r3
 8012f56:	2b28      	cmp	r3, #40	@ 0x28
 8012f58:	d904      	bls.n	8012f64 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f5e:	3301      	adds	r3, #1
 8012f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f66:	7a5b      	ldrb	r3, [r3, #9]
 8012f68:	f003 0308 	and.w	r3, r3, #8
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d04a      	beq.n	8013006 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f72:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012f74:	2b04      	cmp	r3, #4
 8012f76:	d003      	beq.n	8012f80 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012f7c:	2b07      	cmp	r3, #7
 8012f7e:	d142      	bne.n	8013006 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f80:	4b8f      	ldr	r3, [pc, #572]	@ (80131c0 <tcp_slowtmr+0x584>)
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f86:	6a1b      	ldr	r3, [r3, #32]
 8012f88:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f8c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012f90:	4b8c      	ldr	r3, [pc, #560]	@ (80131c4 <tcp_slowtmr+0x588>)
 8012f92:	440b      	add	r3, r1
 8012f94:	498c      	ldr	r1, [pc, #560]	@ (80131c8 <tcp_slowtmr+0x58c>)
 8012f96:	fba1 1303 	umull	r1, r3, r1, r3
 8012f9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d90a      	bls.n	8012fb6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012faa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012fae:	3301      	adds	r3, #1
 8012fb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012fb4:	e027      	b.n	8013006 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fb6:	4b82      	ldr	r3, [pc, #520]	@ (80131c0 <tcp_slowtmr+0x584>)
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fbc:	6a1b      	ldr	r3, [r3, #32]
 8012fbe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012fcc:	4618      	mov	r0, r3
 8012fce:	4b7f      	ldr	r3, [pc, #508]	@ (80131cc <tcp_slowtmr+0x590>)
 8012fd0:	fb00 f303 	mul.w	r3, r0, r3
 8012fd4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012fd6:	497c      	ldr	r1, [pc, #496]	@ (80131c8 <tcp_slowtmr+0x58c>)
 8012fd8:	fba1 1303 	umull	r1, r3, r1, r3
 8012fdc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d911      	bls.n	8013006 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012fe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012fe4:	f004 fac4 	bl	8017570 <tcp_keepalive>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012fee:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d107      	bne.n	8013006 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ff8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	b2da      	uxtb	r2, r3
 8013000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013002:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8013006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801300a:	2b00      	cmp	r3, #0
 801300c:	d011      	beq.n	8013032 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801300e:	4b6c      	ldr	r3, [pc, #432]	@ (80131c0 <tcp_slowtmr+0x584>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013014:	6a1b      	ldr	r3, [r3, #32]
 8013016:	1ad2      	subs	r2, r2, r3
 8013018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801301a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801301e:	4619      	mov	r1, r3
 8013020:	460b      	mov	r3, r1
 8013022:	005b      	lsls	r3, r3, #1
 8013024:	440b      	add	r3, r1
 8013026:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013028:	429a      	cmp	r2, r3
 801302a:	d302      	bcc.n	8013032 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801302c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801302e:	f000 fddd 	bl	8013bec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8013032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013034:	7d1b      	ldrb	r3, [r3, #20]
 8013036:	2b03      	cmp	r3, #3
 8013038:	d10b      	bne.n	8013052 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801303a:	4b61      	ldr	r3, [pc, #388]	@ (80131c0 <tcp_slowtmr+0x584>)
 801303c:	681a      	ldr	r2, [r3, #0]
 801303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013040:	6a1b      	ldr	r3, [r3, #32]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	2b28      	cmp	r3, #40	@ 0x28
 8013046:	d904      	bls.n	8013052 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8013048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801304c:	3301      	adds	r3, #1
 801304e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013054:	7d1b      	ldrb	r3, [r3, #20]
 8013056:	2b09      	cmp	r3, #9
 8013058:	d10b      	bne.n	8013072 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801305a:	4b59      	ldr	r3, [pc, #356]	@ (80131c0 <tcp_slowtmr+0x584>)
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013060:	6a1b      	ldr	r3, [r3, #32]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	2bf0      	cmp	r3, #240	@ 0xf0
 8013066:	d904      	bls.n	8013072 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801306c:	3301      	adds	r3, #1
 801306e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013076:	2b00      	cmp	r3, #0
 8013078:	d060      	beq.n	801313c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801307a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013080:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013082:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013084:	f000 fbfe 	bl	8013884 <tcp_pcb_purge>
      if (prev != NULL) {
 8013088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308a:	2b00      	cmp	r3, #0
 801308c:	d010      	beq.n	80130b0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801308e:	4b50      	ldr	r3, [pc, #320]	@ (80131d0 <tcp_slowtmr+0x594>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013094:	429a      	cmp	r2, r3
 8013096:	d106      	bne.n	80130a6 <tcp_slowtmr+0x46a>
 8013098:	4b4e      	ldr	r3, [pc, #312]	@ (80131d4 <tcp_slowtmr+0x598>)
 801309a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801309e:	494e      	ldr	r1, [pc, #312]	@ (80131d8 <tcp_slowtmr+0x59c>)
 80130a0:	484e      	ldr	r0, [pc, #312]	@ (80131dc <tcp_slowtmr+0x5a0>)
 80130a2:	f00a f96f 	bl	801d384 <iprintf>
        prev->next = pcb->next;
 80130a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a8:	68da      	ldr	r2, [r3, #12]
 80130aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ac:	60da      	str	r2, [r3, #12]
 80130ae:	e00f      	b.n	80130d0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80130b0:	4b47      	ldr	r3, [pc, #284]	@ (80131d0 <tcp_slowtmr+0x594>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d006      	beq.n	80130c8 <tcp_slowtmr+0x48c>
 80130ba:	4b46      	ldr	r3, [pc, #280]	@ (80131d4 <tcp_slowtmr+0x598>)
 80130bc:	f240 5271 	movw	r2, #1393	@ 0x571
 80130c0:	4947      	ldr	r1, [pc, #284]	@ (80131e0 <tcp_slowtmr+0x5a4>)
 80130c2:	4846      	ldr	r0, [pc, #280]	@ (80131dc <tcp_slowtmr+0x5a0>)
 80130c4:	f00a f95e 	bl	801d384 <iprintf>
        tcp_active_pcbs = pcb->next;
 80130c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	4a40      	ldr	r2, [pc, #256]	@ (80131d0 <tcp_slowtmr+0x594>)
 80130ce:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80130d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d013      	beq.n	8013100 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80130d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130da:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80130dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130e0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80130e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e4:	3304      	adds	r3, #4
 80130e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130e8:	8ad2      	ldrh	r2, [r2, #22]
 80130ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80130ec:	8b09      	ldrh	r1, [r1, #24]
 80130ee:	9102      	str	r1, [sp, #8]
 80130f0:	9201      	str	r2, [sp, #4]
 80130f2:	9300      	str	r3, [sp, #0]
 80130f4:	462b      	mov	r3, r5
 80130f6:	4622      	mov	r2, r4
 80130f8:	4601      	mov	r1, r0
 80130fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80130fc:	f004 f984 	bl	8017408 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013102:	691b      	ldr	r3, [r3, #16]
 8013104:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013108:	7d1b      	ldrb	r3, [r3, #20]
 801310a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801310c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801310e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013116:	6838      	ldr	r0, [r7, #0]
 8013118:	f7ff f9f2 	bl	8012500 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801311c:	4b31      	ldr	r3, [pc, #196]	@ (80131e4 <tcp_slowtmr+0x5a8>)
 801311e:	2200      	movs	r2, #0
 8013120:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d004      	beq.n	8013132 <tcp_slowtmr+0x4f6>
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f06f 010c 	mvn.w	r1, #12
 801312e:	68b8      	ldr	r0, [r7, #8]
 8013130:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013132:	4b2c      	ldr	r3, [pc, #176]	@ (80131e4 <tcp_slowtmr+0x5a8>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d037      	beq.n	80131aa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801313a:	e592      	b.n	8012c62 <tcp_slowtmr+0x26>
      prev = pcb;
 801313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801313e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013148:	7f1b      	ldrb	r3, [r3, #28]
 801314a:	3301      	adds	r3, #1
 801314c:	b2da      	uxtb	r2, r3
 801314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013150:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013154:	7f1a      	ldrb	r2, [r3, #28]
 8013156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013158:	7f5b      	ldrb	r3, [r3, #29]
 801315a:	429a      	cmp	r2, r3
 801315c:	d325      	bcc.n	80131aa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013160:	2200      	movs	r2, #0
 8013162:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013164:	4b1f      	ldr	r3, [pc, #124]	@ (80131e4 <tcp_slowtmr+0x5a8>)
 8013166:	2200      	movs	r2, #0
 8013168:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013170:	2b00      	cmp	r3, #0
 8013172:	d00b      	beq.n	801318c <tcp_slowtmr+0x550>
 8013174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801317a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801317c:	6912      	ldr	r2, [r2, #16]
 801317e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013180:	4610      	mov	r0, r2
 8013182:	4798      	blx	r3
 8013184:	4603      	mov	r3, r0
 8013186:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801318a:	e002      	b.n	8013192 <tcp_slowtmr+0x556>
 801318c:	2300      	movs	r3, #0
 801318e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013192:	4b14      	ldr	r3, [pc, #80]	@ (80131e4 <tcp_slowtmr+0x5a8>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	f47f ad62 	bne.w	8012c60 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801319c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d102      	bne.n	80131aa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80131a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131a6:	f003 fb7b 	bl	80168a0 <tcp_output>
  while (pcb != NULL) {
 80131aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	f47f ad5e 	bne.w	8012c6e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80131b6:	4b0c      	ldr	r3, [pc, #48]	@ (80131e8 <tcp_slowtmr+0x5ac>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80131bc:	e069      	b.n	8013292 <tcp_slowtmr+0x656>
 80131be:	bf00      	nop
 80131c0:	2400cc34 	.word	0x2400cc34
 80131c4:	000a4cb8 	.word	0x000a4cb8
 80131c8:	10624dd3 	.word	0x10624dd3
 80131cc:	000124f8 	.word	0x000124f8
 80131d0:	2400cc40 	.word	0x2400cc40
 80131d4:	0802011c 	.word	0x0802011c
 80131d8:	08020554 	.word	0x08020554
 80131dc:	08020160 	.word	0x08020160
 80131e0:	08020580 	.word	0x08020580
 80131e4:	2400cc48 	.word	0x2400cc48
 80131e8:	2400cc44 	.word	0x2400cc44
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80131ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ee:	7d1b      	ldrb	r3, [r3, #20]
 80131f0:	2b0a      	cmp	r3, #10
 80131f2:	d006      	beq.n	8013202 <tcp_slowtmr+0x5c6>
 80131f4:	4b2b      	ldr	r3, [pc, #172]	@ (80132a4 <tcp_slowtmr+0x668>)
 80131f6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80131fa:	492b      	ldr	r1, [pc, #172]	@ (80132a8 <tcp_slowtmr+0x66c>)
 80131fc:	482b      	ldr	r0, [pc, #172]	@ (80132ac <tcp_slowtmr+0x670>)
 80131fe:	f00a f8c1 	bl	801d384 <iprintf>
    pcb_remove = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013208:	4b29      	ldr	r3, [pc, #164]	@ (80132b0 <tcp_slowtmr+0x674>)
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320e:	6a1b      	ldr	r3, [r3, #32]
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2bf0      	cmp	r3, #240	@ 0xf0
 8013214:	d904      	bls.n	8013220 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801321a:	3301      	adds	r3, #1
 801321c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013224:	2b00      	cmp	r3, #0
 8013226:	d02f      	beq.n	8013288 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801322a:	f000 fb2b 	bl	8013884 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013230:	2b00      	cmp	r3, #0
 8013232:	d010      	beq.n	8013256 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013234:	4b1f      	ldr	r3, [pc, #124]	@ (80132b4 <tcp_slowtmr+0x678>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801323a:	429a      	cmp	r2, r3
 801323c:	d106      	bne.n	801324c <tcp_slowtmr+0x610>
 801323e:	4b19      	ldr	r3, [pc, #100]	@ (80132a4 <tcp_slowtmr+0x668>)
 8013240:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013244:	491c      	ldr	r1, [pc, #112]	@ (80132b8 <tcp_slowtmr+0x67c>)
 8013246:	4819      	ldr	r0, [pc, #100]	@ (80132ac <tcp_slowtmr+0x670>)
 8013248:	f00a f89c 	bl	801d384 <iprintf>
        prev->next = pcb->next;
 801324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324e:	68da      	ldr	r2, [r3, #12]
 8013250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013252:	60da      	str	r2, [r3, #12]
 8013254:	e00f      	b.n	8013276 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013256:	4b17      	ldr	r3, [pc, #92]	@ (80132b4 <tcp_slowtmr+0x678>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801325c:	429a      	cmp	r2, r3
 801325e:	d006      	beq.n	801326e <tcp_slowtmr+0x632>
 8013260:	4b10      	ldr	r3, [pc, #64]	@ (80132a4 <tcp_slowtmr+0x668>)
 8013262:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8013266:	4915      	ldr	r1, [pc, #84]	@ (80132bc <tcp_slowtmr+0x680>)
 8013268:	4810      	ldr	r0, [pc, #64]	@ (80132ac <tcp_slowtmr+0x670>)
 801326a:	f00a f88b 	bl	801d384 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	4a10      	ldr	r2, [pc, #64]	@ (80132b4 <tcp_slowtmr+0x678>)
 8013274:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013278:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013280:	69f8      	ldr	r0, [r7, #28]
 8013282:	f7ff f93d 	bl	8012500 <tcp_free>
 8013286:	e004      	b.n	8013292 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801328a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801328c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801328e:	68db      	ldr	r3, [r3, #12]
 8013290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1a9      	bne.n	80131ec <tcp_slowtmr+0x5b0>
    }
  }
}
 8013298:	bf00      	nop
 801329a:	bf00      	nop
 801329c:	3730      	adds	r7, #48	@ 0x30
 801329e:	46bd      	mov	sp, r7
 80132a0:	bdb0      	pop	{r4, r5, r7, pc}
 80132a2:	bf00      	nop
 80132a4:	0802011c 	.word	0x0802011c
 80132a8:	080205ac 	.word	0x080205ac
 80132ac:	08020160 	.word	0x08020160
 80132b0:	2400cc34 	.word	0x2400cc34
 80132b4:	2400cc44 	.word	0x2400cc44
 80132b8:	080205dc 	.word	0x080205dc
 80132bc:	08020604 	.word	0x08020604

080132c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80132c6:	4b2d      	ldr	r3, [pc, #180]	@ (801337c <tcp_fasttmr+0xbc>)
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	3301      	adds	r3, #1
 80132cc:	b2da      	uxtb	r2, r3
 80132ce:	4b2b      	ldr	r3, [pc, #172]	@ (801337c <tcp_fasttmr+0xbc>)
 80132d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80132d2:	4b2b      	ldr	r3, [pc, #172]	@ (8013380 <tcp_fasttmr+0xc0>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80132d8:	e048      	b.n	801336c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7f9a      	ldrb	r2, [r3, #30]
 80132de:	4b27      	ldr	r3, [pc, #156]	@ (801337c <tcp_fasttmr+0xbc>)
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d03f      	beq.n	8013366 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80132e6:	4b25      	ldr	r3, [pc, #148]	@ (801337c <tcp_fasttmr+0xbc>)
 80132e8:	781a      	ldrb	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	8b5b      	ldrh	r3, [r3, #26]
 80132f2:	f003 0301 	and.w	r3, r3, #1
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d010      	beq.n	801331c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	8b5b      	ldrh	r3, [r3, #26]
 80132fe:	f043 0302 	orr.w	r3, r3, #2
 8013302:	b29a      	uxth	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f003 fac9 	bl	80168a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	8b5b      	ldrh	r3, [r3, #26]
 8013312:	f023 0303 	bic.w	r3, r3, #3
 8013316:	b29a      	uxth	r2, r3
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	8b5b      	ldrh	r3, [r3, #26]
 8013320:	f003 0308 	and.w	r3, r3, #8
 8013324:	2b00      	cmp	r3, #0
 8013326:	d009      	beq.n	801333c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	8b5b      	ldrh	r3, [r3, #26]
 801332c:	f023 0308 	bic.w	r3, r3, #8
 8013330:	b29a      	uxth	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7ff fa76 	bl	8012828 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013346:	2b00      	cmp	r3, #0
 8013348:	d00a      	beq.n	8013360 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801334a:	4b0e      	ldr	r3, [pc, #56]	@ (8013384 <tcp_fasttmr+0xc4>)
 801334c:	2200      	movs	r2, #0
 801334e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f819 	bl	8013388 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013356:	4b0b      	ldr	r3, [pc, #44]	@ (8013384 <tcp_fasttmr+0xc4>)
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d000      	beq.n	8013360 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801335e:	e7b8      	b.n	80132d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	607b      	str	r3, [r7, #4]
 8013364:	e002      	b.n	801336c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d1b3      	bne.n	80132da <tcp_fasttmr+0x1a>
    }
  }
}
 8013372:	bf00      	nop
 8013374:	bf00      	nop
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	2400cc4a 	.word	0x2400cc4a
 8013380:	2400cc40 	.word	0x2400cc40
 8013384:	2400cc48 	.word	0x2400cc48

08013388 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013388:	b590      	push	{r4, r7, lr}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d109      	bne.n	80133aa <tcp_process_refused_data+0x22>
 8013396:	4b37      	ldr	r3, [pc, #220]	@ (8013474 <tcp_process_refused_data+0xec>)
 8013398:	f240 6209 	movw	r2, #1545	@ 0x609
 801339c:	4936      	ldr	r1, [pc, #216]	@ (8013478 <tcp_process_refused_data+0xf0>)
 801339e:	4837      	ldr	r0, [pc, #220]	@ (801347c <tcp_process_refused_data+0xf4>)
 80133a0:	f009 fff0 	bl	801d384 <iprintf>
 80133a4:	f06f 030f 	mvn.w	r3, #15
 80133a8:	e060      	b.n	801346c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133ae:	7b5b      	ldrb	r3, [r3, #13]
 80133b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00b      	beq.n	80133e0 <tcp_process_refused_data+0x58>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6918      	ldr	r0, [r3, #16]
 80133d2:	2300      	movs	r3, #0
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	6879      	ldr	r1, [r7, #4]
 80133d8:	47a0      	blx	r4
 80133da:	4603      	mov	r3, r0
 80133dc:	73fb      	strb	r3, [r7, #15]
 80133de:	e007      	b.n	80133f0 <tcp_process_refused_data+0x68>
 80133e0:	2300      	movs	r3, #0
 80133e2:	68ba      	ldr	r2, [r7, #8]
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	2000      	movs	r0, #0
 80133e8:	f000 f8a4 	bl	8013534 <tcp_recv_null>
 80133ec:	4603      	mov	r3, r0
 80133ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80133f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d12a      	bne.n	801344e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80133f8:	7bbb      	ldrb	r3, [r7, #14]
 80133fa:	f003 0320 	and.w	r3, r3, #32
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d033      	beq.n	801346a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013406:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801340a:	d005      	beq.n	8013418 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013410:	3301      	adds	r3, #1
 8013412:	b29a      	uxth	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801341e:	2b00      	cmp	r3, #0
 8013420:	d00b      	beq.n	801343a <tcp_process_refused_data+0xb2>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6918      	ldr	r0, [r3, #16]
 801342c:	2300      	movs	r3, #0
 801342e:	2200      	movs	r2, #0
 8013430:	6879      	ldr	r1, [r7, #4]
 8013432:	47a0      	blx	r4
 8013434:	4603      	mov	r3, r0
 8013436:	73fb      	strb	r3, [r7, #15]
 8013438:	e001      	b.n	801343e <tcp_process_refused_data+0xb6>
 801343a:	2300      	movs	r3, #0
 801343c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013442:	f113 0f0d 	cmn.w	r3, #13
 8013446:	d110      	bne.n	801346a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013448:	f06f 030c 	mvn.w	r3, #12
 801344c:	e00e      	b.n	801346c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013452:	f113 0f0d 	cmn.w	r3, #13
 8013456:	d102      	bne.n	801345e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013458:	f06f 030c 	mvn.w	r3, #12
 801345c:	e006      	b.n	801346c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013464:	f06f 0304 	mvn.w	r3, #4
 8013468:	e000      	b.n	801346c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	bd90      	pop	{r4, r7, pc}
 8013474:	0802011c 	.word	0x0802011c
 8013478:	0802062c 	.word	0x0802062c
 801347c:	08020160 	.word	0x08020160

08013480 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013488:	e007      	b.n	801349a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 f80a 	bl	80134aa <tcp_seg_free>
    seg = next;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d1f4      	bne.n	801348a <tcp_segs_free+0xa>
  }
}
 80134a0:	bf00      	nop
 80134a2:	bf00      	nop
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b082      	sub	sp, #8
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00c      	beq.n	80134d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d004      	beq.n	80134ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fe fd5f 	bl	8011f88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80134ca:	6879      	ldr	r1, [r7, #4]
 80134cc:	2003      	movs	r0, #3
 80134ce:	f7fd feab 	bl	8011228 <memp_free>
  }
}
 80134d2:	bf00      	nop
 80134d4:	3708      	adds	r7, #8
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
	...

080134dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d106      	bne.n	80134f8 <tcp_seg_copy+0x1c>
 80134ea:	4b0f      	ldr	r3, [pc, #60]	@ (8013528 <tcp_seg_copy+0x4c>)
 80134ec:	f240 6282 	movw	r2, #1666	@ 0x682
 80134f0:	490e      	ldr	r1, [pc, #56]	@ (801352c <tcp_seg_copy+0x50>)
 80134f2:	480f      	ldr	r0, [pc, #60]	@ (8013530 <tcp_seg_copy+0x54>)
 80134f4:	f009 ff46 	bl	801d384 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80134f8:	2003      	movs	r0, #3
 80134fa:	f7fd fe1f 	bl	801113c <memp_malloc>
 80134fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <tcp_seg_copy+0x2e>
    return NULL;
 8013506:	2300      	movs	r3, #0
 8013508:	e00a      	b.n	8013520 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801350a:	2210      	movs	r2, #16
 801350c:	6879      	ldr	r1, [r7, #4]
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f00a f95f 	bl	801d7d2 <memcpy>
  pbuf_ref(cseg->p);
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	4618      	mov	r0, r3
 801351a:	f7fe fddb 	bl	80120d4 <pbuf_ref>
  return cseg;
 801351e:	68fb      	ldr	r3, [r7, #12]
}
 8013520:	4618      	mov	r0, r3
 8013522:	3710      	adds	r7, #16
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	0802011c 	.word	0x0802011c
 801352c:	08020670 	.word	0x08020670
 8013530:	08020160 	.word	0x08020160

08013534 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
 8013540:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d109      	bne.n	801355c <tcp_recv_null+0x28>
 8013548:	4b12      	ldr	r3, [pc, #72]	@ (8013594 <tcp_recv_null+0x60>)
 801354a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801354e:	4912      	ldr	r1, [pc, #72]	@ (8013598 <tcp_recv_null+0x64>)
 8013550:	4812      	ldr	r0, [pc, #72]	@ (801359c <tcp_recv_null+0x68>)
 8013552:	f009 ff17 	bl	801d384 <iprintf>
 8013556:	f06f 030f 	mvn.w	r3, #15
 801355a:	e016      	b.n	801358a <tcp_recv_null+0x56>

  if (p != NULL) {
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d009      	beq.n	8013576 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	891b      	ldrh	r3, [r3, #8]
 8013566:	4619      	mov	r1, r3
 8013568:	68b8      	ldr	r0, [r7, #8]
 801356a:	f7ff fb17 	bl	8012b9c <tcp_recved>
    pbuf_free(p);
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f7fe fd0a 	bl	8011f88 <pbuf_free>
 8013574:	e008      	b.n	8013588 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d104      	bne.n	8013588 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801357e:	68b8      	ldr	r0, [r7, #8]
 8013580:	f7ff f9bc 	bl	80128fc <tcp_close>
 8013584:	4603      	mov	r3, r0
 8013586:	e000      	b.n	801358a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	0802011c 	.word	0x0802011c
 8013598:	0802068c 	.word	0x0802068c
 801359c:	08020160 	.word	0x08020160

080135a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80135aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	db01      	blt.n	80135b6 <tcp_kill_prio+0x16>
 80135b2:	79fb      	ldrb	r3, [r7, #7]
 80135b4:	e000      	b.n	80135b8 <tcp_kill_prio+0x18>
 80135b6:	237f      	movs	r3, #127	@ 0x7f
 80135b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80135ba:	7afb      	ldrb	r3, [r7, #11]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d034      	beq.n	801362a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80135c0:	7afb      	ldrb	r3, [r7, #11]
 80135c2:	3b01      	subs	r3, #1
 80135c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80135c6:	2300      	movs	r3, #0
 80135c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80135ca:	2300      	movs	r3, #0
 80135cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ce:	4b19      	ldr	r3, [pc, #100]	@ (8013634 <tcp_kill_prio+0x94>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	e01f      	b.n	8013616 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	7d5b      	ldrb	r3, [r3, #21]
 80135da:	7afa      	ldrb	r2, [r7, #11]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d80c      	bhi.n	80135fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80135e4:	7afa      	ldrb	r2, [r7, #11]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d112      	bne.n	8013610 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80135ea:	4b13      	ldr	r3, [pc, #76]	@ (8013638 <tcp_kill_prio+0x98>)
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d80a      	bhi.n	8013610 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80135fa:	4b0f      	ldr	r3, [pc, #60]	@ (8013638 <tcp_kill_prio+0x98>)
 80135fc:	681a      	ldr	r2, [r3, #0]
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	6a1b      	ldr	r3, [r3, #32]
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	7d5b      	ldrb	r3, [r3, #21]
 801360e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	617b      	str	r3, [r7, #20]
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d1dc      	bne.n	80135d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d004      	beq.n	801362c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013622:	6938      	ldr	r0, [r7, #16]
 8013624:	f7ff fa54 	bl	8012ad0 <tcp_abort>
 8013628:	e000      	b.n	801362c <tcp_kill_prio+0x8c>
    return;
 801362a:	bf00      	nop
  }
}
 801362c:	3718      	adds	r7, #24
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	2400cc40 	.word	0x2400cc40
 8013638:	2400cc34 	.word	0x2400cc34

0801363c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	4603      	mov	r3, r0
 8013644:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013646:	79fb      	ldrb	r3, [r7, #7]
 8013648:	2b08      	cmp	r3, #8
 801364a:	d009      	beq.n	8013660 <tcp_kill_state+0x24>
 801364c:	79fb      	ldrb	r3, [r7, #7]
 801364e:	2b09      	cmp	r3, #9
 8013650:	d006      	beq.n	8013660 <tcp_kill_state+0x24>
 8013652:	4b1a      	ldr	r3, [pc, #104]	@ (80136bc <tcp_kill_state+0x80>)
 8013654:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013658:	4919      	ldr	r1, [pc, #100]	@ (80136c0 <tcp_kill_state+0x84>)
 801365a:	481a      	ldr	r0, [pc, #104]	@ (80136c4 <tcp_kill_state+0x88>)
 801365c:	f009 fe92 	bl	801d384 <iprintf>

  inactivity = 0;
 8013660:	2300      	movs	r3, #0
 8013662:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013664:	2300      	movs	r3, #0
 8013666:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013668:	4b17      	ldr	r3, [pc, #92]	@ (80136c8 <tcp_kill_state+0x8c>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	617b      	str	r3, [r7, #20]
 801366e:	e017      	b.n	80136a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	7d1b      	ldrb	r3, [r3, #20]
 8013674:	79fa      	ldrb	r2, [r7, #7]
 8013676:	429a      	cmp	r2, r3
 8013678:	d10f      	bne.n	801369a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801367a:	4b14      	ldr	r3, [pc, #80]	@ (80136cc <tcp_kill_state+0x90>)
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	6a1b      	ldr	r3, [r3, #32]
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	429a      	cmp	r2, r3
 8013688:	d807      	bhi.n	801369a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801368a:	4b10      	ldr	r3, [pc, #64]	@ (80136cc <tcp_kill_state+0x90>)
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	6a1b      	ldr	r3, [r3, #32]
 8013692:	1ad3      	subs	r3, r2, r3
 8013694:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	617b      	str	r3, [r7, #20]
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1e4      	bne.n	8013670 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d003      	beq.n	80136b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80136ac:	2100      	movs	r1, #0
 80136ae:	6938      	ldr	r0, [r7, #16]
 80136b0:	f7ff f950 	bl	8012954 <tcp_abandon>
  }
}
 80136b4:	bf00      	nop
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	0802011c 	.word	0x0802011c
 80136c0:	080206a8 	.word	0x080206a8
 80136c4:	08020160 	.word	0x08020160
 80136c8:	2400cc40 	.word	0x2400cc40
 80136cc:	2400cc34 	.word	0x2400cc34

080136d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80136d6:	2300      	movs	r3, #0
 80136d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80136da:	2300      	movs	r3, #0
 80136dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80136de:	4b12      	ldr	r3, [pc, #72]	@ (8013728 <tcp_kill_timewait+0x58>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	60fb      	str	r3, [r7, #12]
 80136e4:	e012      	b.n	801370c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80136e6:	4b11      	ldr	r3, [pc, #68]	@ (801372c <tcp_kill_timewait+0x5c>)
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6a1b      	ldr	r3, [r3, #32]
 80136ee:	1ad3      	subs	r3, r2, r3
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d807      	bhi.n	8013706 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80136f6:	4b0d      	ldr	r3, [pc, #52]	@ (801372c <tcp_kill_timewait+0x5c>)
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	6a1b      	ldr	r3, [r3, #32]
 80136fe:	1ad3      	subs	r3, r2, r3
 8013700:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	60fb      	str	r3, [r7, #12]
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1e9      	bne.n	80136e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013718:	68b8      	ldr	r0, [r7, #8]
 801371a:	f7ff f9d9 	bl	8012ad0 <tcp_abort>
  }
}
 801371e:	bf00      	nop
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	2400cc44 	.word	0x2400cc44
 801372c:	2400cc34 	.word	0x2400cc34

08013730 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013736:	4b10      	ldr	r3, [pc, #64]	@ (8013778 <tcp_handle_closepend+0x48>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801373c:	e014      	b.n	8013768 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	8b5b      	ldrh	r3, [r3, #26]
 8013748:	f003 0308 	and.w	r3, r3, #8
 801374c:	2b00      	cmp	r3, #0
 801374e:	d009      	beq.n	8013764 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8b5b      	ldrh	r3, [r3, #26]
 8013754:	f023 0308 	bic.w	r3, r3, #8
 8013758:	b29a      	uxth	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f7ff f862 	bl	8012828 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d1e7      	bne.n	801373e <tcp_handle_closepend+0xe>
  }
}
 801376e:	bf00      	nop
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	2400cc40 	.word	0x2400cc40

0801377c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	4603      	mov	r3, r0
 8013784:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013786:	2001      	movs	r0, #1
 8013788:	f7fd fcd8 	bl	801113c <memp_malloc>
 801378c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d126      	bne.n	80137e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013794:	f7ff ffcc 	bl	8013730 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013798:	f7ff ff9a 	bl	80136d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801379c:	2001      	movs	r0, #1
 801379e:	f7fd fccd 	bl	801113c <memp_malloc>
 80137a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d11b      	bne.n	80137e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80137aa:	2009      	movs	r0, #9
 80137ac:	f7ff ff46 	bl	801363c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137b0:	2001      	movs	r0, #1
 80137b2:	f7fd fcc3 	bl	801113c <memp_malloc>
 80137b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d111      	bne.n	80137e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80137be:	2008      	movs	r0, #8
 80137c0:	f7ff ff3c 	bl	801363c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137c4:	2001      	movs	r0, #1
 80137c6:	f7fd fcb9 	bl	801113c <memp_malloc>
 80137ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d107      	bne.n	80137e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80137d2:	79fb      	ldrb	r3, [r7, #7]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7ff fee3 	bl	80135a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137da:	2001      	movs	r0, #1
 80137dc:	f7fd fcae 	bl	801113c <memp_malloc>
 80137e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d03f      	beq.n	8013868 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80137e8:	229c      	movs	r2, #156	@ 0x9c
 80137ea:	2100      	movs	r1, #0
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f009 ff21 	bl	801d634 <memset>
    pcb->prio = prio;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	79fa      	ldrb	r2, [r7, #7]
 80137f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80137fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013808:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	22ff      	movs	r2, #255	@ 0xff
 8013816:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801381e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2206      	movs	r2, #6
 8013824:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2206      	movs	r2, #6
 801382c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013834:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2201      	movs	r2, #1
 801383a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801383e:	4b0d      	ldr	r3, [pc, #52]	@ (8013874 <tcp_alloc+0xf8>)
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013846:	4b0c      	ldr	r3, [pc, #48]	@ (8013878 <tcp_alloc+0xfc>)
 8013848:	781a      	ldrb	r2, [r3, #0]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013854:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	4a08      	ldr	r2, [pc, #32]	@ (801387c <tcp_alloc+0x100>)
 801385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	4a07      	ldr	r2, [pc, #28]	@ (8013880 <tcp_alloc+0x104>)
 8013864:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013868:	68fb      	ldr	r3, [r7, #12]
}
 801386a:	4618      	mov	r0, r3
 801386c:	3710      	adds	r7, #16
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}
 8013872:	bf00      	nop
 8013874:	2400cc34 	.word	0x2400cc34
 8013878:	2400cc4a 	.word	0x2400cc4a
 801387c:	08013535 	.word	0x08013535
 8013880:	006ddd00 	.word	0x006ddd00

08013884 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d107      	bne.n	80138a2 <tcp_pcb_purge+0x1e>
 8013892:	4b21      	ldr	r3, [pc, #132]	@ (8013918 <tcp_pcb_purge+0x94>)
 8013894:	f640 0251 	movw	r2, #2129	@ 0x851
 8013898:	4920      	ldr	r1, [pc, #128]	@ (801391c <tcp_pcb_purge+0x98>)
 801389a:	4821      	ldr	r0, [pc, #132]	@ (8013920 <tcp_pcb_purge+0x9c>)
 801389c:	f009 fd72 	bl	801d384 <iprintf>
 80138a0:	e037      	b.n	8013912 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	7d1b      	ldrb	r3, [r3, #20]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d033      	beq.n	8013912 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80138ae:	2b0a      	cmp	r3, #10
 80138b0:	d02f      	beq.n	8013912 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d02b      	beq.n	8013912 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d007      	beq.n	80138d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7fe fb5e 	bl	8011f88 <pbuf_free>
      pcb->refused_data = NULL;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d002      	beq.n	80138e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f986 	bl	8013bec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80138e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7ff fdc7 	bl	8013480 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff fdc2 	bl	8013480 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2200      	movs	r2, #0
 8013900:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2200      	movs	r2, #0
 801390e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0802011c 	.word	0x0802011c
 801391c:	08020768 	.word	0x08020768
 8013920:	08020160 	.word	0x08020160

08013924 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d106      	bne.n	8013942 <tcp_pcb_remove+0x1e>
 8013934:	4b3e      	ldr	r3, [pc, #248]	@ (8013a30 <tcp_pcb_remove+0x10c>)
 8013936:	f640 0283 	movw	r2, #2179	@ 0x883
 801393a:	493e      	ldr	r1, [pc, #248]	@ (8013a34 <tcp_pcb_remove+0x110>)
 801393c:	483e      	ldr	r0, [pc, #248]	@ (8013a38 <tcp_pcb_remove+0x114>)
 801393e:	f009 fd21 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d106      	bne.n	8013956 <tcp_pcb_remove+0x32>
 8013948:	4b39      	ldr	r3, [pc, #228]	@ (8013a30 <tcp_pcb_remove+0x10c>)
 801394a:	f640 0284 	movw	r2, #2180	@ 0x884
 801394e:	493b      	ldr	r1, [pc, #236]	@ (8013a3c <tcp_pcb_remove+0x118>)
 8013950:	4839      	ldr	r0, [pc, #228]	@ (8013a38 <tcp_pcb_remove+0x114>)
 8013952:	f009 fd17 	bl	801d384 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	683a      	ldr	r2, [r7, #0]
 801395c:	429a      	cmp	r2, r3
 801395e:	d105      	bne.n	801396c <tcp_pcb_remove+0x48>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	601a      	str	r2, [r3, #0]
 801396a:	e013      	b.n	8013994 <tcp_pcb_remove+0x70>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	60fb      	str	r3, [r7, #12]
 8013972:	e00c      	b.n	801398e <tcp_pcb_remove+0x6a>
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	683a      	ldr	r2, [r7, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	d104      	bne.n	8013988 <tcp_pcb_remove+0x64>
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	68da      	ldr	r2, [r3, #12]
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	60da      	str	r2, [r3, #12]
 8013986:	e005      	b.n	8013994 <tcp_pcb_remove+0x70>
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	60fb      	str	r3, [r7, #12]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1ef      	bne.n	8013974 <tcp_pcb_remove+0x50>
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	2200      	movs	r2, #0
 8013998:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801399a:	6838      	ldr	r0, [r7, #0]
 801399c:	f7ff ff72 	bl	8013884 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
 80139a4:	2b0a      	cmp	r3, #10
 80139a6:	d013      	beq.n	80139d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d00f      	beq.n	80139d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	8b5b      	ldrh	r3, [r3, #26]
 80139b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d009      	beq.n	80139d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	8b5b      	ldrh	r3, [r3, #26]
 80139c0:	f043 0302 	orr.w	r3, r3, #2
 80139c4:	b29a      	uxth	r2, r3
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80139ca:	6838      	ldr	r0, [r7, #0]
 80139cc:	f002 ff68 	bl	80168a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	7d1b      	ldrb	r3, [r3, #20]
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	d020      	beq.n	8013a1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d006      	beq.n	80139ee <tcp_pcb_remove+0xca>
 80139e0:	4b13      	ldr	r3, [pc, #76]	@ (8013a30 <tcp_pcb_remove+0x10c>)
 80139e2:	f640 0293 	movw	r2, #2195	@ 0x893
 80139e6:	4916      	ldr	r1, [pc, #88]	@ (8013a40 <tcp_pcb_remove+0x11c>)
 80139e8:	4813      	ldr	r0, [pc, #76]	@ (8013a38 <tcp_pcb_remove+0x114>)
 80139ea:	f009 fccb 	bl	801d384 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d006      	beq.n	8013a04 <tcp_pcb_remove+0xe0>
 80139f6:	4b0e      	ldr	r3, [pc, #56]	@ (8013a30 <tcp_pcb_remove+0x10c>)
 80139f8:	f640 0294 	movw	r2, #2196	@ 0x894
 80139fc:	4911      	ldr	r1, [pc, #68]	@ (8013a44 <tcp_pcb_remove+0x120>)
 80139fe:	480e      	ldr	r0, [pc, #56]	@ (8013a38 <tcp_pcb_remove+0x114>)
 8013a00:	f009 fcc0 	bl	801d384 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d006      	beq.n	8013a1a <tcp_pcb_remove+0xf6>
 8013a0c:	4b08      	ldr	r3, [pc, #32]	@ (8013a30 <tcp_pcb_remove+0x10c>)
 8013a0e:	f640 0296 	movw	r2, #2198	@ 0x896
 8013a12:	490d      	ldr	r1, [pc, #52]	@ (8013a48 <tcp_pcb_remove+0x124>)
 8013a14:	4808      	ldr	r0, [pc, #32]	@ (8013a38 <tcp_pcb_remove+0x114>)
 8013a16:	f009 fcb5 	bl	801d384 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2200      	movs	r2, #0
 8013a24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013a26:	bf00      	nop
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	0802011c 	.word	0x0802011c
 8013a34:	08020784 	.word	0x08020784
 8013a38:	08020160 	.word	0x08020160
 8013a3c:	080207a0 	.word	0x080207a0
 8013a40:	080207c0 	.word	0x080207c0
 8013a44:	080207d8 	.word	0x080207d8
 8013a48:	080207f4 	.word	0x080207f4

08013a4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d106      	bne.n	8013a68 <tcp_next_iss+0x1c>
 8013a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8013a84 <tcp_next_iss+0x38>)
 8013a5c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013a60:	4909      	ldr	r1, [pc, #36]	@ (8013a88 <tcp_next_iss+0x3c>)
 8013a62:	480a      	ldr	r0, [pc, #40]	@ (8013a8c <tcp_next_iss+0x40>)
 8013a64:	f009 fc8e 	bl	801d384 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013a68:	4b09      	ldr	r3, [pc, #36]	@ (8013a90 <tcp_next_iss+0x44>)
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	4b09      	ldr	r3, [pc, #36]	@ (8013a94 <tcp_next_iss+0x48>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	4413      	add	r3, r2
 8013a72:	4a07      	ldr	r2, [pc, #28]	@ (8013a90 <tcp_next_iss+0x44>)
 8013a74:	6013      	str	r3, [r2, #0]
  return iss;
 8013a76:	4b06      	ldr	r3, [pc, #24]	@ (8013a90 <tcp_next_iss+0x44>)
 8013a78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	0802011c 	.word	0x0802011c
 8013a88:	0802080c 	.word	0x0802080c
 8013a8c:	08020160 	.word	0x08020160
 8013a90:	2400002c 	.word	0x2400002c
 8013a94:	2400cc34 	.word	0x2400cc34

08013a98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d106      	bne.n	8013aba <tcp_eff_send_mss_netif+0x22>
 8013aac:	4b14      	ldr	r3, [pc, #80]	@ (8013b00 <tcp_eff_send_mss_netif+0x68>)
 8013aae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013ab2:	4914      	ldr	r1, [pc, #80]	@ (8013b04 <tcp_eff_send_mss_netif+0x6c>)
 8013ab4:	4814      	ldr	r0, [pc, #80]	@ (8013b08 <tcp_eff_send_mss_netif+0x70>)
 8013ab6:	f009 fc65 	bl	801d384 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013ac0:	89fb      	ldrh	r3, [r7, #14]
 8013ac2:	e019      	b.n	8013af8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ac8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013aca:	8afb      	ldrh	r3, [r7, #22]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d012      	beq.n	8013af6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013ad0:	2328      	movs	r3, #40	@ 0x28
 8013ad2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013ad4:	8afa      	ldrh	r2, [r7, #22]
 8013ad6:	8abb      	ldrh	r3, [r7, #20]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d904      	bls.n	8013ae6 <tcp_eff_send_mss_netif+0x4e>
 8013adc:	8afa      	ldrh	r2, [r7, #22]
 8013ade:	8abb      	ldrh	r3, [r7, #20]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	e000      	b.n	8013ae8 <tcp_eff_send_mss_netif+0x50>
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013aea:	8a7a      	ldrh	r2, [r7, #18]
 8013aec:	89fb      	ldrh	r3, [r7, #14]
 8013aee:	4293      	cmp	r3, r2
 8013af0:	bf28      	it	cs
 8013af2:	4613      	movcs	r3, r2
 8013af4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013af6:	89fb      	ldrh	r3, [r7, #14]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3718      	adds	r7, #24
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	0802011c 	.word	0x0802011c
 8013b04:	08020828 	.word	0x08020828
 8013b08:	08020160 	.word	0x08020160

08013b0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d119      	bne.n	8013b54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013b20:	4b10      	ldr	r3, [pc, #64]	@ (8013b64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013b22:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013b26:	4910      	ldr	r1, [pc, #64]	@ (8013b68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013b28:	4810      	ldr	r0, [pc, #64]	@ (8013b6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013b2a:	f009 fc2b 	bl	801d384 <iprintf>

  while (pcb != NULL) {
 8013b2e:	e011      	b.n	8013b54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d108      	bne.n	8013b4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f7fe ffc4 	bl	8012ad0 <tcp_abort>
      pcb = next;
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	60fb      	str	r3, [r7, #12]
 8013b4c:	e002      	b.n	8013b54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d1ea      	bne.n	8013b30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013b5a:	bf00      	nop
 8013b5c:	bf00      	nop
 8013b5e:	3710      	adds	r7, #16
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	0802011c 	.word	0x0802011c
 8013b68:	08020850 	.word	0x08020850
 8013b6c:	08020160 	.word	0x08020160

08013b70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d02a      	beq.n	8013bd6 <tcp_netif_ip_addr_changed+0x66>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d026      	beq.n	8013bd6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013b88:	4b15      	ldr	r3, [pc, #84]	@ (8013be0 <tcp_netif_ip_addr_changed+0x70>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f7ff ffbc 	bl	8013b0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013b94:	4b13      	ldr	r3, [pc, #76]	@ (8013be4 <tcp_netif_ip_addr_changed+0x74>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4619      	mov	r1, r3
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f7ff ffb6 	bl	8013b0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d017      	beq.n	8013bd6 <tcp_netif_ip_addr_changed+0x66>
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d013      	beq.n	8013bd6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013bae:	4b0e      	ldr	r3, [pc, #56]	@ (8013be8 <tcp_netif_ip_addr_changed+0x78>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	60fb      	str	r3, [r7, #12]
 8013bb4:	e00c      	b.n	8013bd0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d103      	bne.n	8013bca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	68db      	ldr	r3, [r3, #12]
 8013bce:	60fb      	str	r3, [r7, #12]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d1ef      	bne.n	8013bb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	2400cc40 	.word	0x2400cc40
 8013be4:	2400cc38 	.word	0x2400cc38
 8013be8:	2400cc3c 	.word	0x2400cc3c

08013bec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d007      	beq.n	8013c0c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7ff fc3d 	bl	8013480 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013c0c:	bf00      	nop
 8013c0e:	3708      	adds	r7, #8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013c14:	b590      	push	{r4, r7, lr}
 8013c16:	b08d      	sub	sp, #52	@ 0x34
 8013c18:	af04      	add	r7, sp, #16
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d105      	bne.n	8013c30 <tcp_input+0x1c>
 8013c24:	4b9b      	ldr	r3, [pc, #620]	@ (8013e94 <tcp_input+0x280>)
 8013c26:	2283      	movs	r2, #131	@ 0x83
 8013c28:	499b      	ldr	r1, [pc, #620]	@ (8013e98 <tcp_input+0x284>)
 8013c2a:	489c      	ldr	r0, [pc, #624]	@ (8013e9c <tcp_input+0x288>)
 8013c2c:	f009 fbaa 	bl	801d384 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	4a9a      	ldr	r2, [pc, #616]	@ (8013ea0 <tcp_input+0x28c>)
 8013c36:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	895b      	ldrh	r3, [r3, #10]
 8013c3c:	2b13      	cmp	r3, #19
 8013c3e:	f240 83d1 	bls.w	80143e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013c42:	4b98      	ldr	r3, [pc, #608]	@ (8013ea4 <tcp_input+0x290>)
 8013c44:	695b      	ldr	r3, [r3, #20]
 8013c46:	4a97      	ldr	r2, [pc, #604]	@ (8013ea4 <tcp_input+0x290>)
 8013c48:	6812      	ldr	r2, [r2, #0]
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f007 fe19 	bl	801b884 <ip4_addr_isbroadcast_u32>
 8013c52:	4603      	mov	r3, r0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f040 83c7 	bne.w	80143e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c5a:	4b92      	ldr	r3, [pc, #584]	@ (8013ea4 <tcp_input+0x290>)
 8013c5c:	695b      	ldr	r3, [r3, #20]
 8013c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013c62:	2be0      	cmp	r3, #224	@ 0xe0
 8013c64:	f000 83c0 	beq.w	80143e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013c68:	4b8d      	ldr	r3, [pc, #564]	@ (8013ea0 <tcp_input+0x28c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	899b      	ldrh	r3, [r3, #12]
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fc fcd3 	bl	801061c <lwip_htons>
 8013c76:	4603      	mov	r3, r0
 8013c78:	0b1b      	lsrs	r3, r3, #12
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013c82:	7cbb      	ldrb	r3, [r7, #18]
 8013c84:	2b13      	cmp	r3, #19
 8013c86:	f240 83b1 	bls.w	80143ec <tcp_input+0x7d8>
 8013c8a:	7cbb      	ldrb	r3, [r7, #18]
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	891b      	ldrh	r3, [r3, #8]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	f200 83aa 	bhi.w	80143ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013c98:	7cbb      	ldrb	r3, [r7, #18]
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	3b14      	subs	r3, #20
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	4b81      	ldr	r3, [pc, #516]	@ (8013ea8 <tcp_input+0x294>)
 8013ca2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013ca4:	4b81      	ldr	r3, [pc, #516]	@ (8013eac <tcp_input+0x298>)
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	895a      	ldrh	r2, [r3, #10]
 8013cae:	7cbb      	ldrb	r3, [r7, #18]
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d309      	bcc.n	8013cca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8013ea8 <tcp_input+0x294>)
 8013cb8:	881a      	ldrh	r2, [r3, #0]
 8013cba:	4b7d      	ldr	r3, [pc, #500]	@ (8013eb0 <tcp_input+0x29c>)
 8013cbc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013cbe:	7cbb      	ldrb	r3, [r7, #18]
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7fe f8da 	bl	8011e7c <pbuf_remove_header>
 8013cc8:	e04e      	b.n	8013d68 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d105      	bne.n	8013cde <tcp_input+0xca>
 8013cd2:	4b70      	ldr	r3, [pc, #448]	@ (8013e94 <tcp_input+0x280>)
 8013cd4:	22c2      	movs	r2, #194	@ 0xc2
 8013cd6:	4977      	ldr	r1, [pc, #476]	@ (8013eb4 <tcp_input+0x2a0>)
 8013cd8:	4870      	ldr	r0, [pc, #448]	@ (8013e9c <tcp_input+0x288>)
 8013cda:	f009 fb53 	bl	801d384 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013cde:	2114      	movs	r1, #20
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7fe f8cb 	bl	8011e7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	895a      	ldrh	r2, [r3, #10]
 8013cea:	4b71      	ldr	r3, [pc, #452]	@ (8013eb0 <tcp_input+0x29c>)
 8013cec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013cee:	4b6e      	ldr	r3, [pc, #440]	@ (8013ea8 <tcp_input+0x294>)
 8013cf0:	881a      	ldrh	r2, [r3, #0]
 8013cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8013eb0 <tcp_input+0x29c>)
 8013cf4:	881b      	ldrh	r3, [r3, #0]
 8013cf6:	1ad3      	subs	r3, r2, r3
 8013cf8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8013eb0 <tcp_input+0x29c>)
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	4619      	mov	r1, r3
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7fe f8bb 	bl	8011e7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	895b      	ldrh	r3, [r3, #10]
 8013d0c:	8a3a      	ldrh	r2, [r7, #16]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	f200 836e 	bhi.w	80143f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	4a64      	ldr	r2, [pc, #400]	@ (8013eac <tcp_input+0x298>)
 8013d1c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	8a3a      	ldrh	r2, [r7, #16]
 8013d24:	4611      	mov	r1, r2
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe f8a8 	bl	8011e7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	891a      	ldrh	r2, [r3, #8]
 8013d30:	8a3b      	ldrh	r3, [r7, #16]
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	b29a      	uxth	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	895b      	ldrh	r3, [r3, #10]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d005      	beq.n	8013d4e <tcp_input+0x13a>
 8013d42:	4b54      	ldr	r3, [pc, #336]	@ (8013e94 <tcp_input+0x280>)
 8013d44:	22df      	movs	r2, #223	@ 0xdf
 8013d46:	495c      	ldr	r1, [pc, #368]	@ (8013eb8 <tcp_input+0x2a4>)
 8013d48:	4854      	ldr	r0, [pc, #336]	@ (8013e9c <tcp_input+0x288>)
 8013d4a:	f009 fb1b 	bl	801d384 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	891a      	ldrh	r2, [r3, #8]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	891b      	ldrh	r3, [r3, #8]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d005      	beq.n	8013d68 <tcp_input+0x154>
 8013d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8013e94 <tcp_input+0x280>)
 8013d5e:	22e0      	movs	r2, #224	@ 0xe0
 8013d60:	4956      	ldr	r1, [pc, #344]	@ (8013ebc <tcp_input+0x2a8>)
 8013d62:	484e      	ldr	r0, [pc, #312]	@ (8013e9c <tcp_input+0x288>)
 8013d64:	f009 fb0e 	bl	801d384 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013d68:	4b4d      	ldr	r3, [pc, #308]	@ (8013ea0 <tcp_input+0x28c>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	4a4b      	ldr	r2, [pc, #300]	@ (8013ea0 <tcp_input+0x28c>)
 8013d72:	6814      	ldr	r4, [r2, #0]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fc fc51 	bl	801061c <lwip_htons>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013d7e:	4b48      	ldr	r3, [pc, #288]	@ (8013ea0 <tcp_input+0x28c>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	885b      	ldrh	r3, [r3, #2]
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	4a46      	ldr	r2, [pc, #280]	@ (8013ea0 <tcp_input+0x28c>)
 8013d88:	6814      	ldr	r4, [r2, #0]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fc fc46 	bl	801061c <lwip_htons>
 8013d90:	4603      	mov	r3, r0
 8013d92:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013d94:	4b42      	ldr	r3, [pc, #264]	@ (8013ea0 <tcp_input+0x28c>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	4a41      	ldr	r2, [pc, #260]	@ (8013ea0 <tcp_input+0x28c>)
 8013d9c:	6814      	ldr	r4, [r2, #0]
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7fc fc51 	bl	8010646 <lwip_htonl>
 8013da4:	4603      	mov	r3, r0
 8013da6:	6063      	str	r3, [r4, #4]
 8013da8:	6863      	ldr	r3, [r4, #4]
 8013daa:	4a45      	ldr	r2, [pc, #276]	@ (8013ec0 <tcp_input+0x2ac>)
 8013dac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013dae:	4b3c      	ldr	r3, [pc, #240]	@ (8013ea0 <tcp_input+0x28c>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	689b      	ldr	r3, [r3, #8]
 8013db4:	4a3a      	ldr	r2, [pc, #232]	@ (8013ea0 <tcp_input+0x28c>)
 8013db6:	6814      	ldr	r4, [r2, #0]
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7fc fc44 	bl	8010646 <lwip_htonl>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	60a3      	str	r3, [r4, #8]
 8013dc2:	68a3      	ldr	r3, [r4, #8]
 8013dc4:	4a3f      	ldr	r2, [pc, #252]	@ (8013ec4 <tcp_input+0x2b0>)
 8013dc6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013dc8:	4b35      	ldr	r3, [pc, #212]	@ (8013ea0 <tcp_input+0x28c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	89db      	ldrh	r3, [r3, #14]
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	4a33      	ldr	r2, [pc, #204]	@ (8013ea0 <tcp_input+0x28c>)
 8013dd2:	6814      	ldr	r4, [r2, #0]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fc fc21 	bl	801061c <lwip_htons>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013dde:	4b30      	ldr	r3, [pc, #192]	@ (8013ea0 <tcp_input+0x28c>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	899b      	ldrh	r3, [r3, #12]
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fc fc18 	bl	801061c <lwip_htons>
 8013dec:	4603      	mov	r3, r0
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	4b34      	ldr	r3, [pc, #208]	@ (8013ec8 <tcp_input+0x2b4>)
 8013df8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	891a      	ldrh	r2, [r3, #8]
 8013dfe:	4b33      	ldr	r3, [pc, #204]	@ (8013ecc <tcp_input+0x2b8>)
 8013e00:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013e02:	4b31      	ldr	r3, [pc, #196]	@ (8013ec8 <tcp_input+0x2b4>)
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	f003 0303 	and.w	r3, r3, #3
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00c      	beq.n	8013e28 <tcp_input+0x214>
    tcplen++;
 8013e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8013ecc <tcp_input+0x2b8>)
 8013e10:	881b      	ldrh	r3, [r3, #0]
 8013e12:	3301      	adds	r3, #1
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	4b2d      	ldr	r3, [pc, #180]	@ (8013ecc <tcp_input+0x2b8>)
 8013e18:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	891a      	ldrh	r2, [r3, #8]
 8013e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8013ecc <tcp_input+0x2b8>)
 8013e20:	881b      	ldrh	r3, [r3, #0]
 8013e22:	429a      	cmp	r2, r3
 8013e24:	f200 82e6 	bhi.w	80143f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e2c:	4b28      	ldr	r3, [pc, #160]	@ (8013ed0 <tcp_input+0x2bc>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	61fb      	str	r3, [r7, #28]
 8013e32:	e09d      	b.n	8013f70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	7d1b      	ldrb	r3, [r3, #20]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d105      	bne.n	8013e48 <tcp_input+0x234>
 8013e3c:	4b15      	ldr	r3, [pc, #84]	@ (8013e94 <tcp_input+0x280>)
 8013e3e:	22fb      	movs	r2, #251	@ 0xfb
 8013e40:	4924      	ldr	r1, [pc, #144]	@ (8013ed4 <tcp_input+0x2c0>)
 8013e42:	4816      	ldr	r0, [pc, #88]	@ (8013e9c <tcp_input+0x288>)
 8013e44:	f009 fa9e 	bl	801d384 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	7d1b      	ldrb	r3, [r3, #20]
 8013e4c:	2b0a      	cmp	r3, #10
 8013e4e:	d105      	bne.n	8013e5c <tcp_input+0x248>
 8013e50:	4b10      	ldr	r3, [pc, #64]	@ (8013e94 <tcp_input+0x280>)
 8013e52:	22fc      	movs	r2, #252	@ 0xfc
 8013e54:	4920      	ldr	r1, [pc, #128]	@ (8013ed8 <tcp_input+0x2c4>)
 8013e56:	4811      	ldr	r0, [pc, #68]	@ (8013e9c <tcp_input+0x288>)
 8013e58:	f009 fa94 	bl	801d384 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	7d1b      	ldrb	r3, [r3, #20]
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d105      	bne.n	8013e70 <tcp_input+0x25c>
 8013e64:	4b0b      	ldr	r3, [pc, #44]	@ (8013e94 <tcp_input+0x280>)
 8013e66:	22fd      	movs	r2, #253	@ 0xfd
 8013e68:	491c      	ldr	r1, [pc, #112]	@ (8013edc <tcp_input+0x2c8>)
 8013e6a:	480c      	ldr	r0, [pc, #48]	@ (8013e9c <tcp_input+0x288>)
 8013e6c:	f009 fa8a 	bl	801d384 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	7a1b      	ldrb	r3, [r3, #8]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d033      	beq.n	8013ee0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	7a1a      	ldrb	r2, [r3, #8]
 8013e7c:	4b09      	ldr	r3, [pc, #36]	@ (8013ea4 <tcp_input+0x290>)
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013e84:	3301      	adds	r3, #1
 8013e86:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d029      	beq.n	8013ee0 <tcp_input+0x2cc>
      prev = pcb;
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	61bb      	str	r3, [r7, #24]
      continue;
 8013e90:	e06b      	b.n	8013f6a <tcp_input+0x356>
 8013e92:	bf00      	nop
 8013e94:	08020884 	.word	0x08020884
 8013e98:	080208b8 	.word	0x080208b8
 8013e9c:	080208d0 	.word	0x080208d0
 8013ea0:	2400cc5c 	.word	0x2400cc5c
 8013ea4:	24009b14 	.word	0x24009b14
 8013ea8:	2400cc60 	.word	0x2400cc60
 8013eac:	2400cc64 	.word	0x2400cc64
 8013eb0:	2400cc62 	.word	0x2400cc62
 8013eb4:	080208f8 	.word	0x080208f8
 8013eb8:	08020908 	.word	0x08020908
 8013ebc:	08020914 	.word	0x08020914
 8013ec0:	2400cc6c 	.word	0x2400cc6c
 8013ec4:	2400cc70 	.word	0x2400cc70
 8013ec8:	2400cc78 	.word	0x2400cc78
 8013ecc:	2400cc76 	.word	0x2400cc76
 8013ed0:	2400cc40 	.word	0x2400cc40
 8013ed4:	08020934 	.word	0x08020934
 8013ed8:	0802095c 	.word	0x0802095c
 8013edc:	08020988 	.word	0x08020988
    }

    if (pcb->remote_port == tcphdr->src &&
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	8b1a      	ldrh	r2, [r3, #24]
 8013ee4:	4b72      	ldr	r3, [pc, #456]	@ (80140b0 <tcp_input+0x49c>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	881b      	ldrh	r3, [r3, #0]
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d13a      	bne.n	8013f66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	8ada      	ldrh	r2, [r3, #22]
 8013ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80140b0 <tcp_input+0x49c>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	885b      	ldrh	r3, [r3, #2]
 8013efa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d132      	bne.n	8013f66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	685a      	ldr	r2, [r3, #4]
 8013f04:	4b6b      	ldr	r3, [pc, #428]	@ (80140b4 <tcp_input+0x4a0>)
 8013f06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d12c      	bne.n	8013f66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013f0c:	69fb      	ldr	r3, [r7, #28]
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	4b68      	ldr	r3, [pc, #416]	@ (80140b4 <tcp_input+0x4a0>)
 8013f12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d126      	bne.n	8013f66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	69fa      	ldr	r2, [r7, #28]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d106      	bne.n	8013f30 <tcp_input+0x31c>
 8013f22:	4b65      	ldr	r3, [pc, #404]	@ (80140b8 <tcp_input+0x4a4>)
 8013f24:	f240 120d 	movw	r2, #269	@ 0x10d
 8013f28:	4964      	ldr	r1, [pc, #400]	@ (80140bc <tcp_input+0x4a8>)
 8013f2a:	4865      	ldr	r0, [pc, #404]	@ (80140c0 <tcp_input+0x4ac>)
 8013f2c:	f009 fa2a 	bl	801d384 <iprintf>
      if (prev != NULL) {
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00a      	beq.n	8013f4c <tcp_input+0x338>
        prev->next = pcb->next;
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	68da      	ldr	r2, [r3, #12]
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013f3e:	4b61      	ldr	r3, [pc, #388]	@ (80140c4 <tcp_input+0x4b0>)
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	69fb      	ldr	r3, [r7, #28]
 8013f44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013f46:	4a5f      	ldr	r2, [pc, #380]	@ (80140c4 <tcp_input+0x4b0>)
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	69fa      	ldr	r2, [r7, #28]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d111      	bne.n	8013f7a <tcp_input+0x366>
 8013f56:	4b58      	ldr	r3, [pc, #352]	@ (80140b8 <tcp_input+0x4a4>)
 8013f58:	f240 1215 	movw	r2, #277	@ 0x115
 8013f5c:	495a      	ldr	r1, [pc, #360]	@ (80140c8 <tcp_input+0x4b4>)
 8013f5e:	4858      	ldr	r0, [pc, #352]	@ (80140c0 <tcp_input+0x4ac>)
 8013f60:	f009 fa10 	bl	801d384 <iprintf>
      break;
 8013f64:	e009      	b.n	8013f7a <tcp_input+0x366>
    }
    prev = pcb;
 8013f66:	69fb      	ldr	r3, [r7, #28]
 8013f68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f6a:	69fb      	ldr	r3, [r7, #28]
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	61fb      	str	r3, [r7, #28]
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f47f af5e 	bne.w	8013e34 <tcp_input+0x220>
 8013f78:	e000      	b.n	8013f7c <tcp_input+0x368>
      break;
 8013f7a:	bf00      	nop
  }

  if (pcb == NULL) {
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	f040 80aa 	bne.w	80140d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f84:	4b51      	ldr	r3, [pc, #324]	@ (80140cc <tcp_input+0x4b8>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	61fb      	str	r3, [r7, #28]
 8013f8a:	e03f      	b.n	801400c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	7d1b      	ldrb	r3, [r3, #20]
 8013f90:	2b0a      	cmp	r3, #10
 8013f92:	d006      	beq.n	8013fa2 <tcp_input+0x38e>
 8013f94:	4b48      	ldr	r3, [pc, #288]	@ (80140b8 <tcp_input+0x4a4>)
 8013f96:	f240 121f 	movw	r2, #287	@ 0x11f
 8013f9a:	494d      	ldr	r1, [pc, #308]	@ (80140d0 <tcp_input+0x4bc>)
 8013f9c:	4848      	ldr	r0, [pc, #288]	@ (80140c0 <tcp_input+0x4ac>)
 8013f9e:	f009 f9f1 	bl	801d384 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	7a1b      	ldrb	r3, [r3, #8]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d009      	beq.n	8013fbe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	7a1a      	ldrb	r2, [r3, #8]
 8013fae:	4b41      	ldr	r3, [pc, #260]	@ (80140b4 <tcp_input+0x4a0>)
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d122      	bne.n	8014004 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013fbe:	69fb      	ldr	r3, [r7, #28]
 8013fc0:	8b1a      	ldrh	r2, [r3, #24]
 8013fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80140b0 <tcp_input+0x49c>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	881b      	ldrh	r3, [r3, #0]
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d11b      	bne.n	8014006 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	8ada      	ldrh	r2, [r3, #22]
 8013fd2:	4b37      	ldr	r3, [pc, #220]	@ (80140b0 <tcp_input+0x49c>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	885b      	ldrh	r3, [r3, #2]
 8013fd8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d113      	bne.n	8014006 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	685a      	ldr	r2, [r3, #4]
 8013fe2:	4b34      	ldr	r3, [pc, #208]	@ (80140b4 <tcp_input+0x4a0>)
 8013fe4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d10d      	bne.n	8014006 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	4b31      	ldr	r3, [pc, #196]	@ (80140b4 <tcp_input+0x4a0>)
 8013ff0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d107      	bne.n	8014006 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013ff6:	69f8      	ldr	r0, [r7, #28]
 8013ff8:	f000 fb56 	bl	80146a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7fd ffc3 	bl	8011f88 <pbuf_free>
        return;
 8014002:	e1fd      	b.n	8014400 <tcp_input+0x7ec>
        continue;
 8014004:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	61fb      	str	r3, [r7, #28]
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d1bc      	bne.n	8013f8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014012:	2300      	movs	r3, #0
 8014014:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014016:	4b2f      	ldr	r3, [pc, #188]	@ (80140d4 <tcp_input+0x4c0>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	617b      	str	r3, [r7, #20]
 801401c:	e02a      	b.n	8014074 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	7a1b      	ldrb	r3, [r3, #8]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00c      	beq.n	8014040 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	7a1a      	ldrb	r2, [r3, #8]
 801402a:	4b22      	ldr	r3, [pc, #136]	@ (80140b4 <tcp_input+0x4a0>)
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014032:	3301      	adds	r3, #1
 8014034:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014036:	429a      	cmp	r2, r3
 8014038:	d002      	beq.n	8014040 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	61bb      	str	r3, [r7, #24]
        continue;
 801403e:	e016      	b.n	801406e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	8ada      	ldrh	r2, [r3, #22]
 8014044:	4b1a      	ldr	r3, [pc, #104]	@ (80140b0 <tcp_input+0x49c>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	885b      	ldrh	r3, [r3, #2]
 801404a:	b29b      	uxth	r3, r3
 801404c:	429a      	cmp	r2, r3
 801404e:	d10c      	bne.n	801406a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	4b17      	ldr	r3, [pc, #92]	@ (80140b4 <tcp_input+0x4a0>)
 8014056:	695b      	ldr	r3, [r3, #20]
 8014058:	429a      	cmp	r2, r3
 801405a:	d00f      	beq.n	801407c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d00d      	beq.n	801407e <tcp_input+0x46a>
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d009      	beq.n	801407e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	617b      	str	r3, [r7, #20]
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d1d1      	bne.n	801401e <tcp_input+0x40a>
 801407a:	e000      	b.n	801407e <tcp_input+0x46a>
            break;
 801407c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d029      	beq.n	80140d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d00a      	beq.n	80140a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	68da      	ldr	r2, [r3, #12]
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014092:	4b10      	ldr	r3, [pc, #64]	@ (80140d4 <tcp_input+0x4c0>)
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801409a:	4a0e      	ldr	r2, [pc, #56]	@ (80140d4 <tcp_input+0x4c0>)
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80140a0:	6978      	ldr	r0, [r7, #20]
 80140a2:	f000 fa03 	bl	80144ac <tcp_listen_input>
      }
      pbuf_free(p);
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f7fd ff6e 	bl	8011f88 <pbuf_free>
      return;
 80140ac:	e1a8      	b.n	8014400 <tcp_input+0x7ec>
 80140ae:	bf00      	nop
 80140b0:	2400cc5c 	.word	0x2400cc5c
 80140b4:	24009b14 	.word	0x24009b14
 80140b8:	08020884 	.word	0x08020884
 80140bc:	080209b0 	.word	0x080209b0
 80140c0:	080208d0 	.word	0x080208d0
 80140c4:	2400cc40 	.word	0x2400cc40
 80140c8:	080209dc 	.word	0x080209dc
 80140cc:	2400cc44 	.word	0x2400cc44
 80140d0:	08020a08 	.word	0x08020a08
 80140d4:	2400cc3c 	.word	0x2400cc3c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	f000 8158 	beq.w	8014390 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80140e0:	4b95      	ldr	r3, [pc, #596]	@ (8014338 <tcp_input+0x724>)
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	891a      	ldrh	r2, [r3, #8]
 80140ea:	4b93      	ldr	r3, [pc, #588]	@ (8014338 <tcp_input+0x724>)
 80140ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80140ee:	4a92      	ldr	r2, [pc, #584]	@ (8014338 <tcp_input+0x724>)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80140f4:	4b91      	ldr	r3, [pc, #580]	@ (801433c <tcp_input+0x728>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4a8f      	ldr	r2, [pc, #572]	@ (8014338 <tcp_input+0x724>)
 80140fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80140fc:	4b90      	ldr	r3, [pc, #576]	@ (8014340 <tcp_input+0x72c>)
 80140fe:	2200      	movs	r2, #0
 8014100:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014102:	4b90      	ldr	r3, [pc, #576]	@ (8014344 <tcp_input+0x730>)
 8014104:	2200      	movs	r2, #0
 8014106:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014108:	4b8f      	ldr	r3, [pc, #572]	@ (8014348 <tcp_input+0x734>)
 801410a:	2200      	movs	r2, #0
 801410c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801410e:	4b8f      	ldr	r3, [pc, #572]	@ (801434c <tcp_input+0x738>)
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	f003 0308 	and.w	r3, r3, #8
 8014116:	2b00      	cmp	r3, #0
 8014118:	d006      	beq.n	8014128 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	7b5b      	ldrb	r3, [r3, #13]
 801411e:	f043 0301 	orr.w	r3, r3, #1
 8014122:	b2da      	uxtb	r2, r3
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801412c:	2b00      	cmp	r3, #0
 801412e:	d017      	beq.n	8014160 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014130:	69f8      	ldr	r0, [r7, #28]
 8014132:	f7ff f929 	bl	8013388 <tcp_process_refused_data>
 8014136:	4603      	mov	r3, r0
 8014138:	f113 0f0d 	cmn.w	r3, #13
 801413c:	d007      	beq.n	801414e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014142:	2b00      	cmp	r3, #0
 8014144:	d00c      	beq.n	8014160 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014146:	4b82      	ldr	r3, [pc, #520]	@ (8014350 <tcp_input+0x73c>)
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d008      	beq.n	8014160 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014152:	2b00      	cmp	r3, #0
 8014154:	f040 80e3 	bne.w	801431e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014158:	69f8      	ldr	r0, [r7, #28]
 801415a:	f003 f9a7 	bl	80174ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801415e:	e0de      	b.n	801431e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014160:	4a7c      	ldr	r2, [pc, #496]	@ (8014354 <tcp_input+0x740>)
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014166:	69f8      	ldr	r0, [r7, #28]
 8014168:	f000 fb18 	bl	801479c <tcp_process>
 801416c:	4603      	mov	r3, r0
 801416e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014170:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014174:	f113 0f0d 	cmn.w	r3, #13
 8014178:	f000 80d3 	beq.w	8014322 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801417c:	4b71      	ldr	r3, [pc, #452]	@ (8014344 <tcp_input+0x730>)
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	f003 0308 	and.w	r3, r3, #8
 8014184:	2b00      	cmp	r3, #0
 8014186:	d015      	beq.n	80141b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801418e:	2b00      	cmp	r3, #0
 8014190:	d008      	beq.n	80141a4 <tcp_input+0x590>
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014198:	69fa      	ldr	r2, [r7, #28]
 801419a:	6912      	ldr	r2, [r2, #16]
 801419c:	f06f 010d 	mvn.w	r1, #13
 80141a0:	4610      	mov	r0, r2
 80141a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80141a4:	69f9      	ldr	r1, [r7, #28]
 80141a6:	486c      	ldr	r0, [pc, #432]	@ (8014358 <tcp_input+0x744>)
 80141a8:	f7ff fbbc 	bl	8013924 <tcp_pcb_remove>
        tcp_free(pcb);
 80141ac:	69f8      	ldr	r0, [r7, #28]
 80141ae:	f7fe f9a7 	bl	8012500 <tcp_free>
 80141b2:	e0da      	b.n	801436a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80141b4:	2300      	movs	r3, #0
 80141b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80141b8:	4b63      	ldr	r3, [pc, #396]	@ (8014348 <tcp_input+0x734>)
 80141ba:	881b      	ldrh	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d01d      	beq.n	80141fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80141c0:	4b61      	ldr	r3, [pc, #388]	@ (8014348 <tcp_input+0x734>)
 80141c2:	881b      	ldrh	r3, [r3, #0]
 80141c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d00a      	beq.n	80141e6 <tcp_input+0x5d2>
 80141d0:	69fb      	ldr	r3, [r7, #28]
 80141d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141d6:	69fa      	ldr	r2, [r7, #28]
 80141d8:	6910      	ldr	r0, [r2, #16]
 80141da:	89fa      	ldrh	r2, [r7, #14]
 80141dc:	69f9      	ldr	r1, [r7, #28]
 80141de:	4798      	blx	r3
 80141e0:	4603      	mov	r3, r0
 80141e2:	74fb      	strb	r3, [r7, #19]
 80141e4:	e001      	b.n	80141ea <tcp_input+0x5d6>
 80141e6:	2300      	movs	r3, #0
 80141e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80141ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141ee:	f113 0f0d 	cmn.w	r3, #13
 80141f2:	f000 8098 	beq.w	8014326 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80141f6:	4b54      	ldr	r3, [pc, #336]	@ (8014348 <tcp_input+0x734>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80141fc:	69f8      	ldr	r0, [r7, #28]
 80141fe:	f000 f915 	bl	801442c <tcp_input_delayed_close>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	f040 8090 	bne.w	801432a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801420a:	4b4d      	ldr	r3, [pc, #308]	@ (8014340 <tcp_input+0x72c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d041      	beq.n	8014296 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014216:	2b00      	cmp	r3, #0
 8014218:	d006      	beq.n	8014228 <tcp_input+0x614>
 801421a:	4b50      	ldr	r3, [pc, #320]	@ (801435c <tcp_input+0x748>)
 801421c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014220:	494f      	ldr	r1, [pc, #316]	@ (8014360 <tcp_input+0x74c>)
 8014222:	4850      	ldr	r0, [pc, #320]	@ (8014364 <tcp_input+0x750>)
 8014224:	f009 f8ae 	bl	801d384 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	8b5b      	ldrh	r3, [r3, #26]
 801422c:	f003 0310 	and.w	r3, r3, #16
 8014230:	2b00      	cmp	r3, #0
 8014232:	d008      	beq.n	8014246 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014234:	4b42      	ldr	r3, [pc, #264]	@ (8014340 <tcp_input+0x72c>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4618      	mov	r0, r3
 801423a:	f7fd fea5 	bl	8011f88 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801423e:	69f8      	ldr	r0, [r7, #28]
 8014240:	f7fe fc46 	bl	8012ad0 <tcp_abort>
            goto aborted;
 8014244:	e091      	b.n	801436a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00c      	beq.n	801426a <tcp_input+0x656>
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	6918      	ldr	r0, [r3, #16]
 801425a:	4b39      	ldr	r3, [pc, #228]	@ (8014340 <tcp_input+0x72c>)
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	2300      	movs	r3, #0
 8014260:	69f9      	ldr	r1, [r7, #28]
 8014262:	47a0      	blx	r4
 8014264:	4603      	mov	r3, r0
 8014266:	74fb      	strb	r3, [r7, #19]
 8014268:	e008      	b.n	801427c <tcp_input+0x668>
 801426a:	4b35      	ldr	r3, [pc, #212]	@ (8014340 <tcp_input+0x72c>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	2300      	movs	r3, #0
 8014270:	69f9      	ldr	r1, [r7, #28]
 8014272:	2000      	movs	r0, #0
 8014274:	f7ff f95e 	bl	8013534 <tcp_recv_null>
 8014278:	4603      	mov	r3, r0
 801427a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801427c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014280:	f113 0f0d 	cmn.w	r3, #13
 8014284:	d053      	beq.n	801432e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014286:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d003      	beq.n	8014296 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801428e:	4b2c      	ldr	r3, [pc, #176]	@ (8014340 <tcp_input+0x72c>)
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014296:	4b2b      	ldr	r3, [pc, #172]	@ (8014344 <tcp_input+0x730>)
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 0320 	and.w	r3, r3, #32
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d030      	beq.n	8014304 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d009      	beq.n	80142be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142ae:	7b5a      	ldrb	r2, [r3, #13]
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142b4:	f042 0220 	orr.w	r2, r2, #32
 80142b8:	b2d2      	uxtb	r2, r2
 80142ba:	735a      	strb	r2, [r3, #13]
 80142bc:	e022      	b.n	8014304 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80142be:	69fb      	ldr	r3, [r7, #28]
 80142c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80142c6:	d005      	beq.n	80142d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142cc:	3301      	adds	r3, #1
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00b      	beq.n	80142f6 <tcp_input+0x6e2>
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	6918      	ldr	r0, [r3, #16]
 80142e8:	2300      	movs	r3, #0
 80142ea:	2200      	movs	r2, #0
 80142ec:	69f9      	ldr	r1, [r7, #28]
 80142ee:	47a0      	blx	r4
 80142f0:	4603      	mov	r3, r0
 80142f2:	74fb      	strb	r3, [r7, #19]
 80142f4:	e001      	b.n	80142fa <tcp_input+0x6e6>
 80142f6:	2300      	movs	r3, #0
 80142f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80142fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142fe:	f113 0f0d 	cmn.w	r3, #13
 8014302:	d016      	beq.n	8014332 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014304:	4b13      	ldr	r3, [pc, #76]	@ (8014354 <tcp_input+0x740>)
 8014306:	2200      	movs	r2, #0
 8014308:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801430a:	69f8      	ldr	r0, [r7, #28]
 801430c:	f000 f88e 	bl	801442c <tcp_input_delayed_close>
 8014310:	4603      	mov	r3, r0
 8014312:	2b00      	cmp	r3, #0
 8014314:	d128      	bne.n	8014368 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014316:	69f8      	ldr	r0, [r7, #28]
 8014318:	f002 fac2 	bl	80168a0 <tcp_output>
 801431c:	e025      	b.n	801436a <tcp_input+0x756>
        goto aborted;
 801431e:	bf00      	nop
 8014320:	e023      	b.n	801436a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014322:	bf00      	nop
 8014324:	e021      	b.n	801436a <tcp_input+0x756>
              goto aborted;
 8014326:	bf00      	nop
 8014328:	e01f      	b.n	801436a <tcp_input+0x756>
          goto aborted;
 801432a:	bf00      	nop
 801432c:	e01d      	b.n	801436a <tcp_input+0x756>
            goto aborted;
 801432e:	bf00      	nop
 8014330:	e01b      	b.n	801436a <tcp_input+0x756>
              goto aborted;
 8014332:	bf00      	nop
 8014334:	e019      	b.n	801436a <tcp_input+0x756>
 8014336:	bf00      	nop
 8014338:	2400cc4c 	.word	0x2400cc4c
 801433c:	2400cc5c 	.word	0x2400cc5c
 8014340:	2400cc7c 	.word	0x2400cc7c
 8014344:	2400cc79 	.word	0x2400cc79
 8014348:	2400cc74 	.word	0x2400cc74
 801434c:	2400cc78 	.word	0x2400cc78
 8014350:	2400cc76 	.word	0x2400cc76
 8014354:	2400cc80 	.word	0x2400cc80
 8014358:	2400cc40 	.word	0x2400cc40
 801435c:	08020884 	.word	0x08020884
 8014360:	08020a38 	.word	0x08020a38
 8014364:	080208d0 	.word	0x080208d0
          goto aborted;
 8014368:	bf00      	nop
    tcp_input_pcb = NULL;
 801436a:	4b27      	ldr	r3, [pc, #156]	@ (8014408 <tcp_input+0x7f4>)
 801436c:	2200      	movs	r2, #0
 801436e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014370:	4b26      	ldr	r3, [pc, #152]	@ (801440c <tcp_input+0x7f8>)
 8014372:	2200      	movs	r2, #0
 8014374:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014376:	4b26      	ldr	r3, [pc, #152]	@ (8014410 <tcp_input+0x7fc>)
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d03f      	beq.n	80143fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801437e:	4b24      	ldr	r3, [pc, #144]	@ (8014410 <tcp_input+0x7fc>)
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	4618      	mov	r0, r3
 8014384:	f7fd fe00 	bl	8011f88 <pbuf_free>
      inseg.p = NULL;
 8014388:	4b21      	ldr	r3, [pc, #132]	@ (8014410 <tcp_input+0x7fc>)
 801438a:	2200      	movs	r2, #0
 801438c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801438e:	e036      	b.n	80143fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014390:	4b20      	ldr	r3, [pc, #128]	@ (8014414 <tcp_input+0x800>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	899b      	ldrh	r3, [r3, #12]
 8014396:	b29b      	uxth	r3, r3
 8014398:	4618      	mov	r0, r3
 801439a:	f7fc f93f 	bl	801061c <lwip_htons>
 801439e:	4603      	mov	r3, r0
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	f003 0304 	and.w	r3, r3, #4
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d118      	bne.n	80143dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143aa:	4b1b      	ldr	r3, [pc, #108]	@ (8014418 <tcp_input+0x804>)
 80143ac:	6819      	ldr	r1, [r3, #0]
 80143ae:	4b1b      	ldr	r3, [pc, #108]	@ (801441c <tcp_input+0x808>)
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	461a      	mov	r2, r3
 80143b4:	4b1a      	ldr	r3, [pc, #104]	@ (8014420 <tcp_input+0x80c>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143ba:	4b16      	ldr	r3, [pc, #88]	@ (8014414 <tcp_input+0x800>)
 80143bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143be:	885b      	ldrh	r3, [r3, #2]
 80143c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143c2:	4a14      	ldr	r2, [pc, #80]	@ (8014414 <tcp_input+0x800>)
 80143c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143c6:	8812      	ldrh	r2, [r2, #0]
 80143c8:	b292      	uxth	r2, r2
 80143ca:	9202      	str	r2, [sp, #8]
 80143cc:	9301      	str	r3, [sp, #4]
 80143ce:	4b15      	ldr	r3, [pc, #84]	@ (8014424 <tcp_input+0x810>)
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	4b15      	ldr	r3, [pc, #84]	@ (8014428 <tcp_input+0x814>)
 80143d4:	4602      	mov	r2, r0
 80143d6:	2000      	movs	r0, #0
 80143d8:	f003 f816 	bl	8017408 <tcp_rst>
    pbuf_free(p);
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7fd fdd3 	bl	8011f88 <pbuf_free>
  return;
 80143e2:	e00c      	b.n	80143fe <tcp_input+0x7ea>
    goto dropped;
 80143e4:	bf00      	nop
 80143e6:	e006      	b.n	80143f6 <tcp_input+0x7e2>
    goto dropped;
 80143e8:	bf00      	nop
 80143ea:	e004      	b.n	80143f6 <tcp_input+0x7e2>
    goto dropped;
 80143ec:	bf00      	nop
 80143ee:	e002      	b.n	80143f6 <tcp_input+0x7e2>
      goto dropped;
 80143f0:	bf00      	nop
 80143f2:	e000      	b.n	80143f6 <tcp_input+0x7e2>
      goto dropped;
 80143f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f7fd fdc6 	bl	8011f88 <pbuf_free>
 80143fc:	e000      	b.n	8014400 <tcp_input+0x7ec>
  return;
 80143fe:	bf00      	nop
}
 8014400:	3724      	adds	r7, #36	@ 0x24
 8014402:	46bd      	mov	sp, r7
 8014404:	bd90      	pop	{r4, r7, pc}
 8014406:	bf00      	nop
 8014408:	2400cc80 	.word	0x2400cc80
 801440c:	2400cc7c 	.word	0x2400cc7c
 8014410:	2400cc4c 	.word	0x2400cc4c
 8014414:	2400cc5c 	.word	0x2400cc5c
 8014418:	2400cc70 	.word	0x2400cc70
 801441c:	2400cc76 	.word	0x2400cc76
 8014420:	2400cc6c 	.word	0x2400cc6c
 8014424:	24009b24 	.word	0x24009b24
 8014428:	24009b28 	.word	0x24009b28

0801442c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_input_delayed_close+0x1c>
 801443a:	4b17      	ldr	r3, [pc, #92]	@ (8014498 <tcp_input_delayed_close+0x6c>)
 801443c:	f240 225a 	movw	r2, #602	@ 0x25a
 8014440:	4916      	ldr	r1, [pc, #88]	@ (801449c <tcp_input_delayed_close+0x70>)
 8014442:	4817      	ldr	r0, [pc, #92]	@ (80144a0 <tcp_input_delayed_close+0x74>)
 8014444:	f008 ff9e 	bl	801d384 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014448:	4b16      	ldr	r3, [pc, #88]	@ (80144a4 <tcp_input_delayed_close+0x78>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f003 0310 	and.w	r3, r3, #16
 8014450:	2b00      	cmp	r3, #0
 8014452:	d01c      	beq.n	801448e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	8b5b      	ldrh	r3, [r3, #26]
 8014458:	f003 0310 	and.w	r3, r3, #16
 801445c:	2b00      	cmp	r3, #0
 801445e:	d10d      	bne.n	801447c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014466:	2b00      	cmp	r3, #0
 8014468:	d008      	beq.n	801447c <tcp_input_delayed_close+0x50>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	6912      	ldr	r2, [r2, #16]
 8014474:	f06f 010e 	mvn.w	r1, #14
 8014478:	4610      	mov	r0, r2
 801447a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801447c:	6879      	ldr	r1, [r7, #4]
 801447e:	480a      	ldr	r0, [pc, #40]	@ (80144a8 <tcp_input_delayed_close+0x7c>)
 8014480:	f7ff fa50 	bl	8013924 <tcp_pcb_remove>
    tcp_free(pcb);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7fe f83b 	bl	8012500 <tcp_free>
    return 1;
 801448a:	2301      	movs	r3, #1
 801448c:	e000      	b.n	8014490 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	08020884 	.word	0x08020884
 801449c:	08020a54 	.word	0x08020a54
 80144a0:	080208d0 	.word	0x080208d0
 80144a4:	2400cc79 	.word	0x2400cc79
 80144a8:	2400cc40 	.word	0x2400cc40

080144ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80144ac:	b590      	push	{r4, r7, lr}
 80144ae:	b08b      	sub	sp, #44	@ 0x2c
 80144b0:	af04      	add	r7, sp, #16
 80144b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80144b4:	4b6f      	ldr	r3, [pc, #444]	@ (8014674 <tcp_listen_input+0x1c8>)
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	f003 0304 	and.w	r3, r3, #4
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f040 80d2 	bne.w	8014666 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d106      	bne.n	80144d6 <tcp_listen_input+0x2a>
 80144c8:	4b6b      	ldr	r3, [pc, #428]	@ (8014678 <tcp_listen_input+0x1cc>)
 80144ca:	f240 2281 	movw	r2, #641	@ 0x281
 80144ce:	496b      	ldr	r1, [pc, #428]	@ (801467c <tcp_listen_input+0x1d0>)
 80144d0:	486b      	ldr	r0, [pc, #428]	@ (8014680 <tcp_listen_input+0x1d4>)
 80144d2:	f008 ff57 	bl	801d384 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80144d6:	4b67      	ldr	r3, [pc, #412]	@ (8014674 <tcp_listen_input+0x1c8>)
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	f003 0310 	and.w	r3, r3, #16
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d019      	beq.n	8014516 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144e2:	4b68      	ldr	r3, [pc, #416]	@ (8014684 <tcp_listen_input+0x1d8>)
 80144e4:	6819      	ldr	r1, [r3, #0]
 80144e6:	4b68      	ldr	r3, [pc, #416]	@ (8014688 <tcp_listen_input+0x1dc>)
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	461a      	mov	r2, r3
 80144ec:	4b67      	ldr	r3, [pc, #412]	@ (801468c <tcp_listen_input+0x1e0>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144f2:	4b67      	ldr	r3, [pc, #412]	@ (8014690 <tcp_listen_input+0x1e4>)
 80144f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144f6:	885b      	ldrh	r3, [r3, #2]
 80144f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144fa:	4a65      	ldr	r2, [pc, #404]	@ (8014690 <tcp_listen_input+0x1e4>)
 80144fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144fe:	8812      	ldrh	r2, [r2, #0]
 8014500:	b292      	uxth	r2, r2
 8014502:	9202      	str	r2, [sp, #8]
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	4b63      	ldr	r3, [pc, #396]	@ (8014694 <tcp_listen_input+0x1e8>)
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	4b63      	ldr	r3, [pc, #396]	@ (8014698 <tcp_listen_input+0x1ec>)
 801450c:	4602      	mov	r2, r0
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f002 ff7a 	bl	8017408 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014514:	e0a9      	b.n	801466a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014516:	4b57      	ldr	r3, [pc, #348]	@ (8014674 <tcp_listen_input+0x1c8>)
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	f003 0302 	and.w	r3, r3, #2
 801451e:	2b00      	cmp	r3, #0
 8014520:	f000 80a3 	beq.w	801466a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	7d5b      	ldrb	r3, [r3, #21]
 8014528:	4618      	mov	r0, r3
 801452a:	f7ff f927 	bl	801377c <tcp_alloc>
 801452e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d111      	bne.n	801455a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	699b      	ldr	r3, [r3, #24]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00a      	beq.n	8014554 <tcp_listen_input+0xa8>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	699b      	ldr	r3, [r3, #24]
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	6910      	ldr	r0, [r2, #16]
 8014546:	f04f 32ff 	mov.w	r2, #4294967295
 801454a:	2100      	movs	r1, #0
 801454c:	4798      	blx	r3
 801454e:	4603      	mov	r3, r0
 8014550:	73bb      	strb	r3, [r7, #14]
      return;
 8014552:	e08b      	b.n	801466c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014554:	23f0      	movs	r3, #240	@ 0xf0
 8014556:	73bb      	strb	r3, [r7, #14]
      return;
 8014558:	e088      	b.n	801466c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801455a:	4b50      	ldr	r3, [pc, #320]	@ (801469c <tcp_listen_input+0x1f0>)
 801455c:	695a      	ldr	r2, [r3, #20]
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014562:	4b4e      	ldr	r3, [pc, #312]	@ (801469c <tcp_listen_input+0x1f0>)
 8014564:	691a      	ldr	r2, [r3, #16]
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	8ada      	ldrh	r2, [r3, #22]
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014572:	4b47      	ldr	r3, [pc, #284]	@ (8014690 <tcp_listen_input+0x1e4>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	b29a      	uxth	r2, r3
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2203      	movs	r2, #3
 8014582:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014584:	4b41      	ldr	r3, [pc, #260]	@ (801468c <tcp_listen_input+0x1e0>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	1c5a      	adds	r2, r3, #1
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014596:	6978      	ldr	r0, [r7, #20]
 8014598:	f7ff fa58 	bl	8013a4c <tcp_next_iss>
 801459c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	693a      	ldr	r2, [r7, #16]
 80145a2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	693a      	ldr	r2, [r7, #16]
 80145a8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	693a      	ldr	r2, [r7, #16]
 80145ae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	693a      	ldr	r2, [r7, #16]
 80145b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80145b6:	4b35      	ldr	r3, [pc, #212]	@ (801468c <tcp_listen_input+0x1e0>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	1e5a      	subs	r2, r3, #1
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	691a      	ldr	r2, [r3, #16]
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	7a5b      	ldrb	r3, [r3, #9]
 80145d2:	f003 030c 	and.w	r3, r3, #12
 80145d6:	b2da      	uxtb	r2, r3
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	7a1a      	ldrb	r2, [r3, #8]
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80145e4:	4b2e      	ldr	r3, [pc, #184]	@ (80146a0 <tcp_listen_input+0x1f4>)
 80145e6:	681a      	ldr	r2, [r3, #0]
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	60da      	str	r2, [r3, #12]
 80145ec:	4a2c      	ldr	r2, [pc, #176]	@ (80146a0 <tcp_listen_input+0x1f4>)
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	6013      	str	r3, [r2, #0]
 80145f2:	f003 f8cb 	bl	801778c <tcp_timer_needed>
 80145f6:	4b2b      	ldr	r3, [pc, #172]	@ (80146a4 <tcp_listen_input+0x1f8>)
 80145f8:	2201      	movs	r2, #1
 80145fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80145fc:	6978      	ldr	r0, [r7, #20]
 80145fe:	f001 fd8b 	bl	8016118 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014602:	4b23      	ldr	r3, [pc, #140]	@ (8014690 <tcp_listen_input+0x1e4>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	89db      	ldrh	r3, [r3, #14]
 8014608:	b29a      	uxth	r2, r3
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	3304      	adds	r3, #4
 8014624:	4618      	mov	r0, r3
 8014626:	f006 fe79 	bl	801b31c <ip4_route>
 801462a:	4601      	mov	r1, r0
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	3304      	adds	r3, #4
 8014630:	461a      	mov	r2, r3
 8014632:	4620      	mov	r0, r4
 8014634:	f7ff fa30 	bl	8013a98 <tcp_eff_send_mss_netif>
 8014638:	4603      	mov	r3, r0
 801463a:	461a      	mov	r2, r3
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014640:	2112      	movs	r1, #18
 8014642:	6978      	ldr	r0, [r7, #20]
 8014644:	f002 f83e 	bl	80166c4 <tcp_enqueue_flags>
 8014648:	4603      	mov	r3, r0
 801464a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801464c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d004      	beq.n	801465e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014654:	2100      	movs	r1, #0
 8014656:	6978      	ldr	r0, [r7, #20]
 8014658:	f7fe f97c 	bl	8012954 <tcp_abandon>
      return;
 801465c:	e006      	b.n	801466c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801465e:	6978      	ldr	r0, [r7, #20]
 8014660:	f002 f91e 	bl	80168a0 <tcp_output>
  return;
 8014664:	e001      	b.n	801466a <tcp_listen_input+0x1be>
    return;
 8014666:	bf00      	nop
 8014668:	e000      	b.n	801466c <tcp_listen_input+0x1c0>
  return;
 801466a:	bf00      	nop
}
 801466c:	371c      	adds	r7, #28
 801466e:	46bd      	mov	sp, r7
 8014670:	bd90      	pop	{r4, r7, pc}
 8014672:	bf00      	nop
 8014674:	2400cc78 	.word	0x2400cc78
 8014678:	08020884 	.word	0x08020884
 801467c:	08020a7c 	.word	0x08020a7c
 8014680:	080208d0 	.word	0x080208d0
 8014684:	2400cc70 	.word	0x2400cc70
 8014688:	2400cc76 	.word	0x2400cc76
 801468c:	2400cc6c 	.word	0x2400cc6c
 8014690:	2400cc5c 	.word	0x2400cc5c
 8014694:	24009b24 	.word	0x24009b24
 8014698:	24009b28 	.word	0x24009b28
 801469c:	24009b14 	.word	0x24009b14
 80146a0:	2400cc40 	.word	0x2400cc40
 80146a4:	2400cc48 	.word	0x2400cc48

080146a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b086      	sub	sp, #24
 80146ac:	af04      	add	r7, sp, #16
 80146ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80146b0:	4b2f      	ldr	r3, [pc, #188]	@ (8014770 <tcp_timewait_input+0xc8>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	f003 0304 	and.w	r3, r3, #4
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d153      	bne.n	8014764 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <tcp_timewait_input+0x28>
 80146c2:	4b2c      	ldr	r3, [pc, #176]	@ (8014774 <tcp_timewait_input+0xcc>)
 80146c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80146c8:	492b      	ldr	r1, [pc, #172]	@ (8014778 <tcp_timewait_input+0xd0>)
 80146ca:	482c      	ldr	r0, [pc, #176]	@ (801477c <tcp_timewait_input+0xd4>)
 80146cc:	f008 fe5a 	bl	801d384 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80146d0:	4b27      	ldr	r3, [pc, #156]	@ (8014770 <tcp_timewait_input+0xc8>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 0302 	and.w	r3, r3, #2
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d02a      	beq.n	8014732 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80146dc:	4b28      	ldr	r3, [pc, #160]	@ (8014780 <tcp_timewait_input+0xd8>)
 80146de:	681a      	ldr	r2, [r3, #0]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	db2d      	blt.n	8014746 <tcp_timewait_input+0x9e>
 80146ea:	4b25      	ldr	r3, [pc, #148]	@ (8014780 <tcp_timewait_input+0xd8>)
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146f2:	6879      	ldr	r1, [r7, #4]
 80146f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80146f6:	440b      	add	r3, r1
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	dc23      	bgt.n	8014746 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146fe:	4b21      	ldr	r3, [pc, #132]	@ (8014784 <tcp_timewait_input+0xdc>)
 8014700:	6819      	ldr	r1, [r3, #0]
 8014702:	4b21      	ldr	r3, [pc, #132]	@ (8014788 <tcp_timewait_input+0xe0>)
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	461a      	mov	r2, r3
 8014708:	4b1d      	ldr	r3, [pc, #116]	@ (8014780 <tcp_timewait_input+0xd8>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801470e:	4b1f      	ldr	r3, [pc, #124]	@ (801478c <tcp_timewait_input+0xe4>)
 8014710:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014712:	885b      	ldrh	r3, [r3, #2]
 8014714:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014716:	4a1d      	ldr	r2, [pc, #116]	@ (801478c <tcp_timewait_input+0xe4>)
 8014718:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801471a:	8812      	ldrh	r2, [r2, #0]
 801471c:	b292      	uxth	r2, r2
 801471e:	9202      	str	r2, [sp, #8]
 8014720:	9301      	str	r3, [sp, #4]
 8014722:	4b1b      	ldr	r3, [pc, #108]	@ (8014790 <tcp_timewait_input+0xe8>)
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	4b1b      	ldr	r3, [pc, #108]	@ (8014794 <tcp_timewait_input+0xec>)
 8014728:	4602      	mov	r2, r0
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f002 fe6c 	bl	8017408 <tcp_rst>
      return;
 8014730:	e01b      	b.n	801476a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014732:	4b0f      	ldr	r3, [pc, #60]	@ (8014770 <tcp_timewait_input+0xc8>)
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	2b00      	cmp	r3, #0
 801473c:	d003      	beq.n	8014746 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801473e:	4b16      	ldr	r3, [pc, #88]	@ (8014798 <tcp_timewait_input+0xf0>)
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014746:	4b10      	ldr	r3, [pc, #64]	@ (8014788 <tcp_timewait_input+0xe0>)
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d00c      	beq.n	8014768 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	8b5b      	ldrh	r3, [r3, #26]
 8014752:	f043 0302 	orr.w	r3, r3, #2
 8014756:	b29a      	uxth	r2, r3
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f002 f89f 	bl	80168a0 <tcp_output>
  }
  return;
 8014762:	e001      	b.n	8014768 <tcp_timewait_input+0xc0>
    return;
 8014764:	bf00      	nop
 8014766:	e000      	b.n	801476a <tcp_timewait_input+0xc2>
  return;
 8014768:	bf00      	nop
}
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	2400cc78 	.word	0x2400cc78
 8014774:	08020884 	.word	0x08020884
 8014778:	08020a9c 	.word	0x08020a9c
 801477c:	080208d0 	.word	0x080208d0
 8014780:	2400cc6c 	.word	0x2400cc6c
 8014784:	2400cc70 	.word	0x2400cc70
 8014788:	2400cc76 	.word	0x2400cc76
 801478c:	2400cc5c 	.word	0x2400cc5c
 8014790:	24009b24 	.word	0x24009b24
 8014794:	24009b28 	.word	0x24009b28
 8014798:	2400cc34 	.word	0x2400cc34

0801479c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801479c:	b590      	push	{r4, r7, lr}
 801479e:	b08d      	sub	sp, #52	@ 0x34
 80147a0:	af04      	add	r7, sp, #16
 80147a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80147a8:	2300      	movs	r3, #0
 80147aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d106      	bne.n	80147c0 <tcp_process+0x24>
 80147b2:	4b9d      	ldr	r3, [pc, #628]	@ (8014a28 <tcp_process+0x28c>)
 80147b4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80147b8:	499c      	ldr	r1, [pc, #624]	@ (8014a2c <tcp_process+0x290>)
 80147ba:	489d      	ldr	r0, [pc, #628]	@ (8014a30 <tcp_process+0x294>)
 80147bc:	f008 fde2 	bl	801d384 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80147c0:	4b9c      	ldr	r3, [pc, #624]	@ (8014a34 <tcp_process+0x298>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	f003 0304 	and.w	r3, r3, #4
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d04e      	beq.n	801486a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	7d1b      	ldrb	r3, [r3, #20]
 80147d0:	2b02      	cmp	r3, #2
 80147d2:	d108      	bne.n	80147e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147d8:	4b97      	ldr	r3, [pc, #604]	@ (8014a38 <tcp_process+0x29c>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d123      	bne.n	8014828 <tcp_process+0x8c>
        acceptable = 1;
 80147e0:	2301      	movs	r3, #1
 80147e2:	76fb      	strb	r3, [r7, #27]
 80147e4:	e020      	b.n	8014828 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147ea:	4b94      	ldr	r3, [pc, #592]	@ (8014a3c <tcp_process+0x2a0>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d102      	bne.n	80147f8 <tcp_process+0x5c>
        acceptable = 1;
 80147f2:	2301      	movs	r3, #1
 80147f4:	76fb      	strb	r3, [r7, #27]
 80147f6:	e017      	b.n	8014828 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80147f8:	4b90      	ldr	r3, [pc, #576]	@ (8014a3c <tcp_process+0x2a0>)
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014800:	1ad3      	subs	r3, r2, r3
 8014802:	2b00      	cmp	r3, #0
 8014804:	db10      	blt.n	8014828 <tcp_process+0x8c>
 8014806:	4b8d      	ldr	r3, [pc, #564]	@ (8014a3c <tcp_process+0x2a0>)
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801480e:	6879      	ldr	r1, [r7, #4]
 8014810:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014812:	440b      	add	r3, r1
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	2b00      	cmp	r3, #0
 8014818:	dc06      	bgt.n	8014828 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	8b5b      	ldrh	r3, [r3, #26]
 801481e:	f043 0302 	orr.w	r3, r3, #2
 8014822:	b29a      	uxth	r2, r3
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014828:	7efb      	ldrb	r3, [r7, #27]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d01b      	beq.n	8014866 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	7d1b      	ldrb	r3, [r3, #20]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <tcp_process+0xa8>
 8014836:	4b7c      	ldr	r3, [pc, #496]	@ (8014a28 <tcp_process+0x28c>)
 8014838:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801483c:	4980      	ldr	r1, [pc, #512]	@ (8014a40 <tcp_process+0x2a4>)
 801483e:	487c      	ldr	r0, [pc, #496]	@ (8014a30 <tcp_process+0x294>)
 8014840:	f008 fda0 	bl	801d384 <iprintf>
      recv_flags |= TF_RESET;
 8014844:	4b7f      	ldr	r3, [pc, #508]	@ (8014a44 <tcp_process+0x2a8>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	f043 0308 	orr.w	r3, r3, #8
 801484c:	b2da      	uxtb	r2, r3
 801484e:	4b7d      	ldr	r3, [pc, #500]	@ (8014a44 <tcp_process+0x2a8>)
 8014850:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8b5b      	ldrh	r3, [r3, #26]
 8014856:	f023 0301 	bic.w	r3, r3, #1
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014860:	f06f 030d 	mvn.w	r3, #13
 8014864:	e37a      	b.n	8014f5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014866:	2300      	movs	r3, #0
 8014868:	e378      	b.n	8014f5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801486a:	4b72      	ldr	r3, [pc, #456]	@ (8014a34 <tcp_process+0x298>)
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	f003 0302 	and.w	r3, r3, #2
 8014872:	2b00      	cmp	r3, #0
 8014874:	d010      	beq.n	8014898 <tcp_process+0xfc>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	7d1b      	ldrb	r3, [r3, #20]
 801487a:	2b02      	cmp	r3, #2
 801487c:	d00c      	beq.n	8014898 <tcp_process+0xfc>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	7d1b      	ldrb	r3, [r3, #20]
 8014882:	2b03      	cmp	r3, #3
 8014884:	d008      	beq.n	8014898 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	8b5b      	ldrh	r3, [r3, #26]
 801488a:	f043 0302 	orr.w	r3, r3, #2
 801488e:	b29a      	uxth	r2, r3
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014894:	2300      	movs	r3, #0
 8014896:	e361      	b.n	8014f5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	8b5b      	ldrh	r3, [r3, #26]
 801489c:	f003 0310 	and.w	r3, r3, #16
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d103      	bne.n	80148ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80148a4:	4b68      	ldr	r3, [pc, #416]	@ (8014a48 <tcp_process+0x2ac>)
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f001 fc2b 	bl	8016118 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	7d1b      	ldrb	r3, [r3, #20]
 80148c6:	3b02      	subs	r3, #2
 80148c8:	2b07      	cmp	r3, #7
 80148ca:	f200 8337 	bhi.w	8014f3c <tcp_process+0x7a0>
 80148ce:	a201      	add	r2, pc, #4	@ (adr r2, 80148d4 <tcp_process+0x138>)
 80148d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148d4:	080148f5 	.word	0x080148f5
 80148d8:	08014b25 	.word	0x08014b25
 80148dc:	08014c9d 	.word	0x08014c9d
 80148e0:	08014cc7 	.word	0x08014cc7
 80148e4:	08014deb 	.word	0x08014deb
 80148e8:	08014c9d 	.word	0x08014c9d
 80148ec:	08014e77 	.word	0x08014e77
 80148f0:	08014f07 	.word	0x08014f07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80148f4:	4b4f      	ldr	r3, [pc, #316]	@ (8014a34 <tcp_process+0x298>)
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	f003 0310 	and.w	r3, r3, #16
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f000 80e4 	beq.w	8014aca <tcp_process+0x32e>
 8014902:	4b4c      	ldr	r3, [pc, #304]	@ (8014a34 <tcp_process+0x298>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 0302 	and.w	r3, r3, #2
 801490a:	2b00      	cmp	r3, #0
 801490c:	f000 80dd 	beq.w	8014aca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014914:	1c5a      	adds	r2, r3, #1
 8014916:	4b48      	ldr	r3, [pc, #288]	@ (8014a38 <tcp_process+0x29c>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	429a      	cmp	r2, r3
 801491c:	f040 80d5 	bne.w	8014aca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014920:	4b46      	ldr	r3, [pc, #280]	@ (8014a3c <tcp_process+0x2a0>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	1c5a      	adds	r2, r3, #1
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014932:	4b41      	ldr	r3, [pc, #260]	@ (8014a38 <tcp_process+0x29c>)
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801493a:	4b44      	ldr	r3, [pc, #272]	@ (8014a4c <tcp_process+0x2b0>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	89db      	ldrh	r3, [r3, #14]
 8014940:	b29a      	uxth	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014954:	4b39      	ldr	r3, [pc, #228]	@ (8014a3c <tcp_process+0x2a0>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	1e5a      	subs	r2, r3, #1
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2204      	movs	r2, #4
 8014962:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	3304      	adds	r3, #4
 801496c:	4618      	mov	r0, r3
 801496e:	f006 fcd5 	bl	801b31c <ip4_route>
 8014972:	4601      	mov	r1, r0
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	3304      	adds	r3, #4
 8014978:	461a      	mov	r2, r3
 801497a:	4620      	mov	r0, r4
 801497c:	f7ff f88c 	bl	8013a98 <tcp_eff_send_mss_netif>
 8014980:	4603      	mov	r3, r0
 8014982:	461a      	mov	r2, r3
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801498c:	009a      	lsls	r2, r3, #2
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014998:	428b      	cmp	r3, r1
 801499a:	bf38      	it	cc
 801499c:	460b      	movcc	r3, r1
 801499e:	429a      	cmp	r2, r3
 80149a0:	d204      	bcs.n	80149ac <tcp_process+0x210>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	e00d      	b.n	80149c8 <tcp_process+0x22c>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d904      	bls.n	80149c4 <tcp_process+0x228>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	e001      	b.n	80149c8 <tcp_process+0x22c>
 80149c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d106      	bne.n	80149e6 <tcp_process+0x24a>
 80149d8:	4b13      	ldr	r3, [pc, #76]	@ (8014a28 <tcp_process+0x28c>)
 80149da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80149de:	491c      	ldr	r1, [pc, #112]	@ (8014a50 <tcp_process+0x2b4>)
 80149e0:	4813      	ldr	r0, [pc, #76]	@ (8014a30 <tcp_process+0x294>)
 80149e2:	f008 fccf 	bl	801d384 <iprintf>
        --pcb->snd_queuelen;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80149ec:	3b01      	subs	r3, #1
 80149ee:	b29a      	uxth	r2, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80149fc:	69fb      	ldr	r3, [r7, #28]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d12a      	bne.n	8014a58 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d106      	bne.n	8014a1c <tcp_process+0x280>
 8014a0e:	4b06      	ldr	r3, [pc, #24]	@ (8014a28 <tcp_process+0x28c>)
 8014a10:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014a14:	490f      	ldr	r1, [pc, #60]	@ (8014a54 <tcp_process+0x2b8>)
 8014a16:	4806      	ldr	r0, [pc, #24]	@ (8014a30 <tcp_process+0x294>)
 8014a18:	f008 fcb4 	bl	801d384 <iprintf>
          pcb->unsent = rseg->next;
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014a24:	e01c      	b.n	8014a60 <tcp_process+0x2c4>
 8014a26:	bf00      	nop
 8014a28:	08020884 	.word	0x08020884
 8014a2c:	08020abc 	.word	0x08020abc
 8014a30:	080208d0 	.word	0x080208d0
 8014a34:	2400cc78 	.word	0x2400cc78
 8014a38:	2400cc70 	.word	0x2400cc70
 8014a3c:	2400cc6c 	.word	0x2400cc6c
 8014a40:	08020ad8 	.word	0x08020ad8
 8014a44:	2400cc79 	.word	0x2400cc79
 8014a48:	2400cc34 	.word	0x2400cc34
 8014a4c:	2400cc5c 	.word	0x2400cc5c
 8014a50:	08020af8 	.word	0x08020af8
 8014a54:	08020b10 	.word	0x08020b10
        } else {
          pcb->unacked = rseg->next;
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014a60:	69f8      	ldr	r0, [r7, #28]
 8014a62:	f7fe fd22 	bl	80134aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d104      	bne.n	8014a78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a74:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014a76:	e006      	b.n	8014a86 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d00a      	beq.n	8014aa6 <tcp_process+0x30a>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	6910      	ldr	r0, [r2, #16]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	6879      	ldr	r1, [r7, #4]
 8014a9e:	4798      	blx	r3
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	76bb      	strb	r3, [r7, #26]
 8014aa4:	e001      	b.n	8014aaa <tcp_process+0x30e>
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014aaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014aae:	f113 0f0d 	cmn.w	r3, #13
 8014ab2:	d102      	bne.n	8014aba <tcp_process+0x31e>
          return ERR_ABRT;
 8014ab4:	f06f 030c 	mvn.w	r3, #12
 8014ab8:	e250      	b.n	8014f5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	8b5b      	ldrh	r3, [r3, #26]
 8014abe:	f043 0302 	orr.w	r3, r3, #2
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014ac8:	e23a      	b.n	8014f40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014aca:	4b98      	ldr	r3, [pc, #608]	@ (8014d2c <tcp_process+0x590>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	f003 0310 	and.w	r3, r3, #16
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f000 8234 	beq.w	8014f40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ad8:	4b95      	ldr	r3, [pc, #596]	@ (8014d30 <tcp_process+0x594>)
 8014ada:	6819      	ldr	r1, [r3, #0]
 8014adc:	4b95      	ldr	r3, [pc, #596]	@ (8014d34 <tcp_process+0x598>)
 8014ade:	881b      	ldrh	r3, [r3, #0]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4b95      	ldr	r3, [pc, #596]	@ (8014d38 <tcp_process+0x59c>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ae8:	4b94      	ldr	r3, [pc, #592]	@ (8014d3c <tcp_process+0x5a0>)
 8014aea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014aec:	885b      	ldrh	r3, [r3, #2]
 8014aee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014af0:	4a92      	ldr	r2, [pc, #584]	@ (8014d3c <tcp_process+0x5a0>)
 8014af2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014af4:	8812      	ldrh	r2, [r2, #0]
 8014af6:	b292      	uxth	r2, r2
 8014af8:	9202      	str	r2, [sp, #8]
 8014afa:	9301      	str	r3, [sp, #4]
 8014afc:	4b90      	ldr	r3, [pc, #576]	@ (8014d40 <tcp_process+0x5a4>)
 8014afe:	9300      	str	r3, [sp, #0]
 8014b00:	4b90      	ldr	r3, [pc, #576]	@ (8014d44 <tcp_process+0x5a8>)
 8014b02:	4602      	mov	r2, r0
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f002 fc7f 	bl	8017408 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b10:	2b05      	cmp	r3, #5
 8014b12:	f200 8215 	bhi.w	8014f40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f002 fa4b 	bl	8016fb8 <tcp_rexmit_rto>
      break;
 8014b22:	e20d      	b.n	8014f40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014b24:	4b81      	ldr	r3, [pc, #516]	@ (8014d2c <tcp_process+0x590>)
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	f003 0310 	and.w	r3, r3, #16
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f000 80a1 	beq.w	8014c74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014b32:	4b7f      	ldr	r3, [pc, #508]	@ (8014d30 <tcp_process+0x594>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	db7e      	blt.n	8014c40 <tcp_process+0x4a4>
 8014b42:	4b7b      	ldr	r3, [pc, #492]	@ (8014d30 <tcp_process+0x594>)
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	dc77      	bgt.n	8014c40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2204      	movs	r2, #4
 8014b54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d102      	bne.n	8014b64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014b5e:	23fa      	movs	r3, #250	@ 0xfa
 8014b60:	76bb      	strb	r3, [r7, #26]
 8014b62:	e01d      	b.n	8014ba0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b68:	699b      	ldr	r3, [r3, #24]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d106      	bne.n	8014b7c <tcp_process+0x3e0>
 8014b6e:	4b76      	ldr	r3, [pc, #472]	@ (8014d48 <tcp_process+0x5ac>)
 8014b70:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014b74:	4975      	ldr	r1, [pc, #468]	@ (8014d4c <tcp_process+0x5b0>)
 8014b76:	4876      	ldr	r0, [pc, #472]	@ (8014d50 <tcp_process+0x5b4>)
 8014b78:	f008 fc04 	bl	801d384 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b80:	699b      	ldr	r3, [r3, #24]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d00a      	beq.n	8014b9c <tcp_process+0x400>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b8a:	699b      	ldr	r3, [r3, #24]
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	6910      	ldr	r0, [r2, #16]
 8014b90:	2200      	movs	r2, #0
 8014b92:	6879      	ldr	r1, [r7, #4]
 8014b94:	4798      	blx	r3
 8014b96:	4603      	mov	r3, r0
 8014b98:	76bb      	strb	r3, [r7, #26]
 8014b9a:	e001      	b.n	8014ba0 <tcp_process+0x404>
 8014b9c:	23f0      	movs	r3, #240	@ 0xf0
 8014b9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014ba0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00a      	beq.n	8014bbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014ba8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014bac:	f113 0f0d 	cmn.w	r3, #13
 8014bb0:	d002      	beq.n	8014bb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7fd ff8c 	bl	8012ad0 <tcp_abort>
            }
            return ERR_ABRT;
 8014bb8:	f06f 030c 	mvn.w	r3, #12
 8014bbc:	e1ce      	b.n	8014f5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 fae0 	bl	8015184 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014bc4:	4b63      	ldr	r3, [pc, #396]	@ (8014d54 <tcp_process+0x5b8>)
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d005      	beq.n	8014bd8 <tcp_process+0x43c>
            recv_acked--;
 8014bcc:	4b61      	ldr	r3, [pc, #388]	@ (8014d54 <tcp_process+0x5b8>)
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8014d54 <tcp_process+0x5b8>)
 8014bd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014bdc:	009a      	lsls	r2, r3, #2
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014be2:	005b      	lsls	r3, r3, #1
 8014be4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014be8:	428b      	cmp	r3, r1
 8014bea:	bf38      	it	cc
 8014bec:	460b      	movcc	r3, r1
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d204      	bcs.n	8014bfc <tcp_process+0x460>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	b29b      	uxth	r3, r3
 8014bfa:	e00d      	b.n	8014c18 <tcp_process+0x47c>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d904      	bls.n	8014c14 <tcp_process+0x478>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c0e:	005b      	lsls	r3, r3, #1
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	e001      	b.n	8014c18 <tcp_process+0x47c>
 8014c14:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8014d58 <tcp_process+0x5bc>)
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	f003 0320 	and.w	r3, r3, #32
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d037      	beq.n	8014c9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	8b5b      	ldrh	r3, [r3, #26]
 8014c2e:	f043 0302 	orr.w	r3, r3, #2
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2207      	movs	r2, #7
 8014c3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014c3e:	e02c      	b.n	8014c9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c40:	4b3b      	ldr	r3, [pc, #236]	@ (8014d30 <tcp_process+0x594>)
 8014c42:	6819      	ldr	r1, [r3, #0]
 8014c44:	4b3b      	ldr	r3, [pc, #236]	@ (8014d34 <tcp_process+0x598>)
 8014c46:	881b      	ldrh	r3, [r3, #0]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8014d38 <tcp_process+0x59c>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c50:	4b3a      	ldr	r3, [pc, #232]	@ (8014d3c <tcp_process+0x5a0>)
 8014c52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c54:	885b      	ldrh	r3, [r3, #2]
 8014c56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c58:	4a38      	ldr	r2, [pc, #224]	@ (8014d3c <tcp_process+0x5a0>)
 8014c5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c5c:	8812      	ldrh	r2, [r2, #0]
 8014c5e:	b292      	uxth	r2, r2
 8014c60:	9202      	str	r2, [sp, #8]
 8014c62:	9301      	str	r3, [sp, #4]
 8014c64:	4b36      	ldr	r3, [pc, #216]	@ (8014d40 <tcp_process+0x5a4>)
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	4b36      	ldr	r3, [pc, #216]	@ (8014d44 <tcp_process+0x5a8>)
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f002 fbcb 	bl	8017408 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014c72:	e167      	b.n	8014f44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014c74:	4b2d      	ldr	r3, [pc, #180]	@ (8014d2c <tcp_process+0x590>)
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	f003 0302 	and.w	r3, r3, #2
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f000 8161 	beq.w	8014f44 <tcp_process+0x7a8>
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c86:	1e5a      	subs	r2, r3, #1
 8014c88:	4b2b      	ldr	r3, [pc, #172]	@ (8014d38 <tcp_process+0x59c>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	f040 8159 	bne.w	8014f44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f002 f9b2 	bl	8016ffc <tcp_rexmit>
      break;
 8014c98:	e154      	b.n	8014f44 <tcp_process+0x7a8>
 8014c9a:	e153      	b.n	8014f44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fa71 	bl	8015184 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8014d58 <tcp_process+0x5bc>)
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f003 0320 	and.w	r3, r3, #32
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f000 814c 	beq.w	8014f48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	8b5b      	ldrh	r3, [r3, #26]
 8014cb4:	f043 0302 	orr.w	r3, r3, #2
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2207      	movs	r2, #7
 8014cc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014cc4:	e140      	b.n	8014f48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f000 fa5c 	bl	8015184 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014ccc:	4b22      	ldr	r3, [pc, #136]	@ (8014d58 <tcp_process+0x5bc>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	f003 0320 	and.w	r3, r3, #32
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d071      	beq.n	8014dbc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014cd8:	4b14      	ldr	r3, [pc, #80]	@ (8014d2c <tcp_process+0x590>)
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	f003 0310 	and.w	r3, r3, #16
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d060      	beq.n	8014da6 <tcp_process+0x60a>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ce8:	4b11      	ldr	r3, [pc, #68]	@ (8014d30 <tcp_process+0x594>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d15a      	bne.n	8014da6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d156      	bne.n	8014da6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f043 0302 	orr.w	r3, r3, #2
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7fe fdbc 	bl	8013884 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014d0c:	4b13      	ldr	r3, [pc, #76]	@ (8014d5c <tcp_process+0x5c0>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d105      	bne.n	8014d22 <tcp_process+0x586>
 8014d16:	4b11      	ldr	r3, [pc, #68]	@ (8014d5c <tcp_process+0x5c0>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	68db      	ldr	r3, [r3, #12]
 8014d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8014d5c <tcp_process+0x5c0>)
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	e02e      	b.n	8014d80 <tcp_process+0x5e4>
 8014d22:	4b0e      	ldr	r3, [pc, #56]	@ (8014d5c <tcp_process+0x5c0>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	617b      	str	r3, [r7, #20]
 8014d28:	e027      	b.n	8014d7a <tcp_process+0x5de>
 8014d2a:	bf00      	nop
 8014d2c:	2400cc78 	.word	0x2400cc78
 8014d30:	2400cc70 	.word	0x2400cc70
 8014d34:	2400cc76 	.word	0x2400cc76
 8014d38:	2400cc6c 	.word	0x2400cc6c
 8014d3c:	2400cc5c 	.word	0x2400cc5c
 8014d40:	24009b24 	.word	0x24009b24
 8014d44:	24009b28 	.word	0x24009b28
 8014d48:	08020884 	.word	0x08020884
 8014d4c:	08020b24 	.word	0x08020b24
 8014d50:	080208d0 	.word	0x080208d0
 8014d54:	2400cc74 	.word	0x2400cc74
 8014d58:	2400cc79 	.word	0x2400cc79
 8014d5c:	2400cc40 	.word	0x2400cc40
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	68db      	ldr	r3, [r3, #12]
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	429a      	cmp	r2, r3
 8014d68:	d104      	bne.n	8014d74 <tcp_process+0x5d8>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	68da      	ldr	r2, [r3, #12]
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	60da      	str	r2, [r3, #12]
 8014d72:	e005      	b.n	8014d80 <tcp_process+0x5e4>
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	68db      	ldr	r3, [r3, #12]
 8014d78:	617b      	str	r3, [r7, #20]
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d1ef      	bne.n	8014d60 <tcp_process+0x5c4>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	60da      	str	r2, [r3, #12]
 8014d86:	4b77      	ldr	r3, [pc, #476]	@ (8014f64 <tcp_process+0x7c8>)
 8014d88:	2201      	movs	r2, #1
 8014d8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	220a      	movs	r2, #10
 8014d90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014d92:	4b75      	ldr	r3, [pc, #468]	@ (8014f68 <tcp_process+0x7cc>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	60da      	str	r2, [r3, #12]
 8014d9a:	4a73      	ldr	r2, [pc, #460]	@ (8014f68 <tcp_process+0x7cc>)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6013      	str	r3, [r2, #0]
 8014da0:	f002 fcf4 	bl	801778c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014da4:	e0d2      	b.n	8014f4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	8b5b      	ldrh	r3, [r3, #26]
 8014daa:	f043 0302 	orr.w	r3, r3, #2
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2208      	movs	r2, #8
 8014db8:	751a      	strb	r2, [r3, #20]
      break;
 8014dba:	e0c7      	b.n	8014f4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8014f6c <tcp_process+0x7d0>)
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	f003 0310 	and.w	r3, r3, #16
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f000 80c1 	beq.w	8014f4c <tcp_process+0x7b0>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014dce:	4b68      	ldr	r3, [pc, #416]	@ (8014f70 <tcp_process+0x7d4>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	f040 80ba 	bne.w	8014f4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	f040 80b5 	bne.w	8014f4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2206      	movs	r2, #6
 8014de6:	751a      	strb	r2, [r3, #20]
      break;
 8014de8:	e0b0      	b.n	8014f4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 f9ca 	bl	8015184 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014df0:	4b60      	ldr	r3, [pc, #384]	@ (8014f74 <tcp_process+0x7d8>)
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	f003 0320 	and.w	r3, r3, #32
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80a9 	beq.w	8014f50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f043 0302 	orr.w	r3, r3, #2
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7fe fd39 	bl	8013884 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014e12:	4b59      	ldr	r3, [pc, #356]	@ (8014f78 <tcp_process+0x7dc>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d105      	bne.n	8014e28 <tcp_process+0x68c>
 8014e1c:	4b56      	ldr	r3, [pc, #344]	@ (8014f78 <tcp_process+0x7dc>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	4a55      	ldr	r2, [pc, #340]	@ (8014f78 <tcp_process+0x7dc>)
 8014e24:	6013      	str	r3, [r2, #0]
 8014e26:	e013      	b.n	8014e50 <tcp_process+0x6b4>
 8014e28:	4b53      	ldr	r3, [pc, #332]	@ (8014f78 <tcp_process+0x7dc>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	613b      	str	r3, [r7, #16]
 8014e2e:	e00c      	b.n	8014e4a <tcp_process+0x6ae>
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d104      	bne.n	8014e44 <tcp_process+0x6a8>
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	68da      	ldr	r2, [r3, #12]
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	60da      	str	r2, [r3, #12]
 8014e42:	e005      	b.n	8014e50 <tcp_process+0x6b4>
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	68db      	ldr	r3, [r3, #12]
 8014e48:	613b      	str	r3, [r7, #16]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d1ef      	bne.n	8014e30 <tcp_process+0x694>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2200      	movs	r2, #0
 8014e54:	60da      	str	r2, [r3, #12]
 8014e56:	4b43      	ldr	r3, [pc, #268]	@ (8014f64 <tcp_process+0x7c8>)
 8014e58:	2201      	movs	r2, #1
 8014e5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	220a      	movs	r2, #10
 8014e60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014e62:	4b41      	ldr	r3, [pc, #260]	@ (8014f68 <tcp_process+0x7cc>)
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	60da      	str	r2, [r3, #12]
 8014e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8014f68 <tcp_process+0x7cc>)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6013      	str	r3, [r2, #0]
 8014e70:	f002 fc8c 	bl	801778c <tcp_timer_needed>
      }
      break;
 8014e74:	e06c      	b.n	8014f50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f000 f984 	bl	8015184 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8014f6c <tcp_process+0x7d0>)
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	f003 0310 	and.w	r3, r3, #16
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d065      	beq.n	8014f54 <tcp_process+0x7b8>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e8c:	4b38      	ldr	r3, [pc, #224]	@ (8014f70 <tcp_process+0x7d4>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d15f      	bne.n	8014f54 <tcp_process+0x7b8>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d15b      	bne.n	8014f54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7fe fcf1 	bl	8013884 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ea2:	4b35      	ldr	r3, [pc, #212]	@ (8014f78 <tcp_process+0x7dc>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d105      	bne.n	8014eb8 <tcp_process+0x71c>
 8014eac:	4b32      	ldr	r3, [pc, #200]	@ (8014f78 <tcp_process+0x7dc>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	68db      	ldr	r3, [r3, #12]
 8014eb2:	4a31      	ldr	r2, [pc, #196]	@ (8014f78 <tcp_process+0x7dc>)
 8014eb4:	6013      	str	r3, [r2, #0]
 8014eb6:	e013      	b.n	8014ee0 <tcp_process+0x744>
 8014eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8014f78 <tcp_process+0x7dc>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	e00c      	b.n	8014eda <tcp_process+0x73e>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d104      	bne.n	8014ed4 <tcp_process+0x738>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	68da      	ldr	r2, [r3, #12]
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	60da      	str	r2, [r3, #12]
 8014ed2:	e005      	b.n	8014ee0 <tcp_process+0x744>
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	60fb      	str	r3, [r7, #12]
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d1ef      	bne.n	8014ec0 <tcp_process+0x724>
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	60da      	str	r2, [r3, #12]
 8014ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8014f64 <tcp_process+0x7c8>)
 8014ee8:	2201      	movs	r2, #1
 8014eea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	220a      	movs	r2, #10
 8014ef0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8014f68 <tcp_process+0x7cc>)
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	60da      	str	r2, [r3, #12]
 8014efa:	4a1b      	ldr	r2, [pc, #108]	@ (8014f68 <tcp_process+0x7cc>)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6013      	str	r3, [r2, #0]
 8014f00:	f002 fc44 	bl	801778c <tcp_timer_needed>
      }
      break;
 8014f04:	e026      	b.n	8014f54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 f93c 	bl	8015184 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014f0c:	4b17      	ldr	r3, [pc, #92]	@ (8014f6c <tcp_process+0x7d0>)
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	f003 0310 	and.w	r3, r3, #16
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d01f      	beq.n	8014f58 <tcp_process+0x7bc>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f1c:	4b14      	ldr	r3, [pc, #80]	@ (8014f70 <tcp_process+0x7d4>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d119      	bne.n	8014f58 <tcp_process+0x7bc>
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d115      	bne.n	8014f58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014f2c:	4b11      	ldr	r3, [pc, #68]	@ (8014f74 <tcp_process+0x7d8>)
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	f043 0310 	orr.w	r3, r3, #16
 8014f34:	b2da      	uxtb	r2, r3
 8014f36:	4b0f      	ldr	r3, [pc, #60]	@ (8014f74 <tcp_process+0x7d8>)
 8014f38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014f3a:	e00d      	b.n	8014f58 <tcp_process+0x7bc>
    default:
      break;
 8014f3c:	bf00      	nop
 8014f3e:	e00c      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f40:	bf00      	nop
 8014f42:	e00a      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f44:	bf00      	nop
 8014f46:	e008      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f48:	bf00      	nop
 8014f4a:	e006      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f4c:	bf00      	nop
 8014f4e:	e004      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f50:	bf00      	nop
 8014f52:	e002      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f54:	bf00      	nop
 8014f56:	e000      	b.n	8014f5a <tcp_process+0x7be>
      break;
 8014f58:	bf00      	nop
  }
  return ERR_OK;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3724      	adds	r7, #36	@ 0x24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd90      	pop	{r4, r7, pc}
 8014f64:	2400cc48 	.word	0x2400cc48
 8014f68:	2400cc44 	.word	0x2400cc44
 8014f6c:	2400cc78 	.word	0x2400cc78
 8014f70:	2400cc70 	.word	0x2400cc70
 8014f74:	2400cc79 	.word	0x2400cc79
 8014f78:	2400cc40 	.word	0x2400cc40

08014f7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014f7c:	b590      	push	{r4, r7, lr}
 8014f7e:	b085      	sub	sp, #20
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d106      	bne.n	8014f9a <tcp_oos_insert_segment+0x1e>
 8014f8c:	4b3b      	ldr	r3, [pc, #236]	@ (801507c <tcp_oos_insert_segment+0x100>)
 8014f8e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014f92:	493b      	ldr	r1, [pc, #236]	@ (8015080 <tcp_oos_insert_segment+0x104>)
 8014f94:	483b      	ldr	r0, [pc, #236]	@ (8015084 <tcp_oos_insert_segment+0x108>)
 8014f96:	f008 f9f5 	bl	801d384 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	899b      	ldrh	r3, [r3, #12]
 8014fa0:	b29b      	uxth	r3, r3
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7fb fb3a 	bl	801061c <lwip_htons>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	f003 0301 	and.w	r3, r3, #1
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d028      	beq.n	8015006 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014fb4:	6838      	ldr	r0, [r7, #0]
 8014fb6:	f7fe fa63 	bl	8013480 <tcp_segs_free>
    next = NULL;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	603b      	str	r3, [r7, #0]
 8014fbe:	e056      	b.n	801506e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	899b      	ldrh	r3, [r3, #12]
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7fb fb27 	bl	801061c <lwip_htons>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	f003 0301 	and.w	r3, r3, #1
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d00d      	beq.n	8014ff6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	899b      	ldrh	r3, [r3, #12]
 8014fe0:	b29c      	uxth	r4, r3
 8014fe2:	2001      	movs	r0, #1
 8014fe4:	f7fb fb1a 	bl	801061c <lwip_htons>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	461a      	mov	r2, r3
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	4322      	orrs	r2, r4
 8014ff2:	b292      	uxth	r2, r2
 8014ff4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015000:	68f8      	ldr	r0, [r7, #12]
 8015002:	f7fe fa52 	bl	80134aa <tcp_seg_free>
    while (next &&
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d00e      	beq.n	801502a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	891b      	ldrh	r3, [r3, #8]
 8015010:	461a      	mov	r2, r3
 8015012:	4b1d      	ldr	r3, [pc, #116]	@ (8015088 <tcp_oos_insert_segment+0x10c>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	441a      	add	r2, r3
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	6839      	ldr	r1, [r7, #0]
 8015020:	8909      	ldrh	r1, [r1, #8]
 8015022:	440b      	add	r3, r1
 8015024:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015026:	2b00      	cmp	r3, #0
 8015028:	daca      	bge.n	8014fc0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d01e      	beq.n	801506e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	891b      	ldrh	r3, [r3, #8]
 8015034:	461a      	mov	r2, r3
 8015036:	4b14      	ldr	r3, [pc, #80]	@ (8015088 <tcp_oos_insert_segment+0x10c>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	441a      	add	r2, r3
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015044:	2b00      	cmp	r3, #0
 8015046:	dd12      	ble.n	801506e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	68db      	ldr	r3, [r3, #12]
 801504c:	685b      	ldr	r3, [r3, #4]
 801504e:	b29a      	uxth	r2, r3
 8015050:	4b0d      	ldr	r3, [pc, #52]	@ (8015088 <tcp_oos_insert_segment+0x10c>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	b29b      	uxth	r3, r3
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	b29a      	uxth	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	685a      	ldr	r2, [r3, #4]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	891b      	ldrh	r3, [r3, #8]
 8015066:	4619      	mov	r1, r3
 8015068:	4610      	mov	r0, r2
 801506a:	f7fc fe07 	bl	8011c7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	601a      	str	r2, [r3, #0]
}
 8015074:	bf00      	nop
 8015076:	3714      	adds	r7, #20
 8015078:	46bd      	mov	sp, r7
 801507a:	bd90      	pop	{r4, r7, pc}
 801507c:	08020884 	.word	0x08020884
 8015080:	08020b44 	.word	0x08020b44
 8015084:	080208d0 	.word	0x080208d0
 8015088:	2400cc6c 	.word	0x2400cc6c

0801508c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801508c:	b5b0      	push	{r4, r5, r7, lr}
 801508e:	b086      	sub	sp, #24
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801509a:	e03e      	b.n	801511a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fc fffa 	bl	80120a4 <pbuf_clen>
 80150b0:	4603      	mov	r3, r0
 80150b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150ba:	8a7a      	ldrh	r2, [r7, #18]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d906      	bls.n	80150ce <tcp_free_acked_segments+0x42>
 80150c0:	4b2a      	ldr	r3, [pc, #168]	@ (801516c <tcp_free_acked_segments+0xe0>)
 80150c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80150c6:	492a      	ldr	r1, [pc, #168]	@ (8015170 <tcp_free_acked_segments+0xe4>)
 80150c8:	482a      	ldr	r0, [pc, #168]	@ (8015174 <tcp_free_acked_segments+0xe8>)
 80150ca:	f008 f95b 	bl	801d384 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80150d4:	8a7b      	ldrh	r3, [r7, #18]
 80150d6:	1ad3      	subs	r3, r2, r3
 80150d8:	b29a      	uxth	r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	891a      	ldrh	r2, [r3, #8]
 80150e4:	4b24      	ldr	r3, [pc, #144]	@ (8015178 <tcp_free_acked_segments+0xec>)
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	4413      	add	r3, r2
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	4b22      	ldr	r3, [pc, #136]	@ (8015178 <tcp_free_acked_segments+0xec>)
 80150ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80150f0:	6978      	ldr	r0, [r7, #20]
 80150f2:	f7fe f9da 	bl	80134aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d00c      	beq.n	801511a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d109      	bne.n	801511a <tcp_free_acked_segments+0x8e>
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d106      	bne.n	801511a <tcp_free_acked_segments+0x8e>
 801510c:	4b17      	ldr	r3, [pc, #92]	@ (801516c <tcp_free_acked_segments+0xe0>)
 801510e:	f240 4261 	movw	r2, #1121	@ 0x461
 8015112:	491a      	ldr	r1, [pc, #104]	@ (801517c <tcp_free_acked_segments+0xf0>)
 8015114:	4817      	ldr	r0, [pc, #92]	@ (8015174 <tcp_free_acked_segments+0xe8>)
 8015116:	f008 f935 	bl	801d384 <iprintf>
  while (seg_list != NULL &&
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d020      	beq.n	8015162 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	4618      	mov	r0, r3
 8015128:	f7fb fa8d 	bl	8010646 <lwip_htonl>
 801512c:	4604      	mov	r4, r0
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	891b      	ldrh	r3, [r3, #8]
 8015132:	461d      	mov	r5, r3
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	899b      	ldrh	r3, [r3, #12]
 801513a:	b29b      	uxth	r3, r3
 801513c:	4618      	mov	r0, r3
 801513e:	f7fb fa6d 	bl	801061c <lwip_htons>
 8015142:	4603      	mov	r3, r0
 8015144:	b2db      	uxtb	r3, r3
 8015146:	f003 0303 	and.w	r3, r3, #3
 801514a:	2b00      	cmp	r3, #0
 801514c:	d001      	beq.n	8015152 <tcp_free_acked_segments+0xc6>
 801514e:	2301      	movs	r3, #1
 8015150:	e000      	b.n	8015154 <tcp_free_acked_segments+0xc8>
 8015152:	2300      	movs	r3, #0
 8015154:	442b      	add	r3, r5
 8015156:	18e2      	adds	r2, r4, r3
 8015158:	4b09      	ldr	r3, [pc, #36]	@ (8015180 <tcp_free_acked_segments+0xf4>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801515e:	2b00      	cmp	r3, #0
 8015160:	dd9c      	ble.n	801509c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015162:	68bb      	ldr	r3, [r7, #8]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bdb0      	pop	{r4, r5, r7, pc}
 801516c:	08020884 	.word	0x08020884
 8015170:	08020b6c 	.word	0x08020b6c
 8015174:	080208d0 	.word	0x080208d0
 8015178:	2400cc74 	.word	0x2400cc74
 801517c:	08020b94 	.word	0x08020b94
 8015180:	2400cc70 	.word	0x2400cc70

08015184 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015184:	b5b0      	push	{r4, r5, r7, lr}
 8015186:	b094      	sub	sp, #80	@ 0x50
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801518c:	2300      	movs	r3, #0
 801518e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d106      	bne.n	80151a4 <tcp_receive+0x20>
 8015196:	4b91      	ldr	r3, [pc, #580]	@ (80153dc <tcp_receive+0x258>)
 8015198:	f240 427b 	movw	r2, #1147	@ 0x47b
 801519c:	4990      	ldr	r1, [pc, #576]	@ (80153e0 <tcp_receive+0x25c>)
 801519e:	4891      	ldr	r0, [pc, #580]	@ (80153e4 <tcp_receive+0x260>)
 80151a0:	f008 f8f0 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	7d1b      	ldrb	r3, [r3, #20]
 80151a8:	2b03      	cmp	r3, #3
 80151aa:	d806      	bhi.n	80151ba <tcp_receive+0x36>
 80151ac:	4b8b      	ldr	r3, [pc, #556]	@ (80153dc <tcp_receive+0x258>)
 80151ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80151b2:	498d      	ldr	r1, [pc, #564]	@ (80153e8 <tcp_receive+0x264>)
 80151b4:	488b      	ldr	r0, [pc, #556]	@ (80153e4 <tcp_receive+0x260>)
 80151b6:	f008 f8e5 	bl	801d384 <iprintf>

  if (flags & TCP_ACK) {
 80151ba:	4b8c      	ldr	r3, [pc, #560]	@ (80153ec <tcp_receive+0x268>)
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	f003 0310 	and.w	r3, r3, #16
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 8264 	beq.w	8015690 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80151ce:	461a      	mov	r2, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151d4:	4413      	add	r3, r2
 80151d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80151dc:	4b84      	ldr	r3, [pc, #528]	@ (80153f0 <tcp_receive+0x26c>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	db1b      	blt.n	801521e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80151ea:	4b81      	ldr	r3, [pc, #516]	@ (80153f0 <tcp_receive+0x26c>)
 80151ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d106      	bne.n	8015200 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80151f6:	4b7f      	ldr	r3, [pc, #508]	@ (80153f4 <tcp_receive+0x270>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	1ad3      	subs	r3, r2, r3
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	db0e      	blt.n	801521e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015204:	4b7b      	ldr	r3, [pc, #492]	@ (80153f4 <tcp_receive+0x270>)
 8015206:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015208:	429a      	cmp	r2, r3
 801520a:	d125      	bne.n	8015258 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801520c:	4b7a      	ldr	r3, [pc, #488]	@ (80153f8 <tcp_receive+0x274>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	89db      	ldrh	r3, [r3, #14]
 8015212:	b29a      	uxth	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801521a:	429a      	cmp	r2, r3
 801521c:	d91c      	bls.n	8015258 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801521e:	4b76      	ldr	r3, [pc, #472]	@ (80153f8 <tcp_receive+0x274>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	89db      	ldrh	r3, [r3, #14]
 8015224:	b29a      	uxth	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015238:	429a      	cmp	r2, r3
 801523a:	d205      	bcs.n	8015248 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015248:	4b69      	ldr	r3, [pc, #420]	@ (80153f0 <tcp_receive+0x26c>)
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015250:	4b68      	ldr	r3, [pc, #416]	@ (80153f4 <tcp_receive+0x270>)
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015258:	4b66      	ldr	r3, [pc, #408]	@ (80153f4 <tcp_receive+0x270>)
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	2b00      	cmp	r3, #0
 8015264:	dc58      	bgt.n	8015318 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015266:	4b65      	ldr	r3, [pc, #404]	@ (80153fc <tcp_receive+0x278>)
 8015268:	881b      	ldrh	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d14b      	bne.n	8015306 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015278:	4413      	add	r3, r2
 801527a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801527c:	429a      	cmp	r2, r3
 801527e:	d142      	bne.n	8015306 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015286:	2b00      	cmp	r3, #0
 8015288:	db3d      	blt.n	8015306 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801528e:	4b59      	ldr	r3, [pc, #356]	@ (80153f4 <tcp_receive+0x270>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	429a      	cmp	r2, r3
 8015294:	d137      	bne.n	8015306 <tcp_receive+0x182>
              found_dupack = 1;
 8015296:	2301      	movs	r3, #1
 8015298:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152a0:	2bff      	cmp	r3, #255	@ 0xff
 80152a2:	d007      	beq.n	80152b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152aa:	3301      	adds	r3, #1
 80152ac:	b2da      	uxtb	r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152ba:	2b03      	cmp	r3, #3
 80152bc:	d91b      	bls.n	80152f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152c8:	4413      	add	r3, r2
 80152ca:	b29a      	uxth	r2, r3
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d30a      	bcc.n	80152ec <tcp_receive+0x168>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80152e0:	4413      	add	r3, r2
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80152ea:	e004      	b.n	80152f6 <tcp_receive+0x172>
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d902      	bls.n	8015306 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f001 fee7 	bl	80170d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015308:	2b00      	cmp	r3, #0
 801530a:	f040 8161 	bne.w	80155d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2200      	movs	r2, #0
 8015312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015316:	e15b      	b.n	80155d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015318:	4b36      	ldr	r3, [pc, #216]	@ (80153f4 <tcp_receive+0x270>)
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	3b01      	subs	r3, #1
 8015324:	2b00      	cmp	r3, #0
 8015326:	f2c0 814e 	blt.w	80155c6 <tcp_receive+0x442>
 801532a:	4b32      	ldr	r3, [pc, #200]	@ (80153f4 <tcp_receive+0x270>)
 801532c:	681a      	ldr	r2, [r3, #0]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	2b00      	cmp	r3, #0
 8015336:	f300 8146 	bgt.w	80155c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	8b5b      	ldrh	r3, [r3, #26]
 801533e:	f003 0304 	and.w	r3, r3, #4
 8015342:	2b00      	cmp	r3, #0
 8015344:	d010      	beq.n	8015368 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	8b5b      	ldrh	r3, [r3, #26]
 801534a:	f023 0304 	bic.w	r3, r3, #4
 801534e:	b29a      	uxth	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2200      	movs	r2, #0
 8015364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2200      	movs	r2, #0
 801536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015376:	10db      	asrs	r3, r3, #3
 8015378:	b21b      	sxth	r3, r3
 801537a:	b29a      	uxth	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015382:	b29b      	uxth	r3, r3
 8015384:	4413      	add	r3, r2
 8015386:	b29b      	uxth	r3, r3
 8015388:	b21a      	sxth	r2, r3
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015390:	4b18      	ldr	r3, [pc, #96]	@ (80153f4 <tcp_receive+0x270>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	b29a      	uxth	r2, r3
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801539a:	b29b      	uxth	r3, r3
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80153a8:	4b12      	ldr	r3, [pc, #72]	@ (80153f4 <tcp_receive+0x270>)
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	7d1b      	ldrb	r3, [r3, #20]
 80153b4:	2b03      	cmp	r3, #3
 80153b6:	f240 8097 	bls.w	80154e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d245      	bcs.n	8015456 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	8b5b      	ldrh	r3, [r3, #26]
 80153ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d014      	beq.n	8015400 <tcp_receive+0x27c>
 80153d6:	2301      	movs	r3, #1
 80153d8:	e013      	b.n	8015402 <tcp_receive+0x27e>
 80153da:	bf00      	nop
 80153dc:	08020884 	.word	0x08020884
 80153e0:	08020bb4 	.word	0x08020bb4
 80153e4:	080208d0 	.word	0x080208d0
 80153e8:	08020bd0 	.word	0x08020bd0
 80153ec:	2400cc78 	.word	0x2400cc78
 80153f0:	2400cc6c 	.word	0x2400cc6c
 80153f4:	2400cc70 	.word	0x2400cc70
 80153f8:	2400cc5c 	.word	0x2400cc5c
 80153fc:	2400cc76 	.word	0x2400cc76
 8015400:	2302      	movs	r3, #2
 8015402:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015406:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801540a:	b29a      	uxth	r2, r3
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015410:	fb12 f303 	smulbb	r3, r2, r3
 8015414:	b29b      	uxth	r3, r3
 8015416:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015418:	4293      	cmp	r3, r2
 801541a:	bf28      	it	cs
 801541c:	4613      	movcs	r3, r2
 801541e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015426:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015428:	4413      	add	r3, r2
 801542a:	b29a      	uxth	r2, r3
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015432:	429a      	cmp	r2, r3
 8015434:	d309      	bcc.n	801544a <tcp_receive+0x2c6>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801543c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801543e:	4413      	add	r3, r2
 8015440:	b29a      	uxth	r2, r3
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015448:	e04e      	b.n	80154e8 <tcp_receive+0x364>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015450:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015454:	e048      	b.n	80154e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801545c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801545e:	4413      	add	r3, r2
 8015460:	b29a      	uxth	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015468:	429a      	cmp	r2, r3
 801546a:	d309      	bcc.n	8015480 <tcp_receive+0x2fc>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015472:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015474:	4413      	add	r3, r2
 8015476:	b29a      	uxth	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801547e:	e004      	b.n	801548a <tcp_receive+0x306>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015486:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015496:	429a      	cmp	r2, r3
 8015498:	d326      	bcc.n	80154e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80154a6:	1ad3      	subs	r3, r2, r3
 80154a8:	b29a      	uxth	r2, r3
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80154ba:	4413      	add	r3, r2
 80154bc:	b29a      	uxth	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d30a      	bcc.n	80154de <tcp_receive+0x35a>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80154d2:	4413      	add	r3, r2
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80154dc:	e004      	b.n	80154e8 <tcp_receive+0x364>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154f0:	4a98      	ldr	r2, [pc, #608]	@ (8015754 <tcp_receive+0x5d0>)
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff fdca 	bl	801508c <tcp_free_acked_segments>
 80154f8:	4602      	mov	r2, r0
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015506:	4a94      	ldr	r2, [pc, #592]	@ (8015758 <tcp_receive+0x5d4>)
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7ff fdbf 	bl	801508c <tcp_free_acked_segments>
 801550e:	4602      	mov	r2, r0
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015518:	2b00      	cmp	r3, #0
 801551a:	d104      	bne.n	8015526 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015522:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015524:	e002      	b.n	801552c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2200      	movs	r2, #0
 801552a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2200      	movs	r2, #0
 8015530:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015536:	2b00      	cmp	r3, #0
 8015538:	d103      	bne.n	8015542 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2200      	movs	r2, #0
 801553e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015548:	4b84      	ldr	r3, [pc, #528]	@ (801575c <tcp_receive+0x5d8>)
 801554a:	881b      	ldrh	r3, [r3, #0]
 801554c:	4413      	add	r3, r2
 801554e:	b29a      	uxth	r2, r3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	8b5b      	ldrh	r3, [r3, #26]
 801555a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801555e:	2b00      	cmp	r3, #0
 8015560:	d035      	beq.n	80155ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015566:	2b00      	cmp	r3, #0
 8015568:	d118      	bne.n	801559c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00c      	beq.n	801558c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	4618      	mov	r0, r3
 8015580:	f7fb f861 	bl	8010646 <lwip_htonl>
 8015584:	4603      	mov	r3, r0
 8015586:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015588:	2b00      	cmp	r3, #0
 801558a:	dc20      	bgt.n	80155ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	8b5b      	ldrh	r3, [r3, #26]
 8015590:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015594:	b29a      	uxth	r2, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801559a:	e018      	b.n	80155ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7fb f84c 	bl	8010646 <lwip_htonl>
 80155ae:	4603      	mov	r3, r0
 80155b0:	1ae3      	subs	r3, r4, r3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	dc0b      	bgt.n	80155ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	8b5b      	ldrh	r3, [r3, #26]
 80155ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80155be:	b29a      	uxth	r2, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80155c4:	e003      	b.n	80155ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f001 ff70 	bl	80174ac <tcp_send_empty_ack>
 80155cc:	e000      	b.n	80155d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80155ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d05b      	beq.n	8015690 <tcp_receive+0x50c>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80155dc:	4b60      	ldr	r3, [pc, #384]	@ (8015760 <tcp_receive+0x5dc>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	1ad3      	subs	r3, r2, r3
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	da54      	bge.n	8015690 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80155e6:	4b5f      	ldr	r3, [pc, #380]	@ (8015764 <tcp_receive+0x5e0>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155f0:	b29b      	uxth	r3, r3
 80155f2:	1ad3      	subs	r3, r2, r3
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80155fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015604:	10db      	asrs	r3, r3, #3
 8015606:	b21b      	sxth	r3, r3
 8015608:	b29b      	uxth	r3, r3
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	b29b      	uxth	r3, r3
 801560e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015618:	b29a      	uxth	r2, r3
 801561a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801561e:	4413      	add	r3, r2
 8015620:	b29b      	uxth	r3, r3
 8015622:	b21a      	sxth	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015628:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801562c:	2b00      	cmp	r3, #0
 801562e:	da05      	bge.n	801563c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015634:	425b      	negs	r3, r3
 8015636:	b29b      	uxth	r3, r3
 8015638:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801563c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015646:	109b      	asrs	r3, r3, #2
 8015648:	b21b      	sxth	r3, r3
 801564a:	b29b      	uxth	r3, r3
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	b29b      	uxth	r3, r3
 8015650:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801565a:	b29a      	uxth	r2, r3
 801565c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015660:	4413      	add	r3, r2
 8015662:	b29b      	uxth	r3, r3
 8015664:	b21a      	sxth	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015670:	10db      	asrs	r3, r3, #3
 8015672:	b21b      	sxth	r3, r3
 8015674:	b29a      	uxth	r2, r3
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801567c:	b29b      	uxth	r3, r3
 801567e:	4413      	add	r3, r2
 8015680:	b29b      	uxth	r3, r3
 8015682:	b21a      	sxth	r2, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2200      	movs	r2, #0
 801568e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015690:	4b35      	ldr	r3, [pc, #212]	@ (8015768 <tcp_receive+0x5e4>)
 8015692:	881b      	ldrh	r3, [r3, #0]
 8015694:	2b00      	cmp	r3, #0
 8015696:	f000 84df 	beq.w	8016058 <tcp_receive+0xed4>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	7d1b      	ldrb	r3, [r3, #20]
 801569e:	2b06      	cmp	r3, #6
 80156a0:	f200 84da 	bhi.w	8016058 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156a8:	4b30      	ldr	r3, [pc, #192]	@ (801576c <tcp_receive+0x5e8>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	1ad3      	subs	r3, r2, r3
 80156ae:	3b01      	subs	r3, #1
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f2c0 808f 	blt.w	80157d4 <tcp_receive+0x650>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015768 <tcp_receive+0x5e4>)
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	4619      	mov	r1, r3
 80156c0:	4b2a      	ldr	r3, [pc, #168]	@ (801576c <tcp_receive+0x5e8>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	440b      	add	r3, r1
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	3301      	adds	r3, #1
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f300 8082 	bgt.w	80157d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80156d0:	4b27      	ldr	r3, [pc, #156]	@ (8015770 <tcp_receive+0x5ec>)
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156da:	4b24      	ldr	r3, [pc, #144]	@ (801576c <tcp_receive+0x5e8>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80156e2:	4b23      	ldr	r3, [pc, #140]	@ (8015770 <tcp_receive+0x5ec>)
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d106      	bne.n	80156f8 <tcp_receive+0x574>
 80156ea:	4b22      	ldr	r3, [pc, #136]	@ (8015774 <tcp_receive+0x5f0>)
 80156ec:	f240 5294 	movw	r2, #1428	@ 0x594
 80156f0:	4921      	ldr	r1, [pc, #132]	@ (8015778 <tcp_receive+0x5f4>)
 80156f2:	4822      	ldr	r0, [pc, #136]	@ (801577c <tcp_receive+0x5f8>)
 80156f4:	f007 fe46 	bl	801d384 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80156f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80156fe:	4293      	cmp	r3, r2
 8015700:	d906      	bls.n	8015710 <tcp_receive+0x58c>
 8015702:	4b1c      	ldr	r3, [pc, #112]	@ (8015774 <tcp_receive+0x5f0>)
 8015704:	f240 5295 	movw	r2, #1429	@ 0x595
 8015708:	491d      	ldr	r1, [pc, #116]	@ (8015780 <tcp_receive+0x5fc>)
 801570a:	481c      	ldr	r0, [pc, #112]	@ (801577c <tcp_receive+0x5f8>)
 801570c:	f007 fe3a 	bl	801d384 <iprintf>
      off = (u16_t)off32;
 8015710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015712:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015716:	4b16      	ldr	r3, [pc, #88]	@ (8015770 <tcp_receive+0x5ec>)
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	891b      	ldrh	r3, [r3, #8]
 801571c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015720:	429a      	cmp	r2, r3
 8015722:	d906      	bls.n	8015732 <tcp_receive+0x5ae>
 8015724:	4b13      	ldr	r3, [pc, #76]	@ (8015774 <tcp_receive+0x5f0>)
 8015726:	f240 5297 	movw	r2, #1431	@ 0x597
 801572a:	4916      	ldr	r1, [pc, #88]	@ (8015784 <tcp_receive+0x600>)
 801572c:	4813      	ldr	r0, [pc, #76]	@ (801577c <tcp_receive+0x5f8>)
 801572e:	f007 fe29 	bl	801d384 <iprintf>
      inseg.len -= off;
 8015732:	4b0f      	ldr	r3, [pc, #60]	@ (8015770 <tcp_receive+0x5ec>)
 8015734:	891a      	ldrh	r2, [r3, #8]
 8015736:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801573a:	1ad3      	subs	r3, r2, r3
 801573c:	b29a      	uxth	r2, r3
 801573e:	4b0c      	ldr	r3, [pc, #48]	@ (8015770 <tcp_receive+0x5ec>)
 8015740:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015742:	4b0b      	ldr	r3, [pc, #44]	@ (8015770 <tcp_receive+0x5ec>)
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	891a      	ldrh	r2, [r3, #8]
 8015748:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015750:	e02a      	b.n	80157a8 <tcp_receive+0x624>
 8015752:	bf00      	nop
 8015754:	08020bec 	.word	0x08020bec
 8015758:	08020bf4 	.word	0x08020bf4
 801575c:	2400cc74 	.word	0x2400cc74
 8015760:	2400cc70 	.word	0x2400cc70
 8015764:	2400cc34 	.word	0x2400cc34
 8015768:	2400cc76 	.word	0x2400cc76
 801576c:	2400cc6c 	.word	0x2400cc6c
 8015770:	2400cc4c 	.word	0x2400cc4c
 8015774:	08020884 	.word	0x08020884
 8015778:	08020bfc 	.word	0x08020bfc
 801577c:	080208d0 	.word	0x080208d0
 8015780:	08020c0c 	.word	0x08020c0c
 8015784:	08020c1c 	.word	0x08020c1c
        off -= p->len;
 8015788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801578a:	895b      	ldrh	r3, [r3, #10]
 801578c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015790:	1ad3      	subs	r3, r2, r3
 8015792:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015798:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801579a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801579e:	2200      	movs	r2, #0
 80157a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80157a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80157a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157aa:	895b      	ldrh	r3, [r3, #10]
 80157ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d8e9      	bhi.n	8015788 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80157b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80157b8:	4619      	mov	r1, r3
 80157ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80157bc:	f7fc fb5e 	bl	8011e7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157c4:	4a90      	ldr	r2, [pc, #576]	@ (8015a08 <tcp_receive+0x884>)
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	4b90      	ldr	r3, [pc, #576]	@ (8015a0c <tcp_receive+0x888>)
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	4a8e      	ldr	r2, [pc, #568]	@ (8015a08 <tcp_receive+0x884>)
 80157ce:	6812      	ldr	r2, [r2, #0]
 80157d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80157d2:	e00d      	b.n	80157f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80157d4:	4b8c      	ldr	r3, [pc, #560]	@ (8015a08 <tcp_receive+0x884>)
 80157d6:	681a      	ldr	r2, [r3, #0]
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	da06      	bge.n	80157f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	8b5b      	ldrh	r3, [r3, #26]
 80157e6:	f043 0302 	orr.w	r3, r3, #2
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80157f0:	4b85      	ldr	r3, [pc, #532]	@ (8015a08 <tcp_receive+0x884>)
 80157f2:	681a      	ldr	r2, [r3, #0]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157f8:	1ad3      	subs	r3, r2, r3
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	f2c0 8427 	blt.w	801604e <tcp_receive+0xeca>
 8015800:	4b81      	ldr	r3, [pc, #516]	@ (8015a08 <tcp_receive+0x884>)
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015808:	6879      	ldr	r1, [r7, #4]
 801580a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801580c:	440b      	add	r3, r1
 801580e:	1ad3      	subs	r3, r2, r3
 8015810:	3301      	adds	r3, #1
 8015812:	2b00      	cmp	r3, #0
 8015814:	f300 841b 	bgt.w	801604e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801581c:	4b7a      	ldr	r3, [pc, #488]	@ (8015a08 <tcp_receive+0x884>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	429a      	cmp	r2, r3
 8015822:	f040 8298 	bne.w	8015d56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015826:	4b79      	ldr	r3, [pc, #484]	@ (8015a0c <tcp_receive+0x888>)
 8015828:	891c      	ldrh	r4, [r3, #8]
 801582a:	4b78      	ldr	r3, [pc, #480]	@ (8015a0c <tcp_receive+0x888>)
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	899b      	ldrh	r3, [r3, #12]
 8015830:	b29b      	uxth	r3, r3
 8015832:	4618      	mov	r0, r3
 8015834:	f7fa fef2 	bl	801061c <lwip_htons>
 8015838:	4603      	mov	r3, r0
 801583a:	b2db      	uxtb	r3, r3
 801583c:	f003 0303 	and.w	r3, r3, #3
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <tcp_receive+0x6c4>
 8015844:	2301      	movs	r3, #1
 8015846:	e000      	b.n	801584a <tcp_receive+0x6c6>
 8015848:	2300      	movs	r3, #0
 801584a:	4423      	add	r3, r4
 801584c:	b29a      	uxth	r2, r3
 801584e:	4b70      	ldr	r3, [pc, #448]	@ (8015a10 <tcp_receive+0x88c>)
 8015850:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015856:	4b6e      	ldr	r3, [pc, #440]	@ (8015a10 <tcp_receive+0x88c>)
 8015858:	881b      	ldrh	r3, [r3, #0]
 801585a:	429a      	cmp	r2, r3
 801585c:	d274      	bcs.n	8015948 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801585e:	4b6b      	ldr	r3, [pc, #428]	@ (8015a0c <tcp_receive+0x888>)
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	899b      	ldrh	r3, [r3, #12]
 8015864:	b29b      	uxth	r3, r3
 8015866:	4618      	mov	r0, r3
 8015868:	f7fa fed8 	bl	801061c <lwip_htons>
 801586c:	4603      	mov	r3, r0
 801586e:	b2db      	uxtb	r3, r3
 8015870:	f003 0301 	and.w	r3, r3, #1
 8015874:	2b00      	cmp	r3, #0
 8015876:	d01e      	beq.n	80158b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015878:	4b64      	ldr	r3, [pc, #400]	@ (8015a0c <tcp_receive+0x888>)
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	899b      	ldrh	r3, [r3, #12]
 801587e:	b29b      	uxth	r3, r3
 8015880:	b21b      	sxth	r3, r3
 8015882:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015886:	b21c      	sxth	r4, r3
 8015888:	4b60      	ldr	r3, [pc, #384]	@ (8015a0c <tcp_receive+0x888>)
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	899b      	ldrh	r3, [r3, #12]
 801588e:	b29b      	uxth	r3, r3
 8015890:	4618      	mov	r0, r3
 8015892:	f7fa fec3 	bl	801061c <lwip_htons>
 8015896:	4603      	mov	r3, r0
 8015898:	b2db      	uxtb	r3, r3
 801589a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801589e:	b29b      	uxth	r3, r3
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fa febb 	bl	801061c <lwip_htons>
 80158a6:	4603      	mov	r3, r0
 80158a8:	b21b      	sxth	r3, r3
 80158aa:	4323      	orrs	r3, r4
 80158ac:	b21a      	sxth	r2, r3
 80158ae:	4b57      	ldr	r3, [pc, #348]	@ (8015a0c <tcp_receive+0x888>)
 80158b0:	68db      	ldr	r3, [r3, #12]
 80158b2:	b292      	uxth	r2, r2
 80158b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80158ba:	4b54      	ldr	r3, [pc, #336]	@ (8015a0c <tcp_receive+0x888>)
 80158bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80158be:	4b53      	ldr	r3, [pc, #332]	@ (8015a0c <tcp_receive+0x888>)
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	899b      	ldrh	r3, [r3, #12]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fa fea8 	bl	801061c <lwip_htons>
 80158cc:	4603      	mov	r3, r0
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	f003 0302 	and.w	r3, r3, #2
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d005      	beq.n	80158e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80158d8:	4b4c      	ldr	r3, [pc, #304]	@ (8015a0c <tcp_receive+0x888>)
 80158da:	891b      	ldrh	r3, [r3, #8]
 80158dc:	3b01      	subs	r3, #1
 80158de:	b29a      	uxth	r2, r3
 80158e0:	4b4a      	ldr	r3, [pc, #296]	@ (8015a0c <tcp_receive+0x888>)
 80158e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80158e4:	4b49      	ldr	r3, [pc, #292]	@ (8015a0c <tcp_receive+0x888>)
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	4a48      	ldr	r2, [pc, #288]	@ (8015a0c <tcp_receive+0x888>)
 80158ea:	8912      	ldrh	r2, [r2, #8]
 80158ec:	4611      	mov	r1, r2
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7fc f9c4 	bl	8011c7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80158f4:	4b45      	ldr	r3, [pc, #276]	@ (8015a0c <tcp_receive+0x888>)
 80158f6:	891c      	ldrh	r4, [r3, #8]
 80158f8:	4b44      	ldr	r3, [pc, #272]	@ (8015a0c <tcp_receive+0x888>)
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	899b      	ldrh	r3, [r3, #12]
 80158fe:	b29b      	uxth	r3, r3
 8015900:	4618      	mov	r0, r3
 8015902:	f7fa fe8b 	bl	801061c <lwip_htons>
 8015906:	4603      	mov	r3, r0
 8015908:	b2db      	uxtb	r3, r3
 801590a:	f003 0303 	and.w	r3, r3, #3
 801590e:	2b00      	cmp	r3, #0
 8015910:	d001      	beq.n	8015916 <tcp_receive+0x792>
 8015912:	2301      	movs	r3, #1
 8015914:	e000      	b.n	8015918 <tcp_receive+0x794>
 8015916:	2300      	movs	r3, #0
 8015918:	4423      	add	r3, r4
 801591a:	b29a      	uxth	r2, r3
 801591c:	4b3c      	ldr	r3, [pc, #240]	@ (8015a10 <tcp_receive+0x88c>)
 801591e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015920:	4b3b      	ldr	r3, [pc, #236]	@ (8015a10 <tcp_receive+0x88c>)
 8015922:	881b      	ldrh	r3, [r3, #0]
 8015924:	461a      	mov	r2, r3
 8015926:	4b38      	ldr	r3, [pc, #224]	@ (8015a08 <tcp_receive+0x884>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	441a      	add	r2, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015930:	6879      	ldr	r1, [r7, #4]
 8015932:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015934:	440b      	add	r3, r1
 8015936:	429a      	cmp	r2, r3
 8015938:	d006      	beq.n	8015948 <tcp_receive+0x7c4>
 801593a:	4b36      	ldr	r3, [pc, #216]	@ (8015a14 <tcp_receive+0x890>)
 801593c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015940:	4935      	ldr	r1, [pc, #212]	@ (8015a18 <tcp_receive+0x894>)
 8015942:	4836      	ldr	r0, [pc, #216]	@ (8015a1c <tcp_receive+0x898>)
 8015944:	f007 fd1e 	bl	801d384 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801594c:	2b00      	cmp	r3, #0
 801594e:	f000 80e6 	beq.w	8015b1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015952:	4b2e      	ldr	r3, [pc, #184]	@ (8015a0c <tcp_receive+0x888>)
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	899b      	ldrh	r3, [r3, #12]
 8015958:	b29b      	uxth	r3, r3
 801595a:	4618      	mov	r0, r3
 801595c:	f7fa fe5e 	bl	801061c <lwip_htons>
 8015960:	4603      	mov	r3, r0
 8015962:	b2db      	uxtb	r3, r3
 8015964:	f003 0301 	and.w	r3, r3, #1
 8015968:	2b00      	cmp	r3, #0
 801596a:	d010      	beq.n	801598e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801596c:	e00a      	b.n	8015984 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015972:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015978:	681a      	ldr	r2, [r3, #0]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801597e:	68f8      	ldr	r0, [r7, #12]
 8015980:	f7fd fd93 	bl	80134aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015988:	2b00      	cmp	r3, #0
 801598a:	d1f0      	bne.n	801596e <tcp_receive+0x7ea>
 801598c:	e0c7      	b.n	8015b1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015992:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015994:	e051      	b.n	8015a3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	899b      	ldrh	r3, [r3, #12]
 801599c:	b29b      	uxth	r3, r3
 801599e:	4618      	mov	r0, r3
 80159a0:	f7fa fe3c 	bl	801061c <lwip_htons>
 80159a4:	4603      	mov	r3, r0
 80159a6:	b2db      	uxtb	r3, r3
 80159a8:	f003 0301 	and.w	r3, r3, #1
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d03c      	beq.n	8015a2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80159b0:	4b16      	ldr	r3, [pc, #88]	@ (8015a0c <tcp_receive+0x888>)
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	899b      	ldrh	r3, [r3, #12]
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7fa fe2f 	bl	801061c <lwip_htons>
 80159be:	4603      	mov	r3, r0
 80159c0:	b2db      	uxtb	r3, r3
 80159c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d12f      	bne.n	8015a2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80159ca:	4b10      	ldr	r3, [pc, #64]	@ (8015a0c <tcp_receive+0x888>)
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	899b      	ldrh	r3, [r3, #12]
 80159d0:	b29c      	uxth	r4, r3
 80159d2:	2001      	movs	r0, #1
 80159d4:	f7fa fe22 	bl	801061c <lwip_htons>
 80159d8:	4603      	mov	r3, r0
 80159da:	461a      	mov	r2, r3
 80159dc:	4b0b      	ldr	r3, [pc, #44]	@ (8015a0c <tcp_receive+0x888>)
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	4322      	orrs	r2, r4
 80159e2:	b292      	uxth	r2, r2
 80159e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80159e6:	4b09      	ldr	r3, [pc, #36]	@ (8015a0c <tcp_receive+0x888>)
 80159e8:	891c      	ldrh	r4, [r3, #8]
 80159ea:	4b08      	ldr	r3, [pc, #32]	@ (8015a0c <tcp_receive+0x888>)
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	899b      	ldrh	r3, [r3, #12]
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7fa fe12 	bl	801061c <lwip_htons>
 80159f8:	4603      	mov	r3, r0
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	f003 0303 	and.w	r3, r3, #3
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d00d      	beq.n	8015a20 <tcp_receive+0x89c>
 8015a04:	2301      	movs	r3, #1
 8015a06:	e00c      	b.n	8015a22 <tcp_receive+0x89e>
 8015a08:	2400cc6c 	.word	0x2400cc6c
 8015a0c:	2400cc4c 	.word	0x2400cc4c
 8015a10:	2400cc76 	.word	0x2400cc76
 8015a14:	08020884 	.word	0x08020884
 8015a18:	08020c2c 	.word	0x08020c2c
 8015a1c:	080208d0 	.word	0x080208d0
 8015a20:	2300      	movs	r3, #0
 8015a22:	4423      	add	r3, r4
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	4b98      	ldr	r3, [pc, #608]	@ (8015c88 <tcp_receive+0xb04>)
 8015a28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015a34:	6938      	ldr	r0, [r7, #16]
 8015a36:	f7fd fd38 	bl	80134aa <tcp_seg_free>
            while (next &&
 8015a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d00e      	beq.n	8015a5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015a40:	4b91      	ldr	r3, [pc, #580]	@ (8015c88 <tcp_receive+0xb04>)
 8015a42:	881b      	ldrh	r3, [r3, #0]
 8015a44:	461a      	mov	r2, r3
 8015a46:	4b91      	ldr	r3, [pc, #580]	@ (8015c8c <tcp_receive+0xb08>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	441a      	add	r2, r3
 8015a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a54:	8909      	ldrh	r1, [r1, #8]
 8015a56:	440b      	add	r3, r1
 8015a58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	da9b      	bge.n	8015996 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d059      	beq.n	8015b18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015a64:	4b88      	ldr	r3, [pc, #544]	@ (8015c88 <tcp_receive+0xb04>)
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	461a      	mov	r2, r3
 8015a6a:	4b88      	ldr	r3, [pc, #544]	@ (8015c8c <tcp_receive+0xb08>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	441a      	add	r2, r3
 8015a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	dd4d      	ble.n	8015b18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	4b81      	ldr	r3, [pc, #516]	@ (8015c8c <tcp_receive+0xb08>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	1ad3      	subs	r3, r2, r3
 8015a8c:	b29a      	uxth	r2, r3
 8015a8e:	4b80      	ldr	r3, [pc, #512]	@ (8015c90 <tcp_receive+0xb0c>)
 8015a90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015a92:	4b7f      	ldr	r3, [pc, #508]	@ (8015c90 <tcp_receive+0xb0c>)
 8015a94:	68db      	ldr	r3, [r3, #12]
 8015a96:	899b      	ldrh	r3, [r3, #12]
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7fa fdbe 	bl	801061c <lwip_htons>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	f003 0302 	and.w	r3, r3, #2
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d005      	beq.n	8015ab8 <tcp_receive+0x934>
                inseg.len -= 1;
 8015aac:	4b78      	ldr	r3, [pc, #480]	@ (8015c90 <tcp_receive+0xb0c>)
 8015aae:	891b      	ldrh	r3, [r3, #8]
 8015ab0:	3b01      	subs	r3, #1
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	4b76      	ldr	r3, [pc, #472]	@ (8015c90 <tcp_receive+0xb0c>)
 8015ab6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015ab8:	4b75      	ldr	r3, [pc, #468]	@ (8015c90 <tcp_receive+0xb0c>)
 8015aba:	685b      	ldr	r3, [r3, #4]
 8015abc:	4a74      	ldr	r2, [pc, #464]	@ (8015c90 <tcp_receive+0xb0c>)
 8015abe:	8912      	ldrh	r2, [r2, #8]
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fc f8da 	bl	8011c7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015ac8:	4b71      	ldr	r3, [pc, #452]	@ (8015c90 <tcp_receive+0xb0c>)
 8015aca:	891c      	ldrh	r4, [r3, #8]
 8015acc:	4b70      	ldr	r3, [pc, #448]	@ (8015c90 <tcp_receive+0xb0c>)
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	899b      	ldrh	r3, [r3, #12]
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7fa fda1 	bl	801061c <lwip_htons>
 8015ada:	4603      	mov	r3, r0
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	f003 0303 	and.w	r3, r3, #3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d001      	beq.n	8015aea <tcp_receive+0x966>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	e000      	b.n	8015aec <tcp_receive+0x968>
 8015aea:	2300      	movs	r3, #0
 8015aec:	4423      	add	r3, r4
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	4b65      	ldr	r3, [pc, #404]	@ (8015c88 <tcp_receive+0xb04>)
 8015af2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015af4:	4b64      	ldr	r3, [pc, #400]	@ (8015c88 <tcp_receive+0xb04>)
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	461a      	mov	r2, r3
 8015afa:	4b64      	ldr	r3, [pc, #400]	@ (8015c8c <tcp_receive+0xb08>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	441a      	add	r2, r3
 8015b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b02:	68db      	ldr	r3, [r3, #12]
 8015b04:	685b      	ldr	r3, [r3, #4]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d006      	beq.n	8015b18 <tcp_receive+0x994>
 8015b0a:	4b62      	ldr	r3, [pc, #392]	@ (8015c94 <tcp_receive+0xb10>)
 8015b0c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015b10:	4961      	ldr	r1, [pc, #388]	@ (8015c98 <tcp_receive+0xb14>)
 8015b12:	4862      	ldr	r0, [pc, #392]	@ (8015c9c <tcp_receive+0xb18>)
 8015b14:	f007 fc36 	bl	801d384 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b1c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8015c88 <tcp_receive+0xb04>)
 8015b20:	881b      	ldrh	r3, [r3, #0]
 8015b22:	461a      	mov	r2, r3
 8015b24:	4b59      	ldr	r3, [pc, #356]	@ (8015c8c <tcp_receive+0xb08>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	441a      	add	r2, r3
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b32:	4b55      	ldr	r3, [pc, #340]	@ (8015c88 <tcp_receive+0xb04>)
 8015b34:	881b      	ldrh	r3, [r3, #0]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d206      	bcs.n	8015b48 <tcp_receive+0x9c4>
 8015b3a:	4b56      	ldr	r3, [pc, #344]	@ (8015c94 <tcp_receive+0xb10>)
 8015b3c:	f240 6207 	movw	r2, #1543	@ 0x607
 8015b40:	4957      	ldr	r1, [pc, #348]	@ (8015ca0 <tcp_receive+0xb1c>)
 8015b42:	4856      	ldr	r0, [pc, #344]	@ (8015c9c <tcp_receive+0xb18>)
 8015b44:	f007 fc1e 	bl	801d384 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8015c88 <tcp_receive+0xb04>)
 8015b4e:	881b      	ldrh	r3, [r3, #0]
 8015b50:	1ad3      	subs	r3, r2, r3
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7fc ffc5 	bl	8012ae8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8015c90 <tcp_receive+0xb0c>)
 8015b60:	685b      	ldr	r3, [r3, #4]
 8015b62:	891b      	ldrh	r3, [r3, #8]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d006      	beq.n	8015b76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015b68:	4b49      	ldr	r3, [pc, #292]	@ (8015c90 <tcp_receive+0xb0c>)
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8015ca4 <tcp_receive+0xb20>)
 8015b6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015b70:	4b47      	ldr	r3, [pc, #284]	@ (8015c90 <tcp_receive+0xb0c>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015b76:	4b46      	ldr	r3, [pc, #280]	@ (8015c90 <tcp_receive+0xb0c>)
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	899b      	ldrh	r3, [r3, #12]
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fa fd4c 	bl	801061c <lwip_htons>
 8015b84:	4603      	mov	r3, r0
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	f003 0301 	and.w	r3, r3, #1
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	f000 80b8 	beq.w	8015d02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015b92:	4b45      	ldr	r3, [pc, #276]	@ (8015ca8 <tcp_receive+0xb24>)
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	f043 0320 	orr.w	r3, r3, #32
 8015b9a:	b2da      	uxtb	r2, r3
 8015b9c:	4b42      	ldr	r3, [pc, #264]	@ (8015ca8 <tcp_receive+0xb24>)
 8015b9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015ba0:	e0af      	b.n	8015d02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ba6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	4a36      	ldr	r2, [pc, #216]	@ (8015c8c <tcp_receive+0xb08>)
 8015bb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	891b      	ldrh	r3, [r3, #8]
 8015bb8:	461c      	mov	r4, r3
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	899b      	ldrh	r3, [r3, #12]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7fa fd2a 	bl	801061c <lwip_htons>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	b2db      	uxtb	r3, r3
 8015bcc:	f003 0303 	and.w	r3, r3, #3
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d001      	beq.n	8015bd8 <tcp_receive+0xa54>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e000      	b.n	8015bda <tcp_receive+0xa56>
 8015bd8:	2300      	movs	r3, #0
 8015bda:	191a      	adds	r2, r3, r4
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015be0:	441a      	add	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bea:	461c      	mov	r4, r3
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	891b      	ldrh	r3, [r3, #8]
 8015bf0:	461d      	mov	r5, r3
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	68db      	ldr	r3, [r3, #12]
 8015bf6:	899b      	ldrh	r3, [r3, #12]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7fa fd0e 	bl	801061c <lwip_htons>
 8015c00:	4603      	mov	r3, r0
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	f003 0303 	and.w	r3, r3, #3
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d001      	beq.n	8015c10 <tcp_receive+0xa8c>
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e000      	b.n	8015c12 <tcp_receive+0xa8e>
 8015c10:	2300      	movs	r3, #0
 8015c12:	442b      	add	r3, r5
 8015c14:	429c      	cmp	r4, r3
 8015c16:	d206      	bcs.n	8015c26 <tcp_receive+0xaa2>
 8015c18:	4b1e      	ldr	r3, [pc, #120]	@ (8015c94 <tcp_receive+0xb10>)
 8015c1a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015c1e:	4923      	ldr	r1, [pc, #140]	@ (8015cac <tcp_receive+0xb28>)
 8015c20:	481e      	ldr	r0, [pc, #120]	@ (8015c9c <tcp_receive+0xb18>)
 8015c22:	f007 fbaf 	bl	801d384 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	891b      	ldrh	r3, [r3, #8]
 8015c2a:	461c      	mov	r4, r3
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	899b      	ldrh	r3, [r3, #12]
 8015c32:	b29b      	uxth	r3, r3
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7fa fcf1 	bl	801061c <lwip_htons>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	f003 0303 	and.w	r3, r3, #3
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d001      	beq.n	8015c4a <tcp_receive+0xac6>
 8015c46:	2301      	movs	r3, #1
 8015c48:	e000      	b.n	8015c4c <tcp_receive+0xac8>
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	1919      	adds	r1, r3, r4
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015c52:	b28b      	uxth	r3, r1
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	b29a      	uxth	r2, r3
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7fc ff43 	bl	8012ae8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	891b      	ldrh	r3, [r3, #8]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d028      	beq.n	8015cbe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8015ca4 <tcp_receive+0xb20>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d01d      	beq.n	8015cb0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015c74:	4b0b      	ldr	r3, [pc, #44]	@ (8015ca4 <tcp_receive+0xb20>)
 8015c76:	681a      	ldr	r2, [r3, #0]
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	4610      	mov	r0, r2
 8015c80:	f7fc fa50 	bl	8012124 <pbuf_cat>
 8015c84:	e018      	b.n	8015cb8 <tcp_receive+0xb34>
 8015c86:	bf00      	nop
 8015c88:	2400cc76 	.word	0x2400cc76
 8015c8c:	2400cc6c 	.word	0x2400cc6c
 8015c90:	2400cc4c 	.word	0x2400cc4c
 8015c94:	08020884 	.word	0x08020884
 8015c98:	08020c64 	.word	0x08020c64
 8015c9c:	080208d0 	.word	0x080208d0
 8015ca0:	08020ca0 	.word	0x08020ca0
 8015ca4:	2400cc7c 	.word	0x2400cc7c
 8015ca8:	2400cc79 	.word	0x2400cc79
 8015cac:	08020cc0 	.word	0x08020cc0
            } else {
              recv_data = cseg->p;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	4a70      	ldr	r2, [pc, #448]	@ (8015e78 <tcp_receive+0xcf4>)
 8015cb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	68db      	ldr	r3, [r3, #12]
 8015cc2:	899b      	ldrh	r3, [r3, #12]
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fa fca8 	bl	801061c <lwip_htons>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	f003 0301 	and.w	r3, r3, #1
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d00d      	beq.n	8015cf4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015cd8:	4b68      	ldr	r3, [pc, #416]	@ (8015e7c <tcp_receive+0xcf8>)
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	f043 0320 	orr.w	r3, r3, #32
 8015ce0:	b2da      	uxtb	r2, r3
 8015ce2:	4b66      	ldr	r3, [pc, #408]	@ (8015e7c <tcp_receive+0xcf8>)
 8015ce4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	7d1b      	ldrb	r3, [r3, #20]
 8015cea:	2b04      	cmp	r3, #4
 8015cec:	d102      	bne.n	8015cf4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	2207      	movs	r2, #7
 8015cf2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015cfc:	68b8      	ldr	r0, [r7, #8]
 8015cfe:	f7fd fbd4 	bl	80134aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d008      	beq.n	8015d1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	685a      	ldr	r2, [r3, #4]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8015d16:	429a      	cmp	r2, r3
 8015d18:	f43f af43 	beq.w	8015ba2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	8b5b      	ldrh	r3, [r3, #26]
 8015d20:	f003 0301 	and.w	r3, r3, #1
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d00e      	beq.n	8015d46 <tcp_receive+0xbc2>
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	8b5b      	ldrh	r3, [r3, #26]
 8015d2c:	f023 0301 	bic.w	r3, r3, #1
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	835a      	strh	r2, [r3, #26]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	8b5b      	ldrh	r3, [r3, #26]
 8015d3a:	f043 0302 	orr.w	r3, r3, #2
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015d44:	e187      	b.n	8016056 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	8b5b      	ldrh	r3, [r3, #26]
 8015d4a:	f043 0301 	orr.w	r3, r3, #1
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015d54:	e17f      	b.n	8016056 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d106      	bne.n	8015d6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015d5e:	4848      	ldr	r0, [pc, #288]	@ (8015e80 <tcp_receive+0xcfc>)
 8015d60:	f7fd fbbc 	bl	80134dc <tcp_seg_copy>
 8015d64:	4602      	mov	r2, r0
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	675a      	str	r2, [r3, #116]	@ 0x74
 8015d6a:	e16c      	b.n	8016046 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015d76:	e156      	b.n	8016026 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	685a      	ldr	r2, [r3, #4]
 8015d7e:	4b41      	ldr	r3, [pc, #260]	@ (8015e84 <tcp_receive+0xd00>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d11d      	bne.n	8015dc2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015d86:	4b3e      	ldr	r3, [pc, #248]	@ (8015e80 <tcp_receive+0xcfc>)
 8015d88:	891a      	ldrh	r2, [r3, #8]
 8015d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d8c:	891b      	ldrh	r3, [r3, #8]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	f240 814e 	bls.w	8016030 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015d94:	483a      	ldr	r0, [pc, #232]	@ (8015e80 <tcp_receive+0xcfc>)
 8015d96:	f7fd fba1 	bl	80134dc <tcp_seg_copy>
 8015d9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f000 8148 	beq.w	8016034 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d003      	beq.n	8015db2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dac:	697a      	ldr	r2, [r7, #20]
 8015dae:	601a      	str	r2, [r3, #0]
 8015db0:	e002      	b.n	8015db8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	697a      	ldr	r2, [r7, #20]
 8015db6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015db8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015dba:	6978      	ldr	r0, [r7, #20]
 8015dbc:	f7ff f8de 	bl	8014f7c <tcp_oos_insert_segment>
                }
                break;
 8015dc0:	e138      	b.n	8016034 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d117      	bne.n	8015df8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8015e84 <tcp_receive+0xd00>)
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	1ad3      	subs	r3, r2, r3
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	da57      	bge.n	8015e88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015dd8:	4829      	ldr	r0, [pc, #164]	@ (8015e80 <tcp_receive+0xcfc>)
 8015dda:	f7fd fb7f 	bl	80134dc <tcp_seg_copy>
 8015dde:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015de0:	69bb      	ldr	r3, [r7, #24]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	f000 8128 	beq.w	8016038 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	69ba      	ldr	r2, [r7, #24]
 8015dec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015dee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015df0:	69b8      	ldr	r0, [r7, #24]
 8015df2:	f7ff f8c3 	bl	8014f7c <tcp_oos_insert_segment>
                  }
                  break;
 8015df6:	e11f      	b.n	8016038 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015df8:	4b22      	ldr	r3, [pc, #136]	@ (8015e84 <tcp_receive+0xd00>)
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	1ad3      	subs	r3, r2, r3
 8015e04:	3b01      	subs	r3, #1
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	db3e      	blt.n	8015e88 <tcp_receive+0xd04>
 8015e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8015e84 <tcp_receive+0xd00>)
 8015e0c:	681a      	ldr	r2, [r3, #0]
 8015e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e10:	68db      	ldr	r3, [r3, #12]
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	1ad3      	subs	r3, r2, r3
 8015e16:	3301      	adds	r3, #1
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	dc35      	bgt.n	8015e88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015e1c:	4818      	ldr	r0, [pc, #96]	@ (8015e80 <tcp_receive+0xcfc>)
 8015e1e:	f7fd fb5d 	bl	80134dc <tcp_seg_copy>
 8015e22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	f000 8108 	beq.w	801603c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e2e:	68db      	ldr	r3, [r3, #12]
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e34:	8912      	ldrh	r2, [r2, #8]
 8015e36:	441a      	add	r2, r3
 8015e38:	4b12      	ldr	r3, [pc, #72]	@ (8015e84 <tcp_receive+0xd00>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	dd12      	ble.n	8015e68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015e42:	4b10      	ldr	r3, [pc, #64]	@ (8015e84 <tcp_receive+0xd00>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	1ad3      	subs	r3, r2, r3
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e5a:	685a      	ldr	r2, [r3, #4]
 8015e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e5e:	891b      	ldrh	r3, [r3, #8]
 8015e60:	4619      	mov	r1, r3
 8015e62:	4610      	mov	r0, r2
 8015e64:	f7fb ff0a 	bl	8011c7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e6a:	69fa      	ldr	r2, [r7, #28]
 8015e6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015e6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015e70:	69f8      	ldr	r0, [r7, #28]
 8015e72:	f7ff f883 	bl	8014f7c <tcp_oos_insert_segment>
                  }
                  break;
 8015e76:	e0e1      	b.n	801603c <tcp_receive+0xeb8>
 8015e78:	2400cc7c 	.word	0x2400cc7c
 8015e7c:	2400cc79 	.word	0x2400cc79
 8015e80:	2400cc4c 	.word	0x2400cc4c
 8015e84:	2400cc6c 	.word	0x2400cc6c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f040 80c5 	bne.w	8016020 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015e96:	4b7f      	ldr	r3, [pc, #508]	@ (8016094 <tcp_receive+0xf10>)
 8015e98:	681a      	ldr	r2, [r3, #0]
 8015e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e9c:	68db      	ldr	r3, [r3, #12]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	f340 80bc 	ble.w	8016020 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	899b      	ldrh	r3, [r3, #12]
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7fa fbb3 	bl	801061c <lwip_htons>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	f003 0301 	and.w	r3, r3, #1
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	f040 80be 	bne.w	8016040 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015ec4:	4874      	ldr	r0, [pc, #464]	@ (8016098 <tcp_receive+0xf14>)
 8015ec6:	f7fd fb09 	bl	80134dc <tcp_seg_copy>
 8015eca:	4602      	mov	r2, r0
 8015ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ece:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	f000 80b5 	beq.w	8016044 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015edc:	68db      	ldr	r3, [r3, #12]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ee2:	8912      	ldrh	r2, [r2, #8]
 8015ee4:	441a      	add	r2, r3
 8015ee6:	4b6b      	ldr	r3, [pc, #428]	@ (8016094 <tcp_receive+0xf10>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	dd12      	ble.n	8015f16 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015ef0:	4b68      	ldr	r3, [pc, #416]	@ (8016094 <tcp_receive+0xf10>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ef8:	68db      	ldr	r3, [r3, #12]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	b29a      	uxth	r2, r3
 8015f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f08:	685a      	ldr	r2, [r3, #4]
 8015f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f0c:	891b      	ldrh	r3, [r3, #8]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	4610      	mov	r0, r2
 8015f12:	f7fb feb3 	bl	8011c7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015f16:	4b61      	ldr	r3, [pc, #388]	@ (801609c <tcp_receive+0xf18>)
 8015f18:	881b      	ldrh	r3, [r3, #0]
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8016094 <tcp_receive+0xf10>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	441a      	add	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f26:	6879      	ldr	r1, [r7, #4]
 8015f28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015f2a:	440b      	add	r3, r1
 8015f2c:	1ad3      	subs	r3, r2, r3
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	f340 8088 	ble.w	8016044 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	68db      	ldr	r3, [r3, #12]
 8015f3a:	899b      	ldrh	r3, [r3, #12]
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7fa fb6c 	bl	801061c <lwip_htons>
 8015f44:	4603      	mov	r3, r0
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	f003 0301 	and.w	r3, r3, #1
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d021      	beq.n	8015f94 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	899b      	ldrh	r3, [r3, #12]
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	b21b      	sxth	r3, r3
 8015f5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015f60:	b21c      	sxth	r4, r3
 8015f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	899b      	ldrh	r3, [r3, #12]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7fa fb55 	bl	801061c <lwip_htons>
 8015f72:	4603      	mov	r3, r0
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7fa fb4d 	bl	801061c <lwip_htons>
 8015f82:	4603      	mov	r3, r0
 8015f84:	b21b      	sxth	r3, r3
 8015f86:	4323      	orrs	r3, r4
 8015f88:	b21a      	sxth	r2, r3
 8015f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	b292      	uxth	r2, r2
 8015f92:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f98:	b29a      	uxth	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f9e:	4413      	add	r3, r2
 8015fa0:	b299      	uxth	r1, r3
 8015fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8016094 <tcp_receive+0xf10>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	1a8a      	subs	r2, r1, r2
 8015fae:	b292      	uxth	r2, r2
 8015fb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	685a      	ldr	r2, [r3, #4]
 8015fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	891b      	ldrh	r3, [r3, #8]
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	4610      	mov	r0, r2
 8015fc2:	f7fb fe5b 	bl	8011c7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	891c      	ldrh	r4, [r3, #8]
 8015fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	68db      	ldr	r3, [r3, #12]
 8015fd2:	899b      	ldrh	r3, [r3, #12]
 8015fd4:	b29b      	uxth	r3, r3
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f7fa fb20 	bl	801061c <lwip_htons>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	b2db      	uxtb	r3, r3
 8015fe0:	f003 0303 	and.w	r3, r3, #3
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d001      	beq.n	8015fec <tcp_receive+0xe68>
 8015fe8:	2301      	movs	r3, #1
 8015fea:	e000      	b.n	8015fee <tcp_receive+0xe6a>
 8015fec:	2300      	movs	r3, #0
 8015fee:	4423      	add	r3, r4
 8015ff0:	b29a      	uxth	r2, r3
 8015ff2:	4b2a      	ldr	r3, [pc, #168]	@ (801609c <tcp_receive+0xf18>)
 8015ff4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015ff6:	4b29      	ldr	r3, [pc, #164]	@ (801609c <tcp_receive+0xf18>)
 8015ff8:	881b      	ldrh	r3, [r3, #0]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	4b25      	ldr	r3, [pc, #148]	@ (8016094 <tcp_receive+0xf10>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	441a      	add	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016006:	6879      	ldr	r1, [r7, #4]
 8016008:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801600a:	440b      	add	r3, r1
 801600c:	429a      	cmp	r2, r3
 801600e:	d019      	beq.n	8016044 <tcp_receive+0xec0>
 8016010:	4b23      	ldr	r3, [pc, #140]	@ (80160a0 <tcp_receive+0xf1c>)
 8016012:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016016:	4923      	ldr	r1, [pc, #140]	@ (80160a4 <tcp_receive+0xf20>)
 8016018:	4823      	ldr	r0, [pc, #140]	@ (80160a8 <tcp_receive+0xf24>)
 801601a:	f007 f9b3 	bl	801d384 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801601e:	e011      	b.n	8016044 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016028:	2b00      	cmp	r3, #0
 801602a:	f47f aea5 	bne.w	8015d78 <tcp_receive+0xbf4>
 801602e:	e00a      	b.n	8016046 <tcp_receive+0xec2>
                break;
 8016030:	bf00      	nop
 8016032:	e008      	b.n	8016046 <tcp_receive+0xec2>
                break;
 8016034:	bf00      	nop
 8016036:	e006      	b.n	8016046 <tcp_receive+0xec2>
                  break;
 8016038:	bf00      	nop
 801603a:	e004      	b.n	8016046 <tcp_receive+0xec2>
                  break;
 801603c:	bf00      	nop
 801603e:	e002      	b.n	8016046 <tcp_receive+0xec2>
                  break;
 8016040:	bf00      	nop
 8016042:	e000      	b.n	8016046 <tcp_receive+0xec2>
                break;
 8016044:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f001 fa30 	bl	80174ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801604c:	e003      	b.n	8016056 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f001 fa2c 	bl	80174ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016054:	e01a      	b.n	801608c <tcp_receive+0xf08>
 8016056:	e019      	b.n	801608c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016058:	4b0e      	ldr	r3, [pc, #56]	@ (8016094 <tcp_receive+0xf10>)
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016060:	1ad3      	subs	r3, r2, r3
 8016062:	2b00      	cmp	r3, #0
 8016064:	db0a      	blt.n	801607c <tcp_receive+0xef8>
 8016066:	4b0b      	ldr	r3, [pc, #44]	@ (8016094 <tcp_receive+0xf10>)
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801606e:	6879      	ldr	r1, [r7, #4]
 8016070:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016072:	440b      	add	r3, r1
 8016074:	1ad3      	subs	r3, r2, r3
 8016076:	3301      	adds	r3, #1
 8016078:	2b00      	cmp	r3, #0
 801607a:	dd07      	ble.n	801608c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	8b5b      	ldrh	r3, [r3, #26]
 8016080:	f043 0302 	orr.w	r3, r3, #2
 8016084:	b29a      	uxth	r2, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801608a:	e7ff      	b.n	801608c <tcp_receive+0xf08>
 801608c:	bf00      	nop
 801608e:	3750      	adds	r7, #80	@ 0x50
 8016090:	46bd      	mov	sp, r7
 8016092:	bdb0      	pop	{r4, r5, r7, pc}
 8016094:	2400cc6c 	.word	0x2400cc6c
 8016098:	2400cc4c 	.word	0x2400cc4c
 801609c:	2400cc76 	.word	0x2400cc76
 80160a0:	08020884 	.word	0x08020884
 80160a4:	08020c2c 	.word	0x08020c2c
 80160a8:	080208d0 	.word	0x080208d0

080160ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80160ac:	b480      	push	{r7}
 80160ae:	b083      	sub	sp, #12
 80160b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80160b2:	4b15      	ldr	r3, [pc, #84]	@ (8016108 <tcp_get_next_optbyte+0x5c>)
 80160b4:	881b      	ldrh	r3, [r3, #0]
 80160b6:	1c5a      	adds	r2, r3, #1
 80160b8:	b291      	uxth	r1, r2
 80160ba:	4a13      	ldr	r2, [pc, #76]	@ (8016108 <tcp_get_next_optbyte+0x5c>)
 80160bc:	8011      	strh	r1, [r2, #0]
 80160be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80160c0:	4b12      	ldr	r3, [pc, #72]	@ (801610c <tcp_get_next_optbyte+0x60>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d004      	beq.n	80160d2 <tcp_get_next_optbyte+0x26>
 80160c8:	4b11      	ldr	r3, [pc, #68]	@ (8016110 <tcp_get_next_optbyte+0x64>)
 80160ca:	881b      	ldrh	r3, [r3, #0]
 80160cc:	88fa      	ldrh	r2, [r7, #6]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d208      	bcs.n	80160e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80160d2:	4b10      	ldr	r3, [pc, #64]	@ (8016114 <tcp_get_next_optbyte+0x68>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	3314      	adds	r3, #20
 80160d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80160da:	88fb      	ldrh	r3, [r7, #6]
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	4413      	add	r3, r2
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	e00b      	b.n	80160fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80160e4:	88fb      	ldrh	r3, [r7, #6]
 80160e6:	b2da      	uxtb	r2, r3
 80160e8:	4b09      	ldr	r3, [pc, #36]	@ (8016110 <tcp_get_next_optbyte+0x64>)
 80160ea:	881b      	ldrh	r3, [r3, #0]
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80160f2:	4b06      	ldr	r3, [pc, #24]	@ (801610c <tcp_get_next_optbyte+0x60>)
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	797b      	ldrb	r3, [r7, #5]
 80160f8:	4413      	add	r3, r2
 80160fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr
 8016108:	2400cc68 	.word	0x2400cc68
 801610c:	2400cc64 	.word	0x2400cc64
 8016110:	2400cc62 	.word	0x2400cc62
 8016114:	2400cc5c 	.word	0x2400cc5c

08016118 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d106      	bne.n	8016134 <tcp_parseopt+0x1c>
 8016126:	4b32      	ldr	r3, [pc, #200]	@ (80161f0 <tcp_parseopt+0xd8>)
 8016128:	f240 727d 	movw	r2, #1917	@ 0x77d
 801612c:	4931      	ldr	r1, [pc, #196]	@ (80161f4 <tcp_parseopt+0xdc>)
 801612e:	4832      	ldr	r0, [pc, #200]	@ (80161f8 <tcp_parseopt+0xe0>)
 8016130:	f007 f928 	bl	801d384 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016134:	4b31      	ldr	r3, [pc, #196]	@ (80161fc <tcp_parseopt+0xe4>)
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d056      	beq.n	80161ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801613c:	4b30      	ldr	r3, [pc, #192]	@ (8016200 <tcp_parseopt+0xe8>)
 801613e:	2200      	movs	r2, #0
 8016140:	801a      	strh	r2, [r3, #0]
 8016142:	e046      	b.n	80161d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016144:	f7ff ffb2 	bl	80160ac <tcp_get_next_optbyte>
 8016148:	4603      	mov	r3, r0
 801614a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801614c:	7bfb      	ldrb	r3, [r7, #15]
 801614e:	2b02      	cmp	r3, #2
 8016150:	d006      	beq.n	8016160 <tcp_parseopt+0x48>
 8016152:	2b02      	cmp	r3, #2
 8016154:	dc2a      	bgt.n	80161ac <tcp_parseopt+0x94>
 8016156:	2b00      	cmp	r3, #0
 8016158:	d042      	beq.n	80161e0 <tcp_parseopt+0xc8>
 801615a:	2b01      	cmp	r3, #1
 801615c:	d038      	beq.n	80161d0 <tcp_parseopt+0xb8>
 801615e:	e025      	b.n	80161ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016160:	f7ff ffa4 	bl	80160ac <tcp_get_next_optbyte>
 8016164:	4603      	mov	r3, r0
 8016166:	2b04      	cmp	r3, #4
 8016168:	d13c      	bne.n	80161e4 <tcp_parseopt+0xcc>
 801616a:	4b25      	ldr	r3, [pc, #148]	@ (8016200 <tcp_parseopt+0xe8>)
 801616c:	881b      	ldrh	r3, [r3, #0]
 801616e:	3301      	adds	r3, #1
 8016170:	4a22      	ldr	r2, [pc, #136]	@ (80161fc <tcp_parseopt+0xe4>)
 8016172:	8812      	ldrh	r2, [r2, #0]
 8016174:	4293      	cmp	r3, r2
 8016176:	da35      	bge.n	80161e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016178:	f7ff ff98 	bl	80160ac <tcp_get_next_optbyte>
 801617c:	4603      	mov	r3, r0
 801617e:	021b      	lsls	r3, r3, #8
 8016180:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016182:	f7ff ff93 	bl	80160ac <tcp_get_next_optbyte>
 8016186:	4603      	mov	r3, r0
 8016188:	461a      	mov	r2, r3
 801618a:	89bb      	ldrh	r3, [r7, #12]
 801618c:	4313      	orrs	r3, r2
 801618e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016190:	89bb      	ldrh	r3, [r7, #12]
 8016192:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016196:	d804      	bhi.n	80161a2 <tcp_parseopt+0x8a>
 8016198:	89bb      	ldrh	r3, [r7, #12]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d001      	beq.n	80161a2 <tcp_parseopt+0x8a>
 801619e:	89ba      	ldrh	r2, [r7, #12]
 80161a0:	e001      	b.n	80161a6 <tcp_parseopt+0x8e>
 80161a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80161aa:	e012      	b.n	80161d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80161ac:	f7ff ff7e 	bl	80160ac <tcp_get_next_optbyte>
 80161b0:	4603      	mov	r3, r0
 80161b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80161b4:	7afb      	ldrb	r3, [r7, #11]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d916      	bls.n	80161e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80161ba:	7afb      	ldrb	r3, [r7, #11]
 80161bc:	b29a      	uxth	r2, r3
 80161be:	4b10      	ldr	r3, [pc, #64]	@ (8016200 <tcp_parseopt+0xe8>)
 80161c0:	881b      	ldrh	r3, [r3, #0]
 80161c2:	4413      	add	r3, r2
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	3b02      	subs	r3, #2
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	4b0d      	ldr	r3, [pc, #52]	@ (8016200 <tcp_parseopt+0xe8>)
 80161cc:	801a      	strh	r2, [r3, #0]
 80161ce:	e000      	b.n	80161d2 <tcp_parseopt+0xba>
          break;
 80161d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80161d2:	4b0b      	ldr	r3, [pc, #44]	@ (8016200 <tcp_parseopt+0xe8>)
 80161d4:	881a      	ldrh	r2, [r3, #0]
 80161d6:	4b09      	ldr	r3, [pc, #36]	@ (80161fc <tcp_parseopt+0xe4>)
 80161d8:	881b      	ldrh	r3, [r3, #0]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d3b2      	bcc.n	8016144 <tcp_parseopt+0x2c>
 80161de:	e004      	b.n	80161ea <tcp_parseopt+0xd2>
          return;
 80161e0:	bf00      	nop
 80161e2:	e002      	b.n	80161ea <tcp_parseopt+0xd2>
            return;
 80161e4:	bf00      	nop
 80161e6:	e000      	b.n	80161ea <tcp_parseopt+0xd2>
            return;
 80161e8:	bf00      	nop
      }
    }
  }
}
 80161ea:	3710      	adds	r7, #16
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	08020884 	.word	0x08020884
 80161f4:	08020ce8 	.word	0x08020ce8
 80161f8:	080208d0 	.word	0x080208d0
 80161fc:	2400cc60 	.word	0x2400cc60
 8016200:	2400cc68 	.word	0x2400cc68

08016204 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016204:	b480      	push	{r7}
 8016206:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016208:	4b05      	ldr	r3, [pc, #20]	@ (8016220 <tcp_trigger_input_pcb_close+0x1c>)
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	f043 0310 	orr.w	r3, r3, #16
 8016210:	b2da      	uxtb	r2, r3
 8016212:	4b03      	ldr	r3, [pc, #12]	@ (8016220 <tcp_trigger_input_pcb_close+0x1c>)
 8016214:	701a      	strb	r2, [r3, #0]
}
 8016216:	bf00      	nop
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr
 8016220:	2400cc79 	.word	0x2400cc79

08016224 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	60f8      	str	r0, [r7, #12]
 801622c:	60b9      	str	r1, [r7, #8]
 801622e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d00a      	beq.n	801624c <tcp_route+0x28>
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	7a1b      	ldrb	r3, [r3, #8]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d006      	beq.n	801624c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	7a1b      	ldrb	r3, [r3, #8]
 8016242:	4618      	mov	r0, r3
 8016244:	f7fb fb12 	bl	801186c <netif_get_by_index>
 8016248:	4603      	mov	r3, r0
 801624a:	e003      	b.n	8016254 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f005 f865 	bl	801b31c <ip4_route>
 8016252:	4603      	mov	r3, r0
  }
}
 8016254:	4618      	mov	r0, r3
 8016256:	3710      	adds	r7, #16
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801625c:	b590      	push	{r4, r7, lr}
 801625e:	b087      	sub	sp, #28
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	603b      	str	r3, [r7, #0]
 8016268:	4613      	mov	r3, r2
 801626a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d105      	bne.n	801627e <tcp_create_segment+0x22>
 8016272:	4b43      	ldr	r3, [pc, #268]	@ (8016380 <tcp_create_segment+0x124>)
 8016274:	22a3      	movs	r2, #163	@ 0xa3
 8016276:	4943      	ldr	r1, [pc, #268]	@ (8016384 <tcp_create_segment+0x128>)
 8016278:	4843      	ldr	r0, [pc, #268]	@ (8016388 <tcp_create_segment+0x12c>)
 801627a:	f007 f883 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d105      	bne.n	8016290 <tcp_create_segment+0x34>
 8016284:	4b3e      	ldr	r3, [pc, #248]	@ (8016380 <tcp_create_segment+0x124>)
 8016286:	22a4      	movs	r2, #164	@ 0xa4
 8016288:	4940      	ldr	r1, [pc, #256]	@ (801638c <tcp_create_segment+0x130>)
 801628a:	483f      	ldr	r0, [pc, #252]	@ (8016388 <tcp_create_segment+0x12c>)
 801628c:	f007 f87a 	bl	801d384 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016290:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	b2db      	uxtb	r3, r3
 8016298:	f003 0304 	and.w	r3, r3, #4
 801629c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801629e:	2003      	movs	r0, #3
 80162a0:	f7fa ff4c 	bl	801113c <memp_malloc>
 80162a4:	6138      	str	r0, [r7, #16]
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d104      	bne.n	80162b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80162ac:	68b8      	ldr	r0, [r7, #8]
 80162ae:	f7fb fe6b 	bl	8011f88 <pbuf_free>
    return NULL;
 80162b2:	2300      	movs	r3, #0
 80162b4:	e060      	b.n	8016378 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80162bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	2200      	movs	r2, #0
 80162c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	891a      	ldrh	r2, [r3, #8]
 80162ce:	7dfb      	ldrb	r3, [r7, #23]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d205      	bcs.n	80162e2 <tcp_create_segment+0x86>
 80162d6:	4b2a      	ldr	r3, [pc, #168]	@ (8016380 <tcp_create_segment+0x124>)
 80162d8:	22b0      	movs	r2, #176	@ 0xb0
 80162da:	492d      	ldr	r1, [pc, #180]	@ (8016390 <tcp_create_segment+0x134>)
 80162dc:	482a      	ldr	r0, [pc, #168]	@ (8016388 <tcp_create_segment+0x12c>)
 80162de:	f007 f851 	bl	801d384 <iprintf>
  seg->len = p->tot_len - optlen;
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	891a      	ldrh	r2, [r3, #8]
 80162e6:	7dfb      	ldrb	r3, [r7, #23]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	b29a      	uxth	r2, r3
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80162f2:	2114      	movs	r1, #20
 80162f4:	68b8      	ldr	r0, [r7, #8]
 80162f6:	f7fb fdb1 	bl	8011e5c <pbuf_add_header>
 80162fa:	4603      	mov	r3, r0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d004      	beq.n	801630a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016300:	6938      	ldr	r0, [r7, #16]
 8016302:	f7fd f8d2 	bl	80134aa <tcp_seg_free>
    return NULL;
 8016306:	2300      	movs	r3, #0
 8016308:	e036      	b.n	8016378 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	685a      	ldr	r2, [r3, #4]
 8016310:	693b      	ldr	r3, [r7, #16]
 8016312:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	8ada      	ldrh	r2, [r3, #22]
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	68dc      	ldr	r4, [r3, #12]
 801631c:	4610      	mov	r0, r2
 801631e:	f7fa f97d 	bl	801061c <lwip_htons>
 8016322:	4603      	mov	r3, r0
 8016324:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	8b1a      	ldrh	r2, [r3, #24]
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	68dc      	ldr	r4, [r3, #12]
 801632e:	4610      	mov	r0, r2
 8016330:	f7fa f974 	bl	801061c <lwip_htons>
 8016334:	4603      	mov	r3, r0
 8016336:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	68dc      	ldr	r4, [r3, #12]
 801633c:	6838      	ldr	r0, [r7, #0]
 801633e:	f7fa f982 	bl	8010646 <lwip_htonl>
 8016342:	4603      	mov	r3, r0
 8016344:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016346:	7dfb      	ldrb	r3, [r7, #23]
 8016348:	089b      	lsrs	r3, r3, #2
 801634a:	b2db      	uxtb	r3, r3
 801634c:	3305      	adds	r3, #5
 801634e:	b29b      	uxth	r3, r3
 8016350:	031b      	lsls	r3, r3, #12
 8016352:	b29a      	uxth	r2, r3
 8016354:	79fb      	ldrb	r3, [r7, #7]
 8016356:	b29b      	uxth	r3, r3
 8016358:	4313      	orrs	r3, r2
 801635a:	b29a      	uxth	r2, r3
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	68dc      	ldr	r4, [r3, #12]
 8016360:	4610      	mov	r0, r2
 8016362:	f7fa f95b 	bl	801061c <lwip_htons>
 8016366:	4603      	mov	r3, r0
 8016368:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	2200      	movs	r2, #0
 8016370:	749a      	strb	r2, [r3, #18]
 8016372:	2200      	movs	r2, #0
 8016374:	74da      	strb	r2, [r3, #19]
  return seg;
 8016376:	693b      	ldr	r3, [r7, #16]
}
 8016378:	4618      	mov	r0, r3
 801637a:	371c      	adds	r7, #28
 801637c:	46bd      	mov	sp, r7
 801637e:	bd90      	pop	{r4, r7, pc}
 8016380:	08020d04 	.word	0x08020d04
 8016384:	08020d38 	.word	0x08020d38
 8016388:	08020d58 	.word	0x08020d58
 801638c:	08020d80 	.word	0x08020d80
 8016390:	08020da4 	.word	0x08020da4

08016394 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016394:	b590      	push	{r4, r7, lr}
 8016396:	b08b      	sub	sp, #44	@ 0x2c
 8016398:	af02      	add	r7, sp, #8
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	460b      	mov	r3, r1
 801639e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80163a0:	2300      	movs	r3, #0
 80163a2:	61fb      	str	r3, [r7, #28]
 80163a4:	2300      	movs	r3, #0
 80163a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80163a8:	2300      	movs	r3, #0
 80163aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d106      	bne.n	80163c0 <tcp_split_unsent_seg+0x2c>
 80163b2:	4b95      	ldr	r3, [pc, #596]	@ (8016608 <tcp_split_unsent_seg+0x274>)
 80163b4:	f240 324b 	movw	r2, #843	@ 0x34b
 80163b8:	4994      	ldr	r1, [pc, #592]	@ (801660c <tcp_split_unsent_seg+0x278>)
 80163ba:	4895      	ldr	r0, [pc, #596]	@ (8016610 <tcp_split_unsent_seg+0x27c>)
 80163bc:	f006 ffe2 	bl	801d384 <iprintf>

  useg = pcb->unsent;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d102      	bne.n	80163d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80163cc:	f04f 33ff 	mov.w	r3, #4294967295
 80163d0:	e116      	b.n	8016600 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80163d2:	887b      	ldrh	r3, [r7, #2]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d109      	bne.n	80163ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80163d8:	4b8b      	ldr	r3, [pc, #556]	@ (8016608 <tcp_split_unsent_seg+0x274>)
 80163da:	f240 3253 	movw	r2, #851	@ 0x353
 80163de:	498d      	ldr	r1, [pc, #564]	@ (8016614 <tcp_split_unsent_seg+0x280>)
 80163e0:	488b      	ldr	r0, [pc, #556]	@ (8016610 <tcp_split_unsent_seg+0x27c>)
 80163e2:	f006 ffcf 	bl	801d384 <iprintf>
    return ERR_VAL;
 80163e6:	f06f 0305 	mvn.w	r3, #5
 80163ea:	e109      	b.n	8016600 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	891b      	ldrh	r3, [r3, #8]
 80163f0:	887a      	ldrh	r2, [r7, #2]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d301      	bcc.n	80163fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80163f6:	2300      	movs	r3, #0
 80163f8:	e102      	b.n	8016600 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80163fe:	887a      	ldrh	r2, [r7, #2]
 8016400:	429a      	cmp	r2, r3
 8016402:	d906      	bls.n	8016412 <tcp_split_unsent_seg+0x7e>
 8016404:	4b80      	ldr	r3, [pc, #512]	@ (8016608 <tcp_split_unsent_seg+0x274>)
 8016406:	f240 325b 	movw	r2, #859	@ 0x35b
 801640a:	4983      	ldr	r1, [pc, #524]	@ (8016618 <tcp_split_unsent_seg+0x284>)
 801640c:	4880      	ldr	r0, [pc, #512]	@ (8016610 <tcp_split_unsent_seg+0x27c>)
 801640e:	f006 ffb9 	bl	801d384 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	891b      	ldrh	r3, [r3, #8]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d106      	bne.n	8016428 <tcp_split_unsent_seg+0x94>
 801641a:	4b7b      	ldr	r3, [pc, #492]	@ (8016608 <tcp_split_unsent_seg+0x274>)
 801641c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016420:	497e      	ldr	r1, [pc, #504]	@ (801661c <tcp_split_unsent_seg+0x288>)
 8016422:	487b      	ldr	r0, [pc, #492]	@ (8016610 <tcp_split_unsent_seg+0x27c>)
 8016424:	f006 ffae 	bl	801d384 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	7a9b      	ldrb	r3, [r3, #10]
 801642c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801642e:	7bfb      	ldrb	r3, [r7, #15]
 8016430:	009b      	lsls	r3, r3, #2
 8016432:	b2db      	uxtb	r3, r3
 8016434:	f003 0304 	and.w	r3, r3, #4
 8016438:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	891a      	ldrh	r2, [r3, #8]
 801643e:	887b      	ldrh	r3, [r7, #2]
 8016440:	1ad3      	subs	r3, r2, r3
 8016442:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016444:	7bbb      	ldrb	r3, [r7, #14]
 8016446:	b29a      	uxth	r2, r3
 8016448:	89bb      	ldrh	r3, [r7, #12]
 801644a:	4413      	add	r3, r2
 801644c:	b29b      	uxth	r3, r3
 801644e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016452:	4619      	mov	r1, r3
 8016454:	2036      	movs	r0, #54	@ 0x36
 8016456:	f7fb fab3 	bl	80119c0 <pbuf_alloc>
 801645a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	2b00      	cmp	r3, #0
 8016460:	f000 80b7 	beq.w	80165d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	891a      	ldrh	r2, [r3, #8]
 801646a:	697b      	ldr	r3, [r7, #20]
 801646c:	891b      	ldrh	r3, [r3, #8]
 801646e:	1ad3      	subs	r3, r2, r3
 8016470:	b29a      	uxth	r2, r3
 8016472:	887b      	ldrh	r3, [r7, #2]
 8016474:	4413      	add	r3, r2
 8016476:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	6858      	ldr	r0, [r3, #4]
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	685a      	ldr	r2, [r3, #4]
 8016480:	7bbb      	ldrb	r3, [r7, #14]
 8016482:	18d1      	adds	r1, r2, r3
 8016484:	897b      	ldrh	r3, [r7, #10]
 8016486:	89ba      	ldrh	r2, [r7, #12]
 8016488:	f7fb ff84 	bl	8012394 <pbuf_copy_partial>
 801648c:	4603      	mov	r3, r0
 801648e:	461a      	mov	r2, r3
 8016490:	89bb      	ldrh	r3, [r7, #12]
 8016492:	4293      	cmp	r3, r2
 8016494:	f040 809f 	bne.w	80165d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016498:	697b      	ldr	r3, [r7, #20]
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	899b      	ldrh	r3, [r3, #12]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7fa f8bb 	bl	801061c <lwip_htons>
 80164a6:	4603      	mov	r3, r0
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80164ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80164b0:	2300      	movs	r3, #0
 80164b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80164b4:	7efb      	ldrb	r3, [r7, #27]
 80164b6:	f003 0308 	and.w	r3, r3, #8
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d007      	beq.n	80164ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80164be:	7efb      	ldrb	r3, [r7, #27]
 80164c0:	f023 0308 	bic.w	r3, r3, #8
 80164c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80164c6:	7ebb      	ldrb	r3, [r7, #26]
 80164c8:	f043 0308 	orr.w	r3, r3, #8
 80164cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80164ce:	7efb      	ldrb	r3, [r7, #27]
 80164d0:	f003 0301 	and.w	r3, r3, #1
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d007      	beq.n	80164e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80164d8:	7efb      	ldrb	r3, [r7, #27]
 80164da:	f023 0301 	bic.w	r3, r3, #1
 80164de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80164e0:	7ebb      	ldrb	r3, [r7, #26]
 80164e2:	f043 0301 	orr.w	r3, r3, #1
 80164e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	68db      	ldr	r3, [r3, #12]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fa f8a9 	bl	8010646 <lwip_htonl>
 80164f4:	4602      	mov	r2, r0
 80164f6:	887b      	ldrh	r3, [r7, #2]
 80164f8:	18d1      	adds	r1, r2, r3
 80164fa:	7eba      	ldrb	r2, [r7, #26]
 80164fc:	7bfb      	ldrb	r3, [r7, #15]
 80164fe:	9300      	str	r3, [sp, #0]
 8016500:	460b      	mov	r3, r1
 8016502:	6939      	ldr	r1, [r7, #16]
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7ff fea9 	bl	801625c <tcp_create_segment>
 801650a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d063      	beq.n	80165da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	4618      	mov	r0, r3
 8016518:	f7fb fdc4 	bl	80120a4 <pbuf_clen>
 801651c:	4603      	mov	r3, r0
 801651e:	461a      	mov	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016526:	1a9b      	subs	r3, r3, r2
 8016528:	b29a      	uxth	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	6858      	ldr	r0, [r3, #4]
 8016534:	697b      	ldr	r3, [r7, #20]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	891a      	ldrh	r2, [r3, #8]
 801653a:	89bb      	ldrh	r3, [r7, #12]
 801653c:	1ad3      	subs	r3, r2, r3
 801653e:	b29b      	uxth	r3, r3
 8016540:	4619      	mov	r1, r3
 8016542:	f7fb fb9b 	bl	8011c7c <pbuf_realloc>
  useg->len -= remainder;
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	891a      	ldrh	r2, [r3, #8]
 801654a:	89bb      	ldrh	r3, [r7, #12]
 801654c:	1ad3      	subs	r3, r2, r3
 801654e:	b29a      	uxth	r2, r3
 8016550:	697b      	ldr	r3, [r7, #20]
 8016552:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	899b      	ldrh	r3, [r3, #12]
 801655a:	b29c      	uxth	r4, r3
 801655c:	7efb      	ldrb	r3, [r7, #27]
 801655e:	b29b      	uxth	r3, r3
 8016560:	4618      	mov	r0, r3
 8016562:	f7fa f85b 	bl	801061c <lwip_htons>
 8016566:	4603      	mov	r3, r0
 8016568:	461a      	mov	r2, r3
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	4322      	orrs	r2, r4
 8016570:	b292      	uxth	r2, r2
 8016572:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	685b      	ldr	r3, [r3, #4]
 8016578:	4618      	mov	r0, r3
 801657a:	f7fb fd93 	bl	80120a4 <pbuf_clen>
 801657e:	4603      	mov	r3, r0
 8016580:	461a      	mov	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016588:	4413      	add	r3, r2
 801658a:	b29a      	uxth	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016592:	69fb      	ldr	r3, [r7, #28]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	4618      	mov	r0, r3
 8016598:	f7fb fd84 	bl	80120a4 <pbuf_clen>
 801659c:	4603      	mov	r3, r0
 801659e:	461a      	mov	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80165a6:	4413      	add	r3, r2
 80165a8:	b29a      	uxth	r2, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	681a      	ldr	r2, [r3, #0]
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	69fa      	ldr	r2, [r7, #28]
 80165bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d103      	bne.n	80165ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2200      	movs	r2, #0
 80165ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e016      	b.n	8016600 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80165d2:	bf00      	nop
 80165d4:	e002      	b.n	80165dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80165d6:	bf00      	nop
 80165d8:	e000      	b.n	80165dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80165da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d006      	beq.n	80165f0 <tcp_split_unsent_seg+0x25c>
 80165e2:	4b09      	ldr	r3, [pc, #36]	@ (8016608 <tcp_split_unsent_seg+0x274>)
 80165e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80165e8:	490d      	ldr	r1, [pc, #52]	@ (8016620 <tcp_split_unsent_seg+0x28c>)
 80165ea:	4809      	ldr	r0, [pc, #36]	@ (8016610 <tcp_split_unsent_seg+0x27c>)
 80165ec:	f006 feca 	bl	801d384 <iprintf>
  if (p != NULL) {
 80165f0:	693b      	ldr	r3, [r7, #16]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d002      	beq.n	80165fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80165f6:	6938      	ldr	r0, [r7, #16]
 80165f8:	f7fb fcc6 	bl	8011f88 <pbuf_free>
  }

  return ERR_MEM;
 80165fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016600:	4618      	mov	r0, r3
 8016602:	3724      	adds	r7, #36	@ 0x24
 8016604:	46bd      	mov	sp, r7
 8016606:	bd90      	pop	{r4, r7, pc}
 8016608:	08020d04 	.word	0x08020d04
 801660c:	08021098 	.word	0x08021098
 8016610:	08020d58 	.word	0x08020d58
 8016614:	080210bc 	.word	0x080210bc
 8016618:	080210e0 	.word	0x080210e0
 801661c:	080210f0 	.word	0x080210f0
 8016620:	08021100 	.word	0x08021100

08016624 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016624:	b590      	push	{r4, r7, lr}
 8016626:	b085      	sub	sp, #20
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d106      	bne.n	8016640 <tcp_send_fin+0x1c>
 8016632:	4b21      	ldr	r3, [pc, #132]	@ (80166b8 <tcp_send_fin+0x94>)
 8016634:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016638:	4920      	ldr	r1, [pc, #128]	@ (80166bc <tcp_send_fin+0x98>)
 801663a:	4821      	ldr	r0, [pc, #132]	@ (80166c0 <tcp_send_fin+0x9c>)
 801663c:	f006 fea2 	bl	801d384 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016644:	2b00      	cmp	r3, #0
 8016646:	d02e      	beq.n	80166a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801664c:	60fb      	str	r3, [r7, #12]
 801664e:	e002      	b.n	8016656 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d1f8      	bne.n	8016650 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	899b      	ldrh	r3, [r3, #12]
 8016664:	b29b      	uxth	r3, r3
 8016666:	4618      	mov	r0, r3
 8016668:	f7f9 ffd8 	bl	801061c <lwip_htons>
 801666c:	4603      	mov	r3, r0
 801666e:	b2db      	uxtb	r3, r3
 8016670:	f003 0307 	and.w	r3, r3, #7
 8016674:	2b00      	cmp	r3, #0
 8016676:	d116      	bne.n	80166a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	899b      	ldrh	r3, [r3, #12]
 801667e:	b29c      	uxth	r4, r3
 8016680:	2001      	movs	r0, #1
 8016682:	f7f9 ffcb 	bl	801061c <lwip_htons>
 8016686:	4603      	mov	r3, r0
 8016688:	461a      	mov	r2, r3
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	68db      	ldr	r3, [r3, #12]
 801668e:	4322      	orrs	r2, r4
 8016690:	b292      	uxth	r2, r2
 8016692:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	8b5b      	ldrh	r3, [r3, #26]
 8016698:	f043 0320 	orr.w	r3, r3, #32
 801669c:	b29a      	uxth	r2, r3
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80166a2:	2300      	movs	r3, #0
 80166a4:	e004      	b.n	80166b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80166a6:	2101      	movs	r1, #1
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f000 f80b 	bl	80166c4 <tcp_enqueue_flags>
 80166ae:	4603      	mov	r3, r0
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3714      	adds	r7, #20
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd90      	pop	{r4, r7, pc}
 80166b8:	08020d04 	.word	0x08020d04
 80166bc:	0802110c 	.word	0x0802110c
 80166c0:	08020d58 	.word	0x08020d58

080166c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b08a      	sub	sp, #40	@ 0x28
 80166c8:	af02      	add	r7, sp, #8
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	460b      	mov	r3, r1
 80166ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80166d4:	2300      	movs	r3, #0
 80166d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80166d8:	78fb      	ldrb	r3, [r7, #3]
 80166da:	f003 0303 	and.w	r3, r3, #3
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d106      	bne.n	80166f0 <tcp_enqueue_flags+0x2c>
 80166e2:	4b67      	ldr	r3, [pc, #412]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 80166e4:	f240 4211 	movw	r2, #1041	@ 0x411
 80166e8:	4966      	ldr	r1, [pc, #408]	@ (8016884 <tcp_enqueue_flags+0x1c0>)
 80166ea:	4867      	ldr	r0, [pc, #412]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 80166ec:	f006 fe4a 	bl	801d384 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d106      	bne.n	8016704 <tcp_enqueue_flags+0x40>
 80166f6:	4b62      	ldr	r3, [pc, #392]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 80166f8:	f240 4213 	movw	r2, #1043	@ 0x413
 80166fc:	4963      	ldr	r1, [pc, #396]	@ (801688c <tcp_enqueue_flags+0x1c8>)
 80166fe:	4862      	ldr	r0, [pc, #392]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 8016700:	f006 fe40 	bl	801d384 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016704:	78fb      	ldrb	r3, [r7, #3]
 8016706:	f003 0302 	and.w	r3, r3, #2
 801670a:	2b00      	cmp	r3, #0
 801670c:	d001      	beq.n	8016712 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801670e:	2301      	movs	r3, #1
 8016710:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016712:	7ffb      	ldrb	r3, [r7, #31]
 8016714:	009b      	lsls	r3, r3, #2
 8016716:	b2db      	uxtb	r3, r3
 8016718:	f003 0304 	and.w	r3, r3, #4
 801671c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801671e:	7dfb      	ldrb	r3, [r7, #23]
 8016720:	b29b      	uxth	r3, r3
 8016722:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016726:	4619      	mov	r1, r3
 8016728:	2036      	movs	r0, #54	@ 0x36
 801672a:	f7fb f949 	bl	80119c0 <pbuf_alloc>
 801672e:	6138      	str	r0, [r7, #16]
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d109      	bne.n	801674a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	8b5b      	ldrh	r3, [r3, #26]
 801673a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801673e:	b29a      	uxth	r2, r3
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016744:	f04f 33ff 	mov.w	r3, #4294967295
 8016748:	e095      	b.n	8016876 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	895a      	ldrh	r2, [r3, #10]
 801674e:	7dfb      	ldrb	r3, [r7, #23]
 8016750:	b29b      	uxth	r3, r3
 8016752:	429a      	cmp	r2, r3
 8016754:	d206      	bcs.n	8016764 <tcp_enqueue_flags+0xa0>
 8016756:	4b4a      	ldr	r3, [pc, #296]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 8016758:	f240 4239 	movw	r2, #1081	@ 0x439
 801675c:	494c      	ldr	r1, [pc, #304]	@ (8016890 <tcp_enqueue_flags+0x1cc>)
 801675e:	484a      	ldr	r0, [pc, #296]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 8016760:	f006 fe10 	bl	801d384 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016768:	78fa      	ldrb	r2, [r7, #3]
 801676a:	7ffb      	ldrb	r3, [r7, #31]
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	460b      	mov	r3, r1
 8016770:	6939      	ldr	r1, [r7, #16]
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f7ff fd72 	bl	801625c <tcp_create_segment>
 8016778:	60f8      	str	r0, [r7, #12]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d109      	bne.n	8016794 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	8b5b      	ldrh	r3, [r3, #26]
 8016784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016788:	b29a      	uxth	r2, r3
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801678e:	f04f 33ff 	mov.w	r3, #4294967295
 8016792:	e070      	b.n	8016876 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	68db      	ldr	r3, [r3, #12]
 8016798:	f003 0303 	and.w	r3, r3, #3
 801679c:	2b00      	cmp	r3, #0
 801679e:	d006      	beq.n	80167ae <tcp_enqueue_flags+0xea>
 80167a0:	4b37      	ldr	r3, [pc, #220]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 80167a2:	f240 4242 	movw	r2, #1090	@ 0x442
 80167a6:	493b      	ldr	r1, [pc, #236]	@ (8016894 <tcp_enqueue_flags+0x1d0>)
 80167a8:	4837      	ldr	r0, [pc, #220]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 80167aa:	f006 fdeb 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	891b      	ldrh	r3, [r3, #8]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d006      	beq.n	80167c4 <tcp_enqueue_flags+0x100>
 80167b6:	4b32      	ldr	r3, [pc, #200]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 80167b8:	f240 4243 	movw	r2, #1091	@ 0x443
 80167bc:	4936      	ldr	r1, [pc, #216]	@ (8016898 <tcp_enqueue_flags+0x1d4>)
 80167be:	4832      	ldr	r0, [pc, #200]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 80167c0:	f006 fde0 	bl	801d384 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d103      	bne.n	80167d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	68fa      	ldr	r2, [r7, #12]
 80167d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80167d2:	e00d      	b.n	80167f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167d8:	61bb      	str	r3, [r7, #24]
 80167da:	e002      	b.n	80167e2 <tcp_enqueue_flags+0x11e>
 80167dc:	69bb      	ldr	r3, [r7, #24]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	61bb      	str	r3, [r7, #24]
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1f8      	bne.n	80167dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	68fa      	ldr	r2, [r7, #12]
 80167ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2200      	movs	r2, #0
 80167f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80167f8:	78fb      	ldrb	r3, [r7, #3]
 80167fa:	f003 0302 	and.w	r3, r3, #2
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d104      	bne.n	801680c <tcp_enqueue_flags+0x148>
 8016802:	78fb      	ldrb	r3, [r7, #3]
 8016804:	f003 0301 	and.w	r3, r3, #1
 8016808:	2b00      	cmp	r3, #0
 801680a:	d004      	beq.n	8016816 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016810:	1c5a      	adds	r2, r3, #1
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016816:	78fb      	ldrb	r3, [r7, #3]
 8016818:	f003 0301 	and.w	r3, r3, #1
 801681c:	2b00      	cmp	r3, #0
 801681e:	d006      	beq.n	801682e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8b5b      	ldrh	r3, [r3, #26]
 8016824:	f043 0320 	orr.w	r3, r3, #32
 8016828:	b29a      	uxth	r2, r3
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	4618      	mov	r0, r3
 8016834:	f7fb fc36 	bl	80120a4 <pbuf_clen>
 8016838:	4603      	mov	r3, r0
 801683a:	461a      	mov	r2, r3
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016842:	4413      	add	r3, r2
 8016844:	b29a      	uxth	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00e      	beq.n	8016874 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801685a:	2b00      	cmp	r3, #0
 801685c:	d10a      	bne.n	8016874 <tcp_enqueue_flags+0x1b0>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016862:	2b00      	cmp	r3, #0
 8016864:	d106      	bne.n	8016874 <tcp_enqueue_flags+0x1b0>
 8016866:	4b06      	ldr	r3, [pc, #24]	@ (8016880 <tcp_enqueue_flags+0x1bc>)
 8016868:	f240 4265 	movw	r2, #1125	@ 0x465
 801686c:	490b      	ldr	r1, [pc, #44]	@ (801689c <tcp_enqueue_flags+0x1d8>)
 801686e:	4806      	ldr	r0, [pc, #24]	@ (8016888 <tcp_enqueue_flags+0x1c4>)
 8016870:	f006 fd88 	bl	801d384 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016874:	2300      	movs	r3, #0
}
 8016876:	4618      	mov	r0, r3
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	08020d04 	.word	0x08020d04
 8016884:	08021128 	.word	0x08021128
 8016888:	08020d58 	.word	0x08020d58
 801688c:	08021180 	.word	0x08021180
 8016890:	080211a0 	.word	0x080211a0
 8016894:	080211dc 	.word	0x080211dc
 8016898:	080211f4 	.word	0x080211f4
 801689c:	08021220 	.word	0x08021220

080168a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80168a0:	b5b0      	push	{r4, r5, r7, lr}
 80168a2:	b08a      	sub	sp, #40	@ 0x28
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d106      	bne.n	80168bc <tcp_output+0x1c>
 80168ae:	4b8a      	ldr	r3, [pc, #552]	@ (8016ad8 <tcp_output+0x238>)
 80168b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80168b4:	4989      	ldr	r1, [pc, #548]	@ (8016adc <tcp_output+0x23c>)
 80168b6:	488a      	ldr	r0, [pc, #552]	@ (8016ae0 <tcp_output+0x240>)
 80168b8:	f006 fd64 	bl	801d384 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	7d1b      	ldrb	r3, [r3, #20]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d106      	bne.n	80168d2 <tcp_output+0x32>
 80168c4:	4b84      	ldr	r3, [pc, #528]	@ (8016ad8 <tcp_output+0x238>)
 80168c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80168ca:	4986      	ldr	r1, [pc, #536]	@ (8016ae4 <tcp_output+0x244>)
 80168cc:	4884      	ldr	r0, [pc, #528]	@ (8016ae0 <tcp_output+0x240>)
 80168ce:	f006 fd59 	bl	801d384 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80168d2:	4b85      	ldr	r3, [pc, #532]	@ (8016ae8 <tcp_output+0x248>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	687a      	ldr	r2, [r7, #4]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d101      	bne.n	80168e0 <tcp_output+0x40>
    return ERR_OK;
 80168dc:	2300      	movs	r3, #0
 80168de:	e1ce      	b.n	8016c7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80168ec:	4293      	cmp	r3, r2
 80168ee:	bf28      	it	cs
 80168f0:	4613      	movcs	r3, r2
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80168fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d10b      	bne.n	801691a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	8b5b      	ldrh	r3, [r3, #26]
 8016906:	f003 0302 	and.w	r3, r3, #2
 801690a:	2b00      	cmp	r3, #0
 801690c:	f000 81aa 	beq.w	8016c64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f000 fdcb 	bl	80174ac <tcp_send_empty_ack>
 8016916:	4603      	mov	r3, r0
 8016918:	e1b1      	b.n	8016c7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801691a:	6879      	ldr	r1, [r7, #4]
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	3304      	adds	r3, #4
 8016920:	461a      	mov	r2, r3
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f7ff fc7e 	bl	8016224 <tcp_route>
 8016928:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d102      	bne.n	8016936 <tcp_output+0x96>
    return ERR_RTE;
 8016930:	f06f 0303 	mvn.w	r3, #3
 8016934:	e1a3      	b.n	8016c7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d003      	beq.n	8016944 <tcp_output+0xa4>
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d111      	bne.n	8016968 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016944:	697b      	ldr	r3, [r7, #20]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d002      	beq.n	8016950 <tcp_output+0xb0>
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	3304      	adds	r3, #4
 801694e:	e000      	b.n	8016952 <tcp_output+0xb2>
 8016950:	2300      	movs	r3, #0
 8016952:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016954:	693b      	ldr	r3, [r7, #16]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d102      	bne.n	8016960 <tcp_output+0xc0>
      return ERR_RTE;
 801695a:	f06f 0303 	mvn.w	r3, #3
 801695e:	e18e      	b.n	8016c7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801696a:	68db      	ldr	r3, [r3, #12]
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	4618      	mov	r0, r3
 8016970:	f7f9 fe69 	bl	8010646 <lwip_htonl>
 8016974:	4602      	mov	r2, r0
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801697a:	1ad3      	subs	r3, r2, r3
 801697c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801697e:	8912      	ldrh	r2, [r2, #8]
 8016980:	4413      	add	r3, r2
 8016982:	69ba      	ldr	r2, [r7, #24]
 8016984:	429a      	cmp	r2, r3
 8016986:	d227      	bcs.n	80169d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801698e:	461a      	mov	r2, r3
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	4293      	cmp	r3, r2
 8016994:	d114      	bne.n	80169c0 <tcp_output+0x120>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801699a:	2b00      	cmp	r3, #0
 801699c:	d110      	bne.n	80169c0 <tcp_output+0x120>
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d10b      	bne.n	80169c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2200      	movs	r2, #0
 80169ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2201      	movs	r2, #1
 80169b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2200      	movs	r2, #0
 80169bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	8b5b      	ldrh	r3, [r3, #26]
 80169c4:	f003 0302 	and.w	r3, r3, #2
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f000 814d 	beq.w	8016c68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 fd6c 	bl	80174ac <tcp_send_empty_ack>
 80169d4:	4603      	mov	r3, r0
 80169d6:	e152      	b.n	8016c7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2200      	movs	r2, #0
 80169dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80169e6:	6a3b      	ldr	r3, [r7, #32]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	f000 811c 	beq.w	8016c26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80169ee:	e002      	b.n	80169f6 <tcp_output+0x156>
 80169f0:	6a3b      	ldr	r3, [r7, #32]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	623b      	str	r3, [r7, #32]
 80169f6:	6a3b      	ldr	r3, [r7, #32]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d1f8      	bne.n	80169f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80169fe:	e112      	b.n	8016c26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a02:	68db      	ldr	r3, [r3, #12]
 8016a04:	899b      	ldrh	r3, [r3, #12]
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7f9 fe07 	bl	801061c <lwip_htons>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	f003 0304 	and.w	r3, r3, #4
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d006      	beq.n	8016a28 <tcp_output+0x188>
 8016a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8016ad8 <tcp_output+0x238>)
 8016a1c:	f240 5236 	movw	r2, #1334	@ 0x536
 8016a20:	4932      	ldr	r1, [pc, #200]	@ (8016aec <tcp_output+0x24c>)
 8016a22:	482f      	ldr	r0, [pc, #188]	@ (8016ae0 <tcp_output+0x240>)
 8016a24:	f006 fcae 	bl	801d384 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d01f      	beq.n	8016a70 <tcp_output+0x1d0>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	8b5b      	ldrh	r3, [r3, #26]
 8016a34:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d119      	bne.n	8016a70 <tcp_output+0x1d0>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00b      	beq.n	8016a5c <tcp_output+0x1bc>
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d110      	bne.n	8016a70 <tcp_output+0x1d0>
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a52:	891a      	ldrh	r2, [r3, #8]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d209      	bcs.n	8016a70 <tcp_output+0x1d0>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d004      	beq.n	8016a70 <tcp_output+0x1d0>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016a6c:	2b08      	cmp	r3, #8
 8016a6e:	d901      	bls.n	8016a74 <tcp_output+0x1d4>
 8016a70:	2301      	movs	r3, #1
 8016a72:	e000      	b.n	8016a76 <tcp_output+0x1d6>
 8016a74:	2300      	movs	r3, #0
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d106      	bne.n	8016a88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	8b5b      	ldrh	r3, [r3, #26]
 8016a7e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	f000 80e4 	beq.w	8016c50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	7d1b      	ldrb	r3, [r3, #20]
 8016a8c:	2b02      	cmp	r3, #2
 8016a8e:	d00d      	beq.n	8016aac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	899b      	ldrh	r3, [r3, #12]
 8016a96:	b29c      	uxth	r4, r3
 8016a98:	2010      	movs	r0, #16
 8016a9a:	f7f9 fdbf 	bl	801061c <lwip_htons>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	4322      	orrs	r2, r4
 8016aa8:	b292      	uxth	r2, r2
 8016aaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016aac:	697a      	ldr	r2, [r7, #20]
 8016aae:	6879      	ldr	r1, [r7, #4]
 8016ab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ab2:	f000 f909 	bl	8016cc8 <tcp_output_segment>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d016      	beq.n	8016af0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	8b5b      	ldrh	r3, [r3, #26]
 8016ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016aca:	b29a      	uxth	r2, r3
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	835a      	strh	r2, [r3, #26]
      return err;
 8016ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ad4:	e0d3      	b.n	8016c7e <tcp_output+0x3de>
 8016ad6:	bf00      	nop
 8016ad8:	08020d04 	.word	0x08020d04
 8016adc:	08021248 	.word	0x08021248
 8016ae0:	08020d58 	.word	0x08020d58
 8016ae4:	08021260 	.word	0x08021260
 8016ae8:	2400cc80 	.word	0x2400cc80
 8016aec:	08021288 	.word	0x08021288
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	7d1b      	ldrb	r3, [r3, #20]
 8016afc:	2b02      	cmp	r3, #2
 8016afe:	d006      	beq.n	8016b0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	8b5b      	ldrh	r3, [r3, #26]
 8016b04:	f023 0303 	bic.w	r3, r3, #3
 8016b08:	b29a      	uxth	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b10:	68db      	ldr	r3, [r3, #12]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7f9 fd96 	bl	8010646 <lwip_htonl>
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b1e:	891b      	ldrh	r3, [r3, #8]
 8016b20:	461d      	mov	r5, r3
 8016b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b24:	68db      	ldr	r3, [r3, #12]
 8016b26:	899b      	ldrh	r3, [r3, #12]
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7f9 fd76 	bl	801061c <lwip_htons>
 8016b30:	4603      	mov	r3, r0
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	f003 0303 	and.w	r3, r3, #3
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d001      	beq.n	8016b40 <tcp_output+0x2a0>
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	e000      	b.n	8016b42 <tcp_output+0x2a2>
 8016b40:	2300      	movs	r3, #0
 8016b42:	442b      	add	r3, r5
 8016b44:	4423      	add	r3, r4
 8016b46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	da02      	bge.n	8016b5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	68ba      	ldr	r2, [r7, #8]
 8016b58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5c:	891b      	ldrh	r3, [r3, #8]
 8016b5e:	461c      	mov	r4, r3
 8016b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b62:	68db      	ldr	r3, [r3, #12]
 8016b64:	899b      	ldrh	r3, [r3, #12]
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7f9 fd57 	bl	801061c <lwip_htons>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	f003 0303 	and.w	r3, r3, #3
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d001      	beq.n	8016b7e <tcp_output+0x2de>
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	e000      	b.n	8016b80 <tcp_output+0x2e0>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4423      	add	r3, r4
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d049      	beq.n	8016c1a <tcp_output+0x37a>
      seg->next = NULL;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b88:	2200      	movs	r2, #0
 8016b8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d105      	bne.n	8016ba0 <tcp_output+0x300>
        pcb->unacked = seg;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b98:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b9c:	623b      	str	r3, [r7, #32]
 8016b9e:	e03f      	b.n	8016c20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba2:	68db      	ldr	r3, [r3, #12]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7f9 fd4d 	bl	8010646 <lwip_htonl>
 8016bac:	4604      	mov	r4, r0
 8016bae:	6a3b      	ldr	r3, [r7, #32]
 8016bb0:	68db      	ldr	r3, [r3, #12]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f9 fd46 	bl	8010646 <lwip_htonl>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	1ae3      	subs	r3, r4, r3
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	da24      	bge.n	8016c0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	3370      	adds	r3, #112	@ 0x70
 8016bc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016bc8:	e002      	b.n	8016bd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d011      	beq.n	8016bfc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	68db      	ldr	r3, [r3, #12]
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	4618      	mov	r0, r3
 8016be2:	f7f9 fd30 	bl	8010646 <lwip_htonl>
 8016be6:	4604      	mov	r4, r0
 8016be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bea:	68db      	ldr	r3, [r3, #12]
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7f9 fd29 	bl	8010646 <lwip_htonl>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	dbe6      	blt.n	8016bca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	681a      	ldr	r2, [r3, #0]
 8016c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c08:	601a      	str	r2, [r3, #0]
 8016c0a:	e009      	b.n	8016c20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016c0c:	6a3b      	ldr	r3, [r7, #32]
 8016c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	623b      	str	r3, [r7, #32]
 8016c18:	e002      	b.n	8016c20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016c1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c1c:	f7fc fc45 	bl	80134aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d012      	beq.n	8016c52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7f9 fd07 	bl	8010646 <lwip_htonl>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c3e:	1ad3      	subs	r3, r2, r3
 8016c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c42:	8912      	ldrh	r2, [r2, #8]
 8016c44:	4413      	add	r3, r2
  while (seg != NULL &&
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	f4bf aed9 	bcs.w	8016a00 <tcp_output+0x160>
 8016c4e:	e000      	b.n	8016c52 <tcp_output+0x3b2>
      break;
 8016c50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d108      	bne.n	8016c6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016c62:	e004      	b.n	8016c6e <tcp_output+0x3ce>
    goto output_done;
 8016c64:	bf00      	nop
 8016c66:	e002      	b.n	8016c6e <tcp_output+0x3ce>
    goto output_done;
 8016c68:	bf00      	nop
 8016c6a:	e000      	b.n	8016c6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016c6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	8b5b      	ldrh	r3, [r3, #26]
 8016c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016c76:	b29a      	uxth	r2, r3
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016c7c:	2300      	movs	r3, #0
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3728      	adds	r7, #40	@ 0x28
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bdb0      	pop	{r4, r5, r7, pc}
 8016c86:	bf00      	nop

08016c88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d106      	bne.n	8016ca4 <tcp_output_segment_busy+0x1c>
 8016c96:	4b09      	ldr	r3, [pc, #36]	@ (8016cbc <tcp_output_segment_busy+0x34>)
 8016c98:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016c9c:	4908      	ldr	r1, [pc, #32]	@ (8016cc0 <tcp_output_segment_busy+0x38>)
 8016c9e:	4809      	ldr	r0, [pc, #36]	@ (8016cc4 <tcp_output_segment_busy+0x3c>)
 8016ca0:	f006 fb70 	bl	801d384 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	7b9b      	ldrb	r3, [r3, #14]
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d001      	beq.n	8016cb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016cae:	2301      	movs	r3, #1
 8016cb0:	e000      	b.n	8016cb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016cb2:	2300      	movs	r3, #0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	08020d04 	.word	0x08020d04
 8016cc0:	080212a0 	.word	0x080212a0
 8016cc4:	08020d58 	.word	0x08020d58

08016cc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016cc8:	b5b0      	push	{r4, r5, r7, lr}
 8016cca:	b08c      	sub	sp, #48	@ 0x30
 8016ccc:	af04      	add	r7, sp, #16
 8016cce:	60f8      	str	r0, [r7, #12]
 8016cd0:	60b9      	str	r1, [r7, #8]
 8016cd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d106      	bne.n	8016ce8 <tcp_output_segment+0x20>
 8016cda:	4b64      	ldr	r3, [pc, #400]	@ (8016e6c <tcp_output_segment+0x1a4>)
 8016cdc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016ce0:	4963      	ldr	r1, [pc, #396]	@ (8016e70 <tcp_output_segment+0x1a8>)
 8016ce2:	4864      	ldr	r0, [pc, #400]	@ (8016e74 <tcp_output_segment+0x1ac>)
 8016ce4:	f006 fb4e 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d106      	bne.n	8016cfc <tcp_output_segment+0x34>
 8016cee:	4b5f      	ldr	r3, [pc, #380]	@ (8016e6c <tcp_output_segment+0x1a4>)
 8016cf0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016cf4:	4960      	ldr	r1, [pc, #384]	@ (8016e78 <tcp_output_segment+0x1b0>)
 8016cf6:	485f      	ldr	r0, [pc, #380]	@ (8016e74 <tcp_output_segment+0x1ac>)
 8016cf8:	f006 fb44 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d106      	bne.n	8016d10 <tcp_output_segment+0x48>
 8016d02:	4b5a      	ldr	r3, [pc, #360]	@ (8016e6c <tcp_output_segment+0x1a4>)
 8016d04:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016d08:	495c      	ldr	r1, [pc, #368]	@ (8016e7c <tcp_output_segment+0x1b4>)
 8016d0a:	485a      	ldr	r0, [pc, #360]	@ (8016e74 <tcp_output_segment+0x1ac>)
 8016d0c:	f006 fb3a 	bl	801d384 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016d10:	68f8      	ldr	r0, [r7, #12]
 8016d12:	f7ff ffb9 	bl	8016c88 <tcp_output_segment_busy>
 8016d16:	4603      	mov	r3, r0
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d001      	beq.n	8016d20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	e0a1      	b.n	8016e64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	68dc      	ldr	r4, [r3, #12]
 8016d28:	4610      	mov	r0, r2
 8016d2a:	f7f9 fc8c 	bl	8010646 <lwip_htonl>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	68dc      	ldr	r4, [r3, #12]
 8016d3a:	4610      	mov	r0, r2
 8016d3c:	f7f9 fc6e 	bl	801061c <lwip_htons>
 8016d40:	4603      	mov	r3, r0
 8016d42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016d44:	68bb      	ldr	r3, [r7, #8]
 8016d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d48:	68ba      	ldr	r2, [r7, #8]
 8016d4a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016d4c:	441a      	add	r2, r3
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	3314      	adds	r3, #20
 8016d58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	7a9b      	ldrb	r3, [r3, #10]
 8016d5e:	f003 0301 	and.w	r3, r3, #1
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d015      	beq.n	8016d92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	3304      	adds	r3, #4
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	6879      	ldr	r1, [r7, #4]
 8016d6e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8016d72:	f7fc fe91 	bl	8013a98 <tcp_eff_send_mss_netif>
 8016d76:	4603      	mov	r3, r0
 8016d78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016d7a:	8b7b      	ldrh	r3, [r7, #26]
 8016d7c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7f9 fc60 	bl	8010646 <lwip_htonl>
 8016d86:	4602      	mov	r2, r0
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	3304      	adds	r3, #4
 8016d90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	da02      	bge.n	8016da2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	2200      	movs	r2, #0
 8016da0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d10c      	bne.n	8016dc4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016daa:	4b35      	ldr	r3, [pc, #212]	@ (8016e80 <tcp_output_segment+0x1b8>)
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	68db      	ldr	r3, [r3, #12]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7f9 fc44 	bl	8010646 <lwip_htonl>
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	68da      	ldr	r2, [r3, #12]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	685b      	ldr	r3, [r3, #4]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	1ad3      	subs	r3, r2, r3
 8016dd0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	8959      	ldrh	r1, [r3, #10]
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	8b3a      	ldrh	r2, [r7, #24]
 8016dde:	1a8a      	subs	r2, r1, r2
 8016de0:	b292      	uxth	r2, r2
 8016de2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	8919      	ldrh	r1, [r3, #8]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	8b3a      	ldrh	r2, [r7, #24]
 8016df0:	1a8a      	subs	r2, r1, r2
 8016df2:	b292      	uxth	r2, r2
 8016df4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	68fa      	ldr	r2, [r7, #12]
 8016dfc:	68d2      	ldr	r2, [r2, #12]
 8016dfe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	2200      	movs	r2, #0
 8016e06:	741a      	strb	r2, [r3, #16]
 8016e08:	2200      	movs	r2, #0
 8016e0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	68da      	ldr	r2, [r3, #12]
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	7a9b      	ldrb	r3, [r3, #10]
 8016e14:	f003 0301 	and.w	r3, r3, #1
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d001      	beq.n	8016e20 <tcp_output_segment+0x158>
 8016e1c:	2318      	movs	r3, #24
 8016e1e:	e000      	b.n	8016e22 <tcp_output_segment+0x15a>
 8016e20:	2314      	movs	r3, #20
 8016e22:	4413      	add	r3, r2
 8016e24:	69fa      	ldr	r2, [r7, #28]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d006      	beq.n	8016e38 <tcp_output_segment+0x170>
 8016e2a:	4b10      	ldr	r3, [pc, #64]	@ (8016e6c <tcp_output_segment+0x1a4>)
 8016e2c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016e30:	4914      	ldr	r1, [pc, #80]	@ (8016e84 <tcp_output_segment+0x1bc>)
 8016e32:	4810      	ldr	r0, [pc, #64]	@ (8016e74 <tcp_output_segment+0x1ac>)
 8016e34:	f006 faa6 	bl	801d384 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	6858      	ldr	r0, [r3, #4]
 8016e3c:	68b9      	ldr	r1, [r7, #8]
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	1d1c      	adds	r4, r3, #4
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	7add      	ldrb	r5, [r3, #11]
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	7a9b      	ldrb	r3, [r3, #10]
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	9202      	str	r2, [sp, #8]
 8016e4e:	2206      	movs	r2, #6
 8016e50:	9201      	str	r2, [sp, #4]
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	462b      	mov	r3, r5
 8016e56:	4622      	mov	r2, r4
 8016e58:	f004 fc3c 	bl	801b6d4 <ip4_output_if>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3720      	adds	r7, #32
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e6c:	08020d04 	.word	0x08020d04
 8016e70:	080212c8 	.word	0x080212c8
 8016e74:	08020d58 	.word	0x08020d58
 8016e78:	080212e8 	.word	0x080212e8
 8016e7c:	08021308 	.word	0x08021308
 8016e80:	2400cc34 	.word	0x2400cc34
 8016e84:	0802132c 	.word	0x0802132c

08016e88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016e88:	b5b0      	push	{r4, r5, r7, lr}
 8016e8a:	b084      	sub	sp, #16
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d106      	bne.n	8016ea4 <tcp_rexmit_rto_prepare+0x1c>
 8016e96:	4b31      	ldr	r3, [pc, #196]	@ (8016f5c <tcp_rexmit_rto_prepare+0xd4>)
 8016e98:	f240 6263 	movw	r2, #1635	@ 0x663
 8016e9c:	4930      	ldr	r1, [pc, #192]	@ (8016f60 <tcp_rexmit_rto_prepare+0xd8>)
 8016e9e:	4831      	ldr	r0, [pc, #196]	@ (8016f64 <tcp_rexmit_rto_prepare+0xdc>)
 8016ea0:	f006 fa70 	bl	801d384 <iprintf>

  if (pcb->unacked == NULL) {
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d102      	bne.n	8016eb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016eac:	f06f 0305 	mvn.w	r3, #5
 8016eb0:	e050      	b.n	8016f54 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016eb6:	60fb      	str	r3, [r7, #12]
 8016eb8:	e00b      	b.n	8016ed2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016eba:	68f8      	ldr	r0, [r7, #12]
 8016ebc:	f7ff fee4 	bl	8016c88 <tcp_output_segment_busy>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d002      	beq.n	8016ecc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016ec6:	f06f 0305 	mvn.w	r3, #5
 8016eca:	e043      	b.n	8016f54 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	60fb      	str	r3, [r7, #12]
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d1ef      	bne.n	8016eba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016eda:	68f8      	ldr	r0, [r7, #12]
 8016edc:	f7ff fed4 	bl	8016c88 <tcp_output_segment_busy>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d002      	beq.n	8016eec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016ee6:	f06f 0305 	mvn.w	r3, #5
 8016eea:	e033      	b.n	8016f54 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2200      	movs	r2, #0
 8016f00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	8b5b      	ldrh	r3, [r3, #26]
 8016f06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7f9 fb95 	bl	8010646 <lwip_htonl>
 8016f1c:	4604      	mov	r4, r0
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	891b      	ldrh	r3, [r3, #8]
 8016f22:	461d      	mov	r5, r3
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	68db      	ldr	r3, [r3, #12]
 8016f28:	899b      	ldrh	r3, [r3, #12]
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7f9 fb75 	bl	801061c <lwip_htons>
 8016f32:	4603      	mov	r3, r0
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	f003 0303 	and.w	r3, r3, #3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d001      	beq.n	8016f42 <tcp_rexmit_rto_prepare+0xba>
 8016f3e:	2301      	movs	r3, #1
 8016f40:	e000      	b.n	8016f44 <tcp_rexmit_rto_prepare+0xbc>
 8016f42:	2300      	movs	r3, #0
 8016f44:	442b      	add	r3, r5
 8016f46:	18e2      	adds	r2, r4, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016f52:	2300      	movs	r3, #0
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3710      	adds	r7, #16
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8016f5c:	08020d04 	.word	0x08020d04
 8016f60:	08021340 	.word	0x08021340
 8016f64:	08020d58 	.word	0x08020d58

08016f68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b082      	sub	sp, #8
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d106      	bne.n	8016f84 <tcp_rexmit_rto_commit+0x1c>
 8016f76:	4b0d      	ldr	r3, [pc, #52]	@ (8016fac <tcp_rexmit_rto_commit+0x44>)
 8016f78:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016f7c:	490c      	ldr	r1, [pc, #48]	@ (8016fb0 <tcp_rexmit_rto_commit+0x48>)
 8016f7e:	480d      	ldr	r0, [pc, #52]	@ (8016fb4 <tcp_rexmit_rto_commit+0x4c>)
 8016f80:	f006 fa00 	bl	801d384 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f8a:	2bff      	cmp	r3, #255	@ 0xff
 8016f8c:	d007      	beq.n	8016f9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f94:	3301      	adds	r3, #1
 8016f96:	b2da      	uxtb	r2, r3
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f7ff fc7e 	bl	80168a0 <tcp_output>
}
 8016fa4:	bf00      	nop
 8016fa6:	3708      	adds	r7, #8
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}
 8016fac:	08020d04 	.word	0x08020d04
 8016fb0:	08021364 	.word	0x08021364
 8016fb4:	08020d58 	.word	0x08020d58

08016fb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b082      	sub	sp, #8
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d106      	bne.n	8016fd4 <tcp_rexmit_rto+0x1c>
 8016fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8016ff0 <tcp_rexmit_rto+0x38>)
 8016fc8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8016fcc:	4909      	ldr	r1, [pc, #36]	@ (8016ff4 <tcp_rexmit_rto+0x3c>)
 8016fce:	480a      	ldr	r0, [pc, #40]	@ (8016ff8 <tcp_rexmit_rto+0x40>)
 8016fd0:	f006 f9d8 	bl	801d384 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f7ff ff57 	bl	8016e88 <tcp_rexmit_rto_prepare>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d102      	bne.n	8016fe6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7ff ffc1 	bl	8016f68 <tcp_rexmit_rto_commit>
  }
}
 8016fe6:	bf00      	nop
 8016fe8:	3708      	adds	r7, #8
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	08020d04 	.word	0x08020d04
 8016ff4:	08021388 	.word	0x08021388
 8016ff8:	08020d58 	.word	0x08020d58

08016ffc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016ffc:	b590      	push	{r4, r7, lr}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d106      	bne.n	8017018 <tcp_rexmit+0x1c>
 801700a:	4b2f      	ldr	r3, [pc, #188]	@ (80170c8 <tcp_rexmit+0xcc>)
 801700c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017010:	492e      	ldr	r1, [pc, #184]	@ (80170cc <tcp_rexmit+0xd0>)
 8017012:	482f      	ldr	r0, [pc, #188]	@ (80170d0 <tcp_rexmit+0xd4>)
 8017014:	f006 f9b6 	bl	801d384 <iprintf>

  if (pcb->unacked == NULL) {
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801701c:	2b00      	cmp	r3, #0
 801701e:	d102      	bne.n	8017026 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017020:	f06f 0305 	mvn.w	r3, #5
 8017024:	e04c      	b.n	80170c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801702a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801702c:	68b8      	ldr	r0, [r7, #8]
 801702e:	f7ff fe2b 	bl	8016c88 <tcp_output_segment_busy>
 8017032:	4603      	mov	r3, r0
 8017034:	2b00      	cmp	r3, #0
 8017036:	d002      	beq.n	801703e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017038:	f06f 0305 	mvn.w	r3, #5
 801703c:	e040      	b.n	80170c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	336c      	adds	r3, #108	@ 0x6c
 801704a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801704c:	e002      	b.n	8017054 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d011      	beq.n	8017080 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	68db      	ldr	r3, [r3, #12]
 8017062:	685b      	ldr	r3, [r3, #4]
 8017064:	4618      	mov	r0, r3
 8017066:	f7f9 faee 	bl	8010646 <lwip_htonl>
 801706a:	4604      	mov	r4, r0
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	4618      	mov	r0, r3
 8017074:	f7f9 fae7 	bl	8010646 <lwip_htonl>
 8017078:	4603      	mov	r3, r0
 801707a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801707c:	2b00      	cmp	r3, #0
 801707e:	dbe6      	blt.n	801704e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	681a      	ldr	r2, [r3, #0]
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	68ba      	ldr	r2, [r7, #8]
 801708c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d103      	bne.n	801709e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2200      	movs	r2, #0
 801709a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80170a4:	2bff      	cmp	r3, #255	@ 0xff
 80170a6:	d007      	beq.n	80170b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80170ae:	3301      	adds	r3, #1
 80170b0:	b2da      	uxtb	r2, r3
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2200      	movs	r2, #0
 80170bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80170be:	2300      	movs	r3, #0
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3714      	adds	r7, #20
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd90      	pop	{r4, r7, pc}
 80170c8:	08020d04 	.word	0x08020d04
 80170cc:	080213a4 	.word	0x080213a4
 80170d0:	08020d58 	.word	0x08020d58

080170d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b082      	sub	sp, #8
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d106      	bne.n	80170f0 <tcp_rexmit_fast+0x1c>
 80170e2:	4b2a      	ldr	r3, [pc, #168]	@ (801718c <tcp_rexmit_fast+0xb8>)
 80170e4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80170e8:	4929      	ldr	r1, [pc, #164]	@ (8017190 <tcp_rexmit_fast+0xbc>)
 80170ea:	482a      	ldr	r0, [pc, #168]	@ (8017194 <tcp_rexmit_fast+0xc0>)
 80170ec:	f006 f94a 	bl	801d384 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d045      	beq.n	8017184 <tcp_rexmit_fast+0xb0>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	8b5b      	ldrh	r3, [r3, #26]
 80170fc:	f003 0304 	and.w	r3, r3, #4
 8017100:	2b00      	cmp	r3, #0
 8017102:	d13f      	bne.n	8017184 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f7ff ff79 	bl	8016ffc <tcp_rexmit>
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d139      	bne.n	8017184 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801711c:	4293      	cmp	r3, r2
 801711e:	bf28      	it	cs
 8017120:	4613      	movcs	r3, r2
 8017122:	b29b      	uxth	r3, r3
 8017124:	2b00      	cmp	r3, #0
 8017126:	da00      	bge.n	801712a <tcp_rexmit_fast+0x56>
 8017128:	3301      	adds	r3, #1
 801712a:	105b      	asrs	r3, r3, #1
 801712c:	b29a      	uxth	r2, r3
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801713a:	461a      	mov	r2, r3
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	429a      	cmp	r2, r3
 8017144:	d206      	bcs.n	8017154 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801714a:	005b      	lsls	r3, r3, #1
 801714c:	b29a      	uxth	r2, r3
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801715e:	4619      	mov	r1, r3
 8017160:	0049      	lsls	r1, r1, #1
 8017162:	440b      	add	r3, r1
 8017164:	b29b      	uxth	r3, r3
 8017166:	4413      	add	r3, r2
 8017168:	b29a      	uxth	r2, r3
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	8b5b      	ldrh	r3, [r3, #26]
 8017174:	f043 0304 	orr.w	r3, r3, #4
 8017178:	b29a      	uxth	r2, r3
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2200      	movs	r2, #0
 8017182:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017184:	bf00      	nop
 8017186:	3708      	adds	r7, #8
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	08020d04 	.word	0x08020d04
 8017190:	080213bc 	.word	0x080213bc
 8017194:	08020d58 	.word	0x08020d58

08017198 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b086      	sub	sp, #24
 801719c:	af00      	add	r7, sp, #0
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	607b      	str	r3, [r7, #4]
 80171a2:	460b      	mov	r3, r1
 80171a4:	817b      	strh	r3, [r7, #10]
 80171a6:	4613      	mov	r3, r2
 80171a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80171aa:	897a      	ldrh	r2, [r7, #10]
 80171ac:	893b      	ldrh	r3, [r7, #8]
 80171ae:	4413      	add	r3, r2
 80171b0:	b29b      	uxth	r3, r3
 80171b2:	3314      	adds	r3, #20
 80171b4:	b29b      	uxth	r3, r3
 80171b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80171ba:	4619      	mov	r1, r3
 80171bc:	2022      	movs	r0, #34	@ 0x22
 80171be:	f7fa fbff 	bl	80119c0 <pbuf_alloc>
 80171c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d04d      	beq.n	8017266 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80171ca:	897b      	ldrh	r3, [r7, #10]
 80171cc:	3313      	adds	r3, #19
 80171ce:	697a      	ldr	r2, [r7, #20]
 80171d0:	8952      	ldrh	r2, [r2, #10]
 80171d2:	4293      	cmp	r3, r2
 80171d4:	db06      	blt.n	80171e4 <tcp_output_alloc_header_common+0x4c>
 80171d6:	4b26      	ldr	r3, [pc, #152]	@ (8017270 <tcp_output_alloc_header_common+0xd8>)
 80171d8:	f240 7223 	movw	r2, #1827	@ 0x723
 80171dc:	4925      	ldr	r1, [pc, #148]	@ (8017274 <tcp_output_alloc_header_common+0xdc>)
 80171de:	4826      	ldr	r0, [pc, #152]	@ (8017278 <tcp_output_alloc_header_common+0xe0>)
 80171e0:	f006 f8d0 	bl	801d384 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80171e4:	697b      	ldr	r3, [r7, #20]
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80171ea:	8c3b      	ldrh	r3, [r7, #32]
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f9 fa15 	bl	801061c <lwip_htons>
 80171f2:	4603      	mov	r3, r0
 80171f4:	461a      	mov	r2, r3
 80171f6:	693b      	ldr	r3, [r7, #16]
 80171f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80171fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7f9 fa0d 	bl	801061c <lwip_htons>
 8017202:	4603      	mov	r3, r0
 8017204:	461a      	mov	r2, r3
 8017206:	693b      	ldr	r3, [r7, #16]
 8017208:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801720a:	693b      	ldr	r3, [r7, #16]
 801720c:	687a      	ldr	r2, [r7, #4]
 801720e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017210:	68f8      	ldr	r0, [r7, #12]
 8017212:	f7f9 fa18 	bl	8010646 <lwip_htonl>
 8017216:	4602      	mov	r2, r0
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801721c:	897b      	ldrh	r3, [r7, #10]
 801721e:	089b      	lsrs	r3, r3, #2
 8017220:	b29b      	uxth	r3, r3
 8017222:	3305      	adds	r3, #5
 8017224:	b29b      	uxth	r3, r3
 8017226:	031b      	lsls	r3, r3, #12
 8017228:	b29a      	uxth	r2, r3
 801722a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801722e:	b29b      	uxth	r3, r3
 8017230:	4313      	orrs	r3, r2
 8017232:	b29b      	uxth	r3, r3
 8017234:	4618      	mov	r0, r3
 8017236:	f7f9 f9f1 	bl	801061c <lwip_htons>
 801723a:	4603      	mov	r3, r0
 801723c:	461a      	mov	r2, r3
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017242:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017244:	4618      	mov	r0, r3
 8017246:	f7f9 f9e9 	bl	801061c <lwip_htons>
 801724a:	4603      	mov	r3, r0
 801724c:	461a      	mov	r2, r3
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	2200      	movs	r2, #0
 8017256:	741a      	strb	r2, [r3, #16]
 8017258:	2200      	movs	r2, #0
 801725a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	2200      	movs	r2, #0
 8017260:	749a      	strb	r2, [r3, #18]
 8017262:	2200      	movs	r2, #0
 8017264:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017266:	697b      	ldr	r3, [r7, #20]
}
 8017268:	4618      	mov	r0, r3
 801726a:	3718      	adds	r7, #24
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	08020d04 	.word	0x08020d04
 8017274:	080213dc 	.word	0x080213dc
 8017278:	08020d58 	.word	0x08020d58

0801727c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801727c:	b5b0      	push	{r4, r5, r7, lr}
 801727e:	b08a      	sub	sp, #40	@ 0x28
 8017280:	af04      	add	r7, sp, #16
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	607b      	str	r3, [r7, #4]
 8017286:	460b      	mov	r3, r1
 8017288:	817b      	strh	r3, [r7, #10]
 801728a:	4613      	mov	r3, r2
 801728c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d106      	bne.n	80172a2 <tcp_output_alloc_header+0x26>
 8017294:	4b15      	ldr	r3, [pc, #84]	@ (80172ec <tcp_output_alloc_header+0x70>)
 8017296:	f240 7242 	movw	r2, #1858	@ 0x742
 801729a:	4915      	ldr	r1, [pc, #84]	@ (80172f0 <tcp_output_alloc_header+0x74>)
 801729c:	4815      	ldr	r0, [pc, #84]	@ (80172f4 <tcp_output_alloc_header+0x78>)
 801729e:	f006 f871 	bl	801d384 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	8adb      	ldrh	r3, [r3, #22]
 80172aa:	68fa      	ldr	r2, [r7, #12]
 80172ac:	8b12      	ldrh	r2, [r2, #24]
 80172ae:	68f9      	ldr	r1, [r7, #12]
 80172b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80172b2:	893d      	ldrh	r5, [r7, #8]
 80172b4:	897c      	ldrh	r4, [r7, #10]
 80172b6:	9103      	str	r1, [sp, #12]
 80172b8:	2110      	movs	r1, #16
 80172ba:	9102      	str	r1, [sp, #8]
 80172bc:	9201      	str	r2, [sp, #4]
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	462a      	mov	r2, r5
 80172c4:	4621      	mov	r1, r4
 80172c6:	f7ff ff67 	bl	8017198 <tcp_output_alloc_header_common>
 80172ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d006      	beq.n	80172e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172d6:	68fa      	ldr	r2, [r7, #12]
 80172d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80172da:	441a      	add	r2, r3
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80172e0:	697b      	ldr	r3, [r7, #20]
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3718      	adds	r7, #24
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bdb0      	pop	{r4, r5, r7, pc}
 80172ea:	bf00      	nop
 80172ec:	08020d04 	.word	0x08020d04
 80172f0:	0802140c 	.word	0x0802140c
 80172f4:	08020d58 	.word	0x08020d58

080172f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b088      	sub	sp, #32
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	4611      	mov	r1, r2
 8017304:	461a      	mov	r2, r3
 8017306:	460b      	mov	r3, r1
 8017308:	71fb      	strb	r3, [r7, #7]
 801730a:	4613      	mov	r3, r2
 801730c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d106      	bne.n	8017326 <tcp_output_fill_options+0x2e>
 8017318:	4b12      	ldr	r3, [pc, #72]	@ (8017364 <tcp_output_fill_options+0x6c>)
 801731a:	f240 7256 	movw	r2, #1878	@ 0x756
 801731e:	4912      	ldr	r1, [pc, #72]	@ (8017368 <tcp_output_fill_options+0x70>)
 8017320:	4812      	ldr	r0, [pc, #72]	@ (801736c <tcp_output_fill_options+0x74>)
 8017322:	f006 f82f 	bl	801d384 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017326:	68bb      	ldr	r3, [r7, #8]
 8017328:	685b      	ldr	r3, [r3, #4]
 801732a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	3314      	adds	r3, #20
 8017330:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017332:	8bfb      	ldrh	r3, [r7, #30]
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	461a      	mov	r2, r3
 8017338:	79fb      	ldrb	r3, [r7, #7]
 801733a:	009b      	lsls	r3, r3, #2
 801733c:	f003 0304 	and.w	r3, r3, #4
 8017340:	4413      	add	r3, r2
 8017342:	3314      	adds	r3, #20
 8017344:	69ba      	ldr	r2, [r7, #24]
 8017346:	4413      	add	r3, r2
 8017348:	697a      	ldr	r2, [r7, #20]
 801734a:	429a      	cmp	r2, r3
 801734c:	d006      	beq.n	801735c <tcp_output_fill_options+0x64>
 801734e:	4b05      	ldr	r3, [pc, #20]	@ (8017364 <tcp_output_fill_options+0x6c>)
 8017350:	f240 7275 	movw	r2, #1909	@ 0x775
 8017354:	4906      	ldr	r1, [pc, #24]	@ (8017370 <tcp_output_fill_options+0x78>)
 8017356:	4805      	ldr	r0, [pc, #20]	@ (801736c <tcp_output_fill_options+0x74>)
 8017358:	f006 f814 	bl	801d384 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801735c:	bf00      	nop
 801735e:	3720      	adds	r7, #32
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	08020d04 	.word	0x08020d04
 8017368:	08021434 	.word	0x08021434
 801736c:	08020d58 	.word	0x08020d58
 8017370:	0802132c 	.word	0x0802132c

08017374 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b08a      	sub	sp, #40	@ 0x28
 8017378:	af04      	add	r7, sp, #16
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	607a      	str	r2, [r7, #4]
 8017380:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d106      	bne.n	8017396 <tcp_output_control_segment+0x22>
 8017388:	4b1c      	ldr	r3, [pc, #112]	@ (80173fc <tcp_output_control_segment+0x88>)
 801738a:	f240 7287 	movw	r2, #1927	@ 0x787
 801738e:	491c      	ldr	r1, [pc, #112]	@ (8017400 <tcp_output_control_segment+0x8c>)
 8017390:	481c      	ldr	r0, [pc, #112]	@ (8017404 <tcp_output_control_segment+0x90>)
 8017392:	f005 fff7 	bl	801d384 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017396:	683a      	ldr	r2, [r7, #0]
 8017398:	6879      	ldr	r1, [r7, #4]
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	f7fe ff42 	bl	8016224 <tcp_route>
 80173a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d102      	bne.n	80173ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80173a8:	23fc      	movs	r3, #252	@ 0xfc
 80173aa:	75fb      	strb	r3, [r7, #23]
 80173ac:	e01c      	b.n	80173e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d006      	beq.n	80173c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	7adb      	ldrb	r3, [r3, #11]
 80173b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	7a9b      	ldrb	r3, [r3, #10]
 80173be:	757b      	strb	r3, [r7, #21]
 80173c0:	e003      	b.n	80173ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80173c2:	23ff      	movs	r3, #255	@ 0xff
 80173c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80173c6:	2300      	movs	r3, #0
 80173c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80173ca:	7dba      	ldrb	r2, [r7, #22]
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	9302      	str	r3, [sp, #8]
 80173d0:	2306      	movs	r3, #6
 80173d2:	9301      	str	r3, [sp, #4]
 80173d4:	7d7b      	ldrb	r3, [r7, #21]
 80173d6:	9300      	str	r3, [sp, #0]
 80173d8:	4613      	mov	r3, r2
 80173da:	683a      	ldr	r2, [r7, #0]
 80173dc:	6879      	ldr	r1, [r7, #4]
 80173de:	68b8      	ldr	r0, [r7, #8]
 80173e0:	f004 f978 	bl	801b6d4 <ip4_output_if>
 80173e4:	4603      	mov	r3, r0
 80173e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80173e8:	68b8      	ldr	r0, [r7, #8]
 80173ea:	f7fa fdcd 	bl	8011f88 <pbuf_free>
  return err;
 80173ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3718      	adds	r7, #24
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	08020d04 	.word	0x08020d04
 8017400:	0802145c 	.word	0x0802145c
 8017404:	08020d58 	.word	0x08020d58

08017408 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017408:	b590      	push	{r4, r7, lr}
 801740a:	b08b      	sub	sp, #44	@ 0x2c
 801740c:	af04      	add	r7, sp, #16
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
 8017414:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d106      	bne.n	801742a <tcp_rst+0x22>
 801741c:	4b1f      	ldr	r3, [pc, #124]	@ (801749c <tcp_rst+0x94>)
 801741e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017422:	491f      	ldr	r1, [pc, #124]	@ (80174a0 <tcp_rst+0x98>)
 8017424:	481f      	ldr	r0, [pc, #124]	@ (80174a4 <tcp_rst+0x9c>)
 8017426:	f005 ffad 	bl	801d384 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801742a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801742c:	2b00      	cmp	r3, #0
 801742e:	d106      	bne.n	801743e <tcp_rst+0x36>
 8017430:	4b1a      	ldr	r3, [pc, #104]	@ (801749c <tcp_rst+0x94>)
 8017432:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017436:	491c      	ldr	r1, [pc, #112]	@ (80174a8 <tcp_rst+0xa0>)
 8017438:	481a      	ldr	r0, [pc, #104]	@ (80174a4 <tcp_rst+0x9c>)
 801743a:	f005 ffa3 	bl	801d384 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801743e:	2300      	movs	r3, #0
 8017440:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017442:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017446:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017448:	7dfb      	ldrb	r3, [r7, #23]
 801744a:	b29c      	uxth	r4, r3
 801744c:	68b8      	ldr	r0, [r7, #8]
 801744e:	f7f9 f8fa 	bl	8010646 <lwip_htonl>
 8017452:	4602      	mov	r2, r0
 8017454:	8abb      	ldrh	r3, [r7, #20]
 8017456:	9303      	str	r3, [sp, #12]
 8017458:	2314      	movs	r3, #20
 801745a:	9302      	str	r3, [sp, #8]
 801745c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801745e:	9301      	str	r3, [sp, #4]
 8017460:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017462:	9300      	str	r3, [sp, #0]
 8017464:	4613      	mov	r3, r2
 8017466:	2200      	movs	r2, #0
 8017468:	4621      	mov	r1, r4
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7ff fe94 	bl	8017198 <tcp_output_alloc_header_common>
 8017470:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017472:	693b      	ldr	r3, [r7, #16]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00c      	beq.n	8017492 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017478:	7dfb      	ldrb	r3, [r7, #23]
 801747a:	2200      	movs	r2, #0
 801747c:	6939      	ldr	r1, [r7, #16]
 801747e:	68f8      	ldr	r0, [r7, #12]
 8017480:	f7ff ff3a 	bl	80172f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	6939      	ldr	r1, [r7, #16]
 801748a:	68f8      	ldr	r0, [r7, #12]
 801748c:	f7ff ff72 	bl	8017374 <tcp_output_control_segment>
 8017490:	e000      	b.n	8017494 <tcp_rst+0x8c>
    return;
 8017492:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017494:	371c      	adds	r7, #28
 8017496:	46bd      	mov	sp, r7
 8017498:	bd90      	pop	{r4, r7, pc}
 801749a:	bf00      	nop
 801749c:	08020d04 	.word	0x08020d04
 80174a0:	08021488 	.word	0x08021488
 80174a4:	08020d58 	.word	0x08020d58
 80174a8:	080214a4 	.word	0x080214a4

080174ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80174ac:	b590      	push	{r4, r7, lr}
 80174ae:	b087      	sub	sp, #28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80174b4:	2300      	movs	r3, #0
 80174b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80174b8:	2300      	movs	r3, #0
 80174ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_send_empty_ack+0x24>
 80174c2:	4b28      	ldr	r3, [pc, #160]	@ (8017564 <tcp_send_empty_ack+0xb8>)
 80174c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80174c8:	4927      	ldr	r1, [pc, #156]	@ (8017568 <tcp_send_empty_ack+0xbc>)
 80174ca:	4828      	ldr	r0, [pc, #160]	@ (801756c <tcp_send_empty_ack+0xc0>)
 80174cc:	f005 ff5a 	bl	801d384 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174d0:	7dfb      	ldrb	r3, [r7, #23]
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	f003 0304 	and.w	r3, r3, #4
 80174da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80174dc:	7d7b      	ldrb	r3, [r7, #21]
 80174de:	b29c      	uxth	r4, r3
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7f9 f8ae 	bl	8010646 <lwip_htonl>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2200      	movs	r2, #0
 80174ee:	4621      	mov	r1, r4
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7ff fec3 	bl	801727c <tcp_output_alloc_header>
 80174f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d109      	bne.n	8017512 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	8b5b      	ldrh	r3, [r3, #26]
 8017502:	f043 0303 	orr.w	r3, r3, #3
 8017506:	b29a      	uxth	r2, r3
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801750c:	f06f 0301 	mvn.w	r3, #1
 8017510:	e023      	b.n	801755a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017512:	7dbb      	ldrb	r3, [r7, #22]
 8017514:	7dfa      	ldrb	r2, [r7, #23]
 8017516:	6939      	ldr	r1, [r7, #16]
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f7ff feed 	bl	80172f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801751e:	687a      	ldr	r2, [r7, #4]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	3304      	adds	r3, #4
 8017524:	6939      	ldr	r1, [r7, #16]
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f7ff ff24 	bl	8017374 <tcp_output_control_segment>
 801752c:	4603      	mov	r3, r0
 801752e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d007      	beq.n	8017548 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	8b5b      	ldrh	r3, [r3, #26]
 801753c:	f043 0303 	orr.w	r3, r3, #3
 8017540:	b29a      	uxth	r2, r3
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	835a      	strh	r2, [r3, #26]
 8017546:	e006      	b.n	8017556 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	8b5b      	ldrh	r3, [r3, #26]
 801754c:	f023 0303 	bic.w	r3, r3, #3
 8017550:	b29a      	uxth	r2, r3
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017556:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801755a:	4618      	mov	r0, r3
 801755c:	371c      	adds	r7, #28
 801755e:	46bd      	mov	sp, r7
 8017560:	bd90      	pop	{r4, r7, pc}
 8017562:	bf00      	nop
 8017564:	08020d04 	.word	0x08020d04
 8017568:	080214c0 	.word	0x080214c0
 801756c:	08020d58 	.word	0x08020d58

08017570 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017570:	b590      	push	{r4, r7, lr}
 8017572:	b087      	sub	sp, #28
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017578:	2300      	movs	r3, #0
 801757a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d106      	bne.n	8017590 <tcp_keepalive+0x20>
 8017582:	4b18      	ldr	r3, [pc, #96]	@ (80175e4 <tcp_keepalive+0x74>)
 8017584:	f640 0224 	movw	r2, #2084	@ 0x824
 8017588:	4917      	ldr	r1, [pc, #92]	@ (80175e8 <tcp_keepalive+0x78>)
 801758a:	4818      	ldr	r0, [pc, #96]	@ (80175ec <tcp_keepalive+0x7c>)
 801758c:	f005 fefa 	bl	801d384 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017590:	7dfb      	ldrb	r3, [r7, #23]
 8017592:	b29c      	uxth	r4, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017598:	3b01      	subs	r3, #1
 801759a:	4618      	mov	r0, r3
 801759c:	f7f9 f853 	bl	8010646 <lwip_htonl>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2200      	movs	r2, #0
 80175a4:	4621      	mov	r1, r4
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f7ff fe68 	bl	801727c <tcp_output_alloc_header>
 80175ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d102      	bne.n	80175ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80175b4:	f04f 33ff 	mov.w	r3, #4294967295
 80175b8:	e010      	b.n	80175dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80175ba:	7dfb      	ldrb	r3, [r7, #23]
 80175bc:	2200      	movs	r2, #0
 80175be:	6939      	ldr	r1, [r7, #16]
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f7ff fe99 	bl	80172f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80175c6:	687a      	ldr	r2, [r7, #4]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3304      	adds	r3, #4
 80175cc:	6939      	ldr	r1, [r7, #16]
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f7ff fed0 	bl	8017374 <tcp_output_control_segment>
 80175d4:	4603      	mov	r3, r0
 80175d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80175d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	371c      	adds	r7, #28
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd90      	pop	{r4, r7, pc}
 80175e4:	08020d04 	.word	0x08020d04
 80175e8:	080214e0 	.word	0x080214e0
 80175ec:	08020d58 	.word	0x08020d58

080175f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80175f0:	b590      	push	{r4, r7, lr}
 80175f2:	b08b      	sub	sp, #44	@ 0x2c
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80175f8:	2300      	movs	r3, #0
 80175fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d106      	bne.n	8017612 <tcp_zero_window_probe+0x22>
 8017604:	4b4c      	ldr	r3, [pc, #304]	@ (8017738 <tcp_zero_window_probe+0x148>)
 8017606:	f640 024f 	movw	r2, #2127	@ 0x84f
 801760a:	494c      	ldr	r1, [pc, #304]	@ (801773c <tcp_zero_window_probe+0x14c>)
 801760c:	484c      	ldr	r0, [pc, #304]	@ (8017740 <tcp_zero_window_probe+0x150>)
 801760e:	f005 feb9 	bl	801d384 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017616:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017618:	6a3b      	ldr	r3, [r7, #32]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d101      	bne.n	8017622 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801761e:	2300      	movs	r3, #0
 8017620:	e086      	b.n	8017730 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017628:	2bff      	cmp	r3, #255	@ 0xff
 801762a:	d007      	beq.n	801763c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017632:	3301      	adds	r3, #1
 8017634:	b2da      	uxtb	r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801763c:	6a3b      	ldr	r3, [r7, #32]
 801763e:	68db      	ldr	r3, [r3, #12]
 8017640:	899b      	ldrh	r3, [r3, #12]
 8017642:	b29b      	uxth	r3, r3
 8017644:	4618      	mov	r0, r3
 8017646:	f7f8 ffe9 	bl	801061c <lwip_htons>
 801764a:	4603      	mov	r3, r0
 801764c:	b2db      	uxtb	r3, r3
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	2b00      	cmp	r3, #0
 8017654:	d005      	beq.n	8017662 <tcp_zero_window_probe+0x72>
 8017656:	6a3b      	ldr	r3, [r7, #32]
 8017658:	891b      	ldrh	r3, [r3, #8]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d101      	bne.n	8017662 <tcp_zero_window_probe+0x72>
 801765e:	2301      	movs	r3, #1
 8017660:	e000      	b.n	8017664 <tcp_zero_window_probe+0x74>
 8017662:	2300      	movs	r3, #0
 8017664:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017666:	7ffb      	ldrb	r3, [r7, #31]
 8017668:	2b00      	cmp	r3, #0
 801766a:	bf0c      	ite	eq
 801766c:	2301      	moveq	r3, #1
 801766e:	2300      	movne	r3, #0
 8017670:	b2db      	uxtb	r3, r3
 8017672:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017678:	b299      	uxth	r1, r3
 801767a:	6a3b      	ldr	r3, [r7, #32]
 801767c:	68db      	ldr	r3, [r3, #12]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	8bba      	ldrh	r2, [r7, #28]
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fdfa 	bl	801727c <tcp_output_alloc_header>
 8017688:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801768a:	69bb      	ldr	r3, [r7, #24]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d102      	bne.n	8017696 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017690:	f04f 33ff 	mov.w	r3, #4294967295
 8017694:	e04c      	b.n	8017730 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017696:	69bb      	ldr	r3, [r7, #24]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801769c:	7ffb      	ldrb	r3, [r7, #31]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d011      	beq.n	80176c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	899b      	ldrh	r3, [r3, #12]
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	b21b      	sxth	r3, r3
 80176aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80176ae:	b21c      	sxth	r4, r3
 80176b0:	2011      	movs	r0, #17
 80176b2:	f7f8 ffb3 	bl	801061c <lwip_htons>
 80176b6:	4603      	mov	r3, r0
 80176b8:	b21b      	sxth	r3, r3
 80176ba:	4323      	orrs	r3, r4
 80176bc:	b21b      	sxth	r3, r3
 80176be:	b29a      	uxth	r2, r3
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	819a      	strh	r2, [r3, #12]
 80176c4:	e010      	b.n	80176e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80176c6:	69bb      	ldr	r3, [r7, #24]
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	3314      	adds	r3, #20
 80176cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80176ce:	6a3b      	ldr	r3, [r7, #32]
 80176d0:	6858      	ldr	r0, [r3, #4]
 80176d2:	6a3b      	ldr	r3, [r7, #32]
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	891a      	ldrh	r2, [r3, #8]
 80176d8:	6a3b      	ldr	r3, [r7, #32]
 80176da:	891b      	ldrh	r3, [r3, #8]
 80176dc:	1ad3      	subs	r3, r2, r3
 80176de:	b29b      	uxth	r3, r3
 80176e0:	2201      	movs	r2, #1
 80176e2:	6939      	ldr	r1, [r7, #16]
 80176e4:	f7fa fe56 	bl	8012394 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80176e8:	6a3b      	ldr	r3, [r7, #32]
 80176ea:	68db      	ldr	r3, [r3, #12]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7f8 ffa9 	bl	8010646 <lwip_htonl>
 80176f4:	4603      	mov	r3, r0
 80176f6:	3301      	adds	r3, #1
 80176f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	1ad3      	subs	r3, r2, r3
 8017702:	2b00      	cmp	r3, #0
 8017704:	da02      	bge.n	801770c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	68fa      	ldr	r2, [r7, #12]
 801770a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801770c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017710:	2200      	movs	r2, #0
 8017712:	69b9      	ldr	r1, [r7, #24]
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f7ff fdef 	bl	80172f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801771a:	687a      	ldr	r2, [r7, #4]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	3304      	adds	r3, #4
 8017720:	69b9      	ldr	r1, [r7, #24]
 8017722:	6878      	ldr	r0, [r7, #4]
 8017724:	f7ff fe26 	bl	8017374 <tcp_output_control_segment>
 8017728:	4603      	mov	r3, r0
 801772a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801772c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017730:	4618      	mov	r0, r3
 8017732:	372c      	adds	r7, #44	@ 0x2c
 8017734:	46bd      	mov	sp, r7
 8017736:	bd90      	pop	{r4, r7, pc}
 8017738:	08020d04 	.word	0x08020d04
 801773c:	080214fc 	.word	0x080214fc
 8017740:	08020d58 	.word	0x08020d58

08017744 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801774c:	f7fa ff10 	bl	8012570 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017750:	4b0a      	ldr	r3, [pc, #40]	@ (801777c <tcpip_tcp_timer+0x38>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d103      	bne.n	8017760 <tcpip_tcp_timer+0x1c>
 8017758:	4b09      	ldr	r3, [pc, #36]	@ (8017780 <tcpip_tcp_timer+0x3c>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d005      	beq.n	801776c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017760:	2200      	movs	r2, #0
 8017762:	4908      	ldr	r1, [pc, #32]	@ (8017784 <tcpip_tcp_timer+0x40>)
 8017764:	20fa      	movs	r0, #250	@ 0xfa
 8017766:	f000 f8f3 	bl	8017950 <sys_timeout>
 801776a:	e003      	b.n	8017774 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801776c:	4b06      	ldr	r3, [pc, #24]	@ (8017788 <tcpip_tcp_timer+0x44>)
 801776e:	2200      	movs	r2, #0
 8017770:	601a      	str	r2, [r3, #0]
  }
}
 8017772:	bf00      	nop
 8017774:	bf00      	nop
 8017776:	3708      	adds	r7, #8
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}
 801777c:	2400cc40 	.word	0x2400cc40
 8017780:	2400cc44 	.word	0x2400cc44
 8017784:	08017745 	.word	0x08017745
 8017788:	2400cc8c 	.word	0x2400cc8c

0801778c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017790:	4b0a      	ldr	r3, [pc, #40]	@ (80177bc <tcp_timer_needed+0x30>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d10f      	bne.n	80177b8 <tcp_timer_needed+0x2c>
 8017798:	4b09      	ldr	r3, [pc, #36]	@ (80177c0 <tcp_timer_needed+0x34>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d103      	bne.n	80177a8 <tcp_timer_needed+0x1c>
 80177a0:	4b08      	ldr	r3, [pc, #32]	@ (80177c4 <tcp_timer_needed+0x38>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d007      	beq.n	80177b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80177a8:	4b04      	ldr	r3, [pc, #16]	@ (80177bc <tcp_timer_needed+0x30>)
 80177aa:	2201      	movs	r2, #1
 80177ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80177ae:	2200      	movs	r2, #0
 80177b0:	4905      	ldr	r1, [pc, #20]	@ (80177c8 <tcp_timer_needed+0x3c>)
 80177b2:	20fa      	movs	r0, #250	@ 0xfa
 80177b4:	f000 f8cc 	bl	8017950 <sys_timeout>
  }
}
 80177b8:	bf00      	nop
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	2400cc8c 	.word	0x2400cc8c
 80177c0:	2400cc40 	.word	0x2400cc40
 80177c4:	2400cc44 	.word	0x2400cc44
 80177c8:	08017745 	.word	0x08017745

080177cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b086      	sub	sp, #24
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	60f8      	str	r0, [r7, #12]
 80177d4:	60b9      	str	r1, [r7, #8]
 80177d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80177d8:	200a      	movs	r0, #10
 80177da:	f7f9 fcaf 	bl	801113c <memp_malloc>
 80177de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d109      	bne.n	80177fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80177e6:	693b      	ldr	r3, [r7, #16]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d151      	bne.n	8017890 <sys_timeout_abs+0xc4>
 80177ec:	4b2a      	ldr	r3, [pc, #168]	@ (8017898 <sys_timeout_abs+0xcc>)
 80177ee:	22be      	movs	r2, #190	@ 0xbe
 80177f0:	492a      	ldr	r1, [pc, #168]	@ (801789c <sys_timeout_abs+0xd0>)
 80177f2:	482b      	ldr	r0, [pc, #172]	@ (80178a0 <sys_timeout_abs+0xd4>)
 80177f4:	f005 fdc6 	bl	801d384 <iprintf>
    return;
 80177f8:	e04a      	b.n	8017890 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	2200      	movs	r2, #0
 80177fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	68ba      	ldr	r2, [r7, #8]
 8017804:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	687a      	ldr	r2, [r7, #4]
 801780a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801780c:	693b      	ldr	r3, [r7, #16]
 801780e:	68fa      	ldr	r2, [r7, #12]
 8017810:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017812:	4b24      	ldr	r3, [pc, #144]	@ (80178a4 <sys_timeout_abs+0xd8>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d103      	bne.n	8017822 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801781a:	4a22      	ldr	r2, [pc, #136]	@ (80178a4 <sys_timeout_abs+0xd8>)
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	6013      	str	r3, [r2, #0]
    return;
 8017820:	e037      	b.n	8017892 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	685a      	ldr	r2, [r3, #4]
 8017826:	4b1f      	ldr	r3, [pc, #124]	@ (80178a4 <sys_timeout_abs+0xd8>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	1ad3      	subs	r3, r2, r3
 801782e:	0fdb      	lsrs	r3, r3, #31
 8017830:	f003 0301 	and.w	r3, r3, #1
 8017834:	b2db      	uxtb	r3, r3
 8017836:	2b00      	cmp	r3, #0
 8017838:	d007      	beq.n	801784a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801783a:	4b1a      	ldr	r3, [pc, #104]	@ (80178a4 <sys_timeout_abs+0xd8>)
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017842:	4a18      	ldr	r2, [pc, #96]	@ (80178a4 <sys_timeout_abs+0xd8>)
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	6013      	str	r3, [r2, #0]
 8017848:	e023      	b.n	8017892 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801784a:	4b16      	ldr	r3, [pc, #88]	@ (80178a4 <sys_timeout_abs+0xd8>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	617b      	str	r3, [r7, #20]
 8017850:	e01a      	b.n	8017888 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00b      	beq.n	8017872 <sys_timeout_abs+0xa6>
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	685a      	ldr	r2, [r3, #4]
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	1ad3      	subs	r3, r2, r3
 8017866:	0fdb      	lsrs	r3, r3, #31
 8017868:	f003 0301 	and.w	r3, r3, #1
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b00      	cmp	r3, #0
 8017870:	d007      	beq.n	8017882 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	693a      	ldr	r2, [r7, #16]
 801787e:	601a      	str	r2, [r3, #0]
        break;
 8017880:	e007      	b.n	8017892 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	617b      	str	r3, [r7, #20]
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d1e1      	bne.n	8017852 <sys_timeout_abs+0x86>
 801788e:	e000      	b.n	8017892 <sys_timeout_abs+0xc6>
    return;
 8017890:	bf00      	nop
      }
    }
  }
}
 8017892:	3718      	adds	r7, #24
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}
 8017898:	08021520 	.word	0x08021520
 801789c:	08021554 	.word	0x08021554
 80178a0:	08021594 	.word	0x08021594
 80178a4:	2400cc84 	.word	0x2400cc84

080178a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b086      	sub	sp, #24
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	4798      	blx	r3

  now = sys_now();
 80178ba:	f7f4 faf5 	bl	800bea8 <sys_now>
 80178be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	681a      	ldr	r2, [r3, #0]
 80178c4:	4b0f      	ldr	r3, [pc, #60]	@ (8017904 <lwip_cyclic_timer+0x5c>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	4413      	add	r3, r2
 80178ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80178cc:	68fa      	ldr	r2, [r7, #12]
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	1ad3      	subs	r3, r2, r3
 80178d2:	0fdb      	lsrs	r3, r3, #31
 80178d4:	f003 0301 	and.w	r3, r3, #1
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d009      	beq.n	80178f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80178de:	697b      	ldr	r3, [r7, #20]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	4413      	add	r3, r2
 80178e6:	687a      	ldr	r2, [r7, #4]
 80178e8:	4907      	ldr	r1, [pc, #28]	@ (8017908 <lwip_cyclic_timer+0x60>)
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7ff ff6e 	bl	80177cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80178f0:	e004      	b.n	80178fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	4904      	ldr	r1, [pc, #16]	@ (8017908 <lwip_cyclic_timer+0x60>)
 80178f6:	68f8      	ldr	r0, [r7, #12]
 80178f8:	f7ff ff68 	bl	80177cc <sys_timeout_abs>
}
 80178fc:	bf00      	nop
 80178fe:	3718      	adds	r7, #24
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}
 8017904:	2400cc88 	.word	0x2400cc88
 8017908:	080178a9 	.word	0x080178a9

0801790c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017912:	2301      	movs	r3, #1
 8017914:	607b      	str	r3, [r7, #4]
 8017916:	e00e      	b.n	8017936 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017918:	4a0b      	ldr	r2, [pc, #44]	@ (8017948 <sys_timeouts_init+0x3c>)
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	00db      	lsls	r3, r3, #3
 8017924:	4a08      	ldr	r2, [pc, #32]	@ (8017948 <sys_timeouts_init+0x3c>)
 8017926:	4413      	add	r3, r2
 8017928:	461a      	mov	r2, r3
 801792a:	4908      	ldr	r1, [pc, #32]	@ (801794c <sys_timeouts_init+0x40>)
 801792c:	f000 f810 	bl	8017950 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	3301      	adds	r3, #1
 8017934:	607b      	str	r3, [r7, #4]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2b04      	cmp	r3, #4
 801793a:	d9ed      	bls.n	8017918 <sys_timeouts_init+0xc>
  }
}
 801793c:	bf00      	nop
 801793e:	bf00      	nop
 8017940:	3708      	adds	r7, #8
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	08022598 	.word	0x08022598
 801794c:	080178a9 	.word	0x080178a9

08017950 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b086      	sub	sp, #24
 8017954:	af00      	add	r7, sp, #0
 8017956:	60f8      	str	r0, [r7, #12]
 8017958:	60b9      	str	r1, [r7, #8]
 801795a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017962:	d306      	bcc.n	8017972 <sys_timeout+0x22>
 8017964:	4b0a      	ldr	r3, [pc, #40]	@ (8017990 <sys_timeout+0x40>)
 8017966:	f240 1229 	movw	r2, #297	@ 0x129
 801796a:	490a      	ldr	r1, [pc, #40]	@ (8017994 <sys_timeout+0x44>)
 801796c:	480a      	ldr	r0, [pc, #40]	@ (8017998 <sys_timeout+0x48>)
 801796e:	f005 fd09 	bl	801d384 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017972:	f7f4 fa99 	bl	800bea8 <sys_now>
 8017976:	4602      	mov	r2, r0
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	4413      	add	r3, r2
 801797c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	68b9      	ldr	r1, [r7, #8]
 8017982:	6978      	ldr	r0, [r7, #20]
 8017984:	f7ff ff22 	bl	80177cc <sys_timeout_abs>
#endif
}
 8017988:	bf00      	nop
 801798a:	3718      	adds	r7, #24
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	08021520 	.word	0x08021520
 8017994:	080215bc 	.word	0x080215bc
 8017998:	08021594 	.word	0x08021594

0801799c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b084      	sub	sp, #16
 80179a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80179a2:	f7f4 fa81 	bl	800bea8 <sys_now>
 80179a6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80179a8:	4b17      	ldr	r3, [pc, #92]	@ (8017a08 <sys_check_timeouts+0x6c>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d022      	beq.n	80179fa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	68fa      	ldr	r2, [r7, #12]
 80179ba:	1ad3      	subs	r3, r2, r3
 80179bc:	0fdb      	lsrs	r3, r3, #31
 80179be:	f003 0301 	and.w	r3, r3, #1
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d11a      	bne.n	80179fe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	4a0e      	ldr	r2, [pc, #56]	@ (8017a08 <sys_check_timeouts+0x6c>)
 80179ce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	689b      	ldr	r3, [r3, #8]
 80179d4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	4a0a      	ldr	r2, [pc, #40]	@ (8017a0c <sys_check_timeouts+0x70>)
 80179e2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80179e4:	68b9      	ldr	r1, [r7, #8]
 80179e6:	200a      	movs	r0, #10
 80179e8:	f7f9 fc1e 	bl	8011228 <memp_free>
    if (handler != NULL) {
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d0da      	beq.n	80179a8 <sys_check_timeouts+0xc>
      handler(arg);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6838      	ldr	r0, [r7, #0]
 80179f6:	4798      	blx	r3
  do {
 80179f8:	e7d6      	b.n	80179a8 <sys_check_timeouts+0xc>
      return;
 80179fa:	bf00      	nop
 80179fc:	e000      	b.n	8017a00 <sys_check_timeouts+0x64>
      return;
 80179fe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017a00:	3710      	adds	r7, #16
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	2400cc84 	.word	0x2400cc84
 8017a0c:	2400cc88 	.word	0x2400cc88

08017a10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017a16:	4b16      	ldr	r3, [pc, #88]	@ (8017a70 <sys_timeouts_sleeptime+0x60>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d102      	bne.n	8017a24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a22:	e020      	b.n	8017a66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017a24:	f7f4 fa40 	bl	800bea8 <sys_now>
 8017a28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017a2a:	4b11      	ldr	r3, [pc, #68]	@ (8017a70 <sys_timeouts_sleeptime+0x60>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	685a      	ldr	r2, [r3, #4]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	1ad3      	subs	r3, r2, r3
 8017a34:	0fdb      	lsrs	r3, r3, #31
 8017a36:	f003 0301 	and.w	r3, r3, #1
 8017a3a:	b2db      	uxtb	r3, r3
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d001      	beq.n	8017a44 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017a40:	2300      	movs	r3, #0
 8017a42:	e010      	b.n	8017a66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017a44:	4b0a      	ldr	r3, [pc, #40]	@ (8017a70 <sys_timeouts_sleeptime+0x60>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	685a      	ldr	r2, [r3, #4]
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	1ad3      	subs	r3, r2, r3
 8017a4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	da06      	bge.n	8017a64 <sys_timeouts_sleeptime+0x54>
 8017a56:	4b07      	ldr	r3, [pc, #28]	@ (8017a74 <sys_timeouts_sleeptime+0x64>)
 8017a58:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017a5c:	4906      	ldr	r1, [pc, #24]	@ (8017a78 <sys_timeouts_sleeptime+0x68>)
 8017a5e:	4807      	ldr	r0, [pc, #28]	@ (8017a7c <sys_timeouts_sleeptime+0x6c>)
 8017a60:	f005 fc90 	bl	801d384 <iprintf>
    return ret;
 8017a64:	683b      	ldr	r3, [r7, #0]
  }
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	3708      	adds	r7, #8
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}
 8017a6e:	bf00      	nop
 8017a70:	2400cc84 	.word	0x2400cc84
 8017a74:	08021520 	.word	0x08021520
 8017a78:	080215f4 	.word	0x080215f4
 8017a7c:	08021594 	.word	0x08021594

08017a80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017a84:	f004 ff46 	bl	801c914 <rand>
 8017a88:	4603      	mov	r3, r0
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017a96:	b29a      	uxth	r2, r3
 8017a98:	4b01      	ldr	r3, [pc, #4]	@ (8017aa0 <udp_init+0x20>)
 8017a9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017a9c:	bf00      	nop
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	24000030 	.word	0x24000030

08017aa4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b083      	sub	sp, #12
 8017aa8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017aae:	4b17      	ldr	r3, [pc, #92]	@ (8017b0c <udp_new_port+0x68>)
 8017ab0:	881b      	ldrh	r3, [r3, #0]
 8017ab2:	1c5a      	adds	r2, r3, #1
 8017ab4:	b291      	uxth	r1, r2
 8017ab6:	4a15      	ldr	r2, [pc, #84]	@ (8017b0c <udp_new_port+0x68>)
 8017ab8:	8011      	strh	r1, [r2, #0]
 8017aba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	d103      	bne.n	8017aca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017ac2:	4b12      	ldr	r3, [pc, #72]	@ (8017b0c <udp_new_port+0x68>)
 8017ac4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017ac8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017aca:	4b11      	ldr	r3, [pc, #68]	@ (8017b10 <udp_new_port+0x6c>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	603b      	str	r3, [r7, #0]
 8017ad0:	e011      	b.n	8017af6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	8a5a      	ldrh	r2, [r3, #18]
 8017ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8017b0c <udp_new_port+0x68>)
 8017ad8:	881b      	ldrh	r3, [r3, #0]
 8017ada:	429a      	cmp	r2, r3
 8017adc:	d108      	bne.n	8017af0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017ade:	88fb      	ldrh	r3, [r7, #6]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	80fb      	strh	r3, [r7, #6]
 8017ae4:	88fb      	ldrh	r3, [r7, #6]
 8017ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017aea:	d3e0      	bcc.n	8017aae <udp_new_port+0xa>
        return 0;
 8017aec:	2300      	movs	r3, #0
 8017aee:	e007      	b.n	8017b00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	603b      	str	r3, [r7, #0]
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d1ea      	bne.n	8017ad2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017afc:	4b03      	ldr	r3, [pc, #12]	@ (8017b0c <udp_new_port+0x68>)
 8017afe:	881b      	ldrh	r3, [r3, #0]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr
 8017b0c:	24000030 	.word	0x24000030
 8017b10:	2400cc90 	.word	0x2400cc90

08017b14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b084      	sub	sp, #16
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	4613      	mov	r3, r2
 8017b20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d105      	bne.n	8017b34 <udp_input_local_match+0x20>
 8017b28:	4b27      	ldr	r3, [pc, #156]	@ (8017bc8 <udp_input_local_match+0xb4>)
 8017b2a:	2287      	movs	r2, #135	@ 0x87
 8017b2c:	4927      	ldr	r1, [pc, #156]	@ (8017bcc <udp_input_local_match+0xb8>)
 8017b2e:	4828      	ldr	r0, [pc, #160]	@ (8017bd0 <udp_input_local_match+0xbc>)
 8017b30:	f005 fc28 	bl	801d384 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d105      	bne.n	8017b46 <udp_input_local_match+0x32>
 8017b3a:	4b23      	ldr	r3, [pc, #140]	@ (8017bc8 <udp_input_local_match+0xb4>)
 8017b3c:	2288      	movs	r2, #136	@ 0x88
 8017b3e:	4925      	ldr	r1, [pc, #148]	@ (8017bd4 <udp_input_local_match+0xc0>)
 8017b40:	4823      	ldr	r0, [pc, #140]	@ (8017bd0 <udp_input_local_match+0xbc>)
 8017b42:	f005 fc1f 	bl	801d384 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	7a1b      	ldrb	r3, [r3, #8]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d00b      	beq.n	8017b66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	7a1a      	ldrb	r2, [r3, #8]
 8017b52:	4b21      	ldr	r3, [pc, #132]	@ (8017bd8 <udp_input_local_match+0xc4>)
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017b5a:	3301      	adds	r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d001      	beq.n	8017b66 <udp_input_local_match+0x52>
    return 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	e02b      	b.n	8017bbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017b66:	79fb      	ldrb	r3, [r7, #7]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d018      	beq.n	8017b9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d013      	beq.n	8017b9a <udp_input_local_match+0x86>
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d00f      	beq.n	8017b9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017b7a:	4b17      	ldr	r3, [pc, #92]	@ (8017bd8 <udp_input_local_match+0xc4>)
 8017b7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b82:	d00a      	beq.n	8017b9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	4b13      	ldr	r3, [pc, #76]	@ (8017bd8 <udp_input_local_match+0xc4>)
 8017b8a:	695b      	ldr	r3, [r3, #20]
 8017b8c:	405a      	eors	r2, r3
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	3308      	adds	r3, #8
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d110      	bne.n	8017bbc <udp_input_local_match+0xa8>
          return 1;
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	e00f      	b.n	8017bbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d009      	beq.n	8017bb8 <udp_input_local_match+0xa4>
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d005      	beq.n	8017bb8 <udp_input_local_match+0xa4>
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	681a      	ldr	r2, [r3, #0]
 8017bb0:	4b09      	ldr	r3, [pc, #36]	@ (8017bd8 <udp_input_local_match+0xc4>)
 8017bb2:	695b      	ldr	r3, [r3, #20]
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d101      	bne.n	8017bbc <udp_input_local_match+0xa8>
        return 1;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	e000      	b.n	8017bbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017bbc:	2300      	movs	r3, #0
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	08021608 	.word	0x08021608
 8017bcc:	08021638 	.word	0x08021638
 8017bd0:	0802165c 	.word	0x0802165c
 8017bd4:	08021684 	.word	0x08021684
 8017bd8:	24009b14 	.word	0x24009b14

08017bdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017bdc:	b590      	push	{r4, r7, lr}
 8017bde:	b08d      	sub	sp, #52	@ 0x34
 8017be0:	af02      	add	r7, sp, #8
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d105      	bne.n	8017bfc <udp_input+0x20>
 8017bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8017de4 <udp_input+0x208>)
 8017bf2:	22cf      	movs	r2, #207	@ 0xcf
 8017bf4:	497c      	ldr	r1, [pc, #496]	@ (8017de8 <udp_input+0x20c>)
 8017bf6:	487d      	ldr	r0, [pc, #500]	@ (8017dec <udp_input+0x210>)
 8017bf8:	f005 fbc4 	bl	801d384 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d105      	bne.n	8017c0e <udp_input+0x32>
 8017c02:	4b78      	ldr	r3, [pc, #480]	@ (8017de4 <udp_input+0x208>)
 8017c04:	22d0      	movs	r2, #208	@ 0xd0
 8017c06:	497a      	ldr	r1, [pc, #488]	@ (8017df0 <udp_input+0x214>)
 8017c08:	4878      	ldr	r0, [pc, #480]	@ (8017dec <udp_input+0x210>)
 8017c0a:	f005 fbbb 	bl	801d384 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	895b      	ldrh	r3, [r3, #10]
 8017c12:	2b07      	cmp	r3, #7
 8017c14:	d803      	bhi.n	8017c1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7fa f9b6 	bl	8011f88 <pbuf_free>
    goto end;
 8017c1c:	e0de      	b.n	8017ddc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017c24:	4b73      	ldr	r3, [pc, #460]	@ (8017df4 <udp_input+0x218>)
 8017c26:	695b      	ldr	r3, [r3, #20]
 8017c28:	4a72      	ldr	r2, [pc, #456]	@ (8017df4 <udp_input+0x218>)
 8017c2a:	6812      	ldr	r2, [r2, #0]
 8017c2c:	4611      	mov	r1, r2
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f003 fe28 	bl	801b884 <ip4_addr_isbroadcast_u32>
 8017c34:	4603      	mov	r3, r0
 8017c36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017c38:	697b      	ldr	r3, [r7, #20]
 8017c3a:	881b      	ldrh	r3, [r3, #0]
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7f8 fcec 	bl	801061c <lwip_htons>
 8017c44:	4603      	mov	r3, r0
 8017c46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	885b      	ldrh	r3, [r3, #2]
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7f8 fce4 	bl	801061c <lwip_htons>
 8017c54:	4603      	mov	r3, r0
 8017c56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017c60:	2300      	movs	r3, #0
 8017c62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c64:	4b64      	ldr	r3, [pc, #400]	@ (8017df8 <udp_input+0x21c>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c6a:	e054      	b.n	8017d16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c6e:	8a5b      	ldrh	r3, [r3, #18]
 8017c70:	89fa      	ldrh	r2, [r7, #14]
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d14a      	bne.n	8017d0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017c76:	7cfb      	ldrb	r3, [r7, #19]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	6839      	ldr	r1, [r7, #0]
 8017c7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017c7e:	f7ff ff49 	bl	8017b14 <udp_input_local_match>
 8017c82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d041      	beq.n	8017d0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8a:	7c1b      	ldrb	r3, [r3, #16]
 8017c8c:	f003 0304 	and.w	r3, r3, #4
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d11d      	bne.n	8017cd0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d102      	bne.n	8017ca0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c9c:	61fb      	str	r3, [r7, #28]
 8017c9e:	e017      	b.n	8017cd0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017ca0:	7cfb      	ldrb	r3, [r7, #19]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d014      	beq.n	8017cd0 <udp_input+0xf4>
 8017ca6:	4b53      	ldr	r3, [pc, #332]	@ (8017df4 <udp_input+0x218>)
 8017ca8:	695b      	ldr	r3, [r3, #20]
 8017caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cae:	d10f      	bne.n	8017cd0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017cb0:	69fb      	ldr	r3, [r7, #28]
 8017cb2:	681a      	ldr	r2, [r3, #0]
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	3304      	adds	r3, #4
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d008      	beq.n	8017cd0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cc0:	681a      	ldr	r2, [r3, #0]
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	3304      	adds	r3, #4
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d101      	bne.n	8017cd0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd2:	8a9b      	ldrh	r3, [r3, #20]
 8017cd4:	8a3a      	ldrh	r2, [r7, #16]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d118      	bne.n	8017d0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cdc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d005      	beq.n	8017cee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ce4:	685a      	ldr	r2, [r3, #4]
 8017ce6:	4b43      	ldr	r3, [pc, #268]	@ (8017df4 <udp_input+0x218>)
 8017ce8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d10e      	bne.n	8017d0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017cee:	6a3b      	ldr	r3, [r7, #32]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d014      	beq.n	8017d1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf6:	68da      	ldr	r2, [r3, #12]
 8017cf8:	6a3b      	ldr	r3, [r7, #32]
 8017cfa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8017df8 <udp_input+0x21c>)
 8017cfe:	681a      	ldr	r2, [r3, #0]
 8017d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017d04:	4a3c      	ldr	r2, [pc, #240]	@ (8017df8 <udp_input+0x21c>)
 8017d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017d0a:	e008      	b.n	8017d1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d12:	68db      	ldr	r3, [r3, #12]
 8017d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d1a7      	bne.n	8017c6c <udp_input+0x90>
 8017d1c:	e000      	b.n	8017d20 <udp_input+0x144>
        break;
 8017d1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d101      	bne.n	8017d2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d002      	beq.n	8017d36 <udp_input+0x15a>
    for_us = 1;
 8017d30:	2301      	movs	r3, #1
 8017d32:	76fb      	strb	r3, [r7, #27]
 8017d34:	e00a      	b.n	8017d4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	3304      	adds	r3, #4
 8017d3a:	681a      	ldr	r2, [r3, #0]
 8017d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8017df4 <udp_input+0x218>)
 8017d3e:	695b      	ldr	r3, [r3, #20]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	bf0c      	ite	eq
 8017d44:	2301      	moveq	r3, #1
 8017d46:	2300      	movne	r3, #0
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017d4c:	7efb      	ldrb	r3, [r7, #27]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d041      	beq.n	8017dd6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017d52:	2108      	movs	r1, #8
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7fa f891 	bl	8011e7c <pbuf_remove_header>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00a      	beq.n	8017d76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017d60:	4b20      	ldr	r3, [pc, #128]	@ (8017de4 <udp_input+0x208>)
 8017d62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017d66:	4925      	ldr	r1, [pc, #148]	@ (8017dfc <udp_input+0x220>)
 8017d68:	4820      	ldr	r0, [pc, #128]	@ (8017dec <udp_input+0x210>)
 8017d6a:	f005 fb0b 	bl	801d384 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7fa f90a 	bl	8011f88 <pbuf_free>
      goto end;
 8017d74:	e032      	b.n	8017ddc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d012      	beq.n	8017da2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d7e:	699b      	ldr	r3, [r3, #24]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d00a      	beq.n	8017d9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d86:	699c      	ldr	r4, [r3, #24]
 8017d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d8a:	69d8      	ldr	r0, [r3, #28]
 8017d8c:	8a3b      	ldrh	r3, [r7, #16]
 8017d8e:	9300      	str	r3, [sp, #0]
 8017d90:	4b1b      	ldr	r3, [pc, #108]	@ (8017e00 <udp_input+0x224>)
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017d96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017d98:	e021      	b.n	8017dde <udp_input+0x202>
        pbuf_free(p);
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f7fa f8f4 	bl	8011f88 <pbuf_free>
        goto end;
 8017da0:	e01c      	b.n	8017ddc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017da2:	7cfb      	ldrb	r3, [r7, #19]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d112      	bne.n	8017dce <udp_input+0x1f2>
 8017da8:	4b12      	ldr	r3, [pc, #72]	@ (8017df4 <udp_input+0x218>)
 8017daa:	695b      	ldr	r3, [r3, #20]
 8017dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017db0:	2be0      	cmp	r3, #224	@ 0xe0
 8017db2:	d00c      	beq.n	8017dce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017db4:	4b0f      	ldr	r3, [pc, #60]	@ (8017df4 <udp_input+0x218>)
 8017db6:	899b      	ldrh	r3, [r3, #12]
 8017db8:	3308      	adds	r3, #8
 8017dba:	b29b      	uxth	r3, r3
 8017dbc:	b21b      	sxth	r3, r3
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	6878      	ldr	r0, [r7, #4]
 8017dc2:	f7fa f8ce 	bl	8011f62 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017dc6:	2103      	movs	r1, #3
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f003 fa13 	bl	801b1f4 <icmp_dest_unreach>
      pbuf_free(p);
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f7fa f8da 	bl	8011f88 <pbuf_free>
  return;
 8017dd4:	e003      	b.n	8017dde <udp_input+0x202>
    pbuf_free(p);
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f7fa f8d6 	bl	8011f88 <pbuf_free>
  return;
 8017ddc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017dde:	372c      	adds	r7, #44	@ 0x2c
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd90      	pop	{r4, r7, pc}
 8017de4:	08021608 	.word	0x08021608
 8017de8:	080216ac 	.word	0x080216ac
 8017dec:	0802165c 	.word	0x0802165c
 8017df0:	080216c4 	.word	0x080216c4
 8017df4:	24009b14 	.word	0x24009b14
 8017df8:	2400cc90 	.word	0x2400cc90
 8017dfc:	080216e0 	.word	0x080216e0
 8017e00:	24009b24 	.word	0x24009b24

08017e04 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b088      	sub	sp, #32
 8017e08:	af02      	add	r7, sp, #8
 8017e0a:	60f8      	str	r0, [r7, #12]
 8017e0c:	60b9      	str	r1, [r7, #8]
 8017e0e:	607a      	str	r2, [r7, #4]
 8017e10:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d109      	bne.n	8017e2c <udp_sendto_if+0x28>
 8017e18:	4b2e      	ldr	r3, [pc, #184]	@ (8017ed4 <udp_sendto_if+0xd0>)
 8017e1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017e1e:	492e      	ldr	r1, [pc, #184]	@ (8017ed8 <udp_sendto_if+0xd4>)
 8017e20:	482e      	ldr	r0, [pc, #184]	@ (8017edc <udp_sendto_if+0xd8>)
 8017e22:	f005 faaf 	bl	801d384 <iprintf>
 8017e26:	f06f 030f 	mvn.w	r3, #15
 8017e2a:	e04f      	b.n	8017ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d109      	bne.n	8017e46 <udp_sendto_if+0x42>
 8017e32:	4b28      	ldr	r3, [pc, #160]	@ (8017ed4 <udp_sendto_if+0xd0>)
 8017e34:	f240 2281 	movw	r2, #641	@ 0x281
 8017e38:	4929      	ldr	r1, [pc, #164]	@ (8017ee0 <udp_sendto_if+0xdc>)
 8017e3a:	4828      	ldr	r0, [pc, #160]	@ (8017edc <udp_sendto_if+0xd8>)
 8017e3c:	f005 faa2 	bl	801d384 <iprintf>
 8017e40:	f06f 030f 	mvn.w	r3, #15
 8017e44:	e042      	b.n	8017ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d109      	bne.n	8017e60 <udp_sendto_if+0x5c>
 8017e4c:	4b21      	ldr	r3, [pc, #132]	@ (8017ed4 <udp_sendto_if+0xd0>)
 8017e4e:	f240 2282 	movw	r2, #642	@ 0x282
 8017e52:	4924      	ldr	r1, [pc, #144]	@ (8017ee4 <udp_sendto_if+0xe0>)
 8017e54:	4821      	ldr	r0, [pc, #132]	@ (8017edc <udp_sendto_if+0xd8>)
 8017e56:	f005 fa95 	bl	801d384 <iprintf>
 8017e5a:	f06f 030f 	mvn.w	r3, #15
 8017e5e:	e035      	b.n	8017ecc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017e60:	6a3b      	ldr	r3, [r7, #32]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d109      	bne.n	8017e7a <udp_sendto_if+0x76>
 8017e66:	4b1b      	ldr	r3, [pc, #108]	@ (8017ed4 <udp_sendto_if+0xd0>)
 8017e68:	f240 2283 	movw	r2, #643	@ 0x283
 8017e6c:	491e      	ldr	r1, [pc, #120]	@ (8017ee8 <udp_sendto_if+0xe4>)
 8017e6e:	481b      	ldr	r0, [pc, #108]	@ (8017edc <udp_sendto_if+0xd8>)
 8017e70:	f005 fa88 	bl	801d384 <iprintf>
 8017e74:	f06f 030f 	mvn.w	r3, #15
 8017e78:	e028      	b.n	8017ecc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d009      	beq.n	8017e94 <udp_sendto_if+0x90>
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d005      	beq.n	8017e94 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e90:	2be0      	cmp	r3, #224	@ 0xe0
 8017e92:	d103      	bne.n	8017e9c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017e94:	6a3b      	ldr	r3, [r7, #32]
 8017e96:	3304      	adds	r3, #4
 8017e98:	617b      	str	r3, [r7, #20]
 8017e9a:	e00b      	b.n	8017eb4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	6a3b      	ldr	r3, [r7, #32]
 8017ea2:	3304      	adds	r3, #4
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d002      	beq.n	8017eb0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017eaa:	f06f 0303 	mvn.w	r3, #3
 8017eae:	e00d      	b.n	8017ecc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017eb4:	887a      	ldrh	r2, [r7, #2]
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	9301      	str	r3, [sp, #4]
 8017eba:	6a3b      	ldr	r3, [r7, #32]
 8017ebc:	9300      	str	r3, [sp, #0]
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	687a      	ldr	r2, [r7, #4]
 8017ec2:	68b9      	ldr	r1, [r7, #8]
 8017ec4:	68f8      	ldr	r0, [r7, #12]
 8017ec6:	f000 f811 	bl	8017eec <udp_sendto_if_src>
 8017eca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017ecc:	4618      	mov	r0, r3
 8017ece:	3718      	adds	r7, #24
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}
 8017ed4:	08021608 	.word	0x08021608
 8017ed8:	0802177c 	.word	0x0802177c
 8017edc:	0802165c 	.word	0x0802165c
 8017ee0:	08021798 	.word	0x08021798
 8017ee4:	080217b4 	.word	0x080217b4
 8017ee8:	080217d4 	.word	0x080217d4

08017eec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b08c      	sub	sp, #48	@ 0x30
 8017ef0:	af04      	add	r7, sp, #16
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	60b9      	str	r1, [r7, #8]
 8017ef6:	607a      	str	r2, [r7, #4]
 8017ef8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d109      	bne.n	8017f14 <udp_sendto_if_src+0x28>
 8017f00:	4b65      	ldr	r3, [pc, #404]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017f02:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017f06:	4965      	ldr	r1, [pc, #404]	@ (801809c <udp_sendto_if_src+0x1b0>)
 8017f08:	4865      	ldr	r0, [pc, #404]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8017f0a:	f005 fa3b 	bl	801d384 <iprintf>
 8017f0e:	f06f 030f 	mvn.w	r3, #15
 8017f12:	e0bc      	b.n	801808e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d109      	bne.n	8017f2e <udp_sendto_if_src+0x42>
 8017f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017f1c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017f20:	4960      	ldr	r1, [pc, #384]	@ (80180a4 <udp_sendto_if_src+0x1b8>)
 8017f22:	485f      	ldr	r0, [pc, #380]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8017f24:	f005 fa2e 	bl	801d384 <iprintf>
 8017f28:	f06f 030f 	mvn.w	r3, #15
 8017f2c:	e0af      	b.n	801808e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d109      	bne.n	8017f48 <udp_sendto_if_src+0x5c>
 8017f34:	4b58      	ldr	r3, [pc, #352]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017f36:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017f3a:	495b      	ldr	r1, [pc, #364]	@ (80180a8 <udp_sendto_if_src+0x1bc>)
 8017f3c:	4858      	ldr	r0, [pc, #352]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8017f3e:	f005 fa21 	bl	801d384 <iprintf>
 8017f42:	f06f 030f 	mvn.w	r3, #15
 8017f46:	e0a2      	b.n	801808e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d109      	bne.n	8017f62 <udp_sendto_if_src+0x76>
 8017f4e:	4b52      	ldr	r3, [pc, #328]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017f50:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017f54:	4955      	ldr	r1, [pc, #340]	@ (80180ac <udp_sendto_if_src+0x1c0>)
 8017f56:	4852      	ldr	r0, [pc, #328]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8017f58:	f005 fa14 	bl	801d384 <iprintf>
 8017f5c:	f06f 030f 	mvn.w	r3, #15
 8017f60:	e095      	b.n	801808e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d109      	bne.n	8017f7c <udp_sendto_if_src+0x90>
 8017f68:	4b4b      	ldr	r3, [pc, #300]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017f6a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017f6e:	4950      	ldr	r1, [pc, #320]	@ (80180b0 <udp_sendto_if_src+0x1c4>)
 8017f70:	484b      	ldr	r0, [pc, #300]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8017f72:	f005 fa07 	bl	801d384 <iprintf>
 8017f76:	f06f 030f 	mvn.w	r3, #15
 8017f7a:	e088      	b.n	801808e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	8a5b      	ldrh	r3, [r3, #18]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10f      	bne.n	8017fa4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017f84:	68f9      	ldr	r1, [r7, #12]
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	8a5b      	ldrh	r3, [r3, #18]
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f000 f893 	bl	80180b8 <udp_bind>
 8017f92:	4603      	mov	r3, r0
 8017f94:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017f96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d002      	beq.n	8017fa4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017f9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017fa2:	e074      	b.n	801808e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	891b      	ldrh	r3, [r3, #8]
 8017fa8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017fac:	4293      	cmp	r3, r2
 8017fae:	d902      	bls.n	8017fb6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb4:	e06b      	b.n	801808e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017fb6:	2108      	movs	r1, #8
 8017fb8:	68b8      	ldr	r0, [r7, #8]
 8017fba:	f7f9 ff4f 	bl	8011e5c <pbuf_add_header>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d015      	beq.n	8017ff0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017fc4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017fc8:	2108      	movs	r1, #8
 8017fca:	2022      	movs	r0, #34	@ 0x22
 8017fcc:	f7f9 fcf8 	bl	80119c0 <pbuf_alloc>
 8017fd0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017fd2:	69fb      	ldr	r3, [r7, #28]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d102      	bne.n	8017fde <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fdc:	e057      	b.n	801808e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017fde:	68bb      	ldr	r3, [r7, #8]
 8017fe0:	891b      	ldrh	r3, [r3, #8]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d006      	beq.n	8017ff4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017fe6:	68b9      	ldr	r1, [r7, #8]
 8017fe8:	69f8      	ldr	r0, [r7, #28]
 8017fea:	f7fa f8f1 	bl	80121d0 <pbuf_chain>
 8017fee:	e001      	b.n	8017ff4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	895b      	ldrh	r3, [r3, #10]
 8017ff8:	2b07      	cmp	r3, #7
 8017ffa:	d806      	bhi.n	801800a <udp_sendto_if_src+0x11e>
 8017ffc:	4b26      	ldr	r3, [pc, #152]	@ (8018098 <udp_sendto_if_src+0x1ac>)
 8017ffe:	f240 320d 	movw	r2, #781	@ 0x30d
 8018002:	492c      	ldr	r1, [pc, #176]	@ (80180b4 <udp_sendto_if_src+0x1c8>)
 8018004:	4826      	ldr	r0, [pc, #152]	@ (80180a0 <udp_sendto_if_src+0x1b4>)
 8018006:	f005 f9bd 	bl	801d384 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	685b      	ldr	r3, [r3, #4]
 801800e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	8a5b      	ldrh	r3, [r3, #18]
 8018014:	4618      	mov	r0, r3
 8018016:	f7f8 fb01 	bl	801061c <lwip_htons>
 801801a:	4603      	mov	r3, r0
 801801c:	461a      	mov	r2, r3
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018022:	887b      	ldrh	r3, [r7, #2]
 8018024:	4618      	mov	r0, r3
 8018026:	f7f8 faf9 	bl	801061c <lwip_htons>
 801802a:	4603      	mov	r3, r0
 801802c:	461a      	mov	r2, r3
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	2200      	movs	r2, #0
 8018036:	719a      	strb	r2, [r3, #6]
 8018038:	2200      	movs	r2, #0
 801803a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801803c:	69fb      	ldr	r3, [r7, #28]
 801803e:	891b      	ldrh	r3, [r3, #8]
 8018040:	4618      	mov	r0, r3
 8018042:	f7f8 faeb 	bl	801061c <lwip_htons>
 8018046:	4603      	mov	r3, r0
 8018048:	461a      	mov	r2, r3
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801804e:	2311      	movs	r3, #17
 8018050:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	7adb      	ldrb	r3, [r3, #11]
 8018056:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	7a9b      	ldrb	r3, [r3, #10]
 801805c:	7cb9      	ldrb	r1, [r7, #18]
 801805e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018060:	9202      	str	r2, [sp, #8]
 8018062:	7cfa      	ldrb	r2, [r7, #19]
 8018064:	9201      	str	r2, [sp, #4]
 8018066:	9300      	str	r3, [sp, #0]
 8018068:	460b      	mov	r3, r1
 801806a:	687a      	ldr	r2, [r7, #4]
 801806c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801806e:	69f8      	ldr	r0, [r7, #28]
 8018070:	f003 fb5a 	bl	801b728 <ip4_output_if_src>
 8018074:	4603      	mov	r3, r0
 8018076:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018078:	69fa      	ldr	r2, [r7, #28]
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	429a      	cmp	r2, r3
 801807e:	d004      	beq.n	801808a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018080:	69f8      	ldr	r0, [r7, #28]
 8018082:	f7f9 ff81 	bl	8011f88 <pbuf_free>
    q = NULL;
 8018086:	2300      	movs	r3, #0
 8018088:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801808a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801808e:	4618      	mov	r0, r3
 8018090:	3720      	adds	r7, #32
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}
 8018096:	bf00      	nop
 8018098:	08021608 	.word	0x08021608
 801809c:	080217f4 	.word	0x080217f4
 80180a0:	0802165c 	.word	0x0802165c
 80180a4:	08021814 	.word	0x08021814
 80180a8:	08021834 	.word	0x08021834
 80180ac:	08021858 	.word	0x08021858
 80180b0:	0802187c 	.word	0x0802187c
 80180b4:	080218a0 	.word	0x080218a0

080180b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b086      	sub	sp, #24
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	4613      	mov	r3, r2
 80180c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d101      	bne.n	80180d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80180cc:	4b39      	ldr	r3, [pc, #228]	@ (80181b4 <udp_bind+0xfc>)
 80180ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d109      	bne.n	80180ea <udp_bind+0x32>
 80180d6:	4b38      	ldr	r3, [pc, #224]	@ (80181b8 <udp_bind+0x100>)
 80180d8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80180dc:	4937      	ldr	r1, [pc, #220]	@ (80181bc <udp_bind+0x104>)
 80180de:	4838      	ldr	r0, [pc, #224]	@ (80181c0 <udp_bind+0x108>)
 80180e0:	f005 f950 	bl	801d384 <iprintf>
 80180e4:	f06f 030f 	mvn.w	r3, #15
 80180e8:	e060      	b.n	80181ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80180ea:	2300      	movs	r3, #0
 80180ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80180ee:	4b35      	ldr	r3, [pc, #212]	@ (80181c4 <udp_bind+0x10c>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	617b      	str	r3, [r7, #20]
 80180f4:	e009      	b.n	801810a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80180f6:	68fa      	ldr	r2, [r7, #12]
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d102      	bne.n	8018104 <udp_bind+0x4c>
      rebind = 1;
 80180fe:	2301      	movs	r3, #1
 8018100:	74fb      	strb	r3, [r7, #19]
      break;
 8018102:	e005      	b.n	8018110 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	68db      	ldr	r3, [r3, #12]
 8018108:	617b      	str	r3, [r7, #20]
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1f2      	bne.n	80180f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018110:	88fb      	ldrh	r3, [r7, #6]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <udp_bind+0x72>
    port = udp_new_port();
 8018116:	f7ff fcc5 	bl	8017aa4 <udp_new_port>
 801811a:	4603      	mov	r3, r0
 801811c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801811e:	88fb      	ldrh	r3, [r7, #6]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d12c      	bne.n	801817e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018124:	f06f 0307 	mvn.w	r3, #7
 8018128:	e040      	b.n	80181ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801812a:	4b26      	ldr	r3, [pc, #152]	@ (80181c4 <udp_bind+0x10c>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	617b      	str	r3, [r7, #20]
 8018130:	e022      	b.n	8018178 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018132:	68fa      	ldr	r2, [r7, #12]
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	429a      	cmp	r2, r3
 8018138:	d01b      	beq.n	8018172 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	8a5b      	ldrh	r3, [r3, #18]
 801813e:	88fa      	ldrh	r2, [r7, #6]
 8018140:	429a      	cmp	r2, r3
 8018142:	d116      	bne.n	8018172 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	681a      	ldr	r2, [r3, #0]
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801814c:	429a      	cmp	r2, r3
 801814e:	d00d      	beq.n	801816c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00a      	beq.n	801816c <udp_bind+0xb4>
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d006      	beq.n	801816c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801815e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018160:	2b00      	cmp	r3, #0
 8018162:	d003      	beq.n	801816c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d102      	bne.n	8018172 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801816c:	f06f 0307 	mvn.w	r3, #7
 8018170:	e01c      	b.n	80181ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018172:	697b      	ldr	r3, [r7, #20]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	617b      	str	r3, [r7, #20]
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1d9      	bne.n	8018132 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d002      	beq.n	801818a <udp_bind+0xd2>
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	e000      	b.n	801818c <udp_bind+0xd4>
 801818a:	2300      	movs	r3, #0
 801818c:	68fa      	ldr	r2, [r7, #12]
 801818e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	88fa      	ldrh	r2, [r7, #6]
 8018194:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018196:	7cfb      	ldrb	r3, [r7, #19]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d106      	bne.n	80181aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801819c:	4b09      	ldr	r3, [pc, #36]	@ (80181c4 <udp_bind+0x10c>)
 801819e:	681a      	ldr	r2, [r3, #0]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80181a4:	4a07      	ldr	r2, [pc, #28]	@ (80181c4 <udp_bind+0x10c>)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80181aa:	2300      	movs	r3, #0
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3718      	adds	r7, #24
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	080225c0 	.word	0x080225c0
 80181b8:	08021608 	.word	0x08021608
 80181bc:	080218d0 	.word	0x080218d0
 80181c0:	0802165c 	.word	0x0802165c
 80181c4:	2400cc90 	.word	0x2400cc90

080181c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b086      	sub	sp, #24
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	60f8      	str	r0, [r7, #12]
 80181d0:	60b9      	str	r1, [r7, #8]
 80181d2:	4613      	mov	r3, r2
 80181d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d109      	bne.n	80181f0 <udp_connect+0x28>
 80181dc:	4b2c      	ldr	r3, [pc, #176]	@ (8018290 <udp_connect+0xc8>)
 80181de:	f240 4235 	movw	r2, #1077	@ 0x435
 80181e2:	492c      	ldr	r1, [pc, #176]	@ (8018294 <udp_connect+0xcc>)
 80181e4:	482c      	ldr	r0, [pc, #176]	@ (8018298 <udp_connect+0xd0>)
 80181e6:	f005 f8cd 	bl	801d384 <iprintf>
 80181ea:	f06f 030f 	mvn.w	r3, #15
 80181ee:	e04b      	b.n	8018288 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d109      	bne.n	801820a <udp_connect+0x42>
 80181f6:	4b26      	ldr	r3, [pc, #152]	@ (8018290 <udp_connect+0xc8>)
 80181f8:	f240 4236 	movw	r2, #1078	@ 0x436
 80181fc:	4927      	ldr	r1, [pc, #156]	@ (801829c <udp_connect+0xd4>)
 80181fe:	4826      	ldr	r0, [pc, #152]	@ (8018298 <udp_connect+0xd0>)
 8018200:	f005 f8c0 	bl	801d384 <iprintf>
 8018204:	f06f 030f 	mvn.w	r3, #15
 8018208:	e03e      	b.n	8018288 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	8a5b      	ldrh	r3, [r3, #18]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d10f      	bne.n	8018232 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018212:	68f9      	ldr	r1, [r7, #12]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	8a5b      	ldrh	r3, [r3, #18]
 8018218:	461a      	mov	r2, r3
 801821a:	68f8      	ldr	r0, [r7, #12]
 801821c:	f7ff ff4c 	bl	80180b8 <udp_bind>
 8018220:	4603      	mov	r3, r0
 8018222:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d002      	beq.n	8018232 <udp_connect+0x6a>
      return err;
 801822c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018230:	e02a      	b.n	8018288 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d002      	beq.n	801823e <udp_connect+0x76>
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	e000      	b.n	8018240 <udp_connect+0x78>
 801823e:	2300      	movs	r3, #0
 8018240:	68fa      	ldr	r2, [r7, #12]
 8018242:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	88fa      	ldrh	r2, [r7, #6]
 8018248:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	7c1b      	ldrb	r3, [r3, #16]
 801824e:	f043 0304 	orr.w	r3, r3, #4
 8018252:	b2da      	uxtb	r2, r3
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018258:	4b11      	ldr	r3, [pc, #68]	@ (80182a0 <udp_connect+0xd8>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	617b      	str	r3, [r7, #20]
 801825e:	e008      	b.n	8018272 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018260:	68fa      	ldr	r2, [r7, #12]
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	429a      	cmp	r2, r3
 8018266:	d101      	bne.n	801826c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018268:	2300      	movs	r3, #0
 801826a:	e00d      	b.n	8018288 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	68db      	ldr	r3, [r3, #12]
 8018270:	617b      	str	r3, [r7, #20]
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d1f3      	bne.n	8018260 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018278:	4b09      	ldr	r3, [pc, #36]	@ (80182a0 <udp_connect+0xd8>)
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018280:	4a07      	ldr	r2, [pc, #28]	@ (80182a0 <udp_connect+0xd8>)
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018286:	2300      	movs	r3, #0
}
 8018288:	4618      	mov	r0, r3
 801828a:	3718      	adds	r7, #24
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	08021608 	.word	0x08021608
 8018294:	080218e8 	.word	0x080218e8
 8018298:	0802165c 	.word	0x0802165c
 801829c:	08021904 	.word	0x08021904
 80182a0:	2400cc90 	.word	0x2400cc90

080182a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b084      	sub	sp, #16
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	60f8      	str	r0, [r7, #12]
 80182ac:	60b9      	str	r1, [r7, #8]
 80182ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d107      	bne.n	80182c6 <udp_recv+0x22>
 80182b6:	4b08      	ldr	r3, [pc, #32]	@ (80182d8 <udp_recv+0x34>)
 80182b8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80182bc:	4907      	ldr	r1, [pc, #28]	@ (80182dc <udp_recv+0x38>)
 80182be:	4808      	ldr	r0, [pc, #32]	@ (80182e0 <udp_recv+0x3c>)
 80182c0:	f005 f860 	bl	801d384 <iprintf>
 80182c4:	e005      	b.n	80182d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	68ba      	ldr	r2, [r7, #8]
 80182ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	61da      	str	r2, [r3, #28]
}
 80182d2:	3710      	adds	r7, #16
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}
 80182d8:	08021608 	.word	0x08021608
 80182dc:	0802193c 	.word	0x0802193c
 80182e0:	0802165c 	.word	0x0802165c

080182e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d107      	bne.n	8018302 <udp_remove+0x1e>
 80182f2:	4b19      	ldr	r3, [pc, #100]	@ (8018358 <udp_remove+0x74>)
 80182f4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80182f8:	4918      	ldr	r1, [pc, #96]	@ (801835c <udp_remove+0x78>)
 80182fa:	4819      	ldr	r0, [pc, #100]	@ (8018360 <udp_remove+0x7c>)
 80182fc:	f005 f842 	bl	801d384 <iprintf>
 8018300:	e026      	b.n	8018350 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018302:	4b18      	ldr	r3, [pc, #96]	@ (8018364 <udp_remove+0x80>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	429a      	cmp	r2, r3
 801830a:	d105      	bne.n	8018318 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801830c:	4b15      	ldr	r3, [pc, #84]	@ (8018364 <udp_remove+0x80>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	68db      	ldr	r3, [r3, #12]
 8018312:	4a14      	ldr	r2, [pc, #80]	@ (8018364 <udp_remove+0x80>)
 8018314:	6013      	str	r3, [r2, #0]
 8018316:	e017      	b.n	8018348 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018318:	4b12      	ldr	r3, [pc, #72]	@ (8018364 <udp_remove+0x80>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	60fb      	str	r3, [r7, #12]
 801831e:	e010      	b.n	8018342 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	68db      	ldr	r3, [r3, #12]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d009      	beq.n	801833c <udp_remove+0x58>
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	429a      	cmp	r2, r3
 8018330:	d104      	bne.n	801833c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	68da      	ldr	r2, [r3, #12]
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	60da      	str	r2, [r3, #12]
        break;
 801833a:	e005      	b.n	8018348 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	60fb      	str	r3, [r7, #12]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d1eb      	bne.n	8018320 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018348:	6879      	ldr	r1, [r7, #4]
 801834a:	2000      	movs	r0, #0
 801834c:	f7f8 ff6c 	bl	8011228 <memp_free>
}
 8018350:	3710      	adds	r7, #16
 8018352:	46bd      	mov	sp, r7
 8018354:	bd80      	pop	{r7, pc}
 8018356:	bf00      	nop
 8018358:	08021608 	.word	0x08021608
 801835c:	08021954 	.word	0x08021954
 8018360:	0802165c 	.word	0x0802165c
 8018364:	2400cc90 	.word	0x2400cc90

08018368 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b082      	sub	sp, #8
 801836c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801836e:	2000      	movs	r0, #0
 8018370:	f7f8 fee4 	bl	801113c <memp_malloc>
 8018374:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d007      	beq.n	801838c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801837c:	2220      	movs	r2, #32
 801837e:	2100      	movs	r1, #0
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	f005 f957 	bl	801d634 <memset>
    pcb->ttl = UDP_TTL;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	22ff      	movs	r2, #255	@ 0xff
 801838a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801838c:	687b      	ldr	r3, [r7, #4]
}
 801838e:	4618      	mov	r0, r3
 8018390:	3708      	adds	r7, #8
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
	...

08018398 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018398:	b480      	push	{r7}
 801839a:	b085      	sub	sp, #20
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d01e      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d01a      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d017      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d013      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183be:	4b0d      	ldr	r3, [pc, #52]	@ (80183f4 <udp_netif_ip_addr_changed+0x5c>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	60fb      	str	r3, [r7, #12]
 80183c4:	e00c      	b.n	80183e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d103      	bne.n	80183da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	68db      	ldr	r3, [r3, #12]
 80183de:	60fb      	str	r3, [r7, #12]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d1ef      	bne.n	80183c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80183e6:	bf00      	nop
 80183e8:	3714      	adds	r7, #20
 80183ea:	46bd      	mov	sp, r7
 80183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop
 80183f4:	2400cc90 	.word	0x2400cc90

080183f8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80183fc:	4b20      	ldr	r3, [pc, #128]	@ (8018480 <dhcp_inc_pcb_refcount+0x88>)
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d133      	bne.n	801846c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018404:	4b1f      	ldr	r3, [pc, #124]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d005      	beq.n	8018418 <dhcp_inc_pcb_refcount+0x20>
 801840c:	4b1e      	ldr	r3, [pc, #120]	@ (8018488 <dhcp_inc_pcb_refcount+0x90>)
 801840e:	22e5      	movs	r2, #229	@ 0xe5
 8018410:	491e      	ldr	r1, [pc, #120]	@ (801848c <dhcp_inc_pcb_refcount+0x94>)
 8018412:	481f      	ldr	r0, [pc, #124]	@ (8018490 <dhcp_inc_pcb_refcount+0x98>)
 8018414:	f004 ffb6 	bl	801d384 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018418:	f7ff ffa6 	bl	8018368 <udp_new>
 801841c:	4603      	mov	r3, r0
 801841e:	4a19      	ldr	r2, [pc, #100]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018420:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018422:	4b18      	ldr	r3, [pc, #96]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d102      	bne.n	8018430 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801842a:	f04f 33ff 	mov.w	r3, #4294967295
 801842e:	e024      	b.n	801847a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018430:	4b14      	ldr	r3, [pc, #80]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	7a5a      	ldrb	r2, [r3, #9]
 8018436:	4b13      	ldr	r3, [pc, #76]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	f042 0220 	orr.w	r2, r2, #32
 801843e:	b2d2      	uxtb	r2, r2
 8018440:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018442:	4b10      	ldr	r3, [pc, #64]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	2244      	movs	r2, #68	@ 0x44
 8018448:	4912      	ldr	r1, [pc, #72]	@ (8018494 <dhcp_inc_pcb_refcount+0x9c>)
 801844a:	4618      	mov	r0, r3
 801844c:	f7ff fe34 	bl	80180b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018450:	4b0c      	ldr	r3, [pc, #48]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2243      	movs	r2, #67	@ 0x43
 8018456:	490f      	ldr	r1, [pc, #60]	@ (8018494 <dhcp_inc_pcb_refcount+0x9c>)
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff feb5 	bl	80181c8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801845e:	4b09      	ldr	r3, [pc, #36]	@ (8018484 <dhcp_inc_pcb_refcount+0x8c>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	2200      	movs	r2, #0
 8018464:	490c      	ldr	r1, [pc, #48]	@ (8018498 <dhcp_inc_pcb_refcount+0xa0>)
 8018466:	4618      	mov	r0, r3
 8018468:	f7ff ff1c 	bl	80182a4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801846c:	4b04      	ldr	r3, [pc, #16]	@ (8018480 <dhcp_inc_pcb_refcount+0x88>)
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	3301      	adds	r3, #1
 8018472:	b2da      	uxtb	r2, r3
 8018474:	4b02      	ldr	r3, [pc, #8]	@ (8018480 <dhcp_inc_pcb_refcount+0x88>)
 8018476:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018478:	2300      	movs	r3, #0
}
 801847a:	4618      	mov	r0, r3
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	2400ccc0 	.word	0x2400ccc0
 8018484:	2400ccbc 	.word	0x2400ccbc
 8018488:	0802196c 	.word	0x0802196c
 801848c:	080219a4 	.word	0x080219a4
 8018490:	080219cc 	.word	0x080219cc
 8018494:	080225c0 	.word	0x080225c0
 8018498:	08019d25 	.word	0x08019d25

0801849c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80184a0:	4b0e      	ldr	r3, [pc, #56]	@ (80184dc <dhcp_dec_pcb_refcount+0x40>)
 80184a2:	781b      	ldrb	r3, [r3, #0]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d105      	bne.n	80184b4 <dhcp_dec_pcb_refcount+0x18>
 80184a8:	4b0d      	ldr	r3, [pc, #52]	@ (80184e0 <dhcp_dec_pcb_refcount+0x44>)
 80184aa:	22ff      	movs	r2, #255	@ 0xff
 80184ac:	490d      	ldr	r1, [pc, #52]	@ (80184e4 <dhcp_dec_pcb_refcount+0x48>)
 80184ae:	480e      	ldr	r0, [pc, #56]	@ (80184e8 <dhcp_dec_pcb_refcount+0x4c>)
 80184b0:	f004 ff68 	bl	801d384 <iprintf>
  dhcp_pcb_refcount--;
 80184b4:	4b09      	ldr	r3, [pc, #36]	@ (80184dc <dhcp_dec_pcb_refcount+0x40>)
 80184b6:	781b      	ldrb	r3, [r3, #0]
 80184b8:	3b01      	subs	r3, #1
 80184ba:	b2da      	uxtb	r2, r3
 80184bc:	4b07      	ldr	r3, [pc, #28]	@ (80184dc <dhcp_dec_pcb_refcount+0x40>)
 80184be:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80184c0:	4b06      	ldr	r3, [pc, #24]	@ (80184dc <dhcp_dec_pcb_refcount+0x40>)
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d107      	bne.n	80184d8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80184c8:	4b08      	ldr	r3, [pc, #32]	@ (80184ec <dhcp_dec_pcb_refcount+0x50>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7ff ff09 	bl	80182e4 <udp_remove>
    dhcp_pcb = NULL;
 80184d2:	4b06      	ldr	r3, [pc, #24]	@ (80184ec <dhcp_dec_pcb_refcount+0x50>)
 80184d4:	2200      	movs	r2, #0
 80184d6:	601a      	str	r2, [r3, #0]
  }
}
 80184d8:	bf00      	nop
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	2400ccc0 	.word	0x2400ccc0
 80184e0:	0802196c 	.word	0x0802196c
 80184e4:	080219f4 	.word	0x080219f4
 80184e8:	080219cc 	.word	0x080219cc
 80184ec:	2400ccbc 	.word	0x2400ccbc

080184f0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80184fe:	210c      	movs	r1, #12
 8018500:	68f8      	ldr	r0, [r7, #12]
 8018502:	f001 f851 	bl	80195a8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018506:	4b06      	ldr	r3, [pc, #24]	@ (8018520 <dhcp_handle_nak+0x30>)
 8018508:	4a05      	ldr	r2, [pc, #20]	@ (8018520 <dhcp_handle_nak+0x30>)
 801850a:	4905      	ldr	r1, [pc, #20]	@ (8018520 <dhcp_handle_nak+0x30>)
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f7f9 f82d 	bl	801156c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f000 fc4a 	bl	8018dac <dhcp_discover>
}
 8018518:	bf00      	nop
 801851a:	3710      	adds	r7, #16
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	080225c0 	.word	0x080225c0

08018524 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018530:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018532:	2108      	movs	r1, #8
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f001 f837 	bl	80195a8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	331c      	adds	r3, #28
 801853e:	2200      	movs	r2, #0
 8018540:	4619      	mov	r1, r3
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	f002 fb38 	bl	801abb8 <etharp_query>
 8018548:	4603      	mov	r3, r0
 801854a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	799b      	ldrb	r3, [r3, #6]
 8018550:	2bff      	cmp	r3, #255	@ 0xff
 8018552:	d005      	beq.n	8018560 <dhcp_check+0x3c>
    dhcp->tries++;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	799b      	ldrb	r3, [r3, #6]
 8018558:	3301      	adds	r3, #1
 801855a:	b2da      	uxtb	r2, r3
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018560:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8018564:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018566:	893b      	ldrh	r3, [r7, #8]
 8018568:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801856c:	4a06      	ldr	r2, [pc, #24]	@ (8018588 <dhcp_check+0x64>)
 801856e:	fb82 1203 	smull	r1, r2, r2, r3
 8018572:	1152      	asrs	r2, r2, #5
 8018574:	17db      	asrs	r3, r3, #31
 8018576:	1ad3      	subs	r3, r2, r3
 8018578:	b29a      	uxth	r2, r3
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801857e:	bf00      	nop
 8018580:	3710      	adds	r7, #16
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	10624dd3 	.word	0x10624dd3

0801858c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b084      	sub	sp, #16
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801859a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801859c:	4b0c      	ldr	r3, [pc, #48]	@ (80185d0 <dhcp_handle_offer+0x44>)
 801859e:	789b      	ldrb	r3, [r3, #2]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d011      	beq.n	80185c8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	2200      	movs	r2, #0
 80185a8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80185aa:	4b0a      	ldr	r3, [pc, #40]	@ (80185d4 <dhcp_handle_offer+0x48>)
 80185ac:	689b      	ldr	r3, [r3, #8]
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7f8 f849 	bl	8010646 <lwip_htonl>
 80185b4:	4602      	mov	r2, r0
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80185ba:	683b      	ldr	r3, [r7, #0]
 80185bc:	691a      	ldr	r2, [r3, #16]
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f000 f808 	bl	80185d8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80185c8:	bf00      	nop
 80185ca:	3710      	adds	r7, #16
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd80      	pop	{r7, pc}
 80185d0:	2400ccb4 	.word	0x2400ccb4
 80185d4:	2400cc94 	.word	0x2400cc94

080185d8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80185d8:	b5b0      	push	{r4, r5, r7, lr}
 80185da:	b08a      	sub	sp, #40	@ 0x28
 80185dc:	af02      	add	r7, sp, #8
 80185de:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d109      	bne.n	80185fa <dhcp_select+0x22>
 80185e6:	4b71      	ldr	r3, [pc, #452]	@ (80187ac <dhcp_select+0x1d4>)
 80185e8:	f240 1277 	movw	r2, #375	@ 0x177
 80185ec:	4970      	ldr	r1, [pc, #448]	@ (80187b0 <dhcp_select+0x1d8>)
 80185ee:	4871      	ldr	r0, [pc, #452]	@ (80187b4 <dhcp_select+0x1dc>)
 80185f0:	f004 fec8 	bl	801d384 <iprintf>
 80185f4:	f06f 030f 	mvn.w	r3, #15
 80185f8:	e0d3      	b.n	80187a2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185fe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018600:	69bb      	ldr	r3, [r7, #24]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d109      	bne.n	801861a <dhcp_select+0x42>
 8018606:	4b69      	ldr	r3, [pc, #420]	@ (80187ac <dhcp_select+0x1d4>)
 8018608:	f240 1279 	movw	r2, #377	@ 0x179
 801860c:	496a      	ldr	r1, [pc, #424]	@ (80187b8 <dhcp_select+0x1e0>)
 801860e:	4869      	ldr	r0, [pc, #420]	@ (80187b4 <dhcp_select+0x1dc>)
 8018610:	f004 feb8 	bl	801d384 <iprintf>
 8018614:	f06f 0305 	mvn.w	r3, #5
 8018618:	e0c3      	b.n	80187a2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801861a:	2101      	movs	r1, #1
 801861c:	69b8      	ldr	r0, [r7, #24]
 801861e:	f000 ffc3 	bl	80195a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018622:	f107 030c 	add.w	r3, r7, #12
 8018626:	2203      	movs	r2, #3
 8018628:	69b9      	ldr	r1, [r7, #24]
 801862a:	6878      	ldr	r0, [r7, #4]
 801862c:	f001 fc48 	bl	8019ec0 <dhcp_create_msg>
 8018630:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	2b00      	cmp	r3, #0
 8018636:	f000 8085 	beq.w	8018744 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018640:	89b8      	ldrh	r0, [r7, #12]
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018648:	2302      	movs	r3, #2
 801864a:	2239      	movs	r2, #57	@ 0x39
 801864c:	f000 ffc6 	bl	80195dc <dhcp_option>
 8018650:	4603      	mov	r3, r0
 8018652:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018654:	89b8      	ldrh	r0, [r7, #12]
 8018656:	693b      	ldr	r3, [r7, #16]
 8018658:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018660:	461a      	mov	r2, r3
 8018662:	f001 f815 	bl	8019690 <dhcp_option_short>
 8018666:	4603      	mov	r3, r0
 8018668:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801866a:	89b8      	ldrh	r0, [r7, #12]
 801866c:	693b      	ldr	r3, [r7, #16]
 801866e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018672:	2304      	movs	r3, #4
 8018674:	2232      	movs	r2, #50	@ 0x32
 8018676:	f000 ffb1 	bl	80195dc <dhcp_option>
 801867a:	4603      	mov	r3, r0
 801867c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801867e:	89bc      	ldrh	r4, [r7, #12]
 8018680:	693b      	ldr	r3, [r7, #16]
 8018682:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018686:	69bb      	ldr	r3, [r7, #24]
 8018688:	69db      	ldr	r3, [r3, #28]
 801868a:	4618      	mov	r0, r3
 801868c:	f7f7 ffdb 	bl	8010646 <lwip_htonl>
 8018690:	4603      	mov	r3, r0
 8018692:	461a      	mov	r2, r3
 8018694:	4629      	mov	r1, r5
 8018696:	4620      	mov	r0, r4
 8018698:	f001 f82c 	bl	80196f4 <dhcp_option_long>
 801869c:	4603      	mov	r3, r0
 801869e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80186a0:	89b8      	ldrh	r0, [r7, #12]
 80186a2:	693b      	ldr	r3, [r7, #16]
 80186a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186a8:	2304      	movs	r3, #4
 80186aa:	2236      	movs	r2, #54	@ 0x36
 80186ac:	f000 ff96 	bl	80195dc <dhcp_option>
 80186b0:	4603      	mov	r3, r0
 80186b2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80186b4:	89bc      	ldrh	r4, [r7, #12]
 80186b6:	693b      	ldr	r3, [r7, #16]
 80186b8:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80186bc:	69bb      	ldr	r3, [r7, #24]
 80186be:	699b      	ldr	r3, [r3, #24]
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7f7 ffc0 	bl	8010646 <lwip_htonl>
 80186c6:	4603      	mov	r3, r0
 80186c8:	461a      	mov	r2, r3
 80186ca:	4629      	mov	r1, r5
 80186cc:	4620      	mov	r0, r4
 80186ce:	f001 f811 	bl	80196f4 <dhcp_option_long>
 80186d2:	4603      	mov	r3, r0
 80186d4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80186d6:	89b8      	ldrh	r0, [r7, #12]
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186de:	2303      	movs	r3, #3
 80186e0:	2237      	movs	r2, #55	@ 0x37
 80186e2:	f000 ff7b 	bl	80195dc <dhcp_option>
 80186e6:	4603      	mov	r3, r0
 80186e8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80186ea:	2300      	movs	r3, #0
 80186ec:	77bb      	strb	r3, [r7, #30]
 80186ee:	e00e      	b.n	801870e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80186f0:	89b8      	ldrh	r0, [r7, #12]
 80186f2:	693b      	ldr	r3, [r7, #16]
 80186f4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186f8:	7fbb      	ldrb	r3, [r7, #30]
 80186fa:	4a30      	ldr	r2, [pc, #192]	@ (80187bc <dhcp_select+0x1e4>)
 80186fc:	5cd3      	ldrb	r3, [r2, r3]
 80186fe:	461a      	mov	r2, r3
 8018700:	f000 ffa0 	bl	8019644 <dhcp_option_byte>
 8018704:	4603      	mov	r3, r0
 8018706:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018708:	7fbb      	ldrb	r3, [r7, #30]
 801870a:	3301      	adds	r3, #1
 801870c:	77bb      	strb	r3, [r7, #30]
 801870e:	7fbb      	ldrb	r3, [r7, #30]
 8018710:	2b02      	cmp	r3, #2
 8018712:	d9ed      	bls.n	80186f0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018714:	89b8      	ldrh	r0, [r7, #12]
 8018716:	693b      	ldr	r3, [r7, #16]
 8018718:	33f0      	adds	r3, #240	@ 0xf0
 801871a:	697a      	ldr	r2, [r7, #20]
 801871c:	4619      	mov	r1, r3
 801871e:	f001 fca5 	bl	801a06c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018722:	4b27      	ldr	r3, [pc, #156]	@ (80187c0 <dhcp_select+0x1e8>)
 8018724:	6818      	ldr	r0, [r3, #0]
 8018726:	4b27      	ldr	r3, [pc, #156]	@ (80187c4 <dhcp_select+0x1ec>)
 8018728:	9301      	str	r3, [sp, #4]
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	2343      	movs	r3, #67	@ 0x43
 8018730:	4a25      	ldr	r2, [pc, #148]	@ (80187c8 <dhcp_select+0x1f0>)
 8018732:	6979      	ldr	r1, [r7, #20]
 8018734:	f7ff fbda 	bl	8017eec <udp_sendto_if_src>
 8018738:	4603      	mov	r3, r0
 801873a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801873c:	6978      	ldr	r0, [r7, #20]
 801873e:	f7f9 fc23 	bl	8011f88 <pbuf_free>
 8018742:	e001      	b.n	8018748 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018744:	23ff      	movs	r3, #255	@ 0xff
 8018746:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	799b      	ldrb	r3, [r3, #6]
 801874c:	2bff      	cmp	r3, #255	@ 0xff
 801874e:	d005      	beq.n	801875c <dhcp_select+0x184>
    dhcp->tries++;
 8018750:	69bb      	ldr	r3, [r7, #24]
 8018752:	799b      	ldrb	r3, [r3, #6]
 8018754:	3301      	adds	r3, #1
 8018756:	b2da      	uxtb	r2, r3
 8018758:	69bb      	ldr	r3, [r7, #24]
 801875a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801875c:	69bb      	ldr	r3, [r7, #24]
 801875e:	799b      	ldrb	r3, [r3, #6]
 8018760:	2b05      	cmp	r3, #5
 8018762:	d80d      	bhi.n	8018780 <dhcp_select+0x1a8>
 8018764:	69bb      	ldr	r3, [r7, #24]
 8018766:	799b      	ldrb	r3, [r3, #6]
 8018768:	461a      	mov	r2, r3
 801876a:	2301      	movs	r3, #1
 801876c:	4093      	lsls	r3, r2
 801876e:	b29b      	uxth	r3, r3
 8018770:	461a      	mov	r2, r3
 8018772:	0152      	lsls	r2, r2, #5
 8018774:	1ad2      	subs	r2, r2, r3
 8018776:	0092      	lsls	r2, r2, #2
 8018778:	4413      	add	r3, r2
 801877a:	00db      	lsls	r3, r3, #3
 801877c:	b29b      	uxth	r3, r3
 801877e:	e001      	b.n	8018784 <dhcp_select+0x1ac>
 8018780:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018784:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018786:	89fb      	ldrh	r3, [r7, #14]
 8018788:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801878c:	4a0f      	ldr	r2, [pc, #60]	@ (80187cc <dhcp_select+0x1f4>)
 801878e:	fb82 1203 	smull	r1, r2, r2, r3
 8018792:	1152      	asrs	r2, r2, #5
 8018794:	17db      	asrs	r3, r3, #31
 8018796:	1ad3      	subs	r3, r2, r3
 8018798:	b29a      	uxth	r2, r3
 801879a:	69bb      	ldr	r3, [r7, #24]
 801879c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801879e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187a2:	4618      	mov	r0, r3
 80187a4:	3720      	adds	r7, #32
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bdb0      	pop	{r4, r5, r7, pc}
 80187aa:	bf00      	nop
 80187ac:	0802196c 	.word	0x0802196c
 80187b0:	08021a18 	.word	0x08021a18
 80187b4:	080219cc 	.word	0x080219cc
 80187b8:	08021a34 	.word	0x08021a34
 80187bc:	24000034 	.word	0x24000034
 80187c0:	2400ccbc 	.word	0x2400ccbc
 80187c4:	080225c0 	.word	0x080225c0
 80187c8:	080225c4 	.word	0x080225c4
 80187cc:	10624dd3 	.word	0x10624dd3

080187d0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80187d6:	4b27      	ldr	r3, [pc, #156]	@ (8018874 <dhcp_coarse_tmr+0xa4>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	607b      	str	r3, [r7, #4]
 80187dc:	e042      	b.n	8018864 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187e2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d039      	beq.n	801885e <dhcp_coarse_tmr+0x8e>
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	795b      	ldrb	r3, [r3, #5]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d035      	beq.n	801885e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	8a9b      	ldrh	r3, [r3, #20]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d012      	beq.n	8018820 <dhcp_coarse_tmr+0x50>
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	8a5b      	ldrh	r3, [r3, #18]
 80187fe:	3301      	adds	r3, #1
 8018800:	b29a      	uxth	r2, r3
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	825a      	strh	r2, [r3, #18]
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	8a5a      	ldrh	r2, [r3, #18]
 801880a:	683b      	ldr	r3, [r7, #0]
 801880c:	8a9b      	ldrh	r3, [r3, #20]
 801880e:	429a      	cmp	r2, r3
 8018810:	d106      	bne.n	8018820 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f000 fe2e 	bl	8019474 <dhcp_release_and_stop>
        dhcp_start(netif);
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f000 f96b 	bl	8018af4 <dhcp_start>
 801881e:	e01e      	b.n	801885e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	8a1b      	ldrh	r3, [r3, #16]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d00b      	beq.n	8018840 <dhcp_coarse_tmr+0x70>
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	8a1b      	ldrh	r3, [r3, #16]
 801882c:	1e5a      	subs	r2, r3, #1
 801882e:	b291      	uxth	r1, r2
 8018830:	683a      	ldr	r2, [r7, #0]
 8018832:	8211      	strh	r1, [r2, #16]
 8018834:	2b01      	cmp	r3, #1
 8018836:	d103      	bne.n	8018840 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f000 f8c7 	bl	80189cc <dhcp_t2_timeout>
 801883e:	e00e      	b.n	801885e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8018840:	683b      	ldr	r3, [r7, #0]
 8018842:	89db      	ldrh	r3, [r3, #14]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d00a      	beq.n	801885e <dhcp_coarse_tmr+0x8e>
 8018848:	683b      	ldr	r3, [r7, #0]
 801884a:	89db      	ldrh	r3, [r3, #14]
 801884c:	1e5a      	subs	r2, r3, #1
 801884e:	b291      	uxth	r1, r2
 8018850:	683a      	ldr	r2, [r7, #0]
 8018852:	81d1      	strh	r1, [r2, #14]
 8018854:	2b01      	cmp	r3, #1
 8018856:	d102      	bne.n	801885e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f000 f888 	bl	801896e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	607b      	str	r3, [r7, #4]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1b9      	bne.n	80187de <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801886a:	bf00      	nop
 801886c:	bf00      	nop
 801886e:	3708      	adds	r7, #8
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	2400cc28 	.word	0x2400cc28

08018878 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801887e:	4b16      	ldr	r3, [pc, #88]	@ (80188d8 <dhcp_fine_tmr+0x60>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	607b      	str	r3, [r7, #4]
 8018884:	e020      	b.n	80188c8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801888a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d017      	beq.n	80188c2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	891b      	ldrh	r3, [r3, #8]
 8018896:	2b01      	cmp	r3, #1
 8018898:	d906      	bls.n	80188a8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	891b      	ldrh	r3, [r3, #8]
 801889e:	3b01      	subs	r3, #1
 80188a0:	b29a      	uxth	r2, r3
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	811a      	strh	r2, [r3, #8]
 80188a6:	e00c      	b.n	80188c2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	891b      	ldrh	r3, [r3, #8]
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	d108      	bne.n	80188c2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	891b      	ldrh	r3, [r3, #8]
 80188b4:	3b01      	subs	r3, #1
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f000 f80d 	bl	80188dc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	607b      	str	r3, [r7, #4]
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d1db      	bne.n	8018886 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80188ce:	bf00      	nop
 80188d0:	bf00      	nop
 80188d2:	3708      	adds	r7, #8
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	2400cc28 	.word	0x2400cc28

080188dc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	795b      	ldrb	r3, [r3, #5]
 80188ee:	2b0c      	cmp	r3, #12
 80188f0:	d003      	beq.n	80188fa <dhcp_timeout+0x1e>
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	795b      	ldrb	r3, [r3, #5]
 80188f6:	2b06      	cmp	r3, #6
 80188f8:	d103      	bne.n	8018902 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f000 fa56 	bl	8018dac <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018900:	e031      	b.n	8018966 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	795b      	ldrb	r3, [r3, #5]
 8018906:	2b01      	cmp	r3, #1
 8018908:	d10e      	bne.n	8018928 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	799b      	ldrb	r3, [r3, #6]
 801890e:	2b05      	cmp	r3, #5
 8018910:	d803      	bhi.n	801891a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	f7ff fe60 	bl	80185d8 <dhcp_select>
}
 8018918:	e025      	b.n	8018966 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f000 fdaa 	bl	8019474 <dhcp_release_and_stop>
      dhcp_start(netif);
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f000 f8e7 	bl	8018af4 <dhcp_start>
}
 8018926:	e01e      	b.n	8018966 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	795b      	ldrb	r3, [r3, #5]
 801892c:	2b08      	cmp	r3, #8
 801892e:	d10b      	bne.n	8018948 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	799b      	ldrb	r3, [r3, #6]
 8018934:	2b01      	cmp	r3, #1
 8018936:	d803      	bhi.n	8018940 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f7ff fdf3 	bl	8018524 <dhcp_check>
}
 801893e:	e012      	b.n	8018966 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f000 fad5 	bl	8018ef0 <dhcp_bind>
}
 8018946:	e00e      	b.n	8018966 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	795b      	ldrb	r3, [r3, #5]
 801894c:	2b03      	cmp	r3, #3
 801894e:	d10a      	bne.n	8018966 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	799b      	ldrb	r3, [r3, #6]
 8018954:	2b01      	cmp	r3, #1
 8018956:	d803      	bhi.n	8018960 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f000 fcd7 	bl	801930c <dhcp_reboot>
}
 801895e:	e002      	b.n	8018966 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f000 fa23 	bl	8018dac <dhcp_discover>
}
 8018966:	bf00      	nop
 8018968:	3710      	adds	r7, #16
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}

0801896e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801896e:	b580      	push	{r7, lr}
 8018970:	b084      	sub	sp, #16
 8018972:	af00      	add	r7, sp, #0
 8018974:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801897a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	795b      	ldrb	r3, [r3, #5]
 8018980:	2b01      	cmp	r3, #1
 8018982:	d007      	beq.n	8018994 <dhcp_t1_timeout+0x26>
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	795b      	ldrb	r3, [r3, #5]
 8018988:	2b0a      	cmp	r3, #10
 801898a:	d003      	beq.n	8018994 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018990:	2b05      	cmp	r3, #5
 8018992:	d117      	bne.n	80189c4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f000 fb85 	bl	80190a4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	899b      	ldrh	r3, [r3, #12]
 801899e:	461a      	mov	r2, r3
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	8a5b      	ldrh	r3, [r3, #18]
 80189a4:	1ad3      	subs	r3, r2, r3
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	dd0c      	ble.n	80189c4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	899b      	ldrh	r3, [r3, #12]
 80189ae:	461a      	mov	r2, r3
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	8a5b      	ldrh	r3, [r3, #18]
 80189b4:	1ad3      	subs	r3, r2, r3
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	da00      	bge.n	80189bc <dhcp_t1_timeout+0x4e>
 80189ba:	3301      	adds	r3, #1
 80189bc:	105b      	asrs	r3, r3, #1
 80189be:	b29a      	uxth	r2, r3
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80189c4:	bf00      	nop
 80189c6:	3710      	adds	r7, #16
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}

080189cc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b084      	sub	sp, #16
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	795b      	ldrb	r3, [r3, #5]
 80189de:	2b01      	cmp	r3, #1
 80189e0:	d00b      	beq.n	80189fa <dhcp_t2_timeout+0x2e>
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	795b      	ldrb	r3, [r3, #5]
 80189e6:	2b0a      	cmp	r3, #10
 80189e8:	d007      	beq.n	80189fa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80189ee:	2b05      	cmp	r3, #5
 80189f0:	d003      	beq.n	80189fa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	795b      	ldrb	r3, [r3, #5]
 80189f6:	2b04      	cmp	r3, #4
 80189f8:	d117      	bne.n	8018a2a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	f000 fbec 	bl	80191d8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	8a9b      	ldrh	r3, [r3, #20]
 8018a04:	461a      	mov	r2, r3
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	8a5b      	ldrh	r3, [r3, #18]
 8018a0a:	1ad3      	subs	r3, r2, r3
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	dd0c      	ble.n	8018a2a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	8a9b      	ldrh	r3, [r3, #20]
 8018a14:	461a      	mov	r2, r3
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	8a5b      	ldrh	r3, [r3, #18]
 8018a1a:	1ad3      	subs	r3, r2, r3
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	da00      	bge.n	8018a22 <dhcp_t2_timeout+0x56>
 8018a20:	3301      	adds	r3, #1
 8018a22:	105b      	asrs	r3, r3, #1
 8018a24:	b29a      	uxth	r2, r3
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018a2a:	bf00      	nop
 8018a2c:	3710      	adds	r7, #16
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	bd80      	pop	{r7, pc}
	...

08018a34 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
 8018a3c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a42:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2200      	movs	r2, #0
 8018a48:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018a50:	4b26      	ldr	r3, [pc, #152]	@ (8018aec <dhcp_handle_ack+0xb8>)
 8018a52:	78db      	ldrb	r3, [r3, #3]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d003      	beq.n	8018a60 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018a58:	4b25      	ldr	r3, [pc, #148]	@ (8018af0 <dhcp_handle_ack+0xbc>)
 8018a5a:	68da      	ldr	r2, [r3, #12]
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018a60:	4b22      	ldr	r3, [pc, #136]	@ (8018aec <dhcp_handle_ack+0xb8>)
 8018a62:	791b      	ldrb	r3, [r3, #4]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d004      	beq.n	8018a72 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018a68:	4b21      	ldr	r3, [pc, #132]	@ (8018af0 <dhcp_handle_ack+0xbc>)
 8018a6a:	691a      	ldr	r2, [r3, #16]
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018a70:	e004      	b.n	8018a7c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a76:	085a      	lsrs	r2, r3, #1
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8018aec <dhcp_handle_ack+0xb8>)
 8018a7e:	795b      	ldrb	r3, [r3, #5]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d004      	beq.n	8018a8e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018a84:	4b1a      	ldr	r3, [pc, #104]	@ (8018af0 <dhcp_handle_ack+0xbc>)
 8018a86:	695a      	ldr	r2, [r3, #20]
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8018a8c:	e007      	b.n	8018a9e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018a92:	4613      	mov	r3, r2
 8018a94:	00db      	lsls	r3, r3, #3
 8018a96:	1a9b      	subs	r3, r3, r2
 8018a98:	08da      	lsrs	r2, r3, #3
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018a9e:	683b      	ldr	r3, [r7, #0]
 8018aa0:	691a      	ldr	r2, [r3, #16]
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018aa6:	4b11      	ldr	r3, [pc, #68]	@ (8018aec <dhcp_handle_ack+0xb8>)
 8018aa8:	799b      	ldrb	r3, [r3, #6]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d00b      	beq.n	8018ac6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018aae:	4b10      	ldr	r3, [pc, #64]	@ (8018af0 <dhcp_handle_ack+0xbc>)
 8018ab0:	699b      	ldr	r3, [r3, #24]
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7f7 fdc7 	bl	8010646 <lwip_htonl>
 8018ab8:	4602      	mov	r2, r0
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	71da      	strb	r2, [r3, #7]
 8018ac4:	e002      	b.n	8018acc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	2200      	movs	r2, #0
 8018aca:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018acc:	4b07      	ldr	r3, [pc, #28]	@ (8018aec <dhcp_handle_ack+0xb8>)
 8018ace:	79db      	ldrb	r3, [r3, #7]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d007      	beq.n	8018ae4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018ad4:	4b06      	ldr	r3, [pc, #24]	@ (8018af0 <dhcp_handle_ack+0xbc>)
 8018ad6:	69db      	ldr	r3, [r3, #28]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f7f7 fdb4 	bl	8010646 <lwip_htonl>
 8018ade:	4602      	mov	r2, r0
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018ae4:	bf00      	nop
 8018ae6:	3710      	adds	r7, #16
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}
 8018aec:	2400ccb4 	.word	0x2400ccb4
 8018af0:	2400cc94 	.word	0x2400cc94

08018af4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b084      	sub	sp, #16
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d109      	bne.n	8018b16 <dhcp_start+0x22>
 8018b02:	4b37      	ldr	r3, [pc, #220]	@ (8018be0 <dhcp_start+0xec>)
 8018b04:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018b08:	4936      	ldr	r1, [pc, #216]	@ (8018be4 <dhcp_start+0xf0>)
 8018b0a:	4837      	ldr	r0, [pc, #220]	@ (8018be8 <dhcp_start+0xf4>)
 8018b0c:	f004 fc3a 	bl	801d384 <iprintf>
 8018b10:	f06f 030f 	mvn.w	r3, #15
 8018b14:	e060      	b.n	8018bd8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018b1c:	f003 0301 	and.w	r3, r3, #1
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d109      	bne.n	8018b38 <dhcp_start+0x44>
 8018b24:	4b2e      	ldr	r3, [pc, #184]	@ (8018be0 <dhcp_start+0xec>)
 8018b26:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018b2a:	4930      	ldr	r1, [pc, #192]	@ (8018bec <dhcp_start+0xf8>)
 8018b2c:	482e      	ldr	r0, [pc, #184]	@ (8018be8 <dhcp_start+0xf4>)
 8018b2e:	f004 fc29 	bl	801d384 <iprintf>
 8018b32:	f06f 030f 	mvn.w	r3, #15
 8018b36:	e04f      	b.n	8018bd8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b3c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018b42:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018b46:	d202      	bcs.n	8018b4e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018b48:	f04f 33ff 	mov.w	r3, #4294967295
 8018b4c:	e044      	b.n	8018bd8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d10d      	bne.n	8018b70 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018b54:	2034      	movs	r0, #52	@ 0x34
 8018b56:	f7f8 f94d 	bl	8010df4 <mem_malloc>
 8018b5a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d102      	bne.n	8018b68 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018b62:	f04f 33ff 	mov.w	r3, #4294967295
 8018b66:	e037      	b.n	8018bd8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	68fa      	ldr	r2, [r7, #12]
 8018b6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8018b6e:	e005      	b.n	8018b7c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	791b      	ldrb	r3, [r3, #4]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d001      	beq.n	8018b7c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018b78:	f7ff fc90 	bl	801849c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8018b7c:	2234      	movs	r2, #52	@ 0x34
 8018b7e:	2100      	movs	r1, #0
 8018b80:	68f8      	ldr	r0, [r7, #12]
 8018b82:	f004 fd57 	bl	801d634 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8018b86:	f7ff fc37 	bl	80183f8 <dhcp_inc_pcb_refcount>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d002      	beq.n	8018b96 <dhcp_start+0xa2>
    return ERR_MEM;
 8018b90:	f04f 33ff 	mov.w	r3, #4294967295
 8018b94:	e020      	b.n	8018bd8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	2201      	movs	r2, #1
 8018b9a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018ba2:	f003 0304 	and.w	r3, r3, #4
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d105      	bne.n	8018bb6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8018baa:	2102      	movs	r1, #2
 8018bac:	68f8      	ldr	r0, [r7, #12]
 8018bae:	f000 fcfb 	bl	80195a8 <dhcp_set_state>
    return ERR_OK;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	e010      	b.n	8018bd8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f000 f8f8 	bl	8018dac <dhcp_discover>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8018bc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d005      	beq.n	8018bd4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f000 fc53 	bl	8019474 <dhcp_release_and_stop>
    return ERR_MEM;
 8018bce:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd2:	e001      	b.n	8018bd8 <dhcp_start+0xe4>
  }
  return result;
 8018bd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3710      	adds	r7, #16
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	0802196c 	.word	0x0802196c
 8018be4:	08021a50 	.word	0x08021a50
 8018be8:	080219cc 	.word	0x080219cc
 8018bec:	08021a94 	.word	0x08021a94

08018bf0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b084      	sub	sp, #16
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bfc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d025      	beq.n	8018c50 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	795b      	ldrb	r3, [r3, #5]
 8018c08:	2b0a      	cmp	r3, #10
 8018c0a:	d008      	beq.n	8018c1e <dhcp_network_changed+0x2e>
 8018c0c:	2b0a      	cmp	r3, #10
 8018c0e:	dc0d      	bgt.n	8018c2c <dhcp_network_changed+0x3c>
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d01f      	beq.n	8018c54 <dhcp_network_changed+0x64>
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	db09      	blt.n	8018c2c <dhcp_network_changed+0x3c>
 8018c18:	3b03      	subs	r3, #3
 8018c1a:	2b02      	cmp	r3, #2
 8018c1c:	d806      	bhi.n	8018c2c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	2200      	movs	r2, #0
 8018c22:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8018c24:	6878      	ldr	r0, [r7, #4]
 8018c26:	f000 fb71 	bl	801930c <dhcp_reboot>
      break;
 8018c2a:	e014      	b.n	8018c56 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	795b      	ldrb	r3, [r3, #5]
 8018c30:	2b0c      	cmp	r3, #12
 8018c32:	d906      	bls.n	8018c42 <dhcp_network_changed+0x52>
 8018c34:	4b09      	ldr	r3, [pc, #36]	@ (8018c5c <dhcp_network_changed+0x6c>)
 8018c36:	f240 326d 	movw	r2, #877	@ 0x36d
 8018c3a:	4909      	ldr	r1, [pc, #36]	@ (8018c60 <dhcp_network_changed+0x70>)
 8018c3c:	4809      	ldr	r0, [pc, #36]	@ (8018c64 <dhcp_network_changed+0x74>)
 8018c3e:	f004 fba1 	bl	801d384 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	2200      	movs	r2, #0
 8018c46:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f000 f8af 	bl	8018dac <dhcp_discover>
      break;
 8018c4e:	e002      	b.n	8018c56 <dhcp_network_changed+0x66>
    return;
 8018c50:	bf00      	nop
 8018c52:	e000      	b.n	8018c56 <dhcp_network_changed+0x66>
      break;
 8018c54:	bf00      	nop
  }
}
 8018c56:	3710      	adds	r7, #16
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	0802196c 	.word	0x0802196c
 8018c60:	08021ab8 	.word	0x08021ab8
 8018c64:	080219cc 	.word	0x080219cc

08018c68 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b084      	sub	sp, #16
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d107      	bne.n	8018c88 <dhcp_arp_reply+0x20>
 8018c78:	4b0e      	ldr	r3, [pc, #56]	@ (8018cb4 <dhcp_arp_reply+0x4c>)
 8018c7a:	f240 328b 	movw	r2, #907	@ 0x38b
 8018c7e:	490e      	ldr	r1, [pc, #56]	@ (8018cb8 <dhcp_arp_reply+0x50>)
 8018c80:	480e      	ldr	r0, [pc, #56]	@ (8018cbc <dhcp_arp_reply+0x54>)
 8018c82:	f004 fb7f 	bl	801d384 <iprintf>
 8018c86:	e012      	b.n	8018cae <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c8c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d00c      	beq.n	8018cae <dhcp_arp_reply+0x46>
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	795b      	ldrb	r3, [r3, #5]
 8018c98:	2b08      	cmp	r3, #8
 8018c9a:	d108      	bne.n	8018cae <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	681a      	ldr	r2, [r3, #0]
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	69db      	ldr	r3, [r3, #28]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d102      	bne.n	8018cae <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f000 f809 	bl	8018cc0 <dhcp_decline>
    }
  }
}
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	0802196c 	.word	0x0802196c
 8018cb8:	08021a50 	.word	0x08021a50
 8018cbc:	080219cc 	.word	0x080219cc

08018cc0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8018cc0:	b5b0      	push	{r4, r5, r7, lr}
 8018cc2:	b08a      	sub	sp, #40	@ 0x28
 8018cc4:	af02      	add	r7, sp, #8
 8018cc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ccc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018cce:	210c      	movs	r1, #12
 8018cd0:	69b8      	ldr	r0, [r7, #24]
 8018cd2:	f000 fc69 	bl	80195a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8018cd6:	f107 030c 	add.w	r3, r7, #12
 8018cda:	2204      	movs	r2, #4
 8018cdc:	69b9      	ldr	r1, [r7, #24]
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f001 f8ee 	bl	8019ec0 <dhcp_create_msg>
 8018ce4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d035      	beq.n	8018d58 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	685b      	ldr	r3, [r3, #4]
 8018cf0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018cf2:	89b8      	ldrh	r0, [r7, #12]
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018cfa:	2304      	movs	r3, #4
 8018cfc:	2232      	movs	r2, #50	@ 0x32
 8018cfe:	f000 fc6d 	bl	80195dc <dhcp_option>
 8018d02:	4603      	mov	r3, r0
 8018d04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018d06:	89bc      	ldrh	r4, [r7, #12]
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018d0e:	69bb      	ldr	r3, [r7, #24]
 8018d10:	69db      	ldr	r3, [r3, #28]
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7f7 fc97 	bl	8010646 <lwip_htonl>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f000 fce8 	bl	80196f4 <dhcp_option_long>
 8018d24:	4603      	mov	r3, r0
 8018d26:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018d28:	89b8      	ldrh	r0, [r7, #12]
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	33f0      	adds	r3, #240	@ 0xf0
 8018d2e:	697a      	ldr	r2, [r7, #20]
 8018d30:	4619      	mov	r1, r3
 8018d32:	f001 f99b 	bl	801a06c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018d36:	4b19      	ldr	r3, [pc, #100]	@ (8018d9c <dhcp_decline+0xdc>)
 8018d38:	6818      	ldr	r0, [r3, #0]
 8018d3a:	4b19      	ldr	r3, [pc, #100]	@ (8018da0 <dhcp_decline+0xe0>)
 8018d3c:	9301      	str	r3, [sp, #4]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	9300      	str	r3, [sp, #0]
 8018d42:	2343      	movs	r3, #67	@ 0x43
 8018d44:	4a17      	ldr	r2, [pc, #92]	@ (8018da4 <dhcp_decline+0xe4>)
 8018d46:	6979      	ldr	r1, [r7, #20]
 8018d48:	f7ff f8d0 	bl	8017eec <udp_sendto_if_src>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018d50:	6978      	ldr	r0, [r7, #20]
 8018d52:	f7f9 f919 	bl	8011f88 <pbuf_free>
 8018d56:	e001      	b.n	8018d5c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018d58:	23ff      	movs	r3, #255	@ 0xff
 8018d5a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018d5c:	69bb      	ldr	r3, [r7, #24]
 8018d5e:	799b      	ldrb	r3, [r3, #6]
 8018d60:	2bff      	cmp	r3, #255	@ 0xff
 8018d62:	d005      	beq.n	8018d70 <dhcp_decline+0xb0>
    dhcp->tries++;
 8018d64:	69bb      	ldr	r3, [r7, #24]
 8018d66:	799b      	ldrb	r3, [r3, #6]
 8018d68:	3301      	adds	r3, #1
 8018d6a:	b2da      	uxtb	r2, r3
 8018d6c:	69bb      	ldr	r3, [r7, #24]
 8018d6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8018d70:	f242 7310 	movw	r3, #10000	@ 0x2710
 8018d74:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018d76:	89fb      	ldrh	r3, [r7, #14]
 8018d78:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8018da8 <dhcp_decline+0xe8>)
 8018d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8018d82:	1152      	asrs	r2, r2, #5
 8018d84:	17db      	asrs	r3, r3, #31
 8018d86:	1ad3      	subs	r3, r2, r3
 8018d88:	b29a      	uxth	r2, r3
 8018d8a:	69bb      	ldr	r3, [r7, #24]
 8018d8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	3720      	adds	r7, #32
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bdb0      	pop	{r4, r5, r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	2400ccbc 	.word	0x2400ccbc
 8018da0:	080225c0 	.word	0x080225c0
 8018da4:	080225c4 	.word	0x080225c4
 8018da8:	10624dd3 	.word	0x10624dd3

08018dac <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b08a      	sub	sp, #40	@ 0x28
 8018db0:	af02      	add	r7, sp, #8
 8018db2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018db8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018dc4:	2106      	movs	r1, #6
 8018dc6:	69b8      	ldr	r0, [r7, #24]
 8018dc8:	f000 fbee 	bl	80195a8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018dcc:	f107 0308 	add.w	r3, r7, #8
 8018dd0:	2201      	movs	r2, #1
 8018dd2:	69b9      	ldr	r1, [r7, #24]
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f001 f873 	bl	8019ec0 <dhcp_create_msg>
 8018dda:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018ddc:	693b      	ldr	r3, [r7, #16]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d04b      	beq.n	8018e7a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018de8:	8938      	ldrh	r0, [r7, #8]
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018df0:	2302      	movs	r3, #2
 8018df2:	2239      	movs	r2, #57	@ 0x39
 8018df4:	f000 fbf2 	bl	80195dc <dhcp_option>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018dfc:	8938      	ldrh	r0, [r7, #8]
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018e08:	461a      	mov	r2, r3
 8018e0a:	f000 fc41 	bl	8019690 <dhcp_option_short>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018e12:	8938      	ldrh	r0, [r7, #8]
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e1a:	2303      	movs	r3, #3
 8018e1c:	2237      	movs	r2, #55	@ 0x37
 8018e1e:	f000 fbdd 	bl	80195dc <dhcp_option>
 8018e22:	4603      	mov	r3, r0
 8018e24:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018e26:	2300      	movs	r3, #0
 8018e28:	77fb      	strb	r3, [r7, #31]
 8018e2a:	e00e      	b.n	8018e4a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018e2c:	8938      	ldrh	r0, [r7, #8]
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e34:	7ffb      	ldrb	r3, [r7, #31]
 8018e36:	4a29      	ldr	r2, [pc, #164]	@ (8018edc <dhcp_discover+0x130>)
 8018e38:	5cd3      	ldrb	r3, [r2, r3]
 8018e3a:	461a      	mov	r2, r3
 8018e3c:	f000 fc02 	bl	8019644 <dhcp_option_byte>
 8018e40:	4603      	mov	r3, r0
 8018e42:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018e44:	7ffb      	ldrb	r3, [r7, #31]
 8018e46:	3301      	adds	r3, #1
 8018e48:	77fb      	strb	r3, [r7, #31]
 8018e4a:	7ffb      	ldrb	r3, [r7, #31]
 8018e4c:	2b02      	cmp	r3, #2
 8018e4e:	d9ed      	bls.n	8018e2c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018e50:	8938      	ldrh	r0, [r7, #8]
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	33f0      	adds	r3, #240	@ 0xf0
 8018e56:	693a      	ldr	r2, [r7, #16]
 8018e58:	4619      	mov	r1, r3
 8018e5a:	f001 f907 	bl	801a06c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018e5e:	4b20      	ldr	r3, [pc, #128]	@ (8018ee0 <dhcp_discover+0x134>)
 8018e60:	6818      	ldr	r0, [r3, #0]
 8018e62:	4b20      	ldr	r3, [pc, #128]	@ (8018ee4 <dhcp_discover+0x138>)
 8018e64:	9301      	str	r3, [sp, #4]
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	9300      	str	r3, [sp, #0]
 8018e6a:	2343      	movs	r3, #67	@ 0x43
 8018e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8018ee8 <dhcp_discover+0x13c>)
 8018e6e:	6939      	ldr	r1, [r7, #16]
 8018e70:	f7ff f83c 	bl	8017eec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8018e74:	6938      	ldr	r0, [r7, #16]
 8018e76:	f7f9 f887 	bl	8011f88 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8018e7a:	69bb      	ldr	r3, [r7, #24]
 8018e7c:	799b      	ldrb	r3, [r3, #6]
 8018e7e:	2bff      	cmp	r3, #255	@ 0xff
 8018e80:	d005      	beq.n	8018e8e <dhcp_discover+0xe2>
    dhcp->tries++;
 8018e82:	69bb      	ldr	r3, [r7, #24]
 8018e84:	799b      	ldrb	r3, [r3, #6]
 8018e86:	3301      	adds	r3, #1
 8018e88:	b2da      	uxtb	r2, r3
 8018e8a:	69bb      	ldr	r3, [r7, #24]
 8018e8c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018e8e:	69bb      	ldr	r3, [r7, #24]
 8018e90:	799b      	ldrb	r3, [r3, #6]
 8018e92:	2b05      	cmp	r3, #5
 8018e94:	d80d      	bhi.n	8018eb2 <dhcp_discover+0x106>
 8018e96:	69bb      	ldr	r3, [r7, #24]
 8018e98:	799b      	ldrb	r3, [r3, #6]
 8018e9a:	461a      	mov	r2, r3
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	4093      	lsls	r3, r2
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	461a      	mov	r2, r3
 8018ea4:	0152      	lsls	r2, r2, #5
 8018ea6:	1ad2      	subs	r2, r2, r3
 8018ea8:	0092      	lsls	r2, r2, #2
 8018eaa:	4413      	add	r3, r2
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	e001      	b.n	8018eb6 <dhcp_discover+0x10a>
 8018eb2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018eb6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018eb8:	897b      	ldrh	r3, [r7, #10]
 8018eba:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8018eec <dhcp_discover+0x140>)
 8018ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8018ec4:	1152      	asrs	r2, r2, #5
 8018ec6:	17db      	asrs	r3, r3, #31
 8018ec8:	1ad3      	subs	r3, r2, r3
 8018eca:	b29a      	uxth	r2, r3
 8018ecc:	69bb      	ldr	r3, [r7, #24]
 8018ece:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3720      	adds	r7, #32
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}
 8018edc:	24000034 	.word	0x24000034
 8018ee0:	2400ccbc 	.word	0x2400ccbc
 8018ee4:	080225c0 	.word	0x080225c0
 8018ee8:	080225c4 	.word	0x080225c4
 8018eec:	10624dd3 	.word	0x10624dd3

08018ef0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b088      	sub	sp, #32
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d107      	bne.n	8018f0e <dhcp_bind+0x1e>
 8018efe:	4b64      	ldr	r3, [pc, #400]	@ (8019090 <dhcp_bind+0x1a0>)
 8018f00:	f240 4215 	movw	r2, #1045	@ 0x415
 8018f04:	4963      	ldr	r1, [pc, #396]	@ (8019094 <dhcp_bind+0x1a4>)
 8018f06:	4864      	ldr	r0, [pc, #400]	@ (8019098 <dhcp_bind+0x1a8>)
 8018f08:	f004 fa3c 	bl	801d384 <iprintf>
 8018f0c:	e0bc      	b.n	8019088 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f12:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018f14:	69bb      	ldr	r3, [r7, #24]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d107      	bne.n	8018f2a <dhcp_bind+0x3a>
 8018f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8019090 <dhcp_bind+0x1a0>)
 8018f1c:	f240 4217 	movw	r2, #1047	@ 0x417
 8018f20:	495e      	ldr	r1, [pc, #376]	@ (801909c <dhcp_bind+0x1ac>)
 8018f22:	485d      	ldr	r0, [pc, #372]	@ (8019098 <dhcp_bind+0x1a8>)
 8018f24:	f004 fa2e 	bl	801d384 <iprintf>
 8018f28:	e0ae      	b.n	8019088 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8018f2a:	69bb      	ldr	r3, [r7, #24]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018f30:	69bb      	ldr	r3, [r7, #24]
 8018f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f38:	d019      	beq.n	8018f6e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018f3a:	69bb      	ldr	r3, [r7, #24]
 8018f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f3e:	331e      	adds	r3, #30
 8018f40:	4a57      	ldr	r2, [pc, #348]	@ (80190a0 <dhcp_bind+0x1b0>)
 8018f42:	fba2 2303 	umull	r2, r3, r2, r3
 8018f46:	095b      	lsrs	r3, r3, #5
 8018f48:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018f4a:	69fb      	ldr	r3, [r7, #28]
 8018f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018f50:	d302      	bcc.n	8018f58 <dhcp_bind+0x68>
      timeout = 0xffff;
 8018f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018f56:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8018f58:	69fb      	ldr	r3, [r7, #28]
 8018f5a:	b29a      	uxth	r2, r3
 8018f5c:	69bb      	ldr	r3, [r7, #24]
 8018f5e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	8a9b      	ldrh	r3, [r3, #20]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d102      	bne.n	8018f6e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8018f68:	69bb      	ldr	r3, [r7, #24]
 8018f6a:	2201      	movs	r2, #1
 8018f6c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8018f6e:	69bb      	ldr	r3, [r7, #24]
 8018f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f76:	d01d      	beq.n	8018fb4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f7c:	331e      	adds	r3, #30
 8018f7e:	4a48      	ldr	r2, [pc, #288]	@ (80190a0 <dhcp_bind+0x1b0>)
 8018f80:	fba2 2303 	umull	r2, r3, r2, r3
 8018f84:	095b      	lsrs	r3, r3, #5
 8018f86:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018f88:	69fb      	ldr	r3, [r7, #28]
 8018f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018f8e:	d302      	bcc.n	8018f96 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8018f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018f94:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8018f96:	69fb      	ldr	r3, [r7, #28]
 8018f98:	b29a      	uxth	r2, r3
 8018f9a:	69bb      	ldr	r3, [r7, #24]
 8018f9c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8018f9e:	69bb      	ldr	r3, [r7, #24]
 8018fa0:	895b      	ldrh	r3, [r3, #10]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d102      	bne.n	8018fac <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8018fa6:	69bb      	ldr	r3, [r7, #24]
 8018fa8:	2201      	movs	r2, #1
 8018faa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8018fac:	69bb      	ldr	r3, [r7, #24]
 8018fae:	895a      	ldrh	r2, [r3, #10]
 8018fb0:	69bb      	ldr	r3, [r7, #24]
 8018fb2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8018fb4:	69bb      	ldr	r3, [r7, #24]
 8018fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fbc:	d01d      	beq.n	8018ffa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018fbe:	69bb      	ldr	r3, [r7, #24]
 8018fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018fc2:	331e      	adds	r3, #30
 8018fc4:	4a36      	ldr	r2, [pc, #216]	@ (80190a0 <dhcp_bind+0x1b0>)
 8018fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8018fca:	095b      	lsrs	r3, r3, #5
 8018fcc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018fce:	69fb      	ldr	r3, [r7, #28]
 8018fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018fd4:	d302      	bcc.n	8018fdc <dhcp_bind+0xec>
      timeout = 0xffff;
 8018fd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018fda:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8018fdc:	69fb      	ldr	r3, [r7, #28]
 8018fde:	b29a      	uxth	r2, r3
 8018fe0:	69bb      	ldr	r3, [r7, #24]
 8018fe2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8018fe4:	69bb      	ldr	r3, [r7, #24]
 8018fe6:	899b      	ldrh	r3, [r3, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d102      	bne.n	8018ff2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	2201      	movs	r2, #1
 8018ff0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	899a      	ldrh	r2, [r3, #12]
 8018ff6:	69bb      	ldr	r3, [r7, #24]
 8018ff8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8018ffa:	69bb      	ldr	r3, [r7, #24]
 8018ffc:	895a      	ldrh	r2, [r3, #10]
 8018ffe:	69bb      	ldr	r3, [r7, #24]
 8019000:	899b      	ldrh	r3, [r3, #12]
 8019002:	429a      	cmp	r2, r3
 8019004:	d306      	bcc.n	8019014 <dhcp_bind+0x124>
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	899b      	ldrh	r3, [r3, #12]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d002      	beq.n	8019014 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801900e:	69bb      	ldr	r3, [r7, #24]
 8019010:	2200      	movs	r2, #0
 8019012:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019014:	69bb      	ldr	r3, [r7, #24]
 8019016:	79db      	ldrb	r3, [r3, #7]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d003      	beq.n	8019024 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801901c:	69bb      	ldr	r3, [r7, #24]
 801901e:	6a1b      	ldr	r3, [r3, #32]
 8019020:	613b      	str	r3, [r7, #16]
 8019022:	e014      	b.n	801904e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019024:	69bb      	ldr	r3, [r7, #24]
 8019026:	331c      	adds	r3, #28
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801902c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019030:	2b00      	cmp	r3, #0
 8019032:	db02      	blt.n	801903a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019034:	23ff      	movs	r3, #255	@ 0xff
 8019036:	613b      	str	r3, [r7, #16]
 8019038:	e009      	b.n	801904e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801903a:	7dfb      	ldrb	r3, [r7, #23]
 801903c:	2bbf      	cmp	r3, #191	@ 0xbf
 801903e:	d903      	bls.n	8019048 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019040:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8019044:	613b      	str	r3, [r7, #16]
 8019046:	e002      	b.n	801904e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801904c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019052:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d108      	bne.n	801906c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801905a:	69bb      	ldr	r3, [r7, #24]
 801905c:	69da      	ldr	r2, [r3, #28]
 801905e:	693b      	ldr	r3, [r7, #16]
 8019060:	4013      	ands	r3, r2
 8019062:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801906a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801906c:	210a      	movs	r1, #10
 801906e:	69b8      	ldr	r0, [r7, #24]
 8019070:	f000 fa9a 	bl	80195a8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8019074:	69bb      	ldr	r3, [r7, #24]
 8019076:	f103 011c 	add.w	r1, r3, #28
 801907a:	f107 030c 	add.w	r3, r7, #12
 801907e:	f107 0210 	add.w	r2, r7, #16
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f7f8 fa72 	bl	801156c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019088:	3720      	adds	r7, #32
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	0802196c 	.word	0x0802196c
 8019094:	08021acc 	.word	0x08021acc
 8019098:	080219cc 	.word	0x080219cc
 801909c:	08021ae8 	.word	0x08021ae8
 80190a0:	88888889 	.word	0x88888889

080190a4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b08a      	sub	sp, #40	@ 0x28
 80190a8:	af02      	add	r7, sp, #8
 80190aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190b0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80190b2:	2105      	movs	r1, #5
 80190b4:	69b8      	ldr	r0, [r7, #24]
 80190b6:	f000 fa77 	bl	80195a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80190ba:	f107 030c 	add.w	r3, r7, #12
 80190be:	2203      	movs	r2, #3
 80190c0:	69b9      	ldr	r1, [r7, #24]
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f000 fefc 	bl	8019ec0 <dhcp_create_msg>
 80190c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d04e      	beq.n	801916e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80190d6:	89b8      	ldrh	r0, [r7, #12]
 80190d8:	693b      	ldr	r3, [r7, #16]
 80190da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190de:	2302      	movs	r3, #2
 80190e0:	2239      	movs	r2, #57	@ 0x39
 80190e2:	f000 fa7b 	bl	80195dc <dhcp_option>
 80190e6:	4603      	mov	r3, r0
 80190e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80190ea:	89b8      	ldrh	r0, [r7, #12]
 80190ec:	693b      	ldr	r3, [r7, #16]
 80190ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80190f6:	461a      	mov	r2, r3
 80190f8:	f000 faca 	bl	8019690 <dhcp_option_short>
 80190fc:	4603      	mov	r3, r0
 80190fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019100:	89b8      	ldrh	r0, [r7, #12]
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019108:	2303      	movs	r3, #3
 801910a:	2237      	movs	r2, #55	@ 0x37
 801910c:	f000 fa66 	bl	80195dc <dhcp_option>
 8019110:	4603      	mov	r3, r0
 8019112:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019114:	2300      	movs	r3, #0
 8019116:	77bb      	strb	r3, [r7, #30]
 8019118:	e00e      	b.n	8019138 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801911a:	89b8      	ldrh	r0, [r7, #12]
 801911c:	693b      	ldr	r3, [r7, #16]
 801911e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019122:	7fbb      	ldrb	r3, [r7, #30]
 8019124:	4a29      	ldr	r2, [pc, #164]	@ (80191cc <dhcp_renew+0x128>)
 8019126:	5cd3      	ldrb	r3, [r2, r3]
 8019128:	461a      	mov	r2, r3
 801912a:	f000 fa8b 	bl	8019644 <dhcp_option_byte>
 801912e:	4603      	mov	r3, r0
 8019130:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019132:	7fbb      	ldrb	r3, [r7, #30]
 8019134:	3301      	adds	r3, #1
 8019136:	77bb      	strb	r3, [r7, #30]
 8019138:	7fbb      	ldrb	r3, [r7, #30]
 801913a:	2b02      	cmp	r3, #2
 801913c:	d9ed      	bls.n	801911a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801913e:	89b8      	ldrh	r0, [r7, #12]
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	33f0      	adds	r3, #240	@ 0xf0
 8019144:	697a      	ldr	r2, [r7, #20]
 8019146:	4619      	mov	r1, r3
 8019148:	f000 ff90 	bl	801a06c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801914c:	4b20      	ldr	r3, [pc, #128]	@ (80191d0 <dhcp_renew+0x12c>)
 801914e:	6818      	ldr	r0, [r3, #0]
 8019150:	69bb      	ldr	r3, [r7, #24]
 8019152:	f103 0218 	add.w	r2, r3, #24
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	9300      	str	r3, [sp, #0]
 801915a:	2343      	movs	r3, #67	@ 0x43
 801915c:	6979      	ldr	r1, [r7, #20]
 801915e:	f7fe fe51 	bl	8017e04 <udp_sendto_if>
 8019162:	4603      	mov	r3, r0
 8019164:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019166:	6978      	ldr	r0, [r7, #20]
 8019168:	f7f8 ff0e 	bl	8011f88 <pbuf_free>
 801916c:	e001      	b.n	8019172 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801916e:	23ff      	movs	r3, #255	@ 0xff
 8019170:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019172:	69bb      	ldr	r3, [r7, #24]
 8019174:	799b      	ldrb	r3, [r3, #6]
 8019176:	2bff      	cmp	r3, #255	@ 0xff
 8019178:	d005      	beq.n	8019186 <dhcp_renew+0xe2>
    dhcp->tries++;
 801917a:	69bb      	ldr	r3, [r7, #24]
 801917c:	799b      	ldrb	r3, [r3, #6]
 801917e:	3301      	adds	r3, #1
 8019180:	b2da      	uxtb	r2, r3
 8019182:	69bb      	ldr	r3, [r7, #24]
 8019184:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019186:	69bb      	ldr	r3, [r7, #24]
 8019188:	799b      	ldrb	r3, [r3, #6]
 801918a:	2b09      	cmp	r3, #9
 801918c:	d809      	bhi.n	80191a2 <dhcp_renew+0xfe>
 801918e:	69bb      	ldr	r3, [r7, #24]
 8019190:	799b      	ldrb	r3, [r3, #6]
 8019192:	461a      	mov	r2, r3
 8019194:	0152      	lsls	r2, r2, #5
 8019196:	1ad2      	subs	r2, r2, r3
 8019198:	0092      	lsls	r2, r2, #2
 801919a:	4413      	add	r3, r2
 801919c:	011b      	lsls	r3, r3, #4
 801919e:	b29b      	uxth	r3, r3
 80191a0:	e001      	b.n	80191a6 <dhcp_renew+0x102>
 80191a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80191a6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191a8:	89fb      	ldrh	r3, [r7, #14]
 80191aa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80191ae:	4a09      	ldr	r2, [pc, #36]	@ (80191d4 <dhcp_renew+0x130>)
 80191b0:	fb82 1203 	smull	r1, r2, r2, r3
 80191b4:	1152      	asrs	r2, r2, #5
 80191b6:	17db      	asrs	r3, r3, #31
 80191b8:	1ad3      	subs	r3, r2, r3
 80191ba:	b29a      	uxth	r2, r3
 80191bc:	69bb      	ldr	r3, [r7, #24]
 80191be:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80191c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80191c4:	4618      	mov	r0, r3
 80191c6:	3720      	adds	r7, #32
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	24000034 	.word	0x24000034
 80191d0:	2400ccbc 	.word	0x2400ccbc
 80191d4:	10624dd3 	.word	0x10624dd3

080191d8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b08a      	sub	sp, #40	@ 0x28
 80191dc:	af02      	add	r7, sp, #8
 80191de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80191e6:	2104      	movs	r1, #4
 80191e8:	69b8      	ldr	r0, [r7, #24]
 80191ea:	f000 f9dd 	bl	80195a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80191ee:	f107 030c 	add.w	r3, r7, #12
 80191f2:	2203      	movs	r2, #3
 80191f4:	69b9      	ldr	r1, [r7, #24]
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f000 fe62 	bl	8019ec0 <dhcp_create_msg>
 80191fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80191fe:	697b      	ldr	r3, [r7, #20]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d04c      	beq.n	801929e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	685b      	ldr	r3, [r3, #4]
 8019208:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801920a:	89b8      	ldrh	r0, [r7, #12]
 801920c:	693b      	ldr	r3, [r7, #16]
 801920e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019212:	2302      	movs	r3, #2
 8019214:	2239      	movs	r2, #57	@ 0x39
 8019216:	f000 f9e1 	bl	80195dc <dhcp_option>
 801921a:	4603      	mov	r3, r0
 801921c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801921e:	89b8      	ldrh	r0, [r7, #12]
 8019220:	693b      	ldr	r3, [r7, #16]
 8019222:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801922a:	461a      	mov	r2, r3
 801922c:	f000 fa30 	bl	8019690 <dhcp_option_short>
 8019230:	4603      	mov	r3, r0
 8019232:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019234:	89b8      	ldrh	r0, [r7, #12]
 8019236:	693b      	ldr	r3, [r7, #16]
 8019238:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801923c:	2303      	movs	r3, #3
 801923e:	2237      	movs	r2, #55	@ 0x37
 8019240:	f000 f9cc 	bl	80195dc <dhcp_option>
 8019244:	4603      	mov	r3, r0
 8019246:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019248:	2300      	movs	r3, #0
 801924a:	77bb      	strb	r3, [r7, #30]
 801924c:	e00e      	b.n	801926c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801924e:	89b8      	ldrh	r0, [r7, #12]
 8019250:	693b      	ldr	r3, [r7, #16]
 8019252:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019256:	7fbb      	ldrb	r3, [r7, #30]
 8019258:	4a28      	ldr	r2, [pc, #160]	@ (80192fc <dhcp_rebind+0x124>)
 801925a:	5cd3      	ldrb	r3, [r2, r3]
 801925c:	461a      	mov	r2, r3
 801925e:	f000 f9f1 	bl	8019644 <dhcp_option_byte>
 8019262:	4603      	mov	r3, r0
 8019264:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019266:	7fbb      	ldrb	r3, [r7, #30]
 8019268:	3301      	adds	r3, #1
 801926a:	77bb      	strb	r3, [r7, #30]
 801926c:	7fbb      	ldrb	r3, [r7, #30]
 801926e:	2b02      	cmp	r3, #2
 8019270:	d9ed      	bls.n	801924e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019272:	89b8      	ldrh	r0, [r7, #12]
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	33f0      	adds	r3, #240	@ 0xf0
 8019278:	697a      	ldr	r2, [r7, #20]
 801927a:	4619      	mov	r1, r3
 801927c:	f000 fef6 	bl	801a06c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019280:	4b1f      	ldr	r3, [pc, #124]	@ (8019300 <dhcp_rebind+0x128>)
 8019282:	6818      	ldr	r0, [r3, #0]
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	9300      	str	r3, [sp, #0]
 8019288:	2343      	movs	r3, #67	@ 0x43
 801928a:	4a1e      	ldr	r2, [pc, #120]	@ (8019304 <dhcp_rebind+0x12c>)
 801928c:	6979      	ldr	r1, [r7, #20]
 801928e:	f7fe fdb9 	bl	8017e04 <udp_sendto_if>
 8019292:	4603      	mov	r3, r0
 8019294:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019296:	6978      	ldr	r0, [r7, #20]
 8019298:	f7f8 fe76 	bl	8011f88 <pbuf_free>
 801929c:	e001      	b.n	80192a2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801929e:	23ff      	movs	r3, #255	@ 0xff
 80192a0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80192a2:	69bb      	ldr	r3, [r7, #24]
 80192a4:	799b      	ldrb	r3, [r3, #6]
 80192a6:	2bff      	cmp	r3, #255	@ 0xff
 80192a8:	d005      	beq.n	80192b6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80192aa:	69bb      	ldr	r3, [r7, #24]
 80192ac:	799b      	ldrb	r3, [r3, #6]
 80192ae:	3301      	adds	r3, #1
 80192b0:	b2da      	uxtb	r2, r3
 80192b2:	69bb      	ldr	r3, [r7, #24]
 80192b4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80192b6:	69bb      	ldr	r3, [r7, #24]
 80192b8:	799b      	ldrb	r3, [r3, #6]
 80192ba:	2b09      	cmp	r3, #9
 80192bc:	d809      	bhi.n	80192d2 <dhcp_rebind+0xfa>
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	799b      	ldrb	r3, [r3, #6]
 80192c2:	461a      	mov	r2, r3
 80192c4:	0152      	lsls	r2, r2, #5
 80192c6:	1ad2      	subs	r2, r2, r3
 80192c8:	0092      	lsls	r2, r2, #2
 80192ca:	4413      	add	r3, r2
 80192cc:	00db      	lsls	r3, r3, #3
 80192ce:	b29b      	uxth	r3, r3
 80192d0:	e001      	b.n	80192d6 <dhcp_rebind+0xfe>
 80192d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80192d6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80192d8:	89fb      	ldrh	r3, [r7, #14]
 80192da:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80192de:	4a0a      	ldr	r2, [pc, #40]	@ (8019308 <dhcp_rebind+0x130>)
 80192e0:	fb82 1203 	smull	r1, r2, r2, r3
 80192e4:	1152      	asrs	r2, r2, #5
 80192e6:	17db      	asrs	r3, r3, #31
 80192e8:	1ad3      	subs	r3, r2, r3
 80192ea:	b29a      	uxth	r2, r3
 80192ec:	69bb      	ldr	r3, [r7, #24]
 80192ee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80192f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	3720      	adds	r7, #32
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}
 80192fc:	24000034 	.word	0x24000034
 8019300:	2400ccbc 	.word	0x2400ccbc
 8019304:	080225c4 	.word	0x080225c4
 8019308:	10624dd3 	.word	0x10624dd3

0801930c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801930c:	b5b0      	push	{r4, r5, r7, lr}
 801930e:	b08a      	sub	sp, #40	@ 0x28
 8019310:	af02      	add	r7, sp, #8
 8019312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019318:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801931a:	2103      	movs	r1, #3
 801931c:	69b8      	ldr	r0, [r7, #24]
 801931e:	f000 f943 	bl	80195a8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019322:	f107 030c 	add.w	r3, r7, #12
 8019326:	2203      	movs	r2, #3
 8019328:	69b9      	ldr	r1, [r7, #24]
 801932a:	6878      	ldr	r0, [r7, #4]
 801932c:	f000 fdc8 	bl	8019ec0 <dhcp_create_msg>
 8019330:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019332:	697b      	ldr	r3, [r7, #20]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d066      	beq.n	8019406 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	685b      	ldr	r3, [r3, #4]
 801933c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801933e:	89b8      	ldrh	r0, [r7, #12]
 8019340:	693b      	ldr	r3, [r7, #16]
 8019342:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019346:	2302      	movs	r3, #2
 8019348:	2239      	movs	r2, #57	@ 0x39
 801934a:	f000 f947 	bl	80195dc <dhcp_option>
 801934e:	4603      	mov	r3, r0
 8019350:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019352:	89b8      	ldrh	r0, [r7, #12]
 8019354:	693b      	ldr	r3, [r7, #16]
 8019356:	33f0      	adds	r3, #240	@ 0xf0
 8019358:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801935c:	4619      	mov	r1, r3
 801935e:	f000 f997 	bl	8019690 <dhcp_option_short>
 8019362:	4603      	mov	r3, r0
 8019364:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019366:	89b8      	ldrh	r0, [r7, #12]
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801936e:	2304      	movs	r3, #4
 8019370:	2232      	movs	r2, #50	@ 0x32
 8019372:	f000 f933 	bl	80195dc <dhcp_option>
 8019376:	4603      	mov	r3, r0
 8019378:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801937a:	89bc      	ldrh	r4, [r7, #12]
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019382:	69bb      	ldr	r3, [r7, #24]
 8019384:	69db      	ldr	r3, [r3, #28]
 8019386:	4618      	mov	r0, r3
 8019388:	f7f7 f95d 	bl	8010646 <lwip_htonl>
 801938c:	4603      	mov	r3, r0
 801938e:	461a      	mov	r2, r3
 8019390:	4629      	mov	r1, r5
 8019392:	4620      	mov	r0, r4
 8019394:	f000 f9ae 	bl	80196f4 <dhcp_option_long>
 8019398:	4603      	mov	r3, r0
 801939a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801939c:	89b8      	ldrh	r0, [r7, #12]
 801939e:	693b      	ldr	r3, [r7, #16]
 80193a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193a4:	2303      	movs	r3, #3
 80193a6:	2237      	movs	r2, #55	@ 0x37
 80193a8:	f000 f918 	bl	80195dc <dhcp_option>
 80193ac:	4603      	mov	r3, r0
 80193ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80193b0:	2300      	movs	r3, #0
 80193b2:	77bb      	strb	r3, [r7, #30]
 80193b4:	e00e      	b.n	80193d4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80193b6:	89b8      	ldrh	r0, [r7, #12]
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193be:	7fbb      	ldrb	r3, [r7, #30]
 80193c0:	4a28      	ldr	r2, [pc, #160]	@ (8019464 <dhcp_reboot+0x158>)
 80193c2:	5cd3      	ldrb	r3, [r2, r3]
 80193c4:	461a      	mov	r2, r3
 80193c6:	f000 f93d 	bl	8019644 <dhcp_option_byte>
 80193ca:	4603      	mov	r3, r0
 80193cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80193ce:	7fbb      	ldrb	r3, [r7, #30]
 80193d0:	3301      	adds	r3, #1
 80193d2:	77bb      	strb	r3, [r7, #30]
 80193d4:	7fbb      	ldrb	r3, [r7, #30]
 80193d6:	2b02      	cmp	r3, #2
 80193d8:	d9ed      	bls.n	80193b6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80193da:	89b8      	ldrh	r0, [r7, #12]
 80193dc:	693b      	ldr	r3, [r7, #16]
 80193de:	33f0      	adds	r3, #240	@ 0xf0
 80193e0:	697a      	ldr	r2, [r7, #20]
 80193e2:	4619      	mov	r1, r3
 80193e4:	f000 fe42 	bl	801a06c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80193e8:	4b1f      	ldr	r3, [pc, #124]	@ (8019468 <dhcp_reboot+0x15c>)
 80193ea:	6818      	ldr	r0, [r3, #0]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	9300      	str	r3, [sp, #0]
 80193f0:	2343      	movs	r3, #67	@ 0x43
 80193f2:	4a1e      	ldr	r2, [pc, #120]	@ (801946c <dhcp_reboot+0x160>)
 80193f4:	6979      	ldr	r1, [r7, #20]
 80193f6:	f7fe fd05 	bl	8017e04 <udp_sendto_if>
 80193fa:	4603      	mov	r3, r0
 80193fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80193fe:	6978      	ldr	r0, [r7, #20]
 8019400:	f7f8 fdc2 	bl	8011f88 <pbuf_free>
 8019404:	e001      	b.n	801940a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019406:	23ff      	movs	r3, #255	@ 0xff
 8019408:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801940a:	69bb      	ldr	r3, [r7, #24]
 801940c:	799b      	ldrb	r3, [r3, #6]
 801940e:	2bff      	cmp	r3, #255	@ 0xff
 8019410:	d005      	beq.n	801941e <dhcp_reboot+0x112>
    dhcp->tries++;
 8019412:	69bb      	ldr	r3, [r7, #24]
 8019414:	799b      	ldrb	r3, [r3, #6]
 8019416:	3301      	adds	r3, #1
 8019418:	b2da      	uxtb	r2, r3
 801941a:	69bb      	ldr	r3, [r7, #24]
 801941c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801941e:	69bb      	ldr	r3, [r7, #24]
 8019420:	799b      	ldrb	r3, [r3, #6]
 8019422:	2b09      	cmp	r3, #9
 8019424:	d809      	bhi.n	801943a <dhcp_reboot+0x12e>
 8019426:	69bb      	ldr	r3, [r7, #24]
 8019428:	799b      	ldrb	r3, [r3, #6]
 801942a:	461a      	mov	r2, r3
 801942c:	0152      	lsls	r2, r2, #5
 801942e:	1ad2      	subs	r2, r2, r3
 8019430:	0092      	lsls	r2, r2, #2
 8019432:	4413      	add	r3, r2
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	b29b      	uxth	r3, r3
 8019438:	e001      	b.n	801943e <dhcp_reboot+0x132>
 801943a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801943e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019440:	89fb      	ldrh	r3, [r7, #14]
 8019442:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019446:	4a0a      	ldr	r2, [pc, #40]	@ (8019470 <dhcp_reboot+0x164>)
 8019448:	fb82 1203 	smull	r1, r2, r2, r3
 801944c:	1152      	asrs	r2, r2, #5
 801944e:	17db      	asrs	r3, r3, #31
 8019450:	1ad3      	subs	r3, r2, r3
 8019452:	b29a      	uxth	r2, r3
 8019454:	69bb      	ldr	r3, [r7, #24]
 8019456:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019458:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801945c:	4618      	mov	r0, r3
 801945e:	3720      	adds	r7, #32
 8019460:	46bd      	mov	sp, r7
 8019462:	bdb0      	pop	{r4, r5, r7, pc}
 8019464:	24000034 	.word	0x24000034
 8019468:	2400ccbc 	.word	0x2400ccbc
 801946c:	080225c4 	.word	0x080225c4
 8019470:	10624dd3 	.word	0x10624dd3

08019474 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019474:	b5b0      	push	{r4, r5, r7, lr}
 8019476:	b08a      	sub	sp, #40	@ 0x28
 8019478:	af02      	add	r7, sp, #8
 801947a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019480:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019482:	69fb      	ldr	r3, [r7, #28]
 8019484:	2b00      	cmp	r3, #0
 8019486:	f000 8084 	beq.w	8019592 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801948a:	69fb      	ldr	r3, [r7, #28]
 801948c:	795b      	ldrb	r3, [r3, #5]
 801948e:	2b00      	cmp	r3, #0
 8019490:	f000 8081 	beq.w	8019596 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	699b      	ldr	r3, [r3, #24]
 8019498:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801949a:	69fb      	ldr	r3, [r7, #28]
 801949c:	2200      	movs	r2, #0
 801949e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80194a0:	69fb      	ldr	r3, [r7, #28]
 80194a2:	2200      	movs	r2, #0
 80194a4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80194a6:	69fb      	ldr	r3, [r7, #28]
 80194a8:	2200      	movs	r2, #0
 80194aa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80194ac:	69fb      	ldr	r3, [r7, #28]
 80194ae:	2200      	movs	r2, #0
 80194b0:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80194b2:	69fb      	ldr	r3, [r7, #28]
 80194b4:	2200      	movs	r2, #0
 80194b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80194b8:	69fb      	ldr	r3, [r7, #28]
 80194ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80194c0:	69fb      	ldr	r3, [r7, #28]
 80194c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80194c4:	69fb      	ldr	r3, [r7, #28]
 80194c6:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80194c8:	69fb      	ldr	r3, [r7, #28]
 80194ca:	2200      	movs	r2, #0
 80194cc:	829a      	strh	r2, [r3, #20]
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	8a9a      	ldrh	r2, [r3, #20]
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	825a      	strh	r2, [r3, #18]
 80194d6:	69fb      	ldr	r3, [r7, #28]
 80194d8:	8a5a      	ldrh	r2, [r3, #18]
 80194da:	69fb      	ldr	r3, [r7, #28]
 80194dc:	821a      	strh	r2, [r3, #16]
 80194de:	69fb      	ldr	r3, [r7, #28]
 80194e0:	8a1a      	ldrh	r2, [r3, #16]
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80194e6:	6878      	ldr	r0, [r7, #4]
 80194e8:	f000 fdee 	bl	801a0c8 <dhcp_supplied_address>
 80194ec:	4603      	mov	r3, r0
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d03b      	beq.n	801956a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80194f2:	f107 030e 	add.w	r3, r7, #14
 80194f6:	2207      	movs	r2, #7
 80194f8:	69f9      	ldr	r1, [r7, #28]
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f000 fce0 	bl	8019ec0 <dhcp_create_msg>
 8019500:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d030      	beq.n	801956a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019508:	69bb      	ldr	r3, [r7, #24]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801950e:	89f8      	ldrh	r0, [r7, #14]
 8019510:	697b      	ldr	r3, [r7, #20]
 8019512:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019516:	2304      	movs	r3, #4
 8019518:	2236      	movs	r2, #54	@ 0x36
 801951a:	f000 f85f 	bl	80195dc <dhcp_option>
 801951e:	4603      	mov	r3, r0
 8019520:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019522:	89fc      	ldrh	r4, [r7, #14]
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	4618      	mov	r0, r3
 801952e:	f7f7 f88a 	bl	8010646 <lwip_htonl>
 8019532:	4603      	mov	r3, r0
 8019534:	461a      	mov	r2, r3
 8019536:	4629      	mov	r1, r5
 8019538:	4620      	mov	r0, r4
 801953a:	f000 f8db 	bl	80196f4 <dhcp_option_long>
 801953e:	4603      	mov	r3, r0
 8019540:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019542:	89f8      	ldrh	r0, [r7, #14]
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	33f0      	adds	r3, #240	@ 0xf0
 8019548:	69ba      	ldr	r2, [r7, #24]
 801954a:	4619      	mov	r1, r3
 801954c:	f000 fd8e 	bl	801a06c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019550:	4b13      	ldr	r3, [pc, #76]	@ (80195a0 <dhcp_release_and_stop+0x12c>)
 8019552:	6818      	ldr	r0, [r3, #0]
 8019554:	f107 0210 	add.w	r2, r7, #16
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	9300      	str	r3, [sp, #0]
 801955c:	2343      	movs	r3, #67	@ 0x43
 801955e:	69b9      	ldr	r1, [r7, #24]
 8019560:	f7fe fc50 	bl	8017e04 <udp_sendto_if>
      pbuf_free(p_out);
 8019564:	69b8      	ldr	r0, [r7, #24]
 8019566:	f7f8 fd0f 	bl	8011f88 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801956a:	4b0e      	ldr	r3, [pc, #56]	@ (80195a4 <dhcp_release_and_stop+0x130>)
 801956c:	4a0d      	ldr	r2, [pc, #52]	@ (80195a4 <dhcp_release_and_stop+0x130>)
 801956e:	490d      	ldr	r1, [pc, #52]	@ (80195a4 <dhcp_release_and_stop+0x130>)
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	f7f7 fffb 	bl	801156c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019576:	2100      	movs	r1, #0
 8019578:	69f8      	ldr	r0, [r7, #28]
 801957a:	f000 f815 	bl	80195a8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801957e:	69fb      	ldr	r3, [r7, #28]
 8019580:	791b      	ldrb	r3, [r3, #4]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d008      	beq.n	8019598 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019586:	f7fe ff89 	bl	801849c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801958a:	69fb      	ldr	r3, [r7, #28]
 801958c:	2200      	movs	r2, #0
 801958e:	711a      	strb	r2, [r3, #4]
 8019590:	e002      	b.n	8019598 <dhcp_release_and_stop+0x124>
    return;
 8019592:	bf00      	nop
 8019594:	e000      	b.n	8019598 <dhcp_release_and_stop+0x124>
    return;
 8019596:	bf00      	nop
  }
}
 8019598:	3720      	adds	r7, #32
 801959a:	46bd      	mov	sp, r7
 801959c:	bdb0      	pop	{r4, r5, r7, pc}
 801959e:	bf00      	nop
 80195a0:	2400ccbc 	.word	0x2400ccbc
 80195a4:	080225c0 	.word	0x080225c0

080195a8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80195a8:	b480      	push	{r7}
 80195aa:	b083      	sub	sp, #12
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	460b      	mov	r3, r1
 80195b2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	795b      	ldrb	r3, [r3, #5]
 80195b8:	78fa      	ldrb	r2, [r7, #3]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d008      	beq.n	80195d0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	78fa      	ldrb	r2, [r7, #3]
 80195c2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2200      	movs	r2, #0
 80195c8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2200      	movs	r2, #0
 80195ce:	811a      	strh	r2, [r3, #8]
  }
}
 80195d0:	bf00      	nop
 80195d2:	370c      	adds	r7, #12
 80195d4:	46bd      	mov	sp, r7
 80195d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195da:	4770      	bx	lr

080195dc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b082      	sub	sp, #8
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6039      	str	r1, [r7, #0]
 80195e4:	4611      	mov	r1, r2
 80195e6:	461a      	mov	r2, r3
 80195e8:	4603      	mov	r3, r0
 80195ea:	80fb      	strh	r3, [r7, #6]
 80195ec:	460b      	mov	r3, r1
 80195ee:	717b      	strb	r3, [r7, #5]
 80195f0:	4613      	mov	r3, r2
 80195f2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80195f4:	88fa      	ldrh	r2, [r7, #6]
 80195f6:	793b      	ldrb	r3, [r7, #4]
 80195f8:	4413      	add	r3, r2
 80195fa:	3302      	adds	r3, #2
 80195fc:	2b44      	cmp	r3, #68	@ 0x44
 80195fe:	d906      	bls.n	801960e <dhcp_option+0x32>
 8019600:	4b0d      	ldr	r3, [pc, #52]	@ (8019638 <dhcp_option+0x5c>)
 8019602:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019606:	490d      	ldr	r1, [pc, #52]	@ (801963c <dhcp_option+0x60>)
 8019608:	480d      	ldr	r0, [pc, #52]	@ (8019640 <dhcp_option+0x64>)
 801960a:	f003 febb 	bl	801d384 <iprintf>
  options[options_out_len++] = option_type;
 801960e:	88fb      	ldrh	r3, [r7, #6]
 8019610:	1c5a      	adds	r2, r3, #1
 8019612:	80fa      	strh	r2, [r7, #6]
 8019614:	461a      	mov	r2, r3
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	4413      	add	r3, r2
 801961a:	797a      	ldrb	r2, [r7, #5]
 801961c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801961e:	88fb      	ldrh	r3, [r7, #6]
 8019620:	1c5a      	adds	r2, r3, #1
 8019622:	80fa      	strh	r2, [r7, #6]
 8019624:	461a      	mov	r2, r3
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	4413      	add	r3, r2
 801962a:	793a      	ldrb	r2, [r7, #4]
 801962c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801962e:	88fb      	ldrh	r3, [r7, #6]
}
 8019630:	4618      	mov	r0, r3
 8019632:	3708      	adds	r7, #8
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}
 8019638:	0802196c 	.word	0x0802196c
 801963c:	08021b00 	.word	0x08021b00
 8019640:	080219cc 	.word	0x080219cc

08019644 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
 801964a:	4603      	mov	r3, r0
 801964c:	6039      	str	r1, [r7, #0]
 801964e:	80fb      	strh	r3, [r7, #6]
 8019650:	4613      	mov	r3, r2
 8019652:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019654:	88fb      	ldrh	r3, [r7, #6]
 8019656:	2b43      	cmp	r3, #67	@ 0x43
 8019658:	d906      	bls.n	8019668 <dhcp_option_byte+0x24>
 801965a:	4b0a      	ldr	r3, [pc, #40]	@ (8019684 <dhcp_option_byte+0x40>)
 801965c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019660:	4909      	ldr	r1, [pc, #36]	@ (8019688 <dhcp_option_byte+0x44>)
 8019662:	480a      	ldr	r0, [pc, #40]	@ (801968c <dhcp_option_byte+0x48>)
 8019664:	f003 fe8e 	bl	801d384 <iprintf>
  options[options_out_len++] = value;
 8019668:	88fb      	ldrh	r3, [r7, #6]
 801966a:	1c5a      	adds	r2, r3, #1
 801966c:	80fa      	strh	r2, [r7, #6]
 801966e:	461a      	mov	r2, r3
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	4413      	add	r3, r2
 8019674:	797a      	ldrb	r2, [r7, #5]
 8019676:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019678:	88fb      	ldrh	r3, [r7, #6]
}
 801967a:	4618      	mov	r0, r3
 801967c:	3708      	adds	r7, #8
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}
 8019682:	bf00      	nop
 8019684:	0802196c 	.word	0x0802196c
 8019688:	08021b44 	.word	0x08021b44
 801968c:	080219cc 	.word	0x080219cc

08019690 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	4603      	mov	r3, r0
 8019698:	6039      	str	r1, [r7, #0]
 801969a:	80fb      	strh	r3, [r7, #6]
 801969c:	4613      	mov	r3, r2
 801969e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	3302      	adds	r3, #2
 80196a4:	2b44      	cmp	r3, #68	@ 0x44
 80196a6:	d906      	bls.n	80196b6 <dhcp_option_short+0x26>
 80196a8:	4b0f      	ldr	r3, [pc, #60]	@ (80196e8 <dhcp_option_short+0x58>)
 80196aa:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80196ae:	490f      	ldr	r1, [pc, #60]	@ (80196ec <dhcp_option_short+0x5c>)
 80196b0:	480f      	ldr	r0, [pc, #60]	@ (80196f0 <dhcp_option_short+0x60>)
 80196b2:	f003 fe67 	bl	801d384 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80196b6:	88bb      	ldrh	r3, [r7, #4]
 80196b8:	0a1b      	lsrs	r3, r3, #8
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	88fb      	ldrh	r3, [r7, #6]
 80196be:	1c59      	adds	r1, r3, #1
 80196c0:	80f9      	strh	r1, [r7, #6]
 80196c2:	4619      	mov	r1, r3
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	440b      	add	r3, r1
 80196c8:	b2d2      	uxtb	r2, r2
 80196ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80196cc:	88fb      	ldrh	r3, [r7, #6]
 80196ce:	1c5a      	adds	r2, r3, #1
 80196d0:	80fa      	strh	r2, [r7, #6]
 80196d2:	461a      	mov	r2, r3
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	4413      	add	r3, r2
 80196d8:	88ba      	ldrh	r2, [r7, #4]
 80196da:	b2d2      	uxtb	r2, r2
 80196dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80196de:	88fb      	ldrh	r3, [r7, #6]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	0802196c 	.word	0x0802196c
 80196ec:	08021b7c 	.word	0x08021b7c
 80196f0:	080219cc 	.word	0x080219cc

080196f4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	4603      	mov	r3, r0
 80196fc:	60b9      	str	r1, [r7, #8]
 80196fe:	607a      	str	r2, [r7, #4]
 8019700:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019702:	89fb      	ldrh	r3, [r7, #14]
 8019704:	3304      	adds	r3, #4
 8019706:	2b44      	cmp	r3, #68	@ 0x44
 8019708:	d906      	bls.n	8019718 <dhcp_option_long+0x24>
 801970a:	4b19      	ldr	r3, [pc, #100]	@ (8019770 <dhcp_option_long+0x7c>)
 801970c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8019710:	4918      	ldr	r1, [pc, #96]	@ (8019774 <dhcp_option_long+0x80>)
 8019712:	4819      	ldr	r0, [pc, #100]	@ (8019778 <dhcp_option_long+0x84>)
 8019714:	f003 fe36 	bl	801d384 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	0e1a      	lsrs	r2, r3, #24
 801971c:	89fb      	ldrh	r3, [r7, #14]
 801971e:	1c59      	adds	r1, r3, #1
 8019720:	81f9      	strh	r1, [r7, #14]
 8019722:	4619      	mov	r1, r3
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	440b      	add	r3, r1
 8019728:	b2d2      	uxtb	r2, r2
 801972a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	0c1a      	lsrs	r2, r3, #16
 8019730:	89fb      	ldrh	r3, [r7, #14]
 8019732:	1c59      	adds	r1, r3, #1
 8019734:	81f9      	strh	r1, [r7, #14]
 8019736:	4619      	mov	r1, r3
 8019738:	68bb      	ldr	r3, [r7, #8]
 801973a:	440b      	add	r3, r1
 801973c:	b2d2      	uxtb	r2, r2
 801973e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	0a1a      	lsrs	r2, r3, #8
 8019744:	89fb      	ldrh	r3, [r7, #14]
 8019746:	1c59      	adds	r1, r3, #1
 8019748:	81f9      	strh	r1, [r7, #14]
 801974a:	4619      	mov	r1, r3
 801974c:	68bb      	ldr	r3, [r7, #8]
 801974e:	440b      	add	r3, r1
 8019750:	b2d2      	uxtb	r2, r2
 8019752:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019754:	89fb      	ldrh	r3, [r7, #14]
 8019756:	1c5a      	adds	r2, r3, #1
 8019758:	81fa      	strh	r2, [r7, #14]
 801975a:	461a      	mov	r2, r3
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	4413      	add	r3, r2
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	b2d2      	uxtb	r2, r2
 8019764:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019766:	89fb      	ldrh	r3, [r7, #14]
}
 8019768:	4618      	mov	r0, r3
 801976a:	3710      	adds	r7, #16
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}
 8019770:	0802196c 	.word	0x0802196c
 8019774:	08021bb8 	.word	0x08021bb8
 8019778:	080219cc 	.word	0x080219cc

0801977c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b090      	sub	sp, #64	@ 0x40
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
 8019784:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8019786:	2300      	movs	r3, #0
 8019788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801978a:	2300      	movs	r3, #0
 801978c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801978e:	2208      	movs	r2, #8
 8019790:	2100      	movs	r1, #0
 8019792:	48b5      	ldr	r0, [pc, #724]	@ (8019a68 <dhcp_parse_reply+0x2ec>)
 8019794:	f003 ff4e 	bl	801d634 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	895b      	ldrh	r3, [r3, #10]
 801979c:	2b2b      	cmp	r3, #43	@ 0x2b
 801979e:	d802      	bhi.n	80197a6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80197a0:	f06f 0301 	mvn.w	r3, #1
 80197a4:	e2a7      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80197ac:	23f0      	movs	r3, #240	@ 0xf0
 80197ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	891b      	ldrh	r3, [r3, #8]
 80197b4:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80197ba:	e00c      	b.n	80197d6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80197bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197be:	895b      	ldrh	r3, [r3, #10]
 80197c0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80197c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197c8:	895b      	ldrh	r3, [r3, #10]
 80197ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80197cc:	1ad3      	subs	r3, r2, r3
 80197ce:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80197d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80197d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d004      	beq.n	80197e6 <dhcp_parse_reply+0x6a>
 80197dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197de:	895b      	ldrh	r3, [r3, #10]
 80197e0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80197e2:	429a      	cmp	r2, r3
 80197e4:	d2ea      	bcs.n	80197bc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80197e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d102      	bne.n	80197f2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80197ec:	f06f 0301 	mvn.w	r3, #1
 80197f0:	e281      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80197f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80197f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80197f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80197f8:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80197fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019800:	e239      	b.n	8019c76 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8019802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019806:	4413      	add	r3, r2
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801980c:	2300      	movs	r3, #0
 801980e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8019812:	f04f 33ff 	mov.w	r3, #4294967295
 8019816:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019818:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801981a:	3302      	adds	r3, #2
 801981c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801981e:	8bfa      	ldrh	r2, [r7, #30]
 8019820:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019822:	429a      	cmp	r2, r3
 8019824:	d202      	bcs.n	801982c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019826:	f06f 0301 	mvn.w	r3, #1
 801982a:	e264      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801982c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801982e:	3301      	adds	r3, #1
 8019830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019832:	8952      	ldrh	r2, [r2, #10]
 8019834:	4293      	cmp	r3, r2
 8019836:	da07      	bge.n	8019848 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019838:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801983a:	3301      	adds	r3, #1
 801983c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801983e:	4413      	add	r3, r2
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019846:	e00b      	b.n	8019860 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d004      	beq.n	801985a <dhcp_parse_reply+0xde>
 8019850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	e000      	b.n	801985c <dhcp_parse_reply+0xe0>
 801985a:	2300      	movs	r3, #0
 801985c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019864:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8019868:	7dfb      	ldrb	r3, [r7, #23]
 801986a:	2b3b      	cmp	r3, #59	@ 0x3b
 801986c:	f200 812c 	bhi.w	8019ac8 <dhcp_parse_reply+0x34c>
 8019870:	a201      	add	r2, pc, #4	@ (adr r2, 8019878 <dhcp_parse_reply+0xfc>)
 8019872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019876:	bf00      	nop
 8019878:	08019969 	.word	0x08019969
 801987c:	08019979 	.word	0x08019979
 8019880:	08019ac9 	.word	0x08019ac9
 8019884:	0801999b 	.word	0x0801999b
 8019888:	08019ac9 	.word	0x08019ac9
 801988c:	08019ac9 	.word	0x08019ac9
 8019890:	08019ac9 	.word	0x08019ac9
 8019894:	08019ac9 	.word	0x08019ac9
 8019898:	08019ac9 	.word	0x08019ac9
 801989c:	08019ac9 	.word	0x08019ac9
 80198a0:	08019ac9 	.word	0x08019ac9
 80198a4:	08019ac9 	.word	0x08019ac9
 80198a8:	08019ac9 	.word	0x08019ac9
 80198ac:	08019ac9 	.word	0x08019ac9
 80198b0:	08019ac9 	.word	0x08019ac9
 80198b4:	08019ac9 	.word	0x08019ac9
 80198b8:	08019ac9 	.word	0x08019ac9
 80198bc:	08019ac9 	.word	0x08019ac9
 80198c0:	08019ac9 	.word	0x08019ac9
 80198c4:	08019ac9 	.word	0x08019ac9
 80198c8:	08019ac9 	.word	0x08019ac9
 80198cc:	08019ac9 	.word	0x08019ac9
 80198d0:	08019ac9 	.word	0x08019ac9
 80198d4:	08019ac9 	.word	0x08019ac9
 80198d8:	08019ac9 	.word	0x08019ac9
 80198dc:	08019ac9 	.word	0x08019ac9
 80198e0:	08019ac9 	.word	0x08019ac9
 80198e4:	08019ac9 	.word	0x08019ac9
 80198e8:	08019ac9 	.word	0x08019ac9
 80198ec:	08019ac9 	.word	0x08019ac9
 80198f0:	08019ac9 	.word	0x08019ac9
 80198f4:	08019ac9 	.word	0x08019ac9
 80198f8:	08019ac9 	.word	0x08019ac9
 80198fc:	08019ac9 	.word	0x08019ac9
 8019900:	08019ac9 	.word	0x08019ac9
 8019904:	08019ac9 	.word	0x08019ac9
 8019908:	08019ac9 	.word	0x08019ac9
 801990c:	08019ac9 	.word	0x08019ac9
 8019910:	08019ac9 	.word	0x08019ac9
 8019914:	08019ac9 	.word	0x08019ac9
 8019918:	08019ac9 	.word	0x08019ac9
 801991c:	08019ac9 	.word	0x08019ac9
 8019920:	08019ac9 	.word	0x08019ac9
 8019924:	08019ac9 	.word	0x08019ac9
 8019928:	08019ac9 	.word	0x08019ac9
 801992c:	08019ac9 	.word	0x08019ac9
 8019930:	08019ac9 	.word	0x08019ac9
 8019934:	08019ac9 	.word	0x08019ac9
 8019938:	08019ac9 	.word	0x08019ac9
 801993c:	08019ac9 	.word	0x08019ac9
 8019940:	08019ac9 	.word	0x08019ac9
 8019944:	080199c7 	.word	0x080199c7
 8019948:	080199e9 	.word	0x080199e9
 801994c:	08019a25 	.word	0x08019a25
 8019950:	08019a47 	.word	0x08019a47
 8019954:	08019ac9 	.word	0x08019ac9
 8019958:	08019ac9 	.word	0x08019ac9
 801995c:	08019ac9 	.word	0x08019ac9
 8019960:	08019a85 	.word	0x08019a85
 8019964:	08019aa7 	.word	0x08019aa7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019968:	2300      	movs	r3, #0
 801996a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801996e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019972:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8019976:	e0ab      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801997c:	2b04      	cmp	r3, #4
 801997e:	d009      	beq.n	8019994 <dhcp_parse_reply+0x218>
 8019980:	4b3a      	ldr	r3, [pc, #232]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 8019982:	f240 622e 	movw	r2, #1582	@ 0x62e
 8019986:	493a      	ldr	r1, [pc, #232]	@ (8019a70 <dhcp_parse_reply+0x2f4>)
 8019988:	483a      	ldr	r0, [pc, #232]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 801998a:	f003 fcfb 	bl	801d384 <iprintf>
 801998e:	f06f 0305 	mvn.w	r3, #5
 8019992:	e1b0      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019994:	2306      	movs	r3, #6
 8019996:	623b      	str	r3, [r7, #32]
        break;
 8019998:	e09a      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801999a:	2304      	movs	r3, #4
 801999c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80199a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80199a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d209      	bcs.n	80199c0 <dhcp_parse_reply+0x244>
 80199ac:	4b2f      	ldr	r3, [pc, #188]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 80199ae:	f240 6233 	movw	r2, #1587	@ 0x633
 80199b2:	4931      	ldr	r1, [pc, #196]	@ (8019a78 <dhcp_parse_reply+0x2fc>)
 80199b4:	482f      	ldr	r0, [pc, #188]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 80199b6:	f003 fce5 	bl	801d384 <iprintf>
 80199ba:	f06f 0305 	mvn.w	r3, #5
 80199be:	e19a      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80199c0:	2307      	movs	r3, #7
 80199c2:	623b      	str	r3, [r7, #32]
        break;
 80199c4:	e084      	b.n	8019ad0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80199c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199ca:	2b04      	cmp	r3, #4
 80199cc:	d009      	beq.n	80199e2 <dhcp_parse_reply+0x266>
 80199ce:	4b27      	ldr	r3, [pc, #156]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 80199d0:	f240 6241 	movw	r2, #1601	@ 0x641
 80199d4:	4926      	ldr	r1, [pc, #152]	@ (8019a70 <dhcp_parse_reply+0x2f4>)
 80199d6:	4827      	ldr	r0, [pc, #156]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 80199d8:	f003 fcd4 	bl	801d384 <iprintf>
 80199dc:	f06f 0305 	mvn.w	r3, #5
 80199e0:	e189      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80199e2:	2303      	movs	r3, #3
 80199e4:	623b      	str	r3, [r7, #32]
        break;
 80199e6:	e073      	b.n	8019ad0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80199e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199ec:	2b01      	cmp	r3, #1
 80199ee:	d009      	beq.n	8019a04 <dhcp_parse_reply+0x288>
 80199f0:	4b1e      	ldr	r3, [pc, #120]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 80199f2:	f240 624f 	movw	r2, #1615	@ 0x64f
 80199f6:	4921      	ldr	r1, [pc, #132]	@ (8019a7c <dhcp_parse_reply+0x300>)
 80199f8:	481e      	ldr	r0, [pc, #120]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 80199fa:	f003 fcc3 	bl	801d384 <iprintf>
 80199fe:	f06f 0305 	mvn.w	r3, #5
 8019a02:	e178      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019a04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019a06:	2bf0      	cmp	r3, #240	@ 0xf0
 8019a08:	d009      	beq.n	8019a1e <dhcp_parse_reply+0x2a2>
 8019a0a:	4b18      	ldr	r3, [pc, #96]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 8019a0c:	f240 6251 	movw	r2, #1617	@ 0x651
 8019a10:	491b      	ldr	r1, [pc, #108]	@ (8019a80 <dhcp_parse_reply+0x304>)
 8019a12:	4818      	ldr	r0, [pc, #96]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 8019a14:	f003 fcb6 	bl	801d384 <iprintf>
 8019a18:	f06f 0305 	mvn.w	r3, #5
 8019a1c:	e16b      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019a1e:	2300      	movs	r3, #0
 8019a20:	623b      	str	r3, [r7, #32]
        break;
 8019a22:	e055      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a28:	2b01      	cmp	r3, #1
 8019a2a:	d009      	beq.n	8019a40 <dhcp_parse_reply+0x2c4>
 8019a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 8019a2e:	f240 6255 	movw	r2, #1621	@ 0x655
 8019a32:	4912      	ldr	r1, [pc, #72]	@ (8019a7c <dhcp_parse_reply+0x300>)
 8019a34:	480f      	ldr	r0, [pc, #60]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 8019a36:	f003 fca5 	bl	801d384 <iprintf>
 8019a3a:	f06f 0305 	mvn.w	r3, #5
 8019a3e:	e15a      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019a40:	2301      	movs	r3, #1
 8019a42:	623b      	str	r3, [r7, #32]
        break;
 8019a44:	e044      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a4a:	2b04      	cmp	r3, #4
 8019a4c:	d009      	beq.n	8019a62 <dhcp_parse_reply+0x2e6>
 8019a4e:	4b07      	ldr	r3, [pc, #28]	@ (8019a6c <dhcp_parse_reply+0x2f0>)
 8019a50:	f240 6259 	movw	r2, #1625	@ 0x659
 8019a54:	4906      	ldr	r1, [pc, #24]	@ (8019a70 <dhcp_parse_reply+0x2f4>)
 8019a56:	4807      	ldr	r0, [pc, #28]	@ (8019a74 <dhcp_parse_reply+0x2f8>)
 8019a58:	f003 fc94 	bl	801d384 <iprintf>
 8019a5c:	f06f 0305 	mvn.w	r3, #5
 8019a60:	e149      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019a62:	2302      	movs	r3, #2
 8019a64:	623b      	str	r3, [r7, #32]
        break;
 8019a66:	e033      	b.n	8019ad0 <dhcp_parse_reply+0x354>
 8019a68:	2400ccb4 	.word	0x2400ccb4
 8019a6c:	0802196c 	.word	0x0802196c
 8019a70:	08021bf4 	.word	0x08021bf4
 8019a74:	080219cc 	.word	0x080219cc
 8019a78:	08021c00 	.word	0x08021c00
 8019a7c:	08021c14 	.word	0x08021c14
 8019a80:	08021c20 	.word	0x08021c20
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a88:	2b04      	cmp	r3, #4
 8019a8a:	d009      	beq.n	8019aa0 <dhcp_parse_reply+0x324>
 8019a8c:	4b9c      	ldr	r3, [pc, #624]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019a8e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019a92:	499c      	ldr	r1, [pc, #624]	@ (8019d04 <dhcp_parse_reply+0x588>)
 8019a94:	489c      	ldr	r0, [pc, #624]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019a96:	f003 fc75 	bl	801d384 <iprintf>
 8019a9a:	f06f 0305 	mvn.w	r3, #5
 8019a9e:	e12a      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019aa0:	2304      	movs	r3, #4
 8019aa2:	623b      	str	r3, [r7, #32]
        break;
 8019aa4:	e014      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019aaa:	2b04      	cmp	r3, #4
 8019aac:	d009      	beq.n	8019ac2 <dhcp_parse_reply+0x346>
 8019aae:	4b94      	ldr	r3, [pc, #592]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019ab0:	f240 6261 	movw	r2, #1633	@ 0x661
 8019ab4:	4993      	ldr	r1, [pc, #588]	@ (8019d04 <dhcp_parse_reply+0x588>)
 8019ab6:	4894      	ldr	r0, [pc, #592]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019ab8:	f003 fc64 	bl	801d384 <iprintf>
 8019abc:	f06f 0305 	mvn.w	r3, #5
 8019ac0:	e119      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019ac2:	2305      	movs	r3, #5
 8019ac4:	623b      	str	r3, [r7, #32]
        break;
 8019ac6:	e003      	b.n	8019ad0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8019ac8:	2300      	movs	r3, #0
 8019aca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019ace:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019ad0:	7dfb      	ldrb	r3, [r7, #23]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d103      	bne.n	8019ade <dhcp_parse_reply+0x362>
      offset++;
 8019ad6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019ad8:	3301      	adds	r3, #1
 8019ada:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019adc:	e0a1      	b.n	8019c22 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019ade:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ae4:	4413      	add	r3, r2
 8019ae6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019aea:	4293      	cmp	r3, r2
 8019aec:	dd02      	ble.n	8019af4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8019aee:	f06f 0301 	mvn.w	r3, #1
 8019af2:	e100      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8019af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019af8:	b29a      	uxth	r2, r3
 8019afa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019afc:	4413      	add	r3, r2
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	3302      	adds	r3, #2
 8019b02:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f000 808a 	beq.w	8019c22 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8019b0e:	2300      	movs	r3, #0
 8019b10:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019b12:	6a3b      	ldr	r3, [r7, #32]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	db02      	blt.n	8019b1e <dhcp_parse_reply+0x3a2>
 8019b18:	6a3b      	ldr	r3, [r7, #32]
 8019b1a:	2b07      	cmp	r3, #7
 8019b1c:	dd06      	ble.n	8019b2c <dhcp_parse_reply+0x3b0>
 8019b1e:	4b78      	ldr	r3, [pc, #480]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019b20:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8019b24:	4979      	ldr	r1, [pc, #484]	@ (8019d0c <dhcp_parse_reply+0x590>)
 8019b26:	4878      	ldr	r0, [pc, #480]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019b28:	f003 fc2c 	bl	801d384 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019b2c:	4a78      	ldr	r2, [pc, #480]	@ (8019d10 <dhcp_parse_reply+0x594>)
 8019b2e:	6a3b      	ldr	r3, [r7, #32]
 8019b30:	4413      	add	r3, r2
 8019b32:	781b      	ldrb	r3, [r3, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d174      	bne.n	8019c22 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8019b38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b3c:	2b04      	cmp	r3, #4
 8019b3e:	bf28      	it	cs
 8019b40:	2304      	movcs	r3, #4
 8019b42:	b2db      	uxtb	r3, r3
 8019b44:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019b46:	8bfb      	ldrh	r3, [r7, #30]
 8019b48:	8aba      	ldrh	r2, [r7, #20]
 8019b4a:	f107 0108 	add.w	r1, r7, #8
 8019b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b50:	f7f8 fc20 	bl	8012394 <pbuf_copy_partial>
 8019b54:	4603      	mov	r3, r0
 8019b56:	461a      	mov	r2, r3
 8019b58:	8abb      	ldrh	r3, [r7, #20]
 8019b5a:	4293      	cmp	r3, r2
 8019b5c:	d002      	beq.n	8019b64 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8019b5e:	f06f 0301 	mvn.w	r3, #1
 8019b62:	e0c8      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8019b64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b68:	2b04      	cmp	r3, #4
 8019b6a:	d933      	bls.n	8019bd4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b70:	f003 0303 	and.w	r3, r3, #3
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d009      	beq.n	8019b8e <dhcp_parse_reply+0x412>
 8019b7a:	4b61      	ldr	r3, [pc, #388]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019b7c:	f240 6281 	movw	r2, #1665	@ 0x681
 8019b80:	4964      	ldr	r1, [pc, #400]	@ (8019d14 <dhcp_parse_reply+0x598>)
 8019b82:	4861      	ldr	r0, [pc, #388]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019b84:	f003 fbfe 	bl	801d384 <iprintf>
 8019b88:	f06f 0305 	mvn.w	r3, #5
 8019b8c:	e0b3      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8019b8e:	4a60      	ldr	r2, [pc, #384]	@ (8019d10 <dhcp_parse_reply+0x594>)
 8019b90:	6a3b      	ldr	r3, [r7, #32]
 8019b92:	4413      	add	r3, r2
 8019b94:	2201      	movs	r2, #1
 8019b96:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f7f6 fd53 	bl	8010646 <lwip_htonl>
 8019ba0:	4602      	mov	r2, r0
 8019ba2:	495d      	ldr	r1, [pc, #372]	@ (8019d18 <dhcp_parse_reply+0x59c>)
 8019ba4:	6a3b      	ldr	r3, [r7, #32]
 8019ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019baa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bae:	3b04      	subs	r3, #4
 8019bb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8019bb4:	8bfb      	ldrh	r3, [r7, #30]
 8019bb6:	3304      	adds	r3, #4
 8019bb8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8019bba:	8a7a      	ldrh	r2, [r7, #18]
 8019bbc:	8bfb      	ldrh	r3, [r7, #30]
 8019bbe:	429a      	cmp	r2, r3
 8019bc0:	d202      	bcs.n	8019bc8 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8019bc2:	f06f 0301 	mvn.w	r3, #1
 8019bc6:	e096      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8019bc8:	8a7b      	ldrh	r3, [r7, #18]
 8019bca:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019bcc:	6a3b      	ldr	r3, [r7, #32]
 8019bce:	3301      	adds	r3, #1
 8019bd0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8019bd2:	e79e      	b.n	8019b12 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8019bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bd8:	2b04      	cmp	r3, #4
 8019bda:	d106      	bne.n	8019bea <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	4618      	mov	r0, r3
 8019be0:	f7f6 fd31 	bl	8010646 <lwip_htonl>
 8019be4:	4603      	mov	r3, r0
 8019be6:	60bb      	str	r3, [r7, #8]
 8019be8:	e011      	b.n	8019c0e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019bea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d009      	beq.n	8019c06 <dhcp_parse_reply+0x48a>
 8019bf2:	4b43      	ldr	r3, [pc, #268]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019bf4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8019bf8:	4948      	ldr	r1, [pc, #288]	@ (8019d1c <dhcp_parse_reply+0x5a0>)
 8019bfa:	4843      	ldr	r0, [pc, #268]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019bfc:	f003 fbc2 	bl	801d384 <iprintf>
 8019c00:	f06f 0305 	mvn.w	r3, #5
 8019c04:	e077      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8019c06:	f107 0308 	add.w	r3, r7, #8
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8019c0e:	4a40      	ldr	r2, [pc, #256]	@ (8019d10 <dhcp_parse_reply+0x594>)
 8019c10:	6a3b      	ldr	r3, [r7, #32]
 8019c12:	4413      	add	r3, r2
 8019c14:	2201      	movs	r2, #1
 8019c16:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8019c18:	68ba      	ldr	r2, [r7, #8]
 8019c1a:	493f      	ldr	r1, [pc, #252]	@ (8019d18 <dhcp_parse_reply+0x59c>)
 8019c1c:	6a3b      	ldr	r3, [r7, #32]
 8019c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8019c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c24:	895b      	ldrh	r3, [r3, #10]
 8019c26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c28:	429a      	cmp	r2, r3
 8019c2a:	d324      	bcc.n	8019c76 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8019c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c2e:	895b      	ldrh	r3, [r3, #10]
 8019c30:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c32:	1ad3      	subs	r3, r2, r3
 8019c34:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8019c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c38:	895b      	ldrh	r3, [r3, #10]
 8019c3a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8019c3c:	1ad3      	subs	r3, r2, r3
 8019c3e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8019c40:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d213      	bcs.n	8019c70 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8019c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8019c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d109      	bne.n	8019c68 <dhcp_parse_reply+0x4ec>
 8019c54:	4b2a      	ldr	r3, [pc, #168]	@ (8019d00 <dhcp_parse_reply+0x584>)
 8019c56:	f240 629d 	movw	r2, #1693	@ 0x69d
 8019c5a:	4931      	ldr	r1, [pc, #196]	@ (8019d20 <dhcp_parse_reply+0x5a4>)
 8019c5c:	482a      	ldr	r0, [pc, #168]	@ (8019d08 <dhcp_parse_reply+0x58c>)
 8019c5e:	f003 fb91 	bl	801d384 <iprintf>
 8019c62:	f06f 0305 	mvn.w	r3, #5
 8019c66:	e046      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8019c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c6e:	e002      	b.n	8019c76 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8019c70:	f06f 0301 	mvn.w	r3, #1
 8019c74:	e03f      	b.n	8019cf6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d00a      	beq.n	8019c92 <dhcp_parse_reply+0x516>
 8019c7c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d206      	bcs.n	8019c92 <dhcp_parse_reply+0x516>
 8019c84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019c86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019c88:	4413      	add	r3, r2
 8019c8a:	781b      	ldrb	r3, [r3, #0]
 8019c8c:	2bff      	cmp	r3, #255	@ 0xff
 8019c8e:	f47f adb8 	bne.w	8019802 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8019c92:	4b1f      	ldr	r3, [pc, #124]	@ (8019d10 <dhcp_parse_reply+0x594>)
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d018      	beq.n	8019ccc <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8019d18 <dhcp_parse_reply+0x59c>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8019d10 <dhcp_parse_reply+0x594>)
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	d102      	bne.n	8019cb2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8019cac:	2301      	movs	r3, #1
 8019cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019cb0:	e00c      	b.n	8019ccc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	2b02      	cmp	r3, #2
 8019cb6:	d102      	bne.n	8019cbe <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8019cb8:	2301      	movs	r3, #1
 8019cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019cbc:	e006      	b.n	8019ccc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	2b03      	cmp	r3, #3
 8019cc2:	d103      	bne.n	8019ccc <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8019cc8:	2301      	movs	r3, #1
 8019cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8019ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d006      	beq.n	8019ce0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8019cd6:	236c      	movs	r3, #108	@ 0x6c
 8019cd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019cda:	23ec      	movs	r3, #236	@ 0xec
 8019cdc:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8019cde:	e56a      	b.n	80197b6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8019ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d006      	beq.n	8019cf4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8019cea:	232c      	movs	r3, #44	@ 0x2c
 8019cec:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019cee:	236c      	movs	r3, #108	@ 0x6c
 8019cf0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8019cf2:	e560      	b.n	80197b6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8019cf4:	2300      	movs	r3, #0
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	3740      	adds	r7, #64	@ 0x40
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}
 8019cfe:	bf00      	nop
 8019d00:	0802196c 	.word	0x0802196c
 8019d04:	08021bf4 	.word	0x08021bf4
 8019d08:	080219cc 	.word	0x080219cc
 8019d0c:	08021c38 	.word	0x08021c38
 8019d10:	2400ccb4 	.word	0x2400ccb4
 8019d14:	08021c4c 	.word	0x08021c4c
 8019d18:	2400cc94 	.word	0x2400cc94
 8019d1c:	08021c64 	.word	0x08021c64
 8019d20:	08021c78 	.word	0x08021c78

08019d24 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b08a      	sub	sp, #40	@ 0x28
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	60f8      	str	r0, [r7, #12]
 8019d2c:	60b9      	str	r1, [r7, #8]
 8019d2e:	607a      	str	r2, [r7, #4]
 8019d30:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019d32:	4b60      	ldr	r3, [pc, #384]	@ (8019eb4 <dhcp_recv+0x190>)
 8019d34:	685b      	ldr	r3, [r3, #4]
 8019d36:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d38:	6a3b      	ldr	r3, [r7, #32]
 8019d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d3c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	685b      	ldr	r3, [r3, #4]
 8019d42:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019d44:	69fb      	ldr	r3, [r7, #28]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f000 809d 	beq.w	8019e86 <dhcp_recv+0x162>
 8019d4c:	69fb      	ldr	r3, [r7, #28]
 8019d4e:	791b      	ldrb	r3, [r3, #4]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	f000 8098 	beq.w	8019e86 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	895b      	ldrh	r3, [r3, #10]
 8019d5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8019d5c:	f240 8095 	bls.w	8019e8a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	2b02      	cmp	r3, #2
 8019d66:	f040 8092 	bne.w	8019e8e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019d70:	e012      	b.n	8019d98 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019d72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d76:	6a3a      	ldr	r2, [r7, #32]
 8019d78:	4413      	add	r3, r2
 8019d7a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8019d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d82:	69b9      	ldr	r1, [r7, #24]
 8019d84:	440b      	add	r3, r1
 8019d86:	7f1b      	ldrb	r3, [r3, #28]
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	f040 8082 	bne.w	8019e92 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d92:	3301      	adds	r3, #1
 8019d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019d98:	6a3b      	ldr	r3, [r7, #32]
 8019d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d203      	bcs.n	8019dae <dhcp_recv+0x8a>
 8019da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019daa:	2b05      	cmp	r3, #5
 8019dac:	d9e1      	bls.n	8019d72 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019dae:	69bb      	ldr	r3, [r7, #24]
 8019db0:	685b      	ldr	r3, [r3, #4]
 8019db2:	4618      	mov	r0, r3
 8019db4:	f7f6 fc47 	bl	8010646 <lwip_htonl>
 8019db8:	4602      	mov	r2, r0
 8019dba:	69fb      	ldr	r3, [r7, #28]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d169      	bne.n	8019e96 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019dc2:	69f9      	ldr	r1, [r7, #28]
 8019dc4:	6878      	ldr	r0, [r7, #4]
 8019dc6:	f7ff fcd9 	bl	801977c <dhcp_parse_reply>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d164      	bne.n	8019e9a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019dd0:	4b39      	ldr	r3, [pc, #228]	@ (8019eb8 <dhcp_recv+0x194>)
 8019dd2:	785b      	ldrb	r3, [r3, #1]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d062      	beq.n	8019e9e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	685b      	ldr	r3, [r3, #4]
 8019ddc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019dde:	4b37      	ldr	r3, [pc, #220]	@ (8019ebc <dhcp_recv+0x198>)
 8019de0:	685b      	ldr	r3, [r3, #4]
 8019de2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8019de4:	7cfb      	ldrb	r3, [r7, #19]
 8019de6:	2b05      	cmp	r3, #5
 8019de8:	d12a      	bne.n	8019e40 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019dea:	69fb      	ldr	r3, [r7, #28]
 8019dec:	795b      	ldrb	r3, [r3, #5]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	d112      	bne.n	8019e18 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8019df2:	6979      	ldr	r1, [r7, #20]
 8019df4:	6a38      	ldr	r0, [r7, #32]
 8019df6:	f7fe fe1d 	bl	8018a34 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019dfa:	6a3b      	ldr	r3, [r7, #32]
 8019dfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019e00:	f003 0308 	and.w	r3, r3, #8
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d003      	beq.n	8019e10 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8019e08:	6a38      	ldr	r0, [r7, #32]
 8019e0a:	f7fe fb8b 	bl	8018524 <dhcp_check>
 8019e0e:	e049      	b.n	8019ea4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8019e10:	6a38      	ldr	r0, [r7, #32]
 8019e12:	f7ff f86d 	bl	8018ef0 <dhcp_bind>
 8019e16:	e045      	b.n	8019ea4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019e18:	69fb      	ldr	r3, [r7, #28]
 8019e1a:	795b      	ldrb	r3, [r3, #5]
 8019e1c:	2b03      	cmp	r3, #3
 8019e1e:	d007      	beq.n	8019e30 <dhcp_recv+0x10c>
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	795b      	ldrb	r3, [r3, #5]
 8019e24:	2b04      	cmp	r3, #4
 8019e26:	d003      	beq.n	8019e30 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019e2c:	2b05      	cmp	r3, #5
 8019e2e:	d139      	bne.n	8019ea4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019e30:	6979      	ldr	r1, [r7, #20]
 8019e32:	6a38      	ldr	r0, [r7, #32]
 8019e34:	f7fe fdfe 	bl	8018a34 <dhcp_handle_ack>
      dhcp_bind(netif);
 8019e38:	6a38      	ldr	r0, [r7, #32]
 8019e3a:	f7ff f859 	bl	8018ef0 <dhcp_bind>
 8019e3e:	e031      	b.n	8019ea4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019e40:	7cfb      	ldrb	r3, [r7, #19]
 8019e42:	2b06      	cmp	r3, #6
 8019e44:	d113      	bne.n	8019e6e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e46:	69fb      	ldr	r3, [r7, #28]
 8019e48:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019e4a:	2b03      	cmp	r3, #3
 8019e4c:	d00b      	beq.n	8019e66 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e4e:	69fb      	ldr	r3, [r7, #28]
 8019e50:	795b      	ldrb	r3, [r3, #5]
 8019e52:	2b01      	cmp	r3, #1
 8019e54:	d007      	beq.n	8019e66 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019e56:	69fb      	ldr	r3, [r7, #28]
 8019e58:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e5a:	2b04      	cmp	r3, #4
 8019e5c:	d003      	beq.n	8019e66 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019e5e:	69fb      	ldr	r3, [r7, #28]
 8019e60:	795b      	ldrb	r3, [r3, #5]
 8019e62:	2b05      	cmp	r3, #5
 8019e64:	d103      	bne.n	8019e6e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019e66:	6a38      	ldr	r0, [r7, #32]
 8019e68:	f7fe fb42 	bl	80184f0 <dhcp_handle_nak>
 8019e6c:	e01a      	b.n	8019ea4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019e6e:	7cfb      	ldrb	r3, [r7, #19]
 8019e70:	2b02      	cmp	r3, #2
 8019e72:	d116      	bne.n	8019ea2 <dhcp_recv+0x17e>
 8019e74:	69fb      	ldr	r3, [r7, #28]
 8019e76:	795b      	ldrb	r3, [r3, #5]
 8019e78:	2b06      	cmp	r3, #6
 8019e7a:	d112      	bne.n	8019ea2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8019e7c:	6979      	ldr	r1, [r7, #20]
 8019e7e:	6a38      	ldr	r0, [r7, #32]
 8019e80:	f7fe fb84 	bl	801858c <dhcp_handle_offer>
 8019e84:	e00e      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e86:	bf00      	nop
 8019e88:	e00c      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e8a:	bf00      	nop
 8019e8c:	e00a      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e8e:	bf00      	nop
 8019e90:	e008      	b.n	8019ea4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019e92:	bf00      	nop
 8019e94:	e006      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e96:	bf00      	nop
 8019e98:	e004      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e9a:	bf00      	nop
 8019e9c:	e002      	b.n	8019ea4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019e9e:	bf00      	nop
 8019ea0:	e000      	b.n	8019ea4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019ea2:	bf00      	nop
  pbuf_free(p);
 8019ea4:	6878      	ldr	r0, [r7, #4]
 8019ea6:	f7f8 f86f 	bl	8011f88 <pbuf_free>
}
 8019eaa:	bf00      	nop
 8019eac:	3728      	adds	r7, #40	@ 0x28
 8019eae:	46bd      	mov	sp, r7
 8019eb0:	bd80      	pop	{r7, pc}
 8019eb2:	bf00      	nop
 8019eb4:	24009b14 	.word	0x24009b14
 8019eb8:	2400ccb4 	.word	0x2400ccb4
 8019ebc:	2400cc94 	.word	0x2400cc94

08019ec0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b088      	sub	sp, #32
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	60f8      	str	r0, [r7, #12]
 8019ec8:	60b9      	str	r1, [r7, #8]
 8019eca:	603b      	str	r3, [r7, #0]
 8019ecc:	4613      	mov	r3, r2
 8019ece:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d108      	bne.n	8019ee8 <dhcp_create_msg+0x28>
 8019ed6:	4b5f      	ldr	r3, [pc, #380]	@ (801a054 <dhcp_create_msg+0x194>)
 8019ed8:	f240 7269 	movw	r2, #1897	@ 0x769
 8019edc:	495e      	ldr	r1, [pc, #376]	@ (801a058 <dhcp_create_msg+0x198>)
 8019ede:	485f      	ldr	r0, [pc, #380]	@ (801a05c <dhcp_create_msg+0x19c>)
 8019ee0:	f003 fa50 	bl	801d384 <iprintf>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	e0b1      	b.n	801a04c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d108      	bne.n	8019f00 <dhcp_create_msg+0x40>
 8019eee:	4b59      	ldr	r3, [pc, #356]	@ (801a054 <dhcp_create_msg+0x194>)
 8019ef0:	f240 726a 	movw	r2, #1898	@ 0x76a
 8019ef4:	495a      	ldr	r1, [pc, #360]	@ (801a060 <dhcp_create_msg+0x1a0>)
 8019ef6:	4859      	ldr	r0, [pc, #356]	@ (801a05c <dhcp_create_msg+0x19c>)
 8019ef8:	f003 fa44 	bl	801d384 <iprintf>
 8019efc:	2300      	movs	r3, #0
 8019efe:	e0a5      	b.n	801a04c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8019f00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019f04:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8019f08:	2036      	movs	r0, #54	@ 0x36
 8019f0a:	f7f7 fd59 	bl	80119c0 <pbuf_alloc>
 8019f0e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8019f10:	69bb      	ldr	r3, [r7, #24]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d101      	bne.n	8019f1a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8019f16:	2300      	movs	r3, #0
 8019f18:	e098      	b.n	801a04c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019f1a:	69bb      	ldr	r3, [r7, #24]
 8019f1c:	895b      	ldrh	r3, [r3, #10]
 8019f1e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8019f22:	d206      	bcs.n	8019f32 <dhcp_create_msg+0x72>
 8019f24:	4b4b      	ldr	r3, [pc, #300]	@ (801a054 <dhcp_create_msg+0x194>)
 8019f26:	f240 7271 	movw	r2, #1905	@ 0x771
 8019f2a:	494e      	ldr	r1, [pc, #312]	@ (801a064 <dhcp_create_msg+0x1a4>)
 8019f2c:	484b      	ldr	r0, [pc, #300]	@ (801a05c <dhcp_create_msg+0x19c>)
 8019f2e:	f003 fa29 	bl	801d384 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019f32:	79fb      	ldrb	r3, [r7, #7]
 8019f34:	2b03      	cmp	r3, #3
 8019f36:	d103      	bne.n	8019f40 <dhcp_create_msg+0x80>
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	795b      	ldrb	r3, [r3, #5]
 8019f3c:	2b03      	cmp	r3, #3
 8019f3e:	d10d      	bne.n	8019f5c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	799b      	ldrb	r3, [r3, #6]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d105      	bne.n	8019f54 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8019f48:	f002 fce4 	bl	801c914 <rand>
 8019f4c:	4603      	mov	r3, r0
 8019f4e:	461a      	mov	r2, r3
 8019f50:	4b45      	ldr	r3, [pc, #276]	@ (801a068 <dhcp_create_msg+0x1a8>)
 8019f52:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019f54:	4b44      	ldr	r3, [pc, #272]	@ (801a068 <dhcp_create_msg+0x1a8>)
 8019f56:	681a      	ldr	r2, [r3, #0]
 8019f58:	68bb      	ldr	r3, [r7, #8]
 8019f5a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8019f5c:	69bb      	ldr	r3, [r7, #24]
 8019f5e:	685b      	ldr	r3, [r3, #4]
 8019f60:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8019f62:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8019f66:	2100      	movs	r1, #0
 8019f68:	6978      	ldr	r0, [r7, #20]
 8019f6a:	f003 fb63 	bl	801d634 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	2201      	movs	r2, #1
 8019f72:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	2201      	movs	r2, #1
 8019f78:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f7f6 fb5c 	bl	8010646 <lwip_htonl>
 8019f8e:	4602      	mov	r2, r0
 8019f90:	697b      	ldr	r3, [r7, #20]
 8019f92:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019f94:	79fb      	ldrb	r3, [r7, #7]
 8019f96:	2b08      	cmp	r3, #8
 8019f98:	d010      	beq.n	8019fbc <dhcp_create_msg+0xfc>
 8019f9a:	79fb      	ldrb	r3, [r7, #7]
 8019f9c:	2b04      	cmp	r3, #4
 8019f9e:	d00d      	beq.n	8019fbc <dhcp_create_msg+0xfc>
 8019fa0:	79fb      	ldrb	r3, [r7, #7]
 8019fa2:	2b07      	cmp	r3, #7
 8019fa4:	d00a      	beq.n	8019fbc <dhcp_create_msg+0xfc>
 8019fa6:	79fb      	ldrb	r3, [r7, #7]
 8019fa8:	2b03      	cmp	r3, #3
 8019faa:	d10c      	bne.n	8019fc6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019fb0:	2b05      	cmp	r3, #5
 8019fb2:	d003      	beq.n	8019fbc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	795b      	ldrb	r3, [r3, #5]
 8019fb8:	2b04      	cmp	r3, #4
 8019fba:	d104      	bne.n	8019fc6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	3304      	adds	r3, #4
 8019fc0:	681a      	ldr	r2, [r3, #0]
 8019fc2:	697b      	ldr	r3, [r7, #20]
 8019fc4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	83fb      	strh	r3, [r7, #30]
 8019fca:	e00c      	b.n	8019fe6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8019fcc:	8bfa      	ldrh	r2, [r7, #30]
 8019fce:	8bfb      	ldrh	r3, [r7, #30]
 8019fd0:	68f9      	ldr	r1, [r7, #12]
 8019fd2:	440a      	add	r2, r1
 8019fd4:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8019fd8:	697a      	ldr	r2, [r7, #20]
 8019fda:	4413      	add	r3, r2
 8019fdc:	460a      	mov	r2, r1
 8019fde:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019fe0:	8bfb      	ldrh	r3, [r7, #30]
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	83fb      	strh	r3, [r7, #30]
 8019fe6:	8bfb      	ldrh	r3, [r7, #30]
 8019fe8:	2b05      	cmp	r3, #5
 8019fea:	d9ef      	bls.n	8019fcc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8019fec:	697b      	ldr	r3, [r7, #20]
 8019fee:	2200      	movs	r2, #0
 8019ff0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8019ff4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8019ffe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a002:	2200      	movs	r2, #0
 801a004:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a008:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a00c:	2200      	movs	r2, #0
 801a00e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a012:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a01c:	2301      	movs	r3, #1
 801a01e:	2235      	movs	r2, #53	@ 0x35
 801a020:	2000      	movs	r0, #0
 801a022:	f7ff fadb 	bl	80195dc <dhcp_option>
 801a026:	4603      	mov	r3, r0
 801a028:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a02a:	697b      	ldr	r3, [r7, #20]
 801a02c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a030:	79fa      	ldrb	r2, [r7, #7]
 801a032:	8a7b      	ldrh	r3, [r7, #18]
 801a034:	4618      	mov	r0, r3
 801a036:	f7ff fb05 	bl	8019644 <dhcp_option_byte>
 801a03a:	4603      	mov	r3, r0
 801a03c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a03e:	683b      	ldr	r3, [r7, #0]
 801a040:	2b00      	cmp	r3, #0
 801a042:	d002      	beq.n	801a04a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	8a7a      	ldrh	r2, [r7, #18]
 801a048:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a04a:	69bb      	ldr	r3, [r7, #24]
}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3720      	adds	r7, #32
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}
 801a054:	0802196c 	.word	0x0802196c
 801a058:	08021c8c 	.word	0x08021c8c
 801a05c:	080219cc 	.word	0x080219cc
 801a060:	08021cac 	.word	0x08021cac
 801a064:	08021ccc 	.word	0x08021ccc
 801a068:	2400ccc4 	.word	0x2400ccc4

0801a06c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b084      	sub	sp, #16
 801a070:	af00      	add	r7, sp, #0
 801a072:	4603      	mov	r3, r0
 801a074:	60b9      	str	r1, [r7, #8]
 801a076:	607a      	str	r2, [r7, #4]
 801a078:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a07a:	89fb      	ldrh	r3, [r7, #14]
 801a07c:	1c5a      	adds	r2, r3, #1
 801a07e:	81fa      	strh	r2, [r7, #14]
 801a080:	461a      	mov	r2, r3
 801a082:	68bb      	ldr	r3, [r7, #8]
 801a084:	4413      	add	r3, r2
 801a086:	22ff      	movs	r2, #255	@ 0xff
 801a088:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a08a:	e007      	b.n	801a09c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a08c:	89fb      	ldrh	r3, [r7, #14]
 801a08e:	1c5a      	adds	r2, r3, #1
 801a090:	81fa      	strh	r2, [r7, #14]
 801a092:	461a      	mov	r2, r3
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	4413      	add	r3, r2
 801a098:	2200      	movs	r2, #0
 801a09a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a09c:	89fb      	ldrh	r3, [r7, #14]
 801a09e:	2b43      	cmp	r3, #67	@ 0x43
 801a0a0:	d904      	bls.n	801a0ac <dhcp_option_trailer+0x40>
 801a0a2:	89fb      	ldrh	r3, [r7, #14]
 801a0a4:	f003 0303 	and.w	r3, r3, #3
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d002      	beq.n	801a0b2 <dhcp_option_trailer+0x46>
 801a0ac:	89fb      	ldrh	r3, [r7, #14]
 801a0ae:	2b43      	cmp	r3, #67	@ 0x43
 801a0b0:	d9ec      	bls.n	801a08c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a0b2:	89fb      	ldrh	r3, [r7, #14]
 801a0b4:	33f0      	adds	r3, #240	@ 0xf0
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7f7 fdde 	bl	8011c7c <pbuf_realloc>
}
 801a0c0:	bf00      	nop
 801a0c2:	3710      	adds	r7, #16
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a0c8:	b480      	push	{r7}
 801a0ca:	b085      	sub	sp, #20
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d017      	beq.n	801a106 <dhcp_supplied_address+0x3e>
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d013      	beq.n	801a106 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0e2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	795b      	ldrb	r3, [r3, #5]
 801a0e8:	2b0a      	cmp	r3, #10
 801a0ea:	d007      	beq.n	801a0fc <dhcp_supplied_address+0x34>
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	795b      	ldrb	r3, [r3, #5]
 801a0f0:	2b05      	cmp	r3, #5
 801a0f2:	d003      	beq.n	801a0fc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a0f8:	2b04      	cmp	r3, #4
 801a0fa:	d101      	bne.n	801a100 <dhcp_supplied_address+0x38>
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	e000      	b.n	801a102 <dhcp_supplied_address+0x3a>
 801a100:	2300      	movs	r3, #0
 801a102:	b2db      	uxtb	r3, r3
 801a104:	e000      	b.n	801a108 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a106:	2300      	movs	r3, #0
}
 801a108:	4618      	mov	r0, r3
 801a10a:	3714      	adds	r7, #20
 801a10c:	46bd      	mov	sp, r7
 801a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a112:	4770      	bx	lr

0801a114 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b082      	sub	sp, #8
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a11c:	4915      	ldr	r1, [pc, #84]	@ (801a174 <etharp_free_entry+0x60>)
 801a11e:	687a      	ldr	r2, [r7, #4]
 801a120:	4613      	mov	r3, r2
 801a122:	005b      	lsls	r3, r3, #1
 801a124:	4413      	add	r3, r2
 801a126:	00db      	lsls	r3, r3, #3
 801a128:	440b      	add	r3, r1
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d013      	beq.n	801a158 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a130:	4910      	ldr	r1, [pc, #64]	@ (801a174 <etharp_free_entry+0x60>)
 801a132:	687a      	ldr	r2, [r7, #4]
 801a134:	4613      	mov	r3, r2
 801a136:	005b      	lsls	r3, r3, #1
 801a138:	4413      	add	r3, r2
 801a13a:	00db      	lsls	r3, r3, #3
 801a13c:	440b      	add	r3, r1
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4618      	mov	r0, r3
 801a142:	f7f7 ff21 	bl	8011f88 <pbuf_free>
    arp_table[i].q = NULL;
 801a146:	490b      	ldr	r1, [pc, #44]	@ (801a174 <etharp_free_entry+0x60>)
 801a148:	687a      	ldr	r2, [r7, #4]
 801a14a:	4613      	mov	r3, r2
 801a14c:	005b      	lsls	r3, r3, #1
 801a14e:	4413      	add	r3, r2
 801a150:	00db      	lsls	r3, r3, #3
 801a152:	440b      	add	r3, r1
 801a154:	2200      	movs	r2, #0
 801a156:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a158:	4906      	ldr	r1, [pc, #24]	@ (801a174 <etharp_free_entry+0x60>)
 801a15a:	687a      	ldr	r2, [r7, #4]
 801a15c:	4613      	mov	r3, r2
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	4413      	add	r3, r2
 801a162:	00db      	lsls	r3, r3, #3
 801a164:	440b      	add	r3, r1
 801a166:	3314      	adds	r3, #20
 801a168:	2200      	movs	r2, #0
 801a16a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a16c:	bf00      	nop
 801a16e:	3708      	adds	r7, #8
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}
 801a174:	2400ccc8 	.word	0x2400ccc8

0801a178 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b082      	sub	sp, #8
 801a17c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a17e:	2300      	movs	r3, #0
 801a180:	607b      	str	r3, [r7, #4]
 801a182:	e096      	b.n	801a2b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a184:	494f      	ldr	r1, [pc, #316]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	4613      	mov	r3, r2
 801a18a:	005b      	lsls	r3, r3, #1
 801a18c:	4413      	add	r3, r2
 801a18e:	00db      	lsls	r3, r3, #3
 801a190:	440b      	add	r3, r1
 801a192:	3314      	adds	r3, #20
 801a194:	781b      	ldrb	r3, [r3, #0]
 801a196:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a198:	78fb      	ldrb	r3, [r7, #3]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	f000 8086 	beq.w	801a2ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a1a0:	4948      	ldr	r1, [pc, #288]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	005b      	lsls	r3, r3, #1
 801a1a8:	4413      	add	r3, r2
 801a1aa:	00db      	lsls	r3, r3, #3
 801a1ac:	440b      	add	r3, r1
 801a1ae:	3312      	adds	r3, #18
 801a1b0:	881b      	ldrh	r3, [r3, #0]
 801a1b2:	3301      	adds	r3, #1
 801a1b4:	b298      	uxth	r0, r3
 801a1b6:	4943      	ldr	r1, [pc, #268]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	4613      	mov	r3, r2
 801a1bc:	005b      	lsls	r3, r3, #1
 801a1be:	4413      	add	r3, r2
 801a1c0:	00db      	lsls	r3, r3, #3
 801a1c2:	440b      	add	r3, r1
 801a1c4:	3312      	adds	r3, #18
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1ca:	493e      	ldr	r1, [pc, #248]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a1cc:	687a      	ldr	r2, [r7, #4]
 801a1ce:	4613      	mov	r3, r2
 801a1d0:	005b      	lsls	r3, r3, #1
 801a1d2:	4413      	add	r3, r2
 801a1d4:	00db      	lsls	r3, r3, #3
 801a1d6:	440b      	add	r3, r1
 801a1d8:	3312      	adds	r3, #18
 801a1da:	881b      	ldrh	r3, [r3, #0]
 801a1dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a1e0:	d215      	bcs.n	801a20e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1e2:	4938      	ldr	r1, [pc, #224]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a1e4:	687a      	ldr	r2, [r7, #4]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	005b      	lsls	r3, r3, #1
 801a1ea:	4413      	add	r3, r2
 801a1ec:	00db      	lsls	r3, r3, #3
 801a1ee:	440b      	add	r3, r1
 801a1f0:	3314      	adds	r3, #20
 801a1f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1f4:	2b01      	cmp	r3, #1
 801a1f6:	d10e      	bne.n	801a216 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a1f8:	4932      	ldr	r1, [pc, #200]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a1fa:	687a      	ldr	r2, [r7, #4]
 801a1fc:	4613      	mov	r3, r2
 801a1fe:	005b      	lsls	r3, r3, #1
 801a200:	4413      	add	r3, r2
 801a202:	00db      	lsls	r3, r3, #3
 801a204:	440b      	add	r3, r1
 801a206:	3312      	adds	r3, #18
 801a208:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a20a:	2b04      	cmp	r3, #4
 801a20c:	d903      	bls.n	801a216 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a20e:	6878      	ldr	r0, [r7, #4]
 801a210:	f7ff ff80 	bl	801a114 <etharp_free_entry>
 801a214:	e04a      	b.n	801a2ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a216:	492b      	ldr	r1, [pc, #172]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a218:	687a      	ldr	r2, [r7, #4]
 801a21a:	4613      	mov	r3, r2
 801a21c:	005b      	lsls	r3, r3, #1
 801a21e:	4413      	add	r3, r2
 801a220:	00db      	lsls	r3, r3, #3
 801a222:	440b      	add	r3, r1
 801a224:	3314      	adds	r3, #20
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	2b03      	cmp	r3, #3
 801a22a:	d10a      	bne.n	801a242 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a22c:	4925      	ldr	r1, [pc, #148]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a22e:	687a      	ldr	r2, [r7, #4]
 801a230:	4613      	mov	r3, r2
 801a232:	005b      	lsls	r3, r3, #1
 801a234:	4413      	add	r3, r2
 801a236:	00db      	lsls	r3, r3, #3
 801a238:	440b      	add	r3, r1
 801a23a:	3314      	adds	r3, #20
 801a23c:	2204      	movs	r2, #4
 801a23e:	701a      	strb	r2, [r3, #0]
 801a240:	e034      	b.n	801a2ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a242:	4920      	ldr	r1, [pc, #128]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a244:	687a      	ldr	r2, [r7, #4]
 801a246:	4613      	mov	r3, r2
 801a248:	005b      	lsls	r3, r3, #1
 801a24a:	4413      	add	r3, r2
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	440b      	add	r3, r1
 801a250:	3314      	adds	r3, #20
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	2b04      	cmp	r3, #4
 801a256:	d10a      	bne.n	801a26e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a258:	491a      	ldr	r1, [pc, #104]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a25a:	687a      	ldr	r2, [r7, #4]
 801a25c:	4613      	mov	r3, r2
 801a25e:	005b      	lsls	r3, r3, #1
 801a260:	4413      	add	r3, r2
 801a262:	00db      	lsls	r3, r3, #3
 801a264:	440b      	add	r3, r1
 801a266:	3314      	adds	r3, #20
 801a268:	2202      	movs	r2, #2
 801a26a:	701a      	strb	r2, [r3, #0]
 801a26c:	e01e      	b.n	801a2ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a26e:	4915      	ldr	r1, [pc, #84]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a270:	687a      	ldr	r2, [r7, #4]
 801a272:	4613      	mov	r3, r2
 801a274:	005b      	lsls	r3, r3, #1
 801a276:	4413      	add	r3, r2
 801a278:	00db      	lsls	r3, r3, #3
 801a27a:	440b      	add	r3, r1
 801a27c:	3314      	adds	r3, #20
 801a27e:	781b      	ldrb	r3, [r3, #0]
 801a280:	2b01      	cmp	r3, #1
 801a282:	d113      	bne.n	801a2ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a284:	490f      	ldr	r1, [pc, #60]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a286:	687a      	ldr	r2, [r7, #4]
 801a288:	4613      	mov	r3, r2
 801a28a:	005b      	lsls	r3, r3, #1
 801a28c:	4413      	add	r3, r2
 801a28e:	00db      	lsls	r3, r3, #3
 801a290:	440b      	add	r3, r1
 801a292:	3308      	adds	r3, #8
 801a294:	6818      	ldr	r0, [r3, #0]
 801a296:	687a      	ldr	r2, [r7, #4]
 801a298:	4613      	mov	r3, r2
 801a29a:	005b      	lsls	r3, r3, #1
 801a29c:	4413      	add	r3, r2
 801a29e:	00db      	lsls	r3, r3, #3
 801a2a0:	4a08      	ldr	r2, [pc, #32]	@ (801a2c4 <etharp_tmr+0x14c>)
 801a2a2:	4413      	add	r3, r2
 801a2a4:	3304      	adds	r3, #4
 801a2a6:	4619      	mov	r1, r3
 801a2a8:	f000 fe72 	bl	801af90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	3301      	adds	r3, #1
 801a2b0:	607b      	str	r3, [r7, #4]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	2b09      	cmp	r3, #9
 801a2b6:	f77f af65 	ble.w	801a184 <etharp_tmr+0xc>
      }
    }
  }
}
 801a2ba:	bf00      	nop
 801a2bc:	bf00      	nop
 801a2be:	3708      	adds	r7, #8
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}
 801a2c4:	2400ccc8 	.word	0x2400ccc8

0801a2c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b08a      	sub	sp, #40	@ 0x28
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	60f8      	str	r0, [r7, #12]
 801a2d0:	460b      	mov	r3, r1
 801a2d2:	607a      	str	r2, [r7, #4]
 801a2d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a2d6:	230a      	movs	r3, #10
 801a2d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a2da:	230a      	movs	r3, #10
 801a2dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a2de:	230a      	movs	r3, #10
 801a2e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a2e6:	230a      	movs	r3, #10
 801a2e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	83bb      	strh	r3, [r7, #28]
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	837b      	strh	r3, [r7, #26]
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	843b      	strh	r3, [r7, #32]
 801a2fa:	e0ae      	b.n	801a45a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a2fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a300:	49a6      	ldr	r1, [pc, #664]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a302:	4613      	mov	r3, r2
 801a304:	005b      	lsls	r3, r3, #1
 801a306:	4413      	add	r3, r2
 801a308:	00db      	lsls	r3, r3, #3
 801a30a:	440b      	add	r3, r1
 801a30c:	3314      	adds	r3, #20
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a312:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a316:	2b0a      	cmp	r3, #10
 801a318:	d105      	bne.n	801a326 <etharp_find_entry+0x5e>
 801a31a:	7dfb      	ldrb	r3, [r7, #23]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d102      	bne.n	801a326 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a320:	8c3b      	ldrh	r3, [r7, #32]
 801a322:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a324:	e095      	b.n	801a452 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a326:	7dfb      	ldrb	r3, [r7, #23]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	f000 8092 	beq.w	801a452 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a32e:	7dfb      	ldrb	r3, [r7, #23]
 801a330:	2b01      	cmp	r3, #1
 801a332:	d009      	beq.n	801a348 <etharp_find_entry+0x80>
 801a334:	7dfb      	ldrb	r3, [r7, #23]
 801a336:	2b01      	cmp	r3, #1
 801a338:	d806      	bhi.n	801a348 <etharp_find_entry+0x80>
 801a33a:	4b99      	ldr	r3, [pc, #612]	@ (801a5a0 <etharp_find_entry+0x2d8>)
 801a33c:	f240 1223 	movw	r2, #291	@ 0x123
 801a340:	4998      	ldr	r1, [pc, #608]	@ (801a5a4 <etharp_find_entry+0x2dc>)
 801a342:	4899      	ldr	r0, [pc, #612]	@ (801a5a8 <etharp_find_entry+0x2e0>)
 801a344:	f003 f81e 	bl	801d384 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d020      	beq.n	801a390 <etharp_find_entry+0xc8>
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	6819      	ldr	r1, [r3, #0]
 801a352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a356:	4891      	ldr	r0, [pc, #580]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a358:	4613      	mov	r3, r2
 801a35a:	005b      	lsls	r3, r3, #1
 801a35c:	4413      	add	r3, r2
 801a35e:	00db      	lsls	r3, r3, #3
 801a360:	4403      	add	r3, r0
 801a362:	3304      	adds	r3, #4
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	4299      	cmp	r1, r3
 801a368:	d112      	bne.n	801a390 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d00c      	beq.n	801a38a <etharp_find_entry+0xc2>
 801a370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a374:	4989      	ldr	r1, [pc, #548]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a376:	4613      	mov	r3, r2
 801a378:	005b      	lsls	r3, r3, #1
 801a37a:	4413      	add	r3, r2
 801a37c:	00db      	lsls	r3, r3, #3
 801a37e:	440b      	add	r3, r1
 801a380:	3308      	adds	r3, #8
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	687a      	ldr	r2, [r7, #4]
 801a386:	429a      	cmp	r2, r3
 801a388:	d102      	bne.n	801a390 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a38a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a38e:	e100      	b.n	801a592 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a390:	7dfb      	ldrb	r3, [r7, #23]
 801a392:	2b01      	cmp	r3, #1
 801a394:	d140      	bne.n	801a418 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a39a:	4980      	ldr	r1, [pc, #512]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a39c:	4613      	mov	r3, r2
 801a39e:	005b      	lsls	r3, r3, #1
 801a3a0:	4413      	add	r3, r2
 801a3a2:	00db      	lsls	r3, r3, #3
 801a3a4:	440b      	add	r3, r1
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d01a      	beq.n	801a3e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a3ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3b0:	497a      	ldr	r1, [pc, #488]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a3b2:	4613      	mov	r3, r2
 801a3b4:	005b      	lsls	r3, r3, #1
 801a3b6:	4413      	add	r3, r2
 801a3b8:	00db      	lsls	r3, r3, #3
 801a3ba:	440b      	add	r3, r1
 801a3bc:	3312      	adds	r3, #18
 801a3be:	881b      	ldrh	r3, [r3, #0]
 801a3c0:	8bba      	ldrh	r2, [r7, #28]
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	d845      	bhi.n	801a452 <etharp_find_entry+0x18a>
            old_queue = i;
 801a3c6:	8c3b      	ldrh	r3, [r7, #32]
 801a3c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a3ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3ce:	4973      	ldr	r1, [pc, #460]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	4413      	add	r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	440b      	add	r3, r1
 801a3da:	3312      	adds	r3, #18
 801a3dc:	881b      	ldrh	r3, [r3, #0]
 801a3de:	83bb      	strh	r3, [r7, #28]
 801a3e0:	e037      	b.n	801a452 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a3e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3e6:	496d      	ldr	r1, [pc, #436]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a3e8:	4613      	mov	r3, r2
 801a3ea:	005b      	lsls	r3, r3, #1
 801a3ec:	4413      	add	r3, r2
 801a3ee:	00db      	lsls	r3, r3, #3
 801a3f0:	440b      	add	r3, r1
 801a3f2:	3312      	adds	r3, #18
 801a3f4:	881b      	ldrh	r3, [r3, #0]
 801a3f6:	8b7a      	ldrh	r2, [r7, #26]
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	d82a      	bhi.n	801a452 <etharp_find_entry+0x18a>
            old_pending = i;
 801a3fc:	8c3b      	ldrh	r3, [r7, #32]
 801a3fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a400:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a404:	4965      	ldr	r1, [pc, #404]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a406:	4613      	mov	r3, r2
 801a408:	005b      	lsls	r3, r3, #1
 801a40a:	4413      	add	r3, r2
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	440b      	add	r3, r1
 801a410:	3312      	adds	r3, #18
 801a412:	881b      	ldrh	r3, [r3, #0]
 801a414:	837b      	strh	r3, [r7, #26]
 801a416:	e01c      	b.n	801a452 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a418:	7dfb      	ldrb	r3, [r7, #23]
 801a41a:	2b01      	cmp	r3, #1
 801a41c:	d919      	bls.n	801a452 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a41e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a422:	495e      	ldr	r1, [pc, #376]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a424:	4613      	mov	r3, r2
 801a426:	005b      	lsls	r3, r3, #1
 801a428:	4413      	add	r3, r2
 801a42a:	00db      	lsls	r3, r3, #3
 801a42c:	440b      	add	r3, r1
 801a42e:	3312      	adds	r3, #18
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	8b3a      	ldrh	r2, [r7, #24]
 801a434:	429a      	cmp	r2, r3
 801a436:	d80c      	bhi.n	801a452 <etharp_find_entry+0x18a>
            old_stable = i;
 801a438:	8c3b      	ldrh	r3, [r7, #32]
 801a43a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a43c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a440:	4956      	ldr	r1, [pc, #344]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a442:	4613      	mov	r3, r2
 801a444:	005b      	lsls	r3, r3, #1
 801a446:	4413      	add	r3, r2
 801a448:	00db      	lsls	r3, r3, #3
 801a44a:	440b      	add	r3, r1
 801a44c:	3312      	adds	r3, #18
 801a44e:	881b      	ldrh	r3, [r3, #0]
 801a450:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a452:	8c3b      	ldrh	r3, [r7, #32]
 801a454:	3301      	adds	r3, #1
 801a456:	b29b      	uxth	r3, r3
 801a458:	843b      	strh	r3, [r7, #32]
 801a45a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a45e:	2b09      	cmp	r3, #9
 801a460:	f77f af4c 	ble.w	801a2fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a464:	7afb      	ldrb	r3, [r7, #11]
 801a466:	f003 0302 	and.w	r3, r3, #2
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d108      	bne.n	801a480 <etharp_find_entry+0x1b8>
 801a46e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a472:	2b0a      	cmp	r3, #10
 801a474:	d107      	bne.n	801a486 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a476:	7afb      	ldrb	r3, [r7, #11]
 801a478:	f003 0301 	and.w	r3, r3, #1
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d102      	bne.n	801a486 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a480:	f04f 33ff 	mov.w	r3, #4294967295
 801a484:	e085      	b.n	801a592 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a486:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a48a:	2b09      	cmp	r3, #9
 801a48c:	dc02      	bgt.n	801a494 <etharp_find_entry+0x1cc>
    i = empty;
 801a48e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a490:	843b      	strh	r3, [r7, #32]
 801a492:	e039      	b.n	801a508 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a494:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a498:	2b09      	cmp	r3, #9
 801a49a:	dc14      	bgt.n	801a4c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a49e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a4a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4a4:	493d      	ldr	r1, [pc, #244]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a4a6:	4613      	mov	r3, r2
 801a4a8:	005b      	lsls	r3, r3, #1
 801a4aa:	4413      	add	r3, r2
 801a4ac:	00db      	lsls	r3, r3, #3
 801a4ae:	440b      	add	r3, r1
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d018      	beq.n	801a4e8 <etharp_find_entry+0x220>
 801a4b6:	4b3a      	ldr	r3, [pc, #232]	@ (801a5a0 <etharp_find_entry+0x2d8>)
 801a4b8:	f240 126d 	movw	r2, #365	@ 0x16d
 801a4bc:	493b      	ldr	r1, [pc, #236]	@ (801a5ac <etharp_find_entry+0x2e4>)
 801a4be:	483a      	ldr	r0, [pc, #232]	@ (801a5a8 <etharp_find_entry+0x2e0>)
 801a4c0:	f002 ff60 	bl	801d384 <iprintf>
 801a4c4:	e010      	b.n	801a4e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a4c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a4ca:	2b09      	cmp	r3, #9
 801a4cc:	dc02      	bgt.n	801a4d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a4ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a4d0:	843b      	strh	r3, [r7, #32]
 801a4d2:	e009      	b.n	801a4e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a4d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a4d8:	2b09      	cmp	r3, #9
 801a4da:	dc02      	bgt.n	801a4e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a4dc:	8bfb      	ldrh	r3, [r7, #30]
 801a4de:	843b      	strh	r3, [r7, #32]
 801a4e0:	e002      	b.n	801a4e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4e6:	e054      	b.n	801a592 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a4e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4ec:	2b09      	cmp	r3, #9
 801a4ee:	dd06      	ble.n	801a4fe <etharp_find_entry+0x236>
 801a4f0:	4b2b      	ldr	r3, [pc, #172]	@ (801a5a0 <etharp_find_entry+0x2d8>)
 801a4f2:	f240 127f 	movw	r2, #383	@ 0x17f
 801a4f6:	492e      	ldr	r1, [pc, #184]	@ (801a5b0 <etharp_find_entry+0x2e8>)
 801a4f8:	482b      	ldr	r0, [pc, #172]	@ (801a5a8 <etharp_find_entry+0x2e0>)
 801a4fa:	f002 ff43 	bl	801d384 <iprintf>
    etharp_free_entry(i);
 801a4fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a502:	4618      	mov	r0, r3
 801a504:	f7ff fe06 	bl	801a114 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a508:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a50c:	2b09      	cmp	r3, #9
 801a50e:	dd06      	ble.n	801a51e <etharp_find_entry+0x256>
 801a510:	4b23      	ldr	r3, [pc, #140]	@ (801a5a0 <etharp_find_entry+0x2d8>)
 801a512:	f240 1283 	movw	r2, #387	@ 0x183
 801a516:	4926      	ldr	r1, [pc, #152]	@ (801a5b0 <etharp_find_entry+0x2e8>)
 801a518:	4823      	ldr	r0, [pc, #140]	@ (801a5a8 <etharp_find_entry+0x2e0>)
 801a51a:	f002 ff33 	bl	801d384 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a522:	491e      	ldr	r1, [pc, #120]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a524:	4613      	mov	r3, r2
 801a526:	005b      	lsls	r3, r3, #1
 801a528:	4413      	add	r3, r2
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	440b      	add	r3, r1
 801a52e:	3314      	adds	r3, #20
 801a530:	781b      	ldrb	r3, [r3, #0]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d006      	beq.n	801a544 <etharp_find_entry+0x27c>
 801a536:	4b1a      	ldr	r3, [pc, #104]	@ (801a5a0 <etharp_find_entry+0x2d8>)
 801a538:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a53c:	491d      	ldr	r1, [pc, #116]	@ (801a5b4 <etharp_find_entry+0x2ec>)
 801a53e:	481a      	ldr	r0, [pc, #104]	@ (801a5a8 <etharp_find_entry+0x2e0>)
 801a540:	f002 ff20 	bl	801d384 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d00b      	beq.n	801a562 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a54a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	6819      	ldr	r1, [r3, #0]
 801a552:	4812      	ldr	r0, [pc, #72]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a554:	4613      	mov	r3, r2
 801a556:	005b      	lsls	r3, r3, #1
 801a558:	4413      	add	r3, r2
 801a55a:	00db      	lsls	r3, r3, #3
 801a55c:	4403      	add	r3, r0
 801a55e:	3304      	adds	r3, #4
 801a560:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a566:	490d      	ldr	r1, [pc, #52]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a568:	4613      	mov	r3, r2
 801a56a:	005b      	lsls	r3, r3, #1
 801a56c:	4413      	add	r3, r2
 801a56e:	00db      	lsls	r3, r3, #3
 801a570:	440b      	add	r3, r1
 801a572:	3312      	adds	r3, #18
 801a574:	2200      	movs	r2, #0
 801a576:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a57c:	4907      	ldr	r1, [pc, #28]	@ (801a59c <etharp_find_entry+0x2d4>)
 801a57e:	4613      	mov	r3, r2
 801a580:	005b      	lsls	r3, r3, #1
 801a582:	4413      	add	r3, r2
 801a584:	00db      	lsls	r3, r3, #3
 801a586:	440b      	add	r3, r1
 801a588:	3308      	adds	r3, #8
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a58e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a592:	4618      	mov	r0, r3
 801a594:	3728      	adds	r7, #40	@ 0x28
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}
 801a59a:	bf00      	nop
 801a59c:	2400ccc8 	.word	0x2400ccc8
 801a5a0:	08021d0c 	.word	0x08021d0c
 801a5a4:	08021d44 	.word	0x08021d44
 801a5a8:	08021d84 	.word	0x08021d84
 801a5ac:	08021dac 	.word	0x08021dac
 801a5b0:	08021dc4 	.word	0x08021dc4
 801a5b4:	08021dd8 	.word	0x08021dd8

0801a5b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b088      	sub	sp, #32
 801a5bc:	af02      	add	r7, sp, #8
 801a5be:	60f8      	str	r0, [r7, #12]
 801a5c0:	60b9      	str	r1, [r7, #8]
 801a5c2:	607a      	str	r2, [r7, #4]
 801a5c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a5cc:	2b06      	cmp	r3, #6
 801a5ce:	d006      	beq.n	801a5de <etharp_update_arp_entry+0x26>
 801a5d0:	4b48      	ldr	r3, [pc, #288]	@ (801a6f4 <etharp_update_arp_entry+0x13c>)
 801a5d2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a5d6:	4948      	ldr	r1, [pc, #288]	@ (801a6f8 <etharp_update_arp_entry+0x140>)
 801a5d8:	4848      	ldr	r0, [pc, #288]	@ (801a6fc <etharp_update_arp_entry+0x144>)
 801a5da:	f002 fed3 	bl	801d384 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d012      	beq.n	801a60a <etharp_update_arp_entry+0x52>
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d00e      	beq.n	801a60a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a5ec:	68bb      	ldr	r3, [r7, #8]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	68f9      	ldr	r1, [r7, #12]
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f001 f946 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801a5f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d105      	bne.n	801a60a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a606:	2be0      	cmp	r3, #224	@ 0xe0
 801a608:	d102      	bne.n	801a610 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a60a:	f06f 030f 	mvn.w	r3, #15
 801a60e:	e06c      	b.n	801a6ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a610:	78fb      	ldrb	r3, [r7, #3]
 801a612:	68fa      	ldr	r2, [r7, #12]
 801a614:	4619      	mov	r1, r3
 801a616:	68b8      	ldr	r0, [r7, #8]
 801a618:	f7ff fe56 	bl	801a2c8 <etharp_find_entry>
 801a61c:	4603      	mov	r3, r0
 801a61e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a620:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a624:	2b00      	cmp	r3, #0
 801a626:	da02      	bge.n	801a62e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a628:	8afb      	ldrh	r3, [r7, #22]
 801a62a:	b25b      	sxtb	r3, r3
 801a62c:	e05d      	b.n	801a6ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a62e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a632:	4933      	ldr	r1, [pc, #204]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a634:	4613      	mov	r3, r2
 801a636:	005b      	lsls	r3, r3, #1
 801a638:	4413      	add	r3, r2
 801a63a:	00db      	lsls	r3, r3, #3
 801a63c:	440b      	add	r3, r1
 801a63e:	3314      	adds	r3, #20
 801a640:	2202      	movs	r2, #2
 801a642:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a644:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a648:	492d      	ldr	r1, [pc, #180]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a64a:	4613      	mov	r3, r2
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	4413      	add	r3, r2
 801a650:	00db      	lsls	r3, r3, #3
 801a652:	440b      	add	r3, r1
 801a654:	3308      	adds	r3, #8
 801a656:	68fa      	ldr	r2, [r7, #12]
 801a658:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a65a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a65e:	4613      	mov	r3, r2
 801a660:	005b      	lsls	r3, r3, #1
 801a662:	4413      	add	r3, r2
 801a664:	00db      	lsls	r3, r3, #3
 801a666:	3308      	adds	r3, #8
 801a668:	4a25      	ldr	r2, [pc, #148]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a66a:	4413      	add	r3, r2
 801a66c:	3304      	adds	r3, #4
 801a66e:	2206      	movs	r2, #6
 801a670:	6879      	ldr	r1, [r7, #4]
 801a672:	4618      	mov	r0, r3
 801a674:	f003 f8ad 	bl	801d7d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a67c:	4920      	ldr	r1, [pc, #128]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a67e:	4613      	mov	r3, r2
 801a680:	005b      	lsls	r3, r3, #1
 801a682:	4413      	add	r3, r2
 801a684:	00db      	lsls	r3, r3, #3
 801a686:	440b      	add	r3, r1
 801a688:	3312      	adds	r3, #18
 801a68a:	2200      	movs	r2, #0
 801a68c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a68e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a692:	491b      	ldr	r1, [pc, #108]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a694:	4613      	mov	r3, r2
 801a696:	005b      	lsls	r3, r3, #1
 801a698:	4413      	add	r3, r2
 801a69a:	00db      	lsls	r3, r3, #3
 801a69c:	440b      	add	r3, r1
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d021      	beq.n	801a6e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a6a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6a8:	4915      	ldr	r1, [pc, #84]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a6aa:	4613      	mov	r3, r2
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	4413      	add	r3, r2
 801a6b0:	00db      	lsls	r3, r3, #3
 801a6b2:	440b      	add	r3, r1
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a6b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6bc:	4910      	ldr	r1, [pc, #64]	@ (801a700 <etharp_update_arp_entry+0x148>)
 801a6be:	4613      	mov	r3, r2
 801a6c0:	005b      	lsls	r3, r3, #1
 801a6c2:	4413      	add	r3, r2
 801a6c4:	00db      	lsls	r3, r3, #3
 801a6c6:	440b      	add	r3, r1
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801a6d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a6d6:	9300      	str	r3, [sp, #0]
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	6939      	ldr	r1, [r7, #16]
 801a6dc:	68f8      	ldr	r0, [r7, #12]
 801a6de:	f001 ffdf 	bl	801c6a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a6e2:	6938      	ldr	r0, [r7, #16]
 801a6e4:	f7f7 fc50 	bl	8011f88 <pbuf_free>
  }
  return ERR_OK;
 801a6e8:	2300      	movs	r3, #0
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3718      	adds	r7, #24
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	08021d0c 	.word	0x08021d0c
 801a6f8:	08021e04 	.word	0x08021e04
 801a6fc:	08021d84 	.word	0x08021d84
 801a700:	2400ccc8 	.word	0x2400ccc8

0801a704 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a704:	b580      	push	{r7, lr}
 801a706:	b084      	sub	sp, #16
 801a708:	af00      	add	r7, sp, #0
 801a70a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a70c:	2300      	movs	r3, #0
 801a70e:	60fb      	str	r3, [r7, #12]
 801a710:	e01e      	b.n	801a750 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a712:	4913      	ldr	r1, [pc, #76]	@ (801a760 <etharp_cleanup_netif+0x5c>)
 801a714:	68fa      	ldr	r2, [r7, #12]
 801a716:	4613      	mov	r3, r2
 801a718:	005b      	lsls	r3, r3, #1
 801a71a:	4413      	add	r3, r2
 801a71c:	00db      	lsls	r3, r3, #3
 801a71e:	440b      	add	r3, r1
 801a720:	3314      	adds	r3, #20
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a726:	7afb      	ldrb	r3, [r7, #11]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d00e      	beq.n	801a74a <etharp_cleanup_netif+0x46>
 801a72c:	490c      	ldr	r1, [pc, #48]	@ (801a760 <etharp_cleanup_netif+0x5c>)
 801a72e:	68fa      	ldr	r2, [r7, #12]
 801a730:	4613      	mov	r3, r2
 801a732:	005b      	lsls	r3, r3, #1
 801a734:	4413      	add	r3, r2
 801a736:	00db      	lsls	r3, r3, #3
 801a738:	440b      	add	r3, r1
 801a73a:	3308      	adds	r3, #8
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	429a      	cmp	r2, r3
 801a742:	d102      	bne.n	801a74a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a744:	68f8      	ldr	r0, [r7, #12]
 801a746:	f7ff fce5 	bl	801a114 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	3301      	adds	r3, #1
 801a74e:	60fb      	str	r3, [r7, #12]
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	2b09      	cmp	r3, #9
 801a754:	dddd      	ble.n	801a712 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a756:	bf00      	nop
 801a758:	bf00      	nop
 801a75a:	3710      	adds	r7, #16
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}
 801a760:	2400ccc8 	.word	0x2400ccc8

0801a764 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a764:	b5b0      	push	{r4, r5, r7, lr}
 801a766:	b08a      	sub	sp, #40	@ 0x28
 801a768:	af04      	add	r7, sp, #16
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d107      	bne.n	801a784 <etharp_input+0x20>
 801a774:	4b3f      	ldr	r3, [pc, #252]	@ (801a874 <etharp_input+0x110>)
 801a776:	f240 228a 	movw	r2, #650	@ 0x28a
 801a77a:	493f      	ldr	r1, [pc, #252]	@ (801a878 <etharp_input+0x114>)
 801a77c:	483f      	ldr	r0, [pc, #252]	@ (801a87c <etharp_input+0x118>)
 801a77e:	f002 fe01 	bl	801d384 <iprintf>
 801a782:	e074      	b.n	801a86e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	685b      	ldr	r3, [r3, #4]
 801a788:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a78a:	693b      	ldr	r3, [r7, #16]
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	b29b      	uxth	r3, r3
 801a790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a794:	d10c      	bne.n	801a7b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a79a:	2b06      	cmp	r3, #6
 801a79c:	d108      	bne.n	801a7b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a79e:	693b      	ldr	r3, [r7, #16]
 801a7a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7a2:	2b04      	cmp	r3, #4
 801a7a4:	d104      	bne.n	801a7b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a7a6:	693b      	ldr	r3, [r7, #16]
 801a7a8:	885b      	ldrh	r3, [r3, #2]
 801a7aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7ac:	2b08      	cmp	r3, #8
 801a7ae:	d003      	beq.n	801a7b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a7b0:	6878      	ldr	r0, [r7, #4]
 801a7b2:	f7f7 fbe9 	bl	8011f88 <pbuf_free>
    return;
 801a7b6:	e05a      	b.n	801a86e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a7b8:	693b      	ldr	r3, [r7, #16]
 801a7ba:	330e      	adds	r3, #14
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a7c0:	693b      	ldr	r3, [r7, #16]
 801a7c2:	3318      	adds	r3, #24
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a7c8:	683b      	ldr	r3, [r7, #0]
 801a7ca:	3304      	adds	r3, #4
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d102      	bne.n	801a7d8 <etharp_input+0x74>
    for_us = 0;
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	75fb      	strb	r3, [r7, #23]
 801a7d6:	e009      	b.n	801a7ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a7d8:	68ba      	ldr	r2, [r7, #8]
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	3304      	adds	r3, #4
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	bf0c      	ite	eq
 801a7e4:	2301      	moveq	r3, #1
 801a7e6:	2300      	movne	r3, #0
 801a7e8:	b2db      	uxtb	r3, r3
 801a7ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a7ec:	693b      	ldr	r3, [r7, #16]
 801a7ee:	f103 0208 	add.w	r2, r3, #8
 801a7f2:	7dfb      	ldrb	r3, [r7, #23]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d001      	beq.n	801a7fc <etharp_input+0x98>
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	e000      	b.n	801a7fe <etharp_input+0x9a>
 801a7fc:	2302      	movs	r3, #2
 801a7fe:	f107 010c 	add.w	r1, r7, #12
 801a802:	6838      	ldr	r0, [r7, #0]
 801a804:	f7ff fed8 	bl	801a5b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a808:	693b      	ldr	r3, [r7, #16]
 801a80a:	88db      	ldrh	r3, [r3, #6]
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a812:	d003      	beq.n	801a81c <etharp_input+0xb8>
 801a814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a818:	d01e      	beq.n	801a858 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a81a:	e025      	b.n	801a868 <etharp_input+0x104>
      if (for_us) {
 801a81c:	7dfb      	ldrb	r3, [r7, #23]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d021      	beq.n	801a866 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a822:	683b      	ldr	r3, [r7, #0]
 801a824:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801a828:	693b      	ldr	r3, [r7, #16]
 801a82a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a838:	693a      	ldr	r2, [r7, #16]
 801a83a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a83c:	2102      	movs	r1, #2
 801a83e:	9103      	str	r1, [sp, #12]
 801a840:	f107 010c 	add.w	r1, r7, #12
 801a844:	9102      	str	r1, [sp, #8]
 801a846:	9201      	str	r2, [sp, #4]
 801a848:	9300      	str	r3, [sp, #0]
 801a84a:	462b      	mov	r3, r5
 801a84c:	4622      	mov	r2, r4
 801a84e:	4601      	mov	r1, r0
 801a850:	6838      	ldr	r0, [r7, #0]
 801a852:	f000 faef 	bl	801ae34 <etharp_raw>
      break;
 801a856:	e006      	b.n	801a866 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a858:	f107 030c 	add.w	r3, r7, #12
 801a85c:	4619      	mov	r1, r3
 801a85e:	6838      	ldr	r0, [r7, #0]
 801a860:	f7fe fa02 	bl	8018c68 <dhcp_arp_reply>
      break;
 801a864:	e000      	b.n	801a868 <etharp_input+0x104>
      break;
 801a866:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a868:	6878      	ldr	r0, [r7, #4]
 801a86a:	f7f7 fb8d 	bl	8011f88 <pbuf_free>
}
 801a86e:	3718      	adds	r7, #24
 801a870:	46bd      	mov	sp, r7
 801a872:	bdb0      	pop	{r4, r5, r7, pc}
 801a874:	08021d0c 	.word	0x08021d0c
 801a878:	08021e5c 	.word	0x08021e5c
 801a87c:	08021d84 	.word	0x08021d84

0801a880 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b086      	sub	sp, #24
 801a884:	af02      	add	r7, sp, #8
 801a886:	60f8      	str	r0, [r7, #12]
 801a888:	60b9      	str	r1, [r7, #8]
 801a88a:	4613      	mov	r3, r2
 801a88c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a88e:	79fa      	ldrb	r2, [r7, #7]
 801a890:	4944      	ldr	r1, [pc, #272]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a892:	4613      	mov	r3, r2
 801a894:	005b      	lsls	r3, r3, #1
 801a896:	4413      	add	r3, r2
 801a898:	00db      	lsls	r3, r3, #3
 801a89a:	440b      	add	r3, r1
 801a89c:	3314      	adds	r3, #20
 801a89e:	781b      	ldrb	r3, [r3, #0]
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	d806      	bhi.n	801a8b2 <etharp_output_to_arp_index+0x32>
 801a8a4:	4b40      	ldr	r3, [pc, #256]	@ (801a9a8 <etharp_output_to_arp_index+0x128>)
 801a8a6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a8aa:	4940      	ldr	r1, [pc, #256]	@ (801a9ac <etharp_output_to_arp_index+0x12c>)
 801a8ac:	4840      	ldr	r0, [pc, #256]	@ (801a9b0 <etharp_output_to_arp_index+0x130>)
 801a8ae:	f002 fd69 	bl	801d384 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a8b2:	79fa      	ldrb	r2, [r7, #7]
 801a8b4:	493b      	ldr	r1, [pc, #236]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a8b6:	4613      	mov	r3, r2
 801a8b8:	005b      	lsls	r3, r3, #1
 801a8ba:	4413      	add	r3, r2
 801a8bc:	00db      	lsls	r3, r3, #3
 801a8be:	440b      	add	r3, r1
 801a8c0:	3314      	adds	r3, #20
 801a8c2:	781b      	ldrb	r3, [r3, #0]
 801a8c4:	2b02      	cmp	r3, #2
 801a8c6:	d153      	bne.n	801a970 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a8c8:	79fa      	ldrb	r2, [r7, #7]
 801a8ca:	4936      	ldr	r1, [pc, #216]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	005b      	lsls	r3, r3, #1
 801a8d0:	4413      	add	r3, r2
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	440b      	add	r3, r1
 801a8d6:	3312      	adds	r3, #18
 801a8d8:	881b      	ldrh	r3, [r3, #0]
 801a8da:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a8de:	d919      	bls.n	801a914 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a8e0:	79fa      	ldrb	r2, [r7, #7]
 801a8e2:	4613      	mov	r3, r2
 801a8e4:	005b      	lsls	r3, r3, #1
 801a8e6:	4413      	add	r3, r2
 801a8e8:	00db      	lsls	r3, r3, #3
 801a8ea:	4a2e      	ldr	r2, [pc, #184]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a8ec:	4413      	add	r3, r2
 801a8ee:	3304      	adds	r3, #4
 801a8f0:	4619      	mov	r1, r3
 801a8f2:	68f8      	ldr	r0, [r7, #12]
 801a8f4:	f000 fb4c 	bl	801af90 <etharp_request>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d138      	bne.n	801a970 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a8fe:	79fa      	ldrb	r2, [r7, #7]
 801a900:	4928      	ldr	r1, [pc, #160]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a902:	4613      	mov	r3, r2
 801a904:	005b      	lsls	r3, r3, #1
 801a906:	4413      	add	r3, r2
 801a908:	00db      	lsls	r3, r3, #3
 801a90a:	440b      	add	r3, r1
 801a90c:	3314      	adds	r3, #20
 801a90e:	2203      	movs	r2, #3
 801a910:	701a      	strb	r2, [r3, #0]
 801a912:	e02d      	b.n	801a970 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a914:	79fa      	ldrb	r2, [r7, #7]
 801a916:	4923      	ldr	r1, [pc, #140]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a918:	4613      	mov	r3, r2
 801a91a:	005b      	lsls	r3, r3, #1
 801a91c:	4413      	add	r3, r2
 801a91e:	00db      	lsls	r3, r3, #3
 801a920:	440b      	add	r3, r1
 801a922:	3312      	adds	r3, #18
 801a924:	881b      	ldrh	r3, [r3, #0]
 801a926:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a92a:	d321      	bcc.n	801a970 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a92c:	79fa      	ldrb	r2, [r7, #7]
 801a92e:	4613      	mov	r3, r2
 801a930:	005b      	lsls	r3, r3, #1
 801a932:	4413      	add	r3, r2
 801a934:	00db      	lsls	r3, r3, #3
 801a936:	4a1b      	ldr	r2, [pc, #108]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a938:	4413      	add	r3, r2
 801a93a:	1d19      	adds	r1, r3, #4
 801a93c:	79fa      	ldrb	r2, [r7, #7]
 801a93e:	4613      	mov	r3, r2
 801a940:	005b      	lsls	r3, r3, #1
 801a942:	4413      	add	r3, r2
 801a944:	00db      	lsls	r3, r3, #3
 801a946:	3308      	adds	r3, #8
 801a948:	4a16      	ldr	r2, [pc, #88]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a94a:	4413      	add	r3, r2
 801a94c:	3304      	adds	r3, #4
 801a94e:	461a      	mov	r2, r3
 801a950:	68f8      	ldr	r0, [r7, #12]
 801a952:	f000 fafb 	bl	801af4c <etharp_request_dst>
 801a956:	4603      	mov	r3, r0
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d109      	bne.n	801a970 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a95c:	79fa      	ldrb	r2, [r7, #7]
 801a95e:	4911      	ldr	r1, [pc, #68]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a960:	4613      	mov	r3, r2
 801a962:	005b      	lsls	r3, r3, #1
 801a964:	4413      	add	r3, r2
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	440b      	add	r3, r1
 801a96a:	3314      	adds	r3, #20
 801a96c:	2203      	movs	r2, #3
 801a96e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801a976:	79fa      	ldrb	r2, [r7, #7]
 801a978:	4613      	mov	r3, r2
 801a97a:	005b      	lsls	r3, r3, #1
 801a97c:	4413      	add	r3, r2
 801a97e:	00db      	lsls	r3, r3, #3
 801a980:	3308      	adds	r3, #8
 801a982:	4a08      	ldr	r2, [pc, #32]	@ (801a9a4 <etharp_output_to_arp_index+0x124>)
 801a984:	4413      	add	r3, r2
 801a986:	3304      	adds	r3, #4
 801a988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a98c:	9200      	str	r2, [sp, #0]
 801a98e:	460a      	mov	r2, r1
 801a990:	68b9      	ldr	r1, [r7, #8]
 801a992:	68f8      	ldr	r0, [r7, #12]
 801a994:	f001 fe84 	bl	801c6a0 <ethernet_output>
 801a998:	4603      	mov	r3, r0
}
 801a99a:	4618      	mov	r0, r3
 801a99c:	3710      	adds	r7, #16
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop
 801a9a4:	2400ccc8 	.word	0x2400ccc8
 801a9a8:	08021d0c 	.word	0x08021d0c
 801a9ac:	08021e7c 	.word	0x08021e7c
 801a9b0:	08021d84 	.word	0x08021d84

0801a9b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b08a      	sub	sp, #40	@ 0x28
 801a9b8:	af02      	add	r7, sp, #8
 801a9ba:	60f8      	str	r0, [r7, #12]
 801a9bc:	60b9      	str	r1, [r7, #8]
 801a9be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d106      	bne.n	801a9d8 <etharp_output+0x24>
 801a9ca:	4b73      	ldr	r3, [pc, #460]	@ (801ab98 <etharp_output+0x1e4>)
 801a9cc:	f240 321e 	movw	r2, #798	@ 0x31e
 801a9d0:	4972      	ldr	r1, [pc, #456]	@ (801ab9c <etharp_output+0x1e8>)
 801a9d2:	4873      	ldr	r0, [pc, #460]	@ (801aba0 <etharp_output+0x1ec>)
 801a9d4:	f002 fcd6 	bl	801d384 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d106      	bne.n	801a9ec <etharp_output+0x38>
 801a9de:	4b6e      	ldr	r3, [pc, #440]	@ (801ab98 <etharp_output+0x1e4>)
 801a9e0:	f240 321f 	movw	r2, #799	@ 0x31f
 801a9e4:	496f      	ldr	r1, [pc, #444]	@ (801aba4 <etharp_output+0x1f0>)
 801a9e6:	486e      	ldr	r0, [pc, #440]	@ (801aba0 <etharp_output+0x1ec>)
 801a9e8:	f002 fccc 	bl	801d384 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d106      	bne.n	801aa00 <etharp_output+0x4c>
 801a9f2:	4b69      	ldr	r3, [pc, #420]	@ (801ab98 <etharp_output+0x1e4>)
 801a9f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a9f8:	496b      	ldr	r1, [pc, #428]	@ (801aba8 <etharp_output+0x1f4>)
 801a9fa:	4869      	ldr	r0, [pc, #420]	@ (801aba0 <etharp_output+0x1ec>)
 801a9fc:	f002 fcc2 	bl	801d384 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	68f9      	ldr	r1, [r7, #12]
 801aa06:	4618      	mov	r0, r3
 801aa08:	f000 ff3c 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d002      	beq.n	801aa18 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aa12:	4b66      	ldr	r3, [pc, #408]	@ (801abac <etharp_output+0x1f8>)
 801aa14:	61fb      	str	r3, [r7, #28]
 801aa16:	e0af      	b.n	801ab78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aa20:	2be0      	cmp	r3, #224	@ 0xe0
 801aa22:	d118      	bne.n	801aa56 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aa24:	2301      	movs	r3, #1
 801aa26:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aa2c:	235e      	movs	r3, #94	@ 0x5e
 801aa2e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	3301      	adds	r3, #1
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	3302      	adds	r3, #2
 801aa42:	781b      	ldrb	r3, [r3, #0]
 801aa44:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	3303      	adds	r3, #3
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa4e:	f107 0310 	add.w	r3, r7, #16
 801aa52:	61fb      	str	r3, [r7, #28]
 801aa54:	e090      	b.n	801ab78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	3304      	adds	r3, #4
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	405a      	eors	r2, r3
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	3308      	adds	r3, #8
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	4013      	ands	r3, r2
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d012      	beq.n	801aa94 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa74:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801aa78:	4293      	cmp	r3, r2
 801aa7a:	d00b      	beq.n	801aa94 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	330c      	adds	r3, #12
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d003      	beq.n	801aa8e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	330c      	adds	r3, #12
 801aa8a:	61bb      	str	r3, [r7, #24]
 801aa8c:	e002      	b.n	801aa94 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aa8e:	f06f 0303 	mvn.w	r3, #3
 801aa92:	e07d      	b.n	801ab90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa94:	4b46      	ldr	r3, [pc, #280]	@ (801abb0 <etharp_output+0x1fc>)
 801aa96:	781b      	ldrb	r3, [r3, #0]
 801aa98:	4619      	mov	r1, r3
 801aa9a:	4a46      	ldr	r2, [pc, #280]	@ (801abb4 <etharp_output+0x200>)
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	005b      	lsls	r3, r3, #1
 801aaa0:	440b      	add	r3, r1
 801aaa2:	00db      	lsls	r3, r3, #3
 801aaa4:	4413      	add	r3, r2
 801aaa6:	3314      	adds	r3, #20
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	2b01      	cmp	r3, #1
 801aaac:	d925      	bls.n	801aafa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aaae:	4b40      	ldr	r3, [pc, #256]	@ (801abb0 <etharp_output+0x1fc>)
 801aab0:	781b      	ldrb	r3, [r3, #0]
 801aab2:	4619      	mov	r1, r3
 801aab4:	4a3f      	ldr	r2, [pc, #252]	@ (801abb4 <etharp_output+0x200>)
 801aab6:	460b      	mov	r3, r1
 801aab8:	005b      	lsls	r3, r3, #1
 801aaba:	440b      	add	r3, r1
 801aabc:	00db      	lsls	r3, r3, #3
 801aabe:	4413      	add	r3, r2
 801aac0:	3308      	adds	r3, #8
 801aac2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aac4:	68fa      	ldr	r2, [r7, #12]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	d117      	bne.n	801aafa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	4b38      	ldr	r3, [pc, #224]	@ (801abb0 <etharp_output+0x1fc>)
 801aad0:	781b      	ldrb	r3, [r3, #0]
 801aad2:	4618      	mov	r0, r3
 801aad4:	4937      	ldr	r1, [pc, #220]	@ (801abb4 <etharp_output+0x200>)
 801aad6:	4603      	mov	r3, r0
 801aad8:	005b      	lsls	r3, r3, #1
 801aada:	4403      	add	r3, r0
 801aadc:	00db      	lsls	r3, r3, #3
 801aade:	440b      	add	r3, r1
 801aae0:	3304      	adds	r3, #4
 801aae2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d108      	bne.n	801aafa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aae8:	4b31      	ldr	r3, [pc, #196]	@ (801abb0 <etharp_output+0x1fc>)
 801aaea:	781b      	ldrb	r3, [r3, #0]
 801aaec:	461a      	mov	r2, r3
 801aaee:	68b9      	ldr	r1, [r7, #8]
 801aaf0:	68f8      	ldr	r0, [r7, #12]
 801aaf2:	f7ff fec5 	bl	801a880 <etharp_output_to_arp_index>
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	e04a      	b.n	801ab90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aafa:	2300      	movs	r3, #0
 801aafc:	75fb      	strb	r3, [r7, #23]
 801aafe:	e031      	b.n	801ab64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab00:	7dfa      	ldrb	r2, [r7, #23]
 801ab02:	492c      	ldr	r1, [pc, #176]	@ (801abb4 <etharp_output+0x200>)
 801ab04:	4613      	mov	r3, r2
 801ab06:	005b      	lsls	r3, r3, #1
 801ab08:	4413      	add	r3, r2
 801ab0a:	00db      	lsls	r3, r3, #3
 801ab0c:	440b      	add	r3, r1
 801ab0e:	3314      	adds	r3, #20
 801ab10:	781b      	ldrb	r3, [r3, #0]
 801ab12:	2b01      	cmp	r3, #1
 801ab14:	d923      	bls.n	801ab5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ab16:	7dfa      	ldrb	r2, [r7, #23]
 801ab18:	4926      	ldr	r1, [pc, #152]	@ (801abb4 <etharp_output+0x200>)
 801ab1a:	4613      	mov	r3, r2
 801ab1c:	005b      	lsls	r3, r3, #1
 801ab1e:	4413      	add	r3, r2
 801ab20:	00db      	lsls	r3, r3, #3
 801ab22:	440b      	add	r3, r1
 801ab24:	3308      	adds	r3, #8
 801ab26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab28:	68fa      	ldr	r2, [r7, #12]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d117      	bne.n	801ab5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ab2e:	69bb      	ldr	r3, [r7, #24]
 801ab30:	6819      	ldr	r1, [r3, #0]
 801ab32:	7dfa      	ldrb	r2, [r7, #23]
 801ab34:	481f      	ldr	r0, [pc, #124]	@ (801abb4 <etharp_output+0x200>)
 801ab36:	4613      	mov	r3, r2
 801ab38:	005b      	lsls	r3, r3, #1
 801ab3a:	4413      	add	r3, r2
 801ab3c:	00db      	lsls	r3, r3, #3
 801ab3e:	4403      	add	r3, r0
 801ab40:	3304      	adds	r3, #4
 801ab42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab44:	4299      	cmp	r1, r3
 801ab46:	d10a      	bne.n	801ab5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab48:	4a19      	ldr	r2, [pc, #100]	@ (801abb0 <etharp_output+0x1fc>)
 801ab4a:	7dfb      	ldrb	r3, [r7, #23]
 801ab4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab4e:	7dfb      	ldrb	r3, [r7, #23]
 801ab50:	461a      	mov	r2, r3
 801ab52:	68b9      	ldr	r1, [r7, #8]
 801ab54:	68f8      	ldr	r0, [r7, #12]
 801ab56:	f7ff fe93 	bl	801a880 <etharp_output_to_arp_index>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	e018      	b.n	801ab90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab5e:	7dfb      	ldrb	r3, [r7, #23]
 801ab60:	3301      	adds	r3, #1
 801ab62:	75fb      	strb	r3, [r7, #23]
 801ab64:	7dfb      	ldrb	r3, [r7, #23]
 801ab66:	2b09      	cmp	r3, #9
 801ab68:	d9ca      	bls.n	801ab00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ab6a:	68ba      	ldr	r2, [r7, #8]
 801ab6c:	69b9      	ldr	r1, [r7, #24]
 801ab6e:	68f8      	ldr	r0, [r7, #12]
 801ab70:	f000 f822 	bl	801abb8 <etharp_query>
 801ab74:	4603      	mov	r3, r0
 801ab76:	e00b      	b.n	801ab90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801ab7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab82:	9300      	str	r3, [sp, #0]
 801ab84:	69fb      	ldr	r3, [r7, #28]
 801ab86:	68b9      	ldr	r1, [r7, #8]
 801ab88:	68f8      	ldr	r0, [r7, #12]
 801ab8a:	f001 fd89 	bl	801c6a0 <ethernet_output>
 801ab8e:	4603      	mov	r3, r0
}
 801ab90:	4618      	mov	r0, r3
 801ab92:	3720      	adds	r7, #32
 801ab94:	46bd      	mov	sp, r7
 801ab96:	bd80      	pop	{r7, pc}
 801ab98:	08021d0c 	.word	0x08021d0c
 801ab9c:	08021e5c 	.word	0x08021e5c
 801aba0:	08021d84 	.word	0x08021d84
 801aba4:	08021eac 	.word	0x08021eac
 801aba8:	08021e4c 	.word	0x08021e4c
 801abac:	080225c8 	.word	0x080225c8
 801abb0:	2400cdb8 	.word	0x2400cdb8
 801abb4:	2400ccc8 	.word	0x2400ccc8

0801abb8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b08c      	sub	sp, #48	@ 0x30
 801abbc:	af02      	add	r7, sp, #8
 801abbe:	60f8      	str	r0, [r7, #12]
 801abc0:	60b9      	str	r1, [r7, #8]
 801abc2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	332a      	adds	r3, #42	@ 0x2a
 801abc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801abca:	23ff      	movs	r3, #255	@ 0xff
 801abcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801abd0:	2300      	movs	r3, #0
 801abd2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	68f9      	ldr	r1, [r7, #12]
 801abda:	4618      	mov	r0, r3
 801abdc:	f000 fe52 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801abe0:	4603      	mov	r3, r0
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d10c      	bne.n	801ac00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abee:	2be0      	cmp	r3, #224	@ 0xe0
 801abf0:	d006      	beq.n	801ac00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d003      	beq.n	801ac00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d102      	bne.n	801ac06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ac00:	f06f 030f 	mvn.w	r3, #15
 801ac04:	e101      	b.n	801ae0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ac06:	68fa      	ldr	r2, [r7, #12]
 801ac08:	2101      	movs	r1, #1
 801ac0a:	68b8      	ldr	r0, [r7, #8]
 801ac0c:	f7ff fb5c 	bl	801a2c8 <etharp_find_entry>
 801ac10:	4603      	mov	r3, r0
 801ac12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ac14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	da02      	bge.n	801ac22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ac1c:	8a7b      	ldrh	r3, [r7, #18]
 801ac1e:	b25b      	sxtb	r3, r3
 801ac20:	e0f3      	b.n	801ae0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ac22:	8a7b      	ldrh	r3, [r7, #18]
 801ac24:	2b7e      	cmp	r3, #126	@ 0x7e
 801ac26:	d906      	bls.n	801ac36 <etharp_query+0x7e>
 801ac28:	4b7a      	ldr	r3, [pc, #488]	@ (801ae14 <etharp_query+0x25c>)
 801ac2a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ac2e:	497a      	ldr	r1, [pc, #488]	@ (801ae18 <etharp_query+0x260>)
 801ac30:	487a      	ldr	r0, [pc, #488]	@ (801ae1c <etharp_query+0x264>)
 801ac32:	f002 fba7 	bl	801d384 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac36:	8a7b      	ldrh	r3, [r7, #18]
 801ac38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac3a:	7c7a      	ldrb	r2, [r7, #17]
 801ac3c:	4978      	ldr	r1, [pc, #480]	@ (801ae20 <etharp_query+0x268>)
 801ac3e:	4613      	mov	r3, r2
 801ac40:	005b      	lsls	r3, r3, #1
 801ac42:	4413      	add	r3, r2
 801ac44:	00db      	lsls	r3, r3, #3
 801ac46:	440b      	add	r3, r1
 801ac48:	3314      	adds	r3, #20
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d115      	bne.n	801ac7c <etharp_query+0xc4>
    is_new_entry = 1;
 801ac50:	2301      	movs	r3, #1
 801ac52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac54:	7c7a      	ldrb	r2, [r7, #17]
 801ac56:	4972      	ldr	r1, [pc, #456]	@ (801ae20 <etharp_query+0x268>)
 801ac58:	4613      	mov	r3, r2
 801ac5a:	005b      	lsls	r3, r3, #1
 801ac5c:	4413      	add	r3, r2
 801ac5e:	00db      	lsls	r3, r3, #3
 801ac60:	440b      	add	r3, r1
 801ac62:	3314      	adds	r3, #20
 801ac64:	2201      	movs	r2, #1
 801ac66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ac68:	7c7a      	ldrb	r2, [r7, #17]
 801ac6a:	496d      	ldr	r1, [pc, #436]	@ (801ae20 <etharp_query+0x268>)
 801ac6c:	4613      	mov	r3, r2
 801ac6e:	005b      	lsls	r3, r3, #1
 801ac70:	4413      	add	r3, r2
 801ac72:	00db      	lsls	r3, r3, #3
 801ac74:	440b      	add	r3, r1
 801ac76:	3308      	adds	r3, #8
 801ac78:	68fa      	ldr	r2, [r7, #12]
 801ac7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ac7c:	7c7a      	ldrb	r2, [r7, #17]
 801ac7e:	4968      	ldr	r1, [pc, #416]	@ (801ae20 <etharp_query+0x268>)
 801ac80:	4613      	mov	r3, r2
 801ac82:	005b      	lsls	r3, r3, #1
 801ac84:	4413      	add	r3, r2
 801ac86:	00db      	lsls	r3, r3, #3
 801ac88:	440b      	add	r3, r1
 801ac8a:	3314      	adds	r3, #20
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	2b01      	cmp	r3, #1
 801ac90:	d011      	beq.n	801acb6 <etharp_query+0xfe>
 801ac92:	7c7a      	ldrb	r2, [r7, #17]
 801ac94:	4962      	ldr	r1, [pc, #392]	@ (801ae20 <etharp_query+0x268>)
 801ac96:	4613      	mov	r3, r2
 801ac98:	005b      	lsls	r3, r3, #1
 801ac9a:	4413      	add	r3, r2
 801ac9c:	00db      	lsls	r3, r3, #3
 801ac9e:	440b      	add	r3, r1
 801aca0:	3314      	adds	r3, #20
 801aca2:	781b      	ldrb	r3, [r3, #0]
 801aca4:	2b01      	cmp	r3, #1
 801aca6:	d806      	bhi.n	801acb6 <etharp_query+0xfe>
 801aca8:	4b5a      	ldr	r3, [pc, #360]	@ (801ae14 <etharp_query+0x25c>)
 801acaa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801acae:	495d      	ldr	r1, [pc, #372]	@ (801ae24 <etharp_query+0x26c>)
 801acb0:	485a      	ldr	r0, [pc, #360]	@ (801ae1c <etharp_query+0x264>)
 801acb2:	f002 fb67 	bl	801d384 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801acb6:	6a3b      	ldr	r3, [r7, #32]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d102      	bne.n	801acc2 <etharp_query+0x10a>
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d10c      	bne.n	801acdc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801acc2:	68b9      	ldr	r1, [r7, #8]
 801acc4:	68f8      	ldr	r0, [r7, #12]
 801acc6:	f000 f963 	bl	801af90 <etharp_request>
 801acca:	4603      	mov	r3, r0
 801accc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d102      	bne.n	801acdc <etharp_query+0x124>
      return result;
 801acd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801acda:	e096      	b.n	801ae0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d106      	bne.n	801acf0 <etharp_query+0x138>
 801ace2:	4b4c      	ldr	r3, [pc, #304]	@ (801ae14 <etharp_query+0x25c>)
 801ace4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ace8:	494f      	ldr	r1, [pc, #316]	@ (801ae28 <etharp_query+0x270>)
 801acea:	484c      	ldr	r0, [pc, #304]	@ (801ae1c <etharp_query+0x264>)
 801acec:	f002 fb4a 	bl	801d384 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801acf0:	7c7a      	ldrb	r2, [r7, #17]
 801acf2:	494b      	ldr	r1, [pc, #300]	@ (801ae20 <etharp_query+0x268>)
 801acf4:	4613      	mov	r3, r2
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	4413      	add	r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	440b      	add	r3, r1
 801acfe:	3314      	adds	r3, #20
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	2b01      	cmp	r3, #1
 801ad04:	d917      	bls.n	801ad36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ad06:	4a49      	ldr	r2, [pc, #292]	@ (801ae2c <etharp_query+0x274>)
 801ad08:	7c7b      	ldrb	r3, [r7, #17]
 801ad0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ad0c:	7c7a      	ldrb	r2, [r7, #17]
 801ad0e:	4613      	mov	r3, r2
 801ad10:	005b      	lsls	r3, r3, #1
 801ad12:	4413      	add	r3, r2
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	3308      	adds	r3, #8
 801ad18:	4a41      	ldr	r2, [pc, #260]	@ (801ae20 <etharp_query+0x268>)
 801ad1a:	4413      	add	r3, r2
 801ad1c:	3304      	adds	r3, #4
 801ad1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ad22:	9200      	str	r2, [sp, #0]
 801ad24:	697a      	ldr	r2, [r7, #20]
 801ad26:	6879      	ldr	r1, [r7, #4]
 801ad28:	68f8      	ldr	r0, [r7, #12]
 801ad2a:	f001 fcb9 	bl	801c6a0 <ethernet_output>
 801ad2e:	4603      	mov	r3, r0
 801ad30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad34:	e067      	b.n	801ae06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad36:	7c7a      	ldrb	r2, [r7, #17]
 801ad38:	4939      	ldr	r1, [pc, #228]	@ (801ae20 <etharp_query+0x268>)
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	005b      	lsls	r3, r3, #1
 801ad3e:	4413      	add	r3, r2
 801ad40:	00db      	lsls	r3, r3, #3
 801ad42:	440b      	add	r3, r1
 801ad44:	3314      	adds	r3, #20
 801ad46:	781b      	ldrb	r3, [r3, #0]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d15c      	bne.n	801ae06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad54:	e01c      	b.n	801ad90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad56:	69fb      	ldr	r3, [r7, #28]
 801ad58:	895a      	ldrh	r2, [r3, #10]
 801ad5a:	69fb      	ldr	r3, [r7, #28]
 801ad5c:	891b      	ldrh	r3, [r3, #8]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d10a      	bne.n	801ad78 <etharp_query+0x1c0>
 801ad62:	69fb      	ldr	r3, [r7, #28]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d006      	beq.n	801ad78 <etharp_query+0x1c0>
 801ad6a:	4b2a      	ldr	r3, [pc, #168]	@ (801ae14 <etharp_query+0x25c>)
 801ad6c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ad70:	492f      	ldr	r1, [pc, #188]	@ (801ae30 <etharp_query+0x278>)
 801ad72:	482a      	ldr	r0, [pc, #168]	@ (801ae1c <etharp_query+0x264>)
 801ad74:	f002 fb06 	bl	801d384 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ad78:	69fb      	ldr	r3, [r7, #28]
 801ad7a:	7b1b      	ldrb	r3, [r3, #12]
 801ad7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d002      	beq.n	801ad8a <etharp_query+0x1d2>
        copy_needed = 1;
 801ad84:	2301      	movs	r3, #1
 801ad86:	61bb      	str	r3, [r7, #24]
        break;
 801ad88:	e005      	b.n	801ad96 <etharp_query+0x1de>
      }
      p = p->next;
 801ad8a:	69fb      	ldr	r3, [r7, #28]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad90:	69fb      	ldr	r3, [r7, #28]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d1df      	bne.n	801ad56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ad96:	69bb      	ldr	r3, [r7, #24]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d007      	beq.n	801adac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ad9c:	687a      	ldr	r2, [r7, #4]
 801ad9e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ada2:	200e      	movs	r0, #14
 801ada4:	f7f7 fb68 	bl	8012478 <pbuf_clone>
 801ada8:	61f8      	str	r0, [r7, #28]
 801adaa:	e004      	b.n	801adb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801adb0:	69f8      	ldr	r0, [r7, #28]
 801adb2:	f7f7 f98f 	bl	80120d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801adb6:	69fb      	ldr	r3, [r7, #28]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d021      	beq.n	801ae00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801adbc:	7c7a      	ldrb	r2, [r7, #17]
 801adbe:	4918      	ldr	r1, [pc, #96]	@ (801ae20 <etharp_query+0x268>)
 801adc0:	4613      	mov	r3, r2
 801adc2:	005b      	lsls	r3, r3, #1
 801adc4:	4413      	add	r3, r2
 801adc6:	00db      	lsls	r3, r3, #3
 801adc8:	440b      	add	r3, r1
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d00a      	beq.n	801ade6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801add0:	7c7a      	ldrb	r2, [r7, #17]
 801add2:	4913      	ldr	r1, [pc, #76]	@ (801ae20 <etharp_query+0x268>)
 801add4:	4613      	mov	r3, r2
 801add6:	005b      	lsls	r3, r3, #1
 801add8:	4413      	add	r3, r2
 801adda:	00db      	lsls	r3, r3, #3
 801addc:	440b      	add	r3, r1
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	4618      	mov	r0, r3
 801ade2:	f7f7 f8d1 	bl	8011f88 <pbuf_free>
      }
      arp_table[i].q = p;
 801ade6:	7c7a      	ldrb	r2, [r7, #17]
 801ade8:	490d      	ldr	r1, [pc, #52]	@ (801ae20 <etharp_query+0x268>)
 801adea:	4613      	mov	r3, r2
 801adec:	005b      	lsls	r3, r3, #1
 801adee:	4413      	add	r3, r2
 801adf0:	00db      	lsls	r3, r3, #3
 801adf2:	440b      	add	r3, r1
 801adf4:	69fa      	ldr	r2, [r7, #28]
 801adf6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801adf8:	2300      	movs	r3, #0
 801adfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801adfe:	e002      	b.n	801ae06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ae00:	23ff      	movs	r3, #255	@ 0xff
 801ae02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ae06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	3728      	adds	r7, #40	@ 0x28
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}
 801ae12:	bf00      	nop
 801ae14:	08021d0c 	.word	0x08021d0c
 801ae18:	08021eb8 	.word	0x08021eb8
 801ae1c:	08021d84 	.word	0x08021d84
 801ae20:	2400ccc8 	.word	0x2400ccc8
 801ae24:	08021ec8 	.word	0x08021ec8
 801ae28:	08021eac 	.word	0x08021eac
 801ae2c:	2400cdb8 	.word	0x2400cdb8
 801ae30:	08021ef0 	.word	0x08021ef0

0801ae34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b08a      	sub	sp, #40	@ 0x28
 801ae38:	af02      	add	r7, sp, #8
 801ae3a:	60f8      	str	r0, [r7, #12]
 801ae3c:	60b9      	str	r1, [r7, #8]
 801ae3e:	607a      	str	r2, [r7, #4]
 801ae40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae42:	2300      	movs	r3, #0
 801ae44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d106      	bne.n	801ae5a <etharp_raw+0x26>
 801ae4c:	4b3a      	ldr	r3, [pc, #232]	@ (801af38 <etharp_raw+0x104>)
 801ae4e:	f240 4257 	movw	r2, #1111	@ 0x457
 801ae52:	493a      	ldr	r1, [pc, #232]	@ (801af3c <etharp_raw+0x108>)
 801ae54:	483a      	ldr	r0, [pc, #232]	@ (801af40 <etharp_raw+0x10c>)
 801ae56:	f002 fa95 	bl	801d384 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae5e:	211c      	movs	r1, #28
 801ae60:	200e      	movs	r0, #14
 801ae62:	f7f6 fdad 	bl	80119c0 <pbuf_alloc>
 801ae66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ae68:	69bb      	ldr	r3, [r7, #24]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d102      	bne.n	801ae74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ae72:	e05d      	b.n	801af30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ae74:	69bb      	ldr	r3, [r7, #24]
 801ae76:	895b      	ldrh	r3, [r3, #10]
 801ae78:	2b1b      	cmp	r3, #27
 801ae7a:	d806      	bhi.n	801ae8a <etharp_raw+0x56>
 801ae7c:	4b2e      	ldr	r3, [pc, #184]	@ (801af38 <etharp_raw+0x104>)
 801ae7e:	f240 4262 	movw	r2, #1122	@ 0x462
 801ae82:	4930      	ldr	r1, [pc, #192]	@ (801af44 <etharp_raw+0x110>)
 801ae84:	482e      	ldr	r0, [pc, #184]	@ (801af40 <etharp_raw+0x10c>)
 801ae86:	f002 fa7d 	bl	801d384 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	685b      	ldr	r3, [r3, #4]
 801ae8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ae90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ae92:	4618      	mov	r0, r3
 801ae94:	f7f5 fbc2 	bl	801061c <lwip_htons>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	461a      	mov	r2, r3
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aea6:	2b06      	cmp	r3, #6
 801aea8:	d006      	beq.n	801aeb8 <etharp_raw+0x84>
 801aeaa:	4b23      	ldr	r3, [pc, #140]	@ (801af38 <etharp_raw+0x104>)
 801aeac:	f240 4269 	movw	r2, #1129	@ 0x469
 801aeb0:	4925      	ldr	r1, [pc, #148]	@ (801af48 <etharp_raw+0x114>)
 801aeb2:	4823      	ldr	r0, [pc, #140]	@ (801af40 <etharp_raw+0x10c>)
 801aeb4:	f002 fa66 	bl	801d384 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	3308      	adds	r3, #8
 801aebc:	2206      	movs	r2, #6
 801aebe:	6839      	ldr	r1, [r7, #0]
 801aec0:	4618      	mov	r0, r3
 801aec2:	f002 fc86 	bl	801d7d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aec6:	697b      	ldr	r3, [r7, #20]
 801aec8:	3312      	adds	r3, #18
 801aeca:	2206      	movs	r2, #6
 801aecc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aece:	4618      	mov	r0, r3
 801aed0:	f002 fc7f 	bl	801d7d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aed4:	697b      	ldr	r3, [r7, #20]
 801aed6:	330e      	adds	r3, #14
 801aed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aeda:	6812      	ldr	r2, [r2, #0]
 801aedc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	3318      	adds	r3, #24
 801aee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aee4:	6812      	ldr	r2, [r2, #0]
 801aee6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aee8:	697b      	ldr	r3, [r7, #20]
 801aeea:	2200      	movs	r2, #0
 801aeec:	701a      	strb	r2, [r3, #0]
 801aeee:	2200      	movs	r2, #0
 801aef0:	f042 0201 	orr.w	r2, r2, #1
 801aef4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801aef6:	697b      	ldr	r3, [r7, #20]
 801aef8:	2200      	movs	r2, #0
 801aefa:	f042 0208 	orr.w	r2, r2, #8
 801aefe:	709a      	strb	r2, [r3, #2]
 801af00:	2200      	movs	r2, #0
 801af02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	2206      	movs	r2, #6
 801af08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801af0a:	697b      	ldr	r3, [r7, #20]
 801af0c:	2204      	movs	r2, #4
 801af0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801af10:	f640 0306 	movw	r3, #2054	@ 0x806
 801af14:	9300      	str	r3, [sp, #0]
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	68ba      	ldr	r2, [r7, #8]
 801af1a:	69b9      	ldr	r1, [r7, #24]
 801af1c:	68f8      	ldr	r0, [r7, #12]
 801af1e:	f001 fbbf 	bl	801c6a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801af22:	69b8      	ldr	r0, [r7, #24]
 801af24:	f7f7 f830 	bl	8011f88 <pbuf_free>
  p = NULL;
 801af28:	2300      	movs	r3, #0
 801af2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801af2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af30:	4618      	mov	r0, r3
 801af32:	3720      	adds	r7, #32
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}
 801af38:	08021d0c 	.word	0x08021d0c
 801af3c:	08021e5c 	.word	0x08021e5c
 801af40:	08021d84 	.word	0x08021d84
 801af44:	08021f0c 	.word	0x08021f0c
 801af48:	08021f40 	.word	0x08021f40

0801af4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b088      	sub	sp, #32
 801af50:	af04      	add	r7, sp, #16
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af68:	2201      	movs	r2, #1
 801af6a:	9203      	str	r2, [sp, #12]
 801af6c:	68ba      	ldr	r2, [r7, #8]
 801af6e:	9202      	str	r2, [sp, #8]
 801af70:	4a06      	ldr	r2, [pc, #24]	@ (801af8c <etharp_request_dst+0x40>)
 801af72:	9201      	str	r2, [sp, #4]
 801af74:	9300      	str	r3, [sp, #0]
 801af76:	4603      	mov	r3, r0
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	68f8      	ldr	r0, [r7, #12]
 801af7c:	f7ff ff5a 	bl	801ae34 <etharp_raw>
 801af80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801af82:	4618      	mov	r0, r3
 801af84:	3710      	adds	r7, #16
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}
 801af8a:	bf00      	nop
 801af8c:	080225d0 	.word	0x080225d0

0801af90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b082      	sub	sp, #8
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
 801af98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801af9a:	4a05      	ldr	r2, [pc, #20]	@ (801afb0 <etharp_request+0x20>)
 801af9c:	6839      	ldr	r1, [r7, #0]
 801af9e:	6878      	ldr	r0, [r7, #4]
 801afa0:	f7ff ffd4 	bl	801af4c <etharp_request_dst>
 801afa4:	4603      	mov	r3, r0
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3708      	adds	r7, #8
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	080225c8 	.word	0x080225c8

0801afb4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b08e      	sub	sp, #56	@ 0x38
 801afb8:	af04      	add	r7, sp, #16
 801afba:	6078      	str	r0, [r7, #4]
 801afbc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801afbe:	4b87      	ldr	r3, [pc, #540]	@ (801b1dc <icmp_input+0x228>)
 801afc0:	689b      	ldr	r3, [r3, #8]
 801afc2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	f003 030f 	and.w	r3, r3, #15
 801afcc:	b2db      	uxtb	r3, r3
 801afce:	009b      	lsls	r3, r3, #2
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801afd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801afd6:	2b13      	cmp	r3, #19
 801afd8:	f240 80e8 	bls.w	801b1ac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	895b      	ldrh	r3, [r3, #10]
 801afe0:	2b03      	cmp	r3, #3
 801afe2:	f240 80e5 	bls.w	801b1b0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	685b      	ldr	r3, [r3, #4]
 801afea:	781b      	ldrb	r3, [r3, #0]
 801afec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801aff0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	f000 80d2 	beq.w	801b19e <icmp_input+0x1ea>
 801affa:	2b08      	cmp	r3, #8
 801affc:	f040 80d2 	bne.w	801b1a4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b000:	4b77      	ldr	r3, [pc, #476]	@ (801b1e0 <icmp_input+0x22c>)
 801b002:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b004:	4b75      	ldr	r3, [pc, #468]	@ (801b1dc <icmp_input+0x228>)
 801b006:	695b      	ldr	r3, [r3, #20]
 801b008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b00c:	2be0      	cmp	r3, #224	@ 0xe0
 801b00e:	f000 80d6 	beq.w	801b1be <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b012:	4b72      	ldr	r3, [pc, #456]	@ (801b1dc <icmp_input+0x228>)
 801b014:	695b      	ldr	r3, [r3, #20]
 801b016:	4a71      	ldr	r2, [pc, #452]	@ (801b1dc <icmp_input+0x228>)
 801b018:	6812      	ldr	r2, [r2, #0]
 801b01a:	4611      	mov	r1, r2
 801b01c:	4618      	mov	r0, r3
 801b01e:	f000 fc31 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801b022:	4603      	mov	r3, r0
 801b024:	2b00      	cmp	r3, #0
 801b026:	f040 80cc 	bne.w	801b1c2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	891b      	ldrh	r3, [r3, #8]
 801b02e:	2b07      	cmp	r3, #7
 801b030:	f240 80c0 	bls.w	801b1b4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801b034:	6878      	ldr	r0, [r7, #4]
 801b036:	f7f5 fb8e 	bl	8010756 <inet_chksum_pbuf>
 801b03a:	4603      	mov	r3, r0
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d003      	beq.n	801b048 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801b040:	6878      	ldr	r0, [r7, #4]
 801b042:	f7f6 ffa1 	bl	8011f88 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801b046:	e0c5      	b.n	801b1d4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b04a:	330e      	adds	r3, #14
 801b04c:	4619      	mov	r1, r3
 801b04e:	6878      	ldr	r0, [r7, #4]
 801b050:	f7f6 ff04 	bl	8011e5c <pbuf_add_header>
 801b054:	4603      	mov	r3, r0
 801b056:	2b00      	cmp	r3, #0
 801b058:	d04b      	beq.n	801b0f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	891a      	ldrh	r2, [r3, #8]
 801b05e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b060:	4413      	add	r3, r2
 801b062:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	891b      	ldrh	r3, [r3, #8]
 801b068:	8b7a      	ldrh	r2, [r7, #26]
 801b06a:	429a      	cmp	r2, r3
 801b06c:	f0c0 80ab 	bcc.w	801b1c6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b070:	8b7b      	ldrh	r3, [r7, #26]
 801b072:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b076:	4619      	mov	r1, r3
 801b078:	200e      	movs	r0, #14
 801b07a:	f7f6 fca1 	bl	80119c0 <pbuf_alloc>
 801b07e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	2b00      	cmp	r3, #0
 801b084:	f000 80a1 	beq.w	801b1ca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	895b      	ldrh	r3, [r3, #10]
 801b08c:	461a      	mov	r2, r3
 801b08e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b090:	3308      	adds	r3, #8
 801b092:	429a      	cmp	r2, r3
 801b094:	d203      	bcs.n	801b09e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b096:	6978      	ldr	r0, [r7, #20]
 801b098:	f7f6 ff76 	bl	8011f88 <pbuf_free>
          goto icmperr;
 801b09c:	e096      	b.n	801b1cc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b09e:	697b      	ldr	r3, [r7, #20]
 801b0a0:	685b      	ldr	r3, [r3, #4]
 801b0a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b0a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	f002 fb93 	bl	801d7d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b0ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0ae:	4619      	mov	r1, r3
 801b0b0:	6978      	ldr	r0, [r7, #20]
 801b0b2:	f7f6 fee3 	bl	8011e7c <pbuf_remove_header>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d009      	beq.n	801b0d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b0bc:	4b49      	ldr	r3, [pc, #292]	@ (801b1e4 <icmp_input+0x230>)
 801b0be:	22b6      	movs	r2, #182	@ 0xb6
 801b0c0:	4949      	ldr	r1, [pc, #292]	@ (801b1e8 <icmp_input+0x234>)
 801b0c2:	484a      	ldr	r0, [pc, #296]	@ (801b1ec <icmp_input+0x238>)
 801b0c4:	f002 f95e 	bl	801d384 <iprintf>
          pbuf_free(r);
 801b0c8:	6978      	ldr	r0, [r7, #20]
 801b0ca:	f7f6 ff5d 	bl	8011f88 <pbuf_free>
          goto icmperr;
 801b0ce:	e07d      	b.n	801b1cc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b0d0:	6879      	ldr	r1, [r7, #4]
 801b0d2:	6978      	ldr	r0, [r7, #20]
 801b0d4:	f7f7 f88c 	bl	80121f0 <pbuf_copy>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d003      	beq.n	801b0e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b0de:	6978      	ldr	r0, [r7, #20]
 801b0e0:	f7f6 ff52 	bl	8011f88 <pbuf_free>
          goto icmperr;
 801b0e4:	e072      	b.n	801b1cc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801b0e6:	6878      	ldr	r0, [r7, #4]
 801b0e8:	f7f6 ff4e 	bl	8011f88 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	607b      	str	r3, [r7, #4]
 801b0f0:	e00f      	b.n	801b112 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0f4:	330e      	adds	r3, #14
 801b0f6:	4619      	mov	r1, r3
 801b0f8:	6878      	ldr	r0, [r7, #4]
 801b0fa:	f7f6 febf 	bl	8011e7c <pbuf_remove_header>
 801b0fe:	4603      	mov	r3, r0
 801b100:	2b00      	cmp	r3, #0
 801b102:	d006      	beq.n	801b112 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b104:	4b37      	ldr	r3, [pc, #220]	@ (801b1e4 <icmp_input+0x230>)
 801b106:	22c7      	movs	r2, #199	@ 0xc7
 801b108:	4939      	ldr	r1, [pc, #228]	@ (801b1f0 <icmp_input+0x23c>)
 801b10a:	4838      	ldr	r0, [pc, #224]	@ (801b1ec <icmp_input+0x238>)
 801b10c:	f002 f93a 	bl	801d384 <iprintf>
          goto icmperr;
 801b110:	e05c      	b.n	801b1cc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	685b      	ldr	r3, [r3, #4]
 801b116:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b11a:	4619      	mov	r1, r3
 801b11c:	6878      	ldr	r0, [r7, #4]
 801b11e:	f7f6 fe9d 	bl	8011e5c <pbuf_add_header>
 801b122:	4603      	mov	r3, r0
 801b124:	2b00      	cmp	r3, #0
 801b126:	d13c      	bne.n	801b1a2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	685b      	ldr	r3, [r3, #4]
 801b12c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b12e:	69fb      	ldr	r3, [r7, #28]
 801b130:	681a      	ldr	r2, [r3, #0]
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b136:	4b29      	ldr	r3, [pc, #164]	@ (801b1dc <icmp_input+0x228>)
 801b138:	691a      	ldr	r2, [r3, #16]
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b13e:	693b      	ldr	r3, [r7, #16]
 801b140:	2200      	movs	r2, #0
 801b142:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	885b      	ldrh	r3, [r3, #2]
 801b148:	b29b      	uxth	r3, r3
 801b14a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b14e:	4293      	cmp	r3, r2
 801b150:	d907      	bls.n	801b162 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	885b      	ldrh	r3, [r3, #2]
 801b156:	b29b      	uxth	r3, r3
 801b158:	3309      	adds	r3, #9
 801b15a:	b29a      	uxth	r2, r3
 801b15c:	693b      	ldr	r3, [r7, #16]
 801b15e:	805a      	strh	r2, [r3, #2]
 801b160:	e006      	b.n	801b170 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801b162:	693b      	ldr	r3, [r7, #16]
 801b164:	885b      	ldrh	r3, [r3, #2]
 801b166:	b29b      	uxth	r3, r3
 801b168:	3308      	adds	r3, #8
 801b16a:	b29a      	uxth	r2, r3
 801b16c:	693b      	ldr	r3, [r7, #16]
 801b16e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	22ff      	movs	r2, #255	@ 0xff
 801b174:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	2200      	movs	r2, #0
 801b17a:	729a      	strb	r2, [r3, #10]
 801b17c:	2200      	movs	r2, #0
 801b17e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	9302      	str	r3, [sp, #8]
 801b184:	2301      	movs	r3, #1
 801b186:	9301      	str	r3, [sp, #4]
 801b188:	2300      	movs	r3, #0
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	23ff      	movs	r3, #255	@ 0xff
 801b18e:	2200      	movs	r2, #0
 801b190:	69f9      	ldr	r1, [r7, #28]
 801b192:	6878      	ldr	r0, [r7, #4]
 801b194:	f000 fa9e 	bl	801b6d4 <ip4_output_if>
 801b198:	4603      	mov	r3, r0
 801b19a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b19c:	e001      	b.n	801b1a2 <icmp_input+0x1ee>
      break;
 801b19e:	bf00      	nop
 801b1a0:	e000      	b.n	801b1a4 <icmp_input+0x1f0>
      break;
 801b1a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b1a4:	6878      	ldr	r0, [r7, #4]
 801b1a6:	f7f6 feef 	bl	8011f88 <pbuf_free>
  return;
 801b1aa:	e013      	b.n	801b1d4 <icmp_input+0x220>
    goto lenerr;
 801b1ac:	bf00      	nop
 801b1ae:	e002      	b.n	801b1b6 <icmp_input+0x202>
    goto lenerr;
 801b1b0:	bf00      	nop
 801b1b2:	e000      	b.n	801b1b6 <icmp_input+0x202>
        goto lenerr;
 801b1b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b1b6:	6878      	ldr	r0, [r7, #4]
 801b1b8:	f7f6 fee6 	bl	8011f88 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b1bc:	e00a      	b.n	801b1d4 <icmp_input+0x220>
        goto icmperr;
 801b1be:	bf00      	nop
 801b1c0:	e004      	b.n	801b1cc <icmp_input+0x218>
        goto icmperr;
 801b1c2:	bf00      	nop
 801b1c4:	e002      	b.n	801b1cc <icmp_input+0x218>
          goto icmperr;
 801b1c6:	bf00      	nop
 801b1c8:	e000      	b.n	801b1cc <icmp_input+0x218>
          goto icmperr;
 801b1ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f7f6 fedb 	bl	8011f88 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b1d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b1d4:	3728      	adds	r7, #40	@ 0x28
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bd80      	pop	{r7, pc}
 801b1da:	bf00      	nop
 801b1dc:	24009b14 	.word	0x24009b14
 801b1e0:	24009b28 	.word	0x24009b28
 801b1e4:	08021f84 	.word	0x08021f84
 801b1e8:	08021fbc 	.word	0x08021fbc
 801b1ec:	08021ff4 	.word	0x08021ff4
 801b1f0:	0802201c 	.word	0x0802201c

0801b1f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	460b      	mov	r3, r1
 801b1fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b200:	78fb      	ldrb	r3, [r7, #3]
 801b202:	461a      	mov	r2, r3
 801b204:	2103      	movs	r1, #3
 801b206:	6878      	ldr	r0, [r7, #4]
 801b208:	f000 f814 	bl	801b234 <icmp_send_response>
}
 801b20c:	bf00      	nop
 801b20e:	3708      	adds	r7, #8
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}

0801b214 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b082      	sub	sp, #8
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
 801b21c:	460b      	mov	r3, r1
 801b21e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b220:	78fb      	ldrb	r3, [r7, #3]
 801b222:	461a      	mov	r2, r3
 801b224:	210b      	movs	r1, #11
 801b226:	6878      	ldr	r0, [r7, #4]
 801b228:	f000 f804 	bl	801b234 <icmp_send_response>
}
 801b22c:	bf00      	nop
 801b22e:	3708      	adds	r7, #8
 801b230:	46bd      	mov	sp, r7
 801b232:	bd80      	pop	{r7, pc}

0801b234 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b08c      	sub	sp, #48	@ 0x30
 801b238:	af04      	add	r7, sp, #16
 801b23a:	6078      	str	r0, [r7, #4]
 801b23c:	460b      	mov	r3, r1
 801b23e:	70fb      	strb	r3, [r7, #3]
 801b240:	4613      	mov	r3, r2
 801b242:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b244:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b248:	2124      	movs	r1, #36	@ 0x24
 801b24a:	2022      	movs	r0, #34	@ 0x22
 801b24c:	f7f6 fbb8 	bl	80119c0 <pbuf_alloc>
 801b250:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b252:	69fb      	ldr	r3, [r7, #28]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d056      	beq.n	801b306 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	895b      	ldrh	r3, [r3, #10]
 801b25c:	2b23      	cmp	r3, #35	@ 0x23
 801b25e:	d806      	bhi.n	801b26e <icmp_send_response+0x3a>
 801b260:	4b2b      	ldr	r3, [pc, #172]	@ (801b310 <icmp_send_response+0xdc>)
 801b262:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b266:	492b      	ldr	r1, [pc, #172]	@ (801b314 <icmp_send_response+0xe0>)
 801b268:	482b      	ldr	r0, [pc, #172]	@ (801b318 <icmp_send_response+0xe4>)
 801b26a:	f002 f88b 	bl	801d384 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b274:	69fb      	ldr	r3, [r7, #28]
 801b276:	685b      	ldr	r3, [r3, #4]
 801b278:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b27a:	697b      	ldr	r3, [r7, #20]
 801b27c:	78fa      	ldrb	r2, [r7, #3]
 801b27e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	78ba      	ldrb	r2, [r7, #2]
 801b284:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b286:	697b      	ldr	r3, [r7, #20]
 801b288:	2200      	movs	r2, #0
 801b28a:	711a      	strb	r2, [r3, #4]
 801b28c:	2200      	movs	r2, #0
 801b28e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b290:	697b      	ldr	r3, [r7, #20]
 801b292:	2200      	movs	r2, #0
 801b294:	719a      	strb	r2, [r3, #6]
 801b296:	2200      	movs	r2, #0
 801b298:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b29a:	69fb      	ldr	r3, [r7, #28]
 801b29c:	685b      	ldr	r3, [r3, #4]
 801b29e:	f103 0008 	add.w	r0, r3, #8
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	685b      	ldr	r3, [r3, #4]
 801b2a6:	221c      	movs	r2, #28
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	f002 fa92 	bl	801d7d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b2ae:	69bb      	ldr	r3, [r7, #24]
 801b2b0:	68db      	ldr	r3, [r3, #12]
 801b2b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b2b4:	f107 030c 	add.w	r3, r7, #12
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f000 f82f 	bl	801b31c <ip4_route>
 801b2be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b2c0:	693b      	ldr	r3, [r7, #16]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d01b      	beq.n	801b2fe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b2c6:	697b      	ldr	r3, [r7, #20]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	709a      	strb	r2, [r3, #2]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b2d0:	69fb      	ldr	r3, [r7, #28]
 801b2d2:	895b      	ldrh	r3, [r3, #10]
 801b2d4:	4619      	mov	r1, r3
 801b2d6:	6978      	ldr	r0, [r7, #20]
 801b2d8:	f7f5 fa2b 	bl	8010732 <inet_chksum>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	461a      	mov	r2, r3
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b2e4:	f107 020c 	add.w	r2, r7, #12
 801b2e8:	693b      	ldr	r3, [r7, #16]
 801b2ea:	9302      	str	r3, [sp, #8]
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	9301      	str	r3, [sp, #4]
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	9300      	str	r3, [sp, #0]
 801b2f4:	23ff      	movs	r3, #255	@ 0xff
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	69f8      	ldr	r0, [r7, #28]
 801b2fa:	f000 f9eb 	bl	801b6d4 <ip4_output_if>
  }
  pbuf_free(q);
 801b2fe:	69f8      	ldr	r0, [r7, #28]
 801b300:	f7f6 fe42 	bl	8011f88 <pbuf_free>
 801b304:	e000      	b.n	801b308 <icmp_send_response+0xd4>
    return;
 801b306:	bf00      	nop
}
 801b308:	3720      	adds	r7, #32
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	bf00      	nop
 801b310:	08021f84 	.word	0x08021f84
 801b314:	08022050 	.word	0x08022050
 801b318:	08021ff4 	.word	0x08021ff4

0801b31c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b31c:	b480      	push	{r7}
 801b31e:	b085      	sub	sp, #20
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b324:	4b33      	ldr	r3, [pc, #204]	@ (801b3f4 <ip4_route+0xd8>)
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	60fb      	str	r3, [r7, #12]
 801b32a:	e036      	b.n	801b39a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b332:	f003 0301 	and.w	r3, r3, #1
 801b336:	b2db      	uxtb	r3, r3
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d02b      	beq.n	801b394 <ip4_route+0x78>
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b342:	089b      	lsrs	r3, r3, #2
 801b344:	f003 0301 	and.w	r3, r3, #1
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d022      	beq.n	801b394 <ip4_route+0x78>
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	3304      	adds	r3, #4
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d01d      	beq.n	801b394 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	3304      	adds	r3, #4
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	405a      	eors	r2, r3
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	3308      	adds	r3, #8
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	4013      	ands	r3, r2
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d101      	bne.n	801b374 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	e038      	b.n	801b3e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b374:	68fb      	ldr	r3, [r7, #12]
 801b376:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b37a:	f003 0302 	and.w	r3, r3, #2
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d108      	bne.n	801b394 <ip4_route+0x78>
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681a      	ldr	r2, [r3, #0]
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	330c      	adds	r3, #12
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	429a      	cmp	r2, r3
 801b38e:	d101      	bne.n	801b394 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	e028      	b.n	801b3e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	60fb      	str	r3, [r7, #12]
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d1c5      	bne.n	801b32c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b3a0:	4b15      	ldr	r3, [pc, #84]	@ (801b3f8 <ip4_route+0xdc>)
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d01a      	beq.n	801b3de <ip4_route+0xc2>
 801b3a8:	4b13      	ldr	r3, [pc, #76]	@ (801b3f8 <ip4_route+0xdc>)
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b3b0:	f003 0301 	and.w	r3, r3, #1
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d012      	beq.n	801b3de <ip4_route+0xc2>
 801b3b8:	4b0f      	ldr	r3, [pc, #60]	@ (801b3f8 <ip4_route+0xdc>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b3c0:	f003 0304 	and.w	r3, r3, #4
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d00a      	beq.n	801b3de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b3c8:	4b0b      	ldr	r3, [pc, #44]	@ (801b3f8 <ip4_route+0xdc>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	3304      	adds	r3, #4
 801b3ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d004      	beq.n	801b3de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	b2db      	uxtb	r3, r3
 801b3da:	2b7f      	cmp	r3, #127	@ 0x7f
 801b3dc:	d101      	bne.n	801b3e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b3de:	2300      	movs	r3, #0
 801b3e0:	e001      	b.n	801b3e6 <ip4_route+0xca>
  }

  return netif_default;
 801b3e2:	4b05      	ldr	r3, [pc, #20]	@ (801b3f8 <ip4_route+0xdc>)
 801b3e4:	681b      	ldr	r3, [r3, #0]
}
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	3714      	adds	r7, #20
 801b3ea:	46bd      	mov	sp, r7
 801b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop
 801b3f4:	2400cc28 	.word	0x2400cc28
 801b3f8:	2400cc2c 	.word	0x2400cc2c

0801b3fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b082      	sub	sp, #8
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b40a:	f003 0301 	and.w	r3, r3, #1
 801b40e:	b2db      	uxtb	r3, r3
 801b410:	2b00      	cmp	r3, #0
 801b412:	d016      	beq.n	801b442 <ip4_input_accept+0x46>
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	3304      	adds	r3, #4
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d011      	beq.n	801b442 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b41e:	4b0b      	ldr	r3, [pc, #44]	@ (801b44c <ip4_input_accept+0x50>)
 801b420:	695a      	ldr	r2, [r3, #20]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	3304      	adds	r3, #4
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	429a      	cmp	r2, r3
 801b42a:	d008      	beq.n	801b43e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b42c:	4b07      	ldr	r3, [pc, #28]	@ (801b44c <ip4_input_accept+0x50>)
 801b42e:	695b      	ldr	r3, [r3, #20]
 801b430:	6879      	ldr	r1, [r7, #4]
 801b432:	4618      	mov	r0, r3
 801b434:	f000 fa26 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801b438:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d001      	beq.n	801b442 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b43e:	2301      	movs	r3, #1
 801b440:	e000      	b.n	801b444 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b442:	2300      	movs	r3, #0
}
 801b444:	4618      	mov	r0, r3
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	24009b14 	.word	0x24009b14

0801b450 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b088      	sub	sp, #32
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
 801b458:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b45a:	2301      	movs	r3, #1
 801b45c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	685b      	ldr	r3, [r3, #4]
 801b462:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b464:	69fb      	ldr	r3, [r7, #28]
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	091b      	lsrs	r3, r3, #4
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	2b04      	cmp	r3, #4
 801b46e:	d004      	beq.n	801b47a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b470:	6878      	ldr	r0, [r7, #4]
 801b472:	f7f6 fd89 	bl	8011f88 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b476:	2300      	movs	r3, #0
 801b478:	e123      	b.n	801b6c2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b47a:	69fb      	ldr	r3, [r7, #28]
 801b47c:	781b      	ldrb	r3, [r3, #0]
 801b47e:	f003 030f 	and.w	r3, r3, #15
 801b482:	b2db      	uxtb	r3, r3
 801b484:	009b      	lsls	r3, r3, #2
 801b486:	b2db      	uxtb	r3, r3
 801b488:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b48a:	69fb      	ldr	r3, [r7, #28]
 801b48c:	885b      	ldrh	r3, [r3, #2]
 801b48e:	b29b      	uxth	r3, r3
 801b490:	4618      	mov	r0, r3
 801b492:	f7f5 f8c3 	bl	801061c <lwip_htons>
 801b496:	4603      	mov	r3, r0
 801b498:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	891b      	ldrh	r3, [r3, #8]
 801b49e:	8a3a      	ldrh	r2, [r7, #16]
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	d204      	bcs.n	801b4ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b4a4:	8a3b      	ldrh	r3, [r7, #16]
 801b4a6:	4619      	mov	r1, r3
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	f7f6 fbe7 	bl	8011c7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	895b      	ldrh	r3, [r3, #10]
 801b4b2:	8a7a      	ldrh	r2, [r7, #18]
 801b4b4:	429a      	cmp	r2, r3
 801b4b6:	d807      	bhi.n	801b4c8 <ip4_input+0x78>
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	891b      	ldrh	r3, [r3, #8]
 801b4bc:	8a3a      	ldrh	r2, [r7, #16]
 801b4be:	429a      	cmp	r2, r3
 801b4c0:	d802      	bhi.n	801b4c8 <ip4_input+0x78>
 801b4c2:	8a7b      	ldrh	r3, [r7, #18]
 801b4c4:	2b13      	cmp	r3, #19
 801b4c6:	d804      	bhi.n	801b4d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f7f6 fd5d 	bl	8011f88 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	e0f7      	b.n	801b6c2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	691b      	ldr	r3, [r3, #16]
 801b4d6:	4a7d      	ldr	r2, [pc, #500]	@ (801b6cc <ip4_input+0x27c>)
 801b4d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b4da:	69fb      	ldr	r3, [r7, #28]
 801b4dc:	68db      	ldr	r3, [r3, #12]
 801b4de:	4a7b      	ldr	r2, [pc, #492]	@ (801b6cc <ip4_input+0x27c>)
 801b4e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b4e2:	4b7a      	ldr	r3, [pc, #488]	@ (801b6cc <ip4_input+0x27c>)
 801b4e4:	695b      	ldr	r3, [r3, #20]
 801b4e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b4ea:	2be0      	cmp	r3, #224	@ 0xe0
 801b4ec:	d112      	bne.n	801b514 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b4ee:	683b      	ldr	r3, [r7, #0]
 801b4f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b4f4:	f003 0301 	and.w	r3, r3, #1
 801b4f8:	b2db      	uxtb	r3, r3
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d007      	beq.n	801b50e <ip4_input+0xbe>
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	3304      	adds	r3, #4
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d002      	beq.n	801b50e <ip4_input+0xbe>
      netif = inp;
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	61bb      	str	r3, [r7, #24]
 801b50c:	e02a      	b.n	801b564 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b50e:	2300      	movs	r3, #0
 801b510:	61bb      	str	r3, [r7, #24]
 801b512:	e027      	b.n	801b564 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b514:	6838      	ldr	r0, [r7, #0]
 801b516:	f7ff ff71 	bl	801b3fc <ip4_input_accept>
 801b51a:	4603      	mov	r3, r0
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d002      	beq.n	801b526 <ip4_input+0xd6>
      netif = inp;
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	61bb      	str	r3, [r7, #24]
 801b524:	e01e      	b.n	801b564 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b526:	2300      	movs	r3, #0
 801b528:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b52a:	4b68      	ldr	r3, [pc, #416]	@ (801b6cc <ip4_input+0x27c>)
 801b52c:	695b      	ldr	r3, [r3, #20]
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	2b7f      	cmp	r3, #127	@ 0x7f
 801b532:	d017      	beq.n	801b564 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b534:	4b66      	ldr	r3, [pc, #408]	@ (801b6d0 <ip4_input+0x280>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	61bb      	str	r3, [r7, #24]
 801b53a:	e00e      	b.n	801b55a <ip4_input+0x10a>
          if (netif == inp) {
 801b53c:	69ba      	ldr	r2, [r7, #24]
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	429a      	cmp	r2, r3
 801b542:	d006      	beq.n	801b552 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b544:	69b8      	ldr	r0, [r7, #24]
 801b546:	f7ff ff59 	bl	801b3fc <ip4_input_accept>
 801b54a:	4603      	mov	r3, r0
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d108      	bne.n	801b562 <ip4_input+0x112>
 801b550:	e000      	b.n	801b554 <ip4_input+0x104>
            continue;
 801b552:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b554:	69bb      	ldr	r3, [r7, #24]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	61bb      	str	r3, [r7, #24]
 801b55a:	69bb      	ldr	r3, [r7, #24]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d1ed      	bne.n	801b53c <ip4_input+0xec>
 801b560:	e000      	b.n	801b564 <ip4_input+0x114>
            break;
 801b562:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b564:	69bb      	ldr	r3, [r7, #24]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d111      	bne.n	801b58e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b56a:	69fb      	ldr	r3, [r7, #28]
 801b56c:	7a5b      	ldrb	r3, [r3, #9]
 801b56e:	2b11      	cmp	r3, #17
 801b570:	d10d      	bne.n	801b58e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801b572:	8a7b      	ldrh	r3, [r7, #18]
 801b574:	69fa      	ldr	r2, [r7, #28]
 801b576:	4413      	add	r3, r2
 801b578:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	885b      	ldrh	r3, [r3, #2]
 801b57e:	b29b      	uxth	r3, r3
 801b580:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801b584:	d103      	bne.n	801b58e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801b586:	683b      	ldr	r3, [r7, #0]
 801b588:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801b58a:	2300      	movs	r3, #0
 801b58c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801b58e:	697b      	ldr	r3, [r7, #20]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d017      	beq.n	801b5c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b594:	4b4d      	ldr	r3, [pc, #308]	@ (801b6cc <ip4_input+0x27c>)
 801b596:	691b      	ldr	r3, [r3, #16]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d013      	beq.n	801b5c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b59c:	4b4b      	ldr	r3, [pc, #300]	@ (801b6cc <ip4_input+0x27c>)
 801b59e:	691b      	ldr	r3, [r3, #16]
 801b5a0:	6839      	ldr	r1, [r7, #0]
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f000 f96e 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d105      	bne.n	801b5ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b5ae:	4b47      	ldr	r3, [pc, #284]	@ (801b6cc <ip4_input+0x27c>)
 801b5b0:	691b      	ldr	r3, [r3, #16]
 801b5b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b5b6:	2be0      	cmp	r3, #224	@ 0xe0
 801b5b8:	d104      	bne.n	801b5c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b5ba:	6878      	ldr	r0, [r7, #4]
 801b5bc:	f7f6 fce4 	bl	8011f88 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	e07e      	b.n	801b6c2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b5c4:	69bb      	ldr	r3, [r7, #24]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d104      	bne.n	801b5d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f7f6 fcdc 	bl	8011f88 <pbuf_free>
    return ERR_OK;
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	e076      	b.n	801b6c2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b5d4:	69fb      	ldr	r3, [r7, #28]
 801b5d6:	88db      	ldrh	r3, [r3, #6]
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	461a      	mov	r2, r3
 801b5dc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b5e0:	4013      	ands	r3, r2
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d00b      	beq.n	801b5fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b5e6:	6878      	ldr	r0, [r7, #4]
 801b5e8:	f000 fc92 	bl	801bf10 <ip4_reass>
 801b5ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d101      	bne.n	801b5f8 <ip4_input+0x1a8>
      return ERR_OK;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	e064      	b.n	801b6c2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	685b      	ldr	r3, [r3, #4]
 801b5fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b5fe:	4a33      	ldr	r2, [pc, #204]	@ (801b6cc <ip4_input+0x27c>)
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b604:	4a31      	ldr	r2, [pc, #196]	@ (801b6cc <ip4_input+0x27c>)
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b60a:	4a30      	ldr	r2, [pc, #192]	@ (801b6cc <ip4_input+0x27c>)
 801b60c:	69fb      	ldr	r3, [r7, #28]
 801b60e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b610:	69fb      	ldr	r3, [r7, #28]
 801b612:	781b      	ldrb	r3, [r3, #0]
 801b614:	f003 030f 	and.w	r3, r3, #15
 801b618:	b2db      	uxtb	r3, r3
 801b61a:	009b      	lsls	r3, r3, #2
 801b61c:	b2db      	uxtb	r3, r3
 801b61e:	461a      	mov	r2, r3
 801b620:	4b2a      	ldr	r3, [pc, #168]	@ (801b6cc <ip4_input+0x27c>)
 801b622:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b624:	8a7b      	ldrh	r3, [r7, #18]
 801b626:	4619      	mov	r1, r3
 801b628:	6878      	ldr	r0, [r7, #4]
 801b62a:	f7f6 fc27 	bl	8011e7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b62e:	69fb      	ldr	r3, [r7, #28]
 801b630:	7a5b      	ldrb	r3, [r3, #9]
 801b632:	2b11      	cmp	r3, #17
 801b634:	d006      	beq.n	801b644 <ip4_input+0x1f4>
 801b636:	2b11      	cmp	r3, #17
 801b638:	dc13      	bgt.n	801b662 <ip4_input+0x212>
 801b63a:	2b01      	cmp	r3, #1
 801b63c:	d00c      	beq.n	801b658 <ip4_input+0x208>
 801b63e:	2b06      	cmp	r3, #6
 801b640:	d005      	beq.n	801b64e <ip4_input+0x1fe>
 801b642:	e00e      	b.n	801b662 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b644:	6839      	ldr	r1, [r7, #0]
 801b646:	6878      	ldr	r0, [r7, #4]
 801b648:	f7fc fac8 	bl	8017bdc <udp_input>
        break;
 801b64c:	e026      	b.n	801b69c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b64e:	6839      	ldr	r1, [r7, #0]
 801b650:	6878      	ldr	r0, [r7, #4]
 801b652:	f7f8 fadf 	bl	8013c14 <tcp_input>
        break;
 801b656:	e021      	b.n	801b69c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b658:	6839      	ldr	r1, [r7, #0]
 801b65a:	6878      	ldr	r0, [r7, #4]
 801b65c:	f7ff fcaa 	bl	801afb4 <icmp_input>
        break;
 801b660:	e01c      	b.n	801b69c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b662:	4b1a      	ldr	r3, [pc, #104]	@ (801b6cc <ip4_input+0x27c>)
 801b664:	695b      	ldr	r3, [r3, #20]
 801b666:	69b9      	ldr	r1, [r7, #24]
 801b668:	4618      	mov	r0, r3
 801b66a:	f000 f90b 	bl	801b884 <ip4_addr_isbroadcast_u32>
 801b66e:	4603      	mov	r3, r0
 801b670:	2b00      	cmp	r3, #0
 801b672:	d10f      	bne.n	801b694 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b674:	4b15      	ldr	r3, [pc, #84]	@ (801b6cc <ip4_input+0x27c>)
 801b676:	695b      	ldr	r3, [r3, #20]
 801b678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b67c:	2be0      	cmp	r3, #224	@ 0xe0
 801b67e:	d009      	beq.n	801b694 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b684:	4619      	mov	r1, r3
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f7f6 fc6b 	bl	8011f62 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b68c:	2102      	movs	r1, #2
 801b68e:	6878      	ldr	r0, [r7, #4]
 801b690:	f7ff fdb0 	bl	801b1f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b694:	6878      	ldr	r0, [r7, #4]
 801b696:	f7f6 fc77 	bl	8011f88 <pbuf_free>
        break;
 801b69a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b69c:	4b0b      	ldr	r3, [pc, #44]	@ (801b6cc <ip4_input+0x27c>)
 801b69e:	2200      	movs	r2, #0
 801b6a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (801b6cc <ip4_input+0x27c>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b6a8:	4b08      	ldr	r3, [pc, #32]	@ (801b6cc <ip4_input+0x27c>)
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b6ae:	4b07      	ldr	r3, [pc, #28]	@ (801b6cc <ip4_input+0x27c>)
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b6b4:	4b05      	ldr	r3, [pc, #20]	@ (801b6cc <ip4_input+0x27c>)
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b6ba:	4b04      	ldr	r3, [pc, #16]	@ (801b6cc <ip4_input+0x27c>)
 801b6bc:	2200      	movs	r2, #0
 801b6be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b6c0:	2300      	movs	r3, #0
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	3720      	adds	r7, #32
 801b6c6:	46bd      	mov	sp, r7
 801b6c8:	bd80      	pop	{r7, pc}
 801b6ca:	bf00      	nop
 801b6cc:	24009b14 	.word	0x24009b14
 801b6d0:	2400cc28 	.word	0x2400cc28

0801b6d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b08a      	sub	sp, #40	@ 0x28
 801b6d8:	af04      	add	r7, sp, #16
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
 801b6e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b6e2:	68bb      	ldr	r3, [r7, #8]
 801b6e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d009      	beq.n	801b700 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b6ec:	68bb      	ldr	r3, [r7, #8]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d003      	beq.n	801b6fa <ip4_output_if+0x26>
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d102      	bne.n	801b700 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6fc:	3304      	adds	r3, #4
 801b6fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b700:	78fa      	ldrb	r2, [r7, #3]
 801b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b704:	9302      	str	r3, [sp, #8]
 801b706:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b70a:	9301      	str	r3, [sp, #4]
 801b70c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	4613      	mov	r3, r2
 801b714:	687a      	ldr	r2, [r7, #4]
 801b716:	6979      	ldr	r1, [r7, #20]
 801b718:	68f8      	ldr	r0, [r7, #12]
 801b71a:	f000 f805 	bl	801b728 <ip4_output_if_src>
 801b71e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b720:	4618      	mov	r0, r3
 801b722:	3718      	adds	r7, #24
 801b724:	46bd      	mov	sp, r7
 801b726:	bd80      	pop	{r7, pc}

0801b728 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b728:	b580      	push	{r7, lr}
 801b72a:	b088      	sub	sp, #32
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	60f8      	str	r0, [r7, #12]
 801b730:	60b9      	str	r1, [r7, #8]
 801b732:	607a      	str	r2, [r7, #4]
 801b734:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	7b9b      	ldrb	r3, [r3, #14]
 801b73a:	2b01      	cmp	r3, #1
 801b73c:	d006      	beq.n	801b74c <ip4_output_if_src+0x24>
 801b73e:	4b4b      	ldr	r3, [pc, #300]	@ (801b86c <ip4_output_if_src+0x144>)
 801b740:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b744:	494a      	ldr	r1, [pc, #296]	@ (801b870 <ip4_output_if_src+0x148>)
 801b746:	484b      	ldr	r0, [pc, #300]	@ (801b874 <ip4_output_if_src+0x14c>)
 801b748:	f001 fe1c 	bl	801d384 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d060      	beq.n	801b814 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b752:	2314      	movs	r3, #20
 801b754:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b756:	2114      	movs	r1, #20
 801b758:	68f8      	ldr	r0, [r7, #12]
 801b75a:	f7f6 fb7f 	bl	8011e5c <pbuf_add_header>
 801b75e:	4603      	mov	r3, r0
 801b760:	2b00      	cmp	r3, #0
 801b762:	d002      	beq.n	801b76a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b764:	f06f 0301 	mvn.w	r3, #1
 801b768:	e07c      	b.n	801b864 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	685b      	ldr	r3, [r3, #4]
 801b76e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	895b      	ldrh	r3, [r3, #10]
 801b774:	2b13      	cmp	r3, #19
 801b776:	d806      	bhi.n	801b786 <ip4_output_if_src+0x5e>
 801b778:	4b3c      	ldr	r3, [pc, #240]	@ (801b86c <ip4_output_if_src+0x144>)
 801b77a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b77e:	493e      	ldr	r1, [pc, #248]	@ (801b878 <ip4_output_if_src+0x150>)
 801b780:	483c      	ldr	r0, [pc, #240]	@ (801b874 <ip4_output_if_src+0x14c>)
 801b782:	f001 fdff 	bl	801d384 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b786:	69fb      	ldr	r3, [r7, #28]
 801b788:	78fa      	ldrb	r2, [r7, #3]
 801b78a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b78c:	69fb      	ldr	r3, [r7, #28]
 801b78e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b792:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	681a      	ldr	r2, [r3, #0]
 801b798:	69fb      	ldr	r3, [r7, #28]
 801b79a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b79c:	8b7b      	ldrh	r3, [r7, #26]
 801b79e:	089b      	lsrs	r3, r3, #2
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	b2db      	uxtb	r3, r3
 801b7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7a8:	b2da      	uxtb	r2, r3
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b7ae:	69fb      	ldr	r3, [r7, #28]
 801b7b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b7b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	891b      	ldrh	r3, [r3, #8]
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7f4 ff2e 	bl	801061c <lwip_htons>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	461a      	mov	r2, r3
 801b7c4:	69fb      	ldr	r3, [r7, #28]
 801b7c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b7c8:	69fb      	ldr	r3, [r7, #28]
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	719a      	strb	r2, [r3, #6]
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b7d2:	4b2a      	ldr	r3, [pc, #168]	@ (801b87c <ip4_output_if_src+0x154>)
 801b7d4:	881b      	ldrh	r3, [r3, #0]
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7f4 ff20 	bl	801061c <lwip_htons>
 801b7dc:	4603      	mov	r3, r0
 801b7de:	461a      	mov	r2, r3
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b7e4:	4b25      	ldr	r3, [pc, #148]	@ (801b87c <ip4_output_if_src+0x154>)
 801b7e6:	881b      	ldrh	r3, [r3, #0]
 801b7e8:	3301      	adds	r3, #1
 801b7ea:	b29a      	uxth	r2, r3
 801b7ec:	4b23      	ldr	r3, [pc, #140]	@ (801b87c <ip4_output_if_src+0x154>)
 801b7ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d104      	bne.n	801b800 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b7f6:	4b22      	ldr	r3, [pc, #136]	@ (801b880 <ip4_output_if_src+0x158>)
 801b7f8:	681a      	ldr	r2, [r3, #0]
 801b7fa:	69fb      	ldr	r3, [r7, #28]
 801b7fc:	60da      	str	r2, [r3, #12]
 801b7fe:	e003      	b.n	801b808 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	681a      	ldr	r2, [r3, #0]
 801b804:	69fb      	ldr	r3, [r7, #28]
 801b806:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b808:	69fb      	ldr	r3, [r7, #28]
 801b80a:	2200      	movs	r2, #0
 801b80c:	729a      	strb	r2, [r3, #10]
 801b80e:	2200      	movs	r2, #0
 801b810:	72da      	strb	r2, [r3, #11]
 801b812:	e00f      	b.n	801b834 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	895b      	ldrh	r3, [r3, #10]
 801b818:	2b13      	cmp	r3, #19
 801b81a:	d802      	bhi.n	801b822 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b81c:	f06f 0301 	mvn.w	r3, #1
 801b820:	e020      	b.n	801b864 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b828:	69fb      	ldr	r3, [r7, #28]
 801b82a:	691b      	ldr	r3, [r3, #16]
 801b82c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b82e:	f107 0314 	add.w	r3, r7, #20
 801b832:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d00c      	beq.n	801b856 <ip4_output_if_src+0x12e>
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	891a      	ldrh	r2, [r3, #8]
 801b840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b844:	429a      	cmp	r2, r3
 801b846:	d906      	bls.n	801b856 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b848:	687a      	ldr	r2, [r7, #4]
 801b84a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b84c:	68f8      	ldr	r0, [r7, #12]
 801b84e:	f000 fd53 	bl	801c2f8 <ip4_frag>
 801b852:	4603      	mov	r3, r0
 801b854:	e006      	b.n	801b864 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b858:	695b      	ldr	r3, [r3, #20]
 801b85a:	687a      	ldr	r2, [r7, #4]
 801b85c:	68f9      	ldr	r1, [r7, #12]
 801b85e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b860:	4798      	blx	r3
 801b862:	4603      	mov	r3, r0
}
 801b864:	4618      	mov	r0, r3
 801b866:	3720      	adds	r7, #32
 801b868:	46bd      	mov	sp, r7
 801b86a:	bd80      	pop	{r7, pc}
 801b86c:	0802207c 	.word	0x0802207c
 801b870:	080220b0 	.word	0x080220b0
 801b874:	080220bc 	.word	0x080220bc
 801b878:	080220e4 	.word	0x080220e4
 801b87c:	2400cdba 	.word	0x2400cdba
 801b880:	080225c0 	.word	0x080225c0

0801b884 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b884:	b480      	push	{r7}
 801b886:	b085      	sub	sp, #20
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
 801b88c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b898:	d002      	beq.n	801b8a0 <ip4_addr_isbroadcast_u32+0x1c>
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d101      	bne.n	801b8a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	e02a      	b.n	801b8fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b8a4:	683b      	ldr	r3, [r7, #0]
 801b8a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b8aa:	f003 0302 	and.w	r3, r3, #2
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d101      	bne.n	801b8b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	e021      	b.n	801b8fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	3304      	adds	r3, #4
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	687a      	ldr	r2, [r7, #4]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d101      	bne.n	801b8c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	e019      	b.n	801b8fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b8c6:	68fa      	ldr	r2, [r7, #12]
 801b8c8:	683b      	ldr	r3, [r7, #0]
 801b8ca:	3304      	adds	r3, #4
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	405a      	eors	r2, r3
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	3308      	adds	r3, #8
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4013      	ands	r3, r2
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d10d      	bne.n	801b8f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b8dc:	683b      	ldr	r3, [r7, #0]
 801b8de:	3308      	adds	r3, #8
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	43da      	mvns	r2, r3
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b8e8:	683b      	ldr	r3, [r7, #0]
 801b8ea:	3308      	adds	r3, #8
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d101      	bne.n	801b8f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b8f4:	2301      	movs	r3, #1
 801b8f6:	e000      	b.n	801b8fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b8f8:	2300      	movs	r3, #0
  }
}
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	3714      	adds	r7, #20
 801b8fe:	46bd      	mov	sp, r7
 801b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b904:	4770      	bx	lr
	...

0801b908 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b084      	sub	sp, #16
 801b90c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b90e:	2300      	movs	r3, #0
 801b910:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b912:	4b12      	ldr	r3, [pc, #72]	@ (801b95c <ip_reass_tmr+0x54>)
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b918:	e018      	b.n	801b94c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	7fdb      	ldrb	r3, [r3, #31]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d00b      	beq.n	801b93a <ip_reass_tmr+0x32>
      r->timer--;
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	7fdb      	ldrb	r3, [r3, #31]
 801b926:	3b01      	subs	r3, #1
 801b928:	b2da      	uxtb	r2, r3
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	60fb      	str	r3, [r7, #12]
 801b938:	e008      	b.n	801b94c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b944:	68b9      	ldr	r1, [r7, #8]
 801b946:	6878      	ldr	r0, [r7, #4]
 801b948:	f000 f80a 	bl	801b960 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d1e3      	bne.n	801b91a <ip_reass_tmr+0x12>
    }
  }
}
 801b952:	bf00      	nop
 801b954:	bf00      	nop
 801b956:	3710      	adds	r7, #16
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}
 801b95c:	2400cdbc 	.word	0x2400cdbc

0801b960 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b088      	sub	sp, #32
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
 801b968:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b96a:	2300      	movs	r3, #0
 801b96c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b96e:	683a      	ldr	r2, [r7, #0]
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	429a      	cmp	r2, r3
 801b974:	d105      	bne.n	801b982 <ip_reass_free_complete_datagram+0x22>
 801b976:	4b45      	ldr	r3, [pc, #276]	@ (801ba8c <ip_reass_free_complete_datagram+0x12c>)
 801b978:	22ab      	movs	r2, #171	@ 0xab
 801b97a:	4945      	ldr	r1, [pc, #276]	@ (801ba90 <ip_reass_free_complete_datagram+0x130>)
 801b97c:	4845      	ldr	r0, [pc, #276]	@ (801ba94 <ip_reass_free_complete_datagram+0x134>)
 801b97e:	f001 fd01 	bl	801d384 <iprintf>
  if (prev != NULL) {
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d00a      	beq.n	801b99e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	687a      	ldr	r2, [r7, #4]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d005      	beq.n	801b99e <ip_reass_free_complete_datagram+0x3e>
 801b992:	4b3e      	ldr	r3, [pc, #248]	@ (801ba8c <ip_reass_free_complete_datagram+0x12c>)
 801b994:	22ad      	movs	r2, #173	@ 0xad
 801b996:	4940      	ldr	r1, [pc, #256]	@ (801ba98 <ip_reass_free_complete_datagram+0x138>)
 801b998:	483e      	ldr	r0, [pc, #248]	@ (801ba94 <ip_reass_free_complete_datagram+0x134>)
 801b99a:	f001 fcf3 	bl	801d384 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	685b      	ldr	r3, [r3, #4]
 801b9a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b9a6:	697b      	ldr	r3, [r7, #20]
 801b9a8:	889b      	ldrh	r3, [r3, #4]
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d12a      	bne.n	801ba06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b9b6:	697b      	ldr	r3, [r7, #20]
 801b9b8:	681a      	ldr	r2, [r3, #0]
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b9be:	69bb      	ldr	r3, [r7, #24]
 801b9c0:	6858      	ldr	r0, [r3, #4]
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	3308      	adds	r3, #8
 801b9c6:	2214      	movs	r2, #20
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	f001 ff02 	bl	801d7d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b9ce:	2101      	movs	r1, #1
 801b9d0:	69b8      	ldr	r0, [r7, #24]
 801b9d2:	f7ff fc1f 	bl	801b214 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b9d6:	69b8      	ldr	r0, [r7, #24]
 801b9d8:	f7f6 fb64 	bl	80120a4 <pbuf_clen>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b9e0:	8bfa      	ldrh	r2, [r7, #30]
 801b9e2:	8a7b      	ldrh	r3, [r7, #18]
 801b9e4:	4413      	add	r3, r2
 801b9e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b9ea:	db05      	blt.n	801b9f8 <ip_reass_free_complete_datagram+0x98>
 801b9ec:	4b27      	ldr	r3, [pc, #156]	@ (801ba8c <ip_reass_free_complete_datagram+0x12c>)
 801b9ee:	22bc      	movs	r2, #188	@ 0xbc
 801b9f0:	492a      	ldr	r1, [pc, #168]	@ (801ba9c <ip_reass_free_complete_datagram+0x13c>)
 801b9f2:	4828      	ldr	r0, [pc, #160]	@ (801ba94 <ip_reass_free_complete_datagram+0x134>)
 801b9f4:	f001 fcc6 	bl	801d384 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b9f8:	8bfa      	ldrh	r2, [r7, #30]
 801b9fa:	8a7b      	ldrh	r3, [r7, #18]
 801b9fc:	4413      	add	r3, r2
 801b9fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ba00:	69b8      	ldr	r0, [r7, #24]
 801ba02:	f7f6 fac1 	bl	8011f88 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	685b      	ldr	r3, [r3, #4]
 801ba0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ba0c:	e01f      	b.n	801ba4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ba0e:	69bb      	ldr	r3, [r7, #24]
 801ba10:	685b      	ldr	r3, [r3, #4]
 801ba12:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ba18:	697b      	ldr	r3, [r7, #20]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ba1e:	68f8      	ldr	r0, [r7, #12]
 801ba20:	f7f6 fb40 	bl	80120a4 <pbuf_clen>
 801ba24:	4603      	mov	r3, r0
 801ba26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba28:	8bfa      	ldrh	r2, [r7, #30]
 801ba2a:	8a7b      	ldrh	r3, [r7, #18]
 801ba2c:	4413      	add	r3, r2
 801ba2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba32:	db05      	blt.n	801ba40 <ip_reass_free_complete_datagram+0xe0>
 801ba34:	4b15      	ldr	r3, [pc, #84]	@ (801ba8c <ip_reass_free_complete_datagram+0x12c>)
 801ba36:	22cc      	movs	r2, #204	@ 0xcc
 801ba38:	4918      	ldr	r1, [pc, #96]	@ (801ba9c <ip_reass_free_complete_datagram+0x13c>)
 801ba3a:	4816      	ldr	r0, [pc, #88]	@ (801ba94 <ip_reass_free_complete_datagram+0x134>)
 801ba3c:	f001 fca2 	bl	801d384 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba40:	8bfa      	ldrh	r2, [r7, #30]
 801ba42:	8a7b      	ldrh	r3, [r7, #18]
 801ba44:	4413      	add	r3, r2
 801ba46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ba48:	68f8      	ldr	r0, [r7, #12]
 801ba4a:	f7f6 fa9d 	bl	8011f88 <pbuf_free>
  while (p != NULL) {
 801ba4e:	69bb      	ldr	r3, [r7, #24]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d1dc      	bne.n	801ba0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ba54:	6839      	ldr	r1, [r7, #0]
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f000 f8c2 	bl	801bbe0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ba5c:	4b10      	ldr	r3, [pc, #64]	@ (801baa0 <ip_reass_free_complete_datagram+0x140>)
 801ba5e:	881b      	ldrh	r3, [r3, #0]
 801ba60:	8bfa      	ldrh	r2, [r7, #30]
 801ba62:	429a      	cmp	r2, r3
 801ba64:	d905      	bls.n	801ba72 <ip_reass_free_complete_datagram+0x112>
 801ba66:	4b09      	ldr	r3, [pc, #36]	@ (801ba8c <ip_reass_free_complete_datagram+0x12c>)
 801ba68:	22d2      	movs	r2, #210	@ 0xd2
 801ba6a:	490e      	ldr	r1, [pc, #56]	@ (801baa4 <ip_reass_free_complete_datagram+0x144>)
 801ba6c:	4809      	ldr	r0, [pc, #36]	@ (801ba94 <ip_reass_free_complete_datagram+0x134>)
 801ba6e:	f001 fc89 	bl	801d384 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ba72:	4b0b      	ldr	r3, [pc, #44]	@ (801baa0 <ip_reass_free_complete_datagram+0x140>)
 801ba74:	881a      	ldrh	r2, [r3, #0]
 801ba76:	8bfb      	ldrh	r3, [r7, #30]
 801ba78:	1ad3      	subs	r3, r2, r3
 801ba7a:	b29a      	uxth	r2, r3
 801ba7c:	4b08      	ldr	r3, [pc, #32]	@ (801baa0 <ip_reass_free_complete_datagram+0x140>)
 801ba7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ba80:	8bfb      	ldrh	r3, [r7, #30]
}
 801ba82:	4618      	mov	r0, r3
 801ba84:	3720      	adds	r7, #32
 801ba86:	46bd      	mov	sp, r7
 801ba88:	bd80      	pop	{r7, pc}
 801ba8a:	bf00      	nop
 801ba8c:	08022114 	.word	0x08022114
 801ba90:	08022150 	.word	0x08022150
 801ba94:	0802215c 	.word	0x0802215c
 801ba98:	08022184 	.word	0x08022184
 801ba9c:	08022198 	.word	0x08022198
 801baa0:	2400cdc0 	.word	0x2400cdc0
 801baa4:	080221b8 	.word	0x080221b8

0801baa8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b08a      	sub	sp, #40	@ 0x28
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
 801bab0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bab2:	2300      	movs	r3, #0
 801bab4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bab6:	2300      	movs	r3, #0
 801bab8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801baba:	2300      	movs	r3, #0
 801babc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801babe:	2300      	movs	r3, #0
 801bac0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bac2:	2300      	movs	r3, #0
 801bac4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bac6:	4b28      	ldr	r3, [pc, #160]	@ (801bb68 <ip_reass_remove_oldest_datagram+0xc0>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bacc:	e030      	b.n	801bb30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bad0:	695a      	ldr	r2, [r3, #20]
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	68db      	ldr	r3, [r3, #12]
 801bad6:	429a      	cmp	r2, r3
 801bad8:	d10c      	bne.n	801baf4 <ip_reass_remove_oldest_datagram+0x4c>
 801bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801badc:	699a      	ldr	r2, [r3, #24]
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	691b      	ldr	r3, [r3, #16]
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d106      	bne.n	801baf4 <ip_reass_remove_oldest_datagram+0x4c>
 801bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bae8:	899a      	ldrh	r2, [r3, #12]
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	889b      	ldrh	r3, [r3, #4]
 801baee:	b29b      	uxth	r3, r3
 801baf0:	429a      	cmp	r2, r3
 801baf2:	d014      	beq.n	801bb1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801baf4:	693b      	ldr	r3, [r7, #16]
 801baf6:	3301      	adds	r3, #1
 801baf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bafa:	6a3b      	ldr	r3, [r7, #32]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d104      	bne.n	801bb0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb04:	69fb      	ldr	r3, [r7, #28]
 801bb06:	61bb      	str	r3, [r7, #24]
 801bb08:	e009      	b.n	801bb1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb0c:	7fda      	ldrb	r2, [r3, #31]
 801bb0e:	6a3b      	ldr	r3, [r7, #32]
 801bb10:	7fdb      	ldrb	r3, [r3, #31]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d803      	bhi.n	801bb1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb1a:	69fb      	ldr	r3, [r7, #28]
 801bb1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d001      	beq.n	801bb2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d1cb      	bne.n	801bace <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bb36:	6a3b      	ldr	r3, [r7, #32]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d008      	beq.n	801bb4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bb3c:	69b9      	ldr	r1, [r7, #24]
 801bb3e:	6a38      	ldr	r0, [r7, #32]
 801bb40:	f7ff ff0e 	bl	801b960 <ip_reass_free_complete_datagram>
 801bb44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bb46:	697a      	ldr	r2, [r7, #20]
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	4413      	add	r3, r2
 801bb4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bb4e:	697a      	ldr	r2, [r7, #20]
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	429a      	cmp	r2, r3
 801bb54:	da02      	bge.n	801bb5c <ip_reass_remove_oldest_datagram+0xb4>
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	2b01      	cmp	r3, #1
 801bb5a:	dcac      	bgt.n	801bab6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bb5c:	697b      	ldr	r3, [r7, #20]
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3728      	adds	r7, #40	@ 0x28
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	2400cdbc 	.word	0x2400cdbc

0801bb6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b084      	sub	sp, #16
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bb76:	2004      	movs	r0, #4
 801bb78:	f7f5 fae0 	bl	801113c <memp_malloc>
 801bb7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d110      	bne.n	801bba6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bb84:	6839      	ldr	r1, [r7, #0]
 801bb86:	6878      	ldr	r0, [r7, #4]
 801bb88:	f7ff ff8e 	bl	801baa8 <ip_reass_remove_oldest_datagram>
 801bb8c:	4602      	mov	r2, r0
 801bb8e:	683b      	ldr	r3, [r7, #0]
 801bb90:	4293      	cmp	r3, r2
 801bb92:	dc03      	bgt.n	801bb9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bb94:	2004      	movs	r0, #4
 801bb96:	f7f5 fad1 	bl	801113c <memp_malloc>
 801bb9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d101      	bne.n	801bba6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bba2:	2300      	movs	r3, #0
 801bba4:	e016      	b.n	801bbd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bba6:	2220      	movs	r2, #32
 801bba8:	2100      	movs	r1, #0
 801bbaa:	68f8      	ldr	r0, [r7, #12]
 801bbac:	f001 fd42 	bl	801d634 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	220f      	movs	r2, #15
 801bbb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bbb6:	4b09      	ldr	r3, [pc, #36]	@ (801bbdc <ip_reass_enqueue_new_datagram+0x70>)
 801bbb8:	681a      	ldr	r2, [r3, #0]
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bbbe:	4a07      	ldr	r2, [pc, #28]	@ (801bbdc <ip_reass_enqueue_new_datagram+0x70>)
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	3308      	adds	r3, #8
 801bbc8:	2214      	movs	r2, #20
 801bbca:	6879      	ldr	r1, [r7, #4]
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f001 fe00 	bl	801d7d2 <memcpy>
  return ipr;
 801bbd2:	68fb      	ldr	r3, [r7, #12]
}
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3710      	adds	r7, #16
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	2400cdbc 	.word	0x2400cdbc

0801bbe0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bbe0:	b580      	push	{r7, lr}
 801bbe2:	b082      	sub	sp, #8
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	6078      	str	r0, [r7, #4]
 801bbe8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bbea:	4b10      	ldr	r3, [pc, #64]	@ (801bc2c <ip_reass_dequeue_datagram+0x4c>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	687a      	ldr	r2, [r7, #4]
 801bbf0:	429a      	cmp	r2, r3
 801bbf2:	d104      	bne.n	801bbfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	4a0c      	ldr	r2, [pc, #48]	@ (801bc2c <ip_reass_dequeue_datagram+0x4c>)
 801bbfa:	6013      	str	r3, [r2, #0]
 801bbfc:	e00d      	b.n	801bc1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d106      	bne.n	801bc12 <ip_reass_dequeue_datagram+0x32>
 801bc04:	4b0a      	ldr	r3, [pc, #40]	@ (801bc30 <ip_reass_dequeue_datagram+0x50>)
 801bc06:	f240 1245 	movw	r2, #325	@ 0x145
 801bc0a:	490a      	ldr	r1, [pc, #40]	@ (801bc34 <ip_reass_dequeue_datagram+0x54>)
 801bc0c:	480a      	ldr	r0, [pc, #40]	@ (801bc38 <ip_reass_dequeue_datagram+0x58>)
 801bc0e:	f001 fbb9 	bl	801d384 <iprintf>
    prev->next = ipr->next;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681a      	ldr	r2, [r3, #0]
 801bc16:	683b      	ldr	r3, [r7, #0]
 801bc18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bc1a:	6879      	ldr	r1, [r7, #4]
 801bc1c:	2004      	movs	r0, #4
 801bc1e:	f7f5 fb03 	bl	8011228 <memp_free>
}
 801bc22:	bf00      	nop
 801bc24:	3708      	adds	r7, #8
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}
 801bc2a:	bf00      	nop
 801bc2c:	2400cdbc 	.word	0x2400cdbc
 801bc30:	08022114 	.word	0x08022114
 801bc34:	080221dc 	.word	0x080221dc
 801bc38:	0802215c 	.word	0x0802215c

0801bc3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b08c      	sub	sp, #48	@ 0x30
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	60f8      	str	r0, [r7, #12]
 801bc44:	60b9      	str	r1, [r7, #8]
 801bc46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bc48:	2300      	movs	r3, #0
 801bc4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	685b      	ldr	r3, [r3, #4]
 801bc54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bc56:	69fb      	ldr	r3, [r7, #28]
 801bc58:	885b      	ldrh	r3, [r3, #2]
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f7f4 fcdd 	bl	801061c <lwip_htons>
 801bc62:	4603      	mov	r3, r0
 801bc64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bc66:	69fb      	ldr	r3, [r7, #28]
 801bc68:	781b      	ldrb	r3, [r3, #0]
 801bc6a:	f003 030f 	and.w	r3, r3, #15
 801bc6e:	b2db      	uxtb	r3, r3
 801bc70:	009b      	lsls	r3, r3, #2
 801bc72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bc74:	7e7b      	ldrb	r3, [r7, #25]
 801bc76:	b29b      	uxth	r3, r3
 801bc78:	8b7a      	ldrh	r2, [r7, #26]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	d202      	bcs.n	801bc84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc82:	e135      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bc84:	7e7b      	ldrb	r3, [r7, #25]
 801bc86:	b29b      	uxth	r3, r3
 801bc88:	8b7a      	ldrh	r2, [r7, #26]
 801bc8a:	1ad3      	subs	r3, r2, r3
 801bc8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bc8e:	69fb      	ldr	r3, [r7, #28]
 801bc90:	88db      	ldrh	r3, [r3, #6]
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7f4 fcc1 	bl	801061c <lwip_htons>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	00db      	lsls	r3, r3, #3
 801bca4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	685b      	ldr	r3, [r3, #4]
 801bcaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcae:	2200      	movs	r2, #0
 801bcb0:	701a      	strb	r2, [r3, #0]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	705a      	strb	r2, [r3, #1]
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	709a      	strb	r2, [r3, #2]
 801bcba:	2200      	movs	r2, #0
 801bcbc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcc0:	8afa      	ldrh	r2, [r7, #22]
 801bcc2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bcc4:	8afa      	ldrh	r2, [r7, #22]
 801bcc6:	8b7b      	ldrh	r3, [r7, #26]
 801bcc8:	4413      	add	r3, r2
 801bcca:	b29a      	uxth	r2, r3
 801bccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcd2:	88db      	ldrh	r3, [r3, #6]
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	8afa      	ldrh	r2, [r7, #22]
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	d902      	bls.n	801bce2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 801bce0:	e106      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	685b      	ldr	r3, [r3, #4]
 801bce6:	627b      	str	r3, [r7, #36]	@ 0x24
 801bce8:	e068      	b.n	801bdbc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcec:	685b      	ldr	r3, [r3, #4]
 801bcee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcf2:	889b      	ldrh	r3, [r3, #4]
 801bcf4:	b29a      	uxth	r2, r3
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	889b      	ldrh	r3, [r3, #4]
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	429a      	cmp	r2, r3
 801bcfe:	d235      	bcs.n	801bd6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bd04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d020      	beq.n	801bd4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd0e:	889b      	ldrh	r3, [r3, #4]
 801bd10:	b29a      	uxth	r2, r3
 801bd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd14:	88db      	ldrh	r3, [r3, #6]
 801bd16:	b29b      	uxth	r3, r3
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	d307      	bcc.n	801bd2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd1e:	88db      	ldrh	r3, [r3, #6]
 801bd20:	b29a      	uxth	r2, r3
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	889b      	ldrh	r3, [r3, #4]
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	429a      	cmp	r2, r3
 801bd2a:	d902      	bls.n	801bd32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd2c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd30:	e0de      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd34:	68ba      	ldr	r2, [r7, #8]
 801bd36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd3a:	88db      	ldrh	r3, [r3, #6]
 801bd3c:	b29a      	uxth	r2, r3
 801bd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd40:	889b      	ldrh	r3, [r3, #4]
 801bd42:	b29b      	uxth	r3, r3
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d03d      	beq.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bd48:	2300      	movs	r3, #0
 801bd4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bd4c:	e03a      	b.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd50:	88db      	ldrh	r3, [r3, #6]
 801bd52:	b29a      	uxth	r2, r3
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	889b      	ldrh	r3, [r3, #4]
 801bd58:	b29b      	uxth	r3, r3
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d902      	bls.n	801bd64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 801bd62:	e0c5      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	68ba      	ldr	r2, [r7, #8]
 801bd68:	605a      	str	r2, [r3, #4]
      break;
 801bd6a:	e02b      	b.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6e:	889b      	ldrh	r3, [r3, #4]
 801bd70:	b29a      	uxth	r2, r3
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	889b      	ldrh	r3, [r3, #4]
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	429a      	cmp	r2, r3
 801bd7a:	d102      	bne.n	801bd82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd7c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd80:	e0b6      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd84:	889b      	ldrh	r3, [r3, #4]
 801bd86:	b29a      	uxth	r2, r3
 801bd88:	693b      	ldr	r3, [r7, #16]
 801bd8a:	88db      	ldrh	r3, [r3, #6]
 801bd8c:	b29b      	uxth	r3, r3
 801bd8e:	429a      	cmp	r2, r3
 801bd90:	d202      	bcs.n	801bd98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd92:	f04f 33ff 	mov.w	r3, #4294967295
 801bd96:	e0ab      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d009      	beq.n	801bdb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bda0:	88db      	ldrh	r3, [r3, #6]
 801bda2:	b29a      	uxth	r2, r3
 801bda4:	693b      	ldr	r3, [r7, #16]
 801bda6:	889b      	ldrh	r3, [r3, #4]
 801bda8:	b29b      	uxth	r3, r3
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d001      	beq.n	801bdb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bdae:	2300      	movs	r3, #0
 801bdb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bdb2:	693b      	ldr	r3, [r7, #16]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801bdb8:	693b      	ldr	r3, [r7, #16]
 801bdba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801bdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d193      	bne.n	801bcea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bdc2:	e000      	b.n	801bdc6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bdc4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d12d      	bne.n	801be28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d01c      	beq.n	801be0c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdd4:	88db      	ldrh	r3, [r3, #6]
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdda:	889b      	ldrh	r3, [r3, #4]
 801bddc:	b29b      	uxth	r3, r3
 801bdde:	429a      	cmp	r2, r3
 801bde0:	d906      	bls.n	801bdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bde2:	4b45      	ldr	r3, [pc, #276]	@ (801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bde4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bde8:	4944      	ldr	r1, [pc, #272]	@ (801befc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bdea:	4845      	ldr	r0, [pc, #276]	@ (801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bdec:	f001 faca 	bl	801d384 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdf2:	68ba      	ldr	r2, [r7, #8]
 801bdf4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdf8:	88db      	ldrh	r3, [r3, #6]
 801bdfa:	b29a      	uxth	r2, r3
 801bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdfe:	889b      	ldrh	r3, [r3, #4]
 801be00:	b29b      	uxth	r3, r3
 801be02:	429a      	cmp	r2, r3
 801be04:	d010      	beq.n	801be28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801be06:	2300      	movs	r3, #0
 801be08:	623b      	str	r3, [r7, #32]
 801be0a:	e00d      	b.n	801be28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d006      	beq.n	801be22 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801be14:	4b38      	ldr	r3, [pc, #224]	@ (801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be16:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801be1a:	493a      	ldr	r1, [pc, #232]	@ (801bf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801be1c:	4838      	ldr	r0, [pc, #224]	@ (801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be1e:	f001 fab1 	bl	801d384 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	68ba      	ldr	r2, [r7, #8]
 801be26:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d105      	bne.n	801be3a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	7f9b      	ldrb	r3, [r3, #30]
 801be32:	f003 0301 	and.w	r3, r3, #1
 801be36:	2b00      	cmp	r3, #0
 801be38:	d059      	beq.n	801beee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801be3a:	6a3b      	ldr	r3, [r7, #32]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d04f      	beq.n	801bee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	685b      	ldr	r3, [r3, #4]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d006      	beq.n	801be56 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	685b      	ldr	r3, [r3, #4]
 801be4e:	889b      	ldrh	r3, [r3, #4]
 801be50:	b29b      	uxth	r3, r3
 801be52:	2b00      	cmp	r3, #0
 801be54:	d002      	beq.n	801be5c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801be56:	2300      	movs	r3, #0
 801be58:	623b      	str	r3, [r7, #32]
 801be5a:	e041      	b.n	801bee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801be5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801be66:	e012      	b.n	801be8e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801be68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be6a:	685b      	ldr	r3, [r3, #4]
 801be6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be70:	88db      	ldrh	r3, [r3, #6]
 801be72:	b29a      	uxth	r2, r3
 801be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be76:	889b      	ldrh	r3, [r3, #4]
 801be78:	b29b      	uxth	r3, r3
 801be7a:	429a      	cmp	r2, r3
 801be7c:	d002      	beq.n	801be84 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801be7e:	2300      	movs	r3, #0
 801be80:	623b      	str	r3, [r7, #32]
            break;
 801be82:	e007      	b.n	801be94 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be86:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801be8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1e9      	bne.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801be94:	6a3b      	ldr	r3, [r7, #32]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d022      	beq.n	801bee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d106      	bne.n	801beb0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bea2:	4b15      	ldr	r3, [pc, #84]	@ (801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bea4:	f240 12df 	movw	r2, #479	@ 0x1df
 801bea8:	4917      	ldr	r1, [pc, #92]	@ (801bf08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801beaa:	4815      	ldr	r0, [pc, #84]	@ (801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801beac:	f001 fa6a 	bl	801d384 <iprintf>
          LWIP_ASSERT("sanity check",
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	685b      	ldr	r3, [r3, #4]
 801beb4:	685b      	ldr	r3, [r3, #4]
 801beb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801beb8:	429a      	cmp	r2, r3
 801beba:	d106      	bne.n	801beca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bebc:	4b0e      	ldr	r3, [pc, #56]	@ (801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bebe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bec2:	4911      	ldr	r1, [pc, #68]	@ (801bf08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bec4:	480e      	ldr	r0, [pc, #56]	@ (801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bec6:	f001 fa5d 	bl	801d384 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801beca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d006      	beq.n	801bee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bed2:	4b09      	ldr	r3, [pc, #36]	@ (801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bed4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bed8:	490c      	ldr	r1, [pc, #48]	@ (801bf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801beda:	4809      	ldr	r0, [pc, #36]	@ (801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bedc:	f001 fa52 	bl	801d384 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bee0:	6a3b      	ldr	r3, [r7, #32]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	bf14      	ite	ne
 801bee6:	2301      	movne	r3, #1
 801bee8:	2300      	moveq	r3, #0
 801beea:	b2db      	uxtb	r3, r3
 801beec:	e000      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801beee:	2300      	movs	r3, #0
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	3730      	adds	r7, #48	@ 0x30
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}
 801bef8:	08022114 	.word	0x08022114
 801befc:	080221f8 	.word	0x080221f8
 801bf00:	0802215c 	.word	0x0802215c
 801bf04:	08022218 	.word	0x08022218
 801bf08:	08022250 	.word	0x08022250
 801bf0c:	08022260 	.word	0x08022260

0801bf10 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b08e      	sub	sp, #56	@ 0x38
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	685b      	ldr	r3, [r3, #4]
 801bf1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf20:	781b      	ldrb	r3, [r3, #0]
 801bf22:	f003 030f 	and.w	r3, r3, #15
 801bf26:	b2db      	uxtb	r3, r3
 801bf28:	009b      	lsls	r3, r3, #2
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	2b14      	cmp	r3, #20
 801bf2e:	f040 8171 	bne.w	801c214 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf34:	88db      	ldrh	r3, [r3, #6]
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7f4 fb6f 	bl	801061c <lwip_htons>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf44:	b29b      	uxth	r3, r3
 801bf46:	00db      	lsls	r3, r3, #3
 801bf48:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf4c:	885b      	ldrh	r3, [r3, #2]
 801bf4e:	b29b      	uxth	r3, r3
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7f4 fb63 	bl	801061c <lwip_htons>
 801bf56:	4603      	mov	r3, r0
 801bf58:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf5c:	781b      	ldrb	r3, [r3, #0]
 801bf5e:	f003 030f 	and.w	r3, r3, #15
 801bf62:	b2db      	uxtb	r3, r3
 801bf64:	009b      	lsls	r3, r3, #2
 801bf66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801bf6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bf6e:	b29b      	uxth	r3, r3
 801bf70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bf72:	429a      	cmp	r2, r3
 801bf74:	f0c0 8150 	bcc.w	801c218 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bf78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bf7c:	b29b      	uxth	r3, r3
 801bf7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bf80:	1ad3      	subs	r3, r2, r3
 801bf82:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bf84:	6878      	ldr	r0, [r7, #4]
 801bf86:	f7f6 f88d 	bl	80120a4 <pbuf_clen>
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bf8e:	4b8c      	ldr	r3, [pc, #560]	@ (801c1c0 <ip4_reass+0x2b0>)
 801bf90:	881b      	ldrh	r3, [r3, #0]
 801bf92:	461a      	mov	r2, r3
 801bf94:	8c3b      	ldrh	r3, [r7, #32]
 801bf96:	4413      	add	r3, r2
 801bf98:	2b0a      	cmp	r3, #10
 801bf9a:	dd10      	ble.n	801bfbe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bf9c:	8c3b      	ldrh	r3, [r7, #32]
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfa2:	f7ff fd81 	bl	801baa8 <ip_reass_remove_oldest_datagram>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	f000 8137 	beq.w	801c21c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bfae:	4b84      	ldr	r3, [pc, #528]	@ (801c1c0 <ip4_reass+0x2b0>)
 801bfb0:	881b      	ldrh	r3, [r3, #0]
 801bfb2:	461a      	mov	r2, r3
 801bfb4:	8c3b      	ldrh	r3, [r7, #32]
 801bfb6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bfb8:	2b0a      	cmp	r3, #10
 801bfba:	f300 812f 	bgt.w	801c21c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bfbe:	4b81      	ldr	r3, [pc, #516]	@ (801c1c4 <ip4_reass+0x2b4>)
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	633b      	str	r3, [r7, #48]	@ 0x30
 801bfc4:	e015      	b.n	801bff2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfc8:	695a      	ldr	r2, [r3, #20]
 801bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfcc:	68db      	ldr	r3, [r3, #12]
 801bfce:	429a      	cmp	r2, r3
 801bfd0:	d10c      	bne.n	801bfec <ip4_reass+0xdc>
 801bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfd4:	699a      	ldr	r2, [r3, #24]
 801bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd8:	691b      	ldr	r3, [r3, #16]
 801bfda:	429a      	cmp	r2, r3
 801bfdc:	d106      	bne.n	801bfec <ip4_reass+0xdc>
 801bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfe0:	899a      	ldrh	r2, [r3, #12]
 801bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfe4:	889b      	ldrh	r3, [r3, #4]
 801bfe6:	b29b      	uxth	r3, r3
 801bfe8:	429a      	cmp	r2, r3
 801bfea:	d006      	beq.n	801bffa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	633b      	str	r3, [r7, #48]	@ 0x30
 801bff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d1e6      	bne.n	801bfc6 <ip4_reass+0xb6>
 801bff8:	e000      	b.n	801bffc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bffa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d109      	bne.n	801c016 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c002:	8c3b      	ldrh	r3, [r7, #32]
 801c004:	4619      	mov	r1, r3
 801c006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c008:	f7ff fdb0 	bl	801bb6c <ip_reass_enqueue_new_datagram>
 801c00c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c010:	2b00      	cmp	r3, #0
 801c012:	d11c      	bne.n	801c04e <ip4_reass+0x13e>
      goto nullreturn;
 801c014:	e105      	b.n	801c222 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c018:	88db      	ldrh	r3, [r3, #6]
 801c01a:	b29b      	uxth	r3, r3
 801c01c:	4618      	mov	r0, r3
 801c01e:	f7f4 fafd 	bl	801061c <lwip_htons>
 801c022:	4603      	mov	r3, r0
 801c024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d110      	bne.n	801c04e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c02e:	89db      	ldrh	r3, [r3, #14]
 801c030:	4618      	mov	r0, r3
 801c032:	f7f4 faf3 	bl	801061c <lwip_htons>
 801c036:	4603      	mov	r3, r0
 801c038:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d006      	beq.n	801c04e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c042:	3308      	adds	r3, #8
 801c044:	2214      	movs	r2, #20
 801c046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c048:	4618      	mov	r0, r3
 801c04a:	f001 fbc2 	bl	801d7d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c050:	88db      	ldrh	r3, [r3, #6]
 801c052:	b29b      	uxth	r3, r3
 801c054:	f003 0320 	and.w	r3, r3, #32
 801c058:	2b00      	cmp	r3, #0
 801c05a:	bf0c      	ite	eq
 801c05c:	2301      	moveq	r3, #1
 801c05e:	2300      	movne	r3, #0
 801c060:	b2db      	uxtb	r3, r3
 801c062:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c064:	69fb      	ldr	r3, [r7, #28]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d00e      	beq.n	801c088 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c06a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c06c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c06e:	4413      	add	r3, r2
 801c070:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c072:	8b7a      	ldrh	r2, [r7, #26]
 801c074:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c076:	429a      	cmp	r2, r3
 801c078:	f0c0 80a0 	bcc.w	801c1bc <ip4_reass+0x2ac>
 801c07c:	8b7b      	ldrh	r3, [r7, #26]
 801c07e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c082:	4293      	cmp	r3, r2
 801c084:	f200 809a 	bhi.w	801c1bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c088:	69fa      	ldr	r2, [r7, #28]
 801c08a:	6879      	ldr	r1, [r7, #4]
 801c08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c08e:	f7ff fdd5 	bl	801bc3c <ip_reass_chain_frag_into_datagram_and_validate>
 801c092:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c094:	697b      	ldr	r3, [r7, #20]
 801c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c09a:	f000 809b 	beq.w	801c1d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c09e:	4b48      	ldr	r3, [pc, #288]	@ (801c1c0 <ip4_reass+0x2b0>)
 801c0a0:	881a      	ldrh	r2, [r3, #0]
 801c0a2:	8c3b      	ldrh	r3, [r7, #32]
 801c0a4:	4413      	add	r3, r2
 801c0a6:	b29a      	uxth	r2, r3
 801c0a8:	4b45      	ldr	r3, [pc, #276]	@ (801c1c0 <ip4_reass+0x2b0>)
 801c0aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c0ac:	69fb      	ldr	r3, [r7, #28]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d00d      	beq.n	801c0ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c0b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c0b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0b6:	4413      	add	r3, r2
 801c0b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0bc:	8a7a      	ldrh	r2, [r7, #18]
 801c0be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0c2:	7f9b      	ldrb	r3, [r3, #30]
 801c0c4:	f043 0301 	orr.w	r3, r3, #1
 801c0c8:	b2da      	uxtb	r2, r3
 801c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	2b01      	cmp	r3, #1
 801c0d2:	d171      	bne.n	801c1b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0d6:	8b9b      	ldrh	r3, [r3, #28]
 801c0d8:	3314      	adds	r3, #20
 801c0da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0de:	685b      	ldr	r3, [r3, #4]
 801c0e0:	685b      	ldr	r3, [r3, #4]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	685b      	ldr	r3, [r3, #4]
 801c0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0f0:	3308      	adds	r3, #8
 801c0f2:	2214      	movs	r2, #20
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c0f8:	f001 fb6b 	bl	801d7d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c0fc:	8a3b      	ldrh	r3, [r7, #16]
 801c0fe:	4618      	mov	r0, r3
 801c100:	f7f4 fa8c 	bl	801061c <lwip_htons>
 801c104:	4603      	mov	r3, r0
 801c106:	461a      	mov	r2, r3
 801c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c10a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c10e:	2200      	movs	r2, #0
 801c110:	719a      	strb	r2, [r3, #6]
 801c112:	2200      	movs	r2, #0
 801c114:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c118:	2200      	movs	r2, #0
 801c11a:	729a      	strb	r2, [r3, #10]
 801c11c:	2200      	movs	r2, #0
 801c11e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c122:	685b      	ldr	r3, [r3, #4]
 801c124:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c126:	e00d      	b.n	801c144 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c12e:	2114      	movs	r1, #20
 801c130:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c132:	f7f5 fea3 	bl	8011e7c <pbuf_remove_header>
      pbuf_cat(p, r);
 801c136:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c138:	6878      	ldr	r0, [r7, #4]
 801c13a:	f7f5 fff3 	bl	8012124 <pbuf_cat>
      r = iprh->next_pbuf;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c146:	2b00      	cmp	r3, #0
 801c148:	d1ee      	bne.n	801c128 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c14a:	4b1e      	ldr	r3, [pc, #120]	@ (801c1c4 <ip4_reass+0x2b4>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c150:	429a      	cmp	r2, r3
 801c152:	d102      	bne.n	801c15a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c154:	2300      	movs	r3, #0
 801c156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c158:	e010      	b.n	801c17c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c15a:	4b1a      	ldr	r3, [pc, #104]	@ (801c1c4 <ip4_reass+0x2b4>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c160:	e007      	b.n	801c172 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c168:	429a      	cmp	r2, r3
 801c16a:	d006      	beq.n	801c17a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c174:	2b00      	cmp	r3, #0
 801c176:	d1f4      	bne.n	801c162 <ip4_reass+0x252>
 801c178:	e000      	b.n	801c17c <ip4_reass+0x26c>
          break;
 801c17a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c17c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c17e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c180:	f7ff fd2e 	bl	801bbe0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c184:	6878      	ldr	r0, [r7, #4]
 801c186:	f7f5 ff8d 	bl	80120a4 <pbuf_clen>
 801c18a:	4603      	mov	r3, r0
 801c18c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c18e:	4b0c      	ldr	r3, [pc, #48]	@ (801c1c0 <ip4_reass+0x2b0>)
 801c190:	881b      	ldrh	r3, [r3, #0]
 801c192:	8c3a      	ldrh	r2, [r7, #32]
 801c194:	429a      	cmp	r2, r3
 801c196:	d906      	bls.n	801c1a6 <ip4_reass+0x296>
 801c198:	4b0b      	ldr	r3, [pc, #44]	@ (801c1c8 <ip4_reass+0x2b8>)
 801c19a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c19e:	490b      	ldr	r1, [pc, #44]	@ (801c1cc <ip4_reass+0x2bc>)
 801c1a0:	480b      	ldr	r0, [pc, #44]	@ (801c1d0 <ip4_reass+0x2c0>)
 801c1a2:	f001 f8ef 	bl	801d384 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c1a6:	4b06      	ldr	r3, [pc, #24]	@ (801c1c0 <ip4_reass+0x2b0>)
 801c1a8:	881a      	ldrh	r2, [r3, #0]
 801c1aa:	8c3b      	ldrh	r3, [r7, #32]
 801c1ac:	1ad3      	subs	r3, r2, r3
 801c1ae:	b29a      	uxth	r2, r3
 801c1b0:	4b03      	ldr	r3, [pc, #12]	@ (801c1c0 <ip4_reass+0x2b0>)
 801c1b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	e038      	b.n	801c22a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	e036      	b.n	801c22a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c1bc:	bf00      	nop
 801c1be:	e00a      	b.n	801c1d6 <ip4_reass+0x2c6>
 801c1c0:	2400cdc0 	.word	0x2400cdc0
 801c1c4:	2400cdbc 	.word	0x2400cdbc
 801c1c8:	08022114 	.word	0x08022114
 801c1cc:	08022284 	.word	0x08022284
 801c1d0:	0802215c 	.word	0x0802215c
    goto nullreturn_ipr;
 801c1d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d106      	bne.n	801c1ea <ip4_reass+0x2da>
 801c1dc:	4b15      	ldr	r3, [pc, #84]	@ (801c234 <ip4_reass+0x324>)
 801c1de:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c1e2:	4915      	ldr	r1, [pc, #84]	@ (801c238 <ip4_reass+0x328>)
 801c1e4:	4815      	ldr	r0, [pc, #84]	@ (801c23c <ip4_reass+0x32c>)
 801c1e6:	f001 f8cd 	bl	801d384 <iprintf>
  if (ipr->p == NULL) {
 801c1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1ec:	685b      	ldr	r3, [r3, #4]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d116      	bne.n	801c220 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c1f2:	4b13      	ldr	r3, [pc, #76]	@ (801c240 <ip4_reass+0x330>)
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	d006      	beq.n	801c20a <ip4_reass+0x2fa>
 801c1fc:	4b0d      	ldr	r3, [pc, #52]	@ (801c234 <ip4_reass+0x324>)
 801c1fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c202:	4910      	ldr	r1, [pc, #64]	@ (801c244 <ip4_reass+0x334>)
 801c204:	480d      	ldr	r0, [pc, #52]	@ (801c23c <ip4_reass+0x32c>)
 801c206:	f001 f8bd 	bl	801d384 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c20a:	2100      	movs	r1, #0
 801c20c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c20e:	f7ff fce7 	bl	801bbe0 <ip_reass_dequeue_datagram>
 801c212:	e006      	b.n	801c222 <ip4_reass+0x312>
    goto nullreturn;
 801c214:	bf00      	nop
 801c216:	e004      	b.n	801c222 <ip4_reass+0x312>
    goto nullreturn;
 801c218:	bf00      	nop
 801c21a:	e002      	b.n	801c222 <ip4_reass+0x312>
      goto nullreturn;
 801c21c:	bf00      	nop
 801c21e:	e000      	b.n	801c222 <ip4_reass+0x312>
  }

nullreturn:
 801c220:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c222:	6878      	ldr	r0, [r7, #4]
 801c224:	f7f5 feb0 	bl	8011f88 <pbuf_free>
  return NULL;
 801c228:	2300      	movs	r3, #0
}
 801c22a:	4618      	mov	r0, r3
 801c22c:	3738      	adds	r7, #56	@ 0x38
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}
 801c232:	bf00      	nop
 801c234:	08022114 	.word	0x08022114
 801c238:	080222a0 	.word	0x080222a0
 801c23c:	0802215c 	.word	0x0802215c
 801c240:	2400cdbc 	.word	0x2400cdbc
 801c244:	080222ac 	.word	0x080222ac

0801c248 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c24c:	2005      	movs	r0, #5
 801c24e:	f7f4 ff75 	bl	801113c <memp_malloc>
 801c252:	4603      	mov	r3, r0
}
 801c254:	4618      	mov	r0, r3
 801c256:	bd80      	pop	{r7, pc}

0801c258 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b082      	sub	sp, #8
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d106      	bne.n	801c274 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c266:	4b07      	ldr	r3, [pc, #28]	@ (801c284 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c268:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c26c:	4906      	ldr	r1, [pc, #24]	@ (801c288 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c26e:	4807      	ldr	r0, [pc, #28]	@ (801c28c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c270:	f001 f888 	bl	801d384 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c274:	6879      	ldr	r1, [r7, #4]
 801c276:	2005      	movs	r0, #5
 801c278:	f7f4 ffd6 	bl	8011228 <memp_free>
}
 801c27c:	bf00      	nop
 801c27e:	3708      	adds	r7, #8
 801c280:	46bd      	mov	sp, r7
 801c282:	bd80      	pop	{r7, pc}
 801c284:	08022114 	.word	0x08022114
 801c288:	080222cc 	.word	0x080222cc
 801c28c:	0802215c 	.word	0x0802215c

0801c290 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b084      	sub	sp, #16
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d106      	bne.n	801c2b0 <ipfrag_free_pbuf_custom+0x20>
 801c2a2:	4b11      	ldr	r3, [pc, #68]	@ (801c2e8 <ipfrag_free_pbuf_custom+0x58>)
 801c2a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c2a8:	4910      	ldr	r1, [pc, #64]	@ (801c2ec <ipfrag_free_pbuf_custom+0x5c>)
 801c2aa:	4811      	ldr	r0, [pc, #68]	@ (801c2f0 <ipfrag_free_pbuf_custom+0x60>)
 801c2ac:	f001 f86a 	bl	801d384 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c2b0:	68fa      	ldr	r2, [r7, #12]
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	429a      	cmp	r2, r3
 801c2b6:	d006      	beq.n	801c2c6 <ipfrag_free_pbuf_custom+0x36>
 801c2b8:	4b0b      	ldr	r3, [pc, #44]	@ (801c2e8 <ipfrag_free_pbuf_custom+0x58>)
 801c2ba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c2be:	490d      	ldr	r1, [pc, #52]	@ (801c2f4 <ipfrag_free_pbuf_custom+0x64>)
 801c2c0:	480b      	ldr	r0, [pc, #44]	@ (801c2f0 <ipfrag_free_pbuf_custom+0x60>)
 801c2c2:	f001 f85f 	bl	801d384 <iprintf>
  if (pcr->original != NULL) {
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	695b      	ldr	r3, [r3, #20]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d004      	beq.n	801c2d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	695b      	ldr	r3, [r3, #20]
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	f7f5 fe58 	bl	8011f88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c2d8:	68f8      	ldr	r0, [r7, #12]
 801c2da:	f7ff ffbd 	bl	801c258 <ip_frag_free_pbuf_custom_ref>
}
 801c2de:	bf00      	nop
 801c2e0:	3710      	adds	r7, #16
 801c2e2:	46bd      	mov	sp, r7
 801c2e4:	bd80      	pop	{r7, pc}
 801c2e6:	bf00      	nop
 801c2e8:	08022114 	.word	0x08022114
 801c2ec:	080222d8 	.word	0x080222d8
 801c2f0:	0802215c 	.word	0x0802215c
 801c2f4:	080222e4 	.word	0x080222e4

0801c2f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b094      	sub	sp, #80	@ 0x50
 801c2fc:	af02      	add	r7, sp, #8
 801c2fe:	60f8      	str	r0, [r7, #12]
 801c300:	60b9      	str	r1, [r7, #8]
 801c302:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c304:	2300      	movs	r3, #0
 801c306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c30e:	3b14      	subs	r3, #20
 801c310:	2b00      	cmp	r3, #0
 801c312:	da00      	bge.n	801c316 <ip4_frag+0x1e>
 801c314:	3307      	adds	r3, #7
 801c316:	10db      	asrs	r3, r3, #3
 801c318:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c31a:	2314      	movs	r3, #20
 801c31c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	685b      	ldr	r3, [r3, #4]
 801c322:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c326:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c32a:	781b      	ldrb	r3, [r3, #0]
 801c32c:	f003 030f 	and.w	r3, r3, #15
 801c330:	b2db      	uxtb	r3, r3
 801c332:	009b      	lsls	r3, r3, #2
 801c334:	b2db      	uxtb	r3, r3
 801c336:	2b14      	cmp	r3, #20
 801c338:	d002      	beq.n	801c340 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c33a:	f06f 0305 	mvn.w	r3, #5
 801c33e:	e110      	b.n	801c562 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	895b      	ldrh	r3, [r3, #10]
 801c344:	2b13      	cmp	r3, #19
 801c346:	d809      	bhi.n	801c35c <ip4_frag+0x64>
 801c348:	4b88      	ldr	r3, [pc, #544]	@ (801c56c <ip4_frag+0x274>)
 801c34a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c34e:	4988      	ldr	r1, [pc, #544]	@ (801c570 <ip4_frag+0x278>)
 801c350:	4888      	ldr	r0, [pc, #544]	@ (801c574 <ip4_frag+0x27c>)
 801c352:	f001 f817 	bl	801d384 <iprintf>
 801c356:	f06f 0305 	mvn.w	r3, #5
 801c35a:	e102      	b.n	801c562 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c35e:	88db      	ldrh	r3, [r3, #6]
 801c360:	b29b      	uxth	r3, r3
 801c362:	4618      	mov	r0, r3
 801c364:	f7f4 f95a 	bl	801061c <lwip_htons>
 801c368:	4603      	mov	r3, r0
 801c36a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c36c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c36e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c372:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c376:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c37c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	891b      	ldrh	r3, [r3, #8]
 801c382:	3b14      	subs	r3, #20
 801c384:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c388:	e0e1      	b.n	801c54e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c38a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c38c:	00db      	lsls	r3, r3, #3
 801c38e:	b29b      	uxth	r3, r3
 801c390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c394:	4293      	cmp	r3, r2
 801c396:	bf28      	it	cs
 801c398:	4613      	movcs	r3, r2
 801c39a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c39c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c3a0:	2114      	movs	r1, #20
 801c3a2:	200e      	movs	r0, #14
 801c3a4:	f7f5 fb0c 	bl	80119c0 <pbuf_alloc>
 801c3a8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	f000 80d5 	beq.w	801c55c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3b4:	895b      	ldrh	r3, [r3, #10]
 801c3b6:	2b13      	cmp	r3, #19
 801c3b8:	d806      	bhi.n	801c3c8 <ip4_frag+0xd0>
 801c3ba:	4b6c      	ldr	r3, [pc, #432]	@ (801c56c <ip4_frag+0x274>)
 801c3bc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c3c0:	496d      	ldr	r1, [pc, #436]	@ (801c578 <ip4_frag+0x280>)
 801c3c2:	486c      	ldr	r0, [pc, #432]	@ (801c574 <ip4_frag+0x27c>)
 801c3c4:	f000 ffde 	bl	801d384 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ca:	685b      	ldr	r3, [r3, #4]
 801c3cc:	2214      	movs	r2, #20
 801c3ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f001 f9fe 	bl	801d7d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3d8:	685b      	ldr	r3, [r3, #4]
 801c3da:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c3dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c3de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c3e2:	e064      	b.n	801c4ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	895a      	ldrh	r2, [r3, #10]
 801c3e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c3ea:	1ad3      	subs	r3, r2, r3
 801c3ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	895b      	ldrh	r3, [r3, #10]
 801c3f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c3f4:	429a      	cmp	r2, r3
 801c3f6:	d906      	bls.n	801c406 <ip4_frag+0x10e>
 801c3f8:	4b5c      	ldr	r3, [pc, #368]	@ (801c56c <ip4_frag+0x274>)
 801c3fa:	f240 322d 	movw	r2, #813	@ 0x32d
 801c3fe:	495f      	ldr	r1, [pc, #380]	@ (801c57c <ip4_frag+0x284>)
 801c400:	485c      	ldr	r0, [pc, #368]	@ (801c574 <ip4_frag+0x27c>)
 801c402:	f000 ffbf 	bl	801d384 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c406:	8bfa      	ldrh	r2, [r7, #30]
 801c408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c40c:	4293      	cmp	r3, r2
 801c40e:	bf28      	it	cs
 801c410:	4613      	movcs	r3, r2
 801c412:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c416:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d105      	bne.n	801c42a <ip4_frag+0x132>
        poff = 0;
 801c41e:	2300      	movs	r3, #0
 801c420:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	60fb      	str	r3, [r7, #12]
        continue;
 801c428:	e041      	b.n	801c4ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c42a:	f7ff ff0d 	bl	801c248 <ip_frag_alloc_pbuf_custom_ref>
 801c42e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c430:	69bb      	ldr	r3, [r7, #24]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d103      	bne.n	801c43e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c436:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c438:	f7f5 fda6 	bl	8011f88 <pbuf_free>
        goto memerr;
 801c43c:	e08f      	b.n	801c55e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c43e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c444:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c446:	4413      	add	r3, r2
 801c448:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c44c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c450:	9201      	str	r2, [sp, #4]
 801c452:	9300      	str	r3, [sp, #0]
 801c454:	4603      	mov	r3, r0
 801c456:	2241      	movs	r2, #65	@ 0x41
 801c458:	2000      	movs	r0, #0
 801c45a:	f7f5 fbdb 	bl	8011c14 <pbuf_alloced_custom>
 801c45e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c460:	697b      	ldr	r3, [r7, #20]
 801c462:	2b00      	cmp	r3, #0
 801c464:	d106      	bne.n	801c474 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c466:	69b8      	ldr	r0, [r7, #24]
 801c468:	f7ff fef6 	bl	801c258 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c46c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c46e:	f7f5 fd8b 	bl	8011f88 <pbuf_free>
        goto memerr;
 801c472:	e074      	b.n	801c55e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c474:	68f8      	ldr	r0, [r7, #12]
 801c476:	f7f5 fe2d 	bl	80120d4 <pbuf_ref>
      pcr->original = p;
 801c47a:	69bb      	ldr	r3, [r7, #24]
 801c47c:	68fa      	ldr	r2, [r7, #12]
 801c47e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c480:	69bb      	ldr	r3, [r7, #24]
 801c482:	4a3f      	ldr	r2, [pc, #252]	@ (801c580 <ip4_frag+0x288>)
 801c484:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c486:	6979      	ldr	r1, [r7, #20]
 801c488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c48a:	f7f5 fe4b 	bl	8012124 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c48e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c496:	1ad3      	subs	r3, r2, r3
 801c498:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c49c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d004      	beq.n	801c4ae <ip4_frag+0x1b6>
        poff = 0;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c4ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d196      	bne.n	801c3e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c4b6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c4b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4bc:	4413      	add	r3, r2
 801c4be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c4c0:	68bb      	ldr	r3, [r7, #8]
 801c4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c4c4:	f1a3 0213 	sub.w	r2, r3, #19
 801c4c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c4cc:	429a      	cmp	r2, r3
 801c4ce:	bfcc      	ite	gt
 801c4d0:	2301      	movgt	r3, #1
 801c4d2:	2300      	movle	r3, #0
 801c4d4:	b2db      	uxtb	r3, r3
 801c4d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c4d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c4e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c4e2:	6a3b      	ldr	r3, [r7, #32]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d002      	beq.n	801c4ee <ip4_frag+0x1f6>
 801c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d003      	beq.n	801c4f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c4ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c4f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c4f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c4f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	f7f4 f88f 	bl	801061c <lwip_htons>
 801c4fe:	4603      	mov	r3, r0
 801c500:	461a      	mov	r2, r3
 801c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c504:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c506:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c508:	3314      	adds	r3, #20
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	4618      	mov	r0, r3
 801c50e:	f7f4 f885 	bl	801061c <lwip_htons>
 801c512:	4603      	mov	r3, r0
 801c514:	461a      	mov	r2, r3
 801c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c518:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c51c:	2200      	movs	r2, #0
 801c51e:	729a      	strb	r2, [r3, #10]
 801c520:	2200      	movs	r2, #0
 801c522:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	695b      	ldr	r3, [r3, #20]
 801c528:	687a      	ldr	r2, [r7, #4]
 801c52a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c52c:	68b8      	ldr	r0, [r7, #8]
 801c52e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c532:	f7f5 fd29 	bl	8011f88 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c53a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c53c:	1ad3      	subs	r3, r2, r3
 801c53e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c542:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c546:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c548:	4413      	add	r3, r2
 801c54a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c54e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c552:	2b00      	cmp	r3, #0
 801c554:	f47f af19 	bne.w	801c38a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c558:	2300      	movs	r3, #0
 801c55a:	e002      	b.n	801c562 <ip4_frag+0x26a>
      goto memerr;
 801c55c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c55e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c562:	4618      	mov	r0, r3
 801c564:	3748      	adds	r7, #72	@ 0x48
 801c566:	46bd      	mov	sp, r7
 801c568:	bd80      	pop	{r7, pc}
 801c56a:	bf00      	nop
 801c56c:	08022114 	.word	0x08022114
 801c570:	080222f0 	.word	0x080222f0
 801c574:	0802215c 	.word	0x0802215c
 801c578:	0802230c 	.word	0x0802230c
 801c57c:	0802232c 	.word	0x0802232c
 801c580:	0801c291 	.word	0x0801c291

0801c584 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b086      	sub	sp, #24
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
 801c58c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c58e:	230e      	movs	r3, #14
 801c590:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	895b      	ldrh	r3, [r3, #10]
 801c596:	2b0e      	cmp	r3, #14
 801c598:	d96e      	bls.n	801c678 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	7bdb      	ldrb	r3, [r3, #15]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d106      	bne.n	801c5b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c5a2:	683b      	ldr	r3, [r7, #0]
 801c5a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c5a8:	3301      	adds	r3, #1
 801c5aa:	b2da      	uxtb	r2, r3
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	685b      	ldr	r3, [r3, #4]
 801c5b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c5b6:	693b      	ldr	r3, [r7, #16]
 801c5b8:	7b1a      	ldrb	r2, [r3, #12]
 801c5ba:	7b5b      	ldrb	r3, [r3, #13]
 801c5bc:	021b      	lsls	r3, r3, #8
 801c5be:	4313      	orrs	r3, r2
 801c5c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c5c2:	693b      	ldr	r3, [r7, #16]
 801c5c4:	781b      	ldrb	r3, [r3, #0]
 801c5c6:	f003 0301 	and.w	r3, r3, #1
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d023      	beq.n	801c616 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	781b      	ldrb	r3, [r3, #0]
 801c5d2:	2b01      	cmp	r3, #1
 801c5d4:	d10f      	bne.n	801c5f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c5d6:	693b      	ldr	r3, [r7, #16]
 801c5d8:	785b      	ldrb	r3, [r3, #1]
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d11b      	bne.n	801c616 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c5e2:	2b5e      	cmp	r3, #94	@ 0x5e
 801c5e4:	d117      	bne.n	801c616 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	7b5b      	ldrb	r3, [r3, #13]
 801c5ea:	f043 0310 	orr.w	r3, r3, #16
 801c5ee:	b2da      	uxtb	r2, r3
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	735a      	strb	r2, [r3, #13]
 801c5f4:	e00f      	b.n	801c616 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c5f6:	693b      	ldr	r3, [r7, #16]
 801c5f8:	2206      	movs	r2, #6
 801c5fa:	4928      	ldr	r1, [pc, #160]	@ (801c69c <ethernet_input+0x118>)
 801c5fc:	4618      	mov	r0, r3
 801c5fe:	f001 f809 	bl	801d614 <memcmp>
 801c602:	4603      	mov	r3, r0
 801c604:	2b00      	cmp	r3, #0
 801c606:	d106      	bne.n	801c616 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	7b5b      	ldrb	r3, [r3, #13]
 801c60c:	f043 0308 	orr.w	r3, r3, #8
 801c610:	b2da      	uxtb	r2, r3
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c616:	89fb      	ldrh	r3, [r7, #14]
 801c618:	2b08      	cmp	r3, #8
 801c61a:	d003      	beq.n	801c624 <ethernet_input+0xa0>
 801c61c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c620:	d014      	beq.n	801c64c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c622:	e032      	b.n	801c68a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c624:	683b      	ldr	r3, [r7, #0]
 801c626:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c62a:	f003 0308 	and.w	r3, r3, #8
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d024      	beq.n	801c67c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c632:	8afb      	ldrh	r3, [r7, #22]
 801c634:	4619      	mov	r1, r3
 801c636:	6878      	ldr	r0, [r7, #4]
 801c638:	f7f5 fc20 	bl	8011e7c <pbuf_remove_header>
 801c63c:	4603      	mov	r3, r0
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d11e      	bne.n	801c680 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c642:	6839      	ldr	r1, [r7, #0]
 801c644:	6878      	ldr	r0, [r7, #4]
 801c646:	f7fe ff03 	bl	801b450 <ip4_input>
      break;
 801c64a:	e013      	b.n	801c674 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c64c:	683b      	ldr	r3, [r7, #0]
 801c64e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c652:	f003 0308 	and.w	r3, r3, #8
 801c656:	2b00      	cmp	r3, #0
 801c658:	d014      	beq.n	801c684 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c65a:	8afb      	ldrh	r3, [r7, #22]
 801c65c:	4619      	mov	r1, r3
 801c65e:	6878      	ldr	r0, [r7, #4]
 801c660:	f7f5 fc0c 	bl	8011e7c <pbuf_remove_header>
 801c664:	4603      	mov	r3, r0
 801c666:	2b00      	cmp	r3, #0
 801c668:	d10e      	bne.n	801c688 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c66a:	6839      	ldr	r1, [r7, #0]
 801c66c:	6878      	ldr	r0, [r7, #4]
 801c66e:	f7fe f879 	bl	801a764 <etharp_input>
      break;
 801c672:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c674:	2300      	movs	r3, #0
 801c676:	e00c      	b.n	801c692 <ethernet_input+0x10e>
    goto free_and_return;
 801c678:	bf00      	nop
 801c67a:	e006      	b.n	801c68a <ethernet_input+0x106>
        goto free_and_return;
 801c67c:	bf00      	nop
 801c67e:	e004      	b.n	801c68a <ethernet_input+0x106>
        goto free_and_return;
 801c680:	bf00      	nop
 801c682:	e002      	b.n	801c68a <ethernet_input+0x106>
        goto free_and_return;
 801c684:	bf00      	nop
 801c686:	e000      	b.n	801c68a <ethernet_input+0x106>
        goto free_and_return;
 801c688:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c68a:	6878      	ldr	r0, [r7, #4]
 801c68c:	f7f5 fc7c 	bl	8011f88 <pbuf_free>
  return ERR_OK;
 801c690:	2300      	movs	r3, #0
}
 801c692:	4618      	mov	r0, r3
 801c694:	3718      	adds	r7, #24
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}
 801c69a:	bf00      	nop
 801c69c:	080225c8 	.word	0x080225c8

0801c6a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b086      	sub	sp, #24
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	60f8      	str	r0, [r7, #12]
 801c6a8:	60b9      	str	r1, [r7, #8]
 801c6aa:	607a      	str	r2, [r7, #4]
 801c6ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c6ae:	8c3b      	ldrh	r3, [r7, #32]
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f7f3 ffb3 	bl	801061c <lwip_htons>
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c6ba:	210e      	movs	r1, #14
 801c6bc:	68b8      	ldr	r0, [r7, #8]
 801c6be:	f7f5 fbcd 	bl	8011e5c <pbuf_add_header>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d125      	bne.n	801c714 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c6c8:	68bb      	ldr	r3, [r7, #8]
 801c6ca:	685b      	ldr	r3, [r3, #4]
 801c6cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	8afa      	ldrh	r2, [r7, #22]
 801c6d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c6d4:	693b      	ldr	r3, [r7, #16]
 801c6d6:	2206      	movs	r2, #6
 801c6d8:	6839      	ldr	r1, [r7, #0]
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f001 f879 	bl	801d7d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c6e0:	693b      	ldr	r3, [r7, #16]
 801c6e2:	3306      	adds	r3, #6
 801c6e4:	2206      	movs	r2, #6
 801c6e6:	6879      	ldr	r1, [r7, #4]
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	f001 f872 	bl	801d7d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c6f4:	2b06      	cmp	r3, #6
 801c6f6:	d006      	beq.n	801c706 <ethernet_output+0x66>
 801c6f8:	4b0a      	ldr	r3, [pc, #40]	@ (801c724 <ethernet_output+0x84>)
 801c6fa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c6fe:	490a      	ldr	r1, [pc, #40]	@ (801c728 <ethernet_output+0x88>)
 801c700:	480a      	ldr	r0, [pc, #40]	@ (801c72c <ethernet_output+0x8c>)
 801c702:	f000 fe3f 	bl	801d384 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	699b      	ldr	r3, [r3, #24]
 801c70a:	68b9      	ldr	r1, [r7, #8]
 801c70c:	68f8      	ldr	r0, [r7, #12]
 801c70e:	4798      	blx	r3
 801c710:	4603      	mov	r3, r0
 801c712:	e002      	b.n	801c71a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c714:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c716:	f06f 0301 	mvn.w	r3, #1
}
 801c71a:	4618      	mov	r0, r3
 801c71c:	3718      	adds	r7, #24
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}
 801c722:	bf00      	nop
 801c724:	0802233c 	.word	0x0802233c
 801c728:	08022374 	.word	0x08022374
 801c72c:	080223a8 	.word	0x080223a8

0801c730 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b082      	sub	sp, #8
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	2200      	movs	r2, #0
 801c73e:	2104      	movs	r1, #4
 801c740:	4618      	mov	r0, r3
 801c742:	f7f0 fa17 	bl	800cb74 <osMessageQueueNew>
 801c746:	4602      	mov	r2, r0
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d102      	bne.n	801c75a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c754:	f04f 33ff 	mov.w	r3, #4294967295
 801c758:	e000      	b.n	801c75c <sys_mbox_new+0x2c>

  return ERR_OK;
 801c75a:	2300      	movs	r3, #0
}
 801c75c:	4618      	mov	r0, r3
 801c75e:	3708      	adds	r7, #8
 801c760:	46bd      	mov	sp, r7
 801c762:	bd80      	pop	{r7, pc}

0801c764 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b084      	sub	sp, #16
 801c768:	af00      	add	r7, sp, #0
 801c76a:	6078      	str	r0, [r7, #4]
 801c76c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	6818      	ldr	r0, [r3, #0]
 801c772:	4639      	mov	r1, r7
 801c774:	2300      	movs	r3, #0
 801c776:	2200      	movs	r2, #0
 801c778:	f7f0 fa70 	bl	800cc5c <osMessageQueuePut>
 801c77c:	4603      	mov	r3, r0
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d102      	bne.n	801c788 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c782:	2300      	movs	r3, #0
 801c784:	73fb      	strb	r3, [r7, #15]
 801c786:	e001      	b.n	801c78c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c788:	23ff      	movs	r3, #255	@ 0xff
 801c78a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c790:	4618      	mov	r0, r3
 801c792:	3710      	adds	r7, #16
 801c794:	46bd      	mov	sp, r7
 801c796:	bd80      	pop	{r7, pc}

0801c798 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b086      	sub	sp, #24
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	60f8      	str	r0, [r7, #12]
 801c7a0:	60b9      	str	r1, [r7, #8]
 801c7a2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c7a4:	f7ef fe64 	bl	800c470 <osKernelGetTickCount>
 801c7a8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d013      	beq.n	801c7d8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	6818      	ldr	r0, [r3, #0]
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	68b9      	ldr	r1, [r7, #8]
 801c7ba:	f7f0 faaf 	bl	800cd1c <osMessageQueueGet>
 801c7be:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c7c0:	693b      	ldr	r3, [r7, #16]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d105      	bne.n	801c7d2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c7c6:	f7ef fe53 	bl	800c470 <osKernelGetTickCount>
 801c7ca:	4602      	mov	r2, r0
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	e00f      	b.n	801c7f2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d6:	e00c      	b.n	801c7f2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	6818      	ldr	r0, [r3, #0]
 801c7dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	68b9      	ldr	r1, [r7, #8]
 801c7e4:	f7f0 fa9a 	bl	800cd1c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c7e8:	f7ef fe42 	bl	800c470 <osKernelGetTickCount>
 801c7ec:	4602      	mov	r2, r0
 801c7ee:	697b      	ldr	r3, [r7, #20]
 801c7f0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	3718      	adds	r7, #24
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	bd80      	pop	{r7, pc}

0801c7fa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c7fa:	b480      	push	{r7}
 801c7fc:	b083      	sub	sp, #12
 801c7fe:	af00      	add	r7, sp, #0
 801c800:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d101      	bne.n	801c80e <sys_mbox_valid+0x14>
    return 0;
 801c80a:	2300      	movs	r3, #0
 801c80c:	e000      	b.n	801c810 <sys_mbox_valid+0x16>
  else
    return 1;
 801c80e:	2301      	movs	r3, #1
}
 801c810:	4618      	mov	r0, r3
 801c812:	370c      	adds	r7, #12
 801c814:	46bd      	mov	sp, r7
 801c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c81a:	4770      	bx	lr

0801c81c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c820:	2000      	movs	r0, #0
 801c822:	f7ef ff79 	bl	800c718 <osMutexNew>
 801c826:	4603      	mov	r3, r0
 801c828:	4a01      	ldr	r2, [pc, #4]	@ (801c830 <sys_init+0x14>)
 801c82a:	6013      	str	r3, [r2, #0]
#endif
}
 801c82c:	bf00      	nop
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	2400cdc4 	.word	0x2400cdc4

0801c834 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c834:	b580      	push	{r7, lr}
 801c836:	b082      	sub	sp, #8
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c83c:	2000      	movs	r0, #0
 801c83e:	f7ef ff6b 	bl	800c718 <osMutexNew>
 801c842:	4602      	mov	r2, r0
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d102      	bne.n	801c856 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c850:	f04f 33ff 	mov.w	r3, #4294967295
 801c854:	e000      	b.n	801c858 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c856:	2300      	movs	r3, #0
}
 801c858:	4618      	mov	r0, r3
 801c85a:	3708      	adds	r7, #8
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}

0801c860 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	f04f 31ff 	mov.w	r1, #4294967295
 801c870:	4618      	mov	r0, r3
 801c872:	f7ef ffd7 	bl	800c824 <osMutexAcquire>
#endif
}
 801c876:	bf00      	nop
 801c878:	3708      	adds	r7, #8
 801c87a:	46bd      	mov	sp, r7
 801c87c:	bd80      	pop	{r7, pc}

0801c87e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c87e:	b580      	push	{r7, lr}
 801c880:	b082      	sub	sp, #8
 801c882:	af00      	add	r7, sp, #0
 801c884:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7f0 f815 	bl	800c8ba <osMutexRelease>
}
 801c890:	bf00      	nop
 801c892:	3708      	adds	r7, #8
 801c894:	46bd      	mov	sp, r7
 801c896:	bd80      	pop	{r7, pc}

0801c898 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b08e      	sub	sp, #56	@ 0x38
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	60f8      	str	r0, [r7, #12]
 801c8a0:	60b9      	str	r1, [r7, #8]
 801c8a2:	607a      	str	r2, [r7, #4]
 801c8a4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c8a6:	f107 0314 	add.w	r3, r7, #20
 801c8aa:	2224      	movs	r2, #36	@ 0x24
 801c8ac:	2100      	movs	r1, #0
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f000 fec0 	bl	801d634 <memset>
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	617b      	str	r3, [r7, #20]
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c8c0:	f107 0314 	add.w	r3, r7, #20
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	6879      	ldr	r1, [r7, #4]
 801c8c8:	68b8      	ldr	r0, [r7, #8]
 801c8ca:	f7ef fde6 	bl	800c49a <osThreadNew>
 801c8ce:	4603      	mov	r3, r0
#endif
}
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	3738      	adds	r7, #56	@ 0x38
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c8dc:	4b04      	ldr	r3, [pc, #16]	@ (801c8f0 <sys_arch_protect+0x18>)
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	f04f 31ff 	mov.w	r1, #4294967295
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7ef ff9d 	bl	800c824 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c8ea:	2301      	movs	r3, #1
}
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	bd80      	pop	{r7, pc}
 801c8f0:	2400cdc4 	.word	0x2400cdc4

0801c8f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b082      	sub	sp, #8
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c8fc:	4b04      	ldr	r3, [pc, #16]	@ (801c910 <sys_arch_unprotect+0x1c>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	4618      	mov	r0, r3
 801c902:	f7ef ffda 	bl	800c8ba <osMutexRelease>
}
 801c906:	bf00      	nop
 801c908:	3708      	adds	r7, #8
 801c90a:	46bd      	mov	sp, r7
 801c90c:	bd80      	pop	{r7, pc}
 801c90e:	bf00      	nop
 801c910:	2400cdc4 	.word	0x2400cdc4

0801c914 <rand>:
 801c914:	4b16      	ldr	r3, [pc, #88]	@ (801c970 <rand+0x5c>)
 801c916:	b510      	push	{r4, lr}
 801c918:	681c      	ldr	r4, [r3, #0]
 801c91a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c91c:	b9b3      	cbnz	r3, 801c94c <rand+0x38>
 801c91e:	2018      	movs	r0, #24
 801c920:	f001 fdae 	bl	801e480 <malloc>
 801c924:	4602      	mov	r2, r0
 801c926:	6320      	str	r0, [r4, #48]	@ 0x30
 801c928:	b920      	cbnz	r0, 801c934 <rand+0x20>
 801c92a:	4b12      	ldr	r3, [pc, #72]	@ (801c974 <rand+0x60>)
 801c92c:	4812      	ldr	r0, [pc, #72]	@ (801c978 <rand+0x64>)
 801c92e:	2152      	movs	r1, #82	@ 0x52
 801c930:	f000 ff5e 	bl	801d7f0 <__assert_func>
 801c934:	4911      	ldr	r1, [pc, #68]	@ (801c97c <rand+0x68>)
 801c936:	4b12      	ldr	r3, [pc, #72]	@ (801c980 <rand+0x6c>)
 801c938:	e9c0 1300 	strd	r1, r3, [r0]
 801c93c:	4b11      	ldr	r3, [pc, #68]	@ (801c984 <rand+0x70>)
 801c93e:	6083      	str	r3, [r0, #8]
 801c940:	230b      	movs	r3, #11
 801c942:	8183      	strh	r3, [r0, #12]
 801c944:	2100      	movs	r1, #0
 801c946:	2001      	movs	r0, #1
 801c948:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c94c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c94e:	480e      	ldr	r0, [pc, #56]	@ (801c988 <rand+0x74>)
 801c950:	690b      	ldr	r3, [r1, #16]
 801c952:	694c      	ldr	r4, [r1, #20]
 801c954:	4a0d      	ldr	r2, [pc, #52]	@ (801c98c <rand+0x78>)
 801c956:	4358      	muls	r0, r3
 801c958:	fb02 0004 	mla	r0, r2, r4, r0
 801c95c:	fba3 3202 	umull	r3, r2, r3, r2
 801c960:	3301      	adds	r3, #1
 801c962:	eb40 0002 	adc.w	r0, r0, r2
 801c966:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c96a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c96e:	bd10      	pop	{r4, pc}
 801c970:	24000044 	.word	0x24000044
 801c974:	080225d6 	.word	0x080225d6
 801c978:	080225ed 	.word	0x080225ed
 801c97c:	abcd330e 	.word	0xabcd330e
 801c980:	e66d1234 	.word	0xe66d1234
 801c984:	0005deec 	.word	0x0005deec
 801c988:	5851f42d 	.word	0x5851f42d
 801c98c:	4c957f2d 	.word	0x4c957f2d

0801c990 <__cvt>:
 801c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c992:	ed2d 8b02 	vpush	{d8}
 801c996:	eeb0 8b40 	vmov.f64	d8, d0
 801c99a:	b085      	sub	sp, #20
 801c99c:	4617      	mov	r7, r2
 801c99e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c9a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c9a2:	ee18 2a90 	vmov	r2, s17
 801c9a6:	f025 0520 	bic.w	r5, r5, #32
 801c9aa:	2a00      	cmp	r2, #0
 801c9ac:	bfb6      	itet	lt
 801c9ae:	222d      	movlt	r2, #45	@ 0x2d
 801c9b0:	2200      	movge	r2, #0
 801c9b2:	eeb1 8b40 	vneglt.f64	d8, d0
 801c9b6:	2d46      	cmp	r5, #70	@ 0x46
 801c9b8:	460c      	mov	r4, r1
 801c9ba:	701a      	strb	r2, [r3, #0]
 801c9bc:	d004      	beq.n	801c9c8 <__cvt+0x38>
 801c9be:	2d45      	cmp	r5, #69	@ 0x45
 801c9c0:	d100      	bne.n	801c9c4 <__cvt+0x34>
 801c9c2:	3401      	adds	r4, #1
 801c9c4:	2102      	movs	r1, #2
 801c9c6:	e000      	b.n	801c9ca <__cvt+0x3a>
 801c9c8:	2103      	movs	r1, #3
 801c9ca:	ab03      	add	r3, sp, #12
 801c9cc:	9301      	str	r3, [sp, #4]
 801c9ce:	ab02      	add	r3, sp, #8
 801c9d0:	9300      	str	r3, [sp, #0]
 801c9d2:	4622      	mov	r2, r4
 801c9d4:	4633      	mov	r3, r6
 801c9d6:	eeb0 0b48 	vmov.f64	d0, d8
 801c9da:	f000 ffb1 	bl	801d940 <_dtoa_r>
 801c9de:	2d47      	cmp	r5, #71	@ 0x47
 801c9e0:	d114      	bne.n	801ca0c <__cvt+0x7c>
 801c9e2:	07fb      	lsls	r3, r7, #31
 801c9e4:	d50a      	bpl.n	801c9fc <__cvt+0x6c>
 801c9e6:	1902      	adds	r2, r0, r4
 801c9e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9f0:	bf08      	it	eq
 801c9f2:	9203      	streq	r2, [sp, #12]
 801c9f4:	2130      	movs	r1, #48	@ 0x30
 801c9f6:	9b03      	ldr	r3, [sp, #12]
 801c9f8:	4293      	cmp	r3, r2
 801c9fa:	d319      	bcc.n	801ca30 <__cvt+0xa0>
 801c9fc:	9b03      	ldr	r3, [sp, #12]
 801c9fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca00:	1a1b      	subs	r3, r3, r0
 801ca02:	6013      	str	r3, [r2, #0]
 801ca04:	b005      	add	sp, #20
 801ca06:	ecbd 8b02 	vpop	{d8}
 801ca0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca0c:	2d46      	cmp	r5, #70	@ 0x46
 801ca0e:	eb00 0204 	add.w	r2, r0, r4
 801ca12:	d1e9      	bne.n	801c9e8 <__cvt+0x58>
 801ca14:	7803      	ldrb	r3, [r0, #0]
 801ca16:	2b30      	cmp	r3, #48	@ 0x30
 801ca18:	d107      	bne.n	801ca2a <__cvt+0x9a>
 801ca1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca22:	bf1c      	itt	ne
 801ca24:	f1c4 0401 	rsbne	r4, r4, #1
 801ca28:	6034      	strne	r4, [r6, #0]
 801ca2a:	6833      	ldr	r3, [r6, #0]
 801ca2c:	441a      	add	r2, r3
 801ca2e:	e7db      	b.n	801c9e8 <__cvt+0x58>
 801ca30:	1c5c      	adds	r4, r3, #1
 801ca32:	9403      	str	r4, [sp, #12]
 801ca34:	7019      	strb	r1, [r3, #0]
 801ca36:	e7de      	b.n	801c9f6 <__cvt+0x66>

0801ca38 <__exponent>:
 801ca38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca3a:	2900      	cmp	r1, #0
 801ca3c:	bfba      	itte	lt
 801ca3e:	4249      	neglt	r1, r1
 801ca40:	232d      	movlt	r3, #45	@ 0x2d
 801ca42:	232b      	movge	r3, #43	@ 0x2b
 801ca44:	2909      	cmp	r1, #9
 801ca46:	7002      	strb	r2, [r0, #0]
 801ca48:	7043      	strb	r3, [r0, #1]
 801ca4a:	dd29      	ble.n	801caa0 <__exponent+0x68>
 801ca4c:	f10d 0307 	add.w	r3, sp, #7
 801ca50:	461d      	mov	r5, r3
 801ca52:	270a      	movs	r7, #10
 801ca54:	461a      	mov	r2, r3
 801ca56:	fbb1 f6f7 	udiv	r6, r1, r7
 801ca5a:	fb07 1416 	mls	r4, r7, r6, r1
 801ca5e:	3430      	adds	r4, #48	@ 0x30
 801ca60:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ca64:	460c      	mov	r4, r1
 801ca66:	2c63      	cmp	r4, #99	@ 0x63
 801ca68:	f103 33ff 	add.w	r3, r3, #4294967295
 801ca6c:	4631      	mov	r1, r6
 801ca6e:	dcf1      	bgt.n	801ca54 <__exponent+0x1c>
 801ca70:	3130      	adds	r1, #48	@ 0x30
 801ca72:	1e94      	subs	r4, r2, #2
 801ca74:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ca78:	1c41      	adds	r1, r0, #1
 801ca7a:	4623      	mov	r3, r4
 801ca7c:	42ab      	cmp	r3, r5
 801ca7e:	d30a      	bcc.n	801ca96 <__exponent+0x5e>
 801ca80:	f10d 0309 	add.w	r3, sp, #9
 801ca84:	1a9b      	subs	r3, r3, r2
 801ca86:	42ac      	cmp	r4, r5
 801ca88:	bf88      	it	hi
 801ca8a:	2300      	movhi	r3, #0
 801ca8c:	3302      	adds	r3, #2
 801ca8e:	4403      	add	r3, r0
 801ca90:	1a18      	subs	r0, r3, r0
 801ca92:	b003      	add	sp, #12
 801ca94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca96:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ca9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ca9e:	e7ed      	b.n	801ca7c <__exponent+0x44>
 801caa0:	2330      	movs	r3, #48	@ 0x30
 801caa2:	3130      	adds	r1, #48	@ 0x30
 801caa4:	7083      	strb	r3, [r0, #2]
 801caa6:	70c1      	strb	r1, [r0, #3]
 801caa8:	1d03      	adds	r3, r0, #4
 801caaa:	e7f1      	b.n	801ca90 <__exponent+0x58>
 801caac:	0000      	movs	r0, r0
	...

0801cab0 <_printf_float>:
 801cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab4:	b08d      	sub	sp, #52	@ 0x34
 801cab6:	460c      	mov	r4, r1
 801cab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cabc:	4616      	mov	r6, r2
 801cabe:	461f      	mov	r7, r3
 801cac0:	4605      	mov	r5, r0
 801cac2:	f000 fdbf 	bl	801d644 <_localeconv_r>
 801cac6:	f8d0 b000 	ldr.w	fp, [r0]
 801caca:	4658      	mov	r0, fp
 801cacc:	f7e3 fc70 	bl	80003b0 <strlen>
 801cad0:	2300      	movs	r3, #0
 801cad2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cad4:	f8d8 3000 	ldr.w	r3, [r8]
 801cad8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801cadc:	6822      	ldr	r2, [r4, #0]
 801cade:	9005      	str	r0, [sp, #20]
 801cae0:	3307      	adds	r3, #7
 801cae2:	f023 0307 	bic.w	r3, r3, #7
 801cae6:	f103 0108 	add.w	r1, r3, #8
 801caea:	f8c8 1000 	str.w	r1, [r8]
 801caee:	ed93 0b00 	vldr	d0, [r3]
 801caf2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801cd50 <_printf_float+0x2a0>
 801caf6:	eeb0 7bc0 	vabs.f64	d7, d0
 801cafa:	eeb4 7b46 	vcmp.f64	d7, d6
 801cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb02:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801cb06:	dd24      	ble.n	801cb52 <_printf_float+0xa2>
 801cb08:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb10:	d502      	bpl.n	801cb18 <_printf_float+0x68>
 801cb12:	232d      	movs	r3, #45	@ 0x2d
 801cb14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cb18:	498f      	ldr	r1, [pc, #572]	@ (801cd58 <_printf_float+0x2a8>)
 801cb1a:	4b90      	ldr	r3, [pc, #576]	@ (801cd5c <_printf_float+0x2ac>)
 801cb1c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801cb20:	bf94      	ite	ls
 801cb22:	4688      	movls	r8, r1
 801cb24:	4698      	movhi	r8, r3
 801cb26:	f022 0204 	bic.w	r2, r2, #4
 801cb2a:	2303      	movs	r3, #3
 801cb2c:	6123      	str	r3, [r4, #16]
 801cb2e:	6022      	str	r2, [r4, #0]
 801cb30:	f04f 0a00 	mov.w	sl, #0
 801cb34:	9700      	str	r7, [sp, #0]
 801cb36:	4633      	mov	r3, r6
 801cb38:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cb3a:	4621      	mov	r1, r4
 801cb3c:	4628      	mov	r0, r5
 801cb3e:	f000 f9d1 	bl	801cee4 <_printf_common>
 801cb42:	3001      	adds	r0, #1
 801cb44:	f040 8089 	bne.w	801cc5a <_printf_float+0x1aa>
 801cb48:	f04f 30ff 	mov.w	r0, #4294967295
 801cb4c:	b00d      	add	sp, #52	@ 0x34
 801cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb52:	eeb4 0b40 	vcmp.f64	d0, d0
 801cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb5a:	d709      	bvc.n	801cb70 <_printf_float+0xc0>
 801cb5c:	ee10 3a90 	vmov	r3, s1
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	bfbc      	itt	lt
 801cb64:	232d      	movlt	r3, #45	@ 0x2d
 801cb66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cb6a:	497d      	ldr	r1, [pc, #500]	@ (801cd60 <_printf_float+0x2b0>)
 801cb6c:	4b7d      	ldr	r3, [pc, #500]	@ (801cd64 <_printf_float+0x2b4>)
 801cb6e:	e7d5      	b.n	801cb1c <_printf_float+0x6c>
 801cb70:	6863      	ldr	r3, [r4, #4]
 801cb72:	1c59      	adds	r1, r3, #1
 801cb74:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801cb78:	d139      	bne.n	801cbee <_printf_float+0x13e>
 801cb7a:	2306      	movs	r3, #6
 801cb7c:	6063      	str	r3, [r4, #4]
 801cb7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801cb82:	2300      	movs	r3, #0
 801cb84:	6022      	str	r2, [r4, #0]
 801cb86:	9303      	str	r3, [sp, #12]
 801cb88:	ab0a      	add	r3, sp, #40	@ 0x28
 801cb8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801cb8e:	ab09      	add	r3, sp, #36	@ 0x24
 801cb90:	9300      	str	r3, [sp, #0]
 801cb92:	6861      	ldr	r1, [r4, #4]
 801cb94:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cb98:	4628      	mov	r0, r5
 801cb9a:	f7ff fef9 	bl	801c990 <__cvt>
 801cb9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cba4:	4680      	mov	r8, r0
 801cba6:	d129      	bne.n	801cbfc <_printf_float+0x14c>
 801cba8:	1cc8      	adds	r0, r1, #3
 801cbaa:	db02      	blt.n	801cbb2 <_printf_float+0x102>
 801cbac:	6863      	ldr	r3, [r4, #4]
 801cbae:	4299      	cmp	r1, r3
 801cbb0:	dd41      	ble.n	801cc36 <_printf_float+0x186>
 801cbb2:	f1a9 0902 	sub.w	r9, r9, #2
 801cbb6:	fa5f f989 	uxtb.w	r9, r9
 801cbba:	3901      	subs	r1, #1
 801cbbc:	464a      	mov	r2, r9
 801cbbe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cbc2:	9109      	str	r1, [sp, #36]	@ 0x24
 801cbc4:	f7ff ff38 	bl	801ca38 <__exponent>
 801cbc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cbca:	1813      	adds	r3, r2, r0
 801cbcc:	2a01      	cmp	r2, #1
 801cbce:	4682      	mov	sl, r0
 801cbd0:	6123      	str	r3, [r4, #16]
 801cbd2:	dc02      	bgt.n	801cbda <_printf_float+0x12a>
 801cbd4:	6822      	ldr	r2, [r4, #0]
 801cbd6:	07d2      	lsls	r2, r2, #31
 801cbd8:	d501      	bpl.n	801cbde <_printf_float+0x12e>
 801cbda:	3301      	adds	r3, #1
 801cbdc:	6123      	str	r3, [r4, #16]
 801cbde:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d0a6      	beq.n	801cb34 <_printf_float+0x84>
 801cbe6:	232d      	movs	r3, #45	@ 0x2d
 801cbe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cbec:	e7a2      	b.n	801cb34 <_printf_float+0x84>
 801cbee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cbf2:	d1c4      	bne.n	801cb7e <_printf_float+0xce>
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d1c2      	bne.n	801cb7e <_printf_float+0xce>
 801cbf8:	2301      	movs	r3, #1
 801cbfa:	e7bf      	b.n	801cb7c <_printf_float+0xcc>
 801cbfc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801cc00:	d9db      	bls.n	801cbba <_printf_float+0x10a>
 801cc02:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801cc06:	d118      	bne.n	801cc3a <_printf_float+0x18a>
 801cc08:	2900      	cmp	r1, #0
 801cc0a:	6863      	ldr	r3, [r4, #4]
 801cc0c:	dd0b      	ble.n	801cc26 <_printf_float+0x176>
 801cc0e:	6121      	str	r1, [r4, #16]
 801cc10:	b913      	cbnz	r3, 801cc18 <_printf_float+0x168>
 801cc12:	6822      	ldr	r2, [r4, #0]
 801cc14:	07d0      	lsls	r0, r2, #31
 801cc16:	d502      	bpl.n	801cc1e <_printf_float+0x16e>
 801cc18:	3301      	adds	r3, #1
 801cc1a:	440b      	add	r3, r1
 801cc1c:	6123      	str	r3, [r4, #16]
 801cc1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cc20:	f04f 0a00 	mov.w	sl, #0
 801cc24:	e7db      	b.n	801cbde <_printf_float+0x12e>
 801cc26:	b913      	cbnz	r3, 801cc2e <_printf_float+0x17e>
 801cc28:	6822      	ldr	r2, [r4, #0]
 801cc2a:	07d2      	lsls	r2, r2, #31
 801cc2c:	d501      	bpl.n	801cc32 <_printf_float+0x182>
 801cc2e:	3302      	adds	r3, #2
 801cc30:	e7f4      	b.n	801cc1c <_printf_float+0x16c>
 801cc32:	2301      	movs	r3, #1
 801cc34:	e7f2      	b.n	801cc1c <_printf_float+0x16c>
 801cc36:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801cc3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc3c:	4299      	cmp	r1, r3
 801cc3e:	db05      	blt.n	801cc4c <_printf_float+0x19c>
 801cc40:	6823      	ldr	r3, [r4, #0]
 801cc42:	6121      	str	r1, [r4, #16]
 801cc44:	07d8      	lsls	r0, r3, #31
 801cc46:	d5ea      	bpl.n	801cc1e <_printf_float+0x16e>
 801cc48:	1c4b      	adds	r3, r1, #1
 801cc4a:	e7e7      	b.n	801cc1c <_printf_float+0x16c>
 801cc4c:	2900      	cmp	r1, #0
 801cc4e:	bfd4      	ite	le
 801cc50:	f1c1 0202 	rsble	r2, r1, #2
 801cc54:	2201      	movgt	r2, #1
 801cc56:	4413      	add	r3, r2
 801cc58:	e7e0      	b.n	801cc1c <_printf_float+0x16c>
 801cc5a:	6823      	ldr	r3, [r4, #0]
 801cc5c:	055a      	lsls	r2, r3, #21
 801cc5e:	d407      	bmi.n	801cc70 <_printf_float+0x1c0>
 801cc60:	6923      	ldr	r3, [r4, #16]
 801cc62:	4642      	mov	r2, r8
 801cc64:	4631      	mov	r1, r6
 801cc66:	4628      	mov	r0, r5
 801cc68:	47b8      	blx	r7
 801cc6a:	3001      	adds	r0, #1
 801cc6c:	d12a      	bne.n	801ccc4 <_printf_float+0x214>
 801cc6e:	e76b      	b.n	801cb48 <_printf_float+0x98>
 801cc70:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801cc74:	f240 80e0 	bls.w	801ce38 <_printf_float+0x388>
 801cc78:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801cc7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc84:	d133      	bne.n	801ccee <_printf_float+0x23e>
 801cc86:	4a38      	ldr	r2, [pc, #224]	@ (801cd68 <_printf_float+0x2b8>)
 801cc88:	2301      	movs	r3, #1
 801cc8a:	4631      	mov	r1, r6
 801cc8c:	4628      	mov	r0, r5
 801cc8e:	47b8      	blx	r7
 801cc90:	3001      	adds	r0, #1
 801cc92:	f43f af59 	beq.w	801cb48 <_printf_float+0x98>
 801cc96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801cc9a:	4543      	cmp	r3, r8
 801cc9c:	db02      	blt.n	801cca4 <_printf_float+0x1f4>
 801cc9e:	6823      	ldr	r3, [r4, #0]
 801cca0:	07d8      	lsls	r0, r3, #31
 801cca2:	d50f      	bpl.n	801ccc4 <_printf_float+0x214>
 801cca4:	9b05      	ldr	r3, [sp, #20]
 801cca6:	465a      	mov	r2, fp
 801cca8:	4631      	mov	r1, r6
 801ccaa:	4628      	mov	r0, r5
 801ccac:	47b8      	blx	r7
 801ccae:	3001      	adds	r0, #1
 801ccb0:	f43f af4a 	beq.w	801cb48 <_printf_float+0x98>
 801ccb4:	f04f 0900 	mov.w	r9, #0
 801ccb8:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccbc:	f104 0a1a 	add.w	sl, r4, #26
 801ccc0:	45c8      	cmp	r8, r9
 801ccc2:	dc09      	bgt.n	801ccd8 <_printf_float+0x228>
 801ccc4:	6823      	ldr	r3, [r4, #0]
 801ccc6:	079b      	lsls	r3, r3, #30
 801ccc8:	f100 8107 	bmi.w	801ceda <_printf_float+0x42a>
 801cccc:	68e0      	ldr	r0, [r4, #12]
 801ccce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ccd0:	4298      	cmp	r0, r3
 801ccd2:	bfb8      	it	lt
 801ccd4:	4618      	movlt	r0, r3
 801ccd6:	e739      	b.n	801cb4c <_printf_float+0x9c>
 801ccd8:	2301      	movs	r3, #1
 801ccda:	4652      	mov	r2, sl
 801ccdc:	4631      	mov	r1, r6
 801ccde:	4628      	mov	r0, r5
 801cce0:	47b8      	blx	r7
 801cce2:	3001      	adds	r0, #1
 801cce4:	f43f af30 	beq.w	801cb48 <_printf_float+0x98>
 801cce8:	f109 0901 	add.w	r9, r9, #1
 801ccec:	e7e8      	b.n	801ccc0 <_printf_float+0x210>
 801ccee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	dc3b      	bgt.n	801cd6c <_printf_float+0x2bc>
 801ccf4:	4a1c      	ldr	r2, [pc, #112]	@ (801cd68 <_printf_float+0x2b8>)
 801ccf6:	2301      	movs	r3, #1
 801ccf8:	4631      	mov	r1, r6
 801ccfa:	4628      	mov	r0, r5
 801ccfc:	47b8      	blx	r7
 801ccfe:	3001      	adds	r0, #1
 801cd00:	f43f af22 	beq.w	801cb48 <_printf_float+0x98>
 801cd04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801cd08:	ea59 0303 	orrs.w	r3, r9, r3
 801cd0c:	d102      	bne.n	801cd14 <_printf_float+0x264>
 801cd0e:	6823      	ldr	r3, [r4, #0]
 801cd10:	07d9      	lsls	r1, r3, #31
 801cd12:	d5d7      	bpl.n	801ccc4 <_printf_float+0x214>
 801cd14:	9b05      	ldr	r3, [sp, #20]
 801cd16:	465a      	mov	r2, fp
 801cd18:	4631      	mov	r1, r6
 801cd1a:	4628      	mov	r0, r5
 801cd1c:	47b8      	blx	r7
 801cd1e:	3001      	adds	r0, #1
 801cd20:	f43f af12 	beq.w	801cb48 <_printf_float+0x98>
 801cd24:	f04f 0a00 	mov.w	sl, #0
 801cd28:	f104 0b1a 	add.w	fp, r4, #26
 801cd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd2e:	425b      	negs	r3, r3
 801cd30:	4553      	cmp	r3, sl
 801cd32:	dc01      	bgt.n	801cd38 <_printf_float+0x288>
 801cd34:	464b      	mov	r3, r9
 801cd36:	e794      	b.n	801cc62 <_printf_float+0x1b2>
 801cd38:	2301      	movs	r3, #1
 801cd3a:	465a      	mov	r2, fp
 801cd3c:	4631      	mov	r1, r6
 801cd3e:	4628      	mov	r0, r5
 801cd40:	47b8      	blx	r7
 801cd42:	3001      	adds	r0, #1
 801cd44:	f43f af00 	beq.w	801cb48 <_printf_float+0x98>
 801cd48:	f10a 0a01 	add.w	sl, sl, #1
 801cd4c:	e7ee      	b.n	801cd2c <_printf_float+0x27c>
 801cd4e:	bf00      	nop
 801cd50:	ffffffff 	.word	0xffffffff
 801cd54:	7fefffff 	.word	0x7fefffff
 801cd58:	08022746 	.word	0x08022746
 801cd5c:	0802274a 	.word	0x0802274a
 801cd60:	0802274e 	.word	0x0802274e
 801cd64:	08022752 	.word	0x08022752
 801cd68:	08022756 	.word	0x08022756
 801cd6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cd6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cd72:	4553      	cmp	r3, sl
 801cd74:	bfa8      	it	ge
 801cd76:	4653      	movge	r3, sl
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	4699      	mov	r9, r3
 801cd7c:	dc37      	bgt.n	801cdee <_printf_float+0x33e>
 801cd7e:	2300      	movs	r3, #0
 801cd80:	9307      	str	r3, [sp, #28]
 801cd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cd86:	f104 021a 	add.w	r2, r4, #26
 801cd8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cd8c:	9907      	ldr	r1, [sp, #28]
 801cd8e:	9306      	str	r3, [sp, #24]
 801cd90:	eba3 0309 	sub.w	r3, r3, r9
 801cd94:	428b      	cmp	r3, r1
 801cd96:	dc31      	bgt.n	801cdfc <_printf_float+0x34c>
 801cd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd9a:	459a      	cmp	sl, r3
 801cd9c:	dc3b      	bgt.n	801ce16 <_printf_float+0x366>
 801cd9e:	6823      	ldr	r3, [r4, #0]
 801cda0:	07da      	lsls	r2, r3, #31
 801cda2:	d438      	bmi.n	801ce16 <_printf_float+0x366>
 801cda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cda6:	ebaa 0903 	sub.w	r9, sl, r3
 801cdaa:	9b06      	ldr	r3, [sp, #24]
 801cdac:	ebaa 0303 	sub.w	r3, sl, r3
 801cdb0:	4599      	cmp	r9, r3
 801cdb2:	bfa8      	it	ge
 801cdb4:	4699      	movge	r9, r3
 801cdb6:	f1b9 0f00 	cmp.w	r9, #0
 801cdba:	dc34      	bgt.n	801ce26 <_printf_float+0x376>
 801cdbc:	f04f 0800 	mov.w	r8, #0
 801cdc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cdc4:	f104 0b1a 	add.w	fp, r4, #26
 801cdc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdca:	ebaa 0303 	sub.w	r3, sl, r3
 801cdce:	eba3 0309 	sub.w	r3, r3, r9
 801cdd2:	4543      	cmp	r3, r8
 801cdd4:	f77f af76 	ble.w	801ccc4 <_printf_float+0x214>
 801cdd8:	2301      	movs	r3, #1
 801cdda:	465a      	mov	r2, fp
 801cddc:	4631      	mov	r1, r6
 801cdde:	4628      	mov	r0, r5
 801cde0:	47b8      	blx	r7
 801cde2:	3001      	adds	r0, #1
 801cde4:	f43f aeb0 	beq.w	801cb48 <_printf_float+0x98>
 801cde8:	f108 0801 	add.w	r8, r8, #1
 801cdec:	e7ec      	b.n	801cdc8 <_printf_float+0x318>
 801cdee:	4642      	mov	r2, r8
 801cdf0:	4631      	mov	r1, r6
 801cdf2:	4628      	mov	r0, r5
 801cdf4:	47b8      	blx	r7
 801cdf6:	3001      	adds	r0, #1
 801cdf8:	d1c1      	bne.n	801cd7e <_printf_float+0x2ce>
 801cdfa:	e6a5      	b.n	801cb48 <_printf_float+0x98>
 801cdfc:	2301      	movs	r3, #1
 801cdfe:	4631      	mov	r1, r6
 801ce00:	4628      	mov	r0, r5
 801ce02:	9206      	str	r2, [sp, #24]
 801ce04:	47b8      	blx	r7
 801ce06:	3001      	adds	r0, #1
 801ce08:	f43f ae9e 	beq.w	801cb48 <_printf_float+0x98>
 801ce0c:	9b07      	ldr	r3, [sp, #28]
 801ce0e:	9a06      	ldr	r2, [sp, #24]
 801ce10:	3301      	adds	r3, #1
 801ce12:	9307      	str	r3, [sp, #28]
 801ce14:	e7b9      	b.n	801cd8a <_printf_float+0x2da>
 801ce16:	9b05      	ldr	r3, [sp, #20]
 801ce18:	465a      	mov	r2, fp
 801ce1a:	4631      	mov	r1, r6
 801ce1c:	4628      	mov	r0, r5
 801ce1e:	47b8      	blx	r7
 801ce20:	3001      	adds	r0, #1
 801ce22:	d1bf      	bne.n	801cda4 <_printf_float+0x2f4>
 801ce24:	e690      	b.n	801cb48 <_printf_float+0x98>
 801ce26:	9a06      	ldr	r2, [sp, #24]
 801ce28:	464b      	mov	r3, r9
 801ce2a:	4442      	add	r2, r8
 801ce2c:	4631      	mov	r1, r6
 801ce2e:	4628      	mov	r0, r5
 801ce30:	47b8      	blx	r7
 801ce32:	3001      	adds	r0, #1
 801ce34:	d1c2      	bne.n	801cdbc <_printf_float+0x30c>
 801ce36:	e687      	b.n	801cb48 <_printf_float+0x98>
 801ce38:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801ce3c:	f1b9 0f01 	cmp.w	r9, #1
 801ce40:	dc01      	bgt.n	801ce46 <_printf_float+0x396>
 801ce42:	07db      	lsls	r3, r3, #31
 801ce44:	d536      	bpl.n	801ceb4 <_printf_float+0x404>
 801ce46:	2301      	movs	r3, #1
 801ce48:	4642      	mov	r2, r8
 801ce4a:	4631      	mov	r1, r6
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	47b8      	blx	r7
 801ce50:	3001      	adds	r0, #1
 801ce52:	f43f ae79 	beq.w	801cb48 <_printf_float+0x98>
 801ce56:	9b05      	ldr	r3, [sp, #20]
 801ce58:	465a      	mov	r2, fp
 801ce5a:	4631      	mov	r1, r6
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	47b8      	blx	r7
 801ce60:	3001      	adds	r0, #1
 801ce62:	f43f ae71 	beq.w	801cb48 <_printf_float+0x98>
 801ce66:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801ce6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce72:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce76:	d018      	beq.n	801ceaa <_printf_float+0x3fa>
 801ce78:	464b      	mov	r3, r9
 801ce7a:	f108 0201 	add.w	r2, r8, #1
 801ce7e:	4631      	mov	r1, r6
 801ce80:	4628      	mov	r0, r5
 801ce82:	47b8      	blx	r7
 801ce84:	3001      	adds	r0, #1
 801ce86:	d10c      	bne.n	801cea2 <_printf_float+0x3f2>
 801ce88:	e65e      	b.n	801cb48 <_printf_float+0x98>
 801ce8a:	2301      	movs	r3, #1
 801ce8c:	465a      	mov	r2, fp
 801ce8e:	4631      	mov	r1, r6
 801ce90:	4628      	mov	r0, r5
 801ce92:	47b8      	blx	r7
 801ce94:	3001      	adds	r0, #1
 801ce96:	f43f ae57 	beq.w	801cb48 <_printf_float+0x98>
 801ce9a:	f108 0801 	add.w	r8, r8, #1
 801ce9e:	45c8      	cmp	r8, r9
 801cea0:	dbf3      	blt.n	801ce8a <_printf_float+0x3da>
 801cea2:	4653      	mov	r3, sl
 801cea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cea8:	e6dc      	b.n	801cc64 <_printf_float+0x1b4>
 801ceaa:	f04f 0800 	mov.w	r8, #0
 801ceae:	f104 0b1a 	add.w	fp, r4, #26
 801ceb2:	e7f4      	b.n	801ce9e <_printf_float+0x3ee>
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	4642      	mov	r2, r8
 801ceb8:	e7e1      	b.n	801ce7e <_printf_float+0x3ce>
 801ceba:	2301      	movs	r3, #1
 801cebc:	464a      	mov	r2, r9
 801cebe:	4631      	mov	r1, r6
 801cec0:	4628      	mov	r0, r5
 801cec2:	47b8      	blx	r7
 801cec4:	3001      	adds	r0, #1
 801cec6:	f43f ae3f 	beq.w	801cb48 <_printf_float+0x98>
 801ceca:	f108 0801 	add.w	r8, r8, #1
 801cece:	68e3      	ldr	r3, [r4, #12]
 801ced0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ced2:	1a5b      	subs	r3, r3, r1
 801ced4:	4543      	cmp	r3, r8
 801ced6:	dcf0      	bgt.n	801ceba <_printf_float+0x40a>
 801ced8:	e6f8      	b.n	801cccc <_printf_float+0x21c>
 801ceda:	f04f 0800 	mov.w	r8, #0
 801cede:	f104 0919 	add.w	r9, r4, #25
 801cee2:	e7f4      	b.n	801cece <_printf_float+0x41e>

0801cee4 <_printf_common>:
 801cee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cee8:	4616      	mov	r6, r2
 801ceea:	4698      	mov	r8, r3
 801ceec:	688a      	ldr	r2, [r1, #8]
 801ceee:	690b      	ldr	r3, [r1, #16]
 801cef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cef4:	4293      	cmp	r3, r2
 801cef6:	bfb8      	it	lt
 801cef8:	4613      	movlt	r3, r2
 801cefa:	6033      	str	r3, [r6, #0]
 801cefc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cf00:	4607      	mov	r7, r0
 801cf02:	460c      	mov	r4, r1
 801cf04:	b10a      	cbz	r2, 801cf0a <_printf_common+0x26>
 801cf06:	3301      	adds	r3, #1
 801cf08:	6033      	str	r3, [r6, #0]
 801cf0a:	6823      	ldr	r3, [r4, #0]
 801cf0c:	0699      	lsls	r1, r3, #26
 801cf0e:	bf42      	ittt	mi
 801cf10:	6833      	ldrmi	r3, [r6, #0]
 801cf12:	3302      	addmi	r3, #2
 801cf14:	6033      	strmi	r3, [r6, #0]
 801cf16:	6825      	ldr	r5, [r4, #0]
 801cf18:	f015 0506 	ands.w	r5, r5, #6
 801cf1c:	d106      	bne.n	801cf2c <_printf_common+0x48>
 801cf1e:	f104 0a19 	add.w	sl, r4, #25
 801cf22:	68e3      	ldr	r3, [r4, #12]
 801cf24:	6832      	ldr	r2, [r6, #0]
 801cf26:	1a9b      	subs	r3, r3, r2
 801cf28:	42ab      	cmp	r3, r5
 801cf2a:	dc26      	bgt.n	801cf7a <_printf_common+0x96>
 801cf2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cf30:	6822      	ldr	r2, [r4, #0]
 801cf32:	3b00      	subs	r3, #0
 801cf34:	bf18      	it	ne
 801cf36:	2301      	movne	r3, #1
 801cf38:	0692      	lsls	r2, r2, #26
 801cf3a:	d42b      	bmi.n	801cf94 <_printf_common+0xb0>
 801cf3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cf40:	4641      	mov	r1, r8
 801cf42:	4638      	mov	r0, r7
 801cf44:	47c8      	blx	r9
 801cf46:	3001      	adds	r0, #1
 801cf48:	d01e      	beq.n	801cf88 <_printf_common+0xa4>
 801cf4a:	6823      	ldr	r3, [r4, #0]
 801cf4c:	6922      	ldr	r2, [r4, #16]
 801cf4e:	f003 0306 	and.w	r3, r3, #6
 801cf52:	2b04      	cmp	r3, #4
 801cf54:	bf02      	ittt	eq
 801cf56:	68e5      	ldreq	r5, [r4, #12]
 801cf58:	6833      	ldreq	r3, [r6, #0]
 801cf5a:	1aed      	subeq	r5, r5, r3
 801cf5c:	68a3      	ldr	r3, [r4, #8]
 801cf5e:	bf0c      	ite	eq
 801cf60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cf64:	2500      	movne	r5, #0
 801cf66:	4293      	cmp	r3, r2
 801cf68:	bfc4      	itt	gt
 801cf6a:	1a9b      	subgt	r3, r3, r2
 801cf6c:	18ed      	addgt	r5, r5, r3
 801cf6e:	2600      	movs	r6, #0
 801cf70:	341a      	adds	r4, #26
 801cf72:	42b5      	cmp	r5, r6
 801cf74:	d11a      	bne.n	801cfac <_printf_common+0xc8>
 801cf76:	2000      	movs	r0, #0
 801cf78:	e008      	b.n	801cf8c <_printf_common+0xa8>
 801cf7a:	2301      	movs	r3, #1
 801cf7c:	4652      	mov	r2, sl
 801cf7e:	4641      	mov	r1, r8
 801cf80:	4638      	mov	r0, r7
 801cf82:	47c8      	blx	r9
 801cf84:	3001      	adds	r0, #1
 801cf86:	d103      	bne.n	801cf90 <_printf_common+0xac>
 801cf88:	f04f 30ff 	mov.w	r0, #4294967295
 801cf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf90:	3501      	adds	r5, #1
 801cf92:	e7c6      	b.n	801cf22 <_printf_common+0x3e>
 801cf94:	18e1      	adds	r1, r4, r3
 801cf96:	1c5a      	adds	r2, r3, #1
 801cf98:	2030      	movs	r0, #48	@ 0x30
 801cf9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cf9e:	4422      	add	r2, r4
 801cfa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cfa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cfa8:	3302      	adds	r3, #2
 801cfaa:	e7c7      	b.n	801cf3c <_printf_common+0x58>
 801cfac:	2301      	movs	r3, #1
 801cfae:	4622      	mov	r2, r4
 801cfb0:	4641      	mov	r1, r8
 801cfb2:	4638      	mov	r0, r7
 801cfb4:	47c8      	blx	r9
 801cfb6:	3001      	adds	r0, #1
 801cfb8:	d0e6      	beq.n	801cf88 <_printf_common+0xa4>
 801cfba:	3601      	adds	r6, #1
 801cfbc:	e7d9      	b.n	801cf72 <_printf_common+0x8e>
	...

0801cfc0 <_printf_i>:
 801cfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc4:	7e0f      	ldrb	r7, [r1, #24]
 801cfc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cfc8:	2f78      	cmp	r7, #120	@ 0x78
 801cfca:	4691      	mov	r9, r2
 801cfcc:	4680      	mov	r8, r0
 801cfce:	460c      	mov	r4, r1
 801cfd0:	469a      	mov	sl, r3
 801cfd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cfd6:	d807      	bhi.n	801cfe8 <_printf_i+0x28>
 801cfd8:	2f62      	cmp	r7, #98	@ 0x62
 801cfda:	d80a      	bhi.n	801cff2 <_printf_i+0x32>
 801cfdc:	2f00      	cmp	r7, #0
 801cfde:	f000 80d2 	beq.w	801d186 <_printf_i+0x1c6>
 801cfe2:	2f58      	cmp	r7, #88	@ 0x58
 801cfe4:	f000 80b9 	beq.w	801d15a <_printf_i+0x19a>
 801cfe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cfec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cff0:	e03a      	b.n	801d068 <_printf_i+0xa8>
 801cff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cff6:	2b15      	cmp	r3, #21
 801cff8:	d8f6      	bhi.n	801cfe8 <_printf_i+0x28>
 801cffa:	a101      	add	r1, pc, #4	@ (adr r1, 801d000 <_printf_i+0x40>)
 801cffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d000:	0801d059 	.word	0x0801d059
 801d004:	0801d06d 	.word	0x0801d06d
 801d008:	0801cfe9 	.word	0x0801cfe9
 801d00c:	0801cfe9 	.word	0x0801cfe9
 801d010:	0801cfe9 	.word	0x0801cfe9
 801d014:	0801cfe9 	.word	0x0801cfe9
 801d018:	0801d06d 	.word	0x0801d06d
 801d01c:	0801cfe9 	.word	0x0801cfe9
 801d020:	0801cfe9 	.word	0x0801cfe9
 801d024:	0801cfe9 	.word	0x0801cfe9
 801d028:	0801cfe9 	.word	0x0801cfe9
 801d02c:	0801d16d 	.word	0x0801d16d
 801d030:	0801d097 	.word	0x0801d097
 801d034:	0801d127 	.word	0x0801d127
 801d038:	0801cfe9 	.word	0x0801cfe9
 801d03c:	0801cfe9 	.word	0x0801cfe9
 801d040:	0801d18f 	.word	0x0801d18f
 801d044:	0801cfe9 	.word	0x0801cfe9
 801d048:	0801d097 	.word	0x0801d097
 801d04c:	0801cfe9 	.word	0x0801cfe9
 801d050:	0801cfe9 	.word	0x0801cfe9
 801d054:	0801d12f 	.word	0x0801d12f
 801d058:	6833      	ldr	r3, [r6, #0]
 801d05a:	1d1a      	adds	r2, r3, #4
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	6032      	str	r2, [r6, #0]
 801d060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d068:	2301      	movs	r3, #1
 801d06a:	e09d      	b.n	801d1a8 <_printf_i+0x1e8>
 801d06c:	6833      	ldr	r3, [r6, #0]
 801d06e:	6820      	ldr	r0, [r4, #0]
 801d070:	1d19      	adds	r1, r3, #4
 801d072:	6031      	str	r1, [r6, #0]
 801d074:	0606      	lsls	r6, r0, #24
 801d076:	d501      	bpl.n	801d07c <_printf_i+0xbc>
 801d078:	681d      	ldr	r5, [r3, #0]
 801d07a:	e003      	b.n	801d084 <_printf_i+0xc4>
 801d07c:	0645      	lsls	r5, r0, #25
 801d07e:	d5fb      	bpl.n	801d078 <_printf_i+0xb8>
 801d080:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d084:	2d00      	cmp	r5, #0
 801d086:	da03      	bge.n	801d090 <_printf_i+0xd0>
 801d088:	232d      	movs	r3, #45	@ 0x2d
 801d08a:	426d      	negs	r5, r5
 801d08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d090:	4859      	ldr	r0, [pc, #356]	@ (801d1f8 <_printf_i+0x238>)
 801d092:	230a      	movs	r3, #10
 801d094:	e011      	b.n	801d0ba <_printf_i+0xfa>
 801d096:	6821      	ldr	r1, [r4, #0]
 801d098:	6833      	ldr	r3, [r6, #0]
 801d09a:	0608      	lsls	r0, r1, #24
 801d09c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d0a0:	d402      	bmi.n	801d0a8 <_printf_i+0xe8>
 801d0a2:	0649      	lsls	r1, r1, #25
 801d0a4:	bf48      	it	mi
 801d0a6:	b2ad      	uxthmi	r5, r5
 801d0a8:	2f6f      	cmp	r7, #111	@ 0x6f
 801d0aa:	4853      	ldr	r0, [pc, #332]	@ (801d1f8 <_printf_i+0x238>)
 801d0ac:	6033      	str	r3, [r6, #0]
 801d0ae:	bf14      	ite	ne
 801d0b0:	230a      	movne	r3, #10
 801d0b2:	2308      	moveq	r3, #8
 801d0b4:	2100      	movs	r1, #0
 801d0b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d0ba:	6866      	ldr	r6, [r4, #4]
 801d0bc:	60a6      	str	r6, [r4, #8]
 801d0be:	2e00      	cmp	r6, #0
 801d0c0:	bfa2      	ittt	ge
 801d0c2:	6821      	ldrge	r1, [r4, #0]
 801d0c4:	f021 0104 	bicge.w	r1, r1, #4
 801d0c8:	6021      	strge	r1, [r4, #0]
 801d0ca:	b90d      	cbnz	r5, 801d0d0 <_printf_i+0x110>
 801d0cc:	2e00      	cmp	r6, #0
 801d0ce:	d04b      	beq.n	801d168 <_printf_i+0x1a8>
 801d0d0:	4616      	mov	r6, r2
 801d0d2:	fbb5 f1f3 	udiv	r1, r5, r3
 801d0d6:	fb03 5711 	mls	r7, r3, r1, r5
 801d0da:	5dc7      	ldrb	r7, [r0, r7]
 801d0dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d0e0:	462f      	mov	r7, r5
 801d0e2:	42bb      	cmp	r3, r7
 801d0e4:	460d      	mov	r5, r1
 801d0e6:	d9f4      	bls.n	801d0d2 <_printf_i+0x112>
 801d0e8:	2b08      	cmp	r3, #8
 801d0ea:	d10b      	bne.n	801d104 <_printf_i+0x144>
 801d0ec:	6823      	ldr	r3, [r4, #0]
 801d0ee:	07df      	lsls	r7, r3, #31
 801d0f0:	d508      	bpl.n	801d104 <_printf_i+0x144>
 801d0f2:	6923      	ldr	r3, [r4, #16]
 801d0f4:	6861      	ldr	r1, [r4, #4]
 801d0f6:	4299      	cmp	r1, r3
 801d0f8:	bfde      	ittt	le
 801d0fa:	2330      	movle	r3, #48	@ 0x30
 801d0fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d100:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d104:	1b92      	subs	r2, r2, r6
 801d106:	6122      	str	r2, [r4, #16]
 801d108:	f8cd a000 	str.w	sl, [sp]
 801d10c:	464b      	mov	r3, r9
 801d10e:	aa03      	add	r2, sp, #12
 801d110:	4621      	mov	r1, r4
 801d112:	4640      	mov	r0, r8
 801d114:	f7ff fee6 	bl	801cee4 <_printf_common>
 801d118:	3001      	adds	r0, #1
 801d11a:	d14a      	bne.n	801d1b2 <_printf_i+0x1f2>
 801d11c:	f04f 30ff 	mov.w	r0, #4294967295
 801d120:	b004      	add	sp, #16
 801d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d126:	6823      	ldr	r3, [r4, #0]
 801d128:	f043 0320 	orr.w	r3, r3, #32
 801d12c:	6023      	str	r3, [r4, #0]
 801d12e:	4833      	ldr	r0, [pc, #204]	@ (801d1fc <_printf_i+0x23c>)
 801d130:	2778      	movs	r7, #120	@ 0x78
 801d132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d136:	6823      	ldr	r3, [r4, #0]
 801d138:	6831      	ldr	r1, [r6, #0]
 801d13a:	061f      	lsls	r7, r3, #24
 801d13c:	f851 5b04 	ldr.w	r5, [r1], #4
 801d140:	d402      	bmi.n	801d148 <_printf_i+0x188>
 801d142:	065f      	lsls	r7, r3, #25
 801d144:	bf48      	it	mi
 801d146:	b2ad      	uxthmi	r5, r5
 801d148:	6031      	str	r1, [r6, #0]
 801d14a:	07d9      	lsls	r1, r3, #31
 801d14c:	bf44      	itt	mi
 801d14e:	f043 0320 	orrmi.w	r3, r3, #32
 801d152:	6023      	strmi	r3, [r4, #0]
 801d154:	b11d      	cbz	r5, 801d15e <_printf_i+0x19e>
 801d156:	2310      	movs	r3, #16
 801d158:	e7ac      	b.n	801d0b4 <_printf_i+0xf4>
 801d15a:	4827      	ldr	r0, [pc, #156]	@ (801d1f8 <_printf_i+0x238>)
 801d15c:	e7e9      	b.n	801d132 <_printf_i+0x172>
 801d15e:	6823      	ldr	r3, [r4, #0]
 801d160:	f023 0320 	bic.w	r3, r3, #32
 801d164:	6023      	str	r3, [r4, #0]
 801d166:	e7f6      	b.n	801d156 <_printf_i+0x196>
 801d168:	4616      	mov	r6, r2
 801d16a:	e7bd      	b.n	801d0e8 <_printf_i+0x128>
 801d16c:	6833      	ldr	r3, [r6, #0]
 801d16e:	6825      	ldr	r5, [r4, #0]
 801d170:	6961      	ldr	r1, [r4, #20]
 801d172:	1d18      	adds	r0, r3, #4
 801d174:	6030      	str	r0, [r6, #0]
 801d176:	062e      	lsls	r6, r5, #24
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	d501      	bpl.n	801d180 <_printf_i+0x1c0>
 801d17c:	6019      	str	r1, [r3, #0]
 801d17e:	e002      	b.n	801d186 <_printf_i+0x1c6>
 801d180:	0668      	lsls	r0, r5, #25
 801d182:	d5fb      	bpl.n	801d17c <_printf_i+0x1bc>
 801d184:	8019      	strh	r1, [r3, #0]
 801d186:	2300      	movs	r3, #0
 801d188:	6123      	str	r3, [r4, #16]
 801d18a:	4616      	mov	r6, r2
 801d18c:	e7bc      	b.n	801d108 <_printf_i+0x148>
 801d18e:	6833      	ldr	r3, [r6, #0]
 801d190:	1d1a      	adds	r2, r3, #4
 801d192:	6032      	str	r2, [r6, #0]
 801d194:	681e      	ldr	r6, [r3, #0]
 801d196:	6862      	ldr	r2, [r4, #4]
 801d198:	2100      	movs	r1, #0
 801d19a:	4630      	mov	r0, r6
 801d19c:	f7e3 f8b8 	bl	8000310 <memchr>
 801d1a0:	b108      	cbz	r0, 801d1a6 <_printf_i+0x1e6>
 801d1a2:	1b80      	subs	r0, r0, r6
 801d1a4:	6060      	str	r0, [r4, #4]
 801d1a6:	6863      	ldr	r3, [r4, #4]
 801d1a8:	6123      	str	r3, [r4, #16]
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d1b0:	e7aa      	b.n	801d108 <_printf_i+0x148>
 801d1b2:	6923      	ldr	r3, [r4, #16]
 801d1b4:	4632      	mov	r2, r6
 801d1b6:	4649      	mov	r1, r9
 801d1b8:	4640      	mov	r0, r8
 801d1ba:	47d0      	blx	sl
 801d1bc:	3001      	adds	r0, #1
 801d1be:	d0ad      	beq.n	801d11c <_printf_i+0x15c>
 801d1c0:	6823      	ldr	r3, [r4, #0]
 801d1c2:	079b      	lsls	r3, r3, #30
 801d1c4:	d413      	bmi.n	801d1ee <_printf_i+0x22e>
 801d1c6:	68e0      	ldr	r0, [r4, #12]
 801d1c8:	9b03      	ldr	r3, [sp, #12]
 801d1ca:	4298      	cmp	r0, r3
 801d1cc:	bfb8      	it	lt
 801d1ce:	4618      	movlt	r0, r3
 801d1d0:	e7a6      	b.n	801d120 <_printf_i+0x160>
 801d1d2:	2301      	movs	r3, #1
 801d1d4:	4632      	mov	r2, r6
 801d1d6:	4649      	mov	r1, r9
 801d1d8:	4640      	mov	r0, r8
 801d1da:	47d0      	blx	sl
 801d1dc:	3001      	adds	r0, #1
 801d1de:	d09d      	beq.n	801d11c <_printf_i+0x15c>
 801d1e0:	3501      	adds	r5, #1
 801d1e2:	68e3      	ldr	r3, [r4, #12]
 801d1e4:	9903      	ldr	r1, [sp, #12]
 801d1e6:	1a5b      	subs	r3, r3, r1
 801d1e8:	42ab      	cmp	r3, r5
 801d1ea:	dcf2      	bgt.n	801d1d2 <_printf_i+0x212>
 801d1ec:	e7eb      	b.n	801d1c6 <_printf_i+0x206>
 801d1ee:	2500      	movs	r5, #0
 801d1f0:	f104 0619 	add.w	r6, r4, #25
 801d1f4:	e7f5      	b.n	801d1e2 <_printf_i+0x222>
 801d1f6:	bf00      	nop
 801d1f8:	08022758 	.word	0x08022758
 801d1fc:	08022769 	.word	0x08022769

0801d200 <std>:
 801d200:	2300      	movs	r3, #0
 801d202:	b510      	push	{r4, lr}
 801d204:	4604      	mov	r4, r0
 801d206:	e9c0 3300 	strd	r3, r3, [r0]
 801d20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d20e:	6083      	str	r3, [r0, #8]
 801d210:	8181      	strh	r1, [r0, #12]
 801d212:	6643      	str	r3, [r0, #100]	@ 0x64
 801d214:	81c2      	strh	r2, [r0, #14]
 801d216:	6183      	str	r3, [r0, #24]
 801d218:	4619      	mov	r1, r3
 801d21a:	2208      	movs	r2, #8
 801d21c:	305c      	adds	r0, #92	@ 0x5c
 801d21e:	f000 fa09 	bl	801d634 <memset>
 801d222:	4b0d      	ldr	r3, [pc, #52]	@ (801d258 <std+0x58>)
 801d224:	6263      	str	r3, [r4, #36]	@ 0x24
 801d226:	4b0d      	ldr	r3, [pc, #52]	@ (801d25c <std+0x5c>)
 801d228:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d22a:	4b0d      	ldr	r3, [pc, #52]	@ (801d260 <std+0x60>)
 801d22c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d22e:	4b0d      	ldr	r3, [pc, #52]	@ (801d264 <std+0x64>)
 801d230:	6323      	str	r3, [r4, #48]	@ 0x30
 801d232:	4b0d      	ldr	r3, [pc, #52]	@ (801d268 <std+0x68>)
 801d234:	6224      	str	r4, [r4, #32]
 801d236:	429c      	cmp	r4, r3
 801d238:	d006      	beq.n	801d248 <std+0x48>
 801d23a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d23e:	4294      	cmp	r4, r2
 801d240:	d002      	beq.n	801d248 <std+0x48>
 801d242:	33d0      	adds	r3, #208	@ 0xd0
 801d244:	429c      	cmp	r4, r3
 801d246:	d105      	bne.n	801d254 <std+0x54>
 801d248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d250:	f000 babc 	b.w	801d7cc <__retarget_lock_init_recursive>
 801d254:	bd10      	pop	{r4, pc}
 801d256:	bf00      	nop
 801d258:	0801d465 	.word	0x0801d465
 801d25c:	0801d487 	.word	0x0801d487
 801d260:	0801d4bf 	.word	0x0801d4bf
 801d264:	0801d4e3 	.word	0x0801d4e3
 801d268:	2400cdc8 	.word	0x2400cdc8

0801d26c <stdio_exit_handler>:
 801d26c:	4a02      	ldr	r2, [pc, #8]	@ (801d278 <stdio_exit_handler+0xc>)
 801d26e:	4903      	ldr	r1, [pc, #12]	@ (801d27c <stdio_exit_handler+0x10>)
 801d270:	4803      	ldr	r0, [pc, #12]	@ (801d280 <stdio_exit_handler+0x14>)
 801d272:	f000 b869 	b.w	801d348 <_fwalk_sglue>
 801d276:	bf00      	nop
 801d278:	24000038 	.word	0x24000038
 801d27c:	0801f07d 	.word	0x0801f07d
 801d280:	24000048 	.word	0x24000048

0801d284 <cleanup_stdio>:
 801d284:	6841      	ldr	r1, [r0, #4]
 801d286:	4b0c      	ldr	r3, [pc, #48]	@ (801d2b8 <cleanup_stdio+0x34>)
 801d288:	4299      	cmp	r1, r3
 801d28a:	b510      	push	{r4, lr}
 801d28c:	4604      	mov	r4, r0
 801d28e:	d001      	beq.n	801d294 <cleanup_stdio+0x10>
 801d290:	f001 fef4 	bl	801f07c <_fflush_r>
 801d294:	68a1      	ldr	r1, [r4, #8]
 801d296:	4b09      	ldr	r3, [pc, #36]	@ (801d2bc <cleanup_stdio+0x38>)
 801d298:	4299      	cmp	r1, r3
 801d29a:	d002      	beq.n	801d2a2 <cleanup_stdio+0x1e>
 801d29c:	4620      	mov	r0, r4
 801d29e:	f001 feed 	bl	801f07c <_fflush_r>
 801d2a2:	68e1      	ldr	r1, [r4, #12]
 801d2a4:	4b06      	ldr	r3, [pc, #24]	@ (801d2c0 <cleanup_stdio+0x3c>)
 801d2a6:	4299      	cmp	r1, r3
 801d2a8:	d004      	beq.n	801d2b4 <cleanup_stdio+0x30>
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2b0:	f001 bee4 	b.w	801f07c <_fflush_r>
 801d2b4:	bd10      	pop	{r4, pc}
 801d2b6:	bf00      	nop
 801d2b8:	2400cdc8 	.word	0x2400cdc8
 801d2bc:	2400ce30 	.word	0x2400ce30
 801d2c0:	2400ce98 	.word	0x2400ce98

0801d2c4 <global_stdio_init.part.0>:
 801d2c4:	b510      	push	{r4, lr}
 801d2c6:	4b0b      	ldr	r3, [pc, #44]	@ (801d2f4 <global_stdio_init.part.0+0x30>)
 801d2c8:	4c0b      	ldr	r4, [pc, #44]	@ (801d2f8 <global_stdio_init.part.0+0x34>)
 801d2ca:	4a0c      	ldr	r2, [pc, #48]	@ (801d2fc <global_stdio_init.part.0+0x38>)
 801d2cc:	601a      	str	r2, [r3, #0]
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	2104      	movs	r1, #4
 801d2d4:	f7ff ff94 	bl	801d200 <std>
 801d2d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d2dc:	2201      	movs	r2, #1
 801d2de:	2109      	movs	r1, #9
 801d2e0:	f7ff ff8e 	bl	801d200 <std>
 801d2e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d2e8:	2202      	movs	r2, #2
 801d2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2ee:	2112      	movs	r1, #18
 801d2f0:	f7ff bf86 	b.w	801d200 <std>
 801d2f4:	2400cf00 	.word	0x2400cf00
 801d2f8:	2400cdc8 	.word	0x2400cdc8
 801d2fc:	0801d26d 	.word	0x0801d26d

0801d300 <__sfp_lock_acquire>:
 801d300:	4801      	ldr	r0, [pc, #4]	@ (801d308 <__sfp_lock_acquire+0x8>)
 801d302:	f000 ba64 	b.w	801d7ce <__retarget_lock_acquire_recursive>
 801d306:	bf00      	nop
 801d308:	2400cf09 	.word	0x2400cf09

0801d30c <__sfp_lock_release>:
 801d30c:	4801      	ldr	r0, [pc, #4]	@ (801d314 <__sfp_lock_release+0x8>)
 801d30e:	f000 ba5f 	b.w	801d7d0 <__retarget_lock_release_recursive>
 801d312:	bf00      	nop
 801d314:	2400cf09 	.word	0x2400cf09

0801d318 <__sinit>:
 801d318:	b510      	push	{r4, lr}
 801d31a:	4604      	mov	r4, r0
 801d31c:	f7ff fff0 	bl	801d300 <__sfp_lock_acquire>
 801d320:	6a23      	ldr	r3, [r4, #32]
 801d322:	b11b      	cbz	r3, 801d32c <__sinit+0x14>
 801d324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d328:	f7ff bff0 	b.w	801d30c <__sfp_lock_release>
 801d32c:	4b04      	ldr	r3, [pc, #16]	@ (801d340 <__sinit+0x28>)
 801d32e:	6223      	str	r3, [r4, #32]
 801d330:	4b04      	ldr	r3, [pc, #16]	@ (801d344 <__sinit+0x2c>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d1f5      	bne.n	801d324 <__sinit+0xc>
 801d338:	f7ff ffc4 	bl	801d2c4 <global_stdio_init.part.0>
 801d33c:	e7f2      	b.n	801d324 <__sinit+0xc>
 801d33e:	bf00      	nop
 801d340:	0801d285 	.word	0x0801d285
 801d344:	2400cf00 	.word	0x2400cf00

0801d348 <_fwalk_sglue>:
 801d348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d34c:	4607      	mov	r7, r0
 801d34e:	4688      	mov	r8, r1
 801d350:	4614      	mov	r4, r2
 801d352:	2600      	movs	r6, #0
 801d354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d358:	f1b9 0901 	subs.w	r9, r9, #1
 801d35c:	d505      	bpl.n	801d36a <_fwalk_sglue+0x22>
 801d35e:	6824      	ldr	r4, [r4, #0]
 801d360:	2c00      	cmp	r4, #0
 801d362:	d1f7      	bne.n	801d354 <_fwalk_sglue+0xc>
 801d364:	4630      	mov	r0, r6
 801d366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d36a:	89ab      	ldrh	r3, [r5, #12]
 801d36c:	2b01      	cmp	r3, #1
 801d36e:	d907      	bls.n	801d380 <_fwalk_sglue+0x38>
 801d370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d374:	3301      	adds	r3, #1
 801d376:	d003      	beq.n	801d380 <_fwalk_sglue+0x38>
 801d378:	4629      	mov	r1, r5
 801d37a:	4638      	mov	r0, r7
 801d37c:	47c0      	blx	r8
 801d37e:	4306      	orrs	r6, r0
 801d380:	3568      	adds	r5, #104	@ 0x68
 801d382:	e7e9      	b.n	801d358 <_fwalk_sglue+0x10>

0801d384 <iprintf>:
 801d384:	b40f      	push	{r0, r1, r2, r3}
 801d386:	b507      	push	{r0, r1, r2, lr}
 801d388:	4906      	ldr	r1, [pc, #24]	@ (801d3a4 <iprintf+0x20>)
 801d38a:	ab04      	add	r3, sp, #16
 801d38c:	6808      	ldr	r0, [r1, #0]
 801d38e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d392:	6881      	ldr	r1, [r0, #8]
 801d394:	9301      	str	r3, [sp, #4]
 801d396:	f001 fcd5 	bl	801ed44 <_vfiprintf_r>
 801d39a:	b003      	add	sp, #12
 801d39c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3a0:	b004      	add	sp, #16
 801d3a2:	4770      	bx	lr
 801d3a4:	24000044 	.word	0x24000044

0801d3a8 <_puts_r>:
 801d3a8:	6a03      	ldr	r3, [r0, #32]
 801d3aa:	b570      	push	{r4, r5, r6, lr}
 801d3ac:	6884      	ldr	r4, [r0, #8]
 801d3ae:	4605      	mov	r5, r0
 801d3b0:	460e      	mov	r6, r1
 801d3b2:	b90b      	cbnz	r3, 801d3b8 <_puts_r+0x10>
 801d3b4:	f7ff ffb0 	bl	801d318 <__sinit>
 801d3b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3ba:	07db      	lsls	r3, r3, #31
 801d3bc:	d405      	bmi.n	801d3ca <_puts_r+0x22>
 801d3be:	89a3      	ldrh	r3, [r4, #12]
 801d3c0:	0598      	lsls	r0, r3, #22
 801d3c2:	d402      	bmi.n	801d3ca <_puts_r+0x22>
 801d3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3c6:	f000 fa02 	bl	801d7ce <__retarget_lock_acquire_recursive>
 801d3ca:	89a3      	ldrh	r3, [r4, #12]
 801d3cc:	0719      	lsls	r1, r3, #28
 801d3ce:	d502      	bpl.n	801d3d6 <_puts_r+0x2e>
 801d3d0:	6923      	ldr	r3, [r4, #16]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d135      	bne.n	801d442 <_puts_r+0x9a>
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	4628      	mov	r0, r5
 801d3da:	f000 f8c5 	bl	801d568 <__swsetup_r>
 801d3de:	b380      	cbz	r0, 801d442 <_puts_r+0x9a>
 801d3e0:	f04f 35ff 	mov.w	r5, #4294967295
 801d3e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3e6:	07da      	lsls	r2, r3, #31
 801d3e8:	d405      	bmi.n	801d3f6 <_puts_r+0x4e>
 801d3ea:	89a3      	ldrh	r3, [r4, #12]
 801d3ec:	059b      	lsls	r3, r3, #22
 801d3ee:	d402      	bmi.n	801d3f6 <_puts_r+0x4e>
 801d3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3f2:	f000 f9ed 	bl	801d7d0 <__retarget_lock_release_recursive>
 801d3f6:	4628      	mov	r0, r5
 801d3f8:	bd70      	pop	{r4, r5, r6, pc}
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	da04      	bge.n	801d408 <_puts_r+0x60>
 801d3fe:	69a2      	ldr	r2, [r4, #24]
 801d400:	429a      	cmp	r2, r3
 801d402:	dc17      	bgt.n	801d434 <_puts_r+0x8c>
 801d404:	290a      	cmp	r1, #10
 801d406:	d015      	beq.n	801d434 <_puts_r+0x8c>
 801d408:	6823      	ldr	r3, [r4, #0]
 801d40a:	1c5a      	adds	r2, r3, #1
 801d40c:	6022      	str	r2, [r4, #0]
 801d40e:	7019      	strb	r1, [r3, #0]
 801d410:	68a3      	ldr	r3, [r4, #8]
 801d412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d416:	3b01      	subs	r3, #1
 801d418:	60a3      	str	r3, [r4, #8]
 801d41a:	2900      	cmp	r1, #0
 801d41c:	d1ed      	bne.n	801d3fa <_puts_r+0x52>
 801d41e:	2b00      	cmp	r3, #0
 801d420:	da11      	bge.n	801d446 <_puts_r+0x9e>
 801d422:	4622      	mov	r2, r4
 801d424:	210a      	movs	r1, #10
 801d426:	4628      	mov	r0, r5
 801d428:	f000 f85f 	bl	801d4ea <__swbuf_r>
 801d42c:	3001      	adds	r0, #1
 801d42e:	d0d7      	beq.n	801d3e0 <_puts_r+0x38>
 801d430:	250a      	movs	r5, #10
 801d432:	e7d7      	b.n	801d3e4 <_puts_r+0x3c>
 801d434:	4622      	mov	r2, r4
 801d436:	4628      	mov	r0, r5
 801d438:	f000 f857 	bl	801d4ea <__swbuf_r>
 801d43c:	3001      	adds	r0, #1
 801d43e:	d1e7      	bne.n	801d410 <_puts_r+0x68>
 801d440:	e7ce      	b.n	801d3e0 <_puts_r+0x38>
 801d442:	3e01      	subs	r6, #1
 801d444:	e7e4      	b.n	801d410 <_puts_r+0x68>
 801d446:	6823      	ldr	r3, [r4, #0]
 801d448:	1c5a      	adds	r2, r3, #1
 801d44a:	6022      	str	r2, [r4, #0]
 801d44c:	220a      	movs	r2, #10
 801d44e:	701a      	strb	r2, [r3, #0]
 801d450:	e7ee      	b.n	801d430 <_puts_r+0x88>
	...

0801d454 <puts>:
 801d454:	4b02      	ldr	r3, [pc, #8]	@ (801d460 <puts+0xc>)
 801d456:	4601      	mov	r1, r0
 801d458:	6818      	ldr	r0, [r3, #0]
 801d45a:	f7ff bfa5 	b.w	801d3a8 <_puts_r>
 801d45e:	bf00      	nop
 801d460:	24000044 	.word	0x24000044

0801d464 <__sread>:
 801d464:	b510      	push	{r4, lr}
 801d466:	460c      	mov	r4, r1
 801d468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d46c:	f000 f966 	bl	801d73c <_read_r>
 801d470:	2800      	cmp	r0, #0
 801d472:	bfab      	itete	ge
 801d474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d476:	89a3      	ldrhlt	r3, [r4, #12]
 801d478:	181b      	addge	r3, r3, r0
 801d47a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d47e:	bfac      	ite	ge
 801d480:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d482:	81a3      	strhlt	r3, [r4, #12]
 801d484:	bd10      	pop	{r4, pc}

0801d486 <__swrite>:
 801d486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d48a:	461f      	mov	r7, r3
 801d48c:	898b      	ldrh	r3, [r1, #12]
 801d48e:	05db      	lsls	r3, r3, #23
 801d490:	4605      	mov	r5, r0
 801d492:	460c      	mov	r4, r1
 801d494:	4616      	mov	r6, r2
 801d496:	d505      	bpl.n	801d4a4 <__swrite+0x1e>
 801d498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d49c:	2302      	movs	r3, #2
 801d49e:	2200      	movs	r2, #0
 801d4a0:	f000 f93a 	bl	801d718 <_lseek_r>
 801d4a4:	89a3      	ldrh	r3, [r4, #12]
 801d4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d4ae:	81a3      	strh	r3, [r4, #12]
 801d4b0:	4632      	mov	r2, r6
 801d4b2:	463b      	mov	r3, r7
 801d4b4:	4628      	mov	r0, r5
 801d4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ba:	f000 b951 	b.w	801d760 <_write_r>

0801d4be <__sseek>:
 801d4be:	b510      	push	{r4, lr}
 801d4c0:	460c      	mov	r4, r1
 801d4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4c6:	f000 f927 	bl	801d718 <_lseek_r>
 801d4ca:	1c43      	adds	r3, r0, #1
 801d4cc:	89a3      	ldrh	r3, [r4, #12]
 801d4ce:	bf15      	itete	ne
 801d4d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d4d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d4d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d4da:	81a3      	strheq	r3, [r4, #12]
 801d4dc:	bf18      	it	ne
 801d4de:	81a3      	strhne	r3, [r4, #12]
 801d4e0:	bd10      	pop	{r4, pc}

0801d4e2 <__sclose>:
 801d4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4e6:	f000 b8b1 	b.w	801d64c <_close_r>

0801d4ea <__swbuf_r>:
 801d4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4ec:	460e      	mov	r6, r1
 801d4ee:	4614      	mov	r4, r2
 801d4f0:	4605      	mov	r5, r0
 801d4f2:	b118      	cbz	r0, 801d4fc <__swbuf_r+0x12>
 801d4f4:	6a03      	ldr	r3, [r0, #32]
 801d4f6:	b90b      	cbnz	r3, 801d4fc <__swbuf_r+0x12>
 801d4f8:	f7ff ff0e 	bl	801d318 <__sinit>
 801d4fc:	69a3      	ldr	r3, [r4, #24]
 801d4fe:	60a3      	str	r3, [r4, #8]
 801d500:	89a3      	ldrh	r3, [r4, #12]
 801d502:	071a      	lsls	r2, r3, #28
 801d504:	d501      	bpl.n	801d50a <__swbuf_r+0x20>
 801d506:	6923      	ldr	r3, [r4, #16]
 801d508:	b943      	cbnz	r3, 801d51c <__swbuf_r+0x32>
 801d50a:	4621      	mov	r1, r4
 801d50c:	4628      	mov	r0, r5
 801d50e:	f000 f82b 	bl	801d568 <__swsetup_r>
 801d512:	b118      	cbz	r0, 801d51c <__swbuf_r+0x32>
 801d514:	f04f 37ff 	mov.w	r7, #4294967295
 801d518:	4638      	mov	r0, r7
 801d51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d51c:	6823      	ldr	r3, [r4, #0]
 801d51e:	6922      	ldr	r2, [r4, #16]
 801d520:	1a98      	subs	r0, r3, r2
 801d522:	6963      	ldr	r3, [r4, #20]
 801d524:	b2f6      	uxtb	r6, r6
 801d526:	4283      	cmp	r3, r0
 801d528:	4637      	mov	r7, r6
 801d52a:	dc05      	bgt.n	801d538 <__swbuf_r+0x4e>
 801d52c:	4621      	mov	r1, r4
 801d52e:	4628      	mov	r0, r5
 801d530:	f001 fda4 	bl	801f07c <_fflush_r>
 801d534:	2800      	cmp	r0, #0
 801d536:	d1ed      	bne.n	801d514 <__swbuf_r+0x2a>
 801d538:	68a3      	ldr	r3, [r4, #8]
 801d53a:	3b01      	subs	r3, #1
 801d53c:	60a3      	str	r3, [r4, #8]
 801d53e:	6823      	ldr	r3, [r4, #0]
 801d540:	1c5a      	adds	r2, r3, #1
 801d542:	6022      	str	r2, [r4, #0]
 801d544:	701e      	strb	r6, [r3, #0]
 801d546:	6962      	ldr	r2, [r4, #20]
 801d548:	1c43      	adds	r3, r0, #1
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d004      	beq.n	801d558 <__swbuf_r+0x6e>
 801d54e:	89a3      	ldrh	r3, [r4, #12]
 801d550:	07db      	lsls	r3, r3, #31
 801d552:	d5e1      	bpl.n	801d518 <__swbuf_r+0x2e>
 801d554:	2e0a      	cmp	r6, #10
 801d556:	d1df      	bne.n	801d518 <__swbuf_r+0x2e>
 801d558:	4621      	mov	r1, r4
 801d55a:	4628      	mov	r0, r5
 801d55c:	f001 fd8e 	bl	801f07c <_fflush_r>
 801d560:	2800      	cmp	r0, #0
 801d562:	d0d9      	beq.n	801d518 <__swbuf_r+0x2e>
 801d564:	e7d6      	b.n	801d514 <__swbuf_r+0x2a>
	...

0801d568 <__swsetup_r>:
 801d568:	b538      	push	{r3, r4, r5, lr}
 801d56a:	4b29      	ldr	r3, [pc, #164]	@ (801d610 <__swsetup_r+0xa8>)
 801d56c:	4605      	mov	r5, r0
 801d56e:	6818      	ldr	r0, [r3, #0]
 801d570:	460c      	mov	r4, r1
 801d572:	b118      	cbz	r0, 801d57c <__swsetup_r+0x14>
 801d574:	6a03      	ldr	r3, [r0, #32]
 801d576:	b90b      	cbnz	r3, 801d57c <__swsetup_r+0x14>
 801d578:	f7ff fece 	bl	801d318 <__sinit>
 801d57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d580:	0719      	lsls	r1, r3, #28
 801d582:	d422      	bmi.n	801d5ca <__swsetup_r+0x62>
 801d584:	06da      	lsls	r2, r3, #27
 801d586:	d407      	bmi.n	801d598 <__swsetup_r+0x30>
 801d588:	2209      	movs	r2, #9
 801d58a:	602a      	str	r2, [r5, #0]
 801d58c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d590:	81a3      	strh	r3, [r4, #12]
 801d592:	f04f 30ff 	mov.w	r0, #4294967295
 801d596:	e033      	b.n	801d600 <__swsetup_r+0x98>
 801d598:	0758      	lsls	r0, r3, #29
 801d59a:	d512      	bpl.n	801d5c2 <__swsetup_r+0x5a>
 801d59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d59e:	b141      	cbz	r1, 801d5b2 <__swsetup_r+0x4a>
 801d5a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d5a4:	4299      	cmp	r1, r3
 801d5a6:	d002      	beq.n	801d5ae <__swsetup_r+0x46>
 801d5a8:	4628      	mov	r0, r5
 801d5aa:	f000 ff1f 	bl	801e3ec <_free_r>
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801d5b2:	89a3      	ldrh	r3, [r4, #12]
 801d5b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d5b8:	81a3      	strh	r3, [r4, #12]
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	6063      	str	r3, [r4, #4]
 801d5be:	6923      	ldr	r3, [r4, #16]
 801d5c0:	6023      	str	r3, [r4, #0]
 801d5c2:	89a3      	ldrh	r3, [r4, #12]
 801d5c4:	f043 0308 	orr.w	r3, r3, #8
 801d5c8:	81a3      	strh	r3, [r4, #12]
 801d5ca:	6923      	ldr	r3, [r4, #16]
 801d5cc:	b94b      	cbnz	r3, 801d5e2 <__swsetup_r+0x7a>
 801d5ce:	89a3      	ldrh	r3, [r4, #12]
 801d5d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d5d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d5d8:	d003      	beq.n	801d5e2 <__swsetup_r+0x7a>
 801d5da:	4621      	mov	r1, r4
 801d5dc:	4628      	mov	r0, r5
 801d5de:	f001 fdad 	bl	801f13c <__smakebuf_r>
 801d5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5e6:	f013 0201 	ands.w	r2, r3, #1
 801d5ea:	d00a      	beq.n	801d602 <__swsetup_r+0x9a>
 801d5ec:	2200      	movs	r2, #0
 801d5ee:	60a2      	str	r2, [r4, #8]
 801d5f0:	6962      	ldr	r2, [r4, #20]
 801d5f2:	4252      	negs	r2, r2
 801d5f4:	61a2      	str	r2, [r4, #24]
 801d5f6:	6922      	ldr	r2, [r4, #16]
 801d5f8:	b942      	cbnz	r2, 801d60c <__swsetup_r+0xa4>
 801d5fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d5fe:	d1c5      	bne.n	801d58c <__swsetup_r+0x24>
 801d600:	bd38      	pop	{r3, r4, r5, pc}
 801d602:	0799      	lsls	r1, r3, #30
 801d604:	bf58      	it	pl
 801d606:	6962      	ldrpl	r2, [r4, #20]
 801d608:	60a2      	str	r2, [r4, #8]
 801d60a:	e7f4      	b.n	801d5f6 <__swsetup_r+0x8e>
 801d60c:	2000      	movs	r0, #0
 801d60e:	e7f7      	b.n	801d600 <__swsetup_r+0x98>
 801d610:	24000044 	.word	0x24000044

0801d614 <memcmp>:
 801d614:	b510      	push	{r4, lr}
 801d616:	3901      	subs	r1, #1
 801d618:	4402      	add	r2, r0
 801d61a:	4290      	cmp	r0, r2
 801d61c:	d101      	bne.n	801d622 <memcmp+0xe>
 801d61e:	2000      	movs	r0, #0
 801d620:	e005      	b.n	801d62e <memcmp+0x1a>
 801d622:	7803      	ldrb	r3, [r0, #0]
 801d624:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d628:	42a3      	cmp	r3, r4
 801d62a:	d001      	beq.n	801d630 <memcmp+0x1c>
 801d62c:	1b18      	subs	r0, r3, r4
 801d62e:	bd10      	pop	{r4, pc}
 801d630:	3001      	adds	r0, #1
 801d632:	e7f2      	b.n	801d61a <memcmp+0x6>

0801d634 <memset>:
 801d634:	4402      	add	r2, r0
 801d636:	4603      	mov	r3, r0
 801d638:	4293      	cmp	r3, r2
 801d63a:	d100      	bne.n	801d63e <memset+0xa>
 801d63c:	4770      	bx	lr
 801d63e:	f803 1b01 	strb.w	r1, [r3], #1
 801d642:	e7f9      	b.n	801d638 <memset+0x4>

0801d644 <_localeconv_r>:
 801d644:	4800      	ldr	r0, [pc, #0]	@ (801d648 <_localeconv_r+0x4>)
 801d646:	4770      	bx	lr
 801d648:	24000184 	.word	0x24000184

0801d64c <_close_r>:
 801d64c:	b538      	push	{r3, r4, r5, lr}
 801d64e:	4d06      	ldr	r5, [pc, #24]	@ (801d668 <_close_r+0x1c>)
 801d650:	2300      	movs	r3, #0
 801d652:	4604      	mov	r4, r0
 801d654:	4608      	mov	r0, r1
 801d656:	602b      	str	r3, [r5, #0]
 801d658:	f7e4 f8da 	bl	8001810 <_close>
 801d65c:	1c43      	adds	r3, r0, #1
 801d65e:	d102      	bne.n	801d666 <_close_r+0x1a>
 801d660:	682b      	ldr	r3, [r5, #0]
 801d662:	b103      	cbz	r3, 801d666 <_close_r+0x1a>
 801d664:	6023      	str	r3, [r4, #0]
 801d666:	bd38      	pop	{r3, r4, r5, pc}
 801d668:	2400cf04 	.word	0x2400cf04

0801d66c <_reclaim_reent>:
 801d66c:	4b29      	ldr	r3, [pc, #164]	@ (801d714 <_reclaim_reent+0xa8>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	4283      	cmp	r3, r0
 801d672:	b570      	push	{r4, r5, r6, lr}
 801d674:	4604      	mov	r4, r0
 801d676:	d04b      	beq.n	801d710 <_reclaim_reent+0xa4>
 801d678:	69c3      	ldr	r3, [r0, #28]
 801d67a:	b1ab      	cbz	r3, 801d6a8 <_reclaim_reent+0x3c>
 801d67c:	68db      	ldr	r3, [r3, #12]
 801d67e:	b16b      	cbz	r3, 801d69c <_reclaim_reent+0x30>
 801d680:	2500      	movs	r5, #0
 801d682:	69e3      	ldr	r3, [r4, #28]
 801d684:	68db      	ldr	r3, [r3, #12]
 801d686:	5959      	ldr	r1, [r3, r5]
 801d688:	2900      	cmp	r1, #0
 801d68a:	d13b      	bne.n	801d704 <_reclaim_reent+0x98>
 801d68c:	3504      	adds	r5, #4
 801d68e:	2d80      	cmp	r5, #128	@ 0x80
 801d690:	d1f7      	bne.n	801d682 <_reclaim_reent+0x16>
 801d692:	69e3      	ldr	r3, [r4, #28]
 801d694:	4620      	mov	r0, r4
 801d696:	68d9      	ldr	r1, [r3, #12]
 801d698:	f000 fea8 	bl	801e3ec <_free_r>
 801d69c:	69e3      	ldr	r3, [r4, #28]
 801d69e:	6819      	ldr	r1, [r3, #0]
 801d6a0:	b111      	cbz	r1, 801d6a8 <_reclaim_reent+0x3c>
 801d6a2:	4620      	mov	r0, r4
 801d6a4:	f000 fea2 	bl	801e3ec <_free_r>
 801d6a8:	6961      	ldr	r1, [r4, #20]
 801d6aa:	b111      	cbz	r1, 801d6b2 <_reclaim_reent+0x46>
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	f000 fe9d 	bl	801e3ec <_free_r>
 801d6b2:	69e1      	ldr	r1, [r4, #28]
 801d6b4:	b111      	cbz	r1, 801d6bc <_reclaim_reent+0x50>
 801d6b6:	4620      	mov	r0, r4
 801d6b8:	f000 fe98 	bl	801e3ec <_free_r>
 801d6bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d6be:	b111      	cbz	r1, 801d6c6 <_reclaim_reent+0x5a>
 801d6c0:	4620      	mov	r0, r4
 801d6c2:	f000 fe93 	bl	801e3ec <_free_r>
 801d6c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d6c8:	b111      	cbz	r1, 801d6d0 <_reclaim_reent+0x64>
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	f000 fe8e 	bl	801e3ec <_free_r>
 801d6d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d6d2:	b111      	cbz	r1, 801d6da <_reclaim_reent+0x6e>
 801d6d4:	4620      	mov	r0, r4
 801d6d6:	f000 fe89 	bl	801e3ec <_free_r>
 801d6da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d6dc:	b111      	cbz	r1, 801d6e4 <_reclaim_reent+0x78>
 801d6de:	4620      	mov	r0, r4
 801d6e0:	f000 fe84 	bl	801e3ec <_free_r>
 801d6e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d6e6:	b111      	cbz	r1, 801d6ee <_reclaim_reent+0x82>
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	f000 fe7f 	bl	801e3ec <_free_r>
 801d6ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d6f0:	b111      	cbz	r1, 801d6f8 <_reclaim_reent+0x8c>
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f000 fe7a 	bl	801e3ec <_free_r>
 801d6f8:	6a23      	ldr	r3, [r4, #32]
 801d6fa:	b14b      	cbz	r3, 801d710 <_reclaim_reent+0xa4>
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d702:	4718      	bx	r3
 801d704:	680e      	ldr	r6, [r1, #0]
 801d706:	4620      	mov	r0, r4
 801d708:	f000 fe70 	bl	801e3ec <_free_r>
 801d70c:	4631      	mov	r1, r6
 801d70e:	e7bb      	b.n	801d688 <_reclaim_reent+0x1c>
 801d710:	bd70      	pop	{r4, r5, r6, pc}
 801d712:	bf00      	nop
 801d714:	24000044 	.word	0x24000044

0801d718 <_lseek_r>:
 801d718:	b538      	push	{r3, r4, r5, lr}
 801d71a:	4d07      	ldr	r5, [pc, #28]	@ (801d738 <_lseek_r+0x20>)
 801d71c:	4604      	mov	r4, r0
 801d71e:	4608      	mov	r0, r1
 801d720:	4611      	mov	r1, r2
 801d722:	2200      	movs	r2, #0
 801d724:	602a      	str	r2, [r5, #0]
 801d726:	461a      	mov	r2, r3
 801d728:	f7e4 f899 	bl	800185e <_lseek>
 801d72c:	1c43      	adds	r3, r0, #1
 801d72e:	d102      	bne.n	801d736 <_lseek_r+0x1e>
 801d730:	682b      	ldr	r3, [r5, #0]
 801d732:	b103      	cbz	r3, 801d736 <_lseek_r+0x1e>
 801d734:	6023      	str	r3, [r4, #0]
 801d736:	bd38      	pop	{r3, r4, r5, pc}
 801d738:	2400cf04 	.word	0x2400cf04

0801d73c <_read_r>:
 801d73c:	b538      	push	{r3, r4, r5, lr}
 801d73e:	4d07      	ldr	r5, [pc, #28]	@ (801d75c <_read_r+0x20>)
 801d740:	4604      	mov	r4, r0
 801d742:	4608      	mov	r0, r1
 801d744:	4611      	mov	r1, r2
 801d746:	2200      	movs	r2, #0
 801d748:	602a      	str	r2, [r5, #0]
 801d74a:	461a      	mov	r2, r3
 801d74c:	f7e4 f843 	bl	80017d6 <_read>
 801d750:	1c43      	adds	r3, r0, #1
 801d752:	d102      	bne.n	801d75a <_read_r+0x1e>
 801d754:	682b      	ldr	r3, [r5, #0]
 801d756:	b103      	cbz	r3, 801d75a <_read_r+0x1e>
 801d758:	6023      	str	r3, [r4, #0]
 801d75a:	bd38      	pop	{r3, r4, r5, pc}
 801d75c:	2400cf04 	.word	0x2400cf04

0801d760 <_write_r>:
 801d760:	b538      	push	{r3, r4, r5, lr}
 801d762:	4d07      	ldr	r5, [pc, #28]	@ (801d780 <_write_r+0x20>)
 801d764:	4604      	mov	r4, r0
 801d766:	4608      	mov	r0, r1
 801d768:	4611      	mov	r1, r2
 801d76a:	2200      	movs	r2, #0
 801d76c:	602a      	str	r2, [r5, #0]
 801d76e:	461a      	mov	r2, r3
 801d770:	f7e3 f8fc 	bl	800096c <_write>
 801d774:	1c43      	adds	r3, r0, #1
 801d776:	d102      	bne.n	801d77e <_write_r+0x1e>
 801d778:	682b      	ldr	r3, [r5, #0]
 801d77a:	b103      	cbz	r3, 801d77e <_write_r+0x1e>
 801d77c:	6023      	str	r3, [r4, #0]
 801d77e:	bd38      	pop	{r3, r4, r5, pc}
 801d780:	2400cf04 	.word	0x2400cf04

0801d784 <__libc_init_array>:
 801d784:	b570      	push	{r4, r5, r6, lr}
 801d786:	4d0d      	ldr	r5, [pc, #52]	@ (801d7bc <__libc_init_array+0x38>)
 801d788:	4c0d      	ldr	r4, [pc, #52]	@ (801d7c0 <__libc_init_array+0x3c>)
 801d78a:	1b64      	subs	r4, r4, r5
 801d78c:	10a4      	asrs	r4, r4, #2
 801d78e:	2600      	movs	r6, #0
 801d790:	42a6      	cmp	r6, r4
 801d792:	d109      	bne.n	801d7a8 <__libc_init_array+0x24>
 801d794:	4d0b      	ldr	r5, [pc, #44]	@ (801d7c4 <__libc_init_array+0x40>)
 801d796:	4c0c      	ldr	r4, [pc, #48]	@ (801d7c8 <__libc_init_array+0x44>)
 801d798:	f001 fdbc 	bl	801f314 <_init>
 801d79c:	1b64      	subs	r4, r4, r5
 801d79e:	10a4      	asrs	r4, r4, #2
 801d7a0:	2600      	movs	r6, #0
 801d7a2:	42a6      	cmp	r6, r4
 801d7a4:	d105      	bne.n	801d7b2 <__libc_init_array+0x2e>
 801d7a6:	bd70      	pop	{r4, r5, r6, pc}
 801d7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7ac:	4798      	blx	r3
 801d7ae:	3601      	adds	r6, #1
 801d7b0:	e7ee      	b.n	801d790 <__libc_init_array+0xc>
 801d7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7b6:	4798      	blx	r3
 801d7b8:	3601      	adds	r6, #1
 801d7ba:	e7f2      	b.n	801d7a2 <__libc_init_array+0x1e>
 801d7bc:	080229ac 	.word	0x080229ac
 801d7c0:	080229ac 	.word	0x080229ac
 801d7c4:	080229ac 	.word	0x080229ac
 801d7c8:	080229b0 	.word	0x080229b0

0801d7cc <__retarget_lock_init_recursive>:
 801d7cc:	4770      	bx	lr

0801d7ce <__retarget_lock_acquire_recursive>:
 801d7ce:	4770      	bx	lr

0801d7d0 <__retarget_lock_release_recursive>:
 801d7d0:	4770      	bx	lr

0801d7d2 <memcpy>:
 801d7d2:	440a      	add	r2, r1
 801d7d4:	4291      	cmp	r1, r2
 801d7d6:	f100 33ff 	add.w	r3, r0, #4294967295
 801d7da:	d100      	bne.n	801d7de <memcpy+0xc>
 801d7dc:	4770      	bx	lr
 801d7de:	b510      	push	{r4, lr}
 801d7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d7e8:	4291      	cmp	r1, r2
 801d7ea:	d1f9      	bne.n	801d7e0 <memcpy+0xe>
 801d7ec:	bd10      	pop	{r4, pc}
	...

0801d7f0 <__assert_func>:
 801d7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d7f2:	4614      	mov	r4, r2
 801d7f4:	461a      	mov	r2, r3
 801d7f6:	4b09      	ldr	r3, [pc, #36]	@ (801d81c <__assert_func+0x2c>)
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	4605      	mov	r5, r0
 801d7fc:	68d8      	ldr	r0, [r3, #12]
 801d7fe:	b954      	cbnz	r4, 801d816 <__assert_func+0x26>
 801d800:	4b07      	ldr	r3, [pc, #28]	@ (801d820 <__assert_func+0x30>)
 801d802:	461c      	mov	r4, r3
 801d804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d808:	9100      	str	r1, [sp, #0]
 801d80a:	462b      	mov	r3, r5
 801d80c:	4905      	ldr	r1, [pc, #20]	@ (801d824 <__assert_func+0x34>)
 801d80e:	f001 fc5d 	bl	801f0cc <fiprintf>
 801d812:	f001 fd01 	bl	801f218 <abort>
 801d816:	4b04      	ldr	r3, [pc, #16]	@ (801d828 <__assert_func+0x38>)
 801d818:	e7f4      	b.n	801d804 <__assert_func+0x14>
 801d81a:	bf00      	nop
 801d81c:	24000044 	.word	0x24000044
 801d820:	080227b5 	.word	0x080227b5
 801d824:	08022787 	.word	0x08022787
 801d828:	0802277a 	.word	0x0802277a

0801d82c <quorem>:
 801d82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d830:	6903      	ldr	r3, [r0, #16]
 801d832:	690c      	ldr	r4, [r1, #16]
 801d834:	42a3      	cmp	r3, r4
 801d836:	4607      	mov	r7, r0
 801d838:	db7e      	blt.n	801d938 <quorem+0x10c>
 801d83a:	3c01      	subs	r4, #1
 801d83c:	f101 0814 	add.w	r8, r1, #20
 801d840:	00a3      	lsls	r3, r4, #2
 801d842:	f100 0514 	add.w	r5, r0, #20
 801d846:	9300      	str	r3, [sp, #0]
 801d848:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d84c:	9301      	str	r3, [sp, #4]
 801d84e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d856:	3301      	adds	r3, #1
 801d858:	429a      	cmp	r2, r3
 801d85a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d85e:	fbb2 f6f3 	udiv	r6, r2, r3
 801d862:	d32e      	bcc.n	801d8c2 <quorem+0x96>
 801d864:	f04f 0a00 	mov.w	sl, #0
 801d868:	46c4      	mov	ip, r8
 801d86a:	46ae      	mov	lr, r5
 801d86c:	46d3      	mov	fp, sl
 801d86e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d872:	b298      	uxth	r0, r3
 801d874:	fb06 a000 	mla	r0, r6, r0, sl
 801d878:	0c02      	lsrs	r2, r0, #16
 801d87a:	0c1b      	lsrs	r3, r3, #16
 801d87c:	fb06 2303 	mla	r3, r6, r3, r2
 801d880:	f8de 2000 	ldr.w	r2, [lr]
 801d884:	b280      	uxth	r0, r0
 801d886:	b292      	uxth	r2, r2
 801d888:	1a12      	subs	r2, r2, r0
 801d88a:	445a      	add	r2, fp
 801d88c:	f8de 0000 	ldr.w	r0, [lr]
 801d890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d894:	b29b      	uxth	r3, r3
 801d896:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d89a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d89e:	b292      	uxth	r2, r2
 801d8a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d8a4:	45e1      	cmp	r9, ip
 801d8a6:	f84e 2b04 	str.w	r2, [lr], #4
 801d8aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d8ae:	d2de      	bcs.n	801d86e <quorem+0x42>
 801d8b0:	9b00      	ldr	r3, [sp, #0]
 801d8b2:	58eb      	ldr	r3, [r5, r3]
 801d8b4:	b92b      	cbnz	r3, 801d8c2 <quorem+0x96>
 801d8b6:	9b01      	ldr	r3, [sp, #4]
 801d8b8:	3b04      	subs	r3, #4
 801d8ba:	429d      	cmp	r5, r3
 801d8bc:	461a      	mov	r2, r3
 801d8be:	d32f      	bcc.n	801d920 <quorem+0xf4>
 801d8c0:	613c      	str	r4, [r7, #16]
 801d8c2:	4638      	mov	r0, r7
 801d8c4:	f001 f90c 	bl	801eae0 <__mcmp>
 801d8c8:	2800      	cmp	r0, #0
 801d8ca:	db25      	blt.n	801d918 <quorem+0xec>
 801d8cc:	4629      	mov	r1, r5
 801d8ce:	2000      	movs	r0, #0
 801d8d0:	f858 2b04 	ldr.w	r2, [r8], #4
 801d8d4:	f8d1 c000 	ldr.w	ip, [r1]
 801d8d8:	fa1f fe82 	uxth.w	lr, r2
 801d8dc:	fa1f f38c 	uxth.w	r3, ip
 801d8e0:	eba3 030e 	sub.w	r3, r3, lr
 801d8e4:	4403      	add	r3, r0
 801d8e6:	0c12      	lsrs	r2, r2, #16
 801d8e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d8ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d8f0:	b29b      	uxth	r3, r3
 801d8f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d8f6:	45c1      	cmp	r9, r8
 801d8f8:	f841 3b04 	str.w	r3, [r1], #4
 801d8fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d900:	d2e6      	bcs.n	801d8d0 <quorem+0xa4>
 801d902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d90a:	b922      	cbnz	r2, 801d916 <quorem+0xea>
 801d90c:	3b04      	subs	r3, #4
 801d90e:	429d      	cmp	r5, r3
 801d910:	461a      	mov	r2, r3
 801d912:	d30b      	bcc.n	801d92c <quorem+0x100>
 801d914:	613c      	str	r4, [r7, #16]
 801d916:	3601      	adds	r6, #1
 801d918:	4630      	mov	r0, r6
 801d91a:	b003      	add	sp, #12
 801d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d920:	6812      	ldr	r2, [r2, #0]
 801d922:	3b04      	subs	r3, #4
 801d924:	2a00      	cmp	r2, #0
 801d926:	d1cb      	bne.n	801d8c0 <quorem+0x94>
 801d928:	3c01      	subs	r4, #1
 801d92a:	e7c6      	b.n	801d8ba <quorem+0x8e>
 801d92c:	6812      	ldr	r2, [r2, #0]
 801d92e:	3b04      	subs	r3, #4
 801d930:	2a00      	cmp	r2, #0
 801d932:	d1ef      	bne.n	801d914 <quorem+0xe8>
 801d934:	3c01      	subs	r4, #1
 801d936:	e7ea      	b.n	801d90e <quorem+0xe2>
 801d938:	2000      	movs	r0, #0
 801d93a:	e7ee      	b.n	801d91a <quorem+0xee>
 801d93c:	0000      	movs	r0, r0
	...

0801d940 <_dtoa_r>:
 801d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d944:	ed2d 8b02 	vpush	{d8}
 801d948:	69c7      	ldr	r7, [r0, #28]
 801d94a:	b091      	sub	sp, #68	@ 0x44
 801d94c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d950:	ec55 4b10 	vmov	r4, r5, d0
 801d954:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801d956:	9107      	str	r1, [sp, #28]
 801d958:	4681      	mov	r9, r0
 801d95a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d95c:	930d      	str	r3, [sp, #52]	@ 0x34
 801d95e:	b97f      	cbnz	r7, 801d980 <_dtoa_r+0x40>
 801d960:	2010      	movs	r0, #16
 801d962:	f000 fd8d 	bl	801e480 <malloc>
 801d966:	4602      	mov	r2, r0
 801d968:	f8c9 001c 	str.w	r0, [r9, #28]
 801d96c:	b920      	cbnz	r0, 801d978 <_dtoa_r+0x38>
 801d96e:	4ba0      	ldr	r3, [pc, #640]	@ (801dbf0 <_dtoa_r+0x2b0>)
 801d970:	21ef      	movs	r1, #239	@ 0xef
 801d972:	48a0      	ldr	r0, [pc, #640]	@ (801dbf4 <_dtoa_r+0x2b4>)
 801d974:	f7ff ff3c 	bl	801d7f0 <__assert_func>
 801d978:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d97c:	6007      	str	r7, [r0, #0]
 801d97e:	60c7      	str	r7, [r0, #12]
 801d980:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d984:	6819      	ldr	r1, [r3, #0]
 801d986:	b159      	cbz	r1, 801d9a0 <_dtoa_r+0x60>
 801d988:	685a      	ldr	r2, [r3, #4]
 801d98a:	604a      	str	r2, [r1, #4]
 801d98c:	2301      	movs	r3, #1
 801d98e:	4093      	lsls	r3, r2
 801d990:	608b      	str	r3, [r1, #8]
 801d992:	4648      	mov	r0, r9
 801d994:	f000 fe6a 	bl	801e66c <_Bfree>
 801d998:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d99c:	2200      	movs	r2, #0
 801d99e:	601a      	str	r2, [r3, #0]
 801d9a0:	1e2b      	subs	r3, r5, #0
 801d9a2:	bfbb      	ittet	lt
 801d9a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d9a8:	9303      	strlt	r3, [sp, #12]
 801d9aa:	2300      	movge	r3, #0
 801d9ac:	2201      	movlt	r2, #1
 801d9ae:	bfac      	ite	ge
 801d9b0:	6033      	strge	r3, [r6, #0]
 801d9b2:	6032      	strlt	r2, [r6, #0]
 801d9b4:	4b90      	ldr	r3, [pc, #576]	@ (801dbf8 <_dtoa_r+0x2b8>)
 801d9b6:	9e03      	ldr	r6, [sp, #12]
 801d9b8:	43b3      	bics	r3, r6
 801d9ba:	d110      	bne.n	801d9de <_dtoa_r+0x9e>
 801d9bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d9be:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d9c2:	6013      	str	r3, [r2, #0]
 801d9c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801d9c8:	4323      	orrs	r3, r4
 801d9ca:	f000 84de 	beq.w	801e38a <_dtoa_r+0xa4a>
 801d9ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d9d0:	4f8a      	ldr	r7, [pc, #552]	@ (801dbfc <_dtoa_r+0x2bc>)
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	f000 84e0 	beq.w	801e398 <_dtoa_r+0xa58>
 801d9d8:	1cfb      	adds	r3, r7, #3
 801d9da:	f000 bcdb 	b.w	801e394 <_dtoa_r+0xa54>
 801d9de:	ed9d 8b02 	vldr	d8, [sp, #8]
 801d9e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9ea:	d10a      	bne.n	801da02 <_dtoa_r+0xc2>
 801d9ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d9ee:	2301      	movs	r3, #1
 801d9f0:	6013      	str	r3, [r2, #0]
 801d9f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d9f4:	b113      	cbz	r3, 801d9fc <_dtoa_r+0xbc>
 801d9f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d9f8:	4b81      	ldr	r3, [pc, #516]	@ (801dc00 <_dtoa_r+0x2c0>)
 801d9fa:	6013      	str	r3, [r2, #0]
 801d9fc:	4f81      	ldr	r7, [pc, #516]	@ (801dc04 <_dtoa_r+0x2c4>)
 801d9fe:	f000 bccb 	b.w	801e398 <_dtoa_r+0xa58>
 801da02:	aa0e      	add	r2, sp, #56	@ 0x38
 801da04:	a90f      	add	r1, sp, #60	@ 0x3c
 801da06:	4648      	mov	r0, r9
 801da08:	eeb0 0b48 	vmov.f64	d0, d8
 801da0c:	f001 f918 	bl	801ec40 <__d2b>
 801da10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801da14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da16:	9001      	str	r0, [sp, #4]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d045      	beq.n	801daa8 <_dtoa_r+0x168>
 801da1c:	eeb0 7b48 	vmov.f64	d7, d8
 801da20:	ee18 1a90 	vmov	r1, s17
 801da24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801da28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801da2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801da30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801da34:	2500      	movs	r5, #0
 801da36:	ee07 1a90 	vmov	s15, r1
 801da3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801da3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801dbd8 <_dtoa_r+0x298>
 801da42:	ee37 7b46 	vsub.f64	d7, d7, d6
 801da46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801dbe0 <_dtoa_r+0x2a0>
 801da4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801dbe8 <_dtoa_r+0x2a8>
 801da52:	ee07 3a90 	vmov	s15, r3
 801da56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801da5a:	eeb0 7b46 	vmov.f64	d7, d6
 801da5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801da62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801da66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801da6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da6e:	ee16 8a90 	vmov	r8, s13
 801da72:	d508      	bpl.n	801da86 <_dtoa_r+0x146>
 801da74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801da78:	eeb4 6b47 	vcmp.f64	d6, d7
 801da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da80:	bf18      	it	ne
 801da82:	f108 38ff 	addne.w	r8, r8, #4294967295
 801da86:	f1b8 0f16 	cmp.w	r8, #22
 801da8a:	d82b      	bhi.n	801dae4 <_dtoa_r+0x1a4>
 801da8c:	495e      	ldr	r1, [pc, #376]	@ (801dc08 <_dtoa_r+0x2c8>)
 801da8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801da92:	ed91 7b00 	vldr	d7, [r1]
 801da96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801da9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da9e:	d501      	bpl.n	801daa4 <_dtoa_r+0x164>
 801daa0:	f108 38ff 	add.w	r8, r8, #4294967295
 801daa4:	2100      	movs	r1, #0
 801daa6:	e01e      	b.n	801dae6 <_dtoa_r+0x1a6>
 801daa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801daaa:	4413      	add	r3, r2
 801daac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801dab0:	2920      	cmp	r1, #32
 801dab2:	bfc1      	itttt	gt
 801dab4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801dab8:	408e      	lslgt	r6, r1
 801daba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801dabe:	fa24 f101 	lsrgt.w	r1, r4, r1
 801dac2:	bfd6      	itet	le
 801dac4:	f1c1 0120 	rsble	r1, r1, #32
 801dac8:	4331      	orrgt	r1, r6
 801daca:	fa04 f101 	lslle.w	r1, r4, r1
 801dace:	ee07 1a90 	vmov	s15, r1
 801dad2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801dad6:	3b01      	subs	r3, #1
 801dad8:	ee17 1a90 	vmov	r1, s15
 801dadc:	2501      	movs	r5, #1
 801dade:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801dae2:	e7a8      	b.n	801da36 <_dtoa_r+0xf6>
 801dae4:	2101      	movs	r1, #1
 801dae6:	1ad2      	subs	r2, r2, r3
 801dae8:	1e53      	subs	r3, r2, #1
 801daea:	9306      	str	r3, [sp, #24]
 801daec:	bf45      	ittet	mi
 801daee:	f1c2 0301 	rsbmi	r3, r2, #1
 801daf2:	9305      	strmi	r3, [sp, #20]
 801daf4:	2300      	movpl	r3, #0
 801daf6:	2300      	movmi	r3, #0
 801daf8:	bf4c      	ite	mi
 801dafa:	9306      	strmi	r3, [sp, #24]
 801dafc:	9305      	strpl	r3, [sp, #20]
 801dafe:	f1b8 0f00 	cmp.w	r8, #0
 801db02:	910c      	str	r1, [sp, #48]	@ 0x30
 801db04:	db18      	blt.n	801db38 <_dtoa_r+0x1f8>
 801db06:	9b06      	ldr	r3, [sp, #24]
 801db08:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801db0c:	4443      	add	r3, r8
 801db0e:	9306      	str	r3, [sp, #24]
 801db10:	2300      	movs	r3, #0
 801db12:	9a07      	ldr	r2, [sp, #28]
 801db14:	2a09      	cmp	r2, #9
 801db16:	d849      	bhi.n	801dbac <_dtoa_r+0x26c>
 801db18:	2a05      	cmp	r2, #5
 801db1a:	bfc4      	itt	gt
 801db1c:	3a04      	subgt	r2, #4
 801db1e:	9207      	strgt	r2, [sp, #28]
 801db20:	9a07      	ldr	r2, [sp, #28]
 801db22:	f1a2 0202 	sub.w	r2, r2, #2
 801db26:	bfcc      	ite	gt
 801db28:	2400      	movgt	r4, #0
 801db2a:	2401      	movle	r4, #1
 801db2c:	2a03      	cmp	r2, #3
 801db2e:	d848      	bhi.n	801dbc2 <_dtoa_r+0x282>
 801db30:	e8df f002 	tbb	[pc, r2]
 801db34:	3a2c2e0b 	.word	0x3a2c2e0b
 801db38:	9b05      	ldr	r3, [sp, #20]
 801db3a:	2200      	movs	r2, #0
 801db3c:	eba3 0308 	sub.w	r3, r3, r8
 801db40:	9305      	str	r3, [sp, #20]
 801db42:	920a      	str	r2, [sp, #40]	@ 0x28
 801db44:	f1c8 0300 	rsb	r3, r8, #0
 801db48:	e7e3      	b.n	801db12 <_dtoa_r+0x1d2>
 801db4a:	2200      	movs	r2, #0
 801db4c:	9208      	str	r2, [sp, #32]
 801db4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db50:	2a00      	cmp	r2, #0
 801db52:	dc39      	bgt.n	801dbc8 <_dtoa_r+0x288>
 801db54:	f04f 0b01 	mov.w	fp, #1
 801db58:	46da      	mov	sl, fp
 801db5a:	465a      	mov	r2, fp
 801db5c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801db60:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801db64:	2100      	movs	r1, #0
 801db66:	2004      	movs	r0, #4
 801db68:	f100 0614 	add.w	r6, r0, #20
 801db6c:	4296      	cmp	r6, r2
 801db6e:	d930      	bls.n	801dbd2 <_dtoa_r+0x292>
 801db70:	6079      	str	r1, [r7, #4]
 801db72:	4648      	mov	r0, r9
 801db74:	9304      	str	r3, [sp, #16]
 801db76:	f000 fd39 	bl	801e5ec <_Balloc>
 801db7a:	9b04      	ldr	r3, [sp, #16]
 801db7c:	4607      	mov	r7, r0
 801db7e:	2800      	cmp	r0, #0
 801db80:	d146      	bne.n	801dc10 <_dtoa_r+0x2d0>
 801db82:	4b22      	ldr	r3, [pc, #136]	@ (801dc0c <_dtoa_r+0x2cc>)
 801db84:	4602      	mov	r2, r0
 801db86:	f240 11af 	movw	r1, #431	@ 0x1af
 801db8a:	e6f2      	b.n	801d972 <_dtoa_r+0x32>
 801db8c:	2201      	movs	r2, #1
 801db8e:	e7dd      	b.n	801db4c <_dtoa_r+0x20c>
 801db90:	2200      	movs	r2, #0
 801db92:	9208      	str	r2, [sp, #32]
 801db94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db96:	eb08 0b02 	add.w	fp, r8, r2
 801db9a:	f10b 0a01 	add.w	sl, fp, #1
 801db9e:	4652      	mov	r2, sl
 801dba0:	2a01      	cmp	r2, #1
 801dba2:	bfb8      	it	lt
 801dba4:	2201      	movlt	r2, #1
 801dba6:	e7db      	b.n	801db60 <_dtoa_r+0x220>
 801dba8:	2201      	movs	r2, #1
 801dbaa:	e7f2      	b.n	801db92 <_dtoa_r+0x252>
 801dbac:	2401      	movs	r4, #1
 801dbae:	2200      	movs	r2, #0
 801dbb0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801dbb4:	f04f 3bff 	mov.w	fp, #4294967295
 801dbb8:	2100      	movs	r1, #0
 801dbba:	46da      	mov	sl, fp
 801dbbc:	2212      	movs	r2, #18
 801dbbe:	9109      	str	r1, [sp, #36]	@ 0x24
 801dbc0:	e7ce      	b.n	801db60 <_dtoa_r+0x220>
 801dbc2:	2201      	movs	r2, #1
 801dbc4:	9208      	str	r2, [sp, #32]
 801dbc6:	e7f5      	b.n	801dbb4 <_dtoa_r+0x274>
 801dbc8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801dbcc:	46da      	mov	sl, fp
 801dbce:	465a      	mov	r2, fp
 801dbd0:	e7c6      	b.n	801db60 <_dtoa_r+0x220>
 801dbd2:	3101      	adds	r1, #1
 801dbd4:	0040      	lsls	r0, r0, #1
 801dbd6:	e7c7      	b.n	801db68 <_dtoa_r+0x228>
 801dbd8:	636f4361 	.word	0x636f4361
 801dbdc:	3fd287a7 	.word	0x3fd287a7
 801dbe0:	8b60c8b3 	.word	0x8b60c8b3
 801dbe4:	3fc68a28 	.word	0x3fc68a28
 801dbe8:	509f79fb 	.word	0x509f79fb
 801dbec:	3fd34413 	.word	0x3fd34413
 801dbf0:	080225d6 	.word	0x080225d6
 801dbf4:	080227c3 	.word	0x080227c3
 801dbf8:	7ff00000 	.word	0x7ff00000
 801dbfc:	080227bf 	.word	0x080227bf
 801dc00:	08022757 	.word	0x08022757
 801dc04:	08022756 	.word	0x08022756
 801dc08:	080228c0 	.word	0x080228c0
 801dc0c:	0802281b 	.word	0x0802281b
 801dc10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801dc14:	f1ba 0f0e 	cmp.w	sl, #14
 801dc18:	6010      	str	r0, [r2, #0]
 801dc1a:	d86f      	bhi.n	801dcfc <_dtoa_r+0x3bc>
 801dc1c:	2c00      	cmp	r4, #0
 801dc1e:	d06d      	beq.n	801dcfc <_dtoa_r+0x3bc>
 801dc20:	f1b8 0f00 	cmp.w	r8, #0
 801dc24:	f340 80c2 	ble.w	801ddac <_dtoa_r+0x46c>
 801dc28:	4aca      	ldr	r2, [pc, #808]	@ (801df54 <_dtoa_r+0x614>)
 801dc2a:	f008 010f 	and.w	r1, r8, #15
 801dc2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801dc32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801dc36:	ed92 7b00 	vldr	d7, [r2]
 801dc3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801dc3e:	f000 80a9 	beq.w	801dd94 <_dtoa_r+0x454>
 801dc42:	4ac5      	ldr	r2, [pc, #788]	@ (801df58 <_dtoa_r+0x618>)
 801dc44:	ed92 6b08 	vldr	d6, [r2, #32]
 801dc48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801dc4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801dc50:	f001 010f 	and.w	r1, r1, #15
 801dc54:	2203      	movs	r2, #3
 801dc56:	48c0      	ldr	r0, [pc, #768]	@ (801df58 <_dtoa_r+0x618>)
 801dc58:	2900      	cmp	r1, #0
 801dc5a:	f040 809d 	bne.w	801dd98 <_dtoa_r+0x458>
 801dc5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dc62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dc66:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dc6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dc6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc70:	2900      	cmp	r1, #0
 801dc72:	f000 80c1 	beq.w	801ddf8 <_dtoa_r+0x4b8>
 801dc76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dc7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc82:	f140 80b9 	bpl.w	801ddf8 <_dtoa_r+0x4b8>
 801dc86:	f1ba 0f00 	cmp.w	sl, #0
 801dc8a:	f000 80b5 	beq.w	801ddf8 <_dtoa_r+0x4b8>
 801dc8e:	f1bb 0f00 	cmp.w	fp, #0
 801dc92:	dd31      	ble.n	801dcf8 <_dtoa_r+0x3b8>
 801dc94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801dc98:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dc9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dca0:	f108 31ff 	add.w	r1, r8, #4294967295
 801dca4:	9104      	str	r1, [sp, #16]
 801dca6:	3201      	adds	r2, #1
 801dca8:	465c      	mov	r4, fp
 801dcaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dcae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801dcb2:	ee07 2a90 	vmov	s15, r2
 801dcb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dcba:	eea7 5b06 	vfma.f64	d5, d7, d6
 801dcbe:	ee15 2a90 	vmov	r2, s11
 801dcc2:	ec51 0b15 	vmov	r0, r1, d5
 801dcc6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801dcca:	2c00      	cmp	r4, #0
 801dccc:	f040 8098 	bne.w	801de00 <_dtoa_r+0x4c0>
 801dcd0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801dcd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801dcd8:	ec41 0b17 	vmov	d7, r0, r1
 801dcdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dce4:	f300 8261 	bgt.w	801e1aa <_dtoa_r+0x86a>
 801dce8:	eeb1 7b47 	vneg.f64	d7, d7
 801dcec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcf4:	f100 80f5 	bmi.w	801dee2 <_dtoa_r+0x5a2>
 801dcf8:	ed8d 8b02 	vstr	d8, [sp, #8]
 801dcfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dcfe:	2a00      	cmp	r2, #0
 801dd00:	f2c0 812c 	blt.w	801df5c <_dtoa_r+0x61c>
 801dd04:	f1b8 0f0e 	cmp.w	r8, #14
 801dd08:	f300 8128 	bgt.w	801df5c <_dtoa_r+0x61c>
 801dd0c:	4b91      	ldr	r3, [pc, #580]	@ (801df54 <_dtoa_r+0x614>)
 801dd0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801dd12:	ed93 6b00 	vldr	d6, [r3]
 801dd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	da03      	bge.n	801dd24 <_dtoa_r+0x3e4>
 801dd1c:	f1ba 0f00 	cmp.w	sl, #0
 801dd20:	f340 80d2 	ble.w	801dec8 <_dtoa_r+0x588>
 801dd24:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801dd28:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dd2c:	463e      	mov	r6, r7
 801dd2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801dd32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801dd36:	ee15 3a10 	vmov	r3, s10
 801dd3a:	3330      	adds	r3, #48	@ 0x30
 801dd3c:	f806 3b01 	strb.w	r3, [r6], #1
 801dd40:	1bf3      	subs	r3, r6, r7
 801dd42:	459a      	cmp	sl, r3
 801dd44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801dd48:	eea3 7b46 	vfms.f64	d7, d3, d6
 801dd4c:	f040 80f8 	bne.w	801df40 <_dtoa_r+0x600>
 801dd50:	ee37 7b07 	vadd.f64	d7, d7, d7
 801dd54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd5c:	f300 80dd 	bgt.w	801df1a <_dtoa_r+0x5da>
 801dd60:	eeb4 7b46 	vcmp.f64	d7, d6
 801dd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd68:	d104      	bne.n	801dd74 <_dtoa_r+0x434>
 801dd6a:	ee15 3a10 	vmov	r3, s10
 801dd6e:	07db      	lsls	r3, r3, #31
 801dd70:	f100 80d3 	bmi.w	801df1a <_dtoa_r+0x5da>
 801dd74:	9901      	ldr	r1, [sp, #4]
 801dd76:	4648      	mov	r0, r9
 801dd78:	f000 fc78 	bl	801e66c <_Bfree>
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dd80:	7033      	strb	r3, [r6, #0]
 801dd82:	f108 0301 	add.w	r3, r8, #1
 801dd86:	6013      	str	r3, [r2, #0]
 801dd88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	f000 8304 	beq.w	801e398 <_dtoa_r+0xa58>
 801dd90:	601e      	str	r6, [r3, #0]
 801dd92:	e301      	b.n	801e398 <_dtoa_r+0xa58>
 801dd94:	2202      	movs	r2, #2
 801dd96:	e75e      	b.n	801dc56 <_dtoa_r+0x316>
 801dd98:	07cc      	lsls	r4, r1, #31
 801dd9a:	d504      	bpl.n	801dda6 <_dtoa_r+0x466>
 801dd9c:	ed90 6b00 	vldr	d6, [r0]
 801dda0:	3201      	adds	r2, #1
 801dda2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dda6:	1049      	asrs	r1, r1, #1
 801dda8:	3008      	adds	r0, #8
 801ddaa:	e755      	b.n	801dc58 <_dtoa_r+0x318>
 801ddac:	d022      	beq.n	801ddf4 <_dtoa_r+0x4b4>
 801ddae:	f1c8 0100 	rsb	r1, r8, #0
 801ddb2:	4a68      	ldr	r2, [pc, #416]	@ (801df54 <_dtoa_r+0x614>)
 801ddb4:	f001 000f 	and.w	r0, r1, #15
 801ddb8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ddbc:	ed92 7b00 	vldr	d7, [r2]
 801ddc0:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ddc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ddc8:	4863      	ldr	r0, [pc, #396]	@ (801df58 <_dtoa_r+0x618>)
 801ddca:	1109      	asrs	r1, r1, #4
 801ddcc:	2400      	movs	r4, #0
 801ddce:	2202      	movs	r2, #2
 801ddd0:	b929      	cbnz	r1, 801ddde <_dtoa_r+0x49e>
 801ddd2:	2c00      	cmp	r4, #0
 801ddd4:	f43f af49 	beq.w	801dc6a <_dtoa_r+0x32a>
 801ddd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dddc:	e745      	b.n	801dc6a <_dtoa_r+0x32a>
 801ddde:	07ce      	lsls	r6, r1, #31
 801dde0:	d505      	bpl.n	801ddee <_dtoa_r+0x4ae>
 801dde2:	ed90 6b00 	vldr	d6, [r0]
 801dde6:	3201      	adds	r2, #1
 801dde8:	2401      	movs	r4, #1
 801ddea:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ddee:	1049      	asrs	r1, r1, #1
 801ddf0:	3008      	adds	r0, #8
 801ddf2:	e7ed      	b.n	801ddd0 <_dtoa_r+0x490>
 801ddf4:	2202      	movs	r2, #2
 801ddf6:	e738      	b.n	801dc6a <_dtoa_r+0x32a>
 801ddf8:	f8cd 8010 	str.w	r8, [sp, #16]
 801ddfc:	4654      	mov	r4, sl
 801ddfe:	e754      	b.n	801dcaa <_dtoa_r+0x36a>
 801de00:	4a54      	ldr	r2, [pc, #336]	@ (801df54 <_dtoa_r+0x614>)
 801de02:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801de06:	ed12 4b02 	vldr	d4, [r2, #-8]
 801de0a:	9a08      	ldr	r2, [sp, #32]
 801de0c:	ec41 0b17 	vmov	d7, r0, r1
 801de10:	443c      	add	r4, r7
 801de12:	b34a      	cbz	r2, 801de68 <_dtoa_r+0x528>
 801de14:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801de18:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801de1c:	463e      	mov	r6, r7
 801de1e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801de22:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801de26:	ee35 7b47 	vsub.f64	d7, d5, d7
 801de2a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801de2e:	ee14 2a90 	vmov	r2, s9
 801de32:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801de36:	3230      	adds	r2, #48	@ 0x30
 801de38:	ee36 6b45 	vsub.f64	d6, d6, d5
 801de3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801de40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de44:	f806 2b01 	strb.w	r2, [r6], #1
 801de48:	d438      	bmi.n	801debc <_dtoa_r+0x57c>
 801de4a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801de4e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801de52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de56:	d462      	bmi.n	801df1e <_dtoa_r+0x5de>
 801de58:	42a6      	cmp	r6, r4
 801de5a:	f43f af4d 	beq.w	801dcf8 <_dtoa_r+0x3b8>
 801de5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801de62:	ee26 6b03 	vmul.f64	d6, d6, d3
 801de66:	e7e0      	b.n	801de2a <_dtoa_r+0x4ea>
 801de68:	4621      	mov	r1, r4
 801de6a:	463e      	mov	r6, r7
 801de6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801de70:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801de74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801de78:	ee14 2a90 	vmov	r2, s9
 801de7c:	3230      	adds	r2, #48	@ 0x30
 801de7e:	f806 2b01 	strb.w	r2, [r6], #1
 801de82:	42a6      	cmp	r6, r4
 801de84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801de88:	ee36 6b45 	vsub.f64	d6, d6, d5
 801de8c:	d119      	bne.n	801dec2 <_dtoa_r+0x582>
 801de8e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801de92:	ee37 4b05 	vadd.f64	d4, d7, d5
 801de96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801de9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de9e:	dc3e      	bgt.n	801df1e <_dtoa_r+0x5de>
 801dea0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801dea4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801dea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deac:	f57f af24 	bpl.w	801dcf8 <_dtoa_r+0x3b8>
 801deb0:	460e      	mov	r6, r1
 801deb2:	3901      	subs	r1, #1
 801deb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801deb8:	2b30      	cmp	r3, #48	@ 0x30
 801deba:	d0f9      	beq.n	801deb0 <_dtoa_r+0x570>
 801debc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801dec0:	e758      	b.n	801dd74 <_dtoa_r+0x434>
 801dec2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801dec6:	e7d5      	b.n	801de74 <_dtoa_r+0x534>
 801dec8:	d10b      	bne.n	801dee2 <_dtoa_r+0x5a2>
 801deca:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801dece:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ded2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ded6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801deda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dede:	f2c0 8161 	blt.w	801e1a4 <_dtoa_r+0x864>
 801dee2:	2400      	movs	r4, #0
 801dee4:	4625      	mov	r5, r4
 801dee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dee8:	43db      	mvns	r3, r3
 801deea:	9304      	str	r3, [sp, #16]
 801deec:	463e      	mov	r6, r7
 801deee:	f04f 0800 	mov.w	r8, #0
 801def2:	4621      	mov	r1, r4
 801def4:	4648      	mov	r0, r9
 801def6:	f000 fbb9 	bl	801e66c <_Bfree>
 801defa:	2d00      	cmp	r5, #0
 801defc:	d0de      	beq.n	801debc <_dtoa_r+0x57c>
 801defe:	f1b8 0f00 	cmp.w	r8, #0
 801df02:	d005      	beq.n	801df10 <_dtoa_r+0x5d0>
 801df04:	45a8      	cmp	r8, r5
 801df06:	d003      	beq.n	801df10 <_dtoa_r+0x5d0>
 801df08:	4641      	mov	r1, r8
 801df0a:	4648      	mov	r0, r9
 801df0c:	f000 fbae 	bl	801e66c <_Bfree>
 801df10:	4629      	mov	r1, r5
 801df12:	4648      	mov	r0, r9
 801df14:	f000 fbaa 	bl	801e66c <_Bfree>
 801df18:	e7d0      	b.n	801debc <_dtoa_r+0x57c>
 801df1a:	f8cd 8010 	str.w	r8, [sp, #16]
 801df1e:	4633      	mov	r3, r6
 801df20:	461e      	mov	r6, r3
 801df22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801df26:	2a39      	cmp	r2, #57	@ 0x39
 801df28:	d106      	bne.n	801df38 <_dtoa_r+0x5f8>
 801df2a:	429f      	cmp	r7, r3
 801df2c:	d1f8      	bne.n	801df20 <_dtoa_r+0x5e0>
 801df2e:	9a04      	ldr	r2, [sp, #16]
 801df30:	3201      	adds	r2, #1
 801df32:	9204      	str	r2, [sp, #16]
 801df34:	2230      	movs	r2, #48	@ 0x30
 801df36:	703a      	strb	r2, [r7, #0]
 801df38:	781a      	ldrb	r2, [r3, #0]
 801df3a:	3201      	adds	r2, #1
 801df3c:	701a      	strb	r2, [r3, #0]
 801df3e:	e7bd      	b.n	801debc <_dtoa_r+0x57c>
 801df40:	ee27 7b04 	vmul.f64	d7, d7, d4
 801df44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801df48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df4c:	f47f aeef 	bne.w	801dd2e <_dtoa_r+0x3ee>
 801df50:	e710      	b.n	801dd74 <_dtoa_r+0x434>
 801df52:	bf00      	nop
 801df54:	080228c0 	.word	0x080228c0
 801df58:	08022898 	.word	0x08022898
 801df5c:	9908      	ldr	r1, [sp, #32]
 801df5e:	2900      	cmp	r1, #0
 801df60:	f000 80e3 	beq.w	801e12a <_dtoa_r+0x7ea>
 801df64:	9907      	ldr	r1, [sp, #28]
 801df66:	2901      	cmp	r1, #1
 801df68:	f300 80c8 	bgt.w	801e0fc <_dtoa_r+0x7bc>
 801df6c:	2d00      	cmp	r5, #0
 801df6e:	f000 80c1 	beq.w	801e0f4 <_dtoa_r+0x7b4>
 801df72:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801df76:	9e05      	ldr	r6, [sp, #20]
 801df78:	461c      	mov	r4, r3
 801df7a:	9304      	str	r3, [sp, #16]
 801df7c:	9b05      	ldr	r3, [sp, #20]
 801df7e:	4413      	add	r3, r2
 801df80:	9305      	str	r3, [sp, #20]
 801df82:	9b06      	ldr	r3, [sp, #24]
 801df84:	2101      	movs	r1, #1
 801df86:	4413      	add	r3, r2
 801df88:	4648      	mov	r0, r9
 801df8a:	9306      	str	r3, [sp, #24]
 801df8c:	f000 fc22 	bl	801e7d4 <__i2b>
 801df90:	9b04      	ldr	r3, [sp, #16]
 801df92:	4605      	mov	r5, r0
 801df94:	b166      	cbz	r6, 801dfb0 <_dtoa_r+0x670>
 801df96:	9a06      	ldr	r2, [sp, #24]
 801df98:	2a00      	cmp	r2, #0
 801df9a:	dd09      	ble.n	801dfb0 <_dtoa_r+0x670>
 801df9c:	42b2      	cmp	r2, r6
 801df9e:	9905      	ldr	r1, [sp, #20]
 801dfa0:	bfa8      	it	ge
 801dfa2:	4632      	movge	r2, r6
 801dfa4:	1a89      	subs	r1, r1, r2
 801dfa6:	9105      	str	r1, [sp, #20]
 801dfa8:	9906      	ldr	r1, [sp, #24]
 801dfaa:	1ab6      	subs	r6, r6, r2
 801dfac:	1a8a      	subs	r2, r1, r2
 801dfae:	9206      	str	r2, [sp, #24]
 801dfb0:	b1fb      	cbz	r3, 801dff2 <_dtoa_r+0x6b2>
 801dfb2:	9a08      	ldr	r2, [sp, #32]
 801dfb4:	2a00      	cmp	r2, #0
 801dfb6:	f000 80bc 	beq.w	801e132 <_dtoa_r+0x7f2>
 801dfba:	b19c      	cbz	r4, 801dfe4 <_dtoa_r+0x6a4>
 801dfbc:	4629      	mov	r1, r5
 801dfbe:	4622      	mov	r2, r4
 801dfc0:	4648      	mov	r0, r9
 801dfc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dfc4:	f000 fcc6 	bl	801e954 <__pow5mult>
 801dfc8:	9a01      	ldr	r2, [sp, #4]
 801dfca:	4601      	mov	r1, r0
 801dfcc:	4605      	mov	r5, r0
 801dfce:	4648      	mov	r0, r9
 801dfd0:	f000 fc16 	bl	801e800 <__multiply>
 801dfd4:	9901      	ldr	r1, [sp, #4]
 801dfd6:	9004      	str	r0, [sp, #16]
 801dfd8:	4648      	mov	r0, r9
 801dfda:	f000 fb47 	bl	801e66c <_Bfree>
 801dfde:	9a04      	ldr	r2, [sp, #16]
 801dfe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dfe2:	9201      	str	r2, [sp, #4]
 801dfe4:	1b1a      	subs	r2, r3, r4
 801dfe6:	d004      	beq.n	801dff2 <_dtoa_r+0x6b2>
 801dfe8:	9901      	ldr	r1, [sp, #4]
 801dfea:	4648      	mov	r0, r9
 801dfec:	f000 fcb2 	bl	801e954 <__pow5mult>
 801dff0:	9001      	str	r0, [sp, #4]
 801dff2:	2101      	movs	r1, #1
 801dff4:	4648      	mov	r0, r9
 801dff6:	f000 fbed 	bl	801e7d4 <__i2b>
 801dffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dffc:	4604      	mov	r4, r0
 801dffe:	2b00      	cmp	r3, #0
 801e000:	f000 81d0 	beq.w	801e3a4 <_dtoa_r+0xa64>
 801e004:	461a      	mov	r2, r3
 801e006:	4601      	mov	r1, r0
 801e008:	4648      	mov	r0, r9
 801e00a:	f000 fca3 	bl	801e954 <__pow5mult>
 801e00e:	9b07      	ldr	r3, [sp, #28]
 801e010:	2b01      	cmp	r3, #1
 801e012:	4604      	mov	r4, r0
 801e014:	f300 8095 	bgt.w	801e142 <_dtoa_r+0x802>
 801e018:	9b02      	ldr	r3, [sp, #8]
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	f040 808b 	bne.w	801e136 <_dtoa_r+0x7f6>
 801e020:	9b03      	ldr	r3, [sp, #12]
 801e022:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801e026:	2a00      	cmp	r2, #0
 801e028:	f040 8087 	bne.w	801e13a <_dtoa_r+0x7fa>
 801e02c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801e030:	0d12      	lsrs	r2, r2, #20
 801e032:	0512      	lsls	r2, r2, #20
 801e034:	2a00      	cmp	r2, #0
 801e036:	f000 8082 	beq.w	801e13e <_dtoa_r+0x7fe>
 801e03a:	9b05      	ldr	r3, [sp, #20]
 801e03c:	3301      	adds	r3, #1
 801e03e:	9305      	str	r3, [sp, #20]
 801e040:	9b06      	ldr	r3, [sp, #24]
 801e042:	3301      	adds	r3, #1
 801e044:	9306      	str	r3, [sp, #24]
 801e046:	2301      	movs	r3, #1
 801e048:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	f000 81af 	beq.w	801e3b0 <_dtoa_r+0xa70>
 801e052:	6922      	ldr	r2, [r4, #16]
 801e054:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e058:	6910      	ldr	r0, [r2, #16]
 801e05a:	f000 fb6f 	bl	801e73c <__hi0bits>
 801e05e:	f1c0 0020 	rsb	r0, r0, #32
 801e062:	9b06      	ldr	r3, [sp, #24]
 801e064:	4418      	add	r0, r3
 801e066:	f010 001f 	ands.w	r0, r0, #31
 801e06a:	d076      	beq.n	801e15a <_dtoa_r+0x81a>
 801e06c:	f1c0 0220 	rsb	r2, r0, #32
 801e070:	2a04      	cmp	r2, #4
 801e072:	dd69      	ble.n	801e148 <_dtoa_r+0x808>
 801e074:	9b05      	ldr	r3, [sp, #20]
 801e076:	f1c0 001c 	rsb	r0, r0, #28
 801e07a:	4403      	add	r3, r0
 801e07c:	9305      	str	r3, [sp, #20]
 801e07e:	9b06      	ldr	r3, [sp, #24]
 801e080:	4406      	add	r6, r0
 801e082:	4403      	add	r3, r0
 801e084:	9306      	str	r3, [sp, #24]
 801e086:	9b05      	ldr	r3, [sp, #20]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	dd05      	ble.n	801e098 <_dtoa_r+0x758>
 801e08c:	9901      	ldr	r1, [sp, #4]
 801e08e:	461a      	mov	r2, r3
 801e090:	4648      	mov	r0, r9
 801e092:	f000 fcb9 	bl	801ea08 <__lshift>
 801e096:	9001      	str	r0, [sp, #4]
 801e098:	9b06      	ldr	r3, [sp, #24]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	dd05      	ble.n	801e0aa <_dtoa_r+0x76a>
 801e09e:	4621      	mov	r1, r4
 801e0a0:	461a      	mov	r2, r3
 801e0a2:	4648      	mov	r0, r9
 801e0a4:	f000 fcb0 	bl	801ea08 <__lshift>
 801e0a8:	4604      	mov	r4, r0
 801e0aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d056      	beq.n	801e15e <_dtoa_r+0x81e>
 801e0b0:	9801      	ldr	r0, [sp, #4]
 801e0b2:	4621      	mov	r1, r4
 801e0b4:	f000 fd14 	bl	801eae0 <__mcmp>
 801e0b8:	2800      	cmp	r0, #0
 801e0ba:	da50      	bge.n	801e15e <_dtoa_r+0x81e>
 801e0bc:	f108 33ff 	add.w	r3, r8, #4294967295
 801e0c0:	9304      	str	r3, [sp, #16]
 801e0c2:	9901      	ldr	r1, [sp, #4]
 801e0c4:	2300      	movs	r3, #0
 801e0c6:	220a      	movs	r2, #10
 801e0c8:	4648      	mov	r0, r9
 801e0ca:	f000 faf1 	bl	801e6b0 <__multadd>
 801e0ce:	9b08      	ldr	r3, [sp, #32]
 801e0d0:	9001      	str	r0, [sp, #4]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	f000 816e 	beq.w	801e3b4 <_dtoa_r+0xa74>
 801e0d8:	4629      	mov	r1, r5
 801e0da:	2300      	movs	r3, #0
 801e0dc:	220a      	movs	r2, #10
 801e0de:	4648      	mov	r0, r9
 801e0e0:	f000 fae6 	bl	801e6b0 <__multadd>
 801e0e4:	f1bb 0f00 	cmp.w	fp, #0
 801e0e8:	4605      	mov	r5, r0
 801e0ea:	dc64      	bgt.n	801e1b6 <_dtoa_r+0x876>
 801e0ec:	9b07      	ldr	r3, [sp, #28]
 801e0ee:	2b02      	cmp	r3, #2
 801e0f0:	dc3e      	bgt.n	801e170 <_dtoa_r+0x830>
 801e0f2:	e060      	b.n	801e1b6 <_dtoa_r+0x876>
 801e0f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e0f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801e0fa:	e73c      	b.n	801df76 <_dtoa_r+0x636>
 801e0fc:	f10a 34ff 	add.w	r4, sl, #4294967295
 801e100:	42a3      	cmp	r3, r4
 801e102:	bfbf      	itttt	lt
 801e104:	1ae2      	sublt	r2, r4, r3
 801e106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e108:	189b      	addlt	r3, r3, r2
 801e10a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801e10c:	bfae      	itee	ge
 801e10e:	1b1c      	subge	r4, r3, r4
 801e110:	4623      	movlt	r3, r4
 801e112:	2400      	movlt	r4, #0
 801e114:	f1ba 0f00 	cmp.w	sl, #0
 801e118:	bfb5      	itete	lt
 801e11a:	9a05      	ldrlt	r2, [sp, #20]
 801e11c:	9e05      	ldrge	r6, [sp, #20]
 801e11e:	eba2 060a 	sublt.w	r6, r2, sl
 801e122:	4652      	movge	r2, sl
 801e124:	bfb8      	it	lt
 801e126:	2200      	movlt	r2, #0
 801e128:	e727      	b.n	801df7a <_dtoa_r+0x63a>
 801e12a:	9e05      	ldr	r6, [sp, #20]
 801e12c:	9d08      	ldr	r5, [sp, #32]
 801e12e:	461c      	mov	r4, r3
 801e130:	e730      	b.n	801df94 <_dtoa_r+0x654>
 801e132:	461a      	mov	r2, r3
 801e134:	e758      	b.n	801dfe8 <_dtoa_r+0x6a8>
 801e136:	2300      	movs	r3, #0
 801e138:	e786      	b.n	801e048 <_dtoa_r+0x708>
 801e13a:	9b02      	ldr	r3, [sp, #8]
 801e13c:	e784      	b.n	801e048 <_dtoa_r+0x708>
 801e13e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e140:	e783      	b.n	801e04a <_dtoa_r+0x70a>
 801e142:	2300      	movs	r3, #0
 801e144:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e146:	e784      	b.n	801e052 <_dtoa_r+0x712>
 801e148:	d09d      	beq.n	801e086 <_dtoa_r+0x746>
 801e14a:	9b05      	ldr	r3, [sp, #20]
 801e14c:	321c      	adds	r2, #28
 801e14e:	4413      	add	r3, r2
 801e150:	9305      	str	r3, [sp, #20]
 801e152:	9b06      	ldr	r3, [sp, #24]
 801e154:	4416      	add	r6, r2
 801e156:	4413      	add	r3, r2
 801e158:	e794      	b.n	801e084 <_dtoa_r+0x744>
 801e15a:	4602      	mov	r2, r0
 801e15c:	e7f5      	b.n	801e14a <_dtoa_r+0x80a>
 801e15e:	f1ba 0f00 	cmp.w	sl, #0
 801e162:	f8cd 8010 	str.w	r8, [sp, #16]
 801e166:	46d3      	mov	fp, sl
 801e168:	dc21      	bgt.n	801e1ae <_dtoa_r+0x86e>
 801e16a:	9b07      	ldr	r3, [sp, #28]
 801e16c:	2b02      	cmp	r3, #2
 801e16e:	dd1e      	ble.n	801e1ae <_dtoa_r+0x86e>
 801e170:	f1bb 0f00 	cmp.w	fp, #0
 801e174:	f47f aeb7 	bne.w	801dee6 <_dtoa_r+0x5a6>
 801e178:	4621      	mov	r1, r4
 801e17a:	465b      	mov	r3, fp
 801e17c:	2205      	movs	r2, #5
 801e17e:	4648      	mov	r0, r9
 801e180:	f000 fa96 	bl	801e6b0 <__multadd>
 801e184:	4601      	mov	r1, r0
 801e186:	4604      	mov	r4, r0
 801e188:	9801      	ldr	r0, [sp, #4]
 801e18a:	f000 fca9 	bl	801eae0 <__mcmp>
 801e18e:	2800      	cmp	r0, #0
 801e190:	f77f aea9 	ble.w	801dee6 <_dtoa_r+0x5a6>
 801e194:	463e      	mov	r6, r7
 801e196:	2331      	movs	r3, #49	@ 0x31
 801e198:	f806 3b01 	strb.w	r3, [r6], #1
 801e19c:	9b04      	ldr	r3, [sp, #16]
 801e19e:	3301      	adds	r3, #1
 801e1a0:	9304      	str	r3, [sp, #16]
 801e1a2:	e6a4      	b.n	801deee <_dtoa_r+0x5ae>
 801e1a4:	f8cd 8010 	str.w	r8, [sp, #16]
 801e1a8:	4654      	mov	r4, sl
 801e1aa:	4625      	mov	r5, r4
 801e1ac:	e7f2      	b.n	801e194 <_dtoa_r+0x854>
 801e1ae:	9b08      	ldr	r3, [sp, #32]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	f000 8103 	beq.w	801e3bc <_dtoa_r+0xa7c>
 801e1b6:	2e00      	cmp	r6, #0
 801e1b8:	dd05      	ble.n	801e1c6 <_dtoa_r+0x886>
 801e1ba:	4629      	mov	r1, r5
 801e1bc:	4632      	mov	r2, r6
 801e1be:	4648      	mov	r0, r9
 801e1c0:	f000 fc22 	bl	801ea08 <__lshift>
 801e1c4:	4605      	mov	r5, r0
 801e1c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d058      	beq.n	801e27e <_dtoa_r+0x93e>
 801e1cc:	6869      	ldr	r1, [r5, #4]
 801e1ce:	4648      	mov	r0, r9
 801e1d0:	f000 fa0c 	bl	801e5ec <_Balloc>
 801e1d4:	4606      	mov	r6, r0
 801e1d6:	b928      	cbnz	r0, 801e1e4 <_dtoa_r+0x8a4>
 801e1d8:	4b82      	ldr	r3, [pc, #520]	@ (801e3e4 <_dtoa_r+0xaa4>)
 801e1da:	4602      	mov	r2, r0
 801e1dc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e1e0:	f7ff bbc7 	b.w	801d972 <_dtoa_r+0x32>
 801e1e4:	692a      	ldr	r2, [r5, #16]
 801e1e6:	3202      	adds	r2, #2
 801e1e8:	0092      	lsls	r2, r2, #2
 801e1ea:	f105 010c 	add.w	r1, r5, #12
 801e1ee:	300c      	adds	r0, #12
 801e1f0:	f7ff faef 	bl	801d7d2 <memcpy>
 801e1f4:	2201      	movs	r2, #1
 801e1f6:	4631      	mov	r1, r6
 801e1f8:	4648      	mov	r0, r9
 801e1fa:	f000 fc05 	bl	801ea08 <__lshift>
 801e1fe:	1c7b      	adds	r3, r7, #1
 801e200:	9305      	str	r3, [sp, #20]
 801e202:	eb07 030b 	add.w	r3, r7, fp
 801e206:	9309      	str	r3, [sp, #36]	@ 0x24
 801e208:	9b02      	ldr	r3, [sp, #8]
 801e20a:	f003 0301 	and.w	r3, r3, #1
 801e20e:	46a8      	mov	r8, r5
 801e210:	9308      	str	r3, [sp, #32]
 801e212:	4605      	mov	r5, r0
 801e214:	9b05      	ldr	r3, [sp, #20]
 801e216:	9801      	ldr	r0, [sp, #4]
 801e218:	4621      	mov	r1, r4
 801e21a:	f103 3bff 	add.w	fp, r3, #4294967295
 801e21e:	f7ff fb05 	bl	801d82c <quorem>
 801e222:	4641      	mov	r1, r8
 801e224:	9002      	str	r0, [sp, #8]
 801e226:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e22a:	9801      	ldr	r0, [sp, #4]
 801e22c:	f000 fc58 	bl	801eae0 <__mcmp>
 801e230:	462a      	mov	r2, r5
 801e232:	9006      	str	r0, [sp, #24]
 801e234:	4621      	mov	r1, r4
 801e236:	4648      	mov	r0, r9
 801e238:	f000 fc6e 	bl	801eb18 <__mdiff>
 801e23c:	68c2      	ldr	r2, [r0, #12]
 801e23e:	4606      	mov	r6, r0
 801e240:	b9fa      	cbnz	r2, 801e282 <_dtoa_r+0x942>
 801e242:	4601      	mov	r1, r0
 801e244:	9801      	ldr	r0, [sp, #4]
 801e246:	f000 fc4b 	bl	801eae0 <__mcmp>
 801e24a:	4602      	mov	r2, r0
 801e24c:	4631      	mov	r1, r6
 801e24e:	4648      	mov	r0, r9
 801e250:	920a      	str	r2, [sp, #40]	@ 0x28
 801e252:	f000 fa0b 	bl	801e66c <_Bfree>
 801e256:	9b07      	ldr	r3, [sp, #28]
 801e258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e25a:	9e05      	ldr	r6, [sp, #20]
 801e25c:	ea43 0102 	orr.w	r1, r3, r2
 801e260:	9b08      	ldr	r3, [sp, #32]
 801e262:	4319      	orrs	r1, r3
 801e264:	d10f      	bne.n	801e286 <_dtoa_r+0x946>
 801e266:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e26a:	d028      	beq.n	801e2be <_dtoa_r+0x97e>
 801e26c:	9b06      	ldr	r3, [sp, #24]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	dd02      	ble.n	801e278 <_dtoa_r+0x938>
 801e272:	9b02      	ldr	r3, [sp, #8]
 801e274:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801e278:	f88b a000 	strb.w	sl, [fp]
 801e27c:	e639      	b.n	801def2 <_dtoa_r+0x5b2>
 801e27e:	4628      	mov	r0, r5
 801e280:	e7bd      	b.n	801e1fe <_dtoa_r+0x8be>
 801e282:	2201      	movs	r2, #1
 801e284:	e7e2      	b.n	801e24c <_dtoa_r+0x90c>
 801e286:	9b06      	ldr	r3, [sp, #24]
 801e288:	2b00      	cmp	r3, #0
 801e28a:	db04      	blt.n	801e296 <_dtoa_r+0x956>
 801e28c:	9907      	ldr	r1, [sp, #28]
 801e28e:	430b      	orrs	r3, r1
 801e290:	9908      	ldr	r1, [sp, #32]
 801e292:	430b      	orrs	r3, r1
 801e294:	d120      	bne.n	801e2d8 <_dtoa_r+0x998>
 801e296:	2a00      	cmp	r2, #0
 801e298:	ddee      	ble.n	801e278 <_dtoa_r+0x938>
 801e29a:	9901      	ldr	r1, [sp, #4]
 801e29c:	2201      	movs	r2, #1
 801e29e:	4648      	mov	r0, r9
 801e2a0:	f000 fbb2 	bl	801ea08 <__lshift>
 801e2a4:	4621      	mov	r1, r4
 801e2a6:	9001      	str	r0, [sp, #4]
 801e2a8:	f000 fc1a 	bl	801eae0 <__mcmp>
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	dc03      	bgt.n	801e2b8 <_dtoa_r+0x978>
 801e2b0:	d1e2      	bne.n	801e278 <_dtoa_r+0x938>
 801e2b2:	f01a 0f01 	tst.w	sl, #1
 801e2b6:	d0df      	beq.n	801e278 <_dtoa_r+0x938>
 801e2b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e2bc:	d1d9      	bne.n	801e272 <_dtoa_r+0x932>
 801e2be:	2339      	movs	r3, #57	@ 0x39
 801e2c0:	f88b 3000 	strb.w	r3, [fp]
 801e2c4:	4633      	mov	r3, r6
 801e2c6:	461e      	mov	r6, r3
 801e2c8:	3b01      	subs	r3, #1
 801e2ca:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e2ce:	2a39      	cmp	r2, #57	@ 0x39
 801e2d0:	d053      	beq.n	801e37a <_dtoa_r+0xa3a>
 801e2d2:	3201      	adds	r2, #1
 801e2d4:	701a      	strb	r2, [r3, #0]
 801e2d6:	e60c      	b.n	801def2 <_dtoa_r+0x5b2>
 801e2d8:	2a00      	cmp	r2, #0
 801e2da:	dd07      	ble.n	801e2ec <_dtoa_r+0x9ac>
 801e2dc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e2e0:	d0ed      	beq.n	801e2be <_dtoa_r+0x97e>
 801e2e2:	f10a 0301 	add.w	r3, sl, #1
 801e2e6:	f88b 3000 	strb.w	r3, [fp]
 801e2ea:	e602      	b.n	801def2 <_dtoa_r+0x5b2>
 801e2ec:	9b05      	ldr	r3, [sp, #20]
 801e2ee:	9a05      	ldr	r2, [sp, #20]
 801e2f0:	f803 ac01 	strb.w	sl, [r3, #-1]
 801e2f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2f6:	4293      	cmp	r3, r2
 801e2f8:	d029      	beq.n	801e34e <_dtoa_r+0xa0e>
 801e2fa:	9901      	ldr	r1, [sp, #4]
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	220a      	movs	r2, #10
 801e300:	4648      	mov	r0, r9
 801e302:	f000 f9d5 	bl	801e6b0 <__multadd>
 801e306:	45a8      	cmp	r8, r5
 801e308:	9001      	str	r0, [sp, #4]
 801e30a:	f04f 0300 	mov.w	r3, #0
 801e30e:	f04f 020a 	mov.w	r2, #10
 801e312:	4641      	mov	r1, r8
 801e314:	4648      	mov	r0, r9
 801e316:	d107      	bne.n	801e328 <_dtoa_r+0x9e8>
 801e318:	f000 f9ca 	bl	801e6b0 <__multadd>
 801e31c:	4680      	mov	r8, r0
 801e31e:	4605      	mov	r5, r0
 801e320:	9b05      	ldr	r3, [sp, #20]
 801e322:	3301      	adds	r3, #1
 801e324:	9305      	str	r3, [sp, #20]
 801e326:	e775      	b.n	801e214 <_dtoa_r+0x8d4>
 801e328:	f000 f9c2 	bl	801e6b0 <__multadd>
 801e32c:	4629      	mov	r1, r5
 801e32e:	4680      	mov	r8, r0
 801e330:	2300      	movs	r3, #0
 801e332:	220a      	movs	r2, #10
 801e334:	4648      	mov	r0, r9
 801e336:	f000 f9bb 	bl	801e6b0 <__multadd>
 801e33a:	4605      	mov	r5, r0
 801e33c:	e7f0      	b.n	801e320 <_dtoa_r+0x9e0>
 801e33e:	f1bb 0f00 	cmp.w	fp, #0
 801e342:	bfcc      	ite	gt
 801e344:	465e      	movgt	r6, fp
 801e346:	2601      	movle	r6, #1
 801e348:	443e      	add	r6, r7
 801e34a:	f04f 0800 	mov.w	r8, #0
 801e34e:	9901      	ldr	r1, [sp, #4]
 801e350:	2201      	movs	r2, #1
 801e352:	4648      	mov	r0, r9
 801e354:	f000 fb58 	bl	801ea08 <__lshift>
 801e358:	4621      	mov	r1, r4
 801e35a:	9001      	str	r0, [sp, #4]
 801e35c:	f000 fbc0 	bl	801eae0 <__mcmp>
 801e360:	2800      	cmp	r0, #0
 801e362:	dcaf      	bgt.n	801e2c4 <_dtoa_r+0x984>
 801e364:	d102      	bne.n	801e36c <_dtoa_r+0xa2c>
 801e366:	f01a 0f01 	tst.w	sl, #1
 801e36a:	d1ab      	bne.n	801e2c4 <_dtoa_r+0x984>
 801e36c:	4633      	mov	r3, r6
 801e36e:	461e      	mov	r6, r3
 801e370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e374:	2a30      	cmp	r2, #48	@ 0x30
 801e376:	d0fa      	beq.n	801e36e <_dtoa_r+0xa2e>
 801e378:	e5bb      	b.n	801def2 <_dtoa_r+0x5b2>
 801e37a:	429f      	cmp	r7, r3
 801e37c:	d1a3      	bne.n	801e2c6 <_dtoa_r+0x986>
 801e37e:	9b04      	ldr	r3, [sp, #16]
 801e380:	3301      	adds	r3, #1
 801e382:	9304      	str	r3, [sp, #16]
 801e384:	2331      	movs	r3, #49	@ 0x31
 801e386:	703b      	strb	r3, [r7, #0]
 801e388:	e5b3      	b.n	801def2 <_dtoa_r+0x5b2>
 801e38a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e38c:	4f16      	ldr	r7, [pc, #88]	@ (801e3e8 <_dtoa_r+0xaa8>)
 801e38e:	b11b      	cbz	r3, 801e398 <_dtoa_r+0xa58>
 801e390:	f107 0308 	add.w	r3, r7, #8
 801e394:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e396:	6013      	str	r3, [r2, #0]
 801e398:	4638      	mov	r0, r7
 801e39a:	b011      	add	sp, #68	@ 0x44
 801e39c:	ecbd 8b02 	vpop	{d8}
 801e3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a4:	9b07      	ldr	r3, [sp, #28]
 801e3a6:	2b01      	cmp	r3, #1
 801e3a8:	f77f ae36 	ble.w	801e018 <_dtoa_r+0x6d8>
 801e3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e3b0:	2001      	movs	r0, #1
 801e3b2:	e656      	b.n	801e062 <_dtoa_r+0x722>
 801e3b4:	f1bb 0f00 	cmp.w	fp, #0
 801e3b8:	f77f aed7 	ble.w	801e16a <_dtoa_r+0x82a>
 801e3bc:	463e      	mov	r6, r7
 801e3be:	9801      	ldr	r0, [sp, #4]
 801e3c0:	4621      	mov	r1, r4
 801e3c2:	f7ff fa33 	bl	801d82c <quorem>
 801e3c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e3ca:	f806 ab01 	strb.w	sl, [r6], #1
 801e3ce:	1bf2      	subs	r2, r6, r7
 801e3d0:	4593      	cmp	fp, r2
 801e3d2:	ddb4      	ble.n	801e33e <_dtoa_r+0x9fe>
 801e3d4:	9901      	ldr	r1, [sp, #4]
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	220a      	movs	r2, #10
 801e3da:	4648      	mov	r0, r9
 801e3dc:	f000 f968 	bl	801e6b0 <__multadd>
 801e3e0:	9001      	str	r0, [sp, #4]
 801e3e2:	e7ec      	b.n	801e3be <_dtoa_r+0xa7e>
 801e3e4:	0802281b 	.word	0x0802281b
 801e3e8:	080227b6 	.word	0x080227b6

0801e3ec <_free_r>:
 801e3ec:	b538      	push	{r3, r4, r5, lr}
 801e3ee:	4605      	mov	r5, r0
 801e3f0:	2900      	cmp	r1, #0
 801e3f2:	d041      	beq.n	801e478 <_free_r+0x8c>
 801e3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3f8:	1f0c      	subs	r4, r1, #4
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	bfb8      	it	lt
 801e3fe:	18e4      	addlt	r4, r4, r3
 801e400:	f000 f8e8 	bl	801e5d4 <__malloc_lock>
 801e404:	4a1d      	ldr	r2, [pc, #116]	@ (801e47c <_free_r+0x90>)
 801e406:	6813      	ldr	r3, [r2, #0]
 801e408:	b933      	cbnz	r3, 801e418 <_free_r+0x2c>
 801e40a:	6063      	str	r3, [r4, #4]
 801e40c:	6014      	str	r4, [r2, #0]
 801e40e:	4628      	mov	r0, r5
 801e410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e414:	f000 b8e4 	b.w	801e5e0 <__malloc_unlock>
 801e418:	42a3      	cmp	r3, r4
 801e41a:	d908      	bls.n	801e42e <_free_r+0x42>
 801e41c:	6820      	ldr	r0, [r4, #0]
 801e41e:	1821      	adds	r1, r4, r0
 801e420:	428b      	cmp	r3, r1
 801e422:	bf01      	itttt	eq
 801e424:	6819      	ldreq	r1, [r3, #0]
 801e426:	685b      	ldreq	r3, [r3, #4]
 801e428:	1809      	addeq	r1, r1, r0
 801e42a:	6021      	streq	r1, [r4, #0]
 801e42c:	e7ed      	b.n	801e40a <_free_r+0x1e>
 801e42e:	461a      	mov	r2, r3
 801e430:	685b      	ldr	r3, [r3, #4]
 801e432:	b10b      	cbz	r3, 801e438 <_free_r+0x4c>
 801e434:	42a3      	cmp	r3, r4
 801e436:	d9fa      	bls.n	801e42e <_free_r+0x42>
 801e438:	6811      	ldr	r1, [r2, #0]
 801e43a:	1850      	adds	r0, r2, r1
 801e43c:	42a0      	cmp	r0, r4
 801e43e:	d10b      	bne.n	801e458 <_free_r+0x6c>
 801e440:	6820      	ldr	r0, [r4, #0]
 801e442:	4401      	add	r1, r0
 801e444:	1850      	adds	r0, r2, r1
 801e446:	4283      	cmp	r3, r0
 801e448:	6011      	str	r1, [r2, #0]
 801e44a:	d1e0      	bne.n	801e40e <_free_r+0x22>
 801e44c:	6818      	ldr	r0, [r3, #0]
 801e44e:	685b      	ldr	r3, [r3, #4]
 801e450:	6053      	str	r3, [r2, #4]
 801e452:	4408      	add	r0, r1
 801e454:	6010      	str	r0, [r2, #0]
 801e456:	e7da      	b.n	801e40e <_free_r+0x22>
 801e458:	d902      	bls.n	801e460 <_free_r+0x74>
 801e45a:	230c      	movs	r3, #12
 801e45c:	602b      	str	r3, [r5, #0]
 801e45e:	e7d6      	b.n	801e40e <_free_r+0x22>
 801e460:	6820      	ldr	r0, [r4, #0]
 801e462:	1821      	adds	r1, r4, r0
 801e464:	428b      	cmp	r3, r1
 801e466:	bf04      	itt	eq
 801e468:	6819      	ldreq	r1, [r3, #0]
 801e46a:	685b      	ldreq	r3, [r3, #4]
 801e46c:	6063      	str	r3, [r4, #4]
 801e46e:	bf04      	itt	eq
 801e470:	1809      	addeq	r1, r1, r0
 801e472:	6021      	streq	r1, [r4, #0]
 801e474:	6054      	str	r4, [r2, #4]
 801e476:	e7ca      	b.n	801e40e <_free_r+0x22>
 801e478:	bd38      	pop	{r3, r4, r5, pc}
 801e47a:	bf00      	nop
 801e47c:	2400cf10 	.word	0x2400cf10

0801e480 <malloc>:
 801e480:	4b02      	ldr	r3, [pc, #8]	@ (801e48c <malloc+0xc>)
 801e482:	4601      	mov	r1, r0
 801e484:	6818      	ldr	r0, [r3, #0]
 801e486:	f000 b825 	b.w	801e4d4 <_malloc_r>
 801e48a:	bf00      	nop
 801e48c:	24000044 	.word	0x24000044

0801e490 <sbrk_aligned>:
 801e490:	b570      	push	{r4, r5, r6, lr}
 801e492:	4e0f      	ldr	r6, [pc, #60]	@ (801e4d0 <sbrk_aligned+0x40>)
 801e494:	460c      	mov	r4, r1
 801e496:	6831      	ldr	r1, [r6, #0]
 801e498:	4605      	mov	r5, r0
 801e49a:	b911      	cbnz	r1, 801e4a2 <sbrk_aligned+0x12>
 801e49c:	f000 feac 	bl	801f1f8 <_sbrk_r>
 801e4a0:	6030      	str	r0, [r6, #0]
 801e4a2:	4621      	mov	r1, r4
 801e4a4:	4628      	mov	r0, r5
 801e4a6:	f000 fea7 	bl	801f1f8 <_sbrk_r>
 801e4aa:	1c43      	adds	r3, r0, #1
 801e4ac:	d103      	bne.n	801e4b6 <sbrk_aligned+0x26>
 801e4ae:	f04f 34ff 	mov.w	r4, #4294967295
 801e4b2:	4620      	mov	r0, r4
 801e4b4:	bd70      	pop	{r4, r5, r6, pc}
 801e4b6:	1cc4      	adds	r4, r0, #3
 801e4b8:	f024 0403 	bic.w	r4, r4, #3
 801e4bc:	42a0      	cmp	r0, r4
 801e4be:	d0f8      	beq.n	801e4b2 <sbrk_aligned+0x22>
 801e4c0:	1a21      	subs	r1, r4, r0
 801e4c2:	4628      	mov	r0, r5
 801e4c4:	f000 fe98 	bl	801f1f8 <_sbrk_r>
 801e4c8:	3001      	adds	r0, #1
 801e4ca:	d1f2      	bne.n	801e4b2 <sbrk_aligned+0x22>
 801e4cc:	e7ef      	b.n	801e4ae <sbrk_aligned+0x1e>
 801e4ce:	bf00      	nop
 801e4d0:	2400cf0c 	.word	0x2400cf0c

0801e4d4 <_malloc_r>:
 801e4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4d8:	1ccd      	adds	r5, r1, #3
 801e4da:	f025 0503 	bic.w	r5, r5, #3
 801e4de:	3508      	adds	r5, #8
 801e4e0:	2d0c      	cmp	r5, #12
 801e4e2:	bf38      	it	cc
 801e4e4:	250c      	movcc	r5, #12
 801e4e6:	2d00      	cmp	r5, #0
 801e4e8:	4606      	mov	r6, r0
 801e4ea:	db01      	blt.n	801e4f0 <_malloc_r+0x1c>
 801e4ec:	42a9      	cmp	r1, r5
 801e4ee:	d904      	bls.n	801e4fa <_malloc_r+0x26>
 801e4f0:	230c      	movs	r3, #12
 801e4f2:	6033      	str	r3, [r6, #0]
 801e4f4:	2000      	movs	r0, #0
 801e4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e5d0 <_malloc_r+0xfc>
 801e4fe:	f000 f869 	bl	801e5d4 <__malloc_lock>
 801e502:	f8d8 3000 	ldr.w	r3, [r8]
 801e506:	461c      	mov	r4, r3
 801e508:	bb44      	cbnz	r4, 801e55c <_malloc_r+0x88>
 801e50a:	4629      	mov	r1, r5
 801e50c:	4630      	mov	r0, r6
 801e50e:	f7ff ffbf 	bl	801e490 <sbrk_aligned>
 801e512:	1c43      	adds	r3, r0, #1
 801e514:	4604      	mov	r4, r0
 801e516:	d158      	bne.n	801e5ca <_malloc_r+0xf6>
 801e518:	f8d8 4000 	ldr.w	r4, [r8]
 801e51c:	4627      	mov	r7, r4
 801e51e:	2f00      	cmp	r7, #0
 801e520:	d143      	bne.n	801e5aa <_malloc_r+0xd6>
 801e522:	2c00      	cmp	r4, #0
 801e524:	d04b      	beq.n	801e5be <_malloc_r+0xea>
 801e526:	6823      	ldr	r3, [r4, #0]
 801e528:	4639      	mov	r1, r7
 801e52a:	4630      	mov	r0, r6
 801e52c:	eb04 0903 	add.w	r9, r4, r3
 801e530:	f000 fe62 	bl	801f1f8 <_sbrk_r>
 801e534:	4581      	cmp	r9, r0
 801e536:	d142      	bne.n	801e5be <_malloc_r+0xea>
 801e538:	6821      	ldr	r1, [r4, #0]
 801e53a:	1a6d      	subs	r5, r5, r1
 801e53c:	4629      	mov	r1, r5
 801e53e:	4630      	mov	r0, r6
 801e540:	f7ff ffa6 	bl	801e490 <sbrk_aligned>
 801e544:	3001      	adds	r0, #1
 801e546:	d03a      	beq.n	801e5be <_malloc_r+0xea>
 801e548:	6823      	ldr	r3, [r4, #0]
 801e54a:	442b      	add	r3, r5
 801e54c:	6023      	str	r3, [r4, #0]
 801e54e:	f8d8 3000 	ldr.w	r3, [r8]
 801e552:	685a      	ldr	r2, [r3, #4]
 801e554:	bb62      	cbnz	r2, 801e5b0 <_malloc_r+0xdc>
 801e556:	f8c8 7000 	str.w	r7, [r8]
 801e55a:	e00f      	b.n	801e57c <_malloc_r+0xa8>
 801e55c:	6822      	ldr	r2, [r4, #0]
 801e55e:	1b52      	subs	r2, r2, r5
 801e560:	d420      	bmi.n	801e5a4 <_malloc_r+0xd0>
 801e562:	2a0b      	cmp	r2, #11
 801e564:	d917      	bls.n	801e596 <_malloc_r+0xc2>
 801e566:	1961      	adds	r1, r4, r5
 801e568:	42a3      	cmp	r3, r4
 801e56a:	6025      	str	r5, [r4, #0]
 801e56c:	bf18      	it	ne
 801e56e:	6059      	strne	r1, [r3, #4]
 801e570:	6863      	ldr	r3, [r4, #4]
 801e572:	bf08      	it	eq
 801e574:	f8c8 1000 	streq.w	r1, [r8]
 801e578:	5162      	str	r2, [r4, r5]
 801e57a:	604b      	str	r3, [r1, #4]
 801e57c:	4630      	mov	r0, r6
 801e57e:	f000 f82f 	bl	801e5e0 <__malloc_unlock>
 801e582:	f104 000b 	add.w	r0, r4, #11
 801e586:	1d23      	adds	r3, r4, #4
 801e588:	f020 0007 	bic.w	r0, r0, #7
 801e58c:	1ac2      	subs	r2, r0, r3
 801e58e:	bf1c      	itt	ne
 801e590:	1a1b      	subne	r3, r3, r0
 801e592:	50a3      	strne	r3, [r4, r2]
 801e594:	e7af      	b.n	801e4f6 <_malloc_r+0x22>
 801e596:	6862      	ldr	r2, [r4, #4]
 801e598:	42a3      	cmp	r3, r4
 801e59a:	bf0c      	ite	eq
 801e59c:	f8c8 2000 	streq.w	r2, [r8]
 801e5a0:	605a      	strne	r2, [r3, #4]
 801e5a2:	e7eb      	b.n	801e57c <_malloc_r+0xa8>
 801e5a4:	4623      	mov	r3, r4
 801e5a6:	6864      	ldr	r4, [r4, #4]
 801e5a8:	e7ae      	b.n	801e508 <_malloc_r+0x34>
 801e5aa:	463c      	mov	r4, r7
 801e5ac:	687f      	ldr	r7, [r7, #4]
 801e5ae:	e7b6      	b.n	801e51e <_malloc_r+0x4a>
 801e5b0:	461a      	mov	r2, r3
 801e5b2:	685b      	ldr	r3, [r3, #4]
 801e5b4:	42a3      	cmp	r3, r4
 801e5b6:	d1fb      	bne.n	801e5b0 <_malloc_r+0xdc>
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	6053      	str	r3, [r2, #4]
 801e5bc:	e7de      	b.n	801e57c <_malloc_r+0xa8>
 801e5be:	230c      	movs	r3, #12
 801e5c0:	6033      	str	r3, [r6, #0]
 801e5c2:	4630      	mov	r0, r6
 801e5c4:	f000 f80c 	bl	801e5e0 <__malloc_unlock>
 801e5c8:	e794      	b.n	801e4f4 <_malloc_r+0x20>
 801e5ca:	6005      	str	r5, [r0, #0]
 801e5cc:	e7d6      	b.n	801e57c <_malloc_r+0xa8>
 801e5ce:	bf00      	nop
 801e5d0:	2400cf10 	.word	0x2400cf10

0801e5d4 <__malloc_lock>:
 801e5d4:	4801      	ldr	r0, [pc, #4]	@ (801e5dc <__malloc_lock+0x8>)
 801e5d6:	f7ff b8fa 	b.w	801d7ce <__retarget_lock_acquire_recursive>
 801e5da:	bf00      	nop
 801e5dc:	2400cf08 	.word	0x2400cf08

0801e5e0 <__malloc_unlock>:
 801e5e0:	4801      	ldr	r0, [pc, #4]	@ (801e5e8 <__malloc_unlock+0x8>)
 801e5e2:	f7ff b8f5 	b.w	801d7d0 <__retarget_lock_release_recursive>
 801e5e6:	bf00      	nop
 801e5e8:	2400cf08 	.word	0x2400cf08

0801e5ec <_Balloc>:
 801e5ec:	b570      	push	{r4, r5, r6, lr}
 801e5ee:	69c6      	ldr	r6, [r0, #28]
 801e5f0:	4604      	mov	r4, r0
 801e5f2:	460d      	mov	r5, r1
 801e5f4:	b976      	cbnz	r6, 801e614 <_Balloc+0x28>
 801e5f6:	2010      	movs	r0, #16
 801e5f8:	f7ff ff42 	bl	801e480 <malloc>
 801e5fc:	4602      	mov	r2, r0
 801e5fe:	61e0      	str	r0, [r4, #28]
 801e600:	b920      	cbnz	r0, 801e60c <_Balloc+0x20>
 801e602:	4b18      	ldr	r3, [pc, #96]	@ (801e664 <_Balloc+0x78>)
 801e604:	4818      	ldr	r0, [pc, #96]	@ (801e668 <_Balloc+0x7c>)
 801e606:	216b      	movs	r1, #107	@ 0x6b
 801e608:	f7ff f8f2 	bl	801d7f0 <__assert_func>
 801e60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e610:	6006      	str	r6, [r0, #0]
 801e612:	60c6      	str	r6, [r0, #12]
 801e614:	69e6      	ldr	r6, [r4, #28]
 801e616:	68f3      	ldr	r3, [r6, #12]
 801e618:	b183      	cbz	r3, 801e63c <_Balloc+0x50>
 801e61a:	69e3      	ldr	r3, [r4, #28]
 801e61c:	68db      	ldr	r3, [r3, #12]
 801e61e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e622:	b9b8      	cbnz	r0, 801e654 <_Balloc+0x68>
 801e624:	2101      	movs	r1, #1
 801e626:	fa01 f605 	lsl.w	r6, r1, r5
 801e62a:	1d72      	adds	r2, r6, #5
 801e62c:	0092      	lsls	r2, r2, #2
 801e62e:	4620      	mov	r0, r4
 801e630:	f000 fdf9 	bl	801f226 <_calloc_r>
 801e634:	b160      	cbz	r0, 801e650 <_Balloc+0x64>
 801e636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e63a:	e00e      	b.n	801e65a <_Balloc+0x6e>
 801e63c:	2221      	movs	r2, #33	@ 0x21
 801e63e:	2104      	movs	r1, #4
 801e640:	4620      	mov	r0, r4
 801e642:	f000 fdf0 	bl	801f226 <_calloc_r>
 801e646:	69e3      	ldr	r3, [r4, #28]
 801e648:	60f0      	str	r0, [r6, #12]
 801e64a:	68db      	ldr	r3, [r3, #12]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d1e4      	bne.n	801e61a <_Balloc+0x2e>
 801e650:	2000      	movs	r0, #0
 801e652:	bd70      	pop	{r4, r5, r6, pc}
 801e654:	6802      	ldr	r2, [r0, #0]
 801e656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e65a:	2300      	movs	r3, #0
 801e65c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e660:	e7f7      	b.n	801e652 <_Balloc+0x66>
 801e662:	bf00      	nop
 801e664:	080225d6 	.word	0x080225d6
 801e668:	0802282c 	.word	0x0802282c

0801e66c <_Bfree>:
 801e66c:	b570      	push	{r4, r5, r6, lr}
 801e66e:	69c6      	ldr	r6, [r0, #28]
 801e670:	4605      	mov	r5, r0
 801e672:	460c      	mov	r4, r1
 801e674:	b976      	cbnz	r6, 801e694 <_Bfree+0x28>
 801e676:	2010      	movs	r0, #16
 801e678:	f7ff ff02 	bl	801e480 <malloc>
 801e67c:	4602      	mov	r2, r0
 801e67e:	61e8      	str	r0, [r5, #28]
 801e680:	b920      	cbnz	r0, 801e68c <_Bfree+0x20>
 801e682:	4b09      	ldr	r3, [pc, #36]	@ (801e6a8 <_Bfree+0x3c>)
 801e684:	4809      	ldr	r0, [pc, #36]	@ (801e6ac <_Bfree+0x40>)
 801e686:	218f      	movs	r1, #143	@ 0x8f
 801e688:	f7ff f8b2 	bl	801d7f0 <__assert_func>
 801e68c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e690:	6006      	str	r6, [r0, #0]
 801e692:	60c6      	str	r6, [r0, #12]
 801e694:	b13c      	cbz	r4, 801e6a6 <_Bfree+0x3a>
 801e696:	69eb      	ldr	r3, [r5, #28]
 801e698:	6862      	ldr	r2, [r4, #4]
 801e69a:	68db      	ldr	r3, [r3, #12]
 801e69c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e6a0:	6021      	str	r1, [r4, #0]
 801e6a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e6a6:	bd70      	pop	{r4, r5, r6, pc}
 801e6a8:	080225d6 	.word	0x080225d6
 801e6ac:	0802282c 	.word	0x0802282c

0801e6b0 <__multadd>:
 801e6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6b4:	690d      	ldr	r5, [r1, #16]
 801e6b6:	4607      	mov	r7, r0
 801e6b8:	460c      	mov	r4, r1
 801e6ba:	461e      	mov	r6, r3
 801e6bc:	f101 0c14 	add.w	ip, r1, #20
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	f8dc 3000 	ldr.w	r3, [ip]
 801e6c6:	b299      	uxth	r1, r3
 801e6c8:	fb02 6101 	mla	r1, r2, r1, r6
 801e6cc:	0c1e      	lsrs	r6, r3, #16
 801e6ce:	0c0b      	lsrs	r3, r1, #16
 801e6d0:	fb02 3306 	mla	r3, r2, r6, r3
 801e6d4:	b289      	uxth	r1, r1
 801e6d6:	3001      	adds	r0, #1
 801e6d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e6dc:	4285      	cmp	r5, r0
 801e6de:	f84c 1b04 	str.w	r1, [ip], #4
 801e6e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e6e6:	dcec      	bgt.n	801e6c2 <__multadd+0x12>
 801e6e8:	b30e      	cbz	r6, 801e72e <__multadd+0x7e>
 801e6ea:	68a3      	ldr	r3, [r4, #8]
 801e6ec:	42ab      	cmp	r3, r5
 801e6ee:	dc19      	bgt.n	801e724 <__multadd+0x74>
 801e6f0:	6861      	ldr	r1, [r4, #4]
 801e6f2:	4638      	mov	r0, r7
 801e6f4:	3101      	adds	r1, #1
 801e6f6:	f7ff ff79 	bl	801e5ec <_Balloc>
 801e6fa:	4680      	mov	r8, r0
 801e6fc:	b928      	cbnz	r0, 801e70a <__multadd+0x5a>
 801e6fe:	4602      	mov	r2, r0
 801e700:	4b0c      	ldr	r3, [pc, #48]	@ (801e734 <__multadd+0x84>)
 801e702:	480d      	ldr	r0, [pc, #52]	@ (801e738 <__multadd+0x88>)
 801e704:	21ba      	movs	r1, #186	@ 0xba
 801e706:	f7ff f873 	bl	801d7f0 <__assert_func>
 801e70a:	6922      	ldr	r2, [r4, #16]
 801e70c:	3202      	adds	r2, #2
 801e70e:	f104 010c 	add.w	r1, r4, #12
 801e712:	0092      	lsls	r2, r2, #2
 801e714:	300c      	adds	r0, #12
 801e716:	f7ff f85c 	bl	801d7d2 <memcpy>
 801e71a:	4621      	mov	r1, r4
 801e71c:	4638      	mov	r0, r7
 801e71e:	f7ff ffa5 	bl	801e66c <_Bfree>
 801e722:	4644      	mov	r4, r8
 801e724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e728:	3501      	adds	r5, #1
 801e72a:	615e      	str	r6, [r3, #20]
 801e72c:	6125      	str	r5, [r4, #16]
 801e72e:	4620      	mov	r0, r4
 801e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e734:	0802281b 	.word	0x0802281b
 801e738:	0802282c 	.word	0x0802282c

0801e73c <__hi0bits>:
 801e73c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e740:	4603      	mov	r3, r0
 801e742:	bf36      	itet	cc
 801e744:	0403      	lslcc	r3, r0, #16
 801e746:	2000      	movcs	r0, #0
 801e748:	2010      	movcc	r0, #16
 801e74a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e74e:	bf3c      	itt	cc
 801e750:	021b      	lslcc	r3, r3, #8
 801e752:	3008      	addcc	r0, #8
 801e754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e758:	bf3c      	itt	cc
 801e75a:	011b      	lslcc	r3, r3, #4
 801e75c:	3004      	addcc	r0, #4
 801e75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e762:	bf3c      	itt	cc
 801e764:	009b      	lslcc	r3, r3, #2
 801e766:	3002      	addcc	r0, #2
 801e768:	2b00      	cmp	r3, #0
 801e76a:	db05      	blt.n	801e778 <__hi0bits+0x3c>
 801e76c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e770:	f100 0001 	add.w	r0, r0, #1
 801e774:	bf08      	it	eq
 801e776:	2020      	moveq	r0, #32
 801e778:	4770      	bx	lr

0801e77a <__lo0bits>:
 801e77a:	6803      	ldr	r3, [r0, #0]
 801e77c:	4602      	mov	r2, r0
 801e77e:	f013 0007 	ands.w	r0, r3, #7
 801e782:	d00b      	beq.n	801e79c <__lo0bits+0x22>
 801e784:	07d9      	lsls	r1, r3, #31
 801e786:	d421      	bmi.n	801e7cc <__lo0bits+0x52>
 801e788:	0798      	lsls	r0, r3, #30
 801e78a:	bf49      	itett	mi
 801e78c:	085b      	lsrmi	r3, r3, #1
 801e78e:	089b      	lsrpl	r3, r3, #2
 801e790:	2001      	movmi	r0, #1
 801e792:	6013      	strmi	r3, [r2, #0]
 801e794:	bf5c      	itt	pl
 801e796:	6013      	strpl	r3, [r2, #0]
 801e798:	2002      	movpl	r0, #2
 801e79a:	4770      	bx	lr
 801e79c:	b299      	uxth	r1, r3
 801e79e:	b909      	cbnz	r1, 801e7a4 <__lo0bits+0x2a>
 801e7a0:	0c1b      	lsrs	r3, r3, #16
 801e7a2:	2010      	movs	r0, #16
 801e7a4:	b2d9      	uxtb	r1, r3
 801e7a6:	b909      	cbnz	r1, 801e7ac <__lo0bits+0x32>
 801e7a8:	3008      	adds	r0, #8
 801e7aa:	0a1b      	lsrs	r3, r3, #8
 801e7ac:	0719      	lsls	r1, r3, #28
 801e7ae:	bf04      	itt	eq
 801e7b0:	091b      	lsreq	r3, r3, #4
 801e7b2:	3004      	addeq	r0, #4
 801e7b4:	0799      	lsls	r1, r3, #30
 801e7b6:	bf04      	itt	eq
 801e7b8:	089b      	lsreq	r3, r3, #2
 801e7ba:	3002      	addeq	r0, #2
 801e7bc:	07d9      	lsls	r1, r3, #31
 801e7be:	d403      	bmi.n	801e7c8 <__lo0bits+0x4e>
 801e7c0:	085b      	lsrs	r3, r3, #1
 801e7c2:	f100 0001 	add.w	r0, r0, #1
 801e7c6:	d003      	beq.n	801e7d0 <__lo0bits+0x56>
 801e7c8:	6013      	str	r3, [r2, #0]
 801e7ca:	4770      	bx	lr
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	4770      	bx	lr
 801e7d0:	2020      	movs	r0, #32
 801e7d2:	4770      	bx	lr

0801e7d4 <__i2b>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	460c      	mov	r4, r1
 801e7d8:	2101      	movs	r1, #1
 801e7da:	f7ff ff07 	bl	801e5ec <_Balloc>
 801e7de:	4602      	mov	r2, r0
 801e7e0:	b928      	cbnz	r0, 801e7ee <__i2b+0x1a>
 801e7e2:	4b05      	ldr	r3, [pc, #20]	@ (801e7f8 <__i2b+0x24>)
 801e7e4:	4805      	ldr	r0, [pc, #20]	@ (801e7fc <__i2b+0x28>)
 801e7e6:	f240 1145 	movw	r1, #325	@ 0x145
 801e7ea:	f7ff f801 	bl	801d7f0 <__assert_func>
 801e7ee:	2301      	movs	r3, #1
 801e7f0:	6144      	str	r4, [r0, #20]
 801e7f2:	6103      	str	r3, [r0, #16]
 801e7f4:	bd10      	pop	{r4, pc}
 801e7f6:	bf00      	nop
 801e7f8:	0802281b 	.word	0x0802281b
 801e7fc:	0802282c 	.word	0x0802282c

0801e800 <__multiply>:
 801e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e804:	4614      	mov	r4, r2
 801e806:	690a      	ldr	r2, [r1, #16]
 801e808:	6923      	ldr	r3, [r4, #16]
 801e80a:	429a      	cmp	r2, r3
 801e80c:	bfa8      	it	ge
 801e80e:	4623      	movge	r3, r4
 801e810:	460f      	mov	r7, r1
 801e812:	bfa4      	itt	ge
 801e814:	460c      	movge	r4, r1
 801e816:	461f      	movge	r7, r3
 801e818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e81c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e820:	68a3      	ldr	r3, [r4, #8]
 801e822:	6861      	ldr	r1, [r4, #4]
 801e824:	eb0a 0609 	add.w	r6, sl, r9
 801e828:	42b3      	cmp	r3, r6
 801e82a:	b085      	sub	sp, #20
 801e82c:	bfb8      	it	lt
 801e82e:	3101      	addlt	r1, #1
 801e830:	f7ff fedc 	bl	801e5ec <_Balloc>
 801e834:	b930      	cbnz	r0, 801e844 <__multiply+0x44>
 801e836:	4602      	mov	r2, r0
 801e838:	4b44      	ldr	r3, [pc, #272]	@ (801e94c <__multiply+0x14c>)
 801e83a:	4845      	ldr	r0, [pc, #276]	@ (801e950 <__multiply+0x150>)
 801e83c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e840:	f7fe ffd6 	bl	801d7f0 <__assert_func>
 801e844:	f100 0514 	add.w	r5, r0, #20
 801e848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e84c:	462b      	mov	r3, r5
 801e84e:	2200      	movs	r2, #0
 801e850:	4543      	cmp	r3, r8
 801e852:	d321      	bcc.n	801e898 <__multiply+0x98>
 801e854:	f107 0114 	add.w	r1, r7, #20
 801e858:	f104 0214 	add.w	r2, r4, #20
 801e85c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e864:	9302      	str	r3, [sp, #8]
 801e866:	1b13      	subs	r3, r2, r4
 801e868:	3b15      	subs	r3, #21
 801e86a:	f023 0303 	bic.w	r3, r3, #3
 801e86e:	3304      	adds	r3, #4
 801e870:	f104 0715 	add.w	r7, r4, #21
 801e874:	42ba      	cmp	r2, r7
 801e876:	bf38      	it	cc
 801e878:	2304      	movcc	r3, #4
 801e87a:	9301      	str	r3, [sp, #4]
 801e87c:	9b02      	ldr	r3, [sp, #8]
 801e87e:	9103      	str	r1, [sp, #12]
 801e880:	428b      	cmp	r3, r1
 801e882:	d80c      	bhi.n	801e89e <__multiply+0x9e>
 801e884:	2e00      	cmp	r6, #0
 801e886:	dd03      	ble.n	801e890 <__multiply+0x90>
 801e888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d05b      	beq.n	801e948 <__multiply+0x148>
 801e890:	6106      	str	r6, [r0, #16]
 801e892:	b005      	add	sp, #20
 801e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e898:	f843 2b04 	str.w	r2, [r3], #4
 801e89c:	e7d8      	b.n	801e850 <__multiply+0x50>
 801e89e:	f8b1 a000 	ldrh.w	sl, [r1]
 801e8a2:	f1ba 0f00 	cmp.w	sl, #0
 801e8a6:	d024      	beq.n	801e8f2 <__multiply+0xf2>
 801e8a8:	f104 0e14 	add.w	lr, r4, #20
 801e8ac:	46a9      	mov	r9, r5
 801e8ae:	f04f 0c00 	mov.w	ip, #0
 801e8b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e8b6:	f8d9 3000 	ldr.w	r3, [r9]
 801e8ba:	fa1f fb87 	uxth.w	fp, r7
 801e8be:	b29b      	uxth	r3, r3
 801e8c0:	fb0a 330b 	mla	r3, sl, fp, r3
 801e8c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e8c8:	f8d9 7000 	ldr.w	r7, [r9]
 801e8cc:	4463      	add	r3, ip
 801e8ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e8d2:	fb0a c70b 	mla	r7, sl, fp, ip
 801e8d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e8da:	b29b      	uxth	r3, r3
 801e8dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e8e0:	4572      	cmp	r2, lr
 801e8e2:	f849 3b04 	str.w	r3, [r9], #4
 801e8e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e8ea:	d8e2      	bhi.n	801e8b2 <__multiply+0xb2>
 801e8ec:	9b01      	ldr	r3, [sp, #4]
 801e8ee:	f845 c003 	str.w	ip, [r5, r3]
 801e8f2:	9b03      	ldr	r3, [sp, #12]
 801e8f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e8f8:	3104      	adds	r1, #4
 801e8fa:	f1b9 0f00 	cmp.w	r9, #0
 801e8fe:	d021      	beq.n	801e944 <__multiply+0x144>
 801e900:	682b      	ldr	r3, [r5, #0]
 801e902:	f104 0c14 	add.w	ip, r4, #20
 801e906:	46ae      	mov	lr, r5
 801e908:	f04f 0a00 	mov.w	sl, #0
 801e90c:	f8bc b000 	ldrh.w	fp, [ip]
 801e910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e914:	fb09 770b 	mla	r7, r9, fp, r7
 801e918:	4457      	add	r7, sl
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e920:	f84e 3b04 	str.w	r3, [lr], #4
 801e924:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e92c:	f8be 3000 	ldrh.w	r3, [lr]
 801e930:	fb09 330a 	mla	r3, r9, sl, r3
 801e934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e938:	4562      	cmp	r2, ip
 801e93a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e93e:	d8e5      	bhi.n	801e90c <__multiply+0x10c>
 801e940:	9f01      	ldr	r7, [sp, #4]
 801e942:	51eb      	str	r3, [r5, r7]
 801e944:	3504      	adds	r5, #4
 801e946:	e799      	b.n	801e87c <__multiply+0x7c>
 801e948:	3e01      	subs	r6, #1
 801e94a:	e79b      	b.n	801e884 <__multiply+0x84>
 801e94c:	0802281b 	.word	0x0802281b
 801e950:	0802282c 	.word	0x0802282c

0801e954 <__pow5mult>:
 801e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e958:	4615      	mov	r5, r2
 801e95a:	f012 0203 	ands.w	r2, r2, #3
 801e95e:	4607      	mov	r7, r0
 801e960:	460e      	mov	r6, r1
 801e962:	d007      	beq.n	801e974 <__pow5mult+0x20>
 801e964:	4c25      	ldr	r4, [pc, #148]	@ (801e9fc <__pow5mult+0xa8>)
 801e966:	3a01      	subs	r2, #1
 801e968:	2300      	movs	r3, #0
 801e96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e96e:	f7ff fe9f 	bl	801e6b0 <__multadd>
 801e972:	4606      	mov	r6, r0
 801e974:	10ad      	asrs	r5, r5, #2
 801e976:	d03d      	beq.n	801e9f4 <__pow5mult+0xa0>
 801e978:	69fc      	ldr	r4, [r7, #28]
 801e97a:	b97c      	cbnz	r4, 801e99c <__pow5mult+0x48>
 801e97c:	2010      	movs	r0, #16
 801e97e:	f7ff fd7f 	bl	801e480 <malloc>
 801e982:	4602      	mov	r2, r0
 801e984:	61f8      	str	r0, [r7, #28]
 801e986:	b928      	cbnz	r0, 801e994 <__pow5mult+0x40>
 801e988:	4b1d      	ldr	r3, [pc, #116]	@ (801ea00 <__pow5mult+0xac>)
 801e98a:	481e      	ldr	r0, [pc, #120]	@ (801ea04 <__pow5mult+0xb0>)
 801e98c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e990:	f7fe ff2e 	bl	801d7f0 <__assert_func>
 801e994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e998:	6004      	str	r4, [r0, #0]
 801e99a:	60c4      	str	r4, [r0, #12]
 801e99c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e9a4:	b94c      	cbnz	r4, 801e9ba <__pow5mult+0x66>
 801e9a6:	f240 2171 	movw	r1, #625	@ 0x271
 801e9aa:	4638      	mov	r0, r7
 801e9ac:	f7ff ff12 	bl	801e7d4 <__i2b>
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	f8c8 0008 	str.w	r0, [r8, #8]
 801e9b6:	4604      	mov	r4, r0
 801e9b8:	6003      	str	r3, [r0, #0]
 801e9ba:	f04f 0900 	mov.w	r9, #0
 801e9be:	07eb      	lsls	r3, r5, #31
 801e9c0:	d50a      	bpl.n	801e9d8 <__pow5mult+0x84>
 801e9c2:	4631      	mov	r1, r6
 801e9c4:	4622      	mov	r2, r4
 801e9c6:	4638      	mov	r0, r7
 801e9c8:	f7ff ff1a 	bl	801e800 <__multiply>
 801e9cc:	4631      	mov	r1, r6
 801e9ce:	4680      	mov	r8, r0
 801e9d0:	4638      	mov	r0, r7
 801e9d2:	f7ff fe4b 	bl	801e66c <_Bfree>
 801e9d6:	4646      	mov	r6, r8
 801e9d8:	106d      	asrs	r5, r5, #1
 801e9da:	d00b      	beq.n	801e9f4 <__pow5mult+0xa0>
 801e9dc:	6820      	ldr	r0, [r4, #0]
 801e9de:	b938      	cbnz	r0, 801e9f0 <__pow5mult+0x9c>
 801e9e0:	4622      	mov	r2, r4
 801e9e2:	4621      	mov	r1, r4
 801e9e4:	4638      	mov	r0, r7
 801e9e6:	f7ff ff0b 	bl	801e800 <__multiply>
 801e9ea:	6020      	str	r0, [r4, #0]
 801e9ec:	f8c0 9000 	str.w	r9, [r0]
 801e9f0:	4604      	mov	r4, r0
 801e9f2:	e7e4      	b.n	801e9be <__pow5mult+0x6a>
 801e9f4:	4630      	mov	r0, r6
 801e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9fa:	bf00      	nop
 801e9fc:	08022888 	.word	0x08022888
 801ea00:	080225d6 	.word	0x080225d6
 801ea04:	0802282c 	.word	0x0802282c

0801ea08 <__lshift>:
 801ea08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea0c:	460c      	mov	r4, r1
 801ea0e:	6849      	ldr	r1, [r1, #4]
 801ea10:	6923      	ldr	r3, [r4, #16]
 801ea12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea16:	68a3      	ldr	r3, [r4, #8]
 801ea18:	4607      	mov	r7, r0
 801ea1a:	4691      	mov	r9, r2
 801ea1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea20:	f108 0601 	add.w	r6, r8, #1
 801ea24:	42b3      	cmp	r3, r6
 801ea26:	db0b      	blt.n	801ea40 <__lshift+0x38>
 801ea28:	4638      	mov	r0, r7
 801ea2a:	f7ff fddf 	bl	801e5ec <_Balloc>
 801ea2e:	4605      	mov	r5, r0
 801ea30:	b948      	cbnz	r0, 801ea46 <__lshift+0x3e>
 801ea32:	4602      	mov	r2, r0
 801ea34:	4b28      	ldr	r3, [pc, #160]	@ (801ead8 <__lshift+0xd0>)
 801ea36:	4829      	ldr	r0, [pc, #164]	@ (801eadc <__lshift+0xd4>)
 801ea38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ea3c:	f7fe fed8 	bl	801d7f0 <__assert_func>
 801ea40:	3101      	adds	r1, #1
 801ea42:	005b      	lsls	r3, r3, #1
 801ea44:	e7ee      	b.n	801ea24 <__lshift+0x1c>
 801ea46:	2300      	movs	r3, #0
 801ea48:	f100 0114 	add.w	r1, r0, #20
 801ea4c:	f100 0210 	add.w	r2, r0, #16
 801ea50:	4618      	mov	r0, r3
 801ea52:	4553      	cmp	r3, sl
 801ea54:	db33      	blt.n	801eabe <__lshift+0xb6>
 801ea56:	6920      	ldr	r0, [r4, #16]
 801ea58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ea5c:	f104 0314 	add.w	r3, r4, #20
 801ea60:	f019 091f 	ands.w	r9, r9, #31
 801ea64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ea68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ea6c:	d02b      	beq.n	801eac6 <__lshift+0xbe>
 801ea6e:	f1c9 0e20 	rsb	lr, r9, #32
 801ea72:	468a      	mov	sl, r1
 801ea74:	2200      	movs	r2, #0
 801ea76:	6818      	ldr	r0, [r3, #0]
 801ea78:	fa00 f009 	lsl.w	r0, r0, r9
 801ea7c:	4310      	orrs	r0, r2
 801ea7e:	f84a 0b04 	str.w	r0, [sl], #4
 801ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea86:	459c      	cmp	ip, r3
 801ea88:	fa22 f20e 	lsr.w	r2, r2, lr
 801ea8c:	d8f3      	bhi.n	801ea76 <__lshift+0x6e>
 801ea8e:	ebac 0304 	sub.w	r3, ip, r4
 801ea92:	3b15      	subs	r3, #21
 801ea94:	f023 0303 	bic.w	r3, r3, #3
 801ea98:	3304      	adds	r3, #4
 801ea9a:	f104 0015 	add.w	r0, r4, #21
 801ea9e:	4584      	cmp	ip, r0
 801eaa0:	bf38      	it	cc
 801eaa2:	2304      	movcc	r3, #4
 801eaa4:	50ca      	str	r2, [r1, r3]
 801eaa6:	b10a      	cbz	r2, 801eaac <__lshift+0xa4>
 801eaa8:	f108 0602 	add.w	r6, r8, #2
 801eaac:	3e01      	subs	r6, #1
 801eaae:	4638      	mov	r0, r7
 801eab0:	612e      	str	r6, [r5, #16]
 801eab2:	4621      	mov	r1, r4
 801eab4:	f7ff fdda 	bl	801e66c <_Bfree>
 801eab8:	4628      	mov	r0, r5
 801eaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eabe:	f842 0f04 	str.w	r0, [r2, #4]!
 801eac2:	3301      	adds	r3, #1
 801eac4:	e7c5      	b.n	801ea52 <__lshift+0x4a>
 801eac6:	3904      	subs	r1, #4
 801eac8:	f853 2b04 	ldr.w	r2, [r3], #4
 801eacc:	f841 2f04 	str.w	r2, [r1, #4]!
 801ead0:	459c      	cmp	ip, r3
 801ead2:	d8f9      	bhi.n	801eac8 <__lshift+0xc0>
 801ead4:	e7ea      	b.n	801eaac <__lshift+0xa4>
 801ead6:	bf00      	nop
 801ead8:	0802281b 	.word	0x0802281b
 801eadc:	0802282c 	.word	0x0802282c

0801eae0 <__mcmp>:
 801eae0:	690a      	ldr	r2, [r1, #16]
 801eae2:	4603      	mov	r3, r0
 801eae4:	6900      	ldr	r0, [r0, #16]
 801eae6:	1a80      	subs	r0, r0, r2
 801eae8:	b530      	push	{r4, r5, lr}
 801eaea:	d10e      	bne.n	801eb0a <__mcmp+0x2a>
 801eaec:	3314      	adds	r3, #20
 801eaee:	3114      	adds	r1, #20
 801eaf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801eaf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801eaf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801eafc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801eb00:	4295      	cmp	r5, r2
 801eb02:	d003      	beq.n	801eb0c <__mcmp+0x2c>
 801eb04:	d205      	bcs.n	801eb12 <__mcmp+0x32>
 801eb06:	f04f 30ff 	mov.w	r0, #4294967295
 801eb0a:	bd30      	pop	{r4, r5, pc}
 801eb0c:	42a3      	cmp	r3, r4
 801eb0e:	d3f3      	bcc.n	801eaf8 <__mcmp+0x18>
 801eb10:	e7fb      	b.n	801eb0a <__mcmp+0x2a>
 801eb12:	2001      	movs	r0, #1
 801eb14:	e7f9      	b.n	801eb0a <__mcmp+0x2a>
	...

0801eb18 <__mdiff>:
 801eb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb1c:	4689      	mov	r9, r1
 801eb1e:	4606      	mov	r6, r0
 801eb20:	4611      	mov	r1, r2
 801eb22:	4648      	mov	r0, r9
 801eb24:	4614      	mov	r4, r2
 801eb26:	f7ff ffdb 	bl	801eae0 <__mcmp>
 801eb2a:	1e05      	subs	r5, r0, #0
 801eb2c:	d112      	bne.n	801eb54 <__mdiff+0x3c>
 801eb2e:	4629      	mov	r1, r5
 801eb30:	4630      	mov	r0, r6
 801eb32:	f7ff fd5b 	bl	801e5ec <_Balloc>
 801eb36:	4602      	mov	r2, r0
 801eb38:	b928      	cbnz	r0, 801eb46 <__mdiff+0x2e>
 801eb3a:	4b3f      	ldr	r3, [pc, #252]	@ (801ec38 <__mdiff+0x120>)
 801eb3c:	f240 2137 	movw	r1, #567	@ 0x237
 801eb40:	483e      	ldr	r0, [pc, #248]	@ (801ec3c <__mdiff+0x124>)
 801eb42:	f7fe fe55 	bl	801d7f0 <__assert_func>
 801eb46:	2301      	movs	r3, #1
 801eb48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb4c:	4610      	mov	r0, r2
 801eb4e:	b003      	add	sp, #12
 801eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb54:	bfbc      	itt	lt
 801eb56:	464b      	movlt	r3, r9
 801eb58:	46a1      	movlt	r9, r4
 801eb5a:	4630      	mov	r0, r6
 801eb5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801eb60:	bfba      	itte	lt
 801eb62:	461c      	movlt	r4, r3
 801eb64:	2501      	movlt	r5, #1
 801eb66:	2500      	movge	r5, #0
 801eb68:	f7ff fd40 	bl	801e5ec <_Balloc>
 801eb6c:	4602      	mov	r2, r0
 801eb6e:	b918      	cbnz	r0, 801eb78 <__mdiff+0x60>
 801eb70:	4b31      	ldr	r3, [pc, #196]	@ (801ec38 <__mdiff+0x120>)
 801eb72:	f240 2145 	movw	r1, #581	@ 0x245
 801eb76:	e7e3      	b.n	801eb40 <__mdiff+0x28>
 801eb78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801eb7c:	6926      	ldr	r6, [r4, #16]
 801eb7e:	60c5      	str	r5, [r0, #12]
 801eb80:	f109 0310 	add.w	r3, r9, #16
 801eb84:	f109 0514 	add.w	r5, r9, #20
 801eb88:	f104 0e14 	add.w	lr, r4, #20
 801eb8c:	f100 0b14 	add.w	fp, r0, #20
 801eb90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801eb94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801eb98:	9301      	str	r3, [sp, #4]
 801eb9a:	46d9      	mov	r9, fp
 801eb9c:	f04f 0c00 	mov.w	ip, #0
 801eba0:	9b01      	ldr	r3, [sp, #4]
 801eba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801eba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ebaa:	9301      	str	r3, [sp, #4]
 801ebac:	fa1f f38a 	uxth.w	r3, sl
 801ebb0:	4619      	mov	r1, r3
 801ebb2:	b283      	uxth	r3, r0
 801ebb4:	1acb      	subs	r3, r1, r3
 801ebb6:	0c00      	lsrs	r0, r0, #16
 801ebb8:	4463      	add	r3, ip
 801ebba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ebbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ebc2:	b29b      	uxth	r3, r3
 801ebc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ebc8:	4576      	cmp	r6, lr
 801ebca:	f849 3b04 	str.w	r3, [r9], #4
 801ebce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ebd2:	d8e5      	bhi.n	801eba0 <__mdiff+0x88>
 801ebd4:	1b33      	subs	r3, r6, r4
 801ebd6:	3b15      	subs	r3, #21
 801ebd8:	f023 0303 	bic.w	r3, r3, #3
 801ebdc:	3415      	adds	r4, #21
 801ebde:	3304      	adds	r3, #4
 801ebe0:	42a6      	cmp	r6, r4
 801ebe2:	bf38      	it	cc
 801ebe4:	2304      	movcc	r3, #4
 801ebe6:	441d      	add	r5, r3
 801ebe8:	445b      	add	r3, fp
 801ebea:	461e      	mov	r6, r3
 801ebec:	462c      	mov	r4, r5
 801ebee:	4544      	cmp	r4, r8
 801ebf0:	d30e      	bcc.n	801ec10 <__mdiff+0xf8>
 801ebf2:	f108 0103 	add.w	r1, r8, #3
 801ebf6:	1b49      	subs	r1, r1, r5
 801ebf8:	f021 0103 	bic.w	r1, r1, #3
 801ebfc:	3d03      	subs	r5, #3
 801ebfe:	45a8      	cmp	r8, r5
 801ec00:	bf38      	it	cc
 801ec02:	2100      	movcc	r1, #0
 801ec04:	440b      	add	r3, r1
 801ec06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ec0a:	b191      	cbz	r1, 801ec32 <__mdiff+0x11a>
 801ec0c:	6117      	str	r7, [r2, #16]
 801ec0e:	e79d      	b.n	801eb4c <__mdiff+0x34>
 801ec10:	f854 1b04 	ldr.w	r1, [r4], #4
 801ec14:	46e6      	mov	lr, ip
 801ec16:	0c08      	lsrs	r0, r1, #16
 801ec18:	fa1c fc81 	uxtah	ip, ip, r1
 801ec1c:	4471      	add	r1, lr
 801ec1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ec22:	b289      	uxth	r1, r1
 801ec24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ec28:	f846 1b04 	str.w	r1, [r6], #4
 801ec2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec30:	e7dd      	b.n	801ebee <__mdiff+0xd6>
 801ec32:	3f01      	subs	r7, #1
 801ec34:	e7e7      	b.n	801ec06 <__mdiff+0xee>
 801ec36:	bf00      	nop
 801ec38:	0802281b 	.word	0x0802281b
 801ec3c:	0802282c 	.word	0x0802282c

0801ec40 <__d2b>:
 801ec40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ec44:	460f      	mov	r7, r1
 801ec46:	2101      	movs	r1, #1
 801ec48:	ec59 8b10 	vmov	r8, r9, d0
 801ec4c:	4616      	mov	r6, r2
 801ec4e:	f7ff fccd 	bl	801e5ec <_Balloc>
 801ec52:	4604      	mov	r4, r0
 801ec54:	b930      	cbnz	r0, 801ec64 <__d2b+0x24>
 801ec56:	4602      	mov	r2, r0
 801ec58:	4b23      	ldr	r3, [pc, #140]	@ (801ece8 <__d2b+0xa8>)
 801ec5a:	4824      	ldr	r0, [pc, #144]	@ (801ecec <__d2b+0xac>)
 801ec5c:	f240 310f 	movw	r1, #783	@ 0x30f
 801ec60:	f7fe fdc6 	bl	801d7f0 <__assert_func>
 801ec64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ec68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ec6c:	b10d      	cbz	r5, 801ec72 <__d2b+0x32>
 801ec6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ec72:	9301      	str	r3, [sp, #4]
 801ec74:	f1b8 0300 	subs.w	r3, r8, #0
 801ec78:	d023      	beq.n	801ecc2 <__d2b+0x82>
 801ec7a:	4668      	mov	r0, sp
 801ec7c:	9300      	str	r3, [sp, #0]
 801ec7e:	f7ff fd7c 	bl	801e77a <__lo0bits>
 801ec82:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ec86:	b1d0      	cbz	r0, 801ecbe <__d2b+0x7e>
 801ec88:	f1c0 0320 	rsb	r3, r0, #32
 801ec8c:	fa02 f303 	lsl.w	r3, r2, r3
 801ec90:	430b      	orrs	r3, r1
 801ec92:	40c2      	lsrs	r2, r0
 801ec94:	6163      	str	r3, [r4, #20]
 801ec96:	9201      	str	r2, [sp, #4]
 801ec98:	9b01      	ldr	r3, [sp, #4]
 801ec9a:	61a3      	str	r3, [r4, #24]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	bf0c      	ite	eq
 801eca0:	2201      	moveq	r2, #1
 801eca2:	2202      	movne	r2, #2
 801eca4:	6122      	str	r2, [r4, #16]
 801eca6:	b1a5      	cbz	r5, 801ecd2 <__d2b+0x92>
 801eca8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ecac:	4405      	add	r5, r0
 801ecae:	603d      	str	r5, [r7, #0]
 801ecb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ecb4:	6030      	str	r0, [r6, #0]
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	b003      	add	sp, #12
 801ecba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ecbe:	6161      	str	r1, [r4, #20]
 801ecc0:	e7ea      	b.n	801ec98 <__d2b+0x58>
 801ecc2:	a801      	add	r0, sp, #4
 801ecc4:	f7ff fd59 	bl	801e77a <__lo0bits>
 801ecc8:	9b01      	ldr	r3, [sp, #4]
 801ecca:	6163      	str	r3, [r4, #20]
 801eccc:	3020      	adds	r0, #32
 801ecce:	2201      	movs	r2, #1
 801ecd0:	e7e8      	b.n	801eca4 <__d2b+0x64>
 801ecd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ecd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ecda:	6038      	str	r0, [r7, #0]
 801ecdc:	6918      	ldr	r0, [r3, #16]
 801ecde:	f7ff fd2d 	bl	801e73c <__hi0bits>
 801ece2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ece6:	e7e5      	b.n	801ecb4 <__d2b+0x74>
 801ece8:	0802281b 	.word	0x0802281b
 801ecec:	0802282c 	.word	0x0802282c

0801ecf0 <__sfputc_r>:
 801ecf0:	6893      	ldr	r3, [r2, #8]
 801ecf2:	3b01      	subs	r3, #1
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	b410      	push	{r4}
 801ecf8:	6093      	str	r3, [r2, #8]
 801ecfa:	da08      	bge.n	801ed0e <__sfputc_r+0x1e>
 801ecfc:	6994      	ldr	r4, [r2, #24]
 801ecfe:	42a3      	cmp	r3, r4
 801ed00:	db01      	blt.n	801ed06 <__sfputc_r+0x16>
 801ed02:	290a      	cmp	r1, #10
 801ed04:	d103      	bne.n	801ed0e <__sfputc_r+0x1e>
 801ed06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed0a:	f7fe bbee 	b.w	801d4ea <__swbuf_r>
 801ed0e:	6813      	ldr	r3, [r2, #0]
 801ed10:	1c58      	adds	r0, r3, #1
 801ed12:	6010      	str	r0, [r2, #0]
 801ed14:	7019      	strb	r1, [r3, #0]
 801ed16:	4608      	mov	r0, r1
 801ed18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed1c:	4770      	bx	lr

0801ed1e <__sfputs_r>:
 801ed1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed20:	4606      	mov	r6, r0
 801ed22:	460f      	mov	r7, r1
 801ed24:	4614      	mov	r4, r2
 801ed26:	18d5      	adds	r5, r2, r3
 801ed28:	42ac      	cmp	r4, r5
 801ed2a:	d101      	bne.n	801ed30 <__sfputs_r+0x12>
 801ed2c:	2000      	movs	r0, #0
 801ed2e:	e007      	b.n	801ed40 <__sfputs_r+0x22>
 801ed30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed34:	463a      	mov	r2, r7
 801ed36:	4630      	mov	r0, r6
 801ed38:	f7ff ffda 	bl	801ecf0 <__sfputc_r>
 801ed3c:	1c43      	adds	r3, r0, #1
 801ed3e:	d1f3      	bne.n	801ed28 <__sfputs_r+0xa>
 801ed40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ed44 <_vfiprintf_r>:
 801ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed48:	460d      	mov	r5, r1
 801ed4a:	b09d      	sub	sp, #116	@ 0x74
 801ed4c:	4614      	mov	r4, r2
 801ed4e:	4698      	mov	r8, r3
 801ed50:	4606      	mov	r6, r0
 801ed52:	b118      	cbz	r0, 801ed5c <_vfiprintf_r+0x18>
 801ed54:	6a03      	ldr	r3, [r0, #32]
 801ed56:	b90b      	cbnz	r3, 801ed5c <_vfiprintf_r+0x18>
 801ed58:	f7fe fade 	bl	801d318 <__sinit>
 801ed5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ed5e:	07d9      	lsls	r1, r3, #31
 801ed60:	d405      	bmi.n	801ed6e <_vfiprintf_r+0x2a>
 801ed62:	89ab      	ldrh	r3, [r5, #12]
 801ed64:	059a      	lsls	r2, r3, #22
 801ed66:	d402      	bmi.n	801ed6e <_vfiprintf_r+0x2a>
 801ed68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ed6a:	f7fe fd30 	bl	801d7ce <__retarget_lock_acquire_recursive>
 801ed6e:	89ab      	ldrh	r3, [r5, #12]
 801ed70:	071b      	lsls	r3, r3, #28
 801ed72:	d501      	bpl.n	801ed78 <_vfiprintf_r+0x34>
 801ed74:	692b      	ldr	r3, [r5, #16]
 801ed76:	b99b      	cbnz	r3, 801eda0 <_vfiprintf_r+0x5c>
 801ed78:	4629      	mov	r1, r5
 801ed7a:	4630      	mov	r0, r6
 801ed7c:	f7fe fbf4 	bl	801d568 <__swsetup_r>
 801ed80:	b170      	cbz	r0, 801eda0 <_vfiprintf_r+0x5c>
 801ed82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ed84:	07dc      	lsls	r4, r3, #31
 801ed86:	d504      	bpl.n	801ed92 <_vfiprintf_r+0x4e>
 801ed88:	f04f 30ff 	mov.w	r0, #4294967295
 801ed8c:	b01d      	add	sp, #116	@ 0x74
 801ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed92:	89ab      	ldrh	r3, [r5, #12]
 801ed94:	0598      	lsls	r0, r3, #22
 801ed96:	d4f7      	bmi.n	801ed88 <_vfiprintf_r+0x44>
 801ed98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ed9a:	f7fe fd19 	bl	801d7d0 <__retarget_lock_release_recursive>
 801ed9e:	e7f3      	b.n	801ed88 <_vfiprintf_r+0x44>
 801eda0:	2300      	movs	r3, #0
 801eda2:	9309      	str	r3, [sp, #36]	@ 0x24
 801eda4:	2320      	movs	r3, #32
 801eda6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801edaa:	f8cd 800c 	str.w	r8, [sp, #12]
 801edae:	2330      	movs	r3, #48	@ 0x30
 801edb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ef60 <_vfiprintf_r+0x21c>
 801edb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801edb8:	f04f 0901 	mov.w	r9, #1
 801edbc:	4623      	mov	r3, r4
 801edbe:	469a      	mov	sl, r3
 801edc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edc4:	b10a      	cbz	r2, 801edca <_vfiprintf_r+0x86>
 801edc6:	2a25      	cmp	r2, #37	@ 0x25
 801edc8:	d1f9      	bne.n	801edbe <_vfiprintf_r+0x7a>
 801edca:	ebba 0b04 	subs.w	fp, sl, r4
 801edce:	d00b      	beq.n	801ede8 <_vfiprintf_r+0xa4>
 801edd0:	465b      	mov	r3, fp
 801edd2:	4622      	mov	r2, r4
 801edd4:	4629      	mov	r1, r5
 801edd6:	4630      	mov	r0, r6
 801edd8:	f7ff ffa1 	bl	801ed1e <__sfputs_r>
 801eddc:	3001      	adds	r0, #1
 801edde:	f000 80a7 	beq.w	801ef30 <_vfiprintf_r+0x1ec>
 801ede2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ede4:	445a      	add	r2, fp
 801ede6:	9209      	str	r2, [sp, #36]	@ 0x24
 801ede8:	f89a 3000 	ldrb.w	r3, [sl]
 801edec:	2b00      	cmp	r3, #0
 801edee:	f000 809f 	beq.w	801ef30 <_vfiprintf_r+0x1ec>
 801edf2:	2300      	movs	r3, #0
 801edf4:	f04f 32ff 	mov.w	r2, #4294967295
 801edf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801edfc:	f10a 0a01 	add.w	sl, sl, #1
 801ee00:	9304      	str	r3, [sp, #16]
 801ee02:	9307      	str	r3, [sp, #28]
 801ee04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ee08:	931a      	str	r3, [sp, #104]	@ 0x68
 801ee0a:	4654      	mov	r4, sl
 801ee0c:	2205      	movs	r2, #5
 801ee0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee12:	4853      	ldr	r0, [pc, #332]	@ (801ef60 <_vfiprintf_r+0x21c>)
 801ee14:	f7e1 fa7c 	bl	8000310 <memchr>
 801ee18:	9a04      	ldr	r2, [sp, #16]
 801ee1a:	b9d8      	cbnz	r0, 801ee54 <_vfiprintf_r+0x110>
 801ee1c:	06d1      	lsls	r1, r2, #27
 801ee1e:	bf44      	itt	mi
 801ee20:	2320      	movmi	r3, #32
 801ee22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee26:	0713      	lsls	r3, r2, #28
 801ee28:	bf44      	itt	mi
 801ee2a:	232b      	movmi	r3, #43	@ 0x2b
 801ee2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee30:	f89a 3000 	ldrb.w	r3, [sl]
 801ee34:	2b2a      	cmp	r3, #42	@ 0x2a
 801ee36:	d015      	beq.n	801ee64 <_vfiprintf_r+0x120>
 801ee38:	9a07      	ldr	r2, [sp, #28]
 801ee3a:	4654      	mov	r4, sl
 801ee3c:	2000      	movs	r0, #0
 801ee3e:	f04f 0c0a 	mov.w	ip, #10
 801ee42:	4621      	mov	r1, r4
 801ee44:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee48:	3b30      	subs	r3, #48	@ 0x30
 801ee4a:	2b09      	cmp	r3, #9
 801ee4c:	d94b      	bls.n	801eee6 <_vfiprintf_r+0x1a2>
 801ee4e:	b1b0      	cbz	r0, 801ee7e <_vfiprintf_r+0x13a>
 801ee50:	9207      	str	r2, [sp, #28]
 801ee52:	e014      	b.n	801ee7e <_vfiprintf_r+0x13a>
 801ee54:	eba0 0308 	sub.w	r3, r0, r8
 801ee58:	fa09 f303 	lsl.w	r3, r9, r3
 801ee5c:	4313      	orrs	r3, r2
 801ee5e:	9304      	str	r3, [sp, #16]
 801ee60:	46a2      	mov	sl, r4
 801ee62:	e7d2      	b.n	801ee0a <_vfiprintf_r+0xc6>
 801ee64:	9b03      	ldr	r3, [sp, #12]
 801ee66:	1d19      	adds	r1, r3, #4
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	9103      	str	r1, [sp, #12]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	bfbb      	ittet	lt
 801ee70:	425b      	neglt	r3, r3
 801ee72:	f042 0202 	orrlt.w	r2, r2, #2
 801ee76:	9307      	strge	r3, [sp, #28]
 801ee78:	9307      	strlt	r3, [sp, #28]
 801ee7a:	bfb8      	it	lt
 801ee7c:	9204      	strlt	r2, [sp, #16]
 801ee7e:	7823      	ldrb	r3, [r4, #0]
 801ee80:	2b2e      	cmp	r3, #46	@ 0x2e
 801ee82:	d10a      	bne.n	801ee9a <_vfiprintf_r+0x156>
 801ee84:	7863      	ldrb	r3, [r4, #1]
 801ee86:	2b2a      	cmp	r3, #42	@ 0x2a
 801ee88:	d132      	bne.n	801eef0 <_vfiprintf_r+0x1ac>
 801ee8a:	9b03      	ldr	r3, [sp, #12]
 801ee8c:	1d1a      	adds	r2, r3, #4
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	9203      	str	r2, [sp, #12]
 801ee92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ee96:	3402      	adds	r4, #2
 801ee98:	9305      	str	r3, [sp, #20]
 801ee9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ef70 <_vfiprintf_r+0x22c>
 801ee9e:	7821      	ldrb	r1, [r4, #0]
 801eea0:	2203      	movs	r2, #3
 801eea2:	4650      	mov	r0, sl
 801eea4:	f7e1 fa34 	bl	8000310 <memchr>
 801eea8:	b138      	cbz	r0, 801eeba <_vfiprintf_r+0x176>
 801eeaa:	9b04      	ldr	r3, [sp, #16]
 801eeac:	eba0 000a 	sub.w	r0, r0, sl
 801eeb0:	2240      	movs	r2, #64	@ 0x40
 801eeb2:	4082      	lsls	r2, r0
 801eeb4:	4313      	orrs	r3, r2
 801eeb6:	3401      	adds	r4, #1
 801eeb8:	9304      	str	r3, [sp, #16]
 801eeba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eebe:	4829      	ldr	r0, [pc, #164]	@ (801ef64 <_vfiprintf_r+0x220>)
 801eec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eec4:	2206      	movs	r2, #6
 801eec6:	f7e1 fa23 	bl	8000310 <memchr>
 801eeca:	2800      	cmp	r0, #0
 801eecc:	d03f      	beq.n	801ef4e <_vfiprintf_r+0x20a>
 801eece:	4b26      	ldr	r3, [pc, #152]	@ (801ef68 <_vfiprintf_r+0x224>)
 801eed0:	bb1b      	cbnz	r3, 801ef1a <_vfiprintf_r+0x1d6>
 801eed2:	9b03      	ldr	r3, [sp, #12]
 801eed4:	3307      	adds	r3, #7
 801eed6:	f023 0307 	bic.w	r3, r3, #7
 801eeda:	3308      	adds	r3, #8
 801eedc:	9303      	str	r3, [sp, #12]
 801eede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eee0:	443b      	add	r3, r7
 801eee2:	9309      	str	r3, [sp, #36]	@ 0x24
 801eee4:	e76a      	b.n	801edbc <_vfiprintf_r+0x78>
 801eee6:	fb0c 3202 	mla	r2, ip, r2, r3
 801eeea:	460c      	mov	r4, r1
 801eeec:	2001      	movs	r0, #1
 801eeee:	e7a8      	b.n	801ee42 <_vfiprintf_r+0xfe>
 801eef0:	2300      	movs	r3, #0
 801eef2:	3401      	adds	r4, #1
 801eef4:	9305      	str	r3, [sp, #20]
 801eef6:	4619      	mov	r1, r3
 801eef8:	f04f 0c0a 	mov.w	ip, #10
 801eefc:	4620      	mov	r0, r4
 801eefe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef02:	3a30      	subs	r2, #48	@ 0x30
 801ef04:	2a09      	cmp	r2, #9
 801ef06:	d903      	bls.n	801ef10 <_vfiprintf_r+0x1cc>
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d0c6      	beq.n	801ee9a <_vfiprintf_r+0x156>
 801ef0c:	9105      	str	r1, [sp, #20]
 801ef0e:	e7c4      	b.n	801ee9a <_vfiprintf_r+0x156>
 801ef10:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef14:	4604      	mov	r4, r0
 801ef16:	2301      	movs	r3, #1
 801ef18:	e7f0      	b.n	801eefc <_vfiprintf_r+0x1b8>
 801ef1a:	ab03      	add	r3, sp, #12
 801ef1c:	9300      	str	r3, [sp, #0]
 801ef1e:	462a      	mov	r2, r5
 801ef20:	4b12      	ldr	r3, [pc, #72]	@ (801ef6c <_vfiprintf_r+0x228>)
 801ef22:	a904      	add	r1, sp, #16
 801ef24:	4630      	mov	r0, r6
 801ef26:	f7fd fdc3 	bl	801cab0 <_printf_float>
 801ef2a:	4607      	mov	r7, r0
 801ef2c:	1c78      	adds	r0, r7, #1
 801ef2e:	d1d6      	bne.n	801eede <_vfiprintf_r+0x19a>
 801ef30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ef32:	07d9      	lsls	r1, r3, #31
 801ef34:	d405      	bmi.n	801ef42 <_vfiprintf_r+0x1fe>
 801ef36:	89ab      	ldrh	r3, [r5, #12]
 801ef38:	059a      	lsls	r2, r3, #22
 801ef3a:	d402      	bmi.n	801ef42 <_vfiprintf_r+0x1fe>
 801ef3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ef3e:	f7fe fc47 	bl	801d7d0 <__retarget_lock_release_recursive>
 801ef42:	89ab      	ldrh	r3, [r5, #12]
 801ef44:	065b      	lsls	r3, r3, #25
 801ef46:	f53f af1f 	bmi.w	801ed88 <_vfiprintf_r+0x44>
 801ef4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef4c:	e71e      	b.n	801ed8c <_vfiprintf_r+0x48>
 801ef4e:	ab03      	add	r3, sp, #12
 801ef50:	9300      	str	r3, [sp, #0]
 801ef52:	462a      	mov	r2, r5
 801ef54:	4b05      	ldr	r3, [pc, #20]	@ (801ef6c <_vfiprintf_r+0x228>)
 801ef56:	a904      	add	r1, sp, #16
 801ef58:	4630      	mov	r0, r6
 801ef5a:	f7fe f831 	bl	801cfc0 <_printf_i>
 801ef5e:	e7e4      	b.n	801ef2a <_vfiprintf_r+0x1e6>
 801ef60:	08022988 	.word	0x08022988
 801ef64:	08022992 	.word	0x08022992
 801ef68:	0801cab1 	.word	0x0801cab1
 801ef6c:	0801ed1f 	.word	0x0801ed1f
 801ef70:	0802298e 	.word	0x0802298e

0801ef74 <__sflush_r>:
 801ef74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef7c:	0716      	lsls	r6, r2, #28
 801ef7e:	4605      	mov	r5, r0
 801ef80:	460c      	mov	r4, r1
 801ef82:	d454      	bmi.n	801f02e <__sflush_r+0xba>
 801ef84:	684b      	ldr	r3, [r1, #4]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	dc02      	bgt.n	801ef90 <__sflush_r+0x1c>
 801ef8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	dd48      	ble.n	801f022 <__sflush_r+0xae>
 801ef90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ef92:	2e00      	cmp	r6, #0
 801ef94:	d045      	beq.n	801f022 <__sflush_r+0xae>
 801ef96:	2300      	movs	r3, #0
 801ef98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ef9c:	682f      	ldr	r7, [r5, #0]
 801ef9e:	6a21      	ldr	r1, [r4, #32]
 801efa0:	602b      	str	r3, [r5, #0]
 801efa2:	d030      	beq.n	801f006 <__sflush_r+0x92>
 801efa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801efa6:	89a3      	ldrh	r3, [r4, #12]
 801efa8:	0759      	lsls	r1, r3, #29
 801efaa:	d505      	bpl.n	801efb8 <__sflush_r+0x44>
 801efac:	6863      	ldr	r3, [r4, #4]
 801efae:	1ad2      	subs	r2, r2, r3
 801efb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801efb2:	b10b      	cbz	r3, 801efb8 <__sflush_r+0x44>
 801efb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801efb6:	1ad2      	subs	r2, r2, r3
 801efb8:	2300      	movs	r3, #0
 801efba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801efbc:	6a21      	ldr	r1, [r4, #32]
 801efbe:	4628      	mov	r0, r5
 801efc0:	47b0      	blx	r6
 801efc2:	1c43      	adds	r3, r0, #1
 801efc4:	89a3      	ldrh	r3, [r4, #12]
 801efc6:	d106      	bne.n	801efd6 <__sflush_r+0x62>
 801efc8:	6829      	ldr	r1, [r5, #0]
 801efca:	291d      	cmp	r1, #29
 801efcc:	d82b      	bhi.n	801f026 <__sflush_r+0xb2>
 801efce:	4a2a      	ldr	r2, [pc, #168]	@ (801f078 <__sflush_r+0x104>)
 801efd0:	410a      	asrs	r2, r1
 801efd2:	07d6      	lsls	r6, r2, #31
 801efd4:	d427      	bmi.n	801f026 <__sflush_r+0xb2>
 801efd6:	2200      	movs	r2, #0
 801efd8:	6062      	str	r2, [r4, #4]
 801efda:	04d9      	lsls	r1, r3, #19
 801efdc:	6922      	ldr	r2, [r4, #16]
 801efde:	6022      	str	r2, [r4, #0]
 801efe0:	d504      	bpl.n	801efec <__sflush_r+0x78>
 801efe2:	1c42      	adds	r2, r0, #1
 801efe4:	d101      	bne.n	801efea <__sflush_r+0x76>
 801efe6:	682b      	ldr	r3, [r5, #0]
 801efe8:	b903      	cbnz	r3, 801efec <__sflush_r+0x78>
 801efea:	6560      	str	r0, [r4, #84]	@ 0x54
 801efec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801efee:	602f      	str	r7, [r5, #0]
 801eff0:	b1b9      	cbz	r1, 801f022 <__sflush_r+0xae>
 801eff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eff6:	4299      	cmp	r1, r3
 801eff8:	d002      	beq.n	801f000 <__sflush_r+0x8c>
 801effa:	4628      	mov	r0, r5
 801effc:	f7ff f9f6 	bl	801e3ec <_free_r>
 801f000:	2300      	movs	r3, #0
 801f002:	6363      	str	r3, [r4, #52]	@ 0x34
 801f004:	e00d      	b.n	801f022 <__sflush_r+0xae>
 801f006:	2301      	movs	r3, #1
 801f008:	4628      	mov	r0, r5
 801f00a:	47b0      	blx	r6
 801f00c:	4602      	mov	r2, r0
 801f00e:	1c50      	adds	r0, r2, #1
 801f010:	d1c9      	bne.n	801efa6 <__sflush_r+0x32>
 801f012:	682b      	ldr	r3, [r5, #0]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d0c6      	beq.n	801efa6 <__sflush_r+0x32>
 801f018:	2b1d      	cmp	r3, #29
 801f01a:	d001      	beq.n	801f020 <__sflush_r+0xac>
 801f01c:	2b16      	cmp	r3, #22
 801f01e:	d11e      	bne.n	801f05e <__sflush_r+0xea>
 801f020:	602f      	str	r7, [r5, #0]
 801f022:	2000      	movs	r0, #0
 801f024:	e022      	b.n	801f06c <__sflush_r+0xf8>
 801f026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f02a:	b21b      	sxth	r3, r3
 801f02c:	e01b      	b.n	801f066 <__sflush_r+0xf2>
 801f02e:	690f      	ldr	r7, [r1, #16]
 801f030:	2f00      	cmp	r7, #0
 801f032:	d0f6      	beq.n	801f022 <__sflush_r+0xae>
 801f034:	0793      	lsls	r3, r2, #30
 801f036:	680e      	ldr	r6, [r1, #0]
 801f038:	bf08      	it	eq
 801f03a:	694b      	ldreq	r3, [r1, #20]
 801f03c:	600f      	str	r7, [r1, #0]
 801f03e:	bf18      	it	ne
 801f040:	2300      	movne	r3, #0
 801f042:	eba6 0807 	sub.w	r8, r6, r7
 801f046:	608b      	str	r3, [r1, #8]
 801f048:	f1b8 0f00 	cmp.w	r8, #0
 801f04c:	dde9      	ble.n	801f022 <__sflush_r+0xae>
 801f04e:	6a21      	ldr	r1, [r4, #32]
 801f050:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f052:	4643      	mov	r3, r8
 801f054:	463a      	mov	r2, r7
 801f056:	4628      	mov	r0, r5
 801f058:	47b0      	blx	r6
 801f05a:	2800      	cmp	r0, #0
 801f05c:	dc08      	bgt.n	801f070 <__sflush_r+0xfc>
 801f05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f066:	81a3      	strh	r3, [r4, #12]
 801f068:	f04f 30ff 	mov.w	r0, #4294967295
 801f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f070:	4407      	add	r7, r0
 801f072:	eba8 0800 	sub.w	r8, r8, r0
 801f076:	e7e7      	b.n	801f048 <__sflush_r+0xd4>
 801f078:	dfbffffe 	.word	0xdfbffffe

0801f07c <_fflush_r>:
 801f07c:	b538      	push	{r3, r4, r5, lr}
 801f07e:	690b      	ldr	r3, [r1, #16]
 801f080:	4605      	mov	r5, r0
 801f082:	460c      	mov	r4, r1
 801f084:	b913      	cbnz	r3, 801f08c <_fflush_r+0x10>
 801f086:	2500      	movs	r5, #0
 801f088:	4628      	mov	r0, r5
 801f08a:	bd38      	pop	{r3, r4, r5, pc}
 801f08c:	b118      	cbz	r0, 801f096 <_fflush_r+0x1a>
 801f08e:	6a03      	ldr	r3, [r0, #32]
 801f090:	b90b      	cbnz	r3, 801f096 <_fflush_r+0x1a>
 801f092:	f7fe f941 	bl	801d318 <__sinit>
 801f096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d0f3      	beq.n	801f086 <_fflush_r+0xa>
 801f09e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f0a0:	07d0      	lsls	r0, r2, #31
 801f0a2:	d404      	bmi.n	801f0ae <_fflush_r+0x32>
 801f0a4:	0599      	lsls	r1, r3, #22
 801f0a6:	d402      	bmi.n	801f0ae <_fflush_r+0x32>
 801f0a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0aa:	f7fe fb90 	bl	801d7ce <__retarget_lock_acquire_recursive>
 801f0ae:	4628      	mov	r0, r5
 801f0b0:	4621      	mov	r1, r4
 801f0b2:	f7ff ff5f 	bl	801ef74 <__sflush_r>
 801f0b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f0b8:	07da      	lsls	r2, r3, #31
 801f0ba:	4605      	mov	r5, r0
 801f0bc:	d4e4      	bmi.n	801f088 <_fflush_r+0xc>
 801f0be:	89a3      	ldrh	r3, [r4, #12]
 801f0c0:	059b      	lsls	r3, r3, #22
 801f0c2:	d4e1      	bmi.n	801f088 <_fflush_r+0xc>
 801f0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0c6:	f7fe fb83 	bl	801d7d0 <__retarget_lock_release_recursive>
 801f0ca:	e7dd      	b.n	801f088 <_fflush_r+0xc>

0801f0cc <fiprintf>:
 801f0cc:	b40e      	push	{r1, r2, r3}
 801f0ce:	b503      	push	{r0, r1, lr}
 801f0d0:	4601      	mov	r1, r0
 801f0d2:	ab03      	add	r3, sp, #12
 801f0d4:	4805      	ldr	r0, [pc, #20]	@ (801f0ec <fiprintf+0x20>)
 801f0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0da:	6800      	ldr	r0, [r0, #0]
 801f0dc:	9301      	str	r3, [sp, #4]
 801f0de:	f7ff fe31 	bl	801ed44 <_vfiprintf_r>
 801f0e2:	b002      	add	sp, #8
 801f0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0e8:	b003      	add	sp, #12
 801f0ea:	4770      	bx	lr
 801f0ec:	24000044 	.word	0x24000044

0801f0f0 <__swhatbuf_r>:
 801f0f0:	b570      	push	{r4, r5, r6, lr}
 801f0f2:	460c      	mov	r4, r1
 801f0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f0f8:	2900      	cmp	r1, #0
 801f0fa:	b096      	sub	sp, #88	@ 0x58
 801f0fc:	4615      	mov	r5, r2
 801f0fe:	461e      	mov	r6, r3
 801f100:	da0d      	bge.n	801f11e <__swhatbuf_r+0x2e>
 801f102:	89a3      	ldrh	r3, [r4, #12]
 801f104:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f108:	f04f 0100 	mov.w	r1, #0
 801f10c:	bf14      	ite	ne
 801f10e:	2340      	movne	r3, #64	@ 0x40
 801f110:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f114:	2000      	movs	r0, #0
 801f116:	6031      	str	r1, [r6, #0]
 801f118:	602b      	str	r3, [r5, #0]
 801f11a:	b016      	add	sp, #88	@ 0x58
 801f11c:	bd70      	pop	{r4, r5, r6, pc}
 801f11e:	466a      	mov	r2, sp
 801f120:	f000 f848 	bl	801f1b4 <_fstat_r>
 801f124:	2800      	cmp	r0, #0
 801f126:	dbec      	blt.n	801f102 <__swhatbuf_r+0x12>
 801f128:	9901      	ldr	r1, [sp, #4]
 801f12a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f12e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f132:	4259      	negs	r1, r3
 801f134:	4159      	adcs	r1, r3
 801f136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f13a:	e7eb      	b.n	801f114 <__swhatbuf_r+0x24>

0801f13c <__smakebuf_r>:
 801f13c:	898b      	ldrh	r3, [r1, #12]
 801f13e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f140:	079d      	lsls	r5, r3, #30
 801f142:	4606      	mov	r6, r0
 801f144:	460c      	mov	r4, r1
 801f146:	d507      	bpl.n	801f158 <__smakebuf_r+0x1c>
 801f148:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f14c:	6023      	str	r3, [r4, #0]
 801f14e:	6123      	str	r3, [r4, #16]
 801f150:	2301      	movs	r3, #1
 801f152:	6163      	str	r3, [r4, #20]
 801f154:	b003      	add	sp, #12
 801f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f158:	ab01      	add	r3, sp, #4
 801f15a:	466a      	mov	r2, sp
 801f15c:	f7ff ffc8 	bl	801f0f0 <__swhatbuf_r>
 801f160:	9f00      	ldr	r7, [sp, #0]
 801f162:	4605      	mov	r5, r0
 801f164:	4639      	mov	r1, r7
 801f166:	4630      	mov	r0, r6
 801f168:	f7ff f9b4 	bl	801e4d4 <_malloc_r>
 801f16c:	b948      	cbnz	r0, 801f182 <__smakebuf_r+0x46>
 801f16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f172:	059a      	lsls	r2, r3, #22
 801f174:	d4ee      	bmi.n	801f154 <__smakebuf_r+0x18>
 801f176:	f023 0303 	bic.w	r3, r3, #3
 801f17a:	f043 0302 	orr.w	r3, r3, #2
 801f17e:	81a3      	strh	r3, [r4, #12]
 801f180:	e7e2      	b.n	801f148 <__smakebuf_r+0xc>
 801f182:	89a3      	ldrh	r3, [r4, #12]
 801f184:	6020      	str	r0, [r4, #0]
 801f186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f18a:	81a3      	strh	r3, [r4, #12]
 801f18c:	9b01      	ldr	r3, [sp, #4]
 801f18e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f192:	b15b      	cbz	r3, 801f1ac <__smakebuf_r+0x70>
 801f194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f198:	4630      	mov	r0, r6
 801f19a:	f000 f81d 	bl	801f1d8 <_isatty_r>
 801f19e:	b128      	cbz	r0, 801f1ac <__smakebuf_r+0x70>
 801f1a0:	89a3      	ldrh	r3, [r4, #12]
 801f1a2:	f023 0303 	bic.w	r3, r3, #3
 801f1a6:	f043 0301 	orr.w	r3, r3, #1
 801f1aa:	81a3      	strh	r3, [r4, #12]
 801f1ac:	89a3      	ldrh	r3, [r4, #12]
 801f1ae:	431d      	orrs	r5, r3
 801f1b0:	81a5      	strh	r5, [r4, #12]
 801f1b2:	e7cf      	b.n	801f154 <__smakebuf_r+0x18>

0801f1b4 <_fstat_r>:
 801f1b4:	b538      	push	{r3, r4, r5, lr}
 801f1b6:	4d07      	ldr	r5, [pc, #28]	@ (801f1d4 <_fstat_r+0x20>)
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	4604      	mov	r4, r0
 801f1bc:	4608      	mov	r0, r1
 801f1be:	4611      	mov	r1, r2
 801f1c0:	602b      	str	r3, [r5, #0]
 801f1c2:	f7e2 fb31 	bl	8001828 <_fstat>
 801f1c6:	1c43      	adds	r3, r0, #1
 801f1c8:	d102      	bne.n	801f1d0 <_fstat_r+0x1c>
 801f1ca:	682b      	ldr	r3, [r5, #0]
 801f1cc:	b103      	cbz	r3, 801f1d0 <_fstat_r+0x1c>
 801f1ce:	6023      	str	r3, [r4, #0]
 801f1d0:	bd38      	pop	{r3, r4, r5, pc}
 801f1d2:	bf00      	nop
 801f1d4:	2400cf04 	.word	0x2400cf04

0801f1d8 <_isatty_r>:
 801f1d8:	b538      	push	{r3, r4, r5, lr}
 801f1da:	4d06      	ldr	r5, [pc, #24]	@ (801f1f4 <_isatty_r+0x1c>)
 801f1dc:	2300      	movs	r3, #0
 801f1de:	4604      	mov	r4, r0
 801f1e0:	4608      	mov	r0, r1
 801f1e2:	602b      	str	r3, [r5, #0]
 801f1e4:	f7e2 fb30 	bl	8001848 <_isatty>
 801f1e8:	1c43      	adds	r3, r0, #1
 801f1ea:	d102      	bne.n	801f1f2 <_isatty_r+0x1a>
 801f1ec:	682b      	ldr	r3, [r5, #0]
 801f1ee:	b103      	cbz	r3, 801f1f2 <_isatty_r+0x1a>
 801f1f0:	6023      	str	r3, [r4, #0]
 801f1f2:	bd38      	pop	{r3, r4, r5, pc}
 801f1f4:	2400cf04 	.word	0x2400cf04

0801f1f8 <_sbrk_r>:
 801f1f8:	b538      	push	{r3, r4, r5, lr}
 801f1fa:	4d06      	ldr	r5, [pc, #24]	@ (801f214 <_sbrk_r+0x1c>)
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	4604      	mov	r4, r0
 801f200:	4608      	mov	r0, r1
 801f202:	602b      	str	r3, [r5, #0]
 801f204:	f7e2 fb38 	bl	8001878 <_sbrk>
 801f208:	1c43      	adds	r3, r0, #1
 801f20a:	d102      	bne.n	801f212 <_sbrk_r+0x1a>
 801f20c:	682b      	ldr	r3, [r5, #0]
 801f20e:	b103      	cbz	r3, 801f212 <_sbrk_r+0x1a>
 801f210:	6023      	str	r3, [r4, #0]
 801f212:	bd38      	pop	{r3, r4, r5, pc}
 801f214:	2400cf04 	.word	0x2400cf04

0801f218 <abort>:
 801f218:	b508      	push	{r3, lr}
 801f21a:	2006      	movs	r0, #6
 801f21c:	f000 f85e 	bl	801f2dc <raise>
 801f220:	2001      	movs	r0, #1
 801f222:	f7e2 facd 	bl	80017c0 <_exit>

0801f226 <_calloc_r>:
 801f226:	b570      	push	{r4, r5, r6, lr}
 801f228:	fba1 5402 	umull	r5, r4, r1, r2
 801f22c:	b93c      	cbnz	r4, 801f23e <_calloc_r+0x18>
 801f22e:	4629      	mov	r1, r5
 801f230:	f7ff f950 	bl	801e4d4 <_malloc_r>
 801f234:	4606      	mov	r6, r0
 801f236:	b928      	cbnz	r0, 801f244 <_calloc_r+0x1e>
 801f238:	2600      	movs	r6, #0
 801f23a:	4630      	mov	r0, r6
 801f23c:	bd70      	pop	{r4, r5, r6, pc}
 801f23e:	220c      	movs	r2, #12
 801f240:	6002      	str	r2, [r0, #0]
 801f242:	e7f9      	b.n	801f238 <_calloc_r+0x12>
 801f244:	462a      	mov	r2, r5
 801f246:	4621      	mov	r1, r4
 801f248:	f7fe f9f4 	bl	801d634 <memset>
 801f24c:	e7f5      	b.n	801f23a <_calloc_r+0x14>

0801f24e <__ascii_mbtowc>:
 801f24e:	b082      	sub	sp, #8
 801f250:	b901      	cbnz	r1, 801f254 <__ascii_mbtowc+0x6>
 801f252:	a901      	add	r1, sp, #4
 801f254:	b142      	cbz	r2, 801f268 <__ascii_mbtowc+0x1a>
 801f256:	b14b      	cbz	r3, 801f26c <__ascii_mbtowc+0x1e>
 801f258:	7813      	ldrb	r3, [r2, #0]
 801f25a:	600b      	str	r3, [r1, #0]
 801f25c:	7812      	ldrb	r2, [r2, #0]
 801f25e:	1e10      	subs	r0, r2, #0
 801f260:	bf18      	it	ne
 801f262:	2001      	movne	r0, #1
 801f264:	b002      	add	sp, #8
 801f266:	4770      	bx	lr
 801f268:	4610      	mov	r0, r2
 801f26a:	e7fb      	b.n	801f264 <__ascii_mbtowc+0x16>
 801f26c:	f06f 0001 	mvn.w	r0, #1
 801f270:	e7f8      	b.n	801f264 <__ascii_mbtowc+0x16>

0801f272 <__ascii_wctomb>:
 801f272:	4603      	mov	r3, r0
 801f274:	4608      	mov	r0, r1
 801f276:	b141      	cbz	r1, 801f28a <__ascii_wctomb+0x18>
 801f278:	2aff      	cmp	r2, #255	@ 0xff
 801f27a:	d904      	bls.n	801f286 <__ascii_wctomb+0x14>
 801f27c:	228a      	movs	r2, #138	@ 0x8a
 801f27e:	601a      	str	r2, [r3, #0]
 801f280:	f04f 30ff 	mov.w	r0, #4294967295
 801f284:	4770      	bx	lr
 801f286:	700a      	strb	r2, [r1, #0]
 801f288:	2001      	movs	r0, #1
 801f28a:	4770      	bx	lr

0801f28c <_raise_r>:
 801f28c:	291f      	cmp	r1, #31
 801f28e:	b538      	push	{r3, r4, r5, lr}
 801f290:	4605      	mov	r5, r0
 801f292:	460c      	mov	r4, r1
 801f294:	d904      	bls.n	801f2a0 <_raise_r+0x14>
 801f296:	2316      	movs	r3, #22
 801f298:	6003      	str	r3, [r0, #0]
 801f29a:	f04f 30ff 	mov.w	r0, #4294967295
 801f29e:	bd38      	pop	{r3, r4, r5, pc}
 801f2a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f2a2:	b112      	cbz	r2, 801f2aa <_raise_r+0x1e>
 801f2a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f2a8:	b94b      	cbnz	r3, 801f2be <_raise_r+0x32>
 801f2aa:	4628      	mov	r0, r5
 801f2ac:	f000 f830 	bl	801f310 <_getpid_r>
 801f2b0:	4622      	mov	r2, r4
 801f2b2:	4601      	mov	r1, r0
 801f2b4:	4628      	mov	r0, r5
 801f2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f2ba:	f000 b817 	b.w	801f2ec <_kill_r>
 801f2be:	2b01      	cmp	r3, #1
 801f2c0:	d00a      	beq.n	801f2d8 <_raise_r+0x4c>
 801f2c2:	1c59      	adds	r1, r3, #1
 801f2c4:	d103      	bne.n	801f2ce <_raise_r+0x42>
 801f2c6:	2316      	movs	r3, #22
 801f2c8:	6003      	str	r3, [r0, #0]
 801f2ca:	2001      	movs	r0, #1
 801f2cc:	e7e7      	b.n	801f29e <_raise_r+0x12>
 801f2ce:	2100      	movs	r1, #0
 801f2d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f2d4:	4620      	mov	r0, r4
 801f2d6:	4798      	blx	r3
 801f2d8:	2000      	movs	r0, #0
 801f2da:	e7e0      	b.n	801f29e <_raise_r+0x12>

0801f2dc <raise>:
 801f2dc:	4b02      	ldr	r3, [pc, #8]	@ (801f2e8 <raise+0xc>)
 801f2de:	4601      	mov	r1, r0
 801f2e0:	6818      	ldr	r0, [r3, #0]
 801f2e2:	f7ff bfd3 	b.w	801f28c <_raise_r>
 801f2e6:	bf00      	nop
 801f2e8:	24000044 	.word	0x24000044

0801f2ec <_kill_r>:
 801f2ec:	b538      	push	{r3, r4, r5, lr}
 801f2ee:	4d07      	ldr	r5, [pc, #28]	@ (801f30c <_kill_r+0x20>)
 801f2f0:	2300      	movs	r3, #0
 801f2f2:	4604      	mov	r4, r0
 801f2f4:	4608      	mov	r0, r1
 801f2f6:	4611      	mov	r1, r2
 801f2f8:	602b      	str	r3, [r5, #0]
 801f2fa:	f7e2 fa4f 	bl	800179c <_kill>
 801f2fe:	1c43      	adds	r3, r0, #1
 801f300:	d102      	bne.n	801f308 <_kill_r+0x1c>
 801f302:	682b      	ldr	r3, [r5, #0]
 801f304:	b103      	cbz	r3, 801f308 <_kill_r+0x1c>
 801f306:	6023      	str	r3, [r4, #0]
 801f308:	bd38      	pop	{r3, r4, r5, pc}
 801f30a:	bf00      	nop
 801f30c:	2400cf04 	.word	0x2400cf04

0801f310 <_getpid_r>:
 801f310:	f7e2 ba3c 	b.w	800178c <_getpid>

0801f314 <_init>:
 801f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f316:	bf00      	nop
 801f318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f31a:	bc08      	pop	{r3}
 801f31c:	469e      	mov	lr, r3
 801f31e:	4770      	bx	lr

0801f320 <_fini>:
 801f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f322:	bf00      	nop
 801f324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f326:	bc08      	pop	{r3}
 801f328:	469e      	mov	lr, r3
 801f32a:	4770      	bx	lr
