
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c778  0800c778  0000d778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc28  0800cc28  0000dc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cc30  0800cc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cc34  0800cc34  0000dc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800cc38  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001d8  0800ce10  0000e1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000238  0800ce70  0000e238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  24000298  0800ced0  0000e298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000648  0800ced0  0000e648  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001debc  00000000  00000000  0000e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e18  00000000  00000000  0002c182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0002efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f2  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036c66  00000000  00000000  0003188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c271  00000000  00000000  000684f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a4cf  00000000  00000000  00084761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eec30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ec  00000000  00000000  001eec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001f5f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000298 	.word	0x24000298
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c760 	.word	0x0800c760

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400029c 	.word	0x2400029c
 800030c:	0800c760 	.word	0x0800c760

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_write>:
/* USER CODE BEGIN 0 */
// Redirecționare printf -> UART3


int _write(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <_write+0x28>)
 80006c8:	f008 f9ca 	bl	8008a60 <HAL_UART_Transmit>
  return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	24000458 	.word	0x24000458

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 ffb2 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f8ce 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fad2 	bl	8000c90 <MX_GPIO_Init>
  MX_ETH_Init();
 80006ec:	f000 f9d4 	bl	8000a98 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 fa7a 	bl	8000be8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006f4:	f000 fac4 	bl	8000c80 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006f8:	f000 f934 	bl	8000964 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006fc:	f000 fa18 	bl	8000b30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("Sistem pornit. Începe monitorizarea..\r\n");
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <main+0x44>)
 8000702:	f00a f92b 	bl	800a95c <puts>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000706:	2100      	movs	r1, #0
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <main+0x48>)
 800070a:	f007 fadf 	bl	8007ccc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ReadTemperatureAndDustLevels();
 800070e:	f000 f80b 	bl	8000728 <ReadTemperatureAndDustLevels>
	  HAL_Delay(1000); // Pauză de 1 secundă între citiri
 8000712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000716:	f001 f829 	bl	800176c <HAL_Delay>
	  ReadTemperatureAndDustLevels();
 800071a:	bf00      	nop
 800071c:	e7f7      	b.n	800070e <main+0x32>
 800071e:	bf00      	nop
 8000720:	0800c778 	.word	0x0800c778
 8000724:	2400040c 	.word	0x2400040c

08000728 <ReadTemperatureAndDustLevels>:
 }

  /* USER CODE END 3 */
}

void ReadTemperatureAndDustLevels(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	@ 0x30
 800072c:	af04      	add	r7, sp, #16
    uint32_t rawValCh10, rawValCh15, rawValCh5;
    float voltageCh10, voltageCh15;
    float tempC_Ch10, tempC_Ch15, dustDensity;

    // Pornim ADC
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800072e:	484a      	ldr	r0, [pc, #296]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 8000730:	f001 fd48 	bl	80021c4 <HAL_ADC_Start>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <ReadTemperatureAndDustLevels+0x1a>
        printf("Eroare la pornirea ADC!\r\n");
 800073a:	4848      	ldr	r0, [pc, #288]	@ (800085c <ReadTemperatureAndDustLevels+0x134>)
 800073c:	f00a f90e 	bl	800a95c <puts>
        return;
 8000740:	e086      	b.n	8000850 <ReadTemperatureAndDustLevels+0x128>
    }

    // Citim canalul 10 (LM35_1)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000742:	210a      	movs	r1, #10
 8000744:	4844      	ldr	r0, [pc, #272]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 8000746:	f001 fe3b 	bl	80023c0 <HAL_ADC_PollForConversion>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d122      	bne.n	8000796 <ReadTemperatureAndDustLevels+0x6e>
        rawValCh10 = HAL_ADC_GetValue(&hadc1);
 8000750:	4841      	ldr	r0, [pc, #260]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 8000752:	f001 ff29 	bl	80025a8 <HAL_ADC_GetValue>
 8000756:	61f8      	str	r0, [r7, #28]
        voltageCh10 = (rawValCh10 / ADC_RESOLUTION) * ADC_REF_VOLTAGE;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000762:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8000860 <ReadTemperatureAndDustLevels+0x138>
 8000766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000864 <ReadTemperatureAndDustLevels+0x13c>
 800076e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000772:	edc7 7a06 	vstr	s15, [r7, #24]
        tempC_Ch10 = voltageCh10 / LM35_VOLTAGE_TO_TEMP_CONV;
 8000776:	ed97 7a06 	vldr	s14, [r7, #24]
 800077a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000868 <ReadTemperatureAndDustLevels+0x140>
 800077e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000782:	edc7 7a05 	vstr	s15, [r7, #20]
        printf("Eroare la citirea canalului 10 (LM35_1)!\r\n");
        return;
    }

    // Citim canalul 15 (LM35_2)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000786:	210a      	movs	r1, #10
 8000788:	4833      	ldr	r0, [pc, #204]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 800078a:	f001 fe19 	bl	80023c0 <HAL_ADC_PollForConversion>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d127      	bne.n	80007e4 <ReadTemperatureAndDustLevels+0xbc>
 8000794:	e003      	b.n	800079e <ReadTemperatureAndDustLevels+0x76>
        printf("Eroare la citirea canalului 10 (LM35_1)!\r\n");
 8000796:	4835      	ldr	r0, [pc, #212]	@ (800086c <ReadTemperatureAndDustLevels+0x144>)
 8000798:	f00a f8e0 	bl	800a95c <puts>
        return;
 800079c:	e058      	b.n	8000850 <ReadTemperatureAndDustLevels+0x128>
        rawValCh15 = HAL_ADC_GetValue(&hadc1);
 800079e:	482e      	ldr	r0, [pc, #184]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 80007a0:	f001 ff02 	bl	80025a8 <HAL_ADC_GetValue>
 80007a4:	6138      	str	r0, [r7, #16]
        voltageCh15 = (rawValCh15 / ADC_RESOLUTION) * ADC_REF_VOLTAGE;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007b0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000860 <ReadTemperatureAndDustLevels+0x138>
 80007b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000864 <ReadTemperatureAndDustLevels+0x13c>
 80007bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c0:	edc7 7a03 	vstr	s15, [r7, #12]
        tempC_Ch15 = voltageCh15 / LM35_VOLTAGE_TO_TEMP_CONV;
 80007c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80007c8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000868 <ReadTemperatureAndDustLevels+0x140>
 80007cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d0:	edc7 7a02 	vstr	s15, [r7, #8]
        printf("Eroare la citirea canalului 15 (LM35_2)!\r\n");
        return;
    }

    // Citim canalul 5 (Senzor praf)
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80007d4:	210a      	movs	r1, #10
 80007d6:	4820      	ldr	r0, [pc, #128]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 80007d8:	f001 fdf2 	bl	80023c0 <HAL_ADC_PollForConversion>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d132      	bne.n	8000848 <ReadTemperatureAndDustLevels+0x120>
 80007e2:	e003      	b.n	80007ec <ReadTemperatureAndDustLevels+0xc4>
        printf("Eroare la citirea canalului 15 (LM35_2)!\r\n");
 80007e4:	4822      	ldr	r0, [pc, #136]	@ (8000870 <ReadTemperatureAndDustLevels+0x148>)
 80007e6:	f00a f8b9 	bl	800a95c <puts>
        return;
 80007ea:	e031      	b.n	8000850 <ReadTemperatureAndDustLevels+0x128>
           float dustVoltage = HAL_ADC_GetValue(&hadc1) * (ADC_REF_VOLTAGE / ADC_RESOLUTION);
 80007ec:	481a      	ldr	r0, [pc, #104]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 80007ee:	f001 fedb 	bl	80025a8 <HAL_ADC_GetValue>
 80007f2:	ee07 0a90 	vmov	s15, r0
 80007f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000874 <ReadTemperatureAndDustLevels+0x14c>
 80007fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000802:	edc7 7a01 	vstr	s15, [r7, #4]
           dustDensity = dustVoltage * 100.0f; // presupunând un factor de 100 μg/m^3 per volt
 8000806:	edd7 7a01 	vldr	s15, [r7, #4]
 800080a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000878 <ReadTemperatureAndDustLevels+0x150>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	edc7 7a00 	vstr	s15, [r7]
       } else {
           printf("Eroare la citirea canalului 5 (Senzor praf)!\r\n");
           return;
       }

    HAL_ADC_Stop(&hadc1);
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <ReadTemperatureAndDustLevels+0x130>)
 8000818:	f001 fd9e 	bl	8002358 <HAL_ADC_Stop>

    // Afișăm valorile
    printf("LM35_1: %.2f C, LM35_2: %.2f C, Praful: %.2f μg/m^3\r\n",
 800081c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000820:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000824:	edd7 7a02 	vldr	s15, [r7, #8]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	edd7 6a00 	vldr	s13, [r7]
 8000830:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000834:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000838:	ed8d 7b00 	vstr	d7, [sp]
 800083c:	ec53 2b15 	vmov	r2, r3, d5
 8000840:	480e      	ldr	r0, [pc, #56]	@ (800087c <ReadTemperatureAndDustLevels+0x154>)
 8000842:	f00a f823 	bl	800a88c <iprintf>
 8000846:	e003      	b.n	8000850 <ReadTemperatureAndDustLevels+0x128>
           printf("Eroare la citirea canalului 5 (Senzor praf)!\r\n");
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <ReadTemperatureAndDustLevels+0x158>)
 800084a:	f00a f887 	bl	800a95c <puts>
           return;
 800084e:	bf00      	nop
               tempC_Ch10, tempC_Ch15, dustDensity);
}
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	240002ec 	.word	0x240002ec
 800085c:	0800c7a0 	.word	0x0800c7a0
 8000860:	457ff000 	.word	0x457ff000
 8000864:	40533333 	.word	0x40533333
 8000868:	3c23d70a 	.word	0x3c23d70a
 800086c:	0800c7bc 	.word	0x0800c7bc
 8000870:	0800c7e8 	.word	0x0800c7e8
 8000874:	3a534067 	.word	0x3a534067
 8000878:	42c80000 	.word	0x42c80000
 800087c:	0800c844 	.word	0x0800c844
 8000880:	0800c814 	.word	0x0800c814

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	@ 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	224c      	movs	r2, #76	@ 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00a f942 	bl	800ab1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00a f93c 	bl	800ab1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f003 fe33 	bl	8004510 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <SystemClock_Config+0xdc>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000960 <SystemClock_Config+0xdc>)
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <SystemClock_Config+0xdc>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c6:	bf00      	nop
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <SystemClock_Config+0xdc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d4:	d1f8      	bne.n	80008c8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008d6:	2321      	movs	r3, #33	@ 0x21
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008da:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80008f0:	f240 1313 	movw	r3, #275	@ 0x113
 80008f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000902:	2304      	movs	r3, #4
 8000904:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000906:	2300      	movs	r3, #0
 8000908:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fe36 	bl	8004584 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800091e:	f000 fab3 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	233f      	movs	r3, #63	@ 0x3f
 8000924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2303      	movs	r3, #3
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092e:	2308      	movs	r3, #8
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000932:	2340      	movs	r3, #64	@ 0x40
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000936:	2340      	movs	r3, #64	@ 0x40
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000940:	2340      	movs	r3, #64	@ 0x40
 8000942:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2103      	movs	r1, #3
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f9f5 	bl	8004d38 <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000954:	f000 fa98 	bl	8000e88 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3770      	adds	r7, #112	@ 0x70
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58024800 	.word	0x58024800

08000964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	@ 0x30
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2224      	movs	r2, #36	@ 0x24
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00a f8cd 	bl	800ab1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000982:	4b40      	ldr	r3, [pc, #256]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000984:	4a40      	ldr	r2, [pc, #256]	@ (8000a88 <MX_ADC1_Init+0x124>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b3e      	ldr	r3, [pc, #248]	@ (8000a84 <MX_ADC1_Init+0x120>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000990:	2208      	movs	r2, #8
 8000992:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000994:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000996:	2201      	movs	r2, #1
 8000998:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a84 <MX_ADC1_Init+0x120>)
 800099c:	2204      	movs	r2, #4
 800099e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80009ac:	4b35      	ldr	r3, [pc, #212]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b2:	4b34      	ldr	r3, [pc, #208]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ba:	4b32      	ldr	r3, [pc, #200]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c0:	4b30      	ldr	r3, [pc, #192]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80009d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80009e0:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e6:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <MX_ADC1_Init+0x120>)
 80009e8:	f001 f9e4 	bl	8001db4 <HAL_ADC_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009f2:	f000 fa49 	bl	8000e88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4820      	ldr	r0, [pc, #128]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000a02:	f002 fdc9 	bl	8003598 <HAL_ADCEx_MultiModeConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a0c:	f000 fa3c 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_ADC1_Init+0x128>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a14:	2306      	movs	r3, #6
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a22:	2304      	movs	r3, #4
 8000a24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000a36:	f001 fdc5 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a40:	f000 fa22 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_ADC1_Init+0x12c>)
 8000a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000a52:	f001 fdb7 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000a5c:	f000 fa14 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_ADC1_Init+0x130>)
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a64:	2312      	movs	r3, #18
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_ADC1_Init+0x120>)
 8000a6e:	f001 fda9 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000a78:	f000 fa06 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	@ 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	240002ec 	.word	0x240002ec
 8000a88:	40022000 	.word	0x40022000
 8000a8c:	2a000400 	.word	0x2a000400
 8000a90:	3ef08000 	.word	0x3ef08000
 8000a94:	14f00020 	.word	0x14f00020

08000a98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <MX_ETH_Init+0x84>)
 8000aa0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000ab0:	22e1      	movs	r2, #225	@ 0xe1
 8000ab2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ac8:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <MX_ETH_Init+0x88>)
 8000aca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ad4:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_ETH_Init+0x8c>)
 8000ad6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <MX_ETH_Init+0x90>)
 8000adc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ae0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000ae4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ae6:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <MX_ETH_Init+0x80>)
 8000ae8:	f002 ff1c 	bl	8003924 <HAL_ETH_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000af2:	f000 f9c9 	bl	8000e88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000af6:	2238      	movs	r2, #56	@ 0x38
 8000af8:	2100      	movs	r1, #0
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <MX_ETH_Init+0x94>)
 8000afc:	f00a f80e 	bl	800ab1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_ETH_Init+0x94>)
 8000b02:	2221      	movs	r2, #33	@ 0x21
 8000b04:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_ETH_Init+0x94>)
 8000b08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b0c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_ETH_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2400035c 	.word	0x2400035c
 8000b1c:	40028000 	.word	0x40028000
 8000b20:	240004ec 	.word	0x240004ec
 8000b24:	24000238 	.word	0x24000238
 8000b28:	240001d8 	.word	0x240001d8
 8000b2c:	240002b4 	.word	0x240002b4

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b5e:	f240 3247 	movw	r2, #839	@ 0x347
 8000b62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b7e:	4819      	ldr	r0, [pc, #100]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b80:	f007 f84c 	bl	8007c1c <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000b8a:	f000 f97d 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000b9e:	f007 fe73 	bl	8008888 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f96e 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	@ 0x60
 8000bae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 320;
 8000bb0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000bc6:	f007 f99d 	bl	8007f04 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000bd0:	f000 f95a 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <MX_TIM2_Init+0xb4>)
 8000bd6:	f000 fb19 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2400040c 	.word	0x2400040c

08000be8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c32:	f007 fec5 	bl	80089c0 <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f924 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c44:	f009 f85f 	bl	8009d06 <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 f91b 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c56:	f009 f894 	bl	8009d82 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f912 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c66:	f009 f815 	bl	8009c94 <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f90a 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	24000458 	.word	0x24000458
 8000c7c:	40004800 	.word	0x40004800

08000c80 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b71      	ldr	r3, [pc, #452]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a6f      	ldr	r2, [pc, #444]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc4:	4b69      	ldr	r3, [pc, #420]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a68      	ldr	r2, [pc, #416]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b65      	ldr	r3, [pc, #404]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b62      	ldr	r3, [pc, #392]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a60      	ldr	r2, [pc, #384]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b5a      	ldr	r3, [pc, #360]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a59      	ldr	r2, [pc, #356]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b56      	ldr	r3, [pc, #344]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b53      	ldr	r3, [pc, #332]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4a51      	ldr	r2, [pc, #324]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	4a4a      	ldr	r2, [pc, #296]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4c:	4b47      	ldr	r3, [pc, #284]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a42      	ldr	r2, [pc, #264]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b40      	ldr	r3, [pc, #256]	@ (8000e6c <MX_GPIO_Init+0x1dc>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d7e:	483c      	ldr	r0, [pc, #240]	@ (8000e70 <MX_GPIO_Init+0x1e0>)
 8000d80:	f003 fbac 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d8a:	483a      	ldr	r0, [pc, #232]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d8c:	f003 fba6 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2102      	movs	r1, #2
 8000d94:	4838      	ldr	r0, [pc, #224]	@ (8000e78 <MX_GPIO_Init+0x1e8>)
 8000d96:	f003 fba1 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4833      	ldr	r0, [pc, #204]	@ (8000e7c <MX_GPIO_Init+0x1ec>)
 8000db0:	f003 f9ec 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000db4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <MX_GPIO_Init+0x1e0>)
 8000dce:	f003 f9dd 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4822      	ldr	r0, [pc, #136]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000dec:	f003 f9ce 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <MX_GPIO_Init+0x1f0>)
 8000e06:	f003 f9c1 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4819      	ldr	r0, [pc, #100]	@ (8000e84 <MX_GPIO_Init+0x1f4>)
 8000e20:	f003 f9b4 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e36:	230a      	movs	r3, #10
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <MX_GPIO_Init+0x1f4>)
 8000e42:	f003 f9a3 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_GPIO_Init+0x1e8>)
 8000e5e:	f003 f995 	bl	800418c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	@ 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58020c00 	.word	0x58020c00
 8000e78:	58021000 	.word	0x58021000
 8000e7c:	58020800 	.word	0x58020800
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58020000 	.word	0x58020000

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_MspInit+0x30>)
 8000e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x30>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x30>)
 8000eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	58024400 	.word	0x58024400

08000ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ba      	sub	sp, #232	@ 0xe8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	22b8      	movs	r2, #184	@ 0xb8
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f009 fe17 	bl	800ab1c <memset>
  if(hadc->Instance==ADC1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800101c <HAL_ADC_MspInit+0x154>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	f040 808c 	bne.w	8001012 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000efa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000f0a:	2318      	movs	r3, #24
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f1a:	23c0      	movs	r3, #192	@ 0xc0
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fa8d 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000f3c:	f7ff ffa4 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f40:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f46:	4a36      	ldr	r2, [pc, #216]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f50:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a2e      	ldr	r2, [pc, #184]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_ADC_MspInit+0x158>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <HAL_ADC_MspInit+0x15c>)
 8000fd2:	f003 f8db 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fec:	4619      	mov	r1, r3
 8000fee:	480e      	ldr	r0, [pc, #56]	@ (8001028 <HAL_ADC_MspInit+0x160>)
 8000ff0:	f003 f8cc 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100a:	4619      	mov	r1, r3
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <HAL_ADC_MspInit+0x164>)
 800100e:	f003 f8bd 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001012:	bf00      	nop
 8001014:	37e8      	adds	r7, #232	@ 0xe8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000
 8001020:	58024400 	.word	0x58024400
 8001024:	58020800 	.word	0x58020800
 8001028:	58020000 	.word	0x58020000
 800102c:	58020400 	.word	0x58020400

08001030 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a59      	ldr	r2, [pc, #356]	@ (80011b4 <HAL_ETH_MspInit+0x184>)
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 80ab 	bne.w	80011aa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001054:	4b58      	ldr	r3, [pc, #352]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800105a:	4a57      	ldr	r2, [pc, #348]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 800105c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001060:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001064:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800106a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800106e:	623b      	str	r3, [r7, #32]
 8001070:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001072:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001078:	4a4f      	ldr	r2, [pc, #316]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800107e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001090:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001096:	4a48      	ldr	r2, [pc, #288]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010a0:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a40      	ldr	r2, [pc, #256]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	4a39      	ldr	r2, [pc, #228]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010dc:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	4a31      	ldr	r2, [pc, #196]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fa:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001126:	2332      	movs	r3, #50	@ 0x32
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001136:	230b      	movs	r3, #11
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	481e      	ldr	r0, [pc, #120]	@ (80011bc <HAL_ETH_MspInit+0x18c>)
 8001142:	f003 f823 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001146:	2386      	movs	r3, #134	@ 0x86
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001156:	230b      	movs	r3, #11
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <HAL_ETH_MspInit+0x190>)
 8001162:	f003 f813 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <HAL_ETH_MspInit+0x194>)
 8001184:	f003 f802 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001188:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119a:	230b      	movs	r3, #11
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <HAL_ETH_MspInit+0x198>)
 80011a6:	f002 fff1 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011aa:	bf00      	nop
 80011ac:	3738      	adds	r7, #56	@ 0x38
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40028000 	.word	0x40028000
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58020800 	.word	0x58020800
 80011c0:	58020000 	.word	0x58020000
 80011c4:	58020400 	.word	0x58020400
 80011c8:	58021800 	.word	0x58021800

080011cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011dc:	d10e      	bne.n	80011fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_TIM_PWM_MspInit+0x3c>)
 80011e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <HAL_TIM_PWM_MspInit+0x3c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_TIM_PWM_MspInit+0x3c>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	58024400 	.word	0x58024400

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800122c:	d11e      	bne.n	800126c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_TIM_MspPostInit+0x68>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124c:	2301      	movs	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125c:	2301      	movs	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001268:	f002 ff90 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	58020000 	.word	0x58020000

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b8      	sub	sp, #224	@ 0xe0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	22b8      	movs	r2, #184	@ 0xb8
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f009 fc3d 	bl	800ab1c <memset>
  if(huart->Instance==USART3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d146      	bne.n	800133a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ac:	f04f 0202 	mov.w	r2, #2
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f8c4 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ce:	f7ff fddb 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001312:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <HAL_UART_MspInit+0xd0>)
 8001336:	f002 ff29 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	37e0      	adds	r7, #224	@ 0xe0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004800 	.word	0x40004800
 8001348:	58024400 	.word	0x58024400
 800134c:	58020c00 	.word	0x58020c00

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f9c1 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_kill>:

int _kill(int pid, int sig)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c8:	f009 fbfa 	bl	800abc0 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2216      	movs	r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_exit>:

void _exit (int status)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e6:	f04f 31ff 	mov.w	r1, #4294967295
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffe7 	bl	80013be <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <_exit+0x12>

080013f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
  }

  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_close>:
  }
  return len;
}

int _close(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001456:	605a      	str	r2, [r3, #4]
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_isatty>:

int _isatty(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f009 fb7a 	bl	800abc0 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24050000 	.word	0x24050000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	240004f4 	.word	0x240004f4
 8001500:	24000648 	.word	0x24000648

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b32      	ldr	r3, [pc, #200]	@ (80015d4 <SystemInit+0xd0>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a31      	ldr	r2, [pc, #196]	@ (80015d4 <SystemInit+0xd0>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <SystemInit+0xd4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d807      	bhi.n	8001534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <SystemInit+0xd4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 030f 	bic.w	r3, r3, #15
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <SystemInit+0xd4>)
 800152e:	f043 0307 	orr.w	r3, r3, #7
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <SystemInit+0xd8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <SystemInit+0xd8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <SystemInit+0xd8>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <SystemInit+0xd8>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4924      	ldr	r1, [pc, #144]	@ (80015dc <SystemInit+0xd8>)
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <SystemInit+0xdc>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <SystemInit+0xd4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <SystemInit+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <SystemInit+0xd4>)
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <SystemInit+0xd8>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <SystemInit+0xd8>)
 8001582:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <SystemInit+0xe0>)
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <SystemInit+0xd8>)
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <SystemInit+0xe4>)
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <SystemInit+0xd8>)
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <SystemInit+0xe8>)
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <SystemInit+0xd8>)
 8001594:	2200      	movs	r2, #0
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <SystemInit+0xd8>)
 800159a:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <SystemInit+0xe8>)
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <SystemInit+0xd8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <SystemInit+0xd8>)
 80015a6:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <SystemInit+0xe8>)
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <SystemInit+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <SystemInit+0xd8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <SystemInit+0xd8>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <SystemInit+0xd8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <SystemInit+0xec>)
 80015c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	52002000 	.word	0x52002000
 80015dc:	58024400 	.word	0x58024400
 80015e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e4:	02020200 	.word	0x02020200
 80015e8:	01ff0000 	.word	0x01ff0000
 80015ec:	01010280 	.word	0x01010280
 80015f0:	52004000 	.word	0x52004000

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800162c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7ff ff84 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	@ (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	@ (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f009 fad3 	bl	800abcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff f859 	bl	80006dc <main>
  bx  lr
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001634:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001638:	0800cc38 	.word	0x0800cc38
  ldr r2, =_sbss
 800163c:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001640:	24000648 	.word	0x24000648

08001644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC3_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f002 f936 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001654:	f003 fd26 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	4913      	ldr	r1, [pc, #76]	@ (80016b4 <HAL_Init+0x6c>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_Init+0x6c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a0b      	ldr	r2, [pc, #44]	@ (80016b8 <HAL_Init+0x70>)
 800168a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800168c:	4a0b      	ldr	r2, [pc, #44]	@ (80016bc <HAL_Init+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f814 	bl	80016c0 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e002      	b.n	80016a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a2:	f7ff fbf7 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024400 	.word	0x58024400
 80016b4:	0800c87c 	.word	0x0800c87c
 80016b8:	24000004 	.word	0x24000004
 80016bc:	24000000 	.word	0x24000000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_InitTick+0x60>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e021      	b.n	8001718 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_InitTick+0x64>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 f90d 	bl	800390a <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f002 f8e5 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_InitTick+0x68>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2400000c 	.word	0x2400000c
 8001724:	24000000 	.word	0x24000000
 8001728:	24000008 	.word	0x24000008

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2400000c 	.word	0x2400000c
 8001750:	240004f8 	.word	0x240004f8

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	240004f8 	.word	0x240004f8

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff ffee 	bl	8001754 <HAL_GetTick>
 8001778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	bf00      	nop
 8001794:	f7ff ffde 	bl	8001754 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400000c 	.word	0x2400000c

080017b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80017c4:	4904      	ldr	r1, [pc, #16]	@ (80017d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	58000400 	.word	0x58000400

080017dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3360      	adds	r3, #96	@ 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <LL_ADC_SetOffset+0x60>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d10b      	bne.n	8001880 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	4313      	orrs	r3, r2
 8001876:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800187e:	e00b      	b.n	8001898 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	430b      	orrs	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58026000 	.word	0x58026000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	611a      	str	r2, [r3, #16]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a0c      	ldr	r2, [pc, #48]	@ (8001948 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00e      	beq.n	800193a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3360      	adds	r3, #96	@ 0x60
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]
  }
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	58026000 	.word	0x58026000

0800194c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a0c      	ldr	r2, [pc, #48]	@ (800198c <LL_ADC_SetOffsetSaturation+0x40>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10e      	bne.n	800197e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	@ 0x60
 8001964:	461a      	mov	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	58026000 	.word	0x58026000

08001990 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <LL_ADC_SetOffsetSign+0x40>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10e      	bne.n	80019c2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3360      	adds	r3, #96	@ 0x60
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	431a      	orrs	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	58026000 	.word	0x58026000

080019d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3360      	adds	r3, #96	@ 0x60
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <LL_ADC_SetOffsetState+0x50>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d108      	bne.n	8001a08 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001a06:	e007      	b.n	8001a18 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	58026000 	.word	0x58026000

08001a28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3330      	adds	r3, #48	@ 0x30
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	4413      	add	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	211f      	movs	r1, #31
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 011f 	and.w	r1, r3, #31
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b087      	sub	sp, #28
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3314      	adds	r3, #20
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	0e5b      	lsrs	r3, r3, #25
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	4413      	add	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	0d1b      	lsrs	r3, r3, #20
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0d1b      	lsrs	r3, r3, #20
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b74 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d115      	bne.n	8001b3c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0318 	and.w	r3, r3, #24
 8001b26:	4914      	ldr	r1, [pc, #80]	@ (8001b78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001b28:	40d9      	lsrs	r1, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b3a:	e014      	b.n	8001b66 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0318 	and.w	r3, r3, #24
 8001b52:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001b54:	40d9      	lsrs	r1, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	400b      	ands	r3, r1
 8001b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	58026000 	.word	0x58026000
 8001b78:	000fffff 	.word	0x000fffff

08001b7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 031f 	and.w	r3, r3, #31
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6093      	str	r3, [r2, #8]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	5fffffc0 	.word	0x5fffffc0

08001bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	6fffffc0 	.word	0x6fffffc0

08001c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <LL_ADC_Enable+0x24>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	7fffffc0 	.word	0x7fffffc0

08001c78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <LL_ADC_Disable+0x24>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	f043 0202 	orr.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	7fffffc0 	.word	0x7fffffc0

08001ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_IsEnabled+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_IsEnabled+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsDisableOngoing+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsDisableOngoing+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <LL_ADC_REG_StartConversion+0x24>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	7fffffc0 	.word	0x7fffffc0

08001d14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <LL_ADC_REG_StopConversion+0x24>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	7fffffc0 	.word	0x7fffffc0

08001d3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <LL_ADC_INJ_StopConversion+0x24>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	f043 0220 	orr.w	r2, r3, #32
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	7fffffc0 	.word	0x7fffffc0

08001d8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1ee      	b.n	80021ac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff f873 	bl	8000ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff feef 	bl	8001bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fed5 	bl	8001bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff0a 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d114      	bne.n	8001e44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff feee 	bl	8001c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e24:	4b8e      	ldr	r3, [pc, #568]	@ (8002060 <HAL_ADC_Init+0x2ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	4a8e      	ldr	r2, [pc, #568]	@ (8002064 <HAL_ADC_Init+0x2b0>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e36:	e002      	b.n	8001e3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f9      	bne.n	8001e38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff feed 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10d      	bne.n	8001e70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff61 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8001e7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 8188 	bne.w	800219a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8184 	bne.w	800219a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fefa 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d136      	bne.n	8001f20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8002068 <HAL_ADC_Init+0x2b4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Init+0x112>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800206c <HAL_ADC_Init+0x2b8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_ADC_Init+0x130>
 8001ec6:	4868      	ldr	r0, [pc, #416]	@ (8002068 <HAL_ADC_Init+0x2b4>)
 8001ec8:	f7ff feea 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4867      	ldr	r0, [pc, #412]	@ (800206c <HAL_ADC_Init+0x2b8>)
 8001ed0:	f7ff fee6 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e008      	b.n	8001ef6 <HAL_ADC_Init+0x142>
 8001ee4:	4862      	ldr	r0, [pc, #392]	@ (8002070 <HAL_ADC_Init+0x2bc>)
 8001ee6:	f7ff fedb 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a5a      	ldr	r2, [pc, #360]	@ (8002068 <HAL_ADC_Init+0x2b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_Init+0x15a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a58      	ldr	r2, [pc, #352]	@ (800206c <HAL_ADC_Init+0x2b8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x15e>
 8001f0e:	4a59      	ldr	r2, [pc, #356]	@ (8002074 <HAL_ADC_Init+0x2c0>)
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_Init+0x160>
 8001f12:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <HAL_ADC_Init+0x2c4>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7ff fc5e 	bl	80017dc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a52      	ldr	r2, [pc, #328]	@ (8002070 <HAL_ADC_Init+0x2bc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d129      	bne.n	8001f7e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7e5b      	ldrb	r3, [r3, #25]
 8001f2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f34:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001f3a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d013      	beq.n	8001f6c <HAL_ADC_Init+0x1b8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d00d      	beq.n	8001f68 <HAL_ADC_Init+0x1b4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b1c      	cmp	r3, #28
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_Init+0x1b0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_Init+0x1ac>
 8001f5c:	2318      	movs	r3, #24
 8001f5e:	e006      	b.n	8001f6e <HAL_ADC_Init+0x1ba>
 8001f60:	2300      	movs	r3, #0
 8001f62:	e004      	b.n	8001f6e <HAL_ADC_Init+0x1ba>
 8001f64:	2310      	movs	r3, #16
 8001f66:	e002      	b.n	8001f6e <HAL_ADC_Init+0x1ba>
 8001f68:	2308      	movs	r3, #8
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_Init+0x1ba>
 8001f6c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001f6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e00e      	b.n	8001f9c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7e5b      	ldrb	r3, [r3, #25]
 8001f82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	3b01      	subs	r3, #1
 8001fac:	045b      	lsls	r3, r3, #17
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	@ (8002070 <HAL_ADC_Init+0x2bc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d115      	bne.n	8002006 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b26      	ldr	r3, [pc, #152]	@ (800207c <HAL_ADC_Init+0x2c8>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	430b      	orrs	r3, r1
 8001fec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	611a      	str	r2, [r3, #16]
 8002004:	e009      	b.n	800201a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_ADC_Init+0x2cc>)
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	430b      	orrs	r3, r1
 8002018:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fe8c 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8002024:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff feae 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 8002030:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f040 808e 	bne.w	8002156 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 808a 	bne.w	8002156 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_ADC_Init+0x2bc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d11b      	bne.n	8002084 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
 8002050:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002058:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	e018      	b.n	8002092 <HAL_ADC_Init+0x2de>
 8002060:	24000000 	.word	0x24000000
 8002064:	053e2d63 	.word	0x053e2d63
 8002068:	40022000 	.word	0x40022000
 800206c:	40022100 	.word	0x40022100
 8002070:	58026000 	.word	0x58026000
 8002074:	40022300 	.word	0x40022300
 8002078:	58026300 	.word	0x58026300
 800207c:	fff04007 	.word	0xfff04007
 8002080:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4b46      	ldr	r3, [pc, #280]	@ (80021b4 <HAL_ADC_Init+0x400>)
 800209a:	4013      	ands	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	69b9      	ldr	r1, [r7, #24]
 80020a2:	430b      	orrs	r3, r1
 80020a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d137      	bne.n	8002120 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	@ (80021b8 <HAL_ADC_Init+0x404>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d116      	bne.n	80020ee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_ADC_Init+0x408>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80020de:	430a      	orrs	r2, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	e020      	b.n	8002130 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	4b32      	ldr	r3, [pc, #200]	@ (80021c0 <HAL_ADC_Init+0x40c>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020fc:	3a01      	subs	r2, #1
 80020fe:	0411      	lsls	r1, r2, #16
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002110:	430a      	orrs	r2, r1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	e007      	b.n	8002130 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_ADC_Init+0x404>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d002      	beq.n	8002156 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f001 f90d 	bl	8003370 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10c      	bne.n	8002178 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f023 010f 	bic.w	r1, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
 8002176:	e007      	b.n	8002188 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020f 	bic.w	r2, r2, #15
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	f023 0303 	bic.w	r3, r3, #3
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	661a      	str	r2, [r3, #96]	@ 0x60
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3724      	adds	r7, #36	@ 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	ffffbffc 	.word	0xffffbffc
 80021b8:	58026000 	.word	0x58026000
 80021bc:	fc00f81f 	.word	0xfc00f81f
 80021c0:	fc00f81e 	.word	0xfc00f81e

080021c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002344 <HAL_ADC_Start+0x180>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_Start+0x1c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a5b      	ldr	r2, [pc, #364]	@ (8002348 <HAL_ADC_Start+0x184>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_Start+0x20>
 80021e0:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <HAL_ADC_Start+0x188>)
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_Start+0x22>
 80021e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_ADC_Start+0x18c>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fcc8 	bl	8001b7c <LL_ADC_GetMultimode>
 80021ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fda2 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 809a 	bne.w	8002334 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_Start+0x4a>
 800220a:	2302      	movs	r3, #2
 800220c:	e095      	b.n	800233a <HAL_ADC_Start+0x176>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ffc0 	bl	800319c <ADC_Enable>
 800221c:	4603      	mov	r3, r0
 800221e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 8081 	bne.w	800232a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800222c:	4b49      	ldr	r3, [pc, #292]	@ (8002354 <HAL_ADC_Start+0x190>)
 800222e:	4013      	ands	r3, r2
 8002230:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a42      	ldr	r2, [pc, #264]	@ (8002348 <HAL_ADC_Start+0x184>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d002      	beq.n	8002248 <HAL_ADC_Start+0x84>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e000      	b.n	800224a <HAL_ADC_Start+0x86>
 8002248:	4b3e      	ldr	r3, [pc, #248]	@ (8002344 <HAL_ADC_Start+0x180>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	4293      	cmp	r3, r2
 8002250:	d002      	beq.n	8002258 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002270:	d106      	bne.n	8002280 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	665a      	str	r2, [r3, #100]	@ 0x64
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	221c      	movs	r2, #28
 800228c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2b      	ldr	r2, [pc, #172]	@ (8002348 <HAL_ADC_Start+0x184>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d002      	beq.n	80022a6 <HAL_ADC_Start+0xe2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	e000      	b.n	80022a8 <HAL_ADC_Start+0xe4>
 80022a6:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_ADC_Start+0x180>)
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d008      	beq.n	80022c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d002      	beq.n	80022c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d114      	bne.n	80022ec <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fd01 	bl	8001cec <LL_ADC_REG_StartConversion>
 80022ea:	e025      	b.n	8002338 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <HAL_ADC_Start+0x184>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d002      	beq.n	8002308 <HAL_ADC_Start+0x144>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e000      	b.n	800230a <HAL_ADC_Start+0x146>
 8002308:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_ADC_Start+0x180>)
 800230a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00f      	beq.n	8002338 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002320:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	661a      	str	r2, [r3, #96]	@ 0x60
 8002328:	e006      	b.n	8002338 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002332:	e001      	b.n	8002338 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002338:	7dfb      	ldrb	r3, [r7, #23]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40022100 	.word	0x40022100
 800234c:	40022300 	.word	0x40022300
 8002350:	58026300 	.word	0x58026300
 8002354:	fffff0fe 	.word	0xfffff0fe

08002358 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Stop+0x16>
 800236a:	2302      	movs	r3, #2
 800236c:	e021      	b.n	80023b2 <HAL_ADC_Stop+0x5a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002376:	2103      	movs	r1, #3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fe53 	bl	8003024 <ADC_ConversionStop>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 ff91 	bl	80032b0 <ADC_Disable>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800239c:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <HAL_ADC_Stop+0x64>)
 800239e:	4013      	ands	r3, r2
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	ffffeefe 	.word	0xffffeefe

080023c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a72      	ldr	r2, [pc, #456]	@ (8002598 <HAL_ADC_PollForConversion+0x1d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_ADC_PollForConversion+0x1e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a70      	ldr	r2, [pc, #448]	@ (800259c <HAL_ADC_PollForConversion+0x1dc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x22>
 80023de:	4b70      	ldr	r3, [pc, #448]	@ (80025a0 <HAL_ADC_PollForConversion+0x1e0>)
 80023e0:	e000      	b.n	80023e4 <HAL_ADC_PollForConversion+0x24>
 80023e2:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <HAL_ADC_PollForConversion+0x1e4>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fbc9 	bl	8001b7c <LL_ADC_GetMultimode>
 80023ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d102      	bne.n	80023fa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023f4:	2308      	movs	r3, #8
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	e037      	b.n	800246a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d002      	beq.n	800240c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b09      	cmp	r3, #9
 800240a:	d111      	bne.n	8002430 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0b1      	b.n	800258e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800242a:	2304      	movs	r3, #4
 800242c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800242e:	e01c      	b.n	800246a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a58      	ldr	r2, [pc, #352]	@ (8002598 <HAL_ADC_PollForConversion+0x1d8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_ADC_PollForConversion+0x84>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a57      	ldr	r2, [pc, #348]	@ (800259c <HAL_ADC_PollForConversion+0x1dc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_ADC_PollForConversion+0x88>
 8002444:	4b56      	ldr	r3, [pc, #344]	@ (80025a0 <HAL_ADC_PollForConversion+0x1e0>)
 8002446:	e000      	b.n	800244a <HAL_ADC_PollForConversion+0x8a>
 8002448:	4b56      	ldr	r3, [pc, #344]	@ (80025a4 <HAL_ADC_PollForConversion+0x1e4>)
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fba4 	bl	8001b98 <LL_ADC_GetMultiDMATransfer>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e093      	b.n	800258e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002466:	2304      	movs	r3, #4
 8002468:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800246a:	f7ff f973 	bl	8001754 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002470:	e021      	b.n	80024b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d01d      	beq.n	80024b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800247a:	f7ff f96b 	bl	8001754 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <HAL_ADC_PollForConversion+0xd0>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d112      	bne.n	80024b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10b      	bne.n	80024b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e06b      	b.n	800258e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0d6      	beq.n	8002472 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff faa7 	bl	8001a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e5b      	ldrb	r3, [r3, #25]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d111      	bne.n	800251a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <HAL_ADC_PollForConversion+0x1dc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d002      	beq.n	800252a <HAL_ADC_PollForConversion+0x16a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e000      	b.n	800252c <HAL_ADC_PollForConversion+0x16c>
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_ADC_PollForConversion+0x1d8>)
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4293      	cmp	r3, r2
 8002532:	d008      	beq.n	8002546 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d002      	beq.n	8002546 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b09      	cmp	r3, #9
 8002544:	d104      	bne.n	8002550 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e00c      	b.n	800256a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_ADC_PollForConversion+0x1dc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d002      	beq.n	8002560 <HAL_ADC_PollForConversion+0x1a0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e000      	b.n	8002562 <HAL_ADC_PollForConversion+0x1a2>
 8002560:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_ADC_PollForConversion+0x1d8>)
 8002562:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d104      	bne.n	800257a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e008      	b.n	800258c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	220c      	movs	r2, #12
 800258a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40022000 	.word	0x40022000
 800259c:	40022100 	.word	0x40022100
 80025a0:	40022300 	.word	0x40022300
 80025a4:	58026300 	.word	0x58026300

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b0b9      	sub	sp, #228	@ 0xe4
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025de:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4aab      	ldr	r2, [pc, #684]	@ (8002894 <HAL_ADC_ConfigChannel+0x2d0>)
 80025e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d102      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x34>
 80025f2:	2302      	movs	r3, #2
 80025f4:	f000 bcfe 	b.w	8002ff4 <HAL_ADC_ConfigChannel+0xa30>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fb99 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 84e2 	bne.w	8002fd6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db38      	blt.n	800268c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a9e      	ldr	r2, [pc, #632]	@ (8002898 <HAL_ADC_ConfigChannel+0x2d4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d033      	beq.n	800268c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7e>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2201      	movs	r2, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	e01d      	b.n	800267e <HAL_ADC_ConfigChannel+0xba>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002656:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800265a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800265e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e004      	b.n	8002674 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800266a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2201      	movs	r2, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	69d1      	ldr	r1, [r2, #28]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff f9d8 	bl	8001a4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fb4a 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 80026a8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fb6b 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 80026b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 8270 	bne.w	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 826b 	bne.w	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	461a      	mov	r2, r3
 80026dc:	f7ff f9e3 	bl	8001aa6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002898 <HAL_ADC_ConfigChannel+0x2d4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10d      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002704:	e032      	b.n	800276c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002706:	4b65      	ldr	r3, [pc, #404]	@ (800289c <HAL_ADC_ConfigChannel+0x2d8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800270e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002712:	d10b      	bne.n	800272c <HAL_ADC_ConfigChannel+0x168>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	e01d      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1a4>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x18e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	e00a      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1a4>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d048      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6919      	ldr	r1, [r3, #16]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002784:	f7ff f85e 	bl	8001844 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <HAL_ADC_ConfigChannel+0x2d4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d119      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff f8f6 	bl	8001990 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1f8>
 80027b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ba:	e000      	b.n	80027be <HAL_ADC_ConfigChannel+0x1fa>
 80027bc:	2300      	movs	r3, #0
 80027be:	461a      	mov	r2, r3
 80027c0:	f7ff f8c4 	bl	800194c <LL_ADC_SetOffsetSaturation>
 80027c4:	e1ee      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_ADC_ConfigChannel+0x21a>
 80027d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x21c>
 80027de:	2300      	movs	r3, #0
 80027e0:	461a      	mov	r2, r3
 80027e2:	f7ff f891 	bl	8001908 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7e1b      	ldrb	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x238>
 80027f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x23a>
 80027fc:	2300      	movs	r3, #0
 80027fe:	461a      	mov	r2, r3
 8002800:	f7ff f868 	bl	80018d4 <LL_ADC_SetDataRightShift>
 8002804:	e1ce      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_ADC_ConfigChannel+0x2d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	f040 8181 	bne.w	8002b14 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f845 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_ADC_ConfigChannel+0x27a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f83a 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	e01e      	b.n	800287c <HAL_ADC_ConfigChannel+0x2b8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f82f 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800285c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002860:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e004      	b.n	800287a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002870:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2dc>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	e01e      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x30e>
 8002894:	47ff0000 	.word	0x47ff0000
 8002898:	58026000 	.word	0x58026000
 800289c:	5c001000 	.word	0x5c001000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80028b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e004      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80028c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d106      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f878 	bl	80019d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe ffdc 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x34c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe ffd1 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	f003 021f 	and.w	r2, r3, #31
 800290e:	e01e      	b.n	800294e <HAL_ADC_ConfigChannel+0x38a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe ffc6 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800292e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e004      	b.n	800294c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3a2>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	e018      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3d4>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800297a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002982:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e004      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800298e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f815 	bl	80019d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2102      	movs	r1, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe ff79 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x412>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2102      	movs	r1, #2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe ff6e 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80029cc:	4603      	mov	r3, r0
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	e01e      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x450>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ff63 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80029f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e004      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x468>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	e014      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x492>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e004      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe ffb6 	bl	80019d4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe ff1a 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x4d0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2103      	movs	r1, #3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe ff0f 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 021f 	and.w	r2, r3, #31
 8002a92:	e017      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x500>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2103      	movs	r1, #3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe ff04 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x518>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	e011      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x53c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aec:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d14f      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe ff61 	bl	80019d4 <LL_ADC_SetOffsetState>
 8002b12:	e047      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b36:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b5a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b7e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f879 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 8219 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7fe ff9a 	bl	8001afc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4aa1      	ldr	r2, [pc, #644]	@ (8002e54 <HAL_ADC_ConfigChannel+0x890>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f040 812e 	bne.w	8002e30 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x638>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2b09      	cmp	r3, #9
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e019      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x66c>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2b09      	cmp	r3, #9
 8002c28:	bf94      	ite	ls
 8002c2a:	2301      	movls	r3, #1
 8002c2c:	2300      	movhi	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d079      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x68c>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c4e:	e015      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x6b8>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	069b      	lsls	r3, r3, #26
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x6d8>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	e017      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x708>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	ea42 0103 	orr.w	r1, r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x72e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	051b      	lsls	r3, r3, #20
 8002cf0:	e018      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x760>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	e003      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d24:	430b      	orrs	r3, r1
 8002d26:	e07e      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x780>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	069b      	lsls	r3, r3, #26
 8002d3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d42:	e015      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x7ac>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	069b      	lsls	r3, r3, #26
 8002d6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x7cc>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	e017      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x7fc>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	ea42 0103 	orr.w	r1, r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x828>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	3b1e      	subs	r3, #30
 8002de4:	051b      	lsls	r3, r3, #20
 8002de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	e01b      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x860>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	60fb      	str	r3, [r7, #12]
  return result;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e24:	430b      	orrs	r3, r1
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	6892      	ldr	r2, [r2, #8]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f7fe fe3b 	bl	8001aa6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f280 80d7 	bge.w	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a06      	ldr	r2, [pc, #24]	@ (8002e58 <HAL_ADC_ConfigChannel+0x894>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x88a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_ADC_ConfigChannel+0x898>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10a      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x8a0>
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <HAL_ADC_ConfigChannel+0x89c>)
 8002e50:	e009      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x8a2>
 8002e52:	bf00      	nop
 8002e54:	47ff0000 	.word	0x47ff0000
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40022100 	.word	0x40022100
 8002e60:	40022300 	.word	0x40022300
 8002e64:	4b65      	ldr	r3, [pc, #404]	@ (8002ffc <HAL_ADC_ConfigChannel+0xa38>)
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fcde 	bl	8001828 <LL_ADC_GetCommonPathInternalCh>
 8002e6c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a62      	ldr	r2, [pc, #392]	@ (8003000 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x8c0>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a61      	ldr	r2, [pc, #388]	@ (8003004 <HAL_ADC_ConfigChannel+0xa40>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10e      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x8de>
 8002e84:	485e      	ldr	r0, [pc, #376]	@ (8003000 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e86:	f7fe ff0b 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	485d      	ldr	r0, [pc, #372]	@ (8003004 <HAL_ADC_ConfigChannel+0xa40>)
 8002e8e:	f7fe ff07 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4323      	orrs	r3, r4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e008      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x8f0>
 8002ea2:	4859      	ldr	r0, [pc, #356]	@ (8003008 <HAL_ADC_ConfigChannel+0xa44>)
 8002ea4:	f7fe fefc 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8084 	beq.w	8002fc2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	@ (800300c <HAL_ADC_ConfigChannel+0xa48>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d132      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x966>
 8002ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12c      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8003008 <HAL_ADC_ConfigChannel+0xa44>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 8086 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a47      	ldr	r2, [pc, #284]	@ (8003000 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x92c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a46      	ldr	r2, [pc, #280]	@ (8003004 <HAL_ADC_ConfigChannel+0xa40>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x930>
 8002ef0:	4a47      	ldr	r2, [pc, #284]	@ (8003010 <HAL_ADC_ConfigChannel+0xa4c>)
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x932>
 8002ef4:	4a41      	ldr	r2, [pc, #260]	@ (8002ffc <HAL_ADC_ConfigChannel+0xa38>)
 8002ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002efa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fe fc7e 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f06:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_ADC_ConfigChannel+0xa50>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	4a42      	ldr	r2, [pc, #264]	@ (8003018 <HAL_ADC_ConfigChannel+0xa54>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	3301      	adds	r3, #1
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f1a:	e002      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f28:	e05e      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <HAL_ADC_ConfigChannel+0xa58>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d120      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x9b2>
 8002f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a30      	ldr	r2, [pc, #192]	@ (8003008 <HAL_ADC_ConfigChannel+0xa44>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d14e      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003000 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x99a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <HAL_ADC_ConfigChannel+0xa40>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x99e>
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <HAL_ADC_ConfigChannel+0xa4c>)
 8002f60:	e000      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x9a0>
 8002f62:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_ADC_ConfigChannel+0xa38>)
 8002f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7fe fc47 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f74:	e038      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a29      	ldr	r2, [pc, #164]	@ (8003020 <HAL_ADC_ConfigChannel+0xa5c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d133      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
 8002f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12d      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_ADC_ConfigChannel+0xa44>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d128      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x9e6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_ADC_ConfigChannel+0xa40>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x9ea>
 8002faa:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_ADC_ConfigChannel+0xa4c>)
 8002fac:	e000      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x9ec>
 8002fae:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <HAL_ADC_ConfigChannel+0xa38>)
 8002fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7fe fc21 	bl	8001802 <LL_ADC_SetCommonPathInternalCh>
 8002fc0:	e012      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002fd4:	e008      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002ff0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	37e4      	adds	r7, #228	@ 0xe4
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	58026300 	.word	0x58026300
 8003000:	40022000 	.word	0x40022000
 8003004:	40022100 	.word	0x40022100
 8003008:	58026000 	.word	0x58026000
 800300c:	c7520000 	.word	0xc7520000
 8003010:	40022300 	.word	0x40022300
 8003014:	24000000 	.word	0x24000000
 8003018:	053e2d63 	.word	0x053e2d63
 800301c:	c3210000 	.word	0xc3210000
 8003020:	cb840000 	.word	0xcb840000

08003024 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fe7e 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8003040:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fea0 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 800304c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8098 	beq.w	800318c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02a      	beq.n	80030c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e5b      	ldrb	r3, [r3, #25]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d126      	bne.n	80030c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7e1b      	ldrb	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d122      	bne.n	80030c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800307e:	e014      	b.n	80030aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4a45      	ldr	r2, [pc, #276]	@ (8003198 <ADC_ConversionStop+0x174>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d90d      	bls.n	80030a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e074      	b.n	800318e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d1e3      	bne.n	8003080 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d014      	beq.n	80030f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fe36 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fdf3 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d104      	bne.n	80030f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe12 	bl	8001d14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d014      	beq.n	8003120 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fe46 	bl	8001d8c <LL_ADC_INJ_IsConversionOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fddb 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fe22 	bl	8001d64 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d005      	beq.n	8003132 <ADC_ConversionStop+0x10e>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d105      	bne.n	8003138 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800312c:	230c      	movs	r3, #12
 800312e:	617b      	str	r3, [r7, #20]
        break;
 8003130:	e005      	b.n	800313e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003132:	2308      	movs	r3, #8
 8003134:	617b      	str	r3, [r7, #20]
        break;
 8003136:	e002      	b.n	800313e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003138:	2304      	movs	r3, #4
 800313a:	617b      	str	r3, [r7, #20]
        break;
 800313c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800313e:	f7fe fb09 	bl	8001754 <HAL_GetTick>
 8003142:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003144:	e01b      	b.n	800317e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003146:	f7fe fb05 	bl	8001754 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b05      	cmp	r3, #5
 8003152:	d914      	bls.n	800317e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1dc      	bne.n	8003146 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	000cdbff 	.word	0x000cdbff

0800319c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fd79 	bl	8001ca0 <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d16e      	bne.n	8003292 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	4b38      	ldr	r3, [pc, #224]	@ (800329c <ADC_Enable+0x100>)
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e05a      	b.n	8003294 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd34 	bl	8001c50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fab4 	bl	8001754 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2b      	ldr	r2, [pc, #172]	@ (80032a0 <ADC_Enable+0x104>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <ADC_Enable+0x66>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <ADC_Enable+0x108>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <ADC_Enable+0x6a>
 8003202:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <ADC_Enable+0x10c>)
 8003204:	e000      	b.n	8003208 <ADC_Enable+0x6c>
 8003206:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <ADC_Enable+0x110>)
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fcb7 	bl	8001b7c <LL_ADC_GetMultimode>
 800320e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <ADC_Enable+0x108>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d002      	beq.n	8003220 <ADC_Enable+0x84>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	e000      	b.n	8003222 <ADC_Enable+0x86>
 8003220:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <ADC_Enable+0x104>)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4293      	cmp	r3, r2
 8003228:	d02c      	beq.n	8003284 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d130      	bne.n	8003292 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003230:	e028      	b.n	8003284 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd32 	bl	8001ca0 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fd02 	bl	8001c50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800324c:	f7fe fa82 	bl	8001754 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d914      	bls.n	8003284 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d00d      	beq.n	8003284 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e007      	b.n	8003294 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d1cf      	bne.n	8003232 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	8000003f 	.word	0x8000003f
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40022100 	.word	0x40022100
 80032a8:	40022300 	.word	0x40022300
 80032ac:	58026300 	.word	0x58026300

080032b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fd02 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 80032c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fce9 	bl	8001ca0 <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d047      	beq.n	8003364 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d144      	bne.n	8003364 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030d 	and.w	r3, r3, #13
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10c      	bne.n	8003302 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fcc3 	bl	8001c78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2203      	movs	r2, #3
 80032f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fa2b 	bl	8001754 <HAL_GetTick>
 80032fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003300:	e029      	b.n	8003356 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e023      	b.n	8003366 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800331e:	f7fe fa19 	bl	8001754 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d914      	bls.n	8003356 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1dc      	bne.n	800331e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6c      	ldr	r2, [pc, #432]	@ (8003530 <ADC_ConfigureBoostMode+0x1c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <ADC_ConfigureBoostMode+0x1c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6b      	ldr	r2, [pc, #428]	@ (8003534 <ADC_ConfigureBoostMode+0x1c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d109      	bne.n	80033a0 <ADC_ConfigureBoostMode+0x30>
 800338c:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <ADC_ConfigureBoostMode+0x1c8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e008      	b.n	80033b2 <ADC_ConfigureBoostMode+0x42>
 80033a0:	4b66      	ldr	r3, [pc, #408]	@ (800353c <ADC_ConfigureBoostMode+0x1cc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01c      	beq.n	80033f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033b6:	f001 ffef 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80033ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033c4:	d010      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x78>
 80033c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033ca:	d873      	bhi.n	80034b4 <ADC_ConfigureBoostMode+0x144>
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d0:	d002      	beq.n	80033d8 <ADC_ConfigureBoostMode+0x68>
 80033d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033d6:	d16d      	bne.n	80034b4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	60fb      	str	r3, [r7, #12]
        break;
 80033e6:	e068      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	60fb      	str	r3, [r7, #12]
        break;
 80033ee:	e064      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	f003 f9ca 	bl	8006790 <HAL_RCCEx_GetPeriphCLKFreq>
 80033fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003406:	d051      	beq.n	80034ac <ADC_ConfigureBoostMode+0x13c>
 8003408:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800340c:	d854      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 800340e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003412:	d047      	beq.n	80034a4 <ADC_ConfigureBoostMode+0x134>
 8003414:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003418:	d84e      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 800341a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800341e:	d03d      	beq.n	800349c <ADC_ConfigureBoostMode+0x12c>
 8003420:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003424:	d848      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 8003426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800342a:	d033      	beq.n	8003494 <ADC_ConfigureBoostMode+0x124>
 800342c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003430:	d842      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 8003432:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003436:	d029      	beq.n	800348c <ADC_ConfigureBoostMode+0x11c>
 8003438:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800343c:	d83c      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 800343e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003442:	d01a      	beq.n	800347a <ADC_ConfigureBoostMode+0x10a>
 8003444:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003448:	d836      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 800344a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800344e:	d014      	beq.n	800347a <ADC_ConfigureBoostMode+0x10a>
 8003450:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003454:	d830      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d00e      	beq.n	800347a <ADC_ConfigureBoostMode+0x10a>
 800345c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003460:	d82a      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 8003462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003466:	d008      	beq.n	800347a <ADC_ConfigureBoostMode+0x10a>
 8003468:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800346c:	d824      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x148>
 800346e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003472:	d002      	beq.n	800347a <ADC_ConfigureBoostMode+0x10a>
 8003474:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003478:	d11e      	bne.n	80034b8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0c9b      	lsrs	r3, r3, #18
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	60fb      	str	r3, [r7, #12]
        break;
 800348a:	e016      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
        break;
 8003492:	e012      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	60fb      	str	r3, [r7, #12]
        break;
 800349a:	e00e      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	60fb      	str	r3, [r7, #12]
        break;
 80034a2:	e00a      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	09db      	lsrs	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
        break;
 80034aa:	e006      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	60fb      	str	r3, [r7, #12]
        break;
 80034b2:	e002      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
        break;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80034b8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <ADC_ConfigureBoostMode+0x1d0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d808      	bhi.n	80034da <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034d8:	e025      	b.n	8003526 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <ADC_ConfigureBoostMode+0x1d4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d80a      	bhi.n	80034f8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f4:	609a      	str	r2, [r3, #8]
}
 80034f6:	e016      	b.n	8003526 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <ADC_ConfigureBoostMode+0x1d8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d80a      	bhi.n	8003516 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	e007      	b.n	8003526 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003524:	609a      	str	r2, [r3, #8]
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40022000 	.word	0x40022000
 8003534:	40022100 	.word	0x40022100
 8003538:	40022300 	.word	0x40022300
 800353c:	58026300 	.word	0x58026300
 8003540:	005f5e10 	.word	0x005f5e10
 8003544:	00bebc20 	.word	0x00bebc20
 8003548:	017d7840 	.word	0x017d7840

0800354c <LL_ADC_IsEnabled>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_IsConversionOngoing>:
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d101      	bne.n	800358a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b0a3      	sub	sp, #140	@ 0x8c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0c1      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e001      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0a0      	b.n	800373a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ffb9 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 8003600:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ffb2 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8081 	bne.w	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800361a:	2b00      	cmp	r3, #0
 800361c:	d17c      	bne.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a48      	ldr	r2, [pc, #288]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003632:	4b46      	ldr	r3, [pc, #280]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003634:	e000      	b.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003636:	4b46      	ldr	r3, [pc, #280]	@ (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003638:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d039      	beq.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003642:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	431a      	orrs	r2, r3
 8003650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003652:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a39      	ldr	r2, [pc, #228]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10e      	bne.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003668:	4836      	ldr	r0, [pc, #216]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800366a:	f7ff ff6f 	bl	800354c <LL_ADC_IsEnabled>
 800366e:	4604      	mov	r4, r0
 8003670:	4835      	ldr	r0, [pc, #212]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003672:	f7ff ff6b 	bl	800354c <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	4323      	orrs	r3, r4
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e008      	b.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003686:	4833      	ldr	r0, [pc, #204]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003688:	f7ff ff60 	bl	800354c <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d047      	beq.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800369c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	6892      	ldr	r2, [r2, #8]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b4:	e03a      	b.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10e      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80036d6:	481b      	ldr	r0, [pc, #108]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036d8:	f7ff ff38 	bl	800354c <LL_ADC_IsEnabled>
 80036dc:	4604      	mov	r4, r0
 80036de:	481a      	ldr	r0, [pc, #104]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036e0:	f7ff ff34 	bl	800354c <LL_ADC_IsEnabled>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4323      	orrs	r3, r4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e008      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80036f4:	4817      	ldr	r0, [pc, #92]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80036f6:	f7ff ff29 	bl	800354c <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800370a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003710:	4013      	ands	r3, r2
 8003712:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003714:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003716:	e009      	b.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800372a:	e000      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003736:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800373a:	4618      	mov	r0, r3
 800373c:	378c      	adds	r7, #140	@ 0x8c
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40022100 	.word	0x40022100
 800374c:	40022300 	.word	0x40022300
 8003750:	58026300 	.word	0x58026300
 8003754:	58026000 	.word	0x58026000
 8003758:	fffff0e0 	.word	0xfffff0e0

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	05fa0000 	.word	0x05fa0000

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	@ (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	@ (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	@ 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	@ 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff47 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff5e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff90 	bl	8003814 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5f 	bl	80037c0 <__NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffb2 	bl	800387c <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0e3      	b.n	8003afe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2223      	movs	r2, #35	@ 0x23
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fd fb71 	bl	8001030 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394e:	4b6e      	ldr	r3, [pc, #440]	@ (8003b08 <HAL_ETH_Init+0x1e4>)
 8003950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003954:	4a6c      	ldr	r2, [pc, #432]	@ (8003b08 <HAL_ETH_Init+0x1e4>)
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800395e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_ETH_Init+0x1e4>)
 8003960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a1b      	ldrb	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003974:	2000      	movs	r0, #0
 8003976:	f7fd ff1d 	bl	80017b4 <HAL_SYSCFG_ETHInterfaceSelect>
 800397a:	e003      	b.n	8003984 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800397c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003980:	f7fd ff18 	bl	80017b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003984:	4b61      	ldr	r3, [pc, #388]	@ (8003b0c <HAL_ETH_Init+0x1e8>)
 8003986:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800399e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a0:	f7fd fed8 	bl	8001754 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80039a6:	e011      	b.n	80039cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80039a8:	f7fd fed4 	bl	8001754 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80039b6:	d909      	bls.n	80039cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	22e0      	movs	r2, #224	@ 0xe0
 80039c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e098      	b.n	8003afe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e4      	bne.n	80039a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f89e 	bl	8003b20 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80039e4:	f001 fcd8 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4a49      	ldr	r2, [pc, #292]	@ (8003b10 <HAL_ETH_Init+0x1ec>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9a      	lsrs	r2, r3, #18
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3a01      	subs	r2, #1
 80039f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa81 	bl	8003f04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a0e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	22e0      	movs	r2, #224	@ 0xe0
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e05d      	b.n	8003afe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <HAL_ETH_Init+0x1f0>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6952      	ldr	r2, [r2, #20]
 8003a56:	0051      	lsls	r1, r2, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a62:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fae9 	bl	800403e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb2f 	bl	80040d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	3305      	adds	r3, #5
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	3303      	adds	r3, #3
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	061a      	lsls	r2, r3, #24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ab0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003abe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ac0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_ETH_Init+0x1f4>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <HAL_ETH_Init+0x1f8>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2210      	movs	r2, #16
 8003af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	58000400 	.word	0x58000400
 8003b10:	431bde83 	.word	0x431bde83
 8003b14:	ffff8001 	.word	0xffff8001
 8003b18:	0c020060 	.word	0x0c020060
 8003b1c:	0c20c000 	.word	0x0c20c000

08003b20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b3a:	f001 fc2d 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 8003b3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a1a      	ldr	r2, [pc, #104]	@ (8003bac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d804      	bhi.n	8003b52 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e022      	b.n	8003b98 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d204      	bcs.n	8003b64 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e019      	b.n	8003b98 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d915      	bls.n	8003b98 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d804      	bhi.n	8003b7e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e00c      	b.n	8003b98 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4a0e      	ldr	r2, [pc, #56]	@ (8003bbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d804      	bhi.n	8003b90 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e003      	b.n	8003b98 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	02160ebf 	.word	0x02160ebf
 8003bb0:	03938700 	.word	0x03938700
 8003bb4:	05f5e0ff 	.word	0x05f5e0ff
 8003bb8:	08f0d17f 	.word	0x08f0d17f
 8003bbc:	0ee6b27f 	.word	0x0ee6b27f

08003bc0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003bd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	791b      	ldrb	r3, [r3, #4]
 8003bd8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003bda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	7b1b      	ldrb	r3, [r3, #12]
 8003be0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003be2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	7b5b      	ldrb	r3, [r3, #13]
 8003be8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003bea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	7b9b      	ldrb	r3, [r3, #14]
 8003bf0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003bf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	7bdb      	ldrb	r3, [r3, #15]
 8003bf8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003bfa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	7c12      	ldrb	r2, [r2, #16]
 8003c00:	2a00      	cmp	r2, #0
 8003c02:	d102      	bne.n	8003c0a <ETH_SetMACConfig+0x4a>
 8003c04:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c08:	e000      	b.n	8003c0c <ETH_SetMACConfig+0x4c>
 8003c0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	7c52      	ldrb	r2, [r2, #17]
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	d102      	bne.n	8003c1c <ETH_SetMACConfig+0x5c>
 8003c16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c1a:	e000      	b.n	8003c1e <ETH_SetMACConfig+0x5e>
 8003c1c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	7c9b      	ldrb	r3, [r3, #18]
 8003c24:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c26:	431a      	orrs	r2, r3
               macconf->Speed |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c2c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	7f1b      	ldrb	r3, [r3, #28]
 8003c38:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	7f5b      	ldrb	r3, [r3, #29]
 8003c40:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	7f92      	ldrb	r2, [r2, #30]
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	d102      	bne.n	8003c52 <ETH_SetMACConfig+0x92>
 8003c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c50:	e000      	b.n	8003c54 <ETH_SetMACConfig+0x94>
 8003c52:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7fdb      	ldrb	r3, [r3, #31]
 8003c5a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d102      	bne.n	8003c6e <ETH_SetMACConfig+0xae>
 8003c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c6c:	e000      	b.n	8003c70 <ETH_SetMACConfig+0xb0>
 8003c6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c70:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c7e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003c80:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b56      	ldr	r3, [pc, #344]	@ (8003dec <ETH_SetMACConfig+0x22c>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003caa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cb4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cbe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003cc0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d102      	bne.n	8003cd2 <ETH_SetMACConfig+0x112>
 8003ccc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cd0:	e000      	b.n	8003cd4 <ETH_SetMACConfig+0x114>
 8003cd2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003cd4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4b42      	ldr	r3, [pc, #264]	@ (8003df0 <ETH_SetMACConfig+0x230>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <ETH_SetMACConfig+0x234>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d101      	bne.n	8003d32 <ETH_SetMACConfig+0x172>
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	e000      	b.n	8003d34 <ETH_SetMACConfig+0x174>
 8003d32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d34:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d46:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003d5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003d64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f023 0103 	bic.w	r1, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003d8a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d101      	bne.n	8003dae <ETH_SetMACConfig+0x1ee>
 8003daa:	2240      	movs	r2, #64	@ 0x40
 8003dac:	e000      	b.n	8003db0 <ETH_SetMACConfig+0x1f0>
 8003dae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003db0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003db8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003dba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003dc2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003dd0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	00048083 	.word	0x00048083
 8003df0:	c0f88000 	.word	0xc0f88000
 8003df4:	fffffef0 	.word	0xfffffef0

08003df8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <ETH_SetDMAConfig+0xf8>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	6811      	ldr	r1, [r2, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	7b1b      	ldrb	r3, [r3, #12]
 8003e30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <ETH_SetDMAConfig+0xfc>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e50:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	7b5b      	ldrb	r3, [r3, #13]
 8003e56:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e68:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003e6c:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <ETH_SetDMAConfig+0x100>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e7c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7d1b      	ldrb	r3, [r3, #20]
 8003e88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7f5b      	ldrb	r3, [r3, #29]
 8003e90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003ea2:	4b16      	ldr	r3, [pc, #88]	@ (8003efc <ETH_SetDMAConfig+0x104>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eb2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	7f1b      	ldrb	r3, [r3, #28]
 8003eba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ecc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <ETH_SetDMAConfig+0x108>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	430b      	orrs	r3, r1
 8003edc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ee0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	ffff87fd 	.word	0xffff87fd
 8003ef4:	ffff2ffe 	.word	0xffff2ffe
 8003ef8:	fffec000 	.word	0xfffec000
 8003efc:	ffc0efef 	.word	0xffc0efef
 8003f00:	7fc0ffff 	.word	0x7fc0ffff

08003f04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0a4      	sub	sp, #144	@ 0x90
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f12:	2300      	movs	r3, #0
 8003f14:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003f5c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003f60:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003f86:	2300      	movs	r3, #0
 8003f88:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003fae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fb8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fde6 	bl	8003bc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800400e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004012:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004018:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800401c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004024:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fee1 	bl	8003df8 <ETH_SetDMAConfig>
}
 8004036:	bf00      	nop
 8004038:	3790      	adds	r7, #144	@ 0x90
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e01d      	b.n	8004088 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	3206      	adds	r2, #6
 800407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3301      	adds	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d9de      	bls.n	800404c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800409c:	461a      	mov	r2, r3
 800409e:	2303      	movs	r3, #3
 80040a0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e023      	b.n	8004126 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6919      	ldr	r1, [r3, #16]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2200      	movs	r2, #0
 8004112:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	3212      	adds	r2, #18
 800411c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d9d8      	bls.n	80040de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004152:	461a      	mov	r2, r3
 8004154:	2303      	movs	r3, #3
 8004156:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004166:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800417a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	@ 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800419a:	4b86      	ldr	r3, [pc, #536]	@ (80043b4 <HAL_GPIO_Init+0x228>)
 800419c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419e:	e18c      	b.n	80044ba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 817e 	beq.w	80044b4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d005      	beq.n	80041d0 <HAL_GPIO_Init+0x44>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d130      	bne.n	8004232 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004206:	2201      	movs	r2, #1
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0201 	and.w	r2, r3, #1
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b03      	cmp	r3, #3
 800423c:	d017      	beq.n	800426e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d123      	bne.n	80042c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08da      	lsrs	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80d8 	beq.w	80044b4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004304:	4b2c      	ldr	r3, [pc, #176]	@ (80043b8 <HAL_GPIO_Init+0x22c>)
 8004306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800430a:	4a2b      	ldr	r2, [pc, #172]	@ (80043b8 <HAL_GPIO_Init+0x22c>)
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004314:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <HAL_GPIO_Init+0x22c>)
 8004316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004322:	4a26      	ldr	r2, [pc, #152]	@ (80043bc <HAL_GPIO_Init+0x230>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <HAL_GPIO_Init+0x234>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04a      	beq.n	80043e4 <HAL_GPIO_Init+0x258>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_GPIO_Init+0x238>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02b      	beq.n	80043ae <HAL_GPIO_Init+0x222>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_GPIO_Init+0x23c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d025      	beq.n	80043aa <HAL_GPIO_Init+0x21e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_GPIO_Init+0x240>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01f      	beq.n	80043a6 <HAL_GPIO_Init+0x21a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_GPIO_Init+0x244>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d019      	beq.n	80043a2 <HAL_GPIO_Init+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_GPIO_Init+0x248>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_GPIO_Init+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_GPIO_Init+0x24c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00d      	beq.n	800439a <HAL_GPIO_Init+0x20e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_GPIO_Init+0x250>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <HAL_GPIO_Init+0x20a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_GPIO_Init+0x254>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <HAL_GPIO_Init+0x206>
 800438e:	2309      	movs	r3, #9
 8004390:	e029      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 8004392:	230a      	movs	r3, #10
 8004394:	e027      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 8004396:	2307      	movs	r3, #7
 8004398:	e025      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 800439a:	2306      	movs	r3, #6
 800439c:	e023      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 800439e:	2305      	movs	r3, #5
 80043a0:	e021      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043a2:	2304      	movs	r3, #4
 80043a4:	e01f      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043a6:	2303      	movs	r3, #3
 80043a8:	e01d      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e01b      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e019      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043b2:	bf00      	nop
 80043b4:	58000080 	.word	0x58000080
 80043b8:	58024400 	.word	0x58024400
 80043bc:	58000400 	.word	0x58000400
 80043c0:	58020000 	.word	0x58020000
 80043c4:	58020400 	.word	0x58020400
 80043c8:	58020800 	.word	0x58020800
 80043cc:	58020c00 	.word	0x58020c00
 80043d0:	58021000 	.word	0x58021000
 80043d4:	58021400 	.word	0x58021400
 80043d8:	58021800 	.word	0x58021800
 80043dc:	58021c00 	.word	0x58021c00
 80043e0:	58022400 	.word	0x58022400
 80043e4:	2300      	movs	r3, #0
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	f002 0203 	and.w	r2, r2, #3
 80043ec:	0092      	lsls	r2, r2, #2
 80043ee:	4093      	lsls	r3, r2
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f6:	4938      	ldr	r1, [pc, #224]	@ (80044d8 <HAL_GPIO_Init+0x34c>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800442a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f ae6b 	bne.w	80041a0 <HAL_GPIO_Init+0x14>
  }
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	3724      	adds	r7, #36	@ 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	58000400 	.word	0x58000400

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044f8:	e003      	b.n	8004502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	041a      	lsls	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	619a      	str	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004518:	4b19      	ldr	r3, [pc, #100]	@ (8004580 <HAL_PWREx_ConfigSupply+0x70>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d00a      	beq.n	800453a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004524:	4b16      	ldr	r3, [pc, #88]	@ (8004580 <HAL_PWREx_ConfigSupply+0x70>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e01f      	b.n	8004576 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e01d      	b.n	8004576 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800453a:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <HAL_PWREx_ConfigSupply+0x70>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 0207 	bic.w	r2, r3, #7
 8004542:	490f      	ldr	r1, [pc, #60]	@ (8004580 <HAL_PWREx_ConfigSupply+0x70>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4313      	orrs	r3, r2
 8004548:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800454a:	f7fd f903 	bl	8001754 <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004550:	e009      	b.n	8004566 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004552:	f7fd f8ff 	bl	8001754 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004560:	d901      	bls.n	8004566 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e007      	b.n	8004576 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_PWREx_ConfigSupply+0x70>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004572:	d1ee      	bne.n	8004552 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	58024800 	.word	0x58024800

08004584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	@ 0x30
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e3c8      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8087 	beq.w	80046b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a4:	4b88      	ldr	r3, [pc, #544]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045ae:	4b86      	ldr	r3, [pc, #536]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d007      	beq.n	80045ca <HAL_RCC_OscConfig+0x46>
 80045ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045bc:	2b18      	cmp	r3, #24
 80045be:	d110      	bne.n	80045e2 <HAL_RCC_OscConfig+0x5e>
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d10b      	bne.n	80045e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ca:	4b7f      	ldr	r3, [pc, #508]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d06c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x12c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d168      	bne.n	80046b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e3a2      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x76>
 80045ec:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a75      	ldr	r2, [pc, #468]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e02e      	b.n	8004658 <HAL_RCC_OscConfig+0xd4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x98>
 8004602:	4b71      	ldr	r3, [pc, #452]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a70      	ldr	r2, [pc, #448]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6e      	ldr	r3, [pc, #440]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6d      	ldr	r2, [pc, #436]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e01d      	b.n	8004658 <HAL_RCC_OscConfig+0xd4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0xbc>
 8004626:	4b68      	ldr	r3, [pc, #416]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a67      	ldr	r2, [pc, #412]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800462c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a64      	ldr	r2, [pc, #400]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e00b      	b.n	8004658 <HAL_RCC_OscConfig+0xd4>
 8004640:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b5e      	ldr	r3, [pc, #376]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fd f878 	bl	8001754 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004668:	f7fd f874 	bl	8001754 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	@ 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e356      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800467a:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0xe4>
 8004686:	e014      	b.n	80046b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fd f864 	bl	8001754 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fd f860 	bl	8001754 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e342      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046a2:	4b49      	ldr	r3, [pc, #292]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x10c>
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 808c 	beq.w	80047d8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c0:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ca:	4b3f      	ldr	r3, [pc, #252]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_RCC_OscConfig+0x162>
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2b18      	cmp	r3, #24
 80046da:	d137      	bne.n	800474c <HAL_RCC_OscConfig+0x1c8>
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d132      	bne.n	800474c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e6:	4b38      	ldr	r3, [pc, #224]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x17a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e314      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046fe:	4b32      	ldr	r3, [pc, #200]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 0219 	bic.w	r2, r3, #25
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	492f      	ldr	r1, [pc, #188]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd f820 	bl	8001754 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004718:	f7fd f81c 	bl	8001754 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e2fe      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800472a:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	4920      	ldr	r1, [pc, #128]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474a:	e045      	b.n	80047d8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d026      	beq.n	80047a2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004754:	4b1c      	ldr	r3, [pc, #112]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 0219 	bic.w	r2, r3, #25
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4919      	ldr	r1, [pc, #100]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fc fff5 	bl	8001754 <HAL_GetTick>
 800476a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476e:	f7fc fff1 	bl	8001754 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e2d3      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	490b      	ldr	r1, [pc, #44]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
 80047a0:	e01a      	b.n	80047d8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc ffd1 	bl	8001754 <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fc ffcd 	bl	8001754 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d903      	bls.n	80047cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e2af      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
 80047c8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047cc:	4b96      	ldr	r3, [pc, #600]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d06a      	beq.n	80048ba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e4:	4b90      	ldr	r3, [pc, #576]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ee:	4b8e      	ldr	r3, [pc, #568]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d007      	beq.n	800480a <HAL_RCC_OscConfig+0x286>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b18      	cmp	r3, #24
 80047fe:	d11b      	bne.n	8004838 <HAL_RCC_OscConfig+0x2b4>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d116      	bne.n	8004838 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800480a:	4b87      	ldr	r3, [pc, #540]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_RCC_OscConfig+0x29e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e282      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004822:	4b81      	ldr	r3, [pc, #516]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	497d      	ldr	r1, [pc, #500]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004836:	e040      	b.n	80048ba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d023      	beq.n	8004888 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004840:	4b79      	ldr	r3, [pc, #484]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a78      	ldr	r2, [pc, #480]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fc ff82 	bl	8001754 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004854:	f7fc ff7e 	bl	8001754 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e260      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004866:	4b70      	ldr	r3, [pc, #448]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004872:	4b6d      	ldr	r3, [pc, #436]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	061b      	lsls	r3, r3, #24
 8004880:	4969      	ldr	r1, [pc, #420]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
 8004886:	e018      	b.n	80048ba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004888:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a66      	ldr	r2, [pc, #408]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800488e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc ff5e 	bl	8001754 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800489c:	f7fc ff5a 	bl	8001754 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e23c      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d019      	beq.n	8004902 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b56      	ldr	r3, [pc, #344]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80048d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d2:	4a55      	ldr	r2, [pc, #340]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fc ff3b 	bl	8001754 <HAL_GetTick>
 80048de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fc ff37 	bl	8001754 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e219      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80048f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x35e>
 8004900:	e018      	b.n	8004934 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004902:	4b49      	ldr	r3, [pc, #292]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	4a48      	ldr	r2, [pc, #288]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fc ff21 	bl	8001754 <HAL_GetTick>
 8004912:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7fc ff1d 	bl	8001754 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1ff      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004928:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d036      	beq.n	80049ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d019      	beq.n	800497c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004948:	4b37      	ldr	r3, [pc, #220]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a36      	ldr	r2, [pc, #216]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800494e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004952:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004954:	f7fc fefe 	bl	8001754 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495c:	f7fc fefa 	bl	8001754 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1dc      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800496e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x3d8>
 800497a:	e018      	b.n	80049ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800497c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a29      	ldr	r2, [pc, #164]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004986:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004988:	f7fc fee4 	bl	8001754 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004990:	f7fc fee0 	bl	8001754 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1c2      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049a2:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8086 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a2c <HAL_RCC_OscConfig+0x4a8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a2c <HAL_RCC_OscConfig+0x4a8>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c8:	f7fc fec4 	bl	8001754 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fc fec0 	bl	8001754 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	@ 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1a2      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_OscConfig+0x4a8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_OscConfig+0x480>
 80049f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4ac>
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	4a05      	ldr	r2, [pc, #20]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	4a02      	ldr	r2, [pc, #8]	@ (8004a28 <HAL_RCC_OscConfig+0x4a4>)
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a24:	e021      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e6>
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	58024800 	.word	0x58024800
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_OscConfig+0x4ce>
 8004a38:	4b83      	ldr	r3, [pc, #524]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4a82      	ldr	r2, [pc, #520]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a3e:	f043 0304 	orr.w	r3, r3, #4
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	4b80      	ldr	r3, [pc, #512]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a48:	4a7f      	ldr	r2, [pc, #508]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a50:	e00b      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e6>
 8004a52:	4b7d      	ldr	r3, [pc, #500]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	4a7c      	ldr	r2, [pc, #496]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	4a79      	ldr	r2, [pc, #484]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d015      	beq.n	8004a9e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fc fe6f 	bl	8001754 <HAL_GetTick>
 8004a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fc fe6b 	bl	8001754 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e14b      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a90:	4b6d      	ldr	r3, [pc, #436]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ee      	beq.n	8004a7a <HAL_RCC_OscConfig+0x4f6>
 8004a9c:	e014      	b.n	8004ac8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9e:	f7fc fe59 	bl	8001754 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fc fe55 	bl	8001754 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e135      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004abc:	4b62      	ldr	r3, [pc, #392]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ee      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 812a 	beq.w	8004d26 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ada:	2b18      	cmp	r3, #24
 8004adc:	f000 80ba 	beq.w	8004c54 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	f040 8095 	bne.w	8004c14 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b57      	ldr	r3, [pc, #348]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a56      	ldr	r2, [pc, #344]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fc fe2d 	bl	8001754 <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fc fe29 	bl	8001754 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e10b      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b10:	4b4d      	ldr	r3, [pc, #308]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b20:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_RCC_OscConfig+0x6c8>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b2c:	0112      	lsls	r2, r2, #4
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	4945      	ldr	r1, [pc, #276]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b44:	3b01      	subs	r3, #1
 8004b46:	025b      	lsls	r3, r3, #9
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b66:	4938      	ldr	r1, [pc, #224]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b6c:	4b36      	ldr	r3, [pc, #216]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	4a35      	ldr	r2, [pc, #212]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b78:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7c:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <HAL_RCC_OscConfig+0x6cc>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b84:	00d2      	lsls	r2, r2, #3
 8004b86:	4930      	ldr	r1, [pc, #192]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	f023 020c 	bic.w	r2, r3, #12
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	492b      	ldr	r1, [pc, #172]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	f023 0202 	bic.w	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	4927      	ldr	r1, [pc, #156]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bb0:	4b25      	ldr	r3, [pc, #148]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	4a24      	ldr	r2, [pc, #144]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbc:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	4a21      	ldr	r2, [pc, #132]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be0:	4b19      	ldr	r3, [pc, #100]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fc fdb2 	bl	8001754 <HAL_GetTick>
 8004bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fc fdae 	bl	8001754 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e090      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c06:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x670>
 8004c12:	e088      	b.n	8004d26 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0b      	ldr	r2, [pc, #44]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fc fd98 	bl	8001754 <HAL_GetTick>
 8004c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fc fd94 	bl	8001754 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e076      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c3a:	4b03      	ldr	r3, [pc, #12]	@ (8004c48 <HAL_RCC_OscConfig+0x6c4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x6a4>
 8004c46:	e06e      	b.n	8004d26 <HAL_RCC_OscConfig+0x7a2>
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	fffffc0c 	.word	0xfffffc0c
 8004c50:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c54:	4b36      	ldr	r3, [pc, #216]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c5a:	4b35      	ldr	r3, [pc, #212]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d031      	beq.n	8004ccc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f003 0203 	and.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d12a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d122      	bne.n	8004ccc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d11a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d111      	bne.n	8004ccc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e02b      	b.n	8004d28 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004cd0:	4b17      	ldr	r3, [pc, #92]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d01f      	beq.n	8004d26 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ce6:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	4a11      	ldr	r2, [pc, #68]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cf2:	f7fc fd2f 	bl	8001754 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004cf8:	bf00      	nop
 8004cfa:	f7fc fd2b 	bl	8001754 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d0f9      	beq.n	8004cfa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <HAL_RCC_OscConfig+0x7b0>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d12:	00d2      	lsls	r2, r2, #3
 8004d14:	4906      	ldr	r1, [pc, #24]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_RCC_OscConfig+0x7ac>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	@ 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	ffff0007 	.word	0xffff0007

08004d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e19c      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d910      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b87      	ldr	r3, [pc, #540]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 020f 	bic.w	r2, r3, #15
 8004d62:	4985      	ldr	r1, [pc, #532]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b83      	ldr	r3, [pc, #524]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e184      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d98:	4b78      	ldr	r3, [pc, #480]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	4975      	ldr	r1, [pc, #468]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	4b70      	ldr	r3, [pc, #448]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d908      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	496a      	ldr	r1, [pc, #424]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	4b64      	ldr	r3, [pc, #400]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004df4:	4b61      	ldr	r3, [pc, #388]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	495e      	ldr	r1, [pc, #376]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d908      	bls.n	8004e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e22:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4953      	ldr	r1, [pc, #332]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d908      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f023 020f 	bic.w	r2, r3, #15
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4947      	ldr	r1, [pc, #284]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d055      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e6e:	4b43      	ldr	r3, [pc, #268]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4940      	ldr	r1, [pc, #256]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e88:	4b3c      	ldr	r3, [pc, #240]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d121      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0f6      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ea0:	4b36      	ldr	r3, [pc, #216]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0ea      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eb8:	4b30      	ldr	r3, [pc, #192]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0de      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0d6      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f023 0207 	bic.w	r2, r3, #7
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4925      	ldr	r1, [pc, #148]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eea:	f7fc fc33 	bl	8001754 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef2:	f7fc fc2f 	bl	8001754 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0be      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f08:	4b1c      	ldr	r3, [pc, #112]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d1eb      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d208      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f023 020f 	bic.w	r2, r3, #15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	490e      	ldr	r1, [pc, #56]	@ (8004f7c <HAL_RCC_ClockConfig+0x244>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d214      	bcs.n	8004f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 020f 	bic.w	r2, r3, #15
 8004f5e:	4906      	ldr	r1, [pc, #24]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <HAL_RCC_ClockConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e086      	b.n	8005086 <HAL_RCC_ClockConfig+0x34e>
 8004f78:	52002000 	.word	0x52002000
 8004f7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d010      	beq.n	8004fae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d208      	bcs.n	8004fae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	4939      	ldr	r1, [pc, #228]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d208      	bcs.n	8004fdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fca:	4b31      	ldr	r3, [pc, #196]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	492e      	ldr	r1, [pc, #184]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d010      	beq.n	800500a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d208      	bcs.n	800500a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ff8:	4b25      	ldr	r3, [pc, #148]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4922      	ldr	r1, [pc, #136]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005006:	4313      	orrs	r3, r2
 8005008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005022:	429a      	cmp	r2, r3
 8005024:	d208      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005026:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4917      	ldr	r1, [pc, #92]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005034:	4313      	orrs	r3, r2
 8005036:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005038:	f000 f834 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	4912      	ldr	r1, [pc, #72]	@ (8005094 <HAL_RCC_ClockConfig+0x35c>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005056:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <HAL_RCC_ClockConfig+0x358>)
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	4a0d      	ldr	r2, [pc, #52]	@ (8005094 <HAL_RCC_ClockConfig+0x35c>)
 8005060:	5cd3      	ldrb	r3, [r2, r3]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
 800506c:	4a0a      	ldr	r2, [pc, #40]	@ (8005098 <HAL_RCC_ClockConfig+0x360>)
 800506e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <HAL_RCC_ClockConfig+0x364>)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005076:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <HAL_RCC_ClockConfig+0x368>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fb20 	bl	80016c0 <HAL_InitTick>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	0800c87c 	.word	0x0800c87c
 8005098:	24000004 	.word	0x24000004
 800509c:	24000000 	.word	0x24000000
 80050a0:	24000008 	.word	0x24000008

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	@ 0x24
 80050a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050aa:	4bb3      	ldr	r3, [pc, #716]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b2:	2b18      	cmp	r3, #24
 80050b4:	f200 8155 	bhi.w	8005362 <HAL_RCC_GetSysClockFreq+0x2be>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005125 	.word	0x08005125
 80050c4:	08005363 	.word	0x08005363
 80050c8:	08005363 	.word	0x08005363
 80050cc:	08005363 	.word	0x08005363
 80050d0:	08005363 	.word	0x08005363
 80050d4:	08005363 	.word	0x08005363
 80050d8:	08005363 	.word	0x08005363
 80050dc:	08005363 	.word	0x08005363
 80050e0:	0800514b 	.word	0x0800514b
 80050e4:	08005363 	.word	0x08005363
 80050e8:	08005363 	.word	0x08005363
 80050ec:	08005363 	.word	0x08005363
 80050f0:	08005363 	.word	0x08005363
 80050f4:	08005363 	.word	0x08005363
 80050f8:	08005363 	.word	0x08005363
 80050fc:	08005363 	.word	0x08005363
 8005100:	08005151 	.word	0x08005151
 8005104:	08005363 	.word	0x08005363
 8005108:	08005363 	.word	0x08005363
 800510c:	08005363 	.word	0x08005363
 8005110:	08005363 	.word	0x08005363
 8005114:	08005363 	.word	0x08005363
 8005118:	08005363 	.word	0x08005363
 800511c:	08005363 	.word	0x08005363
 8005120:	08005157 	.word	0x08005157
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005124:	4b94      	ldr	r3, [pc, #592]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005130:	4b91      	ldr	r3, [pc, #580]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	4a90      	ldr	r2, [pc, #576]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005142:	e111      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005144:	4b8d      	ldr	r3, [pc, #564]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005146:	61bb      	str	r3, [r7, #24]
      break;
 8005148:	e10e      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800514a:	4b8d      	ldr	r3, [pc, #564]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800514c:	61bb      	str	r3, [r7, #24]
      break;
 800514e:	e10b      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005150:	4b8c      	ldr	r3, [pc, #560]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005152:	61bb      	str	r3, [r7, #24]
      break;
 8005154:	e108      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005156:	4b88      	ldr	r3, [pc, #544]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005160:	4b85      	ldr	r3, [pc, #532]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800516a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800516c:	4b82      	ldr	r3, [pc, #520]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005176:	4b80      	ldr	r3, [pc, #512]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517a:	08db      	lsrs	r3, r3, #3
 800517c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80e1 	beq.w	800535c <HAL_RCC_GetSysClockFreq+0x2b8>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f000 8083 	beq.w	80052a8 <HAL_RCC_GetSysClockFreq+0x204>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f200 80a1 	bhi.w	80052ec <HAL_RCC_GetSysClockFreq+0x248>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x114>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d056      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051b6:	e099      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02d      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	4a6b      	ldr	r2, [pc, #428]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b62      	ldr	r3, [pc, #392]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800521e:	e087      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e8>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b51      	ldr	r3, [pc, #324]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a02 	vldr	s12, [r7, #8]
 8005246:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005262:	e065      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a02 	vldr	s12, [r7, #8]
 800528a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052a6:	e043      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ea:	e021      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005312:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800532e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005330:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	0a5b      	lsrs	r3, r3, #9
 8005336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533a:	3301      	adds	r3, #1
 800533c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005348:	edd7 6a07 	vldr	s13, [r7, #28]
 800534c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005354:	ee17 3a90 	vmov	r3, s15
 8005358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
      break;
 8005360:	e002      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005362:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005364:	61bb      	str	r3, [r7, #24]
      break;
 8005366:	bf00      	nop
  }

  return sysclockfreq;
 8005368:	69bb      	ldr	r3, [r7, #24]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3724      	adds	r7, #36	@ 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
 800537c:	03d09000 	.word	0x03d09000
 8005380:	003d0900 	.word	0x003d0900
 8005384:	007a1200 	.word	0x007a1200
 8005388:	46000000 	.word	0x46000000
 800538c:	4c742400 	.word	0x4c742400
 8005390:	4a742400 	.word	0x4a742400
 8005394:	4af42400 	.word	0x4af42400

08005398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800539e:	f7ff fe81 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b10      	ldr	r3, [pc, #64]	@ (80053e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490f      	ldr	r1, [pc, #60]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x54>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053bc:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	4a09      	ldr	r2, [pc, #36]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x54>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80053d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053d6:	4a07      	ldr	r2, [pc, #28]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	58024400 	.word	0x58024400
 80053ec:	0800c87c 	.word	0x0800c87c
 80053f0:	24000004 	.word	0x24000004
 80053f4:	24000000 	.word	0x24000000

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053fc:	f7ff ffcc 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58024400 	.word	0x58024400
 8005420:	0800c87c 	.word	0x0800c87c

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005428:	f7ff ffb6 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4904      	ldr	r1, [pc, #16]	@ (800544c <HAL_RCC_GetPCLK2Freq+0x28>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	58024400 	.word	0x58024400
 800544c:	0800c87c 	.word	0x0800c87c

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005454:	b0c6      	sub	sp, #280	@ 0x118
 8005456:	af00      	add	r7, sp, #0
 8005458:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005462:	2300      	movs	r3, #0
 8005464:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005474:	2500      	movs	r5, #0
 8005476:	ea54 0305 	orrs.w	r3, r4, r5
 800547a:	d049      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005486:	d02f      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800548c:	d828      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800548e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005492:	d01a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005498:	d822      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a2:	d007      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054a4:	e01c      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a6:	4bab      	ldr	r3, [pc, #684]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054aa:	4aaa      	ldr	r2, [pc, #680]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054b2:	e01a      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	3308      	adds	r3, #8
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 fa49 	bl	8007954 <RCCEx_PLL2_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054c8:	e00f      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ce:	3328      	adds	r3, #40	@ 0x28
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f002 faf0 	bl	8007ab8 <RCCEx_PLL3_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054de:	e004      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054e6:	e000      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054f2:	4b98      	ldr	r3, [pc, #608]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005500:	4a94      	ldr	r2, [pc, #592]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005502:	430b      	orrs	r3, r1
 8005504:	6513      	str	r3, [r2, #80]	@ 0x50
 8005506:	e003      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800550c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	ea58 0309 	orrs.w	r3, r8, r9
 8005524:	d047      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552c:	2b04      	cmp	r3, #4
 800552e:	d82a      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800554d 	.word	0x0800554d
 800553c:	0800555b 	.word	0x0800555b
 8005540:	08005571 	.word	0x08005571
 8005544:	0800558f 	.word	0x0800558f
 8005548:	0800558f 	.word	0x0800558f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554c:	4b81      	ldr	r3, [pc, #516]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	4a80      	ldr	r2, [pc, #512]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005558:	e01a      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555e:	3308      	adds	r3, #8
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f002 f9f6 	bl	8007954 <RCCEx_PLL2_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800556e:	e00f      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005574:	3328      	adds	r3, #40	@ 0x28
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f002 fa9d 	bl	8007ab8 <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005598:	4b6e      	ldr	r3, [pc, #440]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800559a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559c:	f023 0107 	bic.w	r1, r3, #7
 80055a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80055c2:	f04f 0b00 	mov.w	fp, #0
 80055c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80055ca:	d05b      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055d4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80055d8:	d03b      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80055da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80055de:	d834      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80055e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e4:	d037      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055ea:	d82e      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80055ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055f0:	d033      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80055f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055f6:	d828      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055fc:	d01a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80055fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005602:	d822      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005608:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560c:	d007      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800560e:	e01c      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4b50      	ldr	r3, [pc, #320]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	4a4f      	ldr	r2, [pc, #316]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800561c:	e01e      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	3308      	adds	r3, #8
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f002 f994 	bl	8007954 <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005632:	e013      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	3328      	adds	r3, #40	@ 0x28
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f002 fa3b 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005648:	e008      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005664:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005676:	430b      	orrs	r3, r1
 8005678:	6593      	str	r3, [r2, #88]	@ 0x58
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005690:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800569a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d05d      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80056b0:	d03b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80056b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80056b6:	d834      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80056b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056bc:	d037      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80056be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056c2:	d82e      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80056c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056c8:	d033      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80056ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056ce:	d828      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80056d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056d4:	d01a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80056d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056da:	d822      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80056e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e4:	d007      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80056e6:	e01c      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f4:	e01e      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fa:	3308      	adds	r3, #8
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f002 f928 	bl	8007954 <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800570a:	e013      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005710:	3328      	adds	r3, #40	@ 0x28
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f002 f9cf 	bl	8007ab8 <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005748:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800574c:	4a01      	ldr	r2, [pc, #4]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800574e:	430b      	orrs	r3, r1
 8005750:	6593      	str	r3, [r2, #88]	@ 0x58
 8005752:	e005      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800575c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800576c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005776:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800577a:	460b      	mov	r3, r1
 800577c:	4313      	orrs	r3, r2
 800577e:	d03a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005786:	2b30      	cmp	r3, #48	@ 0x30
 8005788:	d01f      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800578a:	2b30      	cmp	r3, #48	@ 0x30
 800578c:	d819      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800578e:	2b20      	cmp	r3, #32
 8005790:	d00c      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005792:	2b20      	cmp	r3, #32
 8005794:	d815      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800579a:	2b10      	cmp	r3, #16
 800579c:	d111      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579e:	4baa      	ldr	r3, [pc, #680]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	4aa9      	ldr	r2, [pc, #676]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80057aa:	e011      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	3308      	adds	r3, #8
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 f8cd 	bl	8007954 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80057c0:	e006      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80057ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057d8:	4b9b      	ldr	r3, [pc, #620]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80057e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e6:	4a98      	ldr	r2, [pc, #608]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057e8:	430b      	orrs	r3, r1
 80057ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800580c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d051      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005820:	d035      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005826:	d82e      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005828:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800582c:	d031      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800582e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005832:	d828      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005838:	d01a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583e:	d822      	bhi.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005848:	d007      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800584a:	e01c      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	4a7d      	ldr	r2, [pc, #500]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005858:	e01c      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585e:	3308      	adds	r3, #8
 8005860:	2100      	movs	r1, #0
 8005862:	4618      	mov	r0, r3
 8005864:	f002 f876 	bl	8007954 <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800586e:	e011      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	3328      	adds	r3, #40	@ 0x28
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f002 f91d 	bl	8007ab8 <RCCEx_PLL3_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005884:	e006      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800588c:	e002      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800589c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800589e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058aa:	4a67      	ldr	r2, [pc, #412]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d053      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058e4:	d033      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80058e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058ea:	d82c      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80058ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f0:	d02f      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80058f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f6:	d826      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80058f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058fc:	d02b      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80058fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005902:	d820      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005908:	d012      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800590a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590e:	d81a      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005918:	d115      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	3308      	adds	r3, #8
 8005920:	2101      	movs	r1, #1
 8005922:	4618      	mov	r0, r3
 8005924:	f002 f816 	bl	8007954 <RCCEx_PLL2_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800592e:	e015      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	3328      	adds	r3, #40	@ 0x28
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f002 f8bd 	bl	8007ab8 <RCCEx_PLL3_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005944:	e00a      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800594c:	e006      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800594e:	bf00      	nop
 8005950:	e004      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800595a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005964:	4b38      	ldr	r3, [pc, #224]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005968:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005972:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6513      	str	r3, [r2, #80]	@ 0x50
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800597e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800598e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005998:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d058      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059ae:	d033      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80059b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059b4:	d82c      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ba:	d02f      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c0:	d826      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059c6:	d02b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80059c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059cc:	d820      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d2:	d012      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80059d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d8:	d81a      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d022      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059e2:	d115      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e8:	3308      	adds	r3, #8
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 ffb1 	bl	8007954 <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059f8:	e015      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fe:	3328      	adds	r3, #40	@ 0x28
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f002 f858 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a16:	e006      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a18:	bf00      	nop
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10e      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a2e:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a3e:	4a02      	ldr	r2, [pc, #8]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005a46:	bf00      	nop
 8005a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d037      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a7e:	d00e      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a84:	d816      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a8e:	d111      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a90:	4bc4      	ldr	r3, [pc, #784]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a94:	4ac3      	ldr	r2, [pc, #780]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a9c:	e00f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 ff54 	bl	8007954 <RCCEx_PLL2_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ac6:	4bb7      	ldr	r3, [pc, #732]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	4ab3      	ldr	r2, [pc, #716]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005afa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d039      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d81c      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b25 	.word	0x08005b25
 8005b1c:	08005b33 	.word	0x08005b33
 8005b20:	08005b51 	.word	0x08005b51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b24:	4b9f      	ldr	r3, [pc, #636]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	4a9e      	ldr	r2, [pc, #632]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b30:	e00f      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b36:	3308      	adds	r3, #8
 8005b38:	2102      	movs	r1, #2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 ff0a 	bl	8007954 <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b46:	e004      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b4e:	e000      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b5a:	4b92      	ldr	r3, [pc, #584]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	f023 0103 	bic.w	r1, r3, #3
 8005b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b68:	4a8e      	ldr	r2, [pc, #568]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b6e:	e003      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f000 8099 	beq.w	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b9a:	4b83      	ldr	r3, [pc, #524]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a82      	ldr	r2, [pc, #520]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ba6:	f7fb fdd5 	bl	8001754 <HAL_GetTick>
 8005baa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bae:	e00b      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb0:	f7fb fdd0 	bl	8001754 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b64      	cmp	r3, #100	@ 0x64
 8005bbe:	d903      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bc6:	e005      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bc8:	4b77      	ldr	r3, [pc, #476]	@ (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ed      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d173      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005bdc:	4b71      	ldr	r3, [pc, #452]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005be8:	4053      	eors	r3, r2
 8005bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d015      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bfe:	4b69      	ldr	r3, [pc, #420]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c02:	4a68      	ldr	r2, [pc, #416]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c0a:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0e:	4a65      	ldr	r2, [pc, #404]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c16:	4a63      	ldr	r2, [pc, #396]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c2a:	d118      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb fd92 	bl	8001754 <HAL_GetTick>
 8005c30:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c34:	e00d      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fb fd8d 	bl	8001754 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005c40:	1ad2      	subs	r2, r2, r3
 8005c42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005c50:	e005      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c52:	4b54      	ldr	r3, [pc, #336]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0eb      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d129      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c76:	d10e      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005c78:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c88:	091a      	lsrs	r2, r3, #4
 8005c8a:	4b48      	ldr	r3, [pc, #288]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	4a45      	ldr	r2, [pc, #276]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6113      	str	r3, [r2, #16]
 8005c94:	e005      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005c96:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ca0:	6113      	str	r3, [r2, #16]
 8005ca2:	4b40      	ldr	r3, [pc, #256]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	e008      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005cc2:	e003      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f002 0301 	and.w	r3, r2, #1
 8005cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ce2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f000 808f 	beq.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cf4:	2b28      	cmp	r3, #40	@ 0x28
 8005cf6:	d871      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005de5 	.word	0x08005de5
 8005d04:	08005ddd 	.word	0x08005ddd
 8005d08:	08005ddd 	.word	0x08005ddd
 8005d0c:	08005ddd 	.word	0x08005ddd
 8005d10:	08005ddd 	.word	0x08005ddd
 8005d14:	08005ddd 	.word	0x08005ddd
 8005d18:	08005ddd 	.word	0x08005ddd
 8005d1c:	08005ddd 	.word	0x08005ddd
 8005d20:	08005db1 	.word	0x08005db1
 8005d24:	08005ddd 	.word	0x08005ddd
 8005d28:	08005ddd 	.word	0x08005ddd
 8005d2c:	08005ddd 	.word	0x08005ddd
 8005d30:	08005ddd 	.word	0x08005ddd
 8005d34:	08005ddd 	.word	0x08005ddd
 8005d38:	08005ddd 	.word	0x08005ddd
 8005d3c:	08005ddd 	.word	0x08005ddd
 8005d40:	08005dc7 	.word	0x08005dc7
 8005d44:	08005ddd 	.word	0x08005ddd
 8005d48:	08005ddd 	.word	0x08005ddd
 8005d4c:	08005ddd 	.word	0x08005ddd
 8005d50:	08005ddd 	.word	0x08005ddd
 8005d54:	08005ddd 	.word	0x08005ddd
 8005d58:	08005ddd 	.word	0x08005ddd
 8005d5c:	08005ddd 	.word	0x08005ddd
 8005d60:	08005de5 	.word	0x08005de5
 8005d64:	08005ddd 	.word	0x08005ddd
 8005d68:	08005ddd 	.word	0x08005ddd
 8005d6c:	08005ddd 	.word	0x08005ddd
 8005d70:	08005ddd 	.word	0x08005ddd
 8005d74:	08005ddd 	.word	0x08005ddd
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005ddd 	.word	0x08005ddd
 8005d80:	08005de5 	.word	0x08005de5
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005ddd 	.word	0x08005ddd
 8005d8c:	08005ddd 	.word	0x08005ddd
 8005d90:	08005ddd 	.word	0x08005ddd
 8005d94:	08005ddd 	.word	0x08005ddd
 8005d98:	08005ddd 	.word	0x08005ddd
 8005d9c:	08005ddd 	.word	0x08005ddd
 8005da0:	08005de5 	.word	0x08005de5
 8005da4:	58024400 	.word	0x58024400
 8005da8:	58024800 	.word	0x58024800
 8005dac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db4:	3308      	adds	r3, #8
 8005db6:	2101      	movs	r1, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fdcb 	bl	8007954 <RCCEx_PLL2_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e00f      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dca:	3328      	adds	r3, #40	@ 0x28
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fe72 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005dda:	e004      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005de2:	e000      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005dee:	4bbf      	ldr	r3, [pc, #764]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dfc:	4abb      	ldr	r2, [pc, #748]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e02:	e003      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f002 0302 	and.w	r3, r2, #2
 8005e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d041      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d824      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e89 	.word	0x08005e89
 8005e40:	08005e55 	.word	0x08005e55
 8005e44:	08005e6b 	.word	0x08005e6b
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e89 	.word	0x08005e89
 8005e50:	08005e89 	.word	0x08005e89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fd79 	bl	8007954 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 fe20 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e92:	4b96      	ldr	r3, [pc, #600]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	f023 0107 	bic.w	r1, r3, #7
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea0:	4a92      	ldr	r2, [pc, #584]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea6:	e003      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 0304 	and.w	r3, r2, #4
 8005ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ec6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d044      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed8:	2b05      	cmp	r3, #5
 8005eda:	d825      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005edc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005efd 	.word	0x08005efd
 8005eec:	08005f13 	.word	0x08005f13
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	3308      	adds	r3, #8
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fd25 	bl	8007954 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f10:	e00f      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	3328      	adds	r3, #40	@ 0x28
 8005f18:	2101      	movs	r1, #1
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fdcc 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f26:	e004      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f2e:	e000      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3e:	f023 0107 	bic.w	r1, r3, #7
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4a:	4a68      	ldr	r2, [pc, #416]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f50:	e003      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f002 0320 	and.w	r3, r2, #32
 8005f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d055      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f86:	d033      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f8c:	d82c      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d02f      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f98:	d826      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f9e:	d02b      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005fa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fa4:	d820      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005faa:	d012      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fb0:	d81a      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d022      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fba:	d115      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fcc5 	bl	8007954 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e015      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2102      	movs	r1, #2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fd6c 	bl	8007ab8 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fee:	e006      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006006:	4b39      	ldr	r3, [pc, #228]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006016:	4a35      	ldr	r2, [pc, #212]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006018:	430b      	orrs	r3, r1
 800601a:	6553      	str	r3, [r2, #84]	@ 0x54
 800601c:	e003      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006022:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006032:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800603c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d058      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800604e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006052:	d033      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006054:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006058:	d82c      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d02f      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006064:	d826      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800606a:	d02b      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800606c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006070:	d820      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006076:	d012      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800607c:	d81a      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d022      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006086:	d115      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608c:	3308      	adds	r3, #8
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fc5f 	bl	8007954 <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800609c:	e015      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a2:	3328      	adds	r3, #40	@ 0x28
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fd06 	bl	8007ab8 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060b2:	e00a      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060ba:	e006      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80060bc:	bf00      	nop
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10e      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060d2:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060e2:	4a02      	ldr	r2, [pc, #8]	@ (80060ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e8:	e006      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800610e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d055      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006120:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006124:	d033      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006126:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800612a:	d82c      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800612c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006130:	d02f      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006136:	d826      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006138:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800613c:	d02b      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800613e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006142:	d820      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006148:	d012      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800614a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800614e:	d81a      	bhi.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d022      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006158:	d115      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	3308      	adds	r3, #8
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f001 fbf6 	bl	8007954 <RCCEx_PLL2_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800616e:	e015      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	3328      	adds	r3, #40	@ 0x28
 8006176:	2102      	movs	r1, #2
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fc9d 	bl	8007ab8 <RCCEx_PLL3_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006184:	e00a      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800618e:	bf00      	nop
 8006190:	e004      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006192:	bf00      	nop
 8006194:	e002      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061a4:	4ba0      	ldr	r3, [pc, #640]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061b4:	4a9c      	ldr	r2, [pc, #624]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061b6:	430b      	orrs	r3, r1
 80061b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ba:	e003      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 0308 	and.w	r3, r2, #8
 80061d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061de:	460b      	mov	r3, r1
 80061e0:	4313      	orrs	r3, r2
 80061e2:	d01e      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f0:	d10c      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f6:	3328      	adds	r3, #40	@ 0x28
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fc5c 	bl	8007ab8 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800620c:	4b86      	ldr	r3, [pc, #536]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800620e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006210:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800621c:	4a82      	ldr	r2, [pc, #520]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f002 0310 	and.w	r3, r2, #16
 800622e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006238:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d01e      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006254:	3328      	adds	r3, #40	@ 0x28
 8006256:	2102      	movs	r1, #2
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fc2d 	bl	8007ab8 <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800626a:	4b6f      	ldr	r3, [pc, #444]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800627a:	4a6b      	ldr	r2, [pc, #428]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800628c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800628e:	2300      	movs	r3, #0
 8006290:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006292:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d03e      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a8:	d022      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80062aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ae:	d81b      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b8:	d00b      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80062ba:	e015      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c0:	3308      	adds	r3, #8
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fb45 	bl	8007954 <RCCEx_PLL2_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062d0:	e00f      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d6:	3328      	adds	r3, #40	@ 0x28
 80062d8:	2102      	movs	r1, #2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fbec 	bl	8007ab8 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062e6:	e004      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80062f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800630a:	4a47      	ldr	r2, [pc, #284]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800630c:	430b      	orrs	r3, r1
 800630e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006316:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006326:	673b      	str	r3, [r7, #112]	@ 0x70
 8006328:	2300      	movs	r3, #0
 800632a:	677b      	str	r3, [r7, #116]	@ 0x74
 800632c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d03b      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800633e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006342:	d01f      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006344:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006348:	d818      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800634e:	d003      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006354:	d007      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006356:	e011      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006358:	4b33      	ldr	r3, [pc, #204]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	4a32      	ldr	r2, [pc, #200]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800635e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006364:	e00f      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	3328      	adds	r3, #40	@ 0x28
 800636c:	2101      	movs	r1, #1
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fba2 	bl	8007ab8 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800637a:	e004      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800638e:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800639e:	4a22      	ldr	r2, [pc, #136]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063bc:	2300      	movs	r3, #0
 80063be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d034      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d007      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80063da:	e011      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4a11      	ldr	r2, [pc, #68]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063e8:	e00e      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	3308      	adds	r3, #8
 80063f0:	2102      	movs	r1, #2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 faae 	bl	8007954 <RCCEx_PLL2_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006410:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006414:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641e:	4a02      	ldr	r2, [pc, #8]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006420:	430b      	orrs	r3, r1
 8006422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006424:	e006      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006440:	663b      	str	r3, [r7, #96]	@ 0x60
 8006442:	2300      	movs	r3, #0
 8006444:	667b      	str	r3, [r7, #100]	@ 0x64
 8006446:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d00c      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	3328      	adds	r3, #40	@ 0x28
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fb2d 	bl	8007ab8 <RCCEx_PLL3_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006476:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006478:	2300      	movs	r3, #0
 800647a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800647c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d036      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800648c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006490:	d018      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006496:	d811      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d014      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800649e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064a2:	d80b      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d011      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80064a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ac:	d106      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ae:	4bb7      	ldr	r3, [pc, #732]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	4ab6      	ldr	r2, [pc, #728]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064ba:	e008      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064d6:	4bad      	ldr	r3, [pc, #692]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e4:	4aa9      	ldr	r2, [pc, #676]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006500:	653b      	str	r3, [r7, #80]	@ 0x50
 8006502:	2300      	movs	r3, #0
 8006504:	657b      	str	r3, [r7, #84]	@ 0x54
 8006506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006510:	4b9e      	ldr	r3, [pc, #632]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006514:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651e:	4a9b      	ldr	r2, [pc, #620]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006532:	2300      	movs	r3, #0
 8006534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006536:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006540:	4b92      	ldr	r3, [pc, #584]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006544:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800654e:	4a8f      	ldr	r2, [pc, #572]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006550:	430b      	orrs	r3, r1
 8006552:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006560:	643b      	str	r3, [r7, #64]	@ 0x40
 8006562:	2300      	movs	r3, #0
 8006564:	647b      	str	r3, [r7, #68]	@ 0x44
 8006566:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006570:	4b86      	ldr	r3, [pc, #536]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4a85      	ldr	r2, [pc, #532]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006576:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800657a:	6113      	str	r3, [r2, #16]
 800657c:	4b83      	ldr	r3, [pc, #524]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800657e:	6919      	ldr	r1, [r3, #16]
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006588:	4a80      	ldr	r2, [pc, #512]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800658a:	430b      	orrs	r3, r1
 800658c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065aa:	4b78      	ldr	r3, [pc, #480]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	4a74      	ldr	r2, [pc, #464]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ba:	430b      	orrs	r3, r1
 80065bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80065cc:	2300      	movs	r3, #0
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065da:	4b6c      	ldr	r3, [pc, #432]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	4a68      	ldr	r2, [pc, #416]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	2100      	movs	r1, #0
 80065fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006602:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	d011      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006610:	3308      	adds	r3, #8
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f001 f99d 	bl	8007954 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800662c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	2100      	movs	r1, #0
 800663a:	6239      	str	r1, [r7, #32]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
 8006642:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006646:	460b      	mov	r3, r1
 8006648:	4313      	orrs	r3, r2
 800664a:	d011      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006650:	3308      	adds	r3, #8
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f97d 	bl	8007954 <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800666c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	2100      	movs	r1, #0
 800667a:	61b9      	str	r1, [r7, #24]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d011      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	3308      	adds	r3, #8
 8006692:	2102      	movs	r1, #2
 8006694:	4618      	mov	r0, r3
 8006696:	f001 f95d 	bl	8007954 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80066a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	2100      	movs	r1, #0
 80066ba:	6139      	str	r1, [r7, #16]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d011      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	3328      	adds	r3, #40	@ 0x28
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f9ef 	bl	8007ab8 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80066e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	2100      	movs	r1, #0
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d011      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	3328      	adds	r3, #40	@ 0x28
 8006712:	2101      	movs	r1, #1
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f9cf 	bl	8007ab8 <RCCEx_PLL3_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800672c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	2100      	movs	r1, #0
 800673a:	6039      	str	r1, [r7, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d011      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	3328      	adds	r3, #40	@ 0x28
 8006752:	2102      	movs	r1, #2
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f9af 	bl	8007ab8 <RCCEx_PLL3_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006770:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
}
 800677e:	4618      	mov	r0, r3
 8006780:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006784:	46bd      	mov	sp, r7
 8006786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678a:	bf00      	nop
 800678c:	58024400 	.word	0x58024400

08006790 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b090      	sub	sp, #64	@ 0x40
 8006794:	af00      	add	r7, sp, #0
 8006796:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800679a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80067a2:	430b      	orrs	r3, r1
 80067a4:	f040 8094 	bne.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80067a8:	4b9b      	ldr	r3, [pc, #620]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	f200 8087 	bhi.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80067ba:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d5 	.word	0x080067d5
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	08006825 	.word	0x08006825
 80067cc:	080068c1 	.word	0x080068c1
 80067d0:	0800684d 	.word	0x0800684d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067d4:	4b90      	ldr	r3, [pc, #576]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067e0:	d108      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 ff62 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f0:	f000 bc93 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f8:	f000 bc8f 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067fc:	4b86      	ldr	r3, [pc, #536]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006808:	d108      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680a:	f107 0318 	add.w	r3, r7, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fca6 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006818:	f000 bc7f 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	f000 bc7b 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006824:	4b7c      	ldr	r3, [pc, #496]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006830:	d108      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fde6 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006840:	f000 bc6b 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	f000 bc67 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800684c:	4b72      	ldr	r3, [pc, #456]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006856:	4b70      	ldr	r3, [pc, #448]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d10c      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006868:	4b6b      	ldr	r3, [pc, #428]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	4a6a      	ldr	r2, [pc, #424]	@ (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687a:	e01f      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800687c:	4b66      	ldr	r3, [pc, #408]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006888:	d106      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800688a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006890:	d102      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006892:	4b63      	ldr	r3, [pc, #396]	@ (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006898:	4b5f      	ldr	r3, [pc, #380]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a4:	d106      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80068a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ac:	d102      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068b8:	f000 bc2f 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80068bc:	f000 bc2d 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068c0:	4b59      	ldr	r3, [pc, #356]	@ (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c4:	f000 bc29 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068cc:	f000 bc25 	b.w	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80068d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80068d8:	430b      	orrs	r3, r1
 80068da:	f040 80a7 	bne.w	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80068de:	4b4e      	ldr	r3, [pc, #312]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80068e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068ee:	d054      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068f6:	f200 808b 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006900:	f000 8083 	beq.w	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800690a:	f200 8081 	bhi.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006914:	d02f      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691c:	d878      	bhi.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800692a:	d012      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800692c:	e070      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800692e:	4b3a      	ldr	r3, [pc, #232]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800693a:	d107      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800693c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006940:	4618      	mov	r0, r3
 8006942:	f000 feb5 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800694a:	e3e6      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006950:	e3e3      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006952:	4b31      	ldr	r3, [pc, #196]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800695a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800695e:	d107      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006960:	f107 0318 	add.w	r3, r7, #24
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fbfb 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696e:	e3d4      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006974:	e3d1      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006976:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800697e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006982:	d107      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fd3d 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006992:	e3c2      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e3bf      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d10c      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80069b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069b6:	4b18      	ldr	r3, [pc, #96]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	08db      	lsrs	r3, r3, #3
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	4a16      	ldr	r2, [pc, #88]	@ (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80069c2:	fa22 f303 	lsr.w	r3, r2, r3
 80069c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c8:	e01e      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ca:	4b13      	ldr	r3, [pc, #76]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d6:	d106      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069de:	d102      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e4:	e010      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f2:	d106      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fa:	d102      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069fc:	4b09      	ldr	r3, [pc, #36]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a00:	e002      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a06:	e388      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a08:	e387      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a0a:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0e:	e384      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a14:	e381      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	03d09000 	.word	0x03d09000
 8006a20:	003d0900 	.word	0x003d0900
 8006a24:	007a1200 	.word	0x007a1200
 8006a28:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a30:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a34:	430b      	orrs	r3, r1
 8006a36:	f040 809c 	bne.w	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a4a:	d054      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a52:	f200 808b 	bhi.w	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a5c:	f000 8083 	beq.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a66:	f200 8081 	bhi.w	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a70:	d02f      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a78:	d878      	bhi.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a86:	d012      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006a88:	e070      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a8a:	4b8a      	ldr	r3, [pc, #552]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fe07 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa6:	e338      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aac:	e335      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aae:	4b81      	ldr	r3, [pc, #516]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aba:	d107      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006abc:	f107 0318 	add.w	r3, r7, #24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fb4d 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aca:	e326      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad0:	e323      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ad2:	4b78      	ldr	r3, [pc, #480]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ade:	d107      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fc8f 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aee:	e314      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af4:	e311      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af6:	4b6f      	ldr	r3, [pc, #444]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b00:	4b6c      	ldr	r3, [pc, #432]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d10c      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b12:	4b68      	ldr	r3, [pc, #416]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	4a66      	ldr	r2, [pc, #408]	@ (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b24:	e01e      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b26:	4b63      	ldr	r3, [pc, #396]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b32:	d106      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3a:	d102      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b40:	e010      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b42:	4b5c      	ldr	r3, [pc, #368]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b56:	d102      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b58:	4b59      	ldr	r3, [pc, #356]	@ (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5c:	e002      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b62:	e2da      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b64:	e2d9      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b66:	4b57      	ldr	r3, [pc, #348]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6a:	e2d6      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b70:	e2d3      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b76:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	f040 80a7 	bne.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b80:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b84:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b90:	d055      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b98:	f200 8096 	bhi.w	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba2:	f000 8084 	beq.w	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bac:	f200 808c 	bhi.w	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb6:	d030      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bbe:	f200 8083 	bhi.w	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bce:	d012      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006bd0:	e07a      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bd2:	4b38      	ldr	r3, [pc, #224]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fd63 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bee:	e294      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf4:	e291      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c02:	d107      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c04:	f107 0318 	add.w	r3, r7, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 faa9 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c12:	e282      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c18:	e27f      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c1a:	4b26      	ldr	r3, [pc, #152]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c26:	d107      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fbeb 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c36:	e270      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3c:	e26d      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c48:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10c      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c5a:	4b16      	ldr	r3, [pc, #88]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	4a14      	ldr	r2, [pc, #80]	@ (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006c66:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c6c:	e01e      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c6e:	4b11      	ldr	r3, [pc, #68]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c82:	d102      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c84:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c88:	e010      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c96:	d106      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c9e:	d102      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ca0:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006caa:	e236      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cac:	e235      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb2:	e232      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	03d09000 	.word	0x03d09000
 8006cbc:	003d0900 	.word	0x003d0900
 8006cc0:	007a1200 	.word	0x007a1200
 8006cc4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e225      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	f040 8085 	bne.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cec:	d06b      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf4:	d874      	bhi.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cfc:	d056      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d04:	d86c      	bhi.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0c:	d03b      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d14:	d864      	bhi.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1c:	d021      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d24:	d85c      	bhi.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d32:	d004      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006d34:	e054      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d36:	f7fe fb5f 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8006d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d3c:	e1ed      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d3e:	4b84      	ldr	r3, [pc, #528]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4c:	f107 0318 	add.w	r3, r7, #24
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fa05 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d5a:	e1de      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d60:	e1db      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d62:	4b7b      	ldr	r3, [pc, #492]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fb47 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7e:	e1cc      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d84:	e1c9      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d86:	4b72      	ldr	r3, [pc, #456]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d109      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d92:	4b6f      	ldr	r3, [pc, #444]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da4:	e1b9      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006daa:	e1b6      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006dac:	4b68      	ldr	r3, [pc, #416]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db8:	d102      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006dba:	4b67      	ldr	r3, [pc, #412]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e1ac      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc4:	e1a9      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dc6:	4b62      	ldr	r3, [pc, #392]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dd2:	d102      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006dd4:	4b61      	ldr	r3, [pc, #388]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd8:	e19f      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dde:	e19c      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de4:	e199      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dea:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006dee:	430b      	orrs	r3, r1
 8006df0:	d173      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006df2:	4b57      	ldr	r3, [pc, #348]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006dfa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e02:	d02f      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e0a:	d863      	bhi.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e18:	d012      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006e1a:	e05b      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e28:	d107      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e2a:	f107 0318 	add.w	r3, r7, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f996 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e38:	e16f      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3e:	e16c      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e40:	4b43      	ldr	r3, [pc, #268]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fad8 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5c:	e15d      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e62:	e15a      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e64:	4b3a      	ldr	r3, [pc, #232]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e6e:	4b38      	ldr	r3, [pc, #224]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e80:	4b33      	ldr	r3, [pc, #204]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	4a32      	ldr	r2, [pc, #200]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e92:	e01e      	b.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e94:	4b2e      	ldr	r3, [pc, #184]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea0:	d106      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ea8:	d102      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eae:	e010      	b.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eb0:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ec6:	4b25      	ldr	r3, [pc, #148]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eca:	e002      	b.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ed0:	e123      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ed2:	e122      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed8:	e11f      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ede:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	d13c      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efc:	d012      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006efe:	e023      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f00:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fbcc 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f1c:	e0fd      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	e0fa      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f30:	d107      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f32:	f107 0318 	add.w	r3, r7, #24
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f912 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f40:	e0eb      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f46:	e0e8      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4c:	e0e5      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f4e:	bf00      	nop
 8006f50:	58024400 	.word	0x58024400
 8006f54:	03d09000 	.word	0x03d09000
 8006f58:	003d0900 	.word	0x003d0900
 8006f5c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	f040 8085 	bne.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006f76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f7e:	d06b      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f86:	d874      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8e:	d056      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f96:	d86c      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f9e:	d03b      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa6:	d864      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fae:	d021      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb6:	d85c      	bhi.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc4:	d004      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006fc6:	e054      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006fc8:	f000 f8b4 	bl	8007134 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fce:	e0a4      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd0:	4b54      	ldr	r3, [pc, #336]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fde:	f107 0318 	add.w	r3, r7, #24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f8bc 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fec:	e095      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff2:	e092      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007000:	d107      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007002:	f107 030c 	add.w	r3, r7, #12
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f9fe 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007010:	e083      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007016:	e080      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007018:	4b42      	ldr	r3, [pc, #264]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d109      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007024:	4b3f      	ldr	r3, [pc, #252]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	08db      	lsrs	r3, r3, #3
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007036:	e070      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e06d      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800703e:	4b39      	ldr	r3, [pc, #228]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704a:	d102      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800704c:	4b37      	ldr	r3, [pc, #220]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007050:	e063      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e060      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007058:	4b32      	ldr	r3, [pc, #200]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007066:	4b32      	ldr	r3, [pc, #200]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800706a:	e056      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007070:	e053      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007076:	e050      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007080:	430b      	orrs	r3, r1
 8007082:	d148      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007084:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800708c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007094:	d02a      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709c:	d838      	bhi.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070aa:	d00d      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80070ac:	e030      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ba:	d102      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80070bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c0:	e02b      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c6:	e028      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070c8:	4b16      	ldr	r3, [pc, #88]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d4:	d107      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fae8 	bl	80076b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e4:	e019      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ea:	e016      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070fa:	f107 0318 	add.w	r3, r7, #24
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f82e 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007108:	e007      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710e:	e004      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007114:	e001      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800711a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800711c:	4618      	mov	r0, r3
 800711e:	3740      	adds	r7, #64	@ 0x40
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	58024400 	.word	0x58024400
 8007128:	03d09000 	.word	0x03d09000
 800712c:	003d0900 	.word	0x003d0900
 8007130:	007a1200 	.word	0x007a1200

08007134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007138:	f7fe f92e 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 800713c:	4602      	mov	r2, r0
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4904      	ldr	r1, [pc, #16]	@ (800715c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}
 8007158:	58024400 	.word	0x58024400
 800715c:	0800c87c 	.word	0x0800c87c

08007160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007160:	b480      	push	{r7}
 8007162:	b089      	sub	sp, #36	@ 0x24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007168:	4ba1      	ldr	r3, [pc, #644]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007172:	4b9f      	ldr	r3, [pc, #636]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	0b1b      	lsrs	r3, r3, #12
 8007178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800717c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800717e:	4b9c      	ldr	r3, [pc, #624]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800718a:	4b99      	ldr	r3, [pc, #612]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8111 	beq.w	80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f000 8083 	beq.w	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f200 80a1 	bhi.w	8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d056      	beq.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ca:	e099      	b.n	8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071cc:	4b88      	ldr	r3, [pc, #544]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02d      	beq.n	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071d8:	4b85      	ldr	r3, [pc, #532]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	08db      	lsrs	r3, r3, #3
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	4a84      	ldr	r2, [pc, #528]	@ (80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
 80071e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b7b      	ldr	r3, [pc, #492]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007232:	e087      	b.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b6a      	ldr	r3, [pc, #424]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	e065      	b.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b59      	ldr	r3, [pc, #356]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a03 	vldr	s12, [r7, #12]
 800729e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ba:	e043      	b.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ce:	4b48      	ldr	r3, [pc, #288]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072de:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fe:	e021      	b.n	8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800730e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007312:	4b37      	ldr	r3, [pc, #220]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007322:	ed97 6a03 	vldr	s12, [r7, #12]
 8007326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800732a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007344:	4b2a      	ldr	r3, [pc, #168]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007348:	0a5b      	lsrs	r3, r3, #9
 800734a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800735a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736a:	ee17 2a90 	vmov	r2, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007372:	4b1f      	ldr	r3, [pc, #124]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007398:	ee17 2a90 	vmov	r2, s15
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073a0:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a4:	0e1b      	lsrs	r3, r3, #24
 80073a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80073be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c6:	ee17 2a90 	vmov	r2, s15
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073ce:	e008      	b.n	80073e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	609a      	str	r2, [r3, #8]
}
 80073e2:	bf00      	nop
 80073e4:	3724      	adds	r7, #36	@ 0x24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	03d09000 	.word	0x03d09000
 80073f8:	46000000 	.word	0x46000000
 80073fc:	4c742400 	.word	0x4c742400
 8007400:	4a742400 	.word	0x4a742400
 8007404:	4af42400 	.word	0x4af42400

08007408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007408:	b480      	push	{r7}
 800740a:	b089      	sub	sp, #36	@ 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007410:	4ba1      	ldr	r3, [pc, #644]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800741a:	4b9f      	ldr	r3, [pc, #636]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741e:	0d1b      	lsrs	r3, r3, #20
 8007420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007426:	4b9c      	ldr	r3, [pc, #624]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007432:	4b99      	ldr	r3, [pc, #612]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007436:	08db      	lsrs	r3, r3, #3
 8007438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8111 	beq.w	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b02      	cmp	r3, #2
 800745a:	f000 8083 	beq.w	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	f200 80a1 	bhi.w	80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d056      	beq.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007472:	e099      	b.n	80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007474:	4b88      	ldr	r3, [pc, #544]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02d      	beq.n	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007480:	4b85      	ldr	r3, [pc, #532]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	4a84      	ldr	r2, [pc, #528]	@ (800769c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
 8007490:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074da:	e087      	b.n	80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800751e:	e065      	b.n	80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	4b59      	ldr	r3, [pc, #356]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a03 	vldr	s12, [r7, #12]
 8007546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007562:	e043      	b.n	80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007576:	4b48      	ldr	r3, [pc, #288]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007586:	ed97 6a03 	vldr	s12, [r7, #12]
 800758a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800758e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800759a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075a6:	e021      	b.n	80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ba:	4b37      	ldr	r3, [pc, #220]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	0a5b      	lsrs	r3, r3, #9
 80075f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007606:	edd7 6a07 	vldr	s13, [r7, #28]
 800760a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007612:	ee17 2a90 	vmov	r2, s15
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800761a:	4b1f      	ldr	r3, [pc, #124]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007634:	edd7 6a07 	vldr	s13, [r7, #28]
 8007638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007640:	ee17 2a90 	vmov	r2, s15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007648:	4b13      	ldr	r3, [pc, #76]	@ (8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764c:	0e1b      	lsrs	r3, r3, #24
 800764e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800765e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007662:	edd7 6a07 	vldr	s13, [r7, #28]
 8007666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766e:	ee17 2a90 	vmov	r2, s15
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007676:	e008      	b.n	800768a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	609a      	str	r2, [r3, #8]
}
 800768a:	bf00      	nop
 800768c:	3724      	adds	r7, #36	@ 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
 800769c:	03d09000 	.word	0x03d09000
 80076a0:	46000000 	.word	0x46000000
 80076a4:	4c742400 	.word	0x4c742400
 80076a8:	4a742400 	.word	0x4a742400
 80076ac:	4af42400 	.word	0x4af42400

080076b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	@ 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076b8:	4ba0      	ldr	r3, [pc, #640]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80076c2:	4b9e      	ldr	r3, [pc, #632]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076ce:	4b9b      	ldr	r3, [pc, #620]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076d8:	4b98      	ldr	r3, [pc, #608]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076dc:	08db      	lsrs	r3, r3, #3
 80076de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8111 	beq.w	800791e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	f000 8083 	beq.w	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b02      	cmp	r3, #2
 8007708:	f200 80a1 	bhi.w	800784e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d056      	beq.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007718:	e099      	b.n	800784e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771a:	4b88      	ldr	r3, [pc, #544]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d02d      	beq.n	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007726:	4b85      	ldr	r3, [pc, #532]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	4a83      	ldr	r2, [pc, #524]	@ (8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007750:	4b7a      	ldr	r3, [pc, #488]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007760:	ed97 6a03 	vldr	s12, [r7, #12]
 8007764:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007780:	e087      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007794:	4b69      	ldr	r3, [pc, #420]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c4:	e065      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800794c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80077d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d8:	4b58      	ldr	r3, [pc, #352]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007808:	e043      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781c:	4b47      	ldr	r3, [pc, #284]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800781e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007824:	ee07 3a90 	vmov	s15, r3
 8007828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007830:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007848:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800784c:	e021      	b.n	8007892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007858:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800785c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007860:	4b36      	ldr	r3, [pc, #216]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007870:	ed97 6a03 	vldr	s12, [r7, #12]
 8007874:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007890:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007892:	4b2a      	ldr	r3, [pc, #168]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007896:	0a5b      	lsrs	r3, r3, #9
 8007898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80078b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b8:	ee17 2a90 	vmov	r2, s15
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80078c0:	4b1e      	ldr	r3, [pc, #120]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	0c1b      	lsrs	r3, r3, #16
 80078c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078da:	edd7 6a07 	vldr	s13, [r7, #28]
 80078de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e6:	ee17 2a90 	vmov	r2, s15
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078ee:	4b13      	ldr	r3, [pc, #76]	@ (800793c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f2:	0e1b      	lsrs	r3, r3, #24
 80078f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007908:	edd7 6a07 	vldr	s13, [r7, #28]
 800790c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007914:	ee17 2a90 	vmov	r2, s15
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800791c:	e008      	b.n	8007930 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
}
 8007930:	bf00      	nop
 8007932:	3724      	adds	r7, #36	@ 0x24
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	58024400 	.word	0x58024400
 8007940:	03d09000 	.word	0x03d09000
 8007944:	46000000 	.word	0x46000000
 8007948:	4c742400 	.word	0x4c742400
 800794c:	4a742400 	.word	0x4a742400
 8007950:	4af42400 	.word	0x4af42400

08007954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007962:	4b53      	ldr	r3, [pc, #332]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b03      	cmp	r3, #3
 800796c:	d101      	bne.n	8007972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e099      	b.n	8007aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007972:	4b4f      	ldr	r3, [pc, #316]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a4e      	ldr	r2, [pc, #312]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007978:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800797c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797e:	f7f9 fee9 	bl	8001754 <HAL_GetTick>
 8007982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007984:	e008      	b.n	8007998 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007986:	f7f9 fee5 	bl	8001754 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e086      	b.n	8007aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007998:	4b45      	ldr	r3, [pc, #276]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1f0      	bne.n	8007986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079a4:	4b42      	ldr	r3, [pc, #264]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	031b      	lsls	r3, r3, #12
 80079b2:	493f      	ldr	r1, [pc, #252]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	3b01      	subs	r3, #1
 80079be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	025b      	lsls	r3, r3, #9
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	041b      	lsls	r3, r3, #16
 80079d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	061b      	lsls	r3, r3, #24
 80079e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079e8:	4931      	ldr	r1, [pc, #196]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ee:	4b30      	ldr	r3, [pc, #192]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	492d      	ldr	r1, [pc, #180]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a00:	4b2b      	ldr	r3, [pc, #172]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	f023 0220 	bic.w	r2, r3, #32
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	4928      	ldr	r1, [pc, #160]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a12:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	f023 0310 	bic.w	r3, r3, #16
 8007a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a1e:	4b24      	ldr	r3, [pc, #144]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a22:	4b24      	ldr	r3, [pc, #144]	@ (8007ab4 <RCCEx_PLL2_Config+0x160>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	69d2      	ldr	r2, [r2, #28]
 8007a2a:	00d2      	lsls	r2, r2, #3
 8007a2c:	4920      	ldr	r1, [pc, #128]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a32:	4b1f      	ldr	r3, [pc, #124]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a36:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a38:	f043 0310 	orr.w	r3, r3, #16
 8007a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d106      	bne.n	8007a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a44:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	4a19      	ldr	r2, [pc, #100]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a50:	e00f      	b.n	8007a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d106      	bne.n	8007a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a58:	4b15      	ldr	r3, [pc, #84]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4a14      	ldr	r2, [pc, #80]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a64:	e005      	b.n	8007a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a66:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6a:	4a11      	ldr	r2, [pc, #68]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a72:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a0e      	ldr	r2, [pc, #56]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7e:	f7f9 fe69 	bl	8001754 <HAL_GetTick>
 8007a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a84:	e008      	b.n	8007a98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a86:	f7f9 fe65 	bl	8001754 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e006      	b.n	8007aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	58024400 	.word	0x58024400
 8007ab4:	ffff0007 	.word	0xffff0007

08007ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ac6:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d101      	bne.n	8007ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e099      	b.n	8007c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a4e      	ldr	r2, [pc, #312]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae2:	f7f9 fe37 	bl	8001754 <HAL_GetTick>
 8007ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ae8:	e008      	b.n	8007afc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aea:	f7f9 fe33 	bl	8001754 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e086      	b.n	8007c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007afc:	4b45      	ldr	r3, [pc, #276]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f0      	bne.n	8007aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b08:	4b42      	ldr	r3, [pc, #264]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	051b      	lsls	r3, r3, #20
 8007b16:	493f      	ldr	r1, [pc, #252]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	025b      	lsls	r3, r3, #9
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	061b      	lsls	r3, r3, #24
 8007b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b4c:	4931      	ldr	r1, [pc, #196]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b52:	4b30      	ldr	r3, [pc, #192]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	492d      	ldr	r1, [pc, #180]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b64:	4b2b      	ldr	r3, [pc, #172]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	4928      	ldr	r1, [pc, #160]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b76:	4b27      	ldr	r3, [pc, #156]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	4a26      	ldr	r2, [pc, #152]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b82:	4b24      	ldr	r3, [pc, #144]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b86:	4b24      	ldr	r3, [pc, #144]	@ (8007c18 <RCCEx_PLL3_Config+0x160>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	69d2      	ldr	r2, [r2, #28]
 8007b8e:	00d2      	lsls	r2, r2, #3
 8007b90:	4920      	ldr	r1, [pc, #128]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b96:	4b1f      	ldr	r3, [pc, #124]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bac:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bb4:	e00f      	b.n	8007bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d106      	bne.n	8007bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bbc:	4b15      	ldr	r3, [pc, #84]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	4a14      	ldr	r2, [pc, #80]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bc8:	e005      	b.n	8007bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bca:	4b12      	ldr	r3, [pc, #72]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	4a11      	ldr	r2, [pc, #68]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a0e      	ldr	r2, [pc, #56]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be2:	f7f9 fdb7 	bl	8001754 <HAL_GetTick>
 8007be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007be8:	e008      	b.n	8007bfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bea:	f7f9 fdb3 	bl	8001754 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e006      	b.n	8007c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bfc:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0f0      	beq.n	8007bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	58024400 	.word	0x58024400
 8007c18:	ffff0007 	.word	0xffff0007

08007c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e049      	b.n	8007cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7f9 fac2 	bl	80011cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f000 fa66 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <HAL_TIM_PWM_Start+0x24>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	e03c      	b.n	8007d6a <HAL_TIM_PWM_Start+0x9e>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d109      	bne.n	8007d0a <HAL_TIM_PWM_Start+0x3e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	bf14      	ite	ne
 8007d02:	2301      	movne	r3, #1
 8007d04:	2300      	moveq	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	e02f      	b.n	8007d6a <HAL_TIM_PWM_Start+0x9e>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d109      	bne.n	8007d24 <HAL_TIM_PWM_Start+0x58>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	e022      	b.n	8007d6a <HAL_TIM_PWM_Start+0x9e>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b0c      	cmp	r3, #12
 8007d28:	d109      	bne.n	8007d3e <HAL_TIM_PWM_Start+0x72>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	bf14      	ite	ne
 8007d36:	2301      	movne	r3, #1
 8007d38:	2300      	moveq	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	e015      	b.n	8007d6a <HAL_TIM_PWM_Start+0x9e>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d109      	bne.n	8007d58 <HAL_TIM_PWM_Start+0x8c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	bf14      	ite	ne
 8007d50:	2301      	movne	r3, #1
 8007d52:	2300      	moveq	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	e008      	b.n	8007d6a <HAL_TIM_PWM_Start+0x9e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e0ab      	b.n	8007eca <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_PWM_Start+0xb6>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d80:	e023      	b.n	8007dca <HAL_TIM_PWM_Start+0xfe>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_PWM_Start+0xc6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d90:	e01b      	b.n	8007dca <HAL_TIM_PWM_Start+0xfe>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_PWM_Start+0xd6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da0:	e013      	b.n	8007dca <HAL_TIM_PWM_Start+0xfe>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Start+0xe6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007db0:	e00b      	b.n	8007dca <HAL_TIM_PWM_Start+0xfe>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0xf6>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dc0:	e003      	b.n	8007dca <HAL_TIM_PWM_Start+0xfe>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd32 	bl	800883c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8007ed4 <HAL_TIM_PWM_Start+0x208>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x13e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed8 <HAL_TIM_PWM_Start+0x20c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x13e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a3a      	ldr	r2, [pc, #232]	@ (8007edc <HAL_TIM_PWM_Start+0x210>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x13e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a39      	ldr	r2, [pc, #228]	@ (8007ee0 <HAL_TIM_PWM_Start+0x214>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIM_PWM_Start+0x13e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a37      	ldr	r2, [pc, #220]	@ (8007ee4 <HAL_TIM_PWM_Start+0x218>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <HAL_TIM_PWM_Start+0x142>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <HAL_TIM_PWM_Start+0x144>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed4 <HAL_TIM_PWM_Start+0x208>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d02c      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d027      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee8 <HAL_TIM_PWM_Start+0x21c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d022      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a29      	ldr	r2, [pc, #164]	@ (8007eec <HAL_TIM_PWM_Start+0x220>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d01d      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a27      	ldr	r2, [pc, #156]	@ (8007ef0 <HAL_TIM_PWM_Start+0x224>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed8 <HAL_TIM_PWM_Start+0x20c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a23      	ldr	r2, [pc, #140]	@ (8007ef4 <HAL_TIM_PWM_Start+0x228>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8007edc <HAL_TIM_PWM_Start+0x210>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef8 <HAL_TIM_PWM_Start+0x22c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_TIM_PWM_Start+0x1bc>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1e      	ldr	r2, [pc, #120]	@ (8007efc <HAL_TIM_PWM_Start+0x230>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d115      	bne.n	8007eb4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f00 <HAL_TIM_PWM_Start+0x234>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d015      	beq.n	8007ec6 <HAL_TIM_PWM_Start+0x1fa>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea0:	d011      	beq.n	8007ec6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb2:	e008      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e000      	b.n	8007ec8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40010000 	.word	0x40010000
 8007ed8:	40010400 	.word	0x40010400
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	40014400 	.word	0x40014400
 8007ee4:	40014800 	.word	0x40014800
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40001800 	.word	0x40001800
 8007ef8:	4000e000 	.word	0x4000e000
 8007efc:	4000e400 	.word	0x4000e400
 8007f00:	00010007 	.word	0x00010007

08007f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0ff      	b.n	8008122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b14      	cmp	r3, #20
 8007f2e:	f200 80f0 	bhi.w	8008112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08008113 	.word	0x08008113
 8007f40:	08008113 	.word	0x08008113
 8007f44:	08008113 	.word	0x08008113
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08008113 	.word	0x08008113
 8007f50:	08008113 	.word	0x08008113
 8007f54:	08008113 	.word	0x08008113
 8007f58:	0800800f 	.word	0x0800800f
 8007f5c:	08008113 	.word	0x08008113
 8007f60:	08008113 	.word	0x08008113
 8007f64:	08008113 	.word	0x08008113
 8007f68:	0800804f 	.word	0x0800804f
 8007f6c:	08008113 	.word	0x08008113
 8007f70:	08008113 	.word	0x08008113
 8007f74:	08008113 	.word	0x08008113
 8007f78:	08008091 	.word	0x08008091
 8007f7c:	08008113 	.word	0x08008113
 8007f80:	08008113 	.word	0x08008113
 8007f84:	08008113 	.word	0x08008113
 8007f88:	080080d1 	.word	0x080080d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f97c 	bl	8008290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0204 	bic.w	r2, r2, #4
 8007fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6999      	ldr	r1, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	619a      	str	r2, [r3, #24]
      break;
 8007fca:	e0a5      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f9ec 	bl	80083b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6999      	ldr	r1, [r3, #24]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	619a      	str	r2, [r3, #24]
      break;
 800800c:	e084      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fa55 	bl	80084c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0208 	orr.w	r2, r2, #8
 8008028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0204 	bic.w	r2, r2, #4
 8008038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69d9      	ldr	r1, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	61da      	str	r2, [r3, #28]
      break;
 800804c:	e064      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fabd 	bl	80085d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69da      	ldr	r2, [r3, #28]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69d9      	ldr	r1, [r3, #28]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	021a      	lsls	r2, r3, #8
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	61da      	str	r2, [r3, #28]
      break;
 800808e:	e043      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fb06 	bl	80086a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0208 	orr.w	r2, r2, #8
 80080aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80080ce:	e023      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fb4a 	bl	8008770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	021a      	lsls	r2, r3, #8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008110:	e002      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
      break;
 8008116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a4a      	ldr	r2, [pc, #296]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a47      	ldr	r2, [pc, #284]	@ (800826c <TIM_Base_SetConfig+0x140>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a46      	ldr	r2, [pc, #280]	@ (8008270 <TIM_Base_SetConfig+0x144>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a45      	ldr	r2, [pc, #276]	@ (8008274 <TIM_Base_SetConfig+0x148>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a44      	ldr	r2, [pc, #272]	@ (8008278 <TIM_Base_SetConfig+0x14c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a39      	ldr	r2, [pc, #228]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d027      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818c:	d023      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a36      	ldr	r2, [pc, #216]	@ (800826c <TIM_Base_SetConfig+0x140>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01f      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a35      	ldr	r2, [pc, #212]	@ (8008270 <TIM_Base_SetConfig+0x144>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01b      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a34      	ldr	r2, [pc, #208]	@ (8008274 <TIM_Base_SetConfig+0x148>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d017      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a33      	ldr	r2, [pc, #204]	@ (8008278 <TIM_Base_SetConfig+0x14c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a32      	ldr	r2, [pc, #200]	@ (800827c <TIM_Base_SetConfig+0x150>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a31      	ldr	r2, [pc, #196]	@ (8008280 <TIM_Base_SetConfig+0x154>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a30      	ldr	r2, [pc, #192]	@ (8008284 <TIM_Base_SetConfig+0x158>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2f      	ldr	r2, [pc, #188]	@ (8008288 <TIM_Base_SetConfig+0x15c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_Base_SetConfig+0xaa>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a2e      	ldr	r2, [pc, #184]	@ (800828c <TIM_Base_SetConfig+0x160>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d108      	bne.n	80081e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a16      	ldr	r2, [pc, #88]	@ (8008268 <TIM_Base_SetConfig+0x13c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00f      	beq.n	8008234 <TIM_Base_SetConfig+0x108>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a18      	ldr	r2, [pc, #96]	@ (8008278 <TIM_Base_SetConfig+0x14c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00b      	beq.n	8008234 <TIM_Base_SetConfig+0x108>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a17      	ldr	r2, [pc, #92]	@ (800827c <TIM_Base_SetConfig+0x150>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <TIM_Base_SetConfig+0x108>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a16      	ldr	r2, [pc, #88]	@ (8008280 <TIM_Base_SetConfig+0x154>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_Base_SetConfig+0x108>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a15      	ldr	r2, [pc, #84]	@ (8008284 <TIM_Base_SetConfig+0x158>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d103      	bne.n	800823c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f023 0201 	bic.w	r2, r3, #1
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	611a      	str	r2, [r3, #16]
  }
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40010400 	.word	0x40010400
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800
 8008288:	4000e000 	.word	0x4000e000
 800828c:	4000e400 	.word	0x4000e400

08008290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f023 0201 	bic.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4b37      	ldr	r3, [pc, #220]	@ (8008398 <TIM_OC1_SetConfig+0x108>)
 80082bc:	4013      	ands	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f023 0302 	bic.w	r3, r3, #2
 80082d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a2d      	ldr	r2, [pc, #180]	@ (800839c <TIM_OC1_SetConfig+0x10c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00f      	beq.n	800830c <TIM_OC1_SetConfig+0x7c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a2c      	ldr	r2, [pc, #176]	@ (80083a0 <TIM_OC1_SetConfig+0x110>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00b      	beq.n	800830c <TIM_OC1_SetConfig+0x7c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a2b      	ldr	r2, [pc, #172]	@ (80083a4 <TIM_OC1_SetConfig+0x114>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_OC1_SetConfig+0x7c>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a2a      	ldr	r2, [pc, #168]	@ (80083a8 <TIM_OC1_SetConfig+0x118>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC1_SetConfig+0x7c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a29      	ldr	r2, [pc, #164]	@ (80083ac <TIM_OC1_SetConfig+0x11c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10c      	bne.n	8008326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0308 	bic.w	r3, r3, #8
 8008312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 0304 	bic.w	r3, r3, #4
 8008324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a1c      	ldr	r2, [pc, #112]	@ (800839c <TIM_OC1_SetConfig+0x10c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00f      	beq.n	800834e <TIM_OC1_SetConfig+0xbe>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a1b      	ldr	r2, [pc, #108]	@ (80083a0 <TIM_OC1_SetConfig+0x110>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d00b      	beq.n	800834e <TIM_OC1_SetConfig+0xbe>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1a      	ldr	r2, [pc, #104]	@ (80083a4 <TIM_OC1_SetConfig+0x114>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d007      	beq.n	800834e <TIM_OC1_SetConfig+0xbe>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a19      	ldr	r2, [pc, #100]	@ (80083a8 <TIM_OC1_SetConfig+0x118>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d003      	beq.n	800834e <TIM_OC1_SetConfig+0xbe>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a18      	ldr	r2, [pc, #96]	@ (80083ac <TIM_OC1_SetConfig+0x11c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d111      	bne.n	8008372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800835c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	621a      	str	r2, [r3, #32]
}
 800838c:	bf00      	nop
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	fffeff8f 	.word	0xfffeff8f
 800839c:	40010000 	.word	0x40010000
 80083a0:	40010400 	.word	0x40010400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	f023 0210 	bic.w	r2, r3, #16
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4b34      	ldr	r3, [pc, #208]	@ (80084ac <TIM_OC2_SetConfig+0xfc>)
 80083dc:	4013      	ands	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 0320 	bic.w	r3, r3, #32
 80083fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a29      	ldr	r2, [pc, #164]	@ (80084b0 <TIM_OC2_SetConfig+0x100>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d003      	beq.n	8008418 <TIM_OC2_SetConfig+0x68>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a28      	ldr	r2, [pc, #160]	@ (80084b4 <TIM_OC2_SetConfig+0x104>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d10d      	bne.n	8008434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800841e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	011b      	lsls	r3, r3, #4
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4313      	orrs	r3, r2
 800842a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a1e      	ldr	r2, [pc, #120]	@ (80084b0 <TIM_OC2_SetConfig+0x100>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00f      	beq.n	800845c <TIM_OC2_SetConfig+0xac>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a1d      	ldr	r2, [pc, #116]	@ (80084b4 <TIM_OC2_SetConfig+0x104>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00b      	beq.n	800845c <TIM_OC2_SetConfig+0xac>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a1c      	ldr	r2, [pc, #112]	@ (80084b8 <TIM_OC2_SetConfig+0x108>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <TIM_OC2_SetConfig+0xac>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a1b      	ldr	r2, [pc, #108]	@ (80084bc <TIM_OC2_SetConfig+0x10c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_OC2_SetConfig+0xac>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a1a      	ldr	r2, [pc, #104]	@ (80084c0 <TIM_OC2_SetConfig+0x110>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d113      	bne.n	8008484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800846a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	feff8fff 	.word	0xfeff8fff
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40010400 	.word	0x40010400
 80084b8:	40014000 	.word	0x40014000
 80084bc:	40014400 	.word	0x40014400
 80084c0:	40014800 	.word	0x40014800

080084c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4b33      	ldr	r3, [pc, #204]	@ (80085bc <TIM_OC3_SetConfig+0xf8>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800850c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a28      	ldr	r2, [pc, #160]	@ (80085c0 <TIM_OC3_SetConfig+0xfc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d003      	beq.n	800852a <TIM_OC3_SetConfig+0x66>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a27      	ldr	r2, [pc, #156]	@ (80085c4 <TIM_OC3_SetConfig+0x100>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d10d      	bne.n	8008546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1d      	ldr	r2, [pc, #116]	@ (80085c0 <TIM_OC3_SetConfig+0xfc>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00f      	beq.n	800856e <TIM_OC3_SetConfig+0xaa>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a1c      	ldr	r2, [pc, #112]	@ (80085c4 <TIM_OC3_SetConfig+0x100>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00b      	beq.n	800856e <TIM_OC3_SetConfig+0xaa>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a1b      	ldr	r2, [pc, #108]	@ (80085c8 <TIM_OC3_SetConfig+0x104>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d007      	beq.n	800856e <TIM_OC3_SetConfig+0xaa>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a1a      	ldr	r2, [pc, #104]	@ (80085cc <TIM_OC3_SetConfig+0x108>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_OC3_SetConfig+0xaa>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a19      	ldr	r2, [pc, #100]	@ (80085d0 <TIM_OC3_SetConfig+0x10c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d113      	bne.n	8008596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800857c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	fffeff8f 	.word	0xfffeff8f
 80085c0:	40010000 	.word	0x40010000
 80085c4:	40010400 	.word	0x40010400
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40014400 	.word	0x40014400
 80085d0:	40014800 	.word	0x40014800

080085d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4b24      	ldr	r3, [pc, #144]	@ (8008690 <TIM_OC4_SetConfig+0xbc>)
 8008600:	4013      	ands	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800860a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800861e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	031b      	lsls	r3, r3, #12
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a19      	ldr	r2, [pc, #100]	@ (8008694 <TIM_OC4_SetConfig+0xc0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00f      	beq.n	8008654 <TIM_OC4_SetConfig+0x80>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a18      	ldr	r2, [pc, #96]	@ (8008698 <TIM_OC4_SetConfig+0xc4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00b      	beq.n	8008654 <TIM_OC4_SetConfig+0x80>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a17      	ldr	r2, [pc, #92]	@ (800869c <TIM_OC4_SetConfig+0xc8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d007      	beq.n	8008654 <TIM_OC4_SetConfig+0x80>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a16      	ldr	r2, [pc, #88]	@ (80086a0 <TIM_OC4_SetConfig+0xcc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC4_SetConfig+0x80>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a15      	ldr	r2, [pc, #84]	@ (80086a4 <TIM_OC4_SetConfig+0xd0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d109      	bne.n	8008668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800865a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	019b      	lsls	r3, r3, #6
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	621a      	str	r2, [r3, #32]
}
 8008682:	bf00      	nop
 8008684:	371c      	adds	r7, #28
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	feff8fff 	.word	0xfeff8fff
 8008694:	40010000 	.word	0x40010000
 8008698:	40010400 	.word	0x40010400
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	40014800 	.word	0x40014800

080086a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4b21      	ldr	r3, [pc, #132]	@ (8008758 <TIM_OC5_SetConfig+0xb0>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80086e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	041b      	lsls	r3, r3, #16
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a18      	ldr	r2, [pc, #96]	@ (800875c <TIM_OC5_SetConfig+0xb4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00f      	beq.n	800871e <TIM_OC5_SetConfig+0x76>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a17      	ldr	r2, [pc, #92]	@ (8008760 <TIM_OC5_SetConfig+0xb8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_OC5_SetConfig+0x76>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a16      	ldr	r2, [pc, #88]	@ (8008764 <TIM_OC5_SetConfig+0xbc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_OC5_SetConfig+0x76>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a15      	ldr	r2, [pc, #84]	@ (8008768 <TIM_OC5_SetConfig+0xc0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_OC5_SetConfig+0x76>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a14      	ldr	r2, [pc, #80]	@ (800876c <TIM_OC5_SetConfig+0xc4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d109      	bne.n	8008732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	fffeff8f 	.word	0xfffeff8f
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4b22      	ldr	r3, [pc, #136]	@ (8008824 <TIM_OC6_SetConfig+0xb4>)
 800879c:	4013      	ands	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a19      	ldr	r2, [pc, #100]	@ (8008828 <TIM_OC6_SetConfig+0xb8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00f      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a18      	ldr	r2, [pc, #96]	@ (800882c <TIM_OC6_SetConfig+0xbc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00b      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <TIM_OC6_SetConfig+0xc0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d007      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a16      	ldr	r2, [pc, #88]	@ (8008834 <TIM_OC6_SetConfig+0xc4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d003      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <TIM_OC6_SetConfig+0xc8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d109      	bne.n	80087fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	feff8fff 	.word	0xfeff8fff
 8008828:	40010000 	.word	0x40010000
 800882c:	40010400 	.word	0x40010400
 8008830:	40014000 	.word	0x40014000
 8008834:	40014400 	.word	0x40014400
 8008838:	40014800 	.word	0x40014800

0800883c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	2201      	movs	r2, #1
 8008850:	fa02 f303 	lsl.w	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1a      	ldr	r2, [r3, #32]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	43db      	mvns	r3, r3
 800885e:	401a      	ands	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	fa01 f303 	lsl.w	r3, r1, r3
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800889c:	2302      	movs	r3, #2
 800889e:	e077      	b.n	8008990 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a35      	ldr	r2, [pc, #212]	@ (800899c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a34      	ldr	r2, [pc, #208]	@ (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d108      	bne.n	80088e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a25      	ldr	r2, [pc, #148]	@ (800899c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d02c      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008912:	d027      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d022      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a21      	ldr	r2, [pc, #132]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d01d      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d018      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a1a      	ldr	r2, [pc, #104]	@ (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d013      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a1b      	ldr	r2, [pc, #108]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00e      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1a      	ldr	r2, [pc, #104]	@ (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d009      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a18      	ldr	r2, [pc, #96]	@ (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d004      	beq.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a17      	ldr	r2, [pc, #92]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d10c      	bne.n	800897e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4313      	orrs	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40000400 	.word	0x40000400
 80089a8:	40000800 	.word	0x40000800
 80089ac:	40000c00 	.word	0x40000c00
 80089b0:	40001800 	.word	0x40001800
 80089b4:	40014000 	.word	0x40014000
 80089b8:	4000e000 	.word	0x4000e000
 80089bc:	4000e400 	.word	0x4000e400

080089c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e042      	b.n	8008a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7f8 fc49 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	@ 0x24
 80089ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 ff22 	bl	8009854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f8b3 	bl	8008b7c <UART_SetConfig>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e01b      	b.n	8008a58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 ffa1 	bl	8009998 <UART_CheckIdleState>
 8008a56:	4603      	mov	r3, r0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	@ 0x28
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d17b      	bne.n	8008b72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <HAL_UART_Transmit+0x26>
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e074      	b.n	8008b74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2221      	movs	r2, #33	@ 0x21
 8008a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9a:	f7f8 fe5b 	bl	8001754 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab8:	d108      	bne.n	8008acc <HAL_UART_Transmit+0x6c>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e003      	b.n	8008ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ad4:	e030      	b.n	8008b38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f001 f803 	bl	8009aec <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e03d      	b.n	8008b74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	3302      	adds	r3, #2
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	e007      	b.n	8008b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	3301      	adds	r3, #1
 8008b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1c8      	bne.n	8008ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2140      	movs	r1, #64	@ 0x40
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 ffcc 	bl	8009aec <UART_WaitOnFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d005      	beq.n	8008b66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e006      	b.n	8008b74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b80:	b092      	sub	sp, #72	@ 0x48
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4bbe      	ldr	r3, [pc, #760]	@ (8008ea4 <UART_SetConfig+0x328>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4ab3      	ldr	r2, [pc, #716]	@ (8008ea8 <UART_SetConfig+0x32c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d004      	beq.n	8008be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008be4:	4313      	orrs	r3, r2
 8008be6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	4baf      	ldr	r3, [pc, #700]	@ (8008eac <UART_SetConfig+0x330>)
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	6812      	ldr	r2, [r2, #0]
 8008bf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c02:	f023 010f 	bic.w	r1, r3, #15
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4aa6      	ldr	r2, [pc, #664]	@ (8008eb0 <UART_SetConfig+0x334>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d177      	bne.n	8008d0c <UART_SetConfig+0x190>
 8008c1c:	4ba5      	ldr	r3, [pc, #660]	@ (8008eb4 <UART_SetConfig+0x338>)
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c24:	2b28      	cmp	r3, #40	@ 0x28
 8008c26:	d86d      	bhi.n	8008d04 <UART_SetConfig+0x188>
 8008c28:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <UART_SetConfig+0xb4>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008cd5 	.word	0x08008cd5
 8008c34:	08008d05 	.word	0x08008d05
 8008c38:	08008d05 	.word	0x08008d05
 8008c3c:	08008d05 	.word	0x08008d05
 8008c40:	08008d05 	.word	0x08008d05
 8008c44:	08008d05 	.word	0x08008d05
 8008c48:	08008d05 	.word	0x08008d05
 8008c4c:	08008d05 	.word	0x08008d05
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008d05 	.word	0x08008d05
 8008c58:	08008d05 	.word	0x08008d05
 8008c5c:	08008d05 	.word	0x08008d05
 8008c60:	08008d05 	.word	0x08008d05
 8008c64:	08008d05 	.word	0x08008d05
 8008c68:	08008d05 	.word	0x08008d05
 8008c6c:	08008d05 	.word	0x08008d05
 8008c70:	08008ce5 	.word	0x08008ce5
 8008c74:	08008d05 	.word	0x08008d05
 8008c78:	08008d05 	.word	0x08008d05
 8008c7c:	08008d05 	.word	0x08008d05
 8008c80:	08008d05 	.word	0x08008d05
 8008c84:	08008d05 	.word	0x08008d05
 8008c88:	08008d05 	.word	0x08008d05
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008ced 	.word	0x08008ced
 8008c94:	08008d05 	.word	0x08008d05
 8008c98:	08008d05 	.word	0x08008d05
 8008c9c:	08008d05 	.word	0x08008d05
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008d05 	.word	0x08008d05
 8008ca8:	08008d05 	.word	0x08008d05
 8008cac:	08008d05 	.word	0x08008d05
 8008cb0:	08008cf5 	.word	0x08008cf5
 8008cb4:	08008d05 	.word	0x08008d05
 8008cb8:	08008d05 	.word	0x08008d05
 8008cbc:	08008d05 	.word	0x08008d05
 8008cc0:	08008d05 	.word	0x08008d05
 8008cc4:	08008d05 	.word	0x08008d05
 8008cc8:	08008d05 	.word	0x08008d05
 8008ccc:	08008d05 	.word	0x08008d05
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e326      	b.n	800932a <UART_SetConfig+0x7ae>
 8008cdc:	2304      	movs	r3, #4
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e322      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e31e      	b.n	800932a <UART_SetConfig+0x7ae>
 8008cec:	2310      	movs	r3, #16
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e31a      	b.n	800932a <UART_SetConfig+0x7ae>
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e316      	b.n	800932a <UART_SetConfig+0x7ae>
 8008cfc:	2340      	movs	r3, #64	@ 0x40
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e312      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d04:	2380      	movs	r3, #128	@ 0x80
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e30e      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a69      	ldr	r2, [pc, #420]	@ (8008eb8 <UART_SetConfig+0x33c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d130      	bne.n	8008d78 <UART_SetConfig+0x1fc>
 8008d16:	4b67      	ldr	r3, [pc, #412]	@ (8008eb4 <UART_SetConfig+0x338>)
 8008d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	2b05      	cmp	r3, #5
 8008d20:	d826      	bhi.n	8008d70 <UART_SetConfig+0x1f4>
 8008d22:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <UART_SetConfig+0x1ac>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d41 	.word	0x08008d41
 8008d2c:	08008d49 	.word	0x08008d49
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d61 	.word	0x08008d61
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e2f0      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d48:	2304      	movs	r3, #4
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e2ec      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d50:	2308      	movs	r3, #8
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e2e8      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e2e4      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d60:	2320      	movs	r3, #32
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e2e0      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d68:	2340      	movs	r3, #64	@ 0x40
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e2dc      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d70:	2380      	movs	r3, #128	@ 0x80
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e2d8      	b.n	800932a <UART_SetConfig+0x7ae>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8008ebc <UART_SetConfig+0x340>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d130      	bne.n	8008de4 <UART_SetConfig+0x268>
 8008d82:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb4 <UART_SetConfig+0x338>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d826      	bhi.n	8008ddc <UART_SetConfig+0x260>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <UART_SetConfig+0x218>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008dad 	.word	0x08008dad
 8008d98:	08008db5 	.word	0x08008db5
 8008d9c:	08008dbd 	.word	0x08008dbd
 8008da0:	08008dc5 	.word	0x08008dc5
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db2:	e2ba      	b.n	800932a <UART_SetConfig+0x7ae>
 8008db4:	2304      	movs	r3, #4
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e2b6      	b.n	800932a <UART_SetConfig+0x7ae>
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e2b2      	b.n	800932a <UART_SetConfig+0x7ae>
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e2ae      	b.n	800932a <UART_SetConfig+0x7ae>
 8008dcc:	2320      	movs	r3, #32
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e2aa      	b.n	800932a <UART_SetConfig+0x7ae>
 8008dd4:	2340      	movs	r3, #64	@ 0x40
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e2a6      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ddc:	2380      	movs	r3, #128	@ 0x80
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e2a2      	b.n	800932a <UART_SetConfig+0x7ae>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a35      	ldr	r2, [pc, #212]	@ (8008ec0 <UART_SetConfig+0x344>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d130      	bne.n	8008e50 <UART_SetConfig+0x2d4>
 8008dee:	4b31      	ldr	r3, [pc, #196]	@ (8008eb4 <UART_SetConfig+0x338>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b05      	cmp	r3, #5
 8008df8:	d826      	bhi.n	8008e48 <UART_SetConfig+0x2cc>
 8008dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <UART_SetConfig+0x284>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e19 	.word	0x08008e19
 8008e04:	08008e21 	.word	0x08008e21
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e39 	.word	0x08008e39
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1e:	e284      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e20:	2304      	movs	r3, #4
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e26:	e280      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e28:	2308      	movs	r3, #8
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	e27c      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e30:	2310      	movs	r3, #16
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e278      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e38:	2320      	movs	r3, #32
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e274      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e40:	2340      	movs	r3, #64	@ 0x40
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e270      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e48:	2380      	movs	r3, #128	@ 0x80
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e26c      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec4 <UART_SetConfig+0x348>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d142      	bne.n	8008ee0 <UART_SetConfig+0x364>
 8008e5a:	4b16      	ldr	r3, [pc, #88]	@ (8008eb4 <UART_SetConfig+0x338>)
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5e:	f003 0307 	and.w	r3, r3, #7
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d838      	bhi.n	8008ed8 <UART_SetConfig+0x35c>
 8008e66:	a201      	add	r2, pc, #4	@ (adr r2, 8008e6c <UART_SetConfig+0x2f0>)
 8008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008e95 	.word	0x08008e95
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008ec9 	.word	0x08008ec9
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	2300      	movs	r3, #0
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e24e      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e24a      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e94:	2308      	movs	r3, #8
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e246      	b.n	800932a <UART_SetConfig+0x7ae>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e242      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ea4:	cfff69f3 	.word	0xcfff69f3
 8008ea8:	58000c00 	.word	0x58000c00
 8008eac:	11fff4ff 	.word	0x11fff4ff
 8008eb0:	40011000 	.word	0x40011000
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	40004400 	.word	0x40004400
 8008ebc:	40004800 	.word	0x40004800
 8008ec0:	40004c00 	.word	0x40004c00
 8008ec4:	40005000 	.word	0x40005000
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e22c      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e228      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e224      	b.n	800932a <UART_SetConfig+0x7ae>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4ab1      	ldr	r2, [pc, #708]	@ (80091ac <UART_SetConfig+0x630>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d176      	bne.n	8008fd8 <UART_SetConfig+0x45c>
 8008eea:	4bb1      	ldr	r3, [pc, #708]	@ (80091b0 <UART_SetConfig+0x634>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ef2:	2b28      	cmp	r3, #40	@ 0x28
 8008ef4:	d86c      	bhi.n	8008fd0 <UART_SetConfig+0x454>
 8008ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <UART_SetConfig+0x380>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008fa1 	.word	0x08008fa1
 8008f00:	08008fd1 	.word	0x08008fd1
 8008f04:	08008fd1 	.word	0x08008fd1
 8008f08:	08008fd1 	.word	0x08008fd1
 8008f0c:	08008fd1 	.word	0x08008fd1
 8008f10:	08008fd1 	.word	0x08008fd1
 8008f14:	08008fd1 	.word	0x08008fd1
 8008f18:	08008fd1 	.word	0x08008fd1
 8008f1c:	08008fa9 	.word	0x08008fa9
 8008f20:	08008fd1 	.word	0x08008fd1
 8008f24:	08008fd1 	.word	0x08008fd1
 8008f28:	08008fd1 	.word	0x08008fd1
 8008f2c:	08008fd1 	.word	0x08008fd1
 8008f30:	08008fd1 	.word	0x08008fd1
 8008f34:	08008fd1 	.word	0x08008fd1
 8008f38:	08008fd1 	.word	0x08008fd1
 8008f3c:	08008fb1 	.word	0x08008fb1
 8008f40:	08008fd1 	.word	0x08008fd1
 8008f44:	08008fd1 	.word	0x08008fd1
 8008f48:	08008fd1 	.word	0x08008fd1
 8008f4c:	08008fd1 	.word	0x08008fd1
 8008f50:	08008fd1 	.word	0x08008fd1
 8008f54:	08008fd1 	.word	0x08008fd1
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08008fb9 	.word	0x08008fb9
 8008f60:	08008fd1 	.word	0x08008fd1
 8008f64:	08008fd1 	.word	0x08008fd1
 8008f68:	08008fd1 	.word	0x08008fd1
 8008f6c:	08008fd1 	.word	0x08008fd1
 8008f70:	08008fd1 	.word	0x08008fd1
 8008f74:	08008fd1 	.word	0x08008fd1
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fc1 	.word	0x08008fc1
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fd1 	.word	0x08008fd1
 8008f88:	08008fd1 	.word	0x08008fd1
 8008f8c:	08008fd1 	.word	0x08008fd1
 8008f90:	08008fd1 	.word	0x08008fd1
 8008f94:	08008fd1 	.word	0x08008fd1
 8008f98:	08008fd1 	.word	0x08008fd1
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e1c0      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fa8:	2304      	movs	r3, #4
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e1bc      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e1b8      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e1b4      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e1b0      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fc8:	2340      	movs	r3, #64	@ 0x40
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e1ac      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fd0:	2380      	movs	r3, #128	@ 0x80
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e1a8      	b.n	800932a <UART_SetConfig+0x7ae>
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a75      	ldr	r2, [pc, #468]	@ (80091b4 <UART_SetConfig+0x638>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d130      	bne.n	8009044 <UART_SetConfig+0x4c8>
 8008fe2:	4b73      	ldr	r3, [pc, #460]	@ (80091b0 <UART_SetConfig+0x634>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	d826      	bhi.n	800903c <UART_SetConfig+0x4c0>
 8008fee:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff4 <UART_SetConfig+0x478>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	0800901d 	.word	0x0800901d
 8009000:	08009025 	.word	0x08009025
 8009004:	0800902d 	.word	0x0800902d
 8009008:	08009035 	.word	0x08009035
 800900c:	2300      	movs	r3, #0
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009012:	e18a      	b.n	800932a <UART_SetConfig+0x7ae>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901a:	e186      	b.n	800932a <UART_SetConfig+0x7ae>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e182      	b.n	800932a <UART_SetConfig+0x7ae>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e17e      	b.n	800932a <UART_SetConfig+0x7ae>
 800902c:	2320      	movs	r3, #32
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e17a      	b.n	800932a <UART_SetConfig+0x7ae>
 8009034:	2340      	movs	r3, #64	@ 0x40
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e176      	b.n	800932a <UART_SetConfig+0x7ae>
 800903c:	2380      	movs	r3, #128	@ 0x80
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e172      	b.n	800932a <UART_SetConfig+0x7ae>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a5b      	ldr	r2, [pc, #364]	@ (80091b8 <UART_SetConfig+0x63c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d130      	bne.n	80090b0 <UART_SetConfig+0x534>
 800904e:	4b58      	ldr	r3, [pc, #352]	@ (80091b0 <UART_SetConfig+0x634>)
 8009050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b05      	cmp	r3, #5
 8009058:	d826      	bhi.n	80090a8 <UART_SetConfig+0x52c>
 800905a:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <UART_SetConfig+0x4e4>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009079 	.word	0x08009079
 8009064:	08009081 	.word	0x08009081
 8009068:	08009089 	.word	0x08009089
 800906c:	08009091 	.word	0x08009091
 8009070:	08009099 	.word	0x08009099
 8009074:	080090a1 	.word	0x080090a1
 8009078:	2300      	movs	r3, #0
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e154      	b.n	800932a <UART_SetConfig+0x7ae>
 8009080:	2304      	movs	r3, #4
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e150      	b.n	800932a <UART_SetConfig+0x7ae>
 8009088:	2308      	movs	r3, #8
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e14c      	b.n	800932a <UART_SetConfig+0x7ae>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009096:	e148      	b.n	800932a <UART_SetConfig+0x7ae>
 8009098:	2320      	movs	r3, #32
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e144      	b.n	800932a <UART_SetConfig+0x7ae>
 80090a0:	2340      	movs	r3, #64	@ 0x40
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e140      	b.n	800932a <UART_SetConfig+0x7ae>
 80090a8:	2380      	movs	r3, #128	@ 0x80
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e13c      	b.n	800932a <UART_SetConfig+0x7ae>
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a41      	ldr	r2, [pc, #260]	@ (80091bc <UART_SetConfig+0x640>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	f040 8082 	bne.w	80091c0 <UART_SetConfig+0x644>
 80090bc:	4b3c      	ldr	r3, [pc, #240]	@ (80091b0 <UART_SetConfig+0x634>)
 80090be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090c4:	2b28      	cmp	r3, #40	@ 0x28
 80090c6:	d86d      	bhi.n	80091a4 <UART_SetConfig+0x628>
 80090c8:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <UART_SetConfig+0x554>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	08009175 	.word	0x08009175
 80090d4:	080091a5 	.word	0x080091a5
 80090d8:	080091a5 	.word	0x080091a5
 80090dc:	080091a5 	.word	0x080091a5
 80090e0:	080091a5 	.word	0x080091a5
 80090e4:	080091a5 	.word	0x080091a5
 80090e8:	080091a5 	.word	0x080091a5
 80090ec:	080091a5 	.word	0x080091a5
 80090f0:	0800917d 	.word	0x0800917d
 80090f4:	080091a5 	.word	0x080091a5
 80090f8:	080091a5 	.word	0x080091a5
 80090fc:	080091a5 	.word	0x080091a5
 8009100:	080091a5 	.word	0x080091a5
 8009104:	080091a5 	.word	0x080091a5
 8009108:	080091a5 	.word	0x080091a5
 800910c:	080091a5 	.word	0x080091a5
 8009110:	08009185 	.word	0x08009185
 8009114:	080091a5 	.word	0x080091a5
 8009118:	080091a5 	.word	0x080091a5
 800911c:	080091a5 	.word	0x080091a5
 8009120:	080091a5 	.word	0x080091a5
 8009124:	080091a5 	.word	0x080091a5
 8009128:	080091a5 	.word	0x080091a5
 800912c:	080091a5 	.word	0x080091a5
 8009130:	0800918d 	.word	0x0800918d
 8009134:	080091a5 	.word	0x080091a5
 8009138:	080091a5 	.word	0x080091a5
 800913c:	080091a5 	.word	0x080091a5
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091a5 	.word	0x080091a5
 8009148:	080091a5 	.word	0x080091a5
 800914c:	080091a5 	.word	0x080091a5
 8009150:	08009195 	.word	0x08009195
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091a5 	.word	0x080091a5
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091a5 	.word	0x080091a5
 800916c:	080091a5 	.word	0x080091a5
 8009170:	0800919d 	.word	0x0800919d
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e0d6      	b.n	800932a <UART_SetConfig+0x7ae>
 800917c:	2304      	movs	r3, #4
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e0d2      	b.n	800932a <UART_SetConfig+0x7ae>
 8009184:	2308      	movs	r3, #8
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e0ce      	b.n	800932a <UART_SetConfig+0x7ae>
 800918c:	2310      	movs	r3, #16
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e0ca      	b.n	800932a <UART_SetConfig+0x7ae>
 8009194:	2320      	movs	r3, #32
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e0c6      	b.n	800932a <UART_SetConfig+0x7ae>
 800919c:	2340      	movs	r3, #64	@ 0x40
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e0c2      	b.n	800932a <UART_SetConfig+0x7ae>
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e0be      	b.n	800932a <UART_SetConfig+0x7ae>
 80091ac:	40011400 	.word	0x40011400
 80091b0:	58024400 	.word	0x58024400
 80091b4:	40007800 	.word	0x40007800
 80091b8:	40007c00 	.word	0x40007c00
 80091bc:	40011800 	.word	0x40011800
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4aad      	ldr	r2, [pc, #692]	@ (800947c <UART_SetConfig+0x900>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d176      	bne.n	80092b8 <UART_SetConfig+0x73c>
 80091ca:	4bad      	ldr	r3, [pc, #692]	@ (8009480 <UART_SetConfig+0x904>)
 80091cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091d2:	2b28      	cmp	r3, #40	@ 0x28
 80091d4:	d86c      	bhi.n	80092b0 <UART_SetConfig+0x734>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x660>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009281 	.word	0x08009281
 80091e0:	080092b1 	.word	0x080092b1
 80091e4:	080092b1 	.word	0x080092b1
 80091e8:	080092b1 	.word	0x080092b1
 80091ec:	080092b1 	.word	0x080092b1
 80091f0:	080092b1 	.word	0x080092b1
 80091f4:	080092b1 	.word	0x080092b1
 80091f8:	080092b1 	.word	0x080092b1
 80091fc:	08009289 	.word	0x08009289
 8009200:	080092b1 	.word	0x080092b1
 8009204:	080092b1 	.word	0x080092b1
 8009208:	080092b1 	.word	0x080092b1
 800920c:	080092b1 	.word	0x080092b1
 8009210:	080092b1 	.word	0x080092b1
 8009214:	080092b1 	.word	0x080092b1
 8009218:	080092b1 	.word	0x080092b1
 800921c:	08009291 	.word	0x08009291
 8009220:	080092b1 	.word	0x080092b1
 8009224:	080092b1 	.word	0x080092b1
 8009228:	080092b1 	.word	0x080092b1
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080092b1 	.word	0x080092b1
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092b1 	.word	0x080092b1
 800923c:	08009299 	.word	0x08009299
 8009240:	080092b1 	.word	0x080092b1
 8009244:	080092b1 	.word	0x080092b1
 8009248:	080092b1 	.word	0x080092b1
 800924c:	080092b1 	.word	0x080092b1
 8009250:	080092b1 	.word	0x080092b1
 8009254:	080092b1 	.word	0x080092b1
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	080092b1 	.word	0x080092b1
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e050      	b.n	800932a <UART_SetConfig+0x7ae>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e04c      	b.n	800932a <UART_SetConfig+0x7ae>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e048      	b.n	800932a <UART_SetConfig+0x7ae>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e044      	b.n	800932a <UART_SetConfig+0x7ae>
 80092a0:	2320      	movs	r3, #32
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e040      	b.n	800932a <UART_SetConfig+0x7ae>
 80092a8:	2340      	movs	r3, #64	@ 0x40
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e03c      	b.n	800932a <UART_SetConfig+0x7ae>
 80092b0:	2380      	movs	r3, #128	@ 0x80
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e038      	b.n	800932a <UART_SetConfig+0x7ae>
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a71      	ldr	r2, [pc, #452]	@ (8009484 <UART_SetConfig+0x908>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d130      	bne.n	8009324 <UART_SetConfig+0x7a8>
 80092c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009480 <UART_SetConfig+0x904>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d826      	bhi.n	800931c <UART_SetConfig+0x7a0>
 80092ce:	a201      	add	r2, pc, #4	@ (adr r2, 80092d4 <UART_SetConfig+0x758>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	080092fd 	.word	0x080092fd
 80092e0:	08009305 	.word	0x08009305
 80092e4:	0800930d 	.word	0x0800930d
 80092e8:	08009315 	.word	0x08009315
 80092ec:	2302      	movs	r3, #2
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e01a      	b.n	800932a <UART_SetConfig+0x7ae>
 80092f4:	2304      	movs	r3, #4
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e016      	b.n	800932a <UART_SetConfig+0x7ae>
 80092fc:	2308      	movs	r3, #8
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e012      	b.n	800932a <UART_SetConfig+0x7ae>
 8009304:	2310      	movs	r3, #16
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e00e      	b.n	800932a <UART_SetConfig+0x7ae>
 800930c:	2320      	movs	r3, #32
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e00a      	b.n	800932a <UART_SetConfig+0x7ae>
 8009314:	2340      	movs	r3, #64	@ 0x40
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e006      	b.n	800932a <UART_SetConfig+0x7ae>
 800931c:	2380      	movs	r3, #128	@ 0x80
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e002      	b.n	800932a <UART_SetConfig+0x7ae>
 8009324:	2380      	movs	r3, #128	@ 0x80
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a55      	ldr	r2, [pc, #340]	@ (8009484 <UART_SetConfig+0x908>)
 8009330:	4293      	cmp	r3, r2
 8009332:	f040 80f8 	bne.w	8009526 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009336:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800933a:	2b20      	cmp	r3, #32
 800933c:	dc46      	bgt.n	80093cc <UART_SetConfig+0x850>
 800933e:	2b02      	cmp	r3, #2
 8009340:	db75      	blt.n	800942e <UART_SetConfig+0x8b2>
 8009342:	3b02      	subs	r3, #2
 8009344:	2b1e      	cmp	r3, #30
 8009346:	d872      	bhi.n	800942e <UART_SetConfig+0x8b2>
 8009348:	a201      	add	r2, pc, #4	@ (adr r2, 8009350 <UART_SetConfig+0x7d4>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	080093d3 	.word	0x080093d3
 8009354:	0800942f 	.word	0x0800942f
 8009358:	080093db 	.word	0x080093db
 800935c:	0800942f 	.word	0x0800942f
 8009360:	0800942f 	.word	0x0800942f
 8009364:	0800942f 	.word	0x0800942f
 8009368:	080093eb 	.word	0x080093eb
 800936c:	0800942f 	.word	0x0800942f
 8009370:	0800942f 	.word	0x0800942f
 8009374:	0800942f 	.word	0x0800942f
 8009378:	0800942f 	.word	0x0800942f
 800937c:	0800942f 	.word	0x0800942f
 8009380:	0800942f 	.word	0x0800942f
 8009384:	0800942f 	.word	0x0800942f
 8009388:	080093fb 	.word	0x080093fb
 800938c:	0800942f 	.word	0x0800942f
 8009390:	0800942f 	.word	0x0800942f
 8009394:	0800942f 	.word	0x0800942f
 8009398:	0800942f 	.word	0x0800942f
 800939c:	0800942f 	.word	0x0800942f
 80093a0:	0800942f 	.word	0x0800942f
 80093a4:	0800942f 	.word	0x0800942f
 80093a8:	0800942f 	.word	0x0800942f
 80093ac:	0800942f 	.word	0x0800942f
 80093b0:	0800942f 	.word	0x0800942f
 80093b4:	0800942f 	.word	0x0800942f
 80093b8:	0800942f 	.word	0x0800942f
 80093bc:	0800942f 	.word	0x0800942f
 80093c0:	0800942f 	.word	0x0800942f
 80093c4:	0800942f 	.word	0x0800942f
 80093c8:	08009421 	.word	0x08009421
 80093cc:	2b40      	cmp	r3, #64	@ 0x40
 80093ce:	d02a      	beq.n	8009426 <UART_SetConfig+0x8aa>
 80093d0:	e02d      	b.n	800942e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093d2:	f7fd feaf 	bl	8007134 <HAL_RCCEx_GetD3PCLK1Freq>
 80093d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d8:	e02f      	b.n	800943a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd febe 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e8:	e027      	b.n	800943a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ea:	f107 0318 	add.w	r3, r7, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe f80a 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	e01f      	b.n	800943a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093fa:	4b21      	ldr	r3, [pc, #132]	@ (8009480 <UART_SetConfig+0x904>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009406:	4b1e      	ldr	r3, [pc, #120]	@ (8009480 <UART_SetConfig+0x904>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	08db      	lsrs	r3, r3, #3
 800940c:	f003 0303 	and.w	r3, r3, #3
 8009410:	4a1d      	ldr	r2, [pc, #116]	@ (8009488 <UART_SetConfig+0x90c>)
 8009412:	fa22 f303 	lsr.w	r3, r2, r3
 8009416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009418:	e00f      	b.n	800943a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800941a:	4b1b      	ldr	r3, [pc, #108]	@ (8009488 <UART_SetConfig+0x90c>)
 800941c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941e:	e00c      	b.n	800943a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009420:	4b1a      	ldr	r3, [pc, #104]	@ (800948c <UART_SetConfig+0x910>)
 8009422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009424:	e009      	b.n	800943a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942c:	e005      	b.n	800943a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800943a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 81ee 	beq.w	800981e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009446:	4a12      	ldr	r2, [pc, #72]	@ (8009490 <UART_SetConfig+0x914>)
 8009448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800944c:	461a      	mov	r2, r3
 800944e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009450:	fbb3 f3f2 	udiv	r3, r3, r2
 8009454:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009462:	429a      	cmp	r2, r3
 8009464:	d305      	bcc.n	8009472 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800946c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946e:	429a      	cmp	r2, r3
 8009470:	d910      	bls.n	8009494 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009478:	e1d1      	b.n	800981e <UART_SetConfig+0xca2>
 800947a:	bf00      	nop
 800947c:	40011c00 	.word	0x40011c00
 8009480:	58024400 	.word	0x58024400
 8009484:	58000c00 	.word	0x58000c00
 8009488:	03d09000 	.word	0x03d09000
 800948c:	003d0900 	.word	0x003d0900
 8009490:	0800c88c 	.word	0x0800c88c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009496:	2200      	movs	r2, #0
 8009498:	60bb      	str	r3, [r7, #8]
 800949a:	60fa      	str	r2, [r7, #12]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	4ac0      	ldr	r2, [pc, #768]	@ (80097a4 <UART_SetConfig+0xc28>)
 80094a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	2200      	movs	r2, #0
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094b6:	f7f6 ff83 	bl	80003c0 <__aeabi_uldivmod>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4610      	mov	r0, r2
 80094c0:	4619      	mov	r1, r3
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	020b      	lsls	r3, r1, #8
 80094cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094d0:	0202      	lsls	r2, r0, #8
 80094d2:	6979      	ldr	r1, [r7, #20]
 80094d4:	6849      	ldr	r1, [r1, #4]
 80094d6:	0849      	lsrs	r1, r1, #1
 80094d8:	2000      	movs	r0, #0
 80094da:	460c      	mov	r4, r1
 80094dc:	4605      	mov	r5, r0
 80094de:	eb12 0804 	adds.w	r8, r2, r4
 80094e2:	eb43 0905 	adc.w	r9, r3, r5
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	469a      	mov	sl, r3
 80094ee:	4693      	mov	fp, r2
 80094f0:	4652      	mov	r2, sl
 80094f2:	465b      	mov	r3, fp
 80094f4:	4640      	mov	r0, r8
 80094f6:	4649      	mov	r1, r9
 80094f8:	f7f6 ff62 	bl	80003c0 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4613      	mov	r3, r2
 8009502:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800950a:	d308      	bcc.n	800951e <UART_SetConfig+0x9a2>
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009512:	d204      	bcs.n	800951e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800951a:	60da      	str	r2, [r3, #12]
 800951c:	e17f      	b.n	800981e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009524:	e17b      	b.n	800981e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800952e:	f040 80bd 	bne.w	80096ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009532:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009536:	2b20      	cmp	r3, #32
 8009538:	dc48      	bgt.n	80095cc <UART_SetConfig+0xa50>
 800953a:	2b00      	cmp	r3, #0
 800953c:	db7b      	blt.n	8009636 <UART_SetConfig+0xaba>
 800953e:	2b20      	cmp	r3, #32
 8009540:	d879      	bhi.n	8009636 <UART_SetConfig+0xaba>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <UART_SetConfig+0x9cc>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	080095d3 	.word	0x080095d3
 800954c:	080095db 	.word	0x080095db
 8009550:	08009637 	.word	0x08009637
 8009554:	08009637 	.word	0x08009637
 8009558:	080095e3 	.word	0x080095e3
 800955c:	08009637 	.word	0x08009637
 8009560:	08009637 	.word	0x08009637
 8009564:	08009637 	.word	0x08009637
 8009568:	080095f3 	.word	0x080095f3
 800956c:	08009637 	.word	0x08009637
 8009570:	08009637 	.word	0x08009637
 8009574:	08009637 	.word	0x08009637
 8009578:	08009637 	.word	0x08009637
 800957c:	08009637 	.word	0x08009637
 8009580:	08009637 	.word	0x08009637
 8009584:	08009637 	.word	0x08009637
 8009588:	08009603 	.word	0x08009603
 800958c:	08009637 	.word	0x08009637
 8009590:	08009637 	.word	0x08009637
 8009594:	08009637 	.word	0x08009637
 8009598:	08009637 	.word	0x08009637
 800959c:	08009637 	.word	0x08009637
 80095a0:	08009637 	.word	0x08009637
 80095a4:	08009637 	.word	0x08009637
 80095a8:	08009637 	.word	0x08009637
 80095ac:	08009637 	.word	0x08009637
 80095b0:	08009637 	.word	0x08009637
 80095b4:	08009637 	.word	0x08009637
 80095b8:	08009637 	.word	0x08009637
 80095bc:	08009637 	.word	0x08009637
 80095c0:	08009637 	.word	0x08009637
 80095c4:	08009637 	.word	0x08009637
 80095c8:	08009629 	.word	0x08009629
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d02e      	beq.n	800962e <UART_SetConfig+0xab2>
 80095d0:	e031      	b.n	8009636 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d2:	f7fb ff11 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80095d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095d8:	e033      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095da:	f7fb ff23 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 80095de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095e0:	e02f      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd fdba 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f0:	e027      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f2:	f107 0318 	add.w	r3, r7, #24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fd ff06 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009600:	e01f      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009602:	4b69      	ldr	r3, [pc, #420]	@ (80097a8 <UART_SetConfig+0xc2c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d009      	beq.n	8009622 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800960e:	4b66      	ldr	r3, [pc, #408]	@ (80097a8 <UART_SetConfig+0xc2c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	4a64      	ldr	r2, [pc, #400]	@ (80097ac <UART_SetConfig+0xc30>)
 800961a:	fa22 f303 	lsr.w	r3, r2, r3
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009620:	e00f      	b.n	8009642 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009622:	4b62      	ldr	r3, [pc, #392]	@ (80097ac <UART_SetConfig+0xc30>)
 8009624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009626:	e00c      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009628:	4b61      	ldr	r3, [pc, #388]	@ (80097b0 <UART_SetConfig+0xc34>)
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e009      	b.n	8009642 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009634:	e005      	b.n	8009642 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 80ea 	beq.w	800981e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964e:	4a55      	ldr	r2, [pc, #340]	@ (80097a4 <UART_SetConfig+0xc28>)
 8009650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009654:	461a      	mov	r2, r3
 8009656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009658:	fbb3 f3f2 	udiv	r3, r3, r2
 800965c:	005a      	lsls	r2, r3, #1
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	441a      	add	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	fbb2 f3f3 	udiv	r3, r2, r3
 800966e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	2b0f      	cmp	r3, #15
 8009674:	d916      	bls.n	80096a4 <UART_SetConfig+0xb28>
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800967c:	d212      	bcs.n	80096a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	b29b      	uxth	r3, r3
 8009682:	f023 030f 	bic.w	r3, r3, #15
 8009686:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	b29b      	uxth	r3, r3
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	b29a      	uxth	r2, r3
 8009694:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009696:	4313      	orrs	r3, r2
 8009698:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096a0:	60da      	str	r2, [r3, #12]
 80096a2:	e0bc      	b.n	800981e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096aa:	e0b8      	b.n	800981e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	dc4b      	bgt.n	800974c <UART_SetConfig+0xbd0>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f2c0 8087 	blt.w	80097c8 <UART_SetConfig+0xc4c>
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	f200 8084 	bhi.w	80097c8 <UART_SetConfig+0xc4c>
 80096c0:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <UART_SetConfig+0xb4c>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	08009753 	.word	0x08009753
 80096cc:	0800975b 	.word	0x0800975b
 80096d0:	080097c9 	.word	0x080097c9
 80096d4:	080097c9 	.word	0x080097c9
 80096d8:	08009763 	.word	0x08009763
 80096dc:	080097c9 	.word	0x080097c9
 80096e0:	080097c9 	.word	0x080097c9
 80096e4:	080097c9 	.word	0x080097c9
 80096e8:	08009773 	.word	0x08009773
 80096ec:	080097c9 	.word	0x080097c9
 80096f0:	080097c9 	.word	0x080097c9
 80096f4:	080097c9 	.word	0x080097c9
 80096f8:	080097c9 	.word	0x080097c9
 80096fc:	080097c9 	.word	0x080097c9
 8009700:	080097c9 	.word	0x080097c9
 8009704:	080097c9 	.word	0x080097c9
 8009708:	08009783 	.word	0x08009783
 800970c:	080097c9 	.word	0x080097c9
 8009710:	080097c9 	.word	0x080097c9
 8009714:	080097c9 	.word	0x080097c9
 8009718:	080097c9 	.word	0x080097c9
 800971c:	080097c9 	.word	0x080097c9
 8009720:	080097c9 	.word	0x080097c9
 8009724:	080097c9 	.word	0x080097c9
 8009728:	080097c9 	.word	0x080097c9
 800972c:	080097c9 	.word	0x080097c9
 8009730:	080097c9 	.word	0x080097c9
 8009734:	080097c9 	.word	0x080097c9
 8009738:	080097c9 	.word	0x080097c9
 800973c:	080097c9 	.word	0x080097c9
 8009740:	080097c9 	.word	0x080097c9
 8009744:	080097c9 	.word	0x080097c9
 8009748:	080097bb 	.word	0x080097bb
 800974c:	2b40      	cmp	r3, #64	@ 0x40
 800974e:	d037      	beq.n	80097c0 <UART_SetConfig+0xc44>
 8009750:	e03a      	b.n	80097c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009752:	f7fb fe51 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8009756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009758:	e03c      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800975a:	f7fb fe63 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 800975e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009760:	e038      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd fcfa 	bl	8007160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009770:	e030      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009772:	f107 0318 	add.w	r3, r7, #24
 8009776:	4618      	mov	r0, r3
 8009778:	f7fd fe46 	bl	8007408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009780:	e028      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <UART_SetConfig+0xc2c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d012      	beq.n	80097b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800978e:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <UART_SetConfig+0xc2c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	08db      	lsrs	r3, r3, #3
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	4a04      	ldr	r2, [pc, #16]	@ (80097ac <UART_SetConfig+0xc30>)
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097a0:	e018      	b.n	80097d4 <UART_SetConfig+0xc58>
 80097a2:	bf00      	nop
 80097a4:	0800c88c 	.word	0x0800c88c
 80097a8:	58024400 	.word	0x58024400
 80097ac:	03d09000 	.word	0x03d09000
 80097b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80097b4:	4b24      	ldr	r3, [pc, #144]	@ (8009848 <UART_SetConfig+0xccc>)
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b8:	e00c      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097ba:	4b24      	ldr	r3, [pc, #144]	@ (800984c <UART_SetConfig+0xcd0>)
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097be:	e009      	b.n	80097d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c6:	e005      	b.n	80097d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097d2:	bf00      	nop
    }

    if (pclk != 0U)
 80097d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d021      	beq.n	800981e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097de:	4a1c      	ldr	r2, [pc, #112]	@ (8009850 <UART_SetConfig+0xcd4>)
 80097e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	085b      	lsrs	r3, r3, #1
 80097f2:	441a      	add	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009800:	2b0f      	cmp	r3, #15
 8009802:	d909      	bls.n	8009818 <UART_SetConfig+0xc9c>
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800980a:	d205      	bcs.n	8009818 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	b29a      	uxth	r2, r3
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60da      	str	r2, [r3, #12]
 8009816:	e002      	b.n	800981e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2201      	movs	r2, #1
 8009822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2201      	movs	r2, #1
 800982a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2200      	movs	r2, #0
 8009832:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800983a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800983e:	4618      	mov	r0, r3
 8009840:	3748      	adds	r7, #72	@ 0x48
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009848:	03d09000 	.word	0x03d09000
 800984c:	003d0900 	.word	0x003d0900
 8009850:	0800c88c 	.word	0x0800c88c

08009854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00a      	beq.n	800987e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	430a      	orrs	r2, r1
 8009904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01a      	beq.n	800996a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800994e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009952:	d10a      	bne.n	800996a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	605a      	str	r2, [r3, #4]
  }
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b098      	sub	sp, #96	@ 0x60
 800999c:	af02      	add	r7, sp, #8
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099a8:	f7f7 fed4 	bl	8001754 <HAL_GetTick>
 80099ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b08      	cmp	r3, #8
 80099ba:	d12f      	bne.n	8009a1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c4:	2200      	movs	r2, #0
 80099c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f88e 	bl	8009aec <UART_WaitOnFlagUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d022      	beq.n	8009a1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099de:	e853 3f00 	ldrex	r3, [r3]
 80099e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e6      	bne.n	80099d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e063      	b.n	8009ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d149      	bne.n	8009abe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a32:	2200      	movs	r2, #0
 8009a34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f857 	bl	8009aec <UART_WaitOnFlagUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d03c      	beq.n	8009abe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	623b      	str	r3, [r7, #32]
   return(result);
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e6      	bne.n	8009a44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3308      	adds	r3, #8
 8009a94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a96:	61fa      	str	r2, [r7, #28]
 8009a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	69b9      	ldr	r1, [r7, #24]
 8009a9c:	69fa      	ldr	r2, [r7, #28]
 8009a9e:	e841 2300 	strex	r3, r2, [r1]
 8009aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e5      	bne.n	8009a76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e012      	b.n	8009ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3758      	adds	r7, #88	@ 0x58
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009afc:	e04f      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b04:	d04b      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b06:	f7f7 fe25 	bl	8001754 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d302      	bcc.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e04e      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d037      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b80      	cmp	r3, #128	@ 0x80
 8009b32:	d034      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b40      	cmp	r3, #64	@ 0x40
 8009b38:	d031      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	f003 0308 	and.w	r3, r3, #8
 8009b44:	2b08      	cmp	r3, #8
 8009b46:	d110      	bne.n	8009b6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2208      	movs	r2, #8
 8009b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f839 	bl	8009bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e029      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b78:	d111      	bne.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f81f 	bl	8009bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e00f      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69da      	ldr	r2, [r3, #28]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	bf0c      	ite	eq
 8009bae:	2301      	moveq	r3, #1
 8009bb0:	2300      	movne	r3, #0
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d0a0      	beq.n	8009afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b095      	sub	sp, #84	@ 0x54
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e6      	bne.n	8009bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	4b1e      	ldr	r3, [pc, #120]	@ (8009c90 <UART_EndRxTransfer+0xc8>)
 8009c16:	4013      	ands	r3, r2
 8009c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e5      	bne.n	8009c02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d118      	bne.n	8009c70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f023 0310 	bic.w	r3, r3, #16
 8009c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e6      	bne.n	8009c3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c84:	bf00      	nop
 8009c86:	3754      	adds	r7, #84	@ 0x54
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	effffffe 	.word	0xeffffffe

08009c94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_UARTEx_DisableFifoMode+0x16>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e027      	b.n	8009cfa <HAL_UARTEx_DisableFifoMode+0x66>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2224      	movs	r2, #36	@ 0x24
 8009cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0201 	bic.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009cd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d101      	bne.n	8009d1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e02d      	b.n	8009d7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2224      	movs	r2, #36	@ 0x24
 8009d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 0201 	bic.w	r2, r2, #1
 8009d44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f850 	bl	8009e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d96:	2302      	movs	r3, #2
 8009d98:	e02d      	b.n	8009df6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2224      	movs	r2, #36	@ 0x24
 8009da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0201 	bic.w	r2, r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f812 	bl	8009e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d108      	bne.n	8009e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e20:	e031      	b.n	8009e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e22:	2310      	movs	r3, #16
 8009e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e26:	2310      	movs	r3, #16
 8009e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	0e5b      	lsrs	r3, r3, #25
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	0f5b      	lsrs	r3, r3, #29
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0307 	and.w	r3, r3, #7
 8009e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	7b3a      	ldrb	r2, [r7, #12]
 8009e4e:	4911      	ldr	r1, [pc, #68]	@ (8009e94 <UARTEx_SetNbDataToProcess+0x94>)
 8009e50:	5c8a      	ldrb	r2, [r1, r2]
 8009e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e56:	7b3a      	ldrb	r2, [r7, #12]
 8009e58:	490f      	ldr	r1, [pc, #60]	@ (8009e98 <UARTEx_SetNbDataToProcess+0x98>)
 8009e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	7b7a      	ldrb	r2, [r7, #13]
 8009e6c:	4909      	ldr	r1, [pc, #36]	@ (8009e94 <UARTEx_SetNbDataToProcess+0x94>)
 8009e6e:	5c8a      	ldrb	r2, [r1, r2]
 8009e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e74:	7b7a      	ldrb	r2, [r7, #13]
 8009e76:	4908      	ldr	r1, [pc, #32]	@ (8009e98 <UARTEx_SetNbDataToProcess+0x98>)
 8009e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e86:	bf00      	nop
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	0800c8a4 	.word	0x0800c8a4
 8009e98:	0800c8ac 	.word	0x0800c8ac

08009e9c <__cvt>:
 8009e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e9e:	ed2d 8b02 	vpush	{d8}
 8009ea2:	eeb0 8b40 	vmov.f64	d8, d0
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	4617      	mov	r7, r2
 8009eaa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009eac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009eae:	ee18 2a90 	vmov	r2, s17
 8009eb2:	f025 0520 	bic.w	r5, r5, #32
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	bfb6      	itet	lt
 8009eba:	222d      	movlt	r2, #45	@ 0x2d
 8009ebc:	2200      	movge	r2, #0
 8009ebe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009ec2:	2d46      	cmp	r5, #70	@ 0x46
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	d004      	beq.n	8009ed4 <__cvt+0x38>
 8009eca:	2d45      	cmp	r5, #69	@ 0x45
 8009ecc:	d100      	bne.n	8009ed0 <__cvt+0x34>
 8009ece:	3401      	adds	r4, #1
 8009ed0:	2102      	movs	r1, #2
 8009ed2:	e000      	b.n	8009ed6 <__cvt+0x3a>
 8009ed4:	2103      	movs	r1, #3
 8009ed6:	ab03      	add	r3, sp, #12
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	ab02      	add	r3, sp, #8
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4633      	mov	r3, r6
 8009ee2:	eeb0 0b48 	vmov.f64	d0, d8
 8009ee6:	f000 ff23 	bl	800ad30 <_dtoa_r>
 8009eea:	2d47      	cmp	r5, #71	@ 0x47
 8009eec:	d114      	bne.n	8009f18 <__cvt+0x7c>
 8009eee:	07fb      	lsls	r3, r7, #31
 8009ef0:	d50a      	bpl.n	8009f08 <__cvt+0x6c>
 8009ef2:	1902      	adds	r2, r0, r4
 8009ef4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	bf08      	it	eq
 8009efe:	9203      	streq	r2, [sp, #12]
 8009f00:	2130      	movs	r1, #48	@ 0x30
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d319      	bcc.n	8009f3c <__cvt+0xa0>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f0c:	1a1b      	subs	r3, r3, r0
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	b005      	add	sp, #20
 8009f12:	ecbd 8b02 	vpop	{d8}
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	2d46      	cmp	r5, #70	@ 0x46
 8009f1a:	eb00 0204 	add.w	r2, r0, r4
 8009f1e:	d1e9      	bne.n	8009ef4 <__cvt+0x58>
 8009f20:	7803      	ldrb	r3, [r0, #0]
 8009f22:	2b30      	cmp	r3, #48	@ 0x30
 8009f24:	d107      	bne.n	8009f36 <__cvt+0x9a>
 8009f26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2e:	bf1c      	itt	ne
 8009f30:	f1c4 0401 	rsbne	r4, r4, #1
 8009f34:	6034      	strne	r4, [r6, #0]
 8009f36:	6833      	ldr	r3, [r6, #0]
 8009f38:	441a      	add	r2, r3
 8009f3a:	e7db      	b.n	8009ef4 <__cvt+0x58>
 8009f3c:	1c5c      	adds	r4, r3, #1
 8009f3e:	9403      	str	r4, [sp, #12]
 8009f40:	7019      	strb	r1, [r3, #0]
 8009f42:	e7de      	b.n	8009f02 <__cvt+0x66>

08009f44 <__exponent>:
 8009f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f46:	2900      	cmp	r1, #0
 8009f48:	bfba      	itte	lt
 8009f4a:	4249      	neglt	r1, r1
 8009f4c:	232d      	movlt	r3, #45	@ 0x2d
 8009f4e:	232b      	movge	r3, #43	@ 0x2b
 8009f50:	2909      	cmp	r1, #9
 8009f52:	7002      	strb	r2, [r0, #0]
 8009f54:	7043      	strb	r3, [r0, #1]
 8009f56:	dd29      	ble.n	8009fac <__exponent+0x68>
 8009f58:	f10d 0307 	add.w	r3, sp, #7
 8009f5c:	461d      	mov	r5, r3
 8009f5e:	270a      	movs	r7, #10
 8009f60:	461a      	mov	r2, r3
 8009f62:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f66:	fb07 1416 	mls	r4, r7, r6, r1
 8009f6a:	3430      	adds	r4, #48	@ 0x30
 8009f6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f70:	460c      	mov	r4, r1
 8009f72:	2c63      	cmp	r4, #99	@ 0x63
 8009f74:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f78:	4631      	mov	r1, r6
 8009f7a:	dcf1      	bgt.n	8009f60 <__exponent+0x1c>
 8009f7c:	3130      	adds	r1, #48	@ 0x30
 8009f7e:	1e94      	subs	r4, r2, #2
 8009f80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f84:	1c41      	adds	r1, r0, #1
 8009f86:	4623      	mov	r3, r4
 8009f88:	42ab      	cmp	r3, r5
 8009f8a:	d30a      	bcc.n	8009fa2 <__exponent+0x5e>
 8009f8c:	f10d 0309 	add.w	r3, sp, #9
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	42ac      	cmp	r4, r5
 8009f94:	bf88      	it	hi
 8009f96:	2300      	movhi	r3, #0
 8009f98:	3302      	adds	r3, #2
 8009f9a:	4403      	add	r3, r0
 8009f9c:	1a18      	subs	r0, r3, r0
 8009f9e:	b003      	add	sp, #12
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fa6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009faa:	e7ed      	b.n	8009f88 <__exponent+0x44>
 8009fac:	2330      	movs	r3, #48	@ 0x30
 8009fae:	3130      	adds	r1, #48	@ 0x30
 8009fb0:	7083      	strb	r3, [r0, #2]
 8009fb2:	70c1      	strb	r1, [r0, #3]
 8009fb4:	1d03      	adds	r3, r0, #4
 8009fb6:	e7f1      	b.n	8009f9c <__exponent+0x58>

08009fb8 <_printf_float>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	b08d      	sub	sp, #52	@ 0x34
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	4605      	mov	r5, r0
 8009fca:	f000 fdaf 	bl	800ab2c <_localeconv_r>
 8009fce:	f8d0 b000 	ldr.w	fp, [r0]
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	f7f6 f9ec 	bl	80003b0 <strlen>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	9005      	str	r0, [sp, #20]
 8009fe8:	3307      	adds	r3, #7
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	f103 0108 	add.w	r1, r3, #8
 8009ff2:	f8c8 1000 	str.w	r1, [r8]
 8009ff6:	ed93 0b00 	vldr	d0, [r3]
 8009ffa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a258 <_printf_float+0x2a0>
 8009ffe:	eeb0 7bc0 	vabs.f64	d7, d0
 800a002:	eeb4 7b46 	vcmp.f64	d7, d6
 800a006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a00e:	dd24      	ble.n	800a05a <_printf_float+0xa2>
 800a010:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a018:	d502      	bpl.n	800a020 <_printf_float+0x68>
 800a01a:	232d      	movs	r3, #45	@ 0x2d
 800a01c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a020:	498f      	ldr	r1, [pc, #572]	@ (800a260 <_printf_float+0x2a8>)
 800a022:	4b90      	ldr	r3, [pc, #576]	@ (800a264 <_printf_float+0x2ac>)
 800a024:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a028:	bf94      	ite	ls
 800a02a:	4688      	movls	r8, r1
 800a02c:	4698      	movhi	r8, r3
 800a02e:	f022 0204 	bic.w	r2, r2, #4
 800a032:	2303      	movs	r3, #3
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	6022      	str	r2, [r4, #0]
 800a038:	f04f 0a00 	mov.w	sl, #0
 800a03c:	9700      	str	r7, [sp, #0]
 800a03e:	4633      	mov	r3, r6
 800a040:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f9d1 	bl	800a3ec <_printf_common>
 800a04a:	3001      	adds	r0, #1
 800a04c:	f040 8089 	bne.w	800a162 <_printf_float+0x1aa>
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	b00d      	add	sp, #52	@ 0x34
 800a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a062:	d709      	bvc.n	800a078 <_printf_float+0xc0>
 800a064:	ee10 3a90 	vmov	r3, s1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbc      	itt	lt
 800a06c:	232d      	movlt	r3, #45	@ 0x2d
 800a06e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a072:	497d      	ldr	r1, [pc, #500]	@ (800a268 <_printf_float+0x2b0>)
 800a074:	4b7d      	ldr	r3, [pc, #500]	@ (800a26c <_printf_float+0x2b4>)
 800a076:	e7d5      	b.n	800a024 <_printf_float+0x6c>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a080:	d139      	bne.n	800a0f6 <_printf_float+0x13e>
 800a082:	2306      	movs	r3, #6
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a08a:	2300      	movs	r3, #0
 800a08c:	6022      	str	r2, [r4, #0]
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	ab0a      	add	r3, sp, #40	@ 0x28
 800a092:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a096:	ab09      	add	r3, sp, #36	@ 0x24
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	6861      	ldr	r1, [r4, #4]
 800a09c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f7ff fefb 	bl	8009e9c <__cvt>
 800a0a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	d129      	bne.n	800a104 <_printf_float+0x14c>
 800a0b0:	1cc8      	adds	r0, r1, #3
 800a0b2:	db02      	blt.n	800a0ba <_printf_float+0x102>
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	dd41      	ble.n	800a13e <_printf_float+0x186>
 800a0ba:	f1a9 0902 	sub.w	r9, r9, #2
 800a0be:	fa5f f989 	uxtb.w	r9, r9
 800a0c2:	3901      	subs	r1, #1
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0cc:	f7ff ff3a 	bl	8009f44 <__exponent>
 800a0d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0d2:	1813      	adds	r3, r2, r0
 800a0d4:	2a01      	cmp	r2, #1
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	dc02      	bgt.n	800a0e2 <_printf_float+0x12a>
 800a0dc:	6822      	ldr	r2, [r4, #0]
 800a0de:	07d2      	lsls	r2, r2, #31
 800a0e0:	d501      	bpl.n	800a0e6 <_printf_float+0x12e>
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	6123      	str	r3, [r4, #16]
 800a0e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0a6      	beq.n	800a03c <_printf_float+0x84>
 800a0ee:	232d      	movs	r3, #45	@ 0x2d
 800a0f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f4:	e7a2      	b.n	800a03c <_printf_float+0x84>
 800a0f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0fa:	d1c4      	bne.n	800a086 <_printf_float+0xce>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1c2      	bne.n	800a086 <_printf_float+0xce>
 800a100:	2301      	movs	r3, #1
 800a102:	e7bf      	b.n	800a084 <_printf_float+0xcc>
 800a104:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a108:	d9db      	bls.n	800a0c2 <_printf_float+0x10a>
 800a10a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a10e:	d118      	bne.n	800a142 <_printf_float+0x18a>
 800a110:	2900      	cmp	r1, #0
 800a112:	6863      	ldr	r3, [r4, #4]
 800a114:	dd0b      	ble.n	800a12e <_printf_float+0x176>
 800a116:	6121      	str	r1, [r4, #16]
 800a118:	b913      	cbnz	r3, 800a120 <_printf_float+0x168>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	07d0      	lsls	r0, r2, #31
 800a11e:	d502      	bpl.n	800a126 <_printf_float+0x16e>
 800a120:	3301      	adds	r3, #1
 800a122:	440b      	add	r3, r1
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a128:	f04f 0a00 	mov.w	sl, #0
 800a12c:	e7db      	b.n	800a0e6 <_printf_float+0x12e>
 800a12e:	b913      	cbnz	r3, 800a136 <_printf_float+0x17e>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	07d2      	lsls	r2, r2, #31
 800a134:	d501      	bpl.n	800a13a <_printf_float+0x182>
 800a136:	3302      	adds	r3, #2
 800a138:	e7f4      	b.n	800a124 <_printf_float+0x16c>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e7f2      	b.n	800a124 <_printf_float+0x16c>
 800a13e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a144:	4299      	cmp	r1, r3
 800a146:	db05      	blt.n	800a154 <_printf_float+0x19c>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	6121      	str	r1, [r4, #16]
 800a14c:	07d8      	lsls	r0, r3, #31
 800a14e:	d5ea      	bpl.n	800a126 <_printf_float+0x16e>
 800a150:	1c4b      	adds	r3, r1, #1
 800a152:	e7e7      	b.n	800a124 <_printf_float+0x16c>
 800a154:	2900      	cmp	r1, #0
 800a156:	bfd4      	ite	le
 800a158:	f1c1 0202 	rsble	r2, r1, #2
 800a15c:	2201      	movgt	r2, #1
 800a15e:	4413      	add	r3, r2
 800a160:	e7e0      	b.n	800a124 <_printf_float+0x16c>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	055a      	lsls	r2, r3, #21
 800a166:	d407      	bmi.n	800a178 <_printf_float+0x1c0>
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	4642      	mov	r2, r8
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	d12a      	bne.n	800a1cc <_printf_float+0x214>
 800a176:	e76b      	b.n	800a050 <_printf_float+0x98>
 800a178:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a17c:	f240 80e0 	bls.w	800a340 <_printf_float+0x388>
 800a180:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a184:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	d133      	bne.n	800a1f6 <_printf_float+0x23e>
 800a18e:	4a38      	ldr	r2, [pc, #224]	@ (800a270 <_printf_float+0x2b8>)
 800a190:	2301      	movs	r3, #1
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f af59 	beq.w	800a050 <_printf_float+0x98>
 800a19e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1a2:	4543      	cmp	r3, r8
 800a1a4:	db02      	blt.n	800a1ac <_printf_float+0x1f4>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	07d8      	lsls	r0, r3, #31
 800a1aa:	d50f      	bpl.n	800a1cc <_printf_float+0x214>
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	465a      	mov	r2, fp
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	47b8      	blx	r7
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f43f af4a 	beq.w	800a050 <_printf_float+0x98>
 800a1bc:	f04f 0900 	mov.w	r9, #0
 800a1c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1c4:	f104 0a1a 	add.w	sl, r4, #26
 800a1c8:	45c8      	cmp	r8, r9
 800a1ca:	dc09      	bgt.n	800a1e0 <_printf_float+0x228>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	079b      	lsls	r3, r3, #30
 800a1d0:	f100 8107 	bmi.w	800a3e2 <_printf_float+0x42a>
 800a1d4:	68e0      	ldr	r0, [r4, #12]
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d8:	4298      	cmp	r0, r3
 800a1da:	bfb8      	it	lt
 800a1dc:	4618      	movlt	r0, r3
 800a1de:	e739      	b.n	800a054 <_printf_float+0x9c>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f af30 	beq.w	800a050 <_printf_float+0x98>
 800a1f0:	f109 0901 	add.w	r9, r9, #1
 800a1f4:	e7e8      	b.n	800a1c8 <_printf_float+0x210>
 800a1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc3b      	bgt.n	800a274 <_printf_float+0x2bc>
 800a1fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a270 <_printf_float+0x2b8>)
 800a1fe:	2301      	movs	r3, #1
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	f43f af22 	beq.w	800a050 <_printf_float+0x98>
 800a20c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a210:	ea59 0303 	orrs.w	r3, r9, r3
 800a214:	d102      	bne.n	800a21c <_printf_float+0x264>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	07d9      	lsls	r1, r3, #31
 800a21a:	d5d7      	bpl.n	800a1cc <_printf_float+0x214>
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	465a      	mov	r2, fp
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f af12 	beq.w	800a050 <_printf_float+0x98>
 800a22c:	f04f 0a00 	mov.w	sl, #0
 800a230:	f104 0b1a 	add.w	fp, r4, #26
 800a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a236:	425b      	negs	r3, r3
 800a238:	4553      	cmp	r3, sl
 800a23a:	dc01      	bgt.n	800a240 <_printf_float+0x288>
 800a23c:	464b      	mov	r3, r9
 800a23e:	e794      	b.n	800a16a <_printf_float+0x1b2>
 800a240:	2301      	movs	r3, #1
 800a242:	465a      	mov	r2, fp
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	f43f af00 	beq.w	800a050 <_printf_float+0x98>
 800a250:	f10a 0a01 	add.w	sl, sl, #1
 800a254:	e7ee      	b.n	800a234 <_printf_float+0x27c>
 800a256:	bf00      	nop
 800a258:	ffffffff 	.word	0xffffffff
 800a25c:	7fefffff 	.word	0x7fefffff
 800a260:	0800c8b4 	.word	0x0800c8b4
 800a264:	0800c8b8 	.word	0x0800c8b8
 800a268:	0800c8bc 	.word	0x0800c8bc
 800a26c:	0800c8c0 	.word	0x0800c8c0
 800a270:	0800c8c4 	.word	0x0800c8c4
 800a274:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a276:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a27a:	4553      	cmp	r3, sl
 800a27c:	bfa8      	it	ge
 800a27e:	4653      	movge	r3, sl
 800a280:	2b00      	cmp	r3, #0
 800a282:	4699      	mov	r9, r3
 800a284:	dc37      	bgt.n	800a2f6 <_printf_float+0x33e>
 800a286:	2300      	movs	r3, #0
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a28e:	f104 021a 	add.w	r2, r4, #26
 800a292:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a294:	9907      	ldr	r1, [sp, #28]
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	eba3 0309 	sub.w	r3, r3, r9
 800a29c:	428b      	cmp	r3, r1
 800a29e:	dc31      	bgt.n	800a304 <_printf_float+0x34c>
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	459a      	cmp	sl, r3
 800a2a4:	dc3b      	bgt.n	800a31e <_printf_float+0x366>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	07da      	lsls	r2, r3, #31
 800a2aa:	d438      	bmi.n	800a31e <_printf_float+0x366>
 800a2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ae:	ebaa 0903 	sub.w	r9, sl, r3
 800a2b2:	9b06      	ldr	r3, [sp, #24]
 800a2b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2b8:	4599      	cmp	r9, r3
 800a2ba:	bfa8      	it	ge
 800a2bc:	4699      	movge	r9, r3
 800a2be:	f1b9 0f00 	cmp.w	r9, #0
 800a2c2:	dc34      	bgt.n	800a32e <_printf_float+0x376>
 800a2c4:	f04f 0800 	mov.w	r8, #0
 800a2c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2cc:	f104 0b1a 	add.w	fp, r4, #26
 800a2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a2d6:	eba3 0309 	sub.w	r3, r3, r9
 800a2da:	4543      	cmp	r3, r8
 800a2dc:	f77f af76 	ble.w	800a1cc <_printf_float+0x214>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	465a      	mov	r2, fp
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b8      	blx	r7
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	f43f aeb0 	beq.w	800a050 <_printf_float+0x98>
 800a2f0:	f108 0801 	add.w	r8, r8, #1
 800a2f4:	e7ec      	b.n	800a2d0 <_printf_float+0x318>
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	d1c1      	bne.n	800a286 <_printf_float+0x2ce>
 800a302:	e6a5      	b.n	800a050 <_printf_float+0x98>
 800a304:	2301      	movs	r3, #1
 800a306:	4631      	mov	r1, r6
 800a308:	4628      	mov	r0, r5
 800a30a:	9206      	str	r2, [sp, #24]
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f ae9e 	beq.w	800a050 <_printf_float+0x98>
 800a314:	9b07      	ldr	r3, [sp, #28]
 800a316:	9a06      	ldr	r2, [sp, #24]
 800a318:	3301      	adds	r3, #1
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	e7b9      	b.n	800a292 <_printf_float+0x2da>
 800a31e:	9b05      	ldr	r3, [sp, #20]
 800a320:	465a      	mov	r2, fp
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	d1bf      	bne.n	800a2ac <_printf_float+0x2f4>
 800a32c:	e690      	b.n	800a050 <_printf_float+0x98>
 800a32e:	9a06      	ldr	r2, [sp, #24]
 800a330:	464b      	mov	r3, r9
 800a332:	4442      	add	r2, r8
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	d1c2      	bne.n	800a2c4 <_printf_float+0x30c>
 800a33e:	e687      	b.n	800a050 <_printf_float+0x98>
 800a340:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a344:	f1b9 0f01 	cmp.w	r9, #1
 800a348:	dc01      	bgt.n	800a34e <_printf_float+0x396>
 800a34a:	07db      	lsls	r3, r3, #31
 800a34c:	d536      	bpl.n	800a3bc <_printf_float+0x404>
 800a34e:	2301      	movs	r3, #1
 800a350:	4642      	mov	r2, r8
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f ae79 	beq.w	800a050 <_printf_float+0x98>
 800a35e:	9b05      	ldr	r3, [sp, #20]
 800a360:	465a      	mov	r2, fp
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	f43f ae71 	beq.w	800a050 <_printf_float+0x98>
 800a36e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a37e:	d018      	beq.n	800a3b2 <_printf_float+0x3fa>
 800a380:	464b      	mov	r3, r9
 800a382:	f108 0201 	add.w	r2, r8, #1
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	d10c      	bne.n	800a3aa <_printf_float+0x3f2>
 800a390:	e65e      	b.n	800a050 <_printf_float+0x98>
 800a392:	2301      	movs	r3, #1
 800a394:	465a      	mov	r2, fp
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f ae57 	beq.w	800a050 <_printf_float+0x98>
 800a3a2:	f108 0801 	add.w	r8, r8, #1
 800a3a6:	45c8      	cmp	r8, r9
 800a3a8:	dbf3      	blt.n	800a392 <_printf_float+0x3da>
 800a3aa:	4653      	mov	r3, sl
 800a3ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3b0:	e6dc      	b.n	800a16c <_printf_float+0x1b4>
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	f104 0b1a 	add.w	fp, r4, #26
 800a3ba:	e7f4      	b.n	800a3a6 <_printf_float+0x3ee>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	4642      	mov	r2, r8
 800a3c0:	e7e1      	b.n	800a386 <_printf_float+0x3ce>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	464a      	mov	r2, r9
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f43f ae3f 	beq.w	800a050 <_printf_float+0x98>
 800a3d2:	f108 0801 	add.w	r8, r8, #1
 800a3d6:	68e3      	ldr	r3, [r4, #12]
 800a3d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3da:	1a5b      	subs	r3, r3, r1
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	dcf0      	bgt.n	800a3c2 <_printf_float+0x40a>
 800a3e0:	e6f8      	b.n	800a1d4 <_printf_float+0x21c>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	f104 0919 	add.w	r9, r4, #25
 800a3ea:	e7f4      	b.n	800a3d6 <_printf_float+0x41e>

0800a3ec <_printf_common>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	4698      	mov	r8, r3
 800a3f4:	688a      	ldr	r2, [r1, #8]
 800a3f6:	690b      	ldr	r3, [r1, #16]
 800a3f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bfb8      	it	lt
 800a400:	4613      	movlt	r3, r2
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a408:	4607      	mov	r7, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	b10a      	cbz	r2, 800a412 <_printf_common+0x26>
 800a40e:	3301      	adds	r3, #1
 800a410:	6033      	str	r3, [r6, #0]
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	0699      	lsls	r1, r3, #26
 800a416:	bf42      	ittt	mi
 800a418:	6833      	ldrmi	r3, [r6, #0]
 800a41a:	3302      	addmi	r3, #2
 800a41c:	6033      	strmi	r3, [r6, #0]
 800a41e:	6825      	ldr	r5, [r4, #0]
 800a420:	f015 0506 	ands.w	r5, r5, #6
 800a424:	d106      	bne.n	800a434 <_printf_common+0x48>
 800a426:	f104 0a19 	add.w	sl, r4, #25
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	6832      	ldr	r2, [r6, #0]
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	42ab      	cmp	r3, r5
 800a432:	dc26      	bgt.n	800a482 <_printf_common+0x96>
 800a434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	3b00      	subs	r3, #0
 800a43c:	bf18      	it	ne
 800a43e:	2301      	movne	r3, #1
 800a440:	0692      	lsls	r2, r2, #26
 800a442:	d42b      	bmi.n	800a49c <_printf_common+0xb0>
 800a444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a448:	4641      	mov	r1, r8
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c8      	blx	r9
 800a44e:	3001      	adds	r0, #1
 800a450:	d01e      	beq.n	800a490 <_printf_common+0xa4>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	f003 0306 	and.w	r3, r3, #6
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	bf02      	ittt	eq
 800a45e:	68e5      	ldreq	r5, [r4, #12]
 800a460:	6833      	ldreq	r3, [r6, #0]
 800a462:	1aed      	subeq	r5, r5, r3
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	bf0c      	ite	eq
 800a468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a46c:	2500      	movne	r5, #0
 800a46e:	4293      	cmp	r3, r2
 800a470:	bfc4      	itt	gt
 800a472:	1a9b      	subgt	r3, r3, r2
 800a474:	18ed      	addgt	r5, r5, r3
 800a476:	2600      	movs	r6, #0
 800a478:	341a      	adds	r4, #26
 800a47a:	42b5      	cmp	r5, r6
 800a47c:	d11a      	bne.n	800a4b4 <_printf_common+0xc8>
 800a47e:	2000      	movs	r0, #0
 800a480:	e008      	b.n	800a494 <_printf_common+0xa8>
 800a482:	2301      	movs	r3, #1
 800a484:	4652      	mov	r2, sl
 800a486:	4641      	mov	r1, r8
 800a488:	4638      	mov	r0, r7
 800a48a:	47c8      	blx	r9
 800a48c:	3001      	adds	r0, #1
 800a48e:	d103      	bne.n	800a498 <_printf_common+0xac>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	3501      	adds	r5, #1
 800a49a:	e7c6      	b.n	800a42a <_printf_common+0x3e>
 800a49c:	18e1      	adds	r1, r4, r3
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	2030      	movs	r0, #48	@ 0x30
 800a4a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4a6:	4422      	add	r2, r4
 800a4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	e7c7      	b.n	800a444 <_printf_common+0x58>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4641      	mov	r1, r8
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	47c8      	blx	r9
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d0e6      	beq.n	800a490 <_printf_common+0xa4>
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7d9      	b.n	800a47a <_printf_common+0x8e>
	...

0800a4c8 <_printf_i>:
 800a4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	7e0f      	ldrb	r7, [r1, #24]
 800a4ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4d0:	2f78      	cmp	r7, #120	@ 0x78
 800a4d2:	4691      	mov	r9, r2
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	469a      	mov	sl, r3
 800a4da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4de:	d807      	bhi.n	800a4f0 <_printf_i+0x28>
 800a4e0:	2f62      	cmp	r7, #98	@ 0x62
 800a4e2:	d80a      	bhi.n	800a4fa <_printf_i+0x32>
 800a4e4:	2f00      	cmp	r7, #0
 800a4e6:	f000 80d2 	beq.w	800a68e <_printf_i+0x1c6>
 800a4ea:	2f58      	cmp	r7, #88	@ 0x58
 800a4ec:	f000 80b9 	beq.w	800a662 <_printf_i+0x19a>
 800a4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4f8:	e03a      	b.n	800a570 <_printf_i+0xa8>
 800a4fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d8f6      	bhi.n	800a4f0 <_printf_i+0x28>
 800a502:	a101      	add	r1, pc, #4	@ (adr r1, 800a508 <_printf_i+0x40>)
 800a504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	0800a575 	.word	0x0800a575
 800a510:	0800a4f1 	.word	0x0800a4f1
 800a514:	0800a4f1 	.word	0x0800a4f1
 800a518:	0800a4f1 	.word	0x0800a4f1
 800a51c:	0800a4f1 	.word	0x0800a4f1
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a4f1 	.word	0x0800a4f1
 800a528:	0800a4f1 	.word	0x0800a4f1
 800a52c:	0800a4f1 	.word	0x0800a4f1
 800a530:	0800a4f1 	.word	0x0800a4f1
 800a534:	0800a675 	.word	0x0800a675
 800a538:	0800a59f 	.word	0x0800a59f
 800a53c:	0800a62f 	.word	0x0800a62f
 800a540:	0800a4f1 	.word	0x0800a4f1
 800a544:	0800a4f1 	.word	0x0800a4f1
 800a548:	0800a697 	.word	0x0800a697
 800a54c:	0800a4f1 	.word	0x0800a4f1
 800a550:	0800a59f 	.word	0x0800a59f
 800a554:	0800a4f1 	.word	0x0800a4f1
 800a558:	0800a4f1 	.word	0x0800a4f1
 800a55c:	0800a637 	.word	0x0800a637
 800a560:	6833      	ldr	r3, [r6, #0]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6032      	str	r2, [r6, #0]
 800a568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a56c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a570:	2301      	movs	r3, #1
 800a572:	e09d      	b.n	800a6b0 <_printf_i+0x1e8>
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	1d19      	adds	r1, r3, #4
 800a57a:	6031      	str	r1, [r6, #0]
 800a57c:	0606      	lsls	r6, r0, #24
 800a57e:	d501      	bpl.n	800a584 <_printf_i+0xbc>
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	e003      	b.n	800a58c <_printf_i+0xc4>
 800a584:	0645      	lsls	r5, r0, #25
 800a586:	d5fb      	bpl.n	800a580 <_printf_i+0xb8>
 800a588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a58c:	2d00      	cmp	r5, #0
 800a58e:	da03      	bge.n	800a598 <_printf_i+0xd0>
 800a590:	232d      	movs	r3, #45	@ 0x2d
 800a592:	426d      	negs	r5, r5
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a598:	4859      	ldr	r0, [pc, #356]	@ (800a700 <_printf_i+0x238>)
 800a59a:	230a      	movs	r3, #10
 800a59c:	e011      	b.n	800a5c2 <_printf_i+0xfa>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	0608      	lsls	r0, r1, #24
 800a5a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5a8:	d402      	bmi.n	800a5b0 <_printf_i+0xe8>
 800a5aa:	0649      	lsls	r1, r1, #25
 800a5ac:	bf48      	it	mi
 800a5ae:	b2ad      	uxthmi	r5, r5
 800a5b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5b2:	4853      	ldr	r0, [pc, #332]	@ (800a700 <_printf_i+0x238>)
 800a5b4:	6033      	str	r3, [r6, #0]
 800a5b6:	bf14      	ite	ne
 800a5b8:	230a      	movne	r3, #10
 800a5ba:	2308      	moveq	r3, #8
 800a5bc:	2100      	movs	r1, #0
 800a5be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5c2:	6866      	ldr	r6, [r4, #4]
 800a5c4:	60a6      	str	r6, [r4, #8]
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	bfa2      	ittt	ge
 800a5ca:	6821      	ldrge	r1, [r4, #0]
 800a5cc:	f021 0104 	bicge.w	r1, r1, #4
 800a5d0:	6021      	strge	r1, [r4, #0]
 800a5d2:	b90d      	cbnz	r5, 800a5d8 <_printf_i+0x110>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	d04b      	beq.n	800a670 <_printf_i+0x1a8>
 800a5d8:	4616      	mov	r6, r2
 800a5da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5de:	fb03 5711 	mls	r7, r3, r1, r5
 800a5e2:	5dc7      	ldrb	r7, [r0, r7]
 800a5e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5e8:	462f      	mov	r7, r5
 800a5ea:	42bb      	cmp	r3, r7
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	d9f4      	bls.n	800a5da <_printf_i+0x112>
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d10b      	bne.n	800a60c <_printf_i+0x144>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	07df      	lsls	r7, r3, #31
 800a5f8:	d508      	bpl.n	800a60c <_printf_i+0x144>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6861      	ldr	r1, [r4, #4]
 800a5fe:	4299      	cmp	r1, r3
 800a600:	bfde      	ittt	le
 800a602:	2330      	movle	r3, #48	@ 0x30
 800a604:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a60c:	1b92      	subs	r2, r2, r6
 800a60e:	6122      	str	r2, [r4, #16]
 800a610:	f8cd a000 	str.w	sl, [sp]
 800a614:	464b      	mov	r3, r9
 800a616:	aa03      	add	r2, sp, #12
 800a618:	4621      	mov	r1, r4
 800a61a:	4640      	mov	r0, r8
 800a61c:	f7ff fee6 	bl	800a3ec <_printf_common>
 800a620:	3001      	adds	r0, #1
 800a622:	d14a      	bne.n	800a6ba <_printf_i+0x1f2>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b004      	add	sp, #16
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	f043 0320 	orr.w	r3, r3, #32
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	4833      	ldr	r0, [pc, #204]	@ (800a704 <_printf_i+0x23c>)
 800a638:	2778      	movs	r7, #120	@ 0x78
 800a63a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	6831      	ldr	r1, [r6, #0]
 800a642:	061f      	lsls	r7, r3, #24
 800a644:	f851 5b04 	ldr.w	r5, [r1], #4
 800a648:	d402      	bmi.n	800a650 <_printf_i+0x188>
 800a64a:	065f      	lsls	r7, r3, #25
 800a64c:	bf48      	it	mi
 800a64e:	b2ad      	uxthmi	r5, r5
 800a650:	6031      	str	r1, [r6, #0]
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	bf44      	itt	mi
 800a656:	f043 0320 	orrmi.w	r3, r3, #32
 800a65a:	6023      	strmi	r3, [r4, #0]
 800a65c:	b11d      	cbz	r5, 800a666 <_printf_i+0x19e>
 800a65e:	2310      	movs	r3, #16
 800a660:	e7ac      	b.n	800a5bc <_printf_i+0xf4>
 800a662:	4827      	ldr	r0, [pc, #156]	@ (800a700 <_printf_i+0x238>)
 800a664:	e7e9      	b.n	800a63a <_printf_i+0x172>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	f023 0320 	bic.w	r3, r3, #32
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	e7f6      	b.n	800a65e <_printf_i+0x196>
 800a670:	4616      	mov	r6, r2
 800a672:	e7bd      	b.n	800a5f0 <_printf_i+0x128>
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	6825      	ldr	r5, [r4, #0]
 800a678:	6961      	ldr	r1, [r4, #20]
 800a67a:	1d18      	adds	r0, r3, #4
 800a67c:	6030      	str	r0, [r6, #0]
 800a67e:	062e      	lsls	r6, r5, #24
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	d501      	bpl.n	800a688 <_printf_i+0x1c0>
 800a684:	6019      	str	r1, [r3, #0]
 800a686:	e002      	b.n	800a68e <_printf_i+0x1c6>
 800a688:	0668      	lsls	r0, r5, #25
 800a68a:	d5fb      	bpl.n	800a684 <_printf_i+0x1bc>
 800a68c:	8019      	strh	r1, [r3, #0]
 800a68e:	2300      	movs	r3, #0
 800a690:	6123      	str	r3, [r4, #16]
 800a692:	4616      	mov	r6, r2
 800a694:	e7bc      	b.n	800a610 <_printf_i+0x148>
 800a696:	6833      	ldr	r3, [r6, #0]
 800a698:	1d1a      	adds	r2, r3, #4
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	681e      	ldr	r6, [r3, #0]
 800a69e:	6862      	ldr	r2, [r4, #4]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7f5 fe34 	bl	8000310 <memchr>
 800a6a8:	b108      	cbz	r0, 800a6ae <_printf_i+0x1e6>
 800a6aa:	1b80      	subs	r0, r0, r6
 800a6ac:	6060      	str	r0, [r4, #4]
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b8:	e7aa      	b.n	800a610 <_printf_i+0x148>
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	47d0      	blx	sl
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d0ad      	beq.n	800a624 <_printf_i+0x15c>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	079b      	lsls	r3, r3, #30
 800a6cc:	d413      	bmi.n	800a6f6 <_printf_i+0x22e>
 800a6ce:	68e0      	ldr	r0, [r4, #12]
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	4298      	cmp	r0, r3
 800a6d4:	bfb8      	it	lt
 800a6d6:	4618      	movlt	r0, r3
 800a6d8:	e7a6      	b.n	800a628 <_printf_i+0x160>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4632      	mov	r2, r6
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	47d0      	blx	sl
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d09d      	beq.n	800a624 <_printf_i+0x15c>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	1a5b      	subs	r3, r3, r1
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dcf2      	bgt.n	800a6da <_printf_i+0x212>
 800a6f4:	e7eb      	b.n	800a6ce <_printf_i+0x206>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	f104 0619 	add.w	r6, r4, #25
 800a6fc:	e7f5      	b.n	800a6ea <_printf_i+0x222>
 800a6fe:	bf00      	nop
 800a700:	0800c8c6 	.word	0x0800c8c6
 800a704:	0800c8d7 	.word	0x0800c8d7

0800a708 <std>:
 800a708:	2300      	movs	r3, #0
 800a70a:	b510      	push	{r4, lr}
 800a70c:	4604      	mov	r4, r0
 800a70e:	e9c0 3300 	strd	r3, r3, [r0]
 800a712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a716:	6083      	str	r3, [r0, #8]
 800a718:	8181      	strh	r1, [r0, #12]
 800a71a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a71c:	81c2      	strh	r2, [r0, #14]
 800a71e:	6183      	str	r3, [r0, #24]
 800a720:	4619      	mov	r1, r3
 800a722:	2208      	movs	r2, #8
 800a724:	305c      	adds	r0, #92	@ 0x5c
 800a726:	f000 f9f9 	bl	800ab1c <memset>
 800a72a:	4b0d      	ldr	r3, [pc, #52]	@ (800a760 <std+0x58>)
 800a72c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a72e:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <std+0x5c>)
 800a730:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a732:	4b0d      	ldr	r3, [pc, #52]	@ (800a768 <std+0x60>)
 800a734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a736:	4b0d      	ldr	r3, [pc, #52]	@ (800a76c <std+0x64>)
 800a738:	6323      	str	r3, [r4, #48]	@ 0x30
 800a73a:	4b0d      	ldr	r3, [pc, #52]	@ (800a770 <std+0x68>)
 800a73c:	6224      	str	r4, [r4, #32]
 800a73e:	429c      	cmp	r4, r3
 800a740:	d006      	beq.n	800a750 <std+0x48>
 800a742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a746:	4294      	cmp	r4, r2
 800a748:	d002      	beq.n	800a750 <std+0x48>
 800a74a:	33d0      	adds	r3, #208	@ 0xd0
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d105      	bne.n	800a75c <std+0x54>
 800a750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a758:	f000 ba5c 	b.w	800ac14 <__retarget_lock_init_recursive>
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	bf00      	nop
 800a760:	0800a96d 	.word	0x0800a96d
 800a764:	0800a98f 	.word	0x0800a98f
 800a768:	0800a9c7 	.word	0x0800a9c7
 800a76c:	0800a9eb 	.word	0x0800a9eb
 800a770:	240004fc 	.word	0x240004fc

0800a774 <stdio_exit_handler>:
 800a774:	4a02      	ldr	r2, [pc, #8]	@ (800a780 <stdio_exit_handler+0xc>)
 800a776:	4903      	ldr	r1, [pc, #12]	@ (800a784 <stdio_exit_handler+0x10>)
 800a778:	4803      	ldr	r0, [pc, #12]	@ (800a788 <stdio_exit_handler+0x14>)
 800a77a:	f000 b869 	b.w	800a850 <_fwalk_sglue>
 800a77e:	bf00      	nop
 800a780:	24000010 	.word	0x24000010
 800a784:	0800c46d 	.word	0x0800c46d
 800a788:	24000020 	.word	0x24000020

0800a78c <cleanup_stdio>:
 800a78c:	6841      	ldr	r1, [r0, #4]
 800a78e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c0 <cleanup_stdio+0x34>)
 800a790:	4299      	cmp	r1, r3
 800a792:	b510      	push	{r4, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	d001      	beq.n	800a79c <cleanup_stdio+0x10>
 800a798:	f001 fe68 	bl	800c46c <_fflush_r>
 800a79c:	68a1      	ldr	r1, [r4, #8]
 800a79e:	4b09      	ldr	r3, [pc, #36]	@ (800a7c4 <cleanup_stdio+0x38>)
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	d002      	beq.n	800a7aa <cleanup_stdio+0x1e>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f001 fe61 	bl	800c46c <_fflush_r>
 800a7aa:	68e1      	ldr	r1, [r4, #12]
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <cleanup_stdio+0x3c>)
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	d004      	beq.n	800a7bc <cleanup_stdio+0x30>
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b8:	f001 be58 	b.w	800c46c <_fflush_r>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	bf00      	nop
 800a7c0:	240004fc 	.word	0x240004fc
 800a7c4:	24000564 	.word	0x24000564
 800a7c8:	240005cc 	.word	0x240005cc

0800a7cc <global_stdio_init.part.0>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a7fc <global_stdio_init.part.0+0x30>)
 800a7d0:	4c0b      	ldr	r4, [pc, #44]	@ (800a800 <global_stdio_init.part.0+0x34>)
 800a7d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a804 <global_stdio_init.part.0+0x38>)
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2104      	movs	r1, #4
 800a7dc:	f7ff ff94 	bl	800a708 <std>
 800a7e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	2109      	movs	r1, #9
 800a7e8:	f7ff ff8e 	bl	800a708 <std>
 800a7ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f6:	2112      	movs	r1, #18
 800a7f8:	f7ff bf86 	b.w	800a708 <std>
 800a7fc:	24000634 	.word	0x24000634
 800a800:	240004fc 	.word	0x240004fc
 800a804:	0800a775 	.word	0x0800a775

0800a808 <__sfp_lock_acquire>:
 800a808:	4801      	ldr	r0, [pc, #4]	@ (800a810 <__sfp_lock_acquire+0x8>)
 800a80a:	f000 ba04 	b.w	800ac16 <__retarget_lock_acquire_recursive>
 800a80e:	bf00      	nop
 800a810:	2400063d 	.word	0x2400063d

0800a814 <__sfp_lock_release>:
 800a814:	4801      	ldr	r0, [pc, #4]	@ (800a81c <__sfp_lock_release+0x8>)
 800a816:	f000 b9ff 	b.w	800ac18 <__retarget_lock_release_recursive>
 800a81a:	bf00      	nop
 800a81c:	2400063d 	.word	0x2400063d

0800a820 <__sinit>:
 800a820:	b510      	push	{r4, lr}
 800a822:	4604      	mov	r4, r0
 800a824:	f7ff fff0 	bl	800a808 <__sfp_lock_acquire>
 800a828:	6a23      	ldr	r3, [r4, #32]
 800a82a:	b11b      	cbz	r3, 800a834 <__sinit+0x14>
 800a82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a830:	f7ff bff0 	b.w	800a814 <__sfp_lock_release>
 800a834:	4b04      	ldr	r3, [pc, #16]	@ (800a848 <__sinit+0x28>)
 800a836:	6223      	str	r3, [r4, #32]
 800a838:	4b04      	ldr	r3, [pc, #16]	@ (800a84c <__sinit+0x2c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1f5      	bne.n	800a82c <__sinit+0xc>
 800a840:	f7ff ffc4 	bl	800a7cc <global_stdio_init.part.0>
 800a844:	e7f2      	b.n	800a82c <__sinit+0xc>
 800a846:	bf00      	nop
 800a848:	0800a78d 	.word	0x0800a78d
 800a84c:	24000634 	.word	0x24000634

0800a850 <_fwalk_sglue>:
 800a850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a854:	4607      	mov	r7, r0
 800a856:	4688      	mov	r8, r1
 800a858:	4614      	mov	r4, r2
 800a85a:	2600      	movs	r6, #0
 800a85c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a860:	f1b9 0901 	subs.w	r9, r9, #1
 800a864:	d505      	bpl.n	800a872 <_fwalk_sglue+0x22>
 800a866:	6824      	ldr	r4, [r4, #0]
 800a868:	2c00      	cmp	r4, #0
 800a86a:	d1f7      	bne.n	800a85c <_fwalk_sglue+0xc>
 800a86c:	4630      	mov	r0, r6
 800a86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d907      	bls.n	800a888 <_fwalk_sglue+0x38>
 800a878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a87c:	3301      	adds	r3, #1
 800a87e:	d003      	beq.n	800a888 <_fwalk_sglue+0x38>
 800a880:	4629      	mov	r1, r5
 800a882:	4638      	mov	r0, r7
 800a884:	47c0      	blx	r8
 800a886:	4306      	orrs	r6, r0
 800a888:	3568      	adds	r5, #104	@ 0x68
 800a88a:	e7e9      	b.n	800a860 <_fwalk_sglue+0x10>

0800a88c <iprintf>:
 800a88c:	b40f      	push	{r0, r1, r2, r3}
 800a88e:	b507      	push	{r0, r1, r2, lr}
 800a890:	4906      	ldr	r1, [pc, #24]	@ (800a8ac <iprintf+0x20>)
 800a892:	ab04      	add	r3, sp, #16
 800a894:	6808      	ldr	r0, [r1, #0]
 800a896:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89a:	6881      	ldr	r1, [r0, #8]
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	f001 fc49 	bl	800c134 <_vfiprintf_r>
 800a8a2:	b003      	add	sp, #12
 800a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a8:	b004      	add	sp, #16
 800a8aa:	4770      	bx	lr
 800a8ac:	2400001c 	.word	0x2400001c

0800a8b0 <_puts_r>:
 800a8b0:	6a03      	ldr	r3, [r0, #32]
 800a8b2:	b570      	push	{r4, r5, r6, lr}
 800a8b4:	6884      	ldr	r4, [r0, #8]
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	460e      	mov	r6, r1
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <_puts_r+0x10>
 800a8bc:	f7ff ffb0 	bl	800a820 <__sinit>
 800a8c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8c2:	07db      	lsls	r3, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_puts_r+0x22>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	0598      	lsls	r0, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_puts_r+0x22>
 800a8cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ce:	f000 f9a2 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	0719      	lsls	r1, r3, #28
 800a8d6:	d502      	bpl.n	800a8de <_puts_r+0x2e>
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d135      	bne.n	800a94a <_puts_r+0x9a>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 f8c5 	bl	800aa70 <__swsetup_r>
 800a8e6:	b380      	cbz	r0, 800a94a <_puts_r+0x9a>
 800a8e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a8ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8ee:	07da      	lsls	r2, r3, #31
 800a8f0:	d405      	bmi.n	800a8fe <_puts_r+0x4e>
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	059b      	lsls	r3, r3, #22
 800a8f6:	d402      	bmi.n	800a8fe <_puts_r+0x4e>
 800a8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8fa:	f000 f98d 	bl	800ac18 <__retarget_lock_release_recursive>
 800a8fe:	4628      	mov	r0, r5
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	2b00      	cmp	r3, #0
 800a904:	da04      	bge.n	800a910 <_puts_r+0x60>
 800a906:	69a2      	ldr	r2, [r4, #24]
 800a908:	429a      	cmp	r2, r3
 800a90a:	dc17      	bgt.n	800a93c <_puts_r+0x8c>
 800a90c:	290a      	cmp	r1, #10
 800a90e:	d015      	beq.n	800a93c <_puts_r+0x8c>
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	7019      	strb	r1, [r3, #0]
 800a918:	68a3      	ldr	r3, [r4, #8]
 800a91a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a91e:	3b01      	subs	r3, #1
 800a920:	60a3      	str	r3, [r4, #8]
 800a922:	2900      	cmp	r1, #0
 800a924:	d1ed      	bne.n	800a902 <_puts_r+0x52>
 800a926:	2b00      	cmp	r3, #0
 800a928:	da11      	bge.n	800a94e <_puts_r+0x9e>
 800a92a:	4622      	mov	r2, r4
 800a92c:	210a      	movs	r1, #10
 800a92e:	4628      	mov	r0, r5
 800a930:	f000 f85f 	bl	800a9f2 <__swbuf_r>
 800a934:	3001      	adds	r0, #1
 800a936:	d0d7      	beq.n	800a8e8 <_puts_r+0x38>
 800a938:	250a      	movs	r5, #10
 800a93a:	e7d7      	b.n	800a8ec <_puts_r+0x3c>
 800a93c:	4622      	mov	r2, r4
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 f857 	bl	800a9f2 <__swbuf_r>
 800a944:	3001      	adds	r0, #1
 800a946:	d1e7      	bne.n	800a918 <_puts_r+0x68>
 800a948:	e7ce      	b.n	800a8e8 <_puts_r+0x38>
 800a94a:	3e01      	subs	r6, #1
 800a94c:	e7e4      	b.n	800a918 <_puts_r+0x68>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	220a      	movs	r2, #10
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e7ee      	b.n	800a938 <_puts_r+0x88>
	...

0800a95c <puts>:
 800a95c:	4b02      	ldr	r3, [pc, #8]	@ (800a968 <puts+0xc>)
 800a95e:	4601      	mov	r1, r0
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	f7ff bfa5 	b.w	800a8b0 <_puts_r>
 800a966:	bf00      	nop
 800a968:	2400001c 	.word	0x2400001c

0800a96c <__sread>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	460c      	mov	r4, r1
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f900 	bl	800ab78 <_read_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	bfab      	itete	ge
 800a97c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a97e:	89a3      	ldrhlt	r3, [r4, #12]
 800a980:	181b      	addge	r3, r3, r0
 800a982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a986:	bfac      	ite	ge
 800a988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a98a:	81a3      	strhlt	r3, [r4, #12]
 800a98c:	bd10      	pop	{r4, pc}

0800a98e <__swrite>:
 800a98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a992:	461f      	mov	r7, r3
 800a994:	898b      	ldrh	r3, [r1, #12]
 800a996:	05db      	lsls	r3, r3, #23
 800a998:	4605      	mov	r5, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4616      	mov	r6, r2
 800a99e:	d505      	bpl.n	800a9ac <__swrite+0x1e>
 800a9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f000 f8d4 	bl	800ab54 <_lseek_r>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	4628      	mov	r0, r5
 800a9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	f000 b8eb 	b.w	800ab9c <_write_r>

0800a9c6 <__sseek>:
 800a9c6:	b510      	push	{r4, lr}
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ce:	f000 f8c1 	bl	800ab54 <_lseek_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	bf15      	itete	ne
 800a9d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9e2:	81a3      	strheq	r3, [r4, #12]
 800a9e4:	bf18      	it	ne
 800a9e6:	81a3      	strhne	r3, [r4, #12]
 800a9e8:	bd10      	pop	{r4, pc}

0800a9ea <__sclose>:
 800a9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ee:	f000 b8a1 	b.w	800ab34 <_close_r>

0800a9f2 <__swbuf_r>:
 800a9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f4:	460e      	mov	r6, r1
 800a9f6:	4614      	mov	r4, r2
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	b118      	cbz	r0, 800aa04 <__swbuf_r+0x12>
 800a9fc:	6a03      	ldr	r3, [r0, #32]
 800a9fe:	b90b      	cbnz	r3, 800aa04 <__swbuf_r+0x12>
 800aa00:	f7ff ff0e 	bl	800a820 <__sinit>
 800aa04:	69a3      	ldr	r3, [r4, #24]
 800aa06:	60a3      	str	r3, [r4, #8]
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	071a      	lsls	r2, r3, #28
 800aa0c:	d501      	bpl.n	800aa12 <__swbuf_r+0x20>
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	b943      	cbnz	r3, 800aa24 <__swbuf_r+0x32>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 f82b 	bl	800aa70 <__swsetup_r>
 800aa1a:	b118      	cbz	r0, 800aa24 <__swbuf_r+0x32>
 800aa1c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa20:	4638      	mov	r0, r7
 800aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	6922      	ldr	r2, [r4, #16]
 800aa28:	1a98      	subs	r0, r3, r2
 800aa2a:	6963      	ldr	r3, [r4, #20]
 800aa2c:	b2f6      	uxtb	r6, r6
 800aa2e:	4283      	cmp	r3, r0
 800aa30:	4637      	mov	r7, r6
 800aa32:	dc05      	bgt.n	800aa40 <__swbuf_r+0x4e>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	f001 fd18 	bl	800c46c <_fflush_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d1ed      	bne.n	800aa1c <__swbuf_r+0x2a>
 800aa40:	68a3      	ldr	r3, [r4, #8]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	6022      	str	r2, [r4, #0]
 800aa4c:	701e      	strb	r6, [r3, #0]
 800aa4e:	6962      	ldr	r2, [r4, #20]
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d004      	beq.n	800aa60 <__swbuf_r+0x6e>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	07db      	lsls	r3, r3, #31
 800aa5a:	d5e1      	bpl.n	800aa20 <__swbuf_r+0x2e>
 800aa5c:	2e0a      	cmp	r6, #10
 800aa5e:	d1df      	bne.n	800aa20 <__swbuf_r+0x2e>
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f001 fd02 	bl	800c46c <_fflush_r>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d0d9      	beq.n	800aa20 <__swbuf_r+0x2e>
 800aa6c:	e7d6      	b.n	800aa1c <__swbuf_r+0x2a>
	...

0800aa70 <__swsetup_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4b29      	ldr	r3, [pc, #164]	@ (800ab18 <__swsetup_r+0xa8>)
 800aa74:	4605      	mov	r5, r0
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	460c      	mov	r4, r1
 800aa7a:	b118      	cbz	r0, 800aa84 <__swsetup_r+0x14>
 800aa7c:	6a03      	ldr	r3, [r0, #32]
 800aa7e:	b90b      	cbnz	r3, 800aa84 <__swsetup_r+0x14>
 800aa80:	f7ff fece 	bl	800a820 <__sinit>
 800aa84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa88:	0719      	lsls	r1, r3, #28
 800aa8a:	d422      	bmi.n	800aad2 <__swsetup_r+0x62>
 800aa8c:	06da      	lsls	r2, r3, #27
 800aa8e:	d407      	bmi.n	800aaa0 <__swsetup_r+0x30>
 800aa90:	2209      	movs	r2, #9
 800aa92:	602a      	str	r2, [r5, #0]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	e033      	b.n	800ab08 <__swsetup_r+0x98>
 800aaa0:	0758      	lsls	r0, r3, #29
 800aaa2:	d512      	bpl.n	800aaca <__swsetup_r+0x5a>
 800aaa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaa6:	b141      	cbz	r1, 800aaba <__swsetup_r+0x4a>
 800aaa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaac:	4299      	cmp	r1, r3
 800aaae:	d002      	beq.n	800aab6 <__swsetup_r+0x46>
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 fe93 	bl	800b7dc <_free_r>
 800aab6:	2300      	movs	r3, #0
 800aab8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	2300      	movs	r3, #0
 800aac4:	6063      	str	r3, [r4, #4]
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f043 0308 	orr.w	r3, r3, #8
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	b94b      	cbnz	r3, 800aaea <__swsetup_r+0x7a>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aadc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aae0:	d003      	beq.n	800aaea <__swsetup_r+0x7a>
 800aae2:	4621      	mov	r1, r4
 800aae4:	4628      	mov	r0, r5
 800aae6:	f001 fd0f 	bl	800c508 <__smakebuf_r>
 800aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaee:	f013 0201 	ands.w	r2, r3, #1
 800aaf2:	d00a      	beq.n	800ab0a <__swsetup_r+0x9a>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	60a2      	str	r2, [r4, #8]
 800aaf8:	6962      	ldr	r2, [r4, #20]
 800aafa:	4252      	negs	r2, r2
 800aafc:	61a2      	str	r2, [r4, #24]
 800aafe:	6922      	ldr	r2, [r4, #16]
 800ab00:	b942      	cbnz	r2, 800ab14 <__swsetup_r+0xa4>
 800ab02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab06:	d1c5      	bne.n	800aa94 <__swsetup_r+0x24>
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	0799      	lsls	r1, r3, #30
 800ab0c:	bf58      	it	pl
 800ab0e:	6962      	ldrpl	r2, [r4, #20]
 800ab10:	60a2      	str	r2, [r4, #8]
 800ab12:	e7f4      	b.n	800aafe <__swsetup_r+0x8e>
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7f7      	b.n	800ab08 <__swsetup_r+0x98>
 800ab18:	2400001c 	.word	0x2400001c

0800ab1c <memset>:
 800ab1c:	4402      	add	r2, r0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d100      	bne.n	800ab26 <memset+0xa>
 800ab24:	4770      	bx	lr
 800ab26:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2a:	e7f9      	b.n	800ab20 <memset+0x4>

0800ab2c <_localeconv_r>:
 800ab2c:	4800      	ldr	r0, [pc, #0]	@ (800ab30 <_localeconv_r+0x4>)
 800ab2e:	4770      	bx	lr
 800ab30:	2400015c 	.word	0x2400015c

0800ab34 <_close_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	@ (800ab50 <_close_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f6 fc75 	bl	800142e <_close>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_close_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_close_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	24000638 	.word	0x24000638

0800ab54 <_lseek_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d07      	ldr	r5, [pc, #28]	@ (800ab74 <_lseek_r+0x20>)
 800ab58:	4604      	mov	r4, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f6 fc8a 	bl	800147c <_lseek>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_lseek_r+0x1e>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_lseek_r+0x1e>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	24000638 	.word	0x24000638

0800ab78 <_read_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	@ (800ab98 <_read_r+0x20>)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f7f6 fc34 	bl	80013f4 <_read>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_read_r+0x1e>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_read_r+0x1e>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	24000638 	.word	0x24000638

0800ab9c <_write_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d07      	ldr	r5, [pc, #28]	@ (800abbc <_write_r+0x20>)
 800aba0:	4604      	mov	r4, r0
 800aba2:	4608      	mov	r0, r1
 800aba4:	4611      	mov	r1, r2
 800aba6:	2200      	movs	r2, #0
 800aba8:	602a      	str	r2, [r5, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	f7f5 fd80 	bl	80006b0 <_write>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_write_r+0x1e>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_write_r+0x1e>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	24000638 	.word	0x24000638

0800abc0 <__errno>:
 800abc0:	4b01      	ldr	r3, [pc, #4]	@ (800abc8 <__errno+0x8>)
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	2400001c 	.word	0x2400001c

0800abcc <__libc_init_array>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4d0d      	ldr	r5, [pc, #52]	@ (800ac04 <__libc_init_array+0x38>)
 800abd0:	4c0d      	ldr	r4, [pc, #52]	@ (800ac08 <__libc_init_array+0x3c>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	2600      	movs	r6, #0
 800abd8:	42a6      	cmp	r6, r4
 800abda:	d109      	bne.n	800abf0 <__libc_init_array+0x24>
 800abdc:	4d0b      	ldr	r5, [pc, #44]	@ (800ac0c <__libc_init_array+0x40>)
 800abde:	4c0c      	ldr	r4, [pc, #48]	@ (800ac10 <__libc_init_array+0x44>)
 800abe0:	f001 fdbe 	bl	800c760 <_init>
 800abe4:	1b64      	subs	r4, r4, r5
 800abe6:	10a4      	asrs	r4, r4, #2
 800abe8:	2600      	movs	r6, #0
 800abea:	42a6      	cmp	r6, r4
 800abec:	d105      	bne.n	800abfa <__libc_init_array+0x2e>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf4:	4798      	blx	r3
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7ee      	b.n	800abd8 <__libc_init_array+0xc>
 800abfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfe:	4798      	blx	r3
 800ac00:	3601      	adds	r6, #1
 800ac02:	e7f2      	b.n	800abea <__libc_init_array+0x1e>
 800ac04:	0800cc30 	.word	0x0800cc30
 800ac08:	0800cc30 	.word	0x0800cc30
 800ac0c:	0800cc30 	.word	0x0800cc30
 800ac10:	0800cc34 	.word	0x0800cc34

0800ac14 <__retarget_lock_init_recursive>:
 800ac14:	4770      	bx	lr

0800ac16 <__retarget_lock_acquire_recursive>:
 800ac16:	4770      	bx	lr

0800ac18 <__retarget_lock_release_recursive>:
 800ac18:	4770      	bx	lr

0800ac1a <quorem>:
 800ac1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1e:	6903      	ldr	r3, [r0, #16]
 800ac20:	690c      	ldr	r4, [r1, #16]
 800ac22:	42a3      	cmp	r3, r4
 800ac24:	4607      	mov	r7, r0
 800ac26:	db7e      	blt.n	800ad26 <quorem+0x10c>
 800ac28:	3c01      	subs	r4, #1
 800ac2a:	f101 0814 	add.w	r8, r1, #20
 800ac2e:	00a3      	lsls	r3, r4, #2
 800ac30:	f100 0514 	add.w	r5, r0, #20
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac44:	3301      	adds	r3, #1
 800ac46:	429a      	cmp	r2, r3
 800ac48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac50:	d32e      	bcc.n	800acb0 <quorem+0x96>
 800ac52:	f04f 0a00 	mov.w	sl, #0
 800ac56:	46c4      	mov	ip, r8
 800ac58:	46ae      	mov	lr, r5
 800ac5a:	46d3      	mov	fp, sl
 800ac5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac60:	b298      	uxth	r0, r3
 800ac62:	fb06 a000 	mla	r0, r6, r0, sl
 800ac66:	0c02      	lsrs	r2, r0, #16
 800ac68:	0c1b      	lsrs	r3, r3, #16
 800ac6a:	fb06 2303 	mla	r3, r6, r3, r2
 800ac6e:	f8de 2000 	ldr.w	r2, [lr]
 800ac72:	b280      	uxth	r0, r0
 800ac74:	b292      	uxth	r2, r2
 800ac76:	1a12      	subs	r2, r2, r0
 800ac78:	445a      	add	r2, fp
 800ac7a:	f8de 0000 	ldr.w	r0, [lr]
 800ac7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac92:	45e1      	cmp	r9, ip
 800ac94:	f84e 2b04 	str.w	r2, [lr], #4
 800ac98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac9c:	d2de      	bcs.n	800ac5c <quorem+0x42>
 800ac9e:	9b00      	ldr	r3, [sp, #0]
 800aca0:	58eb      	ldr	r3, [r5, r3]
 800aca2:	b92b      	cbnz	r3, 800acb0 <quorem+0x96>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	3b04      	subs	r3, #4
 800aca8:	429d      	cmp	r5, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	d32f      	bcc.n	800ad0e <quorem+0xf4>
 800acae:	613c      	str	r4, [r7, #16]
 800acb0:	4638      	mov	r0, r7
 800acb2:	f001 f90d 	bl	800bed0 <__mcmp>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	db25      	blt.n	800ad06 <quorem+0xec>
 800acba:	4629      	mov	r1, r5
 800acbc:	2000      	movs	r0, #0
 800acbe:	f858 2b04 	ldr.w	r2, [r8], #4
 800acc2:	f8d1 c000 	ldr.w	ip, [r1]
 800acc6:	fa1f fe82 	uxth.w	lr, r2
 800acca:	fa1f f38c 	uxth.w	r3, ip
 800acce:	eba3 030e 	sub.w	r3, r3, lr
 800acd2:	4403      	add	r3, r0
 800acd4:	0c12      	lsrs	r2, r2, #16
 800acd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800acda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace4:	45c1      	cmp	r9, r8
 800ace6:	f841 3b04 	str.w	r3, [r1], #4
 800acea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acee:	d2e6      	bcs.n	800acbe <quorem+0xa4>
 800acf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acf8:	b922      	cbnz	r2, 800ad04 <quorem+0xea>
 800acfa:	3b04      	subs	r3, #4
 800acfc:	429d      	cmp	r5, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	d30b      	bcc.n	800ad1a <quorem+0x100>
 800ad02:	613c      	str	r4, [r7, #16]
 800ad04:	3601      	adds	r6, #1
 800ad06:	4630      	mov	r0, r6
 800ad08:	b003      	add	sp, #12
 800ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	3b04      	subs	r3, #4
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	d1cb      	bne.n	800acae <quorem+0x94>
 800ad16:	3c01      	subs	r4, #1
 800ad18:	e7c6      	b.n	800aca8 <quorem+0x8e>
 800ad1a:	6812      	ldr	r2, [r2, #0]
 800ad1c:	3b04      	subs	r3, #4
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1ef      	bne.n	800ad02 <quorem+0xe8>
 800ad22:	3c01      	subs	r4, #1
 800ad24:	e7ea      	b.n	800acfc <quorem+0xe2>
 800ad26:	2000      	movs	r0, #0
 800ad28:	e7ee      	b.n	800ad08 <quorem+0xee>
 800ad2a:	0000      	movs	r0, r0
 800ad2c:	0000      	movs	r0, r0
	...

0800ad30 <_dtoa_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	ed2d 8b02 	vpush	{d8}
 800ad38:	69c7      	ldr	r7, [r0, #28]
 800ad3a:	b091      	sub	sp, #68	@ 0x44
 800ad3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad40:	ec55 4b10 	vmov	r4, r5, d0
 800ad44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ad46:	9107      	str	r1, [sp, #28]
 800ad48:	4681      	mov	r9, r0
 800ad4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad4c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad4e:	b97f      	cbnz	r7, 800ad70 <_dtoa_r+0x40>
 800ad50:	2010      	movs	r0, #16
 800ad52:	f000 fd8d 	bl	800b870 <malloc>
 800ad56:	4602      	mov	r2, r0
 800ad58:	f8c9 001c 	str.w	r0, [r9, #28]
 800ad5c:	b920      	cbnz	r0, 800ad68 <_dtoa_r+0x38>
 800ad5e:	4ba0      	ldr	r3, [pc, #640]	@ (800afe0 <_dtoa_r+0x2b0>)
 800ad60:	21ef      	movs	r1, #239	@ 0xef
 800ad62:	48a0      	ldr	r0, [pc, #640]	@ (800afe4 <_dtoa_r+0x2b4>)
 800ad64:	f001 fc4c 	bl	800c600 <__assert_func>
 800ad68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad6c:	6007      	str	r7, [r0, #0]
 800ad6e:	60c7      	str	r7, [r0, #12]
 800ad70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad74:	6819      	ldr	r1, [r3, #0]
 800ad76:	b159      	cbz	r1, 800ad90 <_dtoa_r+0x60>
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	604a      	str	r2, [r1, #4]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4093      	lsls	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
 800ad82:	4648      	mov	r0, r9
 800ad84:	f000 fe6a 	bl	800ba5c <_Bfree>
 800ad88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	1e2b      	subs	r3, r5, #0
 800ad92:	bfbb      	ittet	lt
 800ad94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad98:	9303      	strlt	r3, [sp, #12]
 800ad9a:	2300      	movge	r3, #0
 800ad9c:	2201      	movlt	r2, #1
 800ad9e:	bfac      	ite	ge
 800ada0:	6033      	strge	r3, [r6, #0]
 800ada2:	6032      	strlt	r2, [r6, #0]
 800ada4:	4b90      	ldr	r3, [pc, #576]	@ (800afe8 <_dtoa_r+0x2b8>)
 800ada6:	9e03      	ldr	r6, [sp, #12]
 800ada8:	43b3      	bics	r3, r6
 800adaa:	d110      	bne.n	800adce <_dtoa_r+0x9e>
 800adac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adae:	f242 730f 	movw	r3, #9999	@ 0x270f
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800adb8:	4323      	orrs	r3, r4
 800adba:	f000 84de 	beq.w	800b77a <_dtoa_r+0xa4a>
 800adbe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adc0:	4f8a      	ldr	r7, [pc, #552]	@ (800afec <_dtoa_r+0x2bc>)
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 84e0 	beq.w	800b788 <_dtoa_r+0xa58>
 800adc8:	1cfb      	adds	r3, r7, #3
 800adca:	f000 bcdb 	b.w	800b784 <_dtoa_r+0xa54>
 800adce:	ed9d 8b02 	vldr	d8, [sp, #8]
 800add2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	d10a      	bne.n	800adf2 <_dtoa_r+0xc2>
 800addc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adde:	2301      	movs	r3, #1
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ade4:	b113      	cbz	r3, 800adec <_dtoa_r+0xbc>
 800ade6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ade8:	4b81      	ldr	r3, [pc, #516]	@ (800aff0 <_dtoa_r+0x2c0>)
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	4f81      	ldr	r7, [pc, #516]	@ (800aff4 <_dtoa_r+0x2c4>)
 800adee:	f000 bccb 	b.w	800b788 <_dtoa_r+0xa58>
 800adf2:	aa0e      	add	r2, sp, #56	@ 0x38
 800adf4:	a90f      	add	r1, sp, #60	@ 0x3c
 800adf6:	4648      	mov	r0, r9
 800adf8:	eeb0 0b48 	vmov.f64	d0, d8
 800adfc:	f001 f918 	bl	800c030 <__d2b>
 800ae00:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ae04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d045      	beq.n	800ae98 <_dtoa_r+0x168>
 800ae0c:	eeb0 7b48 	vmov.f64	d7, d8
 800ae10:	ee18 1a90 	vmov	r1, s17
 800ae14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ae18:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ae1c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ae20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ae24:	2500      	movs	r5, #0
 800ae26:	ee07 1a90 	vmov	s15, r1
 800ae2a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ae2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800afc8 <_dtoa_r+0x298>
 800ae32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae36:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800afd0 <_dtoa_r+0x2a0>
 800ae3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ae3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800afd8 <_dtoa_r+0x2a8>
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ae4a:	eeb0 7b46 	vmov.f64	d7, d6
 800ae4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ae52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ae56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ae5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5e:	ee16 8a90 	vmov	r8, s13
 800ae62:	d508      	bpl.n	800ae76 <_dtoa_r+0x146>
 800ae64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ae68:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae70:	bf18      	it	ne
 800ae72:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ae76:	f1b8 0f16 	cmp.w	r8, #22
 800ae7a:	d82b      	bhi.n	800aed4 <_dtoa_r+0x1a4>
 800ae7c:	495e      	ldr	r1, [pc, #376]	@ (800aff8 <_dtoa_r+0x2c8>)
 800ae7e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ae82:	ed91 7b00 	vldr	d7, [r1]
 800ae86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	d501      	bpl.n	800ae94 <_dtoa_r+0x164>
 800ae90:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae94:	2100      	movs	r1, #0
 800ae96:	e01e      	b.n	800aed6 <_dtoa_r+0x1a6>
 800ae98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800aea0:	2920      	cmp	r1, #32
 800aea2:	bfc1      	itttt	gt
 800aea4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800aea8:	408e      	lslgt	r6, r1
 800aeaa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800aeae:	fa24 f101 	lsrgt.w	r1, r4, r1
 800aeb2:	bfd6      	itet	le
 800aeb4:	f1c1 0120 	rsble	r1, r1, #32
 800aeb8:	4331      	orrgt	r1, r6
 800aeba:	fa04 f101 	lslle.w	r1, r4, r1
 800aebe:	ee07 1a90 	vmov	s15, r1
 800aec2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aec6:	3b01      	subs	r3, #1
 800aec8:	ee17 1a90 	vmov	r1, s15
 800aecc:	2501      	movs	r5, #1
 800aece:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800aed2:	e7a8      	b.n	800ae26 <_dtoa_r+0xf6>
 800aed4:	2101      	movs	r1, #1
 800aed6:	1ad2      	subs	r2, r2, r3
 800aed8:	1e53      	subs	r3, r2, #1
 800aeda:	9306      	str	r3, [sp, #24]
 800aedc:	bf45      	ittet	mi
 800aede:	f1c2 0301 	rsbmi	r3, r2, #1
 800aee2:	9305      	strmi	r3, [sp, #20]
 800aee4:	2300      	movpl	r3, #0
 800aee6:	2300      	movmi	r3, #0
 800aee8:	bf4c      	ite	mi
 800aeea:	9306      	strmi	r3, [sp, #24]
 800aeec:	9305      	strpl	r3, [sp, #20]
 800aeee:	f1b8 0f00 	cmp.w	r8, #0
 800aef2:	910c      	str	r1, [sp, #48]	@ 0x30
 800aef4:	db18      	blt.n	800af28 <_dtoa_r+0x1f8>
 800aef6:	9b06      	ldr	r3, [sp, #24]
 800aef8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aefc:	4443      	add	r3, r8
 800aefe:	9306      	str	r3, [sp, #24]
 800af00:	2300      	movs	r3, #0
 800af02:	9a07      	ldr	r2, [sp, #28]
 800af04:	2a09      	cmp	r2, #9
 800af06:	d849      	bhi.n	800af9c <_dtoa_r+0x26c>
 800af08:	2a05      	cmp	r2, #5
 800af0a:	bfc4      	itt	gt
 800af0c:	3a04      	subgt	r2, #4
 800af0e:	9207      	strgt	r2, [sp, #28]
 800af10:	9a07      	ldr	r2, [sp, #28]
 800af12:	f1a2 0202 	sub.w	r2, r2, #2
 800af16:	bfcc      	ite	gt
 800af18:	2400      	movgt	r4, #0
 800af1a:	2401      	movle	r4, #1
 800af1c:	2a03      	cmp	r2, #3
 800af1e:	d848      	bhi.n	800afb2 <_dtoa_r+0x282>
 800af20:	e8df f002 	tbb	[pc, r2]
 800af24:	3a2c2e0b 	.word	0x3a2c2e0b
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	2200      	movs	r2, #0
 800af2c:	eba3 0308 	sub.w	r3, r3, r8
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	920a      	str	r2, [sp, #40]	@ 0x28
 800af34:	f1c8 0300 	rsb	r3, r8, #0
 800af38:	e7e3      	b.n	800af02 <_dtoa_r+0x1d2>
 800af3a:	2200      	movs	r2, #0
 800af3c:	9208      	str	r2, [sp, #32]
 800af3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af40:	2a00      	cmp	r2, #0
 800af42:	dc39      	bgt.n	800afb8 <_dtoa_r+0x288>
 800af44:	f04f 0b01 	mov.w	fp, #1
 800af48:	46da      	mov	sl, fp
 800af4a:	465a      	mov	r2, fp
 800af4c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800af50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800af54:	2100      	movs	r1, #0
 800af56:	2004      	movs	r0, #4
 800af58:	f100 0614 	add.w	r6, r0, #20
 800af5c:	4296      	cmp	r6, r2
 800af5e:	d930      	bls.n	800afc2 <_dtoa_r+0x292>
 800af60:	6079      	str	r1, [r7, #4]
 800af62:	4648      	mov	r0, r9
 800af64:	9304      	str	r3, [sp, #16]
 800af66:	f000 fd39 	bl	800b9dc <_Balloc>
 800af6a:	9b04      	ldr	r3, [sp, #16]
 800af6c:	4607      	mov	r7, r0
 800af6e:	2800      	cmp	r0, #0
 800af70:	d146      	bne.n	800b000 <_dtoa_r+0x2d0>
 800af72:	4b22      	ldr	r3, [pc, #136]	@ (800affc <_dtoa_r+0x2cc>)
 800af74:	4602      	mov	r2, r0
 800af76:	f240 11af 	movw	r1, #431	@ 0x1af
 800af7a:	e6f2      	b.n	800ad62 <_dtoa_r+0x32>
 800af7c:	2201      	movs	r2, #1
 800af7e:	e7dd      	b.n	800af3c <_dtoa_r+0x20c>
 800af80:	2200      	movs	r2, #0
 800af82:	9208      	str	r2, [sp, #32]
 800af84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af86:	eb08 0b02 	add.w	fp, r8, r2
 800af8a:	f10b 0a01 	add.w	sl, fp, #1
 800af8e:	4652      	mov	r2, sl
 800af90:	2a01      	cmp	r2, #1
 800af92:	bfb8      	it	lt
 800af94:	2201      	movlt	r2, #1
 800af96:	e7db      	b.n	800af50 <_dtoa_r+0x220>
 800af98:	2201      	movs	r2, #1
 800af9a:	e7f2      	b.n	800af82 <_dtoa_r+0x252>
 800af9c:	2401      	movs	r4, #1
 800af9e:	2200      	movs	r2, #0
 800afa0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800afa4:	f04f 3bff 	mov.w	fp, #4294967295
 800afa8:	2100      	movs	r1, #0
 800afaa:	46da      	mov	sl, fp
 800afac:	2212      	movs	r2, #18
 800afae:	9109      	str	r1, [sp, #36]	@ 0x24
 800afb0:	e7ce      	b.n	800af50 <_dtoa_r+0x220>
 800afb2:	2201      	movs	r2, #1
 800afb4:	9208      	str	r2, [sp, #32]
 800afb6:	e7f5      	b.n	800afa4 <_dtoa_r+0x274>
 800afb8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800afbc:	46da      	mov	sl, fp
 800afbe:	465a      	mov	r2, fp
 800afc0:	e7c6      	b.n	800af50 <_dtoa_r+0x220>
 800afc2:	3101      	adds	r1, #1
 800afc4:	0040      	lsls	r0, r0, #1
 800afc6:	e7c7      	b.n	800af58 <_dtoa_r+0x228>
 800afc8:	636f4361 	.word	0x636f4361
 800afcc:	3fd287a7 	.word	0x3fd287a7
 800afd0:	8b60c8b3 	.word	0x8b60c8b3
 800afd4:	3fc68a28 	.word	0x3fc68a28
 800afd8:	509f79fb 	.word	0x509f79fb
 800afdc:	3fd34413 	.word	0x3fd34413
 800afe0:	0800c8f5 	.word	0x0800c8f5
 800afe4:	0800c90c 	.word	0x0800c90c
 800afe8:	7ff00000 	.word	0x7ff00000
 800afec:	0800c8f1 	.word	0x0800c8f1
 800aff0:	0800c8c5 	.word	0x0800c8c5
 800aff4:	0800c8c4 	.word	0x0800c8c4
 800aff8:	0800ca08 	.word	0x0800ca08
 800affc:	0800c964 	.word	0x0800c964
 800b000:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b004:	f1ba 0f0e 	cmp.w	sl, #14
 800b008:	6010      	str	r0, [r2, #0]
 800b00a:	d86f      	bhi.n	800b0ec <_dtoa_r+0x3bc>
 800b00c:	2c00      	cmp	r4, #0
 800b00e:	d06d      	beq.n	800b0ec <_dtoa_r+0x3bc>
 800b010:	f1b8 0f00 	cmp.w	r8, #0
 800b014:	f340 80c2 	ble.w	800b19c <_dtoa_r+0x46c>
 800b018:	4aca      	ldr	r2, [pc, #808]	@ (800b344 <_dtoa_r+0x614>)
 800b01a:	f008 010f 	and.w	r1, r8, #15
 800b01e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b022:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b026:	ed92 7b00 	vldr	d7, [r2]
 800b02a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b02e:	f000 80a9 	beq.w	800b184 <_dtoa_r+0x454>
 800b032:	4ac5      	ldr	r2, [pc, #788]	@ (800b348 <_dtoa_r+0x618>)
 800b034:	ed92 6b08 	vldr	d6, [r2, #32]
 800b038:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b03c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b040:	f001 010f 	and.w	r1, r1, #15
 800b044:	2203      	movs	r2, #3
 800b046:	48c0      	ldr	r0, [pc, #768]	@ (800b348 <_dtoa_r+0x618>)
 800b048:	2900      	cmp	r1, #0
 800b04a:	f040 809d 	bne.w	800b188 <_dtoa_r+0x458>
 800b04e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b052:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b056:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b05a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b05c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b060:	2900      	cmp	r1, #0
 800b062:	f000 80c1 	beq.w	800b1e8 <_dtoa_r+0x4b8>
 800b066:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b06a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b072:	f140 80b9 	bpl.w	800b1e8 <_dtoa_r+0x4b8>
 800b076:	f1ba 0f00 	cmp.w	sl, #0
 800b07a:	f000 80b5 	beq.w	800b1e8 <_dtoa_r+0x4b8>
 800b07e:	f1bb 0f00 	cmp.w	fp, #0
 800b082:	dd31      	ble.n	800b0e8 <_dtoa_r+0x3b8>
 800b084:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b088:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b090:	f108 31ff 	add.w	r1, r8, #4294967295
 800b094:	9104      	str	r1, [sp, #16]
 800b096:	3201      	adds	r2, #1
 800b098:	465c      	mov	r4, fp
 800b09a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b09e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b0a2:	ee07 2a90 	vmov	s15, r2
 800b0a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b0aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b0ae:	ee15 2a90 	vmov	r2, s11
 800b0b2:	ec51 0b15 	vmov	r0, r1, d5
 800b0b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	f040 8098 	bne.w	800b1f0 <_dtoa_r+0x4c0>
 800b0c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b0c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b0c8:	ec41 0b17 	vmov	d7, r0, r1
 800b0cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d4:	f300 8261 	bgt.w	800b59a <_dtoa_r+0x86a>
 800b0d8:	eeb1 7b47 	vneg.f64	d7, d7
 800b0dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e4:	f100 80f5 	bmi.w	800b2d2 <_dtoa_r+0x5a2>
 800b0e8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	f2c0 812c 	blt.w	800b34c <_dtoa_r+0x61c>
 800b0f4:	f1b8 0f0e 	cmp.w	r8, #14
 800b0f8:	f300 8128 	bgt.w	800b34c <_dtoa_r+0x61c>
 800b0fc:	4b91      	ldr	r3, [pc, #580]	@ (800b344 <_dtoa_r+0x614>)
 800b0fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b102:	ed93 6b00 	vldr	d6, [r3]
 800b106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da03      	bge.n	800b114 <_dtoa_r+0x3e4>
 800b10c:	f1ba 0f00 	cmp.w	sl, #0
 800b110:	f340 80d2 	ble.w	800b2b8 <_dtoa_r+0x588>
 800b114:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b11c:	463e      	mov	r6, r7
 800b11e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b122:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b126:	ee15 3a10 	vmov	r3, s10
 800b12a:	3330      	adds	r3, #48	@ 0x30
 800b12c:	f806 3b01 	strb.w	r3, [r6], #1
 800b130:	1bf3      	subs	r3, r6, r7
 800b132:	459a      	cmp	sl, r3
 800b134:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b138:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b13c:	f040 80f8 	bne.w	800b330 <_dtoa_r+0x600>
 800b140:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b144:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	f300 80dd 	bgt.w	800b30a <_dtoa_r+0x5da>
 800b150:	eeb4 7b46 	vcmp.f64	d7, d6
 800b154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b158:	d104      	bne.n	800b164 <_dtoa_r+0x434>
 800b15a:	ee15 3a10 	vmov	r3, s10
 800b15e:	07db      	lsls	r3, r3, #31
 800b160:	f100 80d3 	bmi.w	800b30a <_dtoa_r+0x5da>
 800b164:	9901      	ldr	r1, [sp, #4]
 800b166:	4648      	mov	r0, r9
 800b168:	f000 fc78 	bl	800ba5c <_Bfree>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b170:	7033      	strb	r3, [r6, #0]
 800b172:	f108 0301 	add.w	r3, r8, #1
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8304 	beq.w	800b788 <_dtoa_r+0xa58>
 800b180:	601e      	str	r6, [r3, #0]
 800b182:	e301      	b.n	800b788 <_dtoa_r+0xa58>
 800b184:	2202      	movs	r2, #2
 800b186:	e75e      	b.n	800b046 <_dtoa_r+0x316>
 800b188:	07cc      	lsls	r4, r1, #31
 800b18a:	d504      	bpl.n	800b196 <_dtoa_r+0x466>
 800b18c:	ed90 6b00 	vldr	d6, [r0]
 800b190:	3201      	adds	r2, #1
 800b192:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b196:	1049      	asrs	r1, r1, #1
 800b198:	3008      	adds	r0, #8
 800b19a:	e755      	b.n	800b048 <_dtoa_r+0x318>
 800b19c:	d022      	beq.n	800b1e4 <_dtoa_r+0x4b4>
 800b19e:	f1c8 0100 	rsb	r1, r8, #0
 800b1a2:	4a68      	ldr	r2, [pc, #416]	@ (800b344 <_dtoa_r+0x614>)
 800b1a4:	f001 000f 	and.w	r0, r1, #15
 800b1a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b1ac:	ed92 7b00 	vldr	d7, [r2]
 800b1b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b1b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1b8:	4863      	ldr	r0, [pc, #396]	@ (800b348 <_dtoa_r+0x618>)
 800b1ba:	1109      	asrs	r1, r1, #4
 800b1bc:	2400      	movs	r4, #0
 800b1be:	2202      	movs	r2, #2
 800b1c0:	b929      	cbnz	r1, 800b1ce <_dtoa_r+0x49e>
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	f43f af49 	beq.w	800b05a <_dtoa_r+0x32a>
 800b1c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1cc:	e745      	b.n	800b05a <_dtoa_r+0x32a>
 800b1ce:	07ce      	lsls	r6, r1, #31
 800b1d0:	d505      	bpl.n	800b1de <_dtoa_r+0x4ae>
 800b1d2:	ed90 6b00 	vldr	d6, [r0]
 800b1d6:	3201      	adds	r2, #1
 800b1d8:	2401      	movs	r4, #1
 800b1da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1de:	1049      	asrs	r1, r1, #1
 800b1e0:	3008      	adds	r0, #8
 800b1e2:	e7ed      	b.n	800b1c0 <_dtoa_r+0x490>
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	e738      	b.n	800b05a <_dtoa_r+0x32a>
 800b1e8:	f8cd 8010 	str.w	r8, [sp, #16]
 800b1ec:	4654      	mov	r4, sl
 800b1ee:	e754      	b.n	800b09a <_dtoa_r+0x36a>
 800b1f0:	4a54      	ldr	r2, [pc, #336]	@ (800b344 <_dtoa_r+0x614>)
 800b1f2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b1f6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b1fa:	9a08      	ldr	r2, [sp, #32]
 800b1fc:	ec41 0b17 	vmov	d7, r0, r1
 800b200:	443c      	add	r4, r7
 800b202:	b34a      	cbz	r2, 800b258 <_dtoa_r+0x528>
 800b204:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b208:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b20c:	463e      	mov	r6, r7
 800b20e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b212:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b216:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b21a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b21e:	ee14 2a90 	vmov	r2, s9
 800b222:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b226:	3230      	adds	r2, #48	@ 0x30
 800b228:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b22c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	f806 2b01 	strb.w	r2, [r6], #1
 800b238:	d438      	bmi.n	800b2ac <_dtoa_r+0x57c>
 800b23a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b23e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b246:	d462      	bmi.n	800b30e <_dtoa_r+0x5de>
 800b248:	42a6      	cmp	r6, r4
 800b24a:	f43f af4d 	beq.w	800b0e8 <_dtoa_r+0x3b8>
 800b24e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b252:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b256:	e7e0      	b.n	800b21a <_dtoa_r+0x4ea>
 800b258:	4621      	mov	r1, r4
 800b25a:	463e      	mov	r6, r7
 800b25c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b260:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b264:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b268:	ee14 2a90 	vmov	r2, s9
 800b26c:	3230      	adds	r2, #48	@ 0x30
 800b26e:	f806 2b01 	strb.w	r2, [r6], #1
 800b272:	42a6      	cmp	r6, r4
 800b274:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b278:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b27c:	d119      	bne.n	800b2b2 <_dtoa_r+0x582>
 800b27e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b282:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b286:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	dc3e      	bgt.n	800b30e <_dtoa_r+0x5de>
 800b290:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b294:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29c:	f57f af24 	bpl.w	800b0e8 <_dtoa_r+0x3b8>
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	3901      	subs	r1, #1
 800b2a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2a8:	2b30      	cmp	r3, #48	@ 0x30
 800b2aa:	d0f9      	beq.n	800b2a0 <_dtoa_r+0x570>
 800b2ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b2b0:	e758      	b.n	800b164 <_dtoa_r+0x434>
 800b2b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b2b6:	e7d5      	b.n	800b264 <_dtoa_r+0x534>
 800b2b8:	d10b      	bne.n	800b2d2 <_dtoa_r+0x5a2>
 800b2ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b2be:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b2c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ce:	f2c0 8161 	blt.w	800b594 <_dtoa_r+0x864>
 800b2d2:	2400      	movs	r4, #0
 800b2d4:	4625      	mov	r5, r4
 800b2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d8:	43db      	mvns	r3, r3
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	463e      	mov	r6, r7
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4648      	mov	r0, r9
 800b2e6:	f000 fbb9 	bl	800ba5c <_Bfree>
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	d0de      	beq.n	800b2ac <_dtoa_r+0x57c>
 800b2ee:	f1b8 0f00 	cmp.w	r8, #0
 800b2f2:	d005      	beq.n	800b300 <_dtoa_r+0x5d0>
 800b2f4:	45a8      	cmp	r8, r5
 800b2f6:	d003      	beq.n	800b300 <_dtoa_r+0x5d0>
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4648      	mov	r0, r9
 800b2fc:	f000 fbae 	bl	800ba5c <_Bfree>
 800b300:	4629      	mov	r1, r5
 800b302:	4648      	mov	r0, r9
 800b304:	f000 fbaa 	bl	800ba5c <_Bfree>
 800b308:	e7d0      	b.n	800b2ac <_dtoa_r+0x57c>
 800b30a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b30e:	4633      	mov	r3, r6
 800b310:	461e      	mov	r6, r3
 800b312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b316:	2a39      	cmp	r2, #57	@ 0x39
 800b318:	d106      	bne.n	800b328 <_dtoa_r+0x5f8>
 800b31a:	429f      	cmp	r7, r3
 800b31c:	d1f8      	bne.n	800b310 <_dtoa_r+0x5e0>
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	3201      	adds	r2, #1
 800b322:	9204      	str	r2, [sp, #16]
 800b324:	2230      	movs	r2, #48	@ 0x30
 800b326:	703a      	strb	r2, [r7, #0]
 800b328:	781a      	ldrb	r2, [r3, #0]
 800b32a:	3201      	adds	r2, #1
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	e7bd      	b.n	800b2ac <_dtoa_r+0x57c>
 800b330:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b334:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33c:	f47f aeef 	bne.w	800b11e <_dtoa_r+0x3ee>
 800b340:	e710      	b.n	800b164 <_dtoa_r+0x434>
 800b342:	bf00      	nop
 800b344:	0800ca08 	.word	0x0800ca08
 800b348:	0800c9e0 	.word	0x0800c9e0
 800b34c:	9908      	ldr	r1, [sp, #32]
 800b34e:	2900      	cmp	r1, #0
 800b350:	f000 80e3 	beq.w	800b51a <_dtoa_r+0x7ea>
 800b354:	9907      	ldr	r1, [sp, #28]
 800b356:	2901      	cmp	r1, #1
 800b358:	f300 80c8 	bgt.w	800b4ec <_dtoa_r+0x7bc>
 800b35c:	2d00      	cmp	r5, #0
 800b35e:	f000 80c1 	beq.w	800b4e4 <_dtoa_r+0x7b4>
 800b362:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b366:	9e05      	ldr	r6, [sp, #20]
 800b368:	461c      	mov	r4, r3
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	9305      	str	r3, [sp, #20]
 800b372:	9b06      	ldr	r3, [sp, #24]
 800b374:	2101      	movs	r1, #1
 800b376:	4413      	add	r3, r2
 800b378:	4648      	mov	r0, r9
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	f000 fc22 	bl	800bbc4 <__i2b>
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	4605      	mov	r5, r0
 800b384:	b166      	cbz	r6, 800b3a0 <_dtoa_r+0x670>
 800b386:	9a06      	ldr	r2, [sp, #24]
 800b388:	2a00      	cmp	r2, #0
 800b38a:	dd09      	ble.n	800b3a0 <_dtoa_r+0x670>
 800b38c:	42b2      	cmp	r2, r6
 800b38e:	9905      	ldr	r1, [sp, #20]
 800b390:	bfa8      	it	ge
 800b392:	4632      	movge	r2, r6
 800b394:	1a89      	subs	r1, r1, r2
 800b396:	9105      	str	r1, [sp, #20]
 800b398:	9906      	ldr	r1, [sp, #24]
 800b39a:	1ab6      	subs	r6, r6, r2
 800b39c:	1a8a      	subs	r2, r1, r2
 800b39e:	9206      	str	r2, [sp, #24]
 800b3a0:	b1fb      	cbz	r3, 800b3e2 <_dtoa_r+0x6b2>
 800b3a2:	9a08      	ldr	r2, [sp, #32]
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	f000 80bc 	beq.w	800b522 <_dtoa_r+0x7f2>
 800b3aa:	b19c      	cbz	r4, 800b3d4 <_dtoa_r+0x6a4>
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	4648      	mov	r0, r9
 800b3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3b4:	f000 fcc6 	bl	800bd44 <__pow5mult>
 800b3b8:	9a01      	ldr	r2, [sp, #4]
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4605      	mov	r5, r0
 800b3be:	4648      	mov	r0, r9
 800b3c0:	f000 fc16 	bl	800bbf0 <__multiply>
 800b3c4:	9901      	ldr	r1, [sp, #4]
 800b3c6:	9004      	str	r0, [sp, #16]
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f000 fb47 	bl	800ba5c <_Bfree>
 800b3ce:	9a04      	ldr	r2, [sp, #16]
 800b3d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3d2:	9201      	str	r2, [sp, #4]
 800b3d4:	1b1a      	subs	r2, r3, r4
 800b3d6:	d004      	beq.n	800b3e2 <_dtoa_r+0x6b2>
 800b3d8:	9901      	ldr	r1, [sp, #4]
 800b3da:	4648      	mov	r0, r9
 800b3dc:	f000 fcb2 	bl	800bd44 <__pow5mult>
 800b3e0:	9001      	str	r0, [sp, #4]
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	f000 fbed 	bl	800bbc4 <__i2b>
 800b3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 81d0 	beq.w	800b794 <_dtoa_r+0xa64>
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4648      	mov	r0, r9
 800b3fa:	f000 fca3 	bl	800bd44 <__pow5mult>
 800b3fe:	9b07      	ldr	r3, [sp, #28]
 800b400:	2b01      	cmp	r3, #1
 800b402:	4604      	mov	r4, r0
 800b404:	f300 8095 	bgt.w	800b532 <_dtoa_r+0x802>
 800b408:	9b02      	ldr	r3, [sp, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 808b 	bne.w	800b526 <_dtoa_r+0x7f6>
 800b410:	9b03      	ldr	r3, [sp, #12]
 800b412:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b416:	2a00      	cmp	r2, #0
 800b418:	f040 8087 	bne.w	800b52a <_dtoa_r+0x7fa>
 800b41c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b420:	0d12      	lsrs	r2, r2, #20
 800b422:	0512      	lsls	r2, r2, #20
 800b424:	2a00      	cmp	r2, #0
 800b426:	f000 8082 	beq.w	800b52e <_dtoa_r+0x7fe>
 800b42a:	9b05      	ldr	r3, [sp, #20]
 800b42c:	3301      	adds	r3, #1
 800b42e:	9305      	str	r3, [sp, #20]
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	3301      	adds	r3, #1
 800b434:	9306      	str	r3, [sp, #24]
 800b436:	2301      	movs	r3, #1
 800b438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 81af 	beq.w	800b7a0 <_dtoa_r+0xa70>
 800b442:	6922      	ldr	r2, [r4, #16]
 800b444:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b448:	6910      	ldr	r0, [r2, #16]
 800b44a:	f000 fb6f 	bl	800bb2c <__hi0bits>
 800b44e:	f1c0 0020 	rsb	r0, r0, #32
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	4418      	add	r0, r3
 800b456:	f010 001f 	ands.w	r0, r0, #31
 800b45a:	d076      	beq.n	800b54a <_dtoa_r+0x81a>
 800b45c:	f1c0 0220 	rsb	r2, r0, #32
 800b460:	2a04      	cmp	r2, #4
 800b462:	dd69      	ble.n	800b538 <_dtoa_r+0x808>
 800b464:	9b05      	ldr	r3, [sp, #20]
 800b466:	f1c0 001c 	rsb	r0, r0, #28
 800b46a:	4403      	add	r3, r0
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	9b06      	ldr	r3, [sp, #24]
 800b470:	4406      	add	r6, r0
 800b472:	4403      	add	r3, r0
 800b474:	9306      	str	r3, [sp, #24]
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dd05      	ble.n	800b488 <_dtoa_r+0x758>
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	461a      	mov	r2, r3
 800b480:	4648      	mov	r0, r9
 800b482:	f000 fcb9 	bl	800bdf8 <__lshift>
 800b486:	9001      	str	r0, [sp, #4]
 800b488:	9b06      	ldr	r3, [sp, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dd05      	ble.n	800b49a <_dtoa_r+0x76a>
 800b48e:	4621      	mov	r1, r4
 800b490:	461a      	mov	r2, r3
 800b492:	4648      	mov	r0, r9
 800b494:	f000 fcb0 	bl	800bdf8 <__lshift>
 800b498:	4604      	mov	r4, r0
 800b49a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d056      	beq.n	800b54e <_dtoa_r+0x81e>
 800b4a0:	9801      	ldr	r0, [sp, #4]
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	f000 fd14 	bl	800bed0 <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	da50      	bge.n	800b54e <_dtoa_r+0x81e>
 800b4ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	9901      	ldr	r1, [sp, #4]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	4648      	mov	r0, r9
 800b4ba:	f000 faf1 	bl	800baa0 <__multadd>
 800b4be:	9b08      	ldr	r3, [sp, #32]
 800b4c0:	9001      	str	r0, [sp, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 816e 	beq.w	800b7a4 <_dtoa_r+0xa74>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	4648      	mov	r0, r9
 800b4d0:	f000 fae6 	bl	800baa0 <__multadd>
 800b4d4:	f1bb 0f00 	cmp.w	fp, #0
 800b4d8:	4605      	mov	r5, r0
 800b4da:	dc64      	bgt.n	800b5a6 <_dtoa_r+0x876>
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	dc3e      	bgt.n	800b560 <_dtoa_r+0x830>
 800b4e2:	e060      	b.n	800b5a6 <_dtoa_r+0x876>
 800b4e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b4ea:	e73c      	b.n	800b366 <_dtoa_r+0x636>
 800b4ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	bfbf      	itttt	lt
 800b4f4:	1ae2      	sublt	r2, r4, r3
 800b4f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b4f8:	189b      	addlt	r3, r3, r2
 800b4fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800b4fc:	bfae      	itee	ge
 800b4fe:	1b1c      	subge	r4, r3, r4
 800b500:	4623      	movlt	r3, r4
 800b502:	2400      	movlt	r4, #0
 800b504:	f1ba 0f00 	cmp.w	sl, #0
 800b508:	bfb5      	itete	lt
 800b50a:	9a05      	ldrlt	r2, [sp, #20]
 800b50c:	9e05      	ldrge	r6, [sp, #20]
 800b50e:	eba2 060a 	sublt.w	r6, r2, sl
 800b512:	4652      	movge	r2, sl
 800b514:	bfb8      	it	lt
 800b516:	2200      	movlt	r2, #0
 800b518:	e727      	b.n	800b36a <_dtoa_r+0x63a>
 800b51a:	9e05      	ldr	r6, [sp, #20]
 800b51c:	9d08      	ldr	r5, [sp, #32]
 800b51e:	461c      	mov	r4, r3
 800b520:	e730      	b.n	800b384 <_dtoa_r+0x654>
 800b522:	461a      	mov	r2, r3
 800b524:	e758      	b.n	800b3d8 <_dtoa_r+0x6a8>
 800b526:	2300      	movs	r3, #0
 800b528:	e786      	b.n	800b438 <_dtoa_r+0x708>
 800b52a:	9b02      	ldr	r3, [sp, #8]
 800b52c:	e784      	b.n	800b438 <_dtoa_r+0x708>
 800b52e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b530:	e783      	b.n	800b43a <_dtoa_r+0x70a>
 800b532:	2300      	movs	r3, #0
 800b534:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b536:	e784      	b.n	800b442 <_dtoa_r+0x712>
 800b538:	d09d      	beq.n	800b476 <_dtoa_r+0x746>
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	321c      	adds	r2, #28
 800b53e:	4413      	add	r3, r2
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	9b06      	ldr	r3, [sp, #24]
 800b544:	4416      	add	r6, r2
 800b546:	4413      	add	r3, r2
 800b548:	e794      	b.n	800b474 <_dtoa_r+0x744>
 800b54a:	4602      	mov	r2, r0
 800b54c:	e7f5      	b.n	800b53a <_dtoa_r+0x80a>
 800b54e:	f1ba 0f00 	cmp.w	sl, #0
 800b552:	f8cd 8010 	str.w	r8, [sp, #16]
 800b556:	46d3      	mov	fp, sl
 800b558:	dc21      	bgt.n	800b59e <_dtoa_r+0x86e>
 800b55a:	9b07      	ldr	r3, [sp, #28]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	dd1e      	ble.n	800b59e <_dtoa_r+0x86e>
 800b560:	f1bb 0f00 	cmp.w	fp, #0
 800b564:	f47f aeb7 	bne.w	800b2d6 <_dtoa_r+0x5a6>
 800b568:	4621      	mov	r1, r4
 800b56a:	465b      	mov	r3, fp
 800b56c:	2205      	movs	r2, #5
 800b56e:	4648      	mov	r0, r9
 800b570:	f000 fa96 	bl	800baa0 <__multadd>
 800b574:	4601      	mov	r1, r0
 800b576:	4604      	mov	r4, r0
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	f000 fca9 	bl	800bed0 <__mcmp>
 800b57e:	2800      	cmp	r0, #0
 800b580:	f77f aea9 	ble.w	800b2d6 <_dtoa_r+0x5a6>
 800b584:	463e      	mov	r6, r7
 800b586:	2331      	movs	r3, #49	@ 0x31
 800b588:	f806 3b01 	strb.w	r3, [r6], #1
 800b58c:	9b04      	ldr	r3, [sp, #16]
 800b58e:	3301      	adds	r3, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	e6a4      	b.n	800b2de <_dtoa_r+0x5ae>
 800b594:	f8cd 8010 	str.w	r8, [sp, #16]
 800b598:	4654      	mov	r4, sl
 800b59a:	4625      	mov	r5, r4
 800b59c:	e7f2      	b.n	800b584 <_dtoa_r+0x854>
 800b59e:	9b08      	ldr	r3, [sp, #32]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8103 	beq.w	800b7ac <_dtoa_r+0xa7c>
 800b5a6:	2e00      	cmp	r6, #0
 800b5a8:	dd05      	ble.n	800b5b6 <_dtoa_r+0x886>
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	4632      	mov	r2, r6
 800b5ae:	4648      	mov	r0, r9
 800b5b0:	f000 fc22 	bl	800bdf8 <__lshift>
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d058      	beq.n	800b66e <_dtoa_r+0x93e>
 800b5bc:	6869      	ldr	r1, [r5, #4]
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f000 fa0c 	bl	800b9dc <_Balloc>
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	b928      	cbnz	r0, 800b5d4 <_dtoa_r+0x8a4>
 800b5c8:	4b82      	ldr	r3, [pc, #520]	@ (800b7d4 <_dtoa_r+0xaa4>)
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5d0:	f7ff bbc7 	b.w	800ad62 <_dtoa_r+0x32>
 800b5d4:	692a      	ldr	r2, [r5, #16]
 800b5d6:	3202      	adds	r2, #2
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	f105 010c 	add.w	r1, r5, #12
 800b5de:	300c      	adds	r0, #12
 800b5e0:	f001 f800 	bl	800c5e4 <memcpy>
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f000 fc05 	bl	800bdf8 <__lshift>
 800b5ee:	1c7b      	adds	r3, r7, #1
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	eb07 030b 	add.w	r3, r7, fp
 800b5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	46a8      	mov	r8, r5
 800b600:	9308      	str	r3, [sp, #32]
 800b602:	4605      	mov	r5, r0
 800b604:	9b05      	ldr	r3, [sp, #20]
 800b606:	9801      	ldr	r0, [sp, #4]
 800b608:	4621      	mov	r1, r4
 800b60a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b60e:	f7ff fb04 	bl	800ac1a <quorem>
 800b612:	4641      	mov	r1, r8
 800b614:	9002      	str	r0, [sp, #8]
 800b616:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b61a:	9801      	ldr	r0, [sp, #4]
 800b61c:	f000 fc58 	bl	800bed0 <__mcmp>
 800b620:	462a      	mov	r2, r5
 800b622:	9006      	str	r0, [sp, #24]
 800b624:	4621      	mov	r1, r4
 800b626:	4648      	mov	r0, r9
 800b628:	f000 fc6e 	bl	800bf08 <__mdiff>
 800b62c:	68c2      	ldr	r2, [r0, #12]
 800b62e:	4606      	mov	r6, r0
 800b630:	b9fa      	cbnz	r2, 800b672 <_dtoa_r+0x942>
 800b632:	4601      	mov	r1, r0
 800b634:	9801      	ldr	r0, [sp, #4]
 800b636:	f000 fc4b 	bl	800bed0 <__mcmp>
 800b63a:	4602      	mov	r2, r0
 800b63c:	4631      	mov	r1, r6
 800b63e:	4648      	mov	r0, r9
 800b640:	920a      	str	r2, [sp, #40]	@ 0x28
 800b642:	f000 fa0b 	bl	800ba5c <_Bfree>
 800b646:	9b07      	ldr	r3, [sp, #28]
 800b648:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b64a:	9e05      	ldr	r6, [sp, #20]
 800b64c:	ea43 0102 	orr.w	r1, r3, r2
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	4319      	orrs	r1, r3
 800b654:	d10f      	bne.n	800b676 <_dtoa_r+0x946>
 800b656:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b65a:	d028      	beq.n	800b6ae <_dtoa_r+0x97e>
 800b65c:	9b06      	ldr	r3, [sp, #24]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	dd02      	ble.n	800b668 <_dtoa_r+0x938>
 800b662:	9b02      	ldr	r3, [sp, #8]
 800b664:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b668:	f88b a000 	strb.w	sl, [fp]
 800b66c:	e639      	b.n	800b2e2 <_dtoa_r+0x5b2>
 800b66e:	4628      	mov	r0, r5
 800b670:	e7bd      	b.n	800b5ee <_dtoa_r+0x8be>
 800b672:	2201      	movs	r2, #1
 800b674:	e7e2      	b.n	800b63c <_dtoa_r+0x90c>
 800b676:	9b06      	ldr	r3, [sp, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db04      	blt.n	800b686 <_dtoa_r+0x956>
 800b67c:	9907      	ldr	r1, [sp, #28]
 800b67e:	430b      	orrs	r3, r1
 800b680:	9908      	ldr	r1, [sp, #32]
 800b682:	430b      	orrs	r3, r1
 800b684:	d120      	bne.n	800b6c8 <_dtoa_r+0x998>
 800b686:	2a00      	cmp	r2, #0
 800b688:	ddee      	ble.n	800b668 <_dtoa_r+0x938>
 800b68a:	9901      	ldr	r1, [sp, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	4648      	mov	r0, r9
 800b690:	f000 fbb2 	bl	800bdf8 <__lshift>
 800b694:	4621      	mov	r1, r4
 800b696:	9001      	str	r0, [sp, #4]
 800b698:	f000 fc1a 	bl	800bed0 <__mcmp>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	dc03      	bgt.n	800b6a8 <_dtoa_r+0x978>
 800b6a0:	d1e2      	bne.n	800b668 <_dtoa_r+0x938>
 800b6a2:	f01a 0f01 	tst.w	sl, #1
 800b6a6:	d0df      	beq.n	800b668 <_dtoa_r+0x938>
 800b6a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b6ac:	d1d9      	bne.n	800b662 <_dtoa_r+0x932>
 800b6ae:	2339      	movs	r3, #57	@ 0x39
 800b6b0:	f88b 3000 	strb.w	r3, [fp]
 800b6b4:	4633      	mov	r3, r6
 800b6b6:	461e      	mov	r6, r3
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6be:	2a39      	cmp	r2, #57	@ 0x39
 800b6c0:	d053      	beq.n	800b76a <_dtoa_r+0xa3a>
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	e60c      	b.n	800b2e2 <_dtoa_r+0x5b2>
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	dd07      	ble.n	800b6dc <_dtoa_r+0x9ac>
 800b6cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b6d0:	d0ed      	beq.n	800b6ae <_dtoa_r+0x97e>
 800b6d2:	f10a 0301 	add.w	r3, sl, #1
 800b6d6:	f88b 3000 	strb.w	r3, [fp]
 800b6da:	e602      	b.n	800b2e2 <_dtoa_r+0x5b2>
 800b6dc:	9b05      	ldr	r3, [sp, #20]
 800b6de:	9a05      	ldr	r2, [sp, #20]
 800b6e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d029      	beq.n	800b73e <_dtoa_r+0xa0e>
 800b6ea:	9901      	ldr	r1, [sp, #4]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	220a      	movs	r2, #10
 800b6f0:	4648      	mov	r0, r9
 800b6f2:	f000 f9d5 	bl	800baa0 <__multadd>
 800b6f6:	45a8      	cmp	r8, r5
 800b6f8:	9001      	str	r0, [sp, #4]
 800b6fa:	f04f 0300 	mov.w	r3, #0
 800b6fe:	f04f 020a 	mov.w	r2, #10
 800b702:	4641      	mov	r1, r8
 800b704:	4648      	mov	r0, r9
 800b706:	d107      	bne.n	800b718 <_dtoa_r+0x9e8>
 800b708:	f000 f9ca 	bl	800baa0 <__multadd>
 800b70c:	4680      	mov	r8, r0
 800b70e:	4605      	mov	r5, r0
 800b710:	9b05      	ldr	r3, [sp, #20]
 800b712:	3301      	adds	r3, #1
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	e775      	b.n	800b604 <_dtoa_r+0x8d4>
 800b718:	f000 f9c2 	bl	800baa0 <__multadd>
 800b71c:	4629      	mov	r1, r5
 800b71e:	4680      	mov	r8, r0
 800b720:	2300      	movs	r3, #0
 800b722:	220a      	movs	r2, #10
 800b724:	4648      	mov	r0, r9
 800b726:	f000 f9bb 	bl	800baa0 <__multadd>
 800b72a:	4605      	mov	r5, r0
 800b72c:	e7f0      	b.n	800b710 <_dtoa_r+0x9e0>
 800b72e:	f1bb 0f00 	cmp.w	fp, #0
 800b732:	bfcc      	ite	gt
 800b734:	465e      	movgt	r6, fp
 800b736:	2601      	movle	r6, #1
 800b738:	443e      	add	r6, r7
 800b73a:	f04f 0800 	mov.w	r8, #0
 800b73e:	9901      	ldr	r1, [sp, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	4648      	mov	r0, r9
 800b744:	f000 fb58 	bl	800bdf8 <__lshift>
 800b748:	4621      	mov	r1, r4
 800b74a:	9001      	str	r0, [sp, #4]
 800b74c:	f000 fbc0 	bl	800bed0 <__mcmp>
 800b750:	2800      	cmp	r0, #0
 800b752:	dcaf      	bgt.n	800b6b4 <_dtoa_r+0x984>
 800b754:	d102      	bne.n	800b75c <_dtoa_r+0xa2c>
 800b756:	f01a 0f01 	tst.w	sl, #1
 800b75a:	d1ab      	bne.n	800b6b4 <_dtoa_r+0x984>
 800b75c:	4633      	mov	r3, r6
 800b75e:	461e      	mov	r6, r3
 800b760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b764:	2a30      	cmp	r2, #48	@ 0x30
 800b766:	d0fa      	beq.n	800b75e <_dtoa_r+0xa2e>
 800b768:	e5bb      	b.n	800b2e2 <_dtoa_r+0x5b2>
 800b76a:	429f      	cmp	r7, r3
 800b76c:	d1a3      	bne.n	800b6b6 <_dtoa_r+0x986>
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	3301      	adds	r3, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	2331      	movs	r3, #49	@ 0x31
 800b776:	703b      	strb	r3, [r7, #0]
 800b778:	e5b3      	b.n	800b2e2 <_dtoa_r+0x5b2>
 800b77a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b77c:	4f16      	ldr	r7, [pc, #88]	@ (800b7d8 <_dtoa_r+0xaa8>)
 800b77e:	b11b      	cbz	r3, 800b788 <_dtoa_r+0xa58>
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	4638      	mov	r0, r7
 800b78a:	b011      	add	sp, #68	@ 0x44
 800b78c:	ecbd 8b02 	vpop	{d8}
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	2b01      	cmp	r3, #1
 800b798:	f77f ae36 	ble.w	800b408 <_dtoa_r+0x6d8>
 800b79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b79e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e656      	b.n	800b452 <_dtoa_r+0x722>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	f77f aed7 	ble.w	800b55a <_dtoa_r+0x82a>
 800b7ac:	463e      	mov	r6, r7
 800b7ae:	9801      	ldr	r0, [sp, #4]
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	f7ff fa32 	bl	800ac1a <quorem>
 800b7b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b7ba:	f806 ab01 	strb.w	sl, [r6], #1
 800b7be:	1bf2      	subs	r2, r6, r7
 800b7c0:	4593      	cmp	fp, r2
 800b7c2:	ddb4      	ble.n	800b72e <_dtoa_r+0x9fe>
 800b7c4:	9901      	ldr	r1, [sp, #4]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	f000 f968 	bl	800baa0 <__multadd>
 800b7d0:	9001      	str	r0, [sp, #4]
 800b7d2:	e7ec      	b.n	800b7ae <_dtoa_r+0xa7e>
 800b7d4:	0800c964 	.word	0x0800c964
 800b7d8:	0800c8e8 	.word	0x0800c8e8

0800b7dc <_free_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4605      	mov	r5, r0
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	d041      	beq.n	800b868 <_free_r+0x8c>
 800b7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e8:	1f0c      	subs	r4, r1, #4
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	18e4      	addlt	r4, r4, r3
 800b7f0:	f000 f8e8 	bl	800b9c4 <__malloc_lock>
 800b7f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b86c <_free_r+0x90>)
 800b7f6:	6813      	ldr	r3, [r2, #0]
 800b7f8:	b933      	cbnz	r3, 800b808 <_free_r+0x2c>
 800b7fa:	6063      	str	r3, [r4, #4]
 800b7fc:	6014      	str	r4, [r2, #0]
 800b7fe:	4628      	mov	r0, r5
 800b800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b804:	f000 b8e4 	b.w	800b9d0 <__malloc_unlock>
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d908      	bls.n	800b81e <_free_r+0x42>
 800b80c:	6820      	ldr	r0, [r4, #0]
 800b80e:	1821      	adds	r1, r4, r0
 800b810:	428b      	cmp	r3, r1
 800b812:	bf01      	itttt	eq
 800b814:	6819      	ldreq	r1, [r3, #0]
 800b816:	685b      	ldreq	r3, [r3, #4]
 800b818:	1809      	addeq	r1, r1, r0
 800b81a:	6021      	streq	r1, [r4, #0]
 800b81c:	e7ed      	b.n	800b7fa <_free_r+0x1e>
 800b81e:	461a      	mov	r2, r3
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	b10b      	cbz	r3, 800b828 <_free_r+0x4c>
 800b824:	42a3      	cmp	r3, r4
 800b826:	d9fa      	bls.n	800b81e <_free_r+0x42>
 800b828:	6811      	ldr	r1, [r2, #0]
 800b82a:	1850      	adds	r0, r2, r1
 800b82c:	42a0      	cmp	r0, r4
 800b82e:	d10b      	bne.n	800b848 <_free_r+0x6c>
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	4401      	add	r1, r0
 800b834:	1850      	adds	r0, r2, r1
 800b836:	4283      	cmp	r3, r0
 800b838:	6011      	str	r1, [r2, #0]
 800b83a:	d1e0      	bne.n	800b7fe <_free_r+0x22>
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	6053      	str	r3, [r2, #4]
 800b842:	4408      	add	r0, r1
 800b844:	6010      	str	r0, [r2, #0]
 800b846:	e7da      	b.n	800b7fe <_free_r+0x22>
 800b848:	d902      	bls.n	800b850 <_free_r+0x74>
 800b84a:	230c      	movs	r3, #12
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	e7d6      	b.n	800b7fe <_free_r+0x22>
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	1821      	adds	r1, r4, r0
 800b854:	428b      	cmp	r3, r1
 800b856:	bf04      	itt	eq
 800b858:	6819      	ldreq	r1, [r3, #0]
 800b85a:	685b      	ldreq	r3, [r3, #4]
 800b85c:	6063      	str	r3, [r4, #4]
 800b85e:	bf04      	itt	eq
 800b860:	1809      	addeq	r1, r1, r0
 800b862:	6021      	streq	r1, [r4, #0]
 800b864:	6054      	str	r4, [r2, #4]
 800b866:	e7ca      	b.n	800b7fe <_free_r+0x22>
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	24000644 	.word	0x24000644

0800b870 <malloc>:
 800b870:	4b02      	ldr	r3, [pc, #8]	@ (800b87c <malloc+0xc>)
 800b872:	4601      	mov	r1, r0
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	f000 b825 	b.w	800b8c4 <_malloc_r>
 800b87a:	bf00      	nop
 800b87c:	2400001c 	.word	0x2400001c

0800b880 <sbrk_aligned>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	4e0f      	ldr	r6, [pc, #60]	@ (800b8c0 <sbrk_aligned+0x40>)
 800b884:	460c      	mov	r4, r1
 800b886:	6831      	ldr	r1, [r6, #0]
 800b888:	4605      	mov	r5, r0
 800b88a:	b911      	cbnz	r1, 800b892 <sbrk_aligned+0x12>
 800b88c:	f000 fe9a 	bl	800c5c4 <_sbrk_r>
 800b890:	6030      	str	r0, [r6, #0]
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f000 fe95 	bl	800c5c4 <_sbrk_r>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d103      	bne.n	800b8a6 <sbrk_aligned+0x26>
 800b89e:	f04f 34ff 	mov.w	r4, #4294967295
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	bd70      	pop	{r4, r5, r6, pc}
 800b8a6:	1cc4      	adds	r4, r0, #3
 800b8a8:	f024 0403 	bic.w	r4, r4, #3
 800b8ac:	42a0      	cmp	r0, r4
 800b8ae:	d0f8      	beq.n	800b8a2 <sbrk_aligned+0x22>
 800b8b0:	1a21      	subs	r1, r4, r0
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f000 fe86 	bl	800c5c4 <_sbrk_r>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d1f2      	bne.n	800b8a2 <sbrk_aligned+0x22>
 800b8bc:	e7ef      	b.n	800b89e <sbrk_aligned+0x1e>
 800b8be:	bf00      	nop
 800b8c0:	24000640 	.word	0x24000640

0800b8c4 <_malloc_r>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	1ccd      	adds	r5, r1, #3
 800b8ca:	f025 0503 	bic.w	r5, r5, #3
 800b8ce:	3508      	adds	r5, #8
 800b8d0:	2d0c      	cmp	r5, #12
 800b8d2:	bf38      	it	cc
 800b8d4:	250c      	movcc	r5, #12
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	4606      	mov	r6, r0
 800b8da:	db01      	blt.n	800b8e0 <_malloc_r+0x1c>
 800b8dc:	42a9      	cmp	r1, r5
 800b8de:	d904      	bls.n	800b8ea <_malloc_r+0x26>
 800b8e0:	230c      	movs	r3, #12
 800b8e2:	6033      	str	r3, [r6, #0]
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9c0 <_malloc_r+0xfc>
 800b8ee:	f000 f869 	bl	800b9c4 <__malloc_lock>
 800b8f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	bb44      	cbnz	r4, 800b94c <_malloc_r+0x88>
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff ffbf 	bl	800b880 <sbrk_aligned>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	4604      	mov	r4, r0
 800b906:	d158      	bne.n	800b9ba <_malloc_r+0xf6>
 800b908:	f8d8 4000 	ldr.w	r4, [r8]
 800b90c:	4627      	mov	r7, r4
 800b90e:	2f00      	cmp	r7, #0
 800b910:	d143      	bne.n	800b99a <_malloc_r+0xd6>
 800b912:	2c00      	cmp	r4, #0
 800b914:	d04b      	beq.n	800b9ae <_malloc_r+0xea>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	4639      	mov	r1, r7
 800b91a:	4630      	mov	r0, r6
 800b91c:	eb04 0903 	add.w	r9, r4, r3
 800b920:	f000 fe50 	bl	800c5c4 <_sbrk_r>
 800b924:	4581      	cmp	r9, r0
 800b926:	d142      	bne.n	800b9ae <_malloc_r+0xea>
 800b928:	6821      	ldr	r1, [r4, #0]
 800b92a:	1a6d      	subs	r5, r5, r1
 800b92c:	4629      	mov	r1, r5
 800b92e:	4630      	mov	r0, r6
 800b930:	f7ff ffa6 	bl	800b880 <sbrk_aligned>
 800b934:	3001      	adds	r0, #1
 800b936:	d03a      	beq.n	800b9ae <_malloc_r+0xea>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	442b      	add	r3, r5
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	f8d8 3000 	ldr.w	r3, [r8]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	bb62      	cbnz	r2, 800b9a0 <_malloc_r+0xdc>
 800b946:	f8c8 7000 	str.w	r7, [r8]
 800b94a:	e00f      	b.n	800b96c <_malloc_r+0xa8>
 800b94c:	6822      	ldr	r2, [r4, #0]
 800b94e:	1b52      	subs	r2, r2, r5
 800b950:	d420      	bmi.n	800b994 <_malloc_r+0xd0>
 800b952:	2a0b      	cmp	r2, #11
 800b954:	d917      	bls.n	800b986 <_malloc_r+0xc2>
 800b956:	1961      	adds	r1, r4, r5
 800b958:	42a3      	cmp	r3, r4
 800b95a:	6025      	str	r5, [r4, #0]
 800b95c:	bf18      	it	ne
 800b95e:	6059      	strne	r1, [r3, #4]
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	bf08      	it	eq
 800b964:	f8c8 1000 	streq.w	r1, [r8]
 800b968:	5162      	str	r2, [r4, r5]
 800b96a:	604b      	str	r3, [r1, #4]
 800b96c:	4630      	mov	r0, r6
 800b96e:	f000 f82f 	bl	800b9d0 <__malloc_unlock>
 800b972:	f104 000b 	add.w	r0, r4, #11
 800b976:	1d23      	adds	r3, r4, #4
 800b978:	f020 0007 	bic.w	r0, r0, #7
 800b97c:	1ac2      	subs	r2, r0, r3
 800b97e:	bf1c      	itt	ne
 800b980:	1a1b      	subne	r3, r3, r0
 800b982:	50a3      	strne	r3, [r4, r2]
 800b984:	e7af      	b.n	800b8e6 <_malloc_r+0x22>
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	42a3      	cmp	r3, r4
 800b98a:	bf0c      	ite	eq
 800b98c:	f8c8 2000 	streq.w	r2, [r8]
 800b990:	605a      	strne	r2, [r3, #4]
 800b992:	e7eb      	b.n	800b96c <_malloc_r+0xa8>
 800b994:	4623      	mov	r3, r4
 800b996:	6864      	ldr	r4, [r4, #4]
 800b998:	e7ae      	b.n	800b8f8 <_malloc_r+0x34>
 800b99a:	463c      	mov	r4, r7
 800b99c:	687f      	ldr	r7, [r7, #4]
 800b99e:	e7b6      	b.n	800b90e <_malloc_r+0x4a>
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	d1fb      	bne.n	800b9a0 <_malloc_r+0xdc>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	6053      	str	r3, [r2, #4]
 800b9ac:	e7de      	b.n	800b96c <_malloc_r+0xa8>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f000 f80c 	bl	800b9d0 <__malloc_unlock>
 800b9b8:	e794      	b.n	800b8e4 <_malloc_r+0x20>
 800b9ba:	6005      	str	r5, [r0, #0]
 800b9bc:	e7d6      	b.n	800b96c <_malloc_r+0xa8>
 800b9be:	bf00      	nop
 800b9c0:	24000644 	.word	0x24000644

0800b9c4 <__malloc_lock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	@ (800b9cc <__malloc_lock+0x8>)
 800b9c6:	f7ff b926 	b.w	800ac16 <__retarget_lock_acquire_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	2400063c 	.word	0x2400063c

0800b9d0 <__malloc_unlock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	@ (800b9d8 <__malloc_unlock+0x8>)
 800b9d2:	f7ff b921 	b.w	800ac18 <__retarget_lock_release_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	2400063c 	.word	0x2400063c

0800b9dc <_Balloc>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	69c6      	ldr	r6, [r0, #28]
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	b976      	cbnz	r6, 800ba04 <_Balloc+0x28>
 800b9e6:	2010      	movs	r0, #16
 800b9e8:	f7ff ff42 	bl	800b870 <malloc>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	61e0      	str	r0, [r4, #28]
 800b9f0:	b920      	cbnz	r0, 800b9fc <_Balloc+0x20>
 800b9f2:	4b18      	ldr	r3, [pc, #96]	@ (800ba54 <_Balloc+0x78>)
 800b9f4:	4818      	ldr	r0, [pc, #96]	@ (800ba58 <_Balloc+0x7c>)
 800b9f6:	216b      	movs	r1, #107	@ 0x6b
 800b9f8:	f000 fe02 	bl	800c600 <__assert_func>
 800b9fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba00:	6006      	str	r6, [r0, #0]
 800ba02:	60c6      	str	r6, [r0, #12]
 800ba04:	69e6      	ldr	r6, [r4, #28]
 800ba06:	68f3      	ldr	r3, [r6, #12]
 800ba08:	b183      	cbz	r3, 800ba2c <_Balloc+0x50>
 800ba0a:	69e3      	ldr	r3, [r4, #28]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba12:	b9b8      	cbnz	r0, 800ba44 <_Balloc+0x68>
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f605 	lsl.w	r6, r1, r5
 800ba1a:	1d72      	adds	r2, r6, #5
 800ba1c:	0092      	lsls	r2, r2, #2
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fe0c 	bl	800c63c <_calloc_r>
 800ba24:	b160      	cbz	r0, 800ba40 <_Balloc+0x64>
 800ba26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba2a:	e00e      	b.n	800ba4a <_Balloc+0x6e>
 800ba2c:	2221      	movs	r2, #33	@ 0x21
 800ba2e:	2104      	movs	r1, #4
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fe03 	bl	800c63c <_calloc_r>
 800ba36:	69e3      	ldr	r3, [r4, #28]
 800ba38:	60f0      	str	r0, [r6, #12]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e4      	bne.n	800ba0a <_Balloc+0x2e>
 800ba40:	2000      	movs	r0, #0
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	6802      	ldr	r2, [r0, #0]
 800ba46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba50:	e7f7      	b.n	800ba42 <_Balloc+0x66>
 800ba52:	bf00      	nop
 800ba54:	0800c8f5 	.word	0x0800c8f5
 800ba58:	0800c975 	.word	0x0800c975

0800ba5c <_Bfree>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	69c6      	ldr	r6, [r0, #28]
 800ba60:	4605      	mov	r5, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	b976      	cbnz	r6, 800ba84 <_Bfree+0x28>
 800ba66:	2010      	movs	r0, #16
 800ba68:	f7ff ff02 	bl	800b870 <malloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	61e8      	str	r0, [r5, #28]
 800ba70:	b920      	cbnz	r0, 800ba7c <_Bfree+0x20>
 800ba72:	4b09      	ldr	r3, [pc, #36]	@ (800ba98 <_Bfree+0x3c>)
 800ba74:	4809      	ldr	r0, [pc, #36]	@ (800ba9c <_Bfree+0x40>)
 800ba76:	218f      	movs	r1, #143	@ 0x8f
 800ba78:	f000 fdc2 	bl	800c600 <__assert_func>
 800ba7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba80:	6006      	str	r6, [r0, #0]
 800ba82:	60c6      	str	r6, [r0, #12]
 800ba84:	b13c      	cbz	r4, 800ba96 <_Bfree+0x3a>
 800ba86:	69eb      	ldr	r3, [r5, #28]
 800ba88:	6862      	ldr	r2, [r4, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba90:	6021      	str	r1, [r4, #0]
 800ba92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	0800c8f5 	.word	0x0800c8f5
 800ba9c:	0800c975 	.word	0x0800c975

0800baa0 <__multadd>:
 800baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	690d      	ldr	r5, [r1, #16]
 800baa6:	4607      	mov	r7, r0
 800baa8:	460c      	mov	r4, r1
 800baaa:	461e      	mov	r6, r3
 800baac:	f101 0c14 	add.w	ip, r1, #20
 800bab0:	2000      	movs	r0, #0
 800bab2:	f8dc 3000 	ldr.w	r3, [ip]
 800bab6:	b299      	uxth	r1, r3
 800bab8:	fb02 6101 	mla	r1, r2, r1, r6
 800babc:	0c1e      	lsrs	r6, r3, #16
 800babe:	0c0b      	lsrs	r3, r1, #16
 800bac0:	fb02 3306 	mla	r3, r2, r6, r3
 800bac4:	b289      	uxth	r1, r1
 800bac6:	3001      	adds	r0, #1
 800bac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bacc:	4285      	cmp	r5, r0
 800bace:	f84c 1b04 	str.w	r1, [ip], #4
 800bad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bad6:	dcec      	bgt.n	800bab2 <__multadd+0x12>
 800bad8:	b30e      	cbz	r6, 800bb1e <__multadd+0x7e>
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	42ab      	cmp	r3, r5
 800bade:	dc19      	bgt.n	800bb14 <__multadd+0x74>
 800bae0:	6861      	ldr	r1, [r4, #4]
 800bae2:	4638      	mov	r0, r7
 800bae4:	3101      	adds	r1, #1
 800bae6:	f7ff ff79 	bl	800b9dc <_Balloc>
 800baea:	4680      	mov	r8, r0
 800baec:	b928      	cbnz	r0, 800bafa <__multadd+0x5a>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb24 <__multadd+0x84>)
 800baf2:	480d      	ldr	r0, [pc, #52]	@ (800bb28 <__multadd+0x88>)
 800baf4:	21ba      	movs	r1, #186	@ 0xba
 800baf6:	f000 fd83 	bl	800c600 <__assert_func>
 800bafa:	6922      	ldr	r2, [r4, #16]
 800bafc:	3202      	adds	r2, #2
 800bafe:	f104 010c 	add.w	r1, r4, #12
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	300c      	adds	r0, #12
 800bb06:	f000 fd6d 	bl	800c5e4 <memcpy>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ffa5 	bl	800ba5c <_Bfree>
 800bb12:	4644      	mov	r4, r8
 800bb14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb18:	3501      	adds	r5, #1
 800bb1a:	615e      	str	r6, [r3, #20]
 800bb1c:	6125      	str	r5, [r4, #16]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb24:	0800c964 	.word	0x0800c964
 800bb28:	0800c975 	.word	0x0800c975

0800bb2c <__hi0bits>:
 800bb2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb30:	4603      	mov	r3, r0
 800bb32:	bf36      	itet	cc
 800bb34:	0403      	lslcc	r3, r0, #16
 800bb36:	2000      	movcs	r0, #0
 800bb38:	2010      	movcc	r0, #16
 800bb3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb3e:	bf3c      	itt	cc
 800bb40:	021b      	lslcc	r3, r3, #8
 800bb42:	3008      	addcc	r0, #8
 800bb44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb48:	bf3c      	itt	cc
 800bb4a:	011b      	lslcc	r3, r3, #4
 800bb4c:	3004      	addcc	r0, #4
 800bb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb52:	bf3c      	itt	cc
 800bb54:	009b      	lslcc	r3, r3, #2
 800bb56:	3002      	addcc	r0, #2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	db05      	blt.n	800bb68 <__hi0bits+0x3c>
 800bb5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb60:	f100 0001 	add.w	r0, r0, #1
 800bb64:	bf08      	it	eq
 800bb66:	2020      	moveq	r0, #32
 800bb68:	4770      	bx	lr

0800bb6a <__lo0bits>:
 800bb6a:	6803      	ldr	r3, [r0, #0]
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	f013 0007 	ands.w	r0, r3, #7
 800bb72:	d00b      	beq.n	800bb8c <__lo0bits+0x22>
 800bb74:	07d9      	lsls	r1, r3, #31
 800bb76:	d421      	bmi.n	800bbbc <__lo0bits+0x52>
 800bb78:	0798      	lsls	r0, r3, #30
 800bb7a:	bf49      	itett	mi
 800bb7c:	085b      	lsrmi	r3, r3, #1
 800bb7e:	089b      	lsrpl	r3, r3, #2
 800bb80:	2001      	movmi	r0, #1
 800bb82:	6013      	strmi	r3, [r2, #0]
 800bb84:	bf5c      	itt	pl
 800bb86:	6013      	strpl	r3, [r2, #0]
 800bb88:	2002      	movpl	r0, #2
 800bb8a:	4770      	bx	lr
 800bb8c:	b299      	uxth	r1, r3
 800bb8e:	b909      	cbnz	r1, 800bb94 <__lo0bits+0x2a>
 800bb90:	0c1b      	lsrs	r3, r3, #16
 800bb92:	2010      	movs	r0, #16
 800bb94:	b2d9      	uxtb	r1, r3
 800bb96:	b909      	cbnz	r1, 800bb9c <__lo0bits+0x32>
 800bb98:	3008      	adds	r0, #8
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	0719      	lsls	r1, r3, #28
 800bb9e:	bf04      	itt	eq
 800bba0:	091b      	lsreq	r3, r3, #4
 800bba2:	3004      	addeq	r0, #4
 800bba4:	0799      	lsls	r1, r3, #30
 800bba6:	bf04      	itt	eq
 800bba8:	089b      	lsreq	r3, r3, #2
 800bbaa:	3002      	addeq	r0, #2
 800bbac:	07d9      	lsls	r1, r3, #31
 800bbae:	d403      	bmi.n	800bbb8 <__lo0bits+0x4e>
 800bbb0:	085b      	lsrs	r3, r3, #1
 800bbb2:	f100 0001 	add.w	r0, r0, #1
 800bbb6:	d003      	beq.n	800bbc0 <__lo0bits+0x56>
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	4770      	bx	lr
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4770      	bx	lr
 800bbc0:	2020      	movs	r0, #32
 800bbc2:	4770      	bx	lr

0800bbc4 <__i2b>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	2101      	movs	r1, #1
 800bbca:	f7ff ff07 	bl	800b9dc <_Balloc>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	b928      	cbnz	r0, 800bbde <__i2b+0x1a>
 800bbd2:	4b05      	ldr	r3, [pc, #20]	@ (800bbe8 <__i2b+0x24>)
 800bbd4:	4805      	ldr	r0, [pc, #20]	@ (800bbec <__i2b+0x28>)
 800bbd6:	f240 1145 	movw	r1, #325	@ 0x145
 800bbda:	f000 fd11 	bl	800c600 <__assert_func>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	6144      	str	r4, [r0, #20]
 800bbe2:	6103      	str	r3, [r0, #16]
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	bf00      	nop
 800bbe8:	0800c964 	.word	0x0800c964
 800bbec:	0800c975 	.word	0x0800c975

0800bbf0 <__multiply>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	690a      	ldr	r2, [r1, #16]
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	bfa8      	it	ge
 800bbfe:	4623      	movge	r3, r4
 800bc00:	460f      	mov	r7, r1
 800bc02:	bfa4      	itt	ge
 800bc04:	460c      	movge	r4, r1
 800bc06:	461f      	movge	r7, r3
 800bc08:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc0c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc10:	68a3      	ldr	r3, [r4, #8]
 800bc12:	6861      	ldr	r1, [r4, #4]
 800bc14:	eb0a 0609 	add.w	r6, sl, r9
 800bc18:	42b3      	cmp	r3, r6
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	bfb8      	it	lt
 800bc1e:	3101      	addlt	r1, #1
 800bc20:	f7ff fedc 	bl	800b9dc <_Balloc>
 800bc24:	b930      	cbnz	r0, 800bc34 <__multiply+0x44>
 800bc26:	4602      	mov	r2, r0
 800bc28:	4b44      	ldr	r3, [pc, #272]	@ (800bd3c <__multiply+0x14c>)
 800bc2a:	4845      	ldr	r0, [pc, #276]	@ (800bd40 <__multiply+0x150>)
 800bc2c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc30:	f000 fce6 	bl	800c600 <__assert_func>
 800bc34:	f100 0514 	add.w	r5, r0, #20
 800bc38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4543      	cmp	r3, r8
 800bc42:	d321      	bcc.n	800bc88 <__multiply+0x98>
 800bc44:	f107 0114 	add.w	r1, r7, #20
 800bc48:	f104 0214 	add.w	r2, r4, #20
 800bc4c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc50:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc54:	9302      	str	r3, [sp, #8]
 800bc56:	1b13      	subs	r3, r2, r4
 800bc58:	3b15      	subs	r3, #21
 800bc5a:	f023 0303 	bic.w	r3, r3, #3
 800bc5e:	3304      	adds	r3, #4
 800bc60:	f104 0715 	add.w	r7, r4, #21
 800bc64:	42ba      	cmp	r2, r7
 800bc66:	bf38      	it	cc
 800bc68:	2304      	movcc	r3, #4
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	9103      	str	r1, [sp, #12]
 800bc70:	428b      	cmp	r3, r1
 800bc72:	d80c      	bhi.n	800bc8e <__multiply+0x9e>
 800bc74:	2e00      	cmp	r6, #0
 800bc76:	dd03      	ble.n	800bc80 <__multiply+0x90>
 800bc78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d05b      	beq.n	800bd38 <__multiply+0x148>
 800bc80:	6106      	str	r6, [r0, #16]
 800bc82:	b005      	add	sp, #20
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	f843 2b04 	str.w	r2, [r3], #4
 800bc8c:	e7d8      	b.n	800bc40 <__multiply+0x50>
 800bc8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc92:	f1ba 0f00 	cmp.w	sl, #0
 800bc96:	d024      	beq.n	800bce2 <__multiply+0xf2>
 800bc98:	f104 0e14 	add.w	lr, r4, #20
 800bc9c:	46a9      	mov	r9, r5
 800bc9e:	f04f 0c00 	mov.w	ip, #0
 800bca2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bca6:	f8d9 3000 	ldr.w	r3, [r9]
 800bcaa:	fa1f fb87 	uxth.w	fp, r7
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcb4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bcb8:	f8d9 7000 	ldr.w	r7, [r9]
 800bcbc:	4463      	add	r3, ip
 800bcbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcc2:	fb0a c70b 	mla	r7, sl, fp, ip
 800bcc6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bcd0:	4572      	cmp	r2, lr
 800bcd2:	f849 3b04 	str.w	r3, [r9], #4
 800bcd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcda:	d8e2      	bhi.n	800bca2 <__multiply+0xb2>
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	f845 c003 	str.w	ip, [r5, r3]
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bce8:	3104      	adds	r1, #4
 800bcea:	f1b9 0f00 	cmp.w	r9, #0
 800bcee:	d021      	beq.n	800bd34 <__multiply+0x144>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	f104 0c14 	add.w	ip, r4, #20
 800bcf6:	46ae      	mov	lr, r5
 800bcf8:	f04f 0a00 	mov.w	sl, #0
 800bcfc:	f8bc b000 	ldrh.w	fp, [ip]
 800bd00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd04:	fb09 770b 	mla	r7, r9, fp, r7
 800bd08:	4457      	add	r7, sl
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd10:	f84e 3b04 	str.w	r3, [lr], #4
 800bd14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd1c:	f8be 3000 	ldrh.w	r3, [lr]
 800bd20:	fb09 330a 	mla	r3, r9, sl, r3
 800bd24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd28:	4562      	cmp	r2, ip
 800bd2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd2e:	d8e5      	bhi.n	800bcfc <__multiply+0x10c>
 800bd30:	9f01      	ldr	r7, [sp, #4]
 800bd32:	51eb      	str	r3, [r5, r7]
 800bd34:	3504      	adds	r5, #4
 800bd36:	e799      	b.n	800bc6c <__multiply+0x7c>
 800bd38:	3e01      	subs	r6, #1
 800bd3a:	e79b      	b.n	800bc74 <__multiply+0x84>
 800bd3c:	0800c964 	.word	0x0800c964
 800bd40:	0800c975 	.word	0x0800c975

0800bd44 <__pow5mult>:
 800bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd48:	4615      	mov	r5, r2
 800bd4a:	f012 0203 	ands.w	r2, r2, #3
 800bd4e:	4607      	mov	r7, r0
 800bd50:	460e      	mov	r6, r1
 800bd52:	d007      	beq.n	800bd64 <__pow5mult+0x20>
 800bd54:	4c25      	ldr	r4, [pc, #148]	@ (800bdec <__pow5mult+0xa8>)
 800bd56:	3a01      	subs	r2, #1
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd5e:	f7ff fe9f 	bl	800baa0 <__multadd>
 800bd62:	4606      	mov	r6, r0
 800bd64:	10ad      	asrs	r5, r5, #2
 800bd66:	d03d      	beq.n	800bde4 <__pow5mult+0xa0>
 800bd68:	69fc      	ldr	r4, [r7, #28]
 800bd6a:	b97c      	cbnz	r4, 800bd8c <__pow5mult+0x48>
 800bd6c:	2010      	movs	r0, #16
 800bd6e:	f7ff fd7f 	bl	800b870 <malloc>
 800bd72:	4602      	mov	r2, r0
 800bd74:	61f8      	str	r0, [r7, #28]
 800bd76:	b928      	cbnz	r0, 800bd84 <__pow5mult+0x40>
 800bd78:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf0 <__pow5mult+0xac>)
 800bd7a:	481e      	ldr	r0, [pc, #120]	@ (800bdf4 <__pow5mult+0xb0>)
 800bd7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd80:	f000 fc3e 	bl	800c600 <__assert_func>
 800bd84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd88:	6004      	str	r4, [r0, #0]
 800bd8a:	60c4      	str	r4, [r0, #12]
 800bd8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd94:	b94c      	cbnz	r4, 800bdaa <__pow5mult+0x66>
 800bd96:	f240 2171 	movw	r1, #625	@ 0x271
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ff12 	bl	800bbc4 <__i2b>
 800bda0:	2300      	movs	r3, #0
 800bda2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bda6:	4604      	mov	r4, r0
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	f04f 0900 	mov.w	r9, #0
 800bdae:	07eb      	lsls	r3, r5, #31
 800bdb0:	d50a      	bpl.n	800bdc8 <__pow5mult+0x84>
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7ff ff1a 	bl	800bbf0 <__multiply>
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4680      	mov	r8, r0
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7ff fe4b 	bl	800ba5c <_Bfree>
 800bdc6:	4646      	mov	r6, r8
 800bdc8:	106d      	asrs	r5, r5, #1
 800bdca:	d00b      	beq.n	800bde4 <__pow5mult+0xa0>
 800bdcc:	6820      	ldr	r0, [r4, #0]
 800bdce:	b938      	cbnz	r0, 800bde0 <__pow5mult+0x9c>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7ff ff0b 	bl	800bbf0 <__multiply>
 800bdda:	6020      	str	r0, [r4, #0]
 800bddc:	f8c0 9000 	str.w	r9, [r0]
 800bde0:	4604      	mov	r4, r0
 800bde2:	e7e4      	b.n	800bdae <__pow5mult+0x6a>
 800bde4:	4630      	mov	r0, r6
 800bde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdea:	bf00      	nop
 800bdec:	0800c9d0 	.word	0x0800c9d0
 800bdf0:	0800c8f5 	.word	0x0800c8f5
 800bdf4:	0800c975 	.word	0x0800c975

0800bdf8 <__lshift>:
 800bdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	6849      	ldr	r1, [r1, #4]
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	4607      	mov	r7, r0
 800be0a:	4691      	mov	r9, r2
 800be0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be10:	f108 0601 	add.w	r6, r8, #1
 800be14:	42b3      	cmp	r3, r6
 800be16:	db0b      	blt.n	800be30 <__lshift+0x38>
 800be18:	4638      	mov	r0, r7
 800be1a:	f7ff fddf 	bl	800b9dc <_Balloc>
 800be1e:	4605      	mov	r5, r0
 800be20:	b948      	cbnz	r0, 800be36 <__lshift+0x3e>
 800be22:	4602      	mov	r2, r0
 800be24:	4b28      	ldr	r3, [pc, #160]	@ (800bec8 <__lshift+0xd0>)
 800be26:	4829      	ldr	r0, [pc, #164]	@ (800becc <__lshift+0xd4>)
 800be28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be2c:	f000 fbe8 	bl	800c600 <__assert_func>
 800be30:	3101      	adds	r1, #1
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	e7ee      	b.n	800be14 <__lshift+0x1c>
 800be36:	2300      	movs	r3, #0
 800be38:	f100 0114 	add.w	r1, r0, #20
 800be3c:	f100 0210 	add.w	r2, r0, #16
 800be40:	4618      	mov	r0, r3
 800be42:	4553      	cmp	r3, sl
 800be44:	db33      	blt.n	800beae <__lshift+0xb6>
 800be46:	6920      	ldr	r0, [r4, #16]
 800be48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be4c:	f104 0314 	add.w	r3, r4, #20
 800be50:	f019 091f 	ands.w	r9, r9, #31
 800be54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be5c:	d02b      	beq.n	800beb6 <__lshift+0xbe>
 800be5e:	f1c9 0e20 	rsb	lr, r9, #32
 800be62:	468a      	mov	sl, r1
 800be64:	2200      	movs	r2, #0
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	fa00 f009 	lsl.w	r0, r0, r9
 800be6c:	4310      	orrs	r0, r2
 800be6e:	f84a 0b04 	str.w	r0, [sl], #4
 800be72:	f853 2b04 	ldr.w	r2, [r3], #4
 800be76:	459c      	cmp	ip, r3
 800be78:	fa22 f20e 	lsr.w	r2, r2, lr
 800be7c:	d8f3      	bhi.n	800be66 <__lshift+0x6e>
 800be7e:	ebac 0304 	sub.w	r3, ip, r4
 800be82:	3b15      	subs	r3, #21
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	3304      	adds	r3, #4
 800be8a:	f104 0015 	add.w	r0, r4, #21
 800be8e:	4584      	cmp	ip, r0
 800be90:	bf38      	it	cc
 800be92:	2304      	movcc	r3, #4
 800be94:	50ca      	str	r2, [r1, r3]
 800be96:	b10a      	cbz	r2, 800be9c <__lshift+0xa4>
 800be98:	f108 0602 	add.w	r6, r8, #2
 800be9c:	3e01      	subs	r6, #1
 800be9e:	4638      	mov	r0, r7
 800bea0:	612e      	str	r6, [r5, #16]
 800bea2:	4621      	mov	r1, r4
 800bea4:	f7ff fdda 	bl	800ba5c <_Bfree>
 800bea8:	4628      	mov	r0, r5
 800beaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beae:	f842 0f04 	str.w	r0, [r2, #4]!
 800beb2:	3301      	adds	r3, #1
 800beb4:	e7c5      	b.n	800be42 <__lshift+0x4a>
 800beb6:	3904      	subs	r1, #4
 800beb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bebc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bec0:	459c      	cmp	ip, r3
 800bec2:	d8f9      	bhi.n	800beb8 <__lshift+0xc0>
 800bec4:	e7ea      	b.n	800be9c <__lshift+0xa4>
 800bec6:	bf00      	nop
 800bec8:	0800c964 	.word	0x0800c964
 800becc:	0800c975 	.word	0x0800c975

0800bed0 <__mcmp>:
 800bed0:	690a      	ldr	r2, [r1, #16]
 800bed2:	4603      	mov	r3, r0
 800bed4:	6900      	ldr	r0, [r0, #16]
 800bed6:	1a80      	subs	r0, r0, r2
 800bed8:	b530      	push	{r4, r5, lr}
 800beda:	d10e      	bne.n	800befa <__mcmp+0x2a>
 800bedc:	3314      	adds	r3, #20
 800bede:	3114      	adds	r1, #20
 800bee0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bee4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bee8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800beec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bef0:	4295      	cmp	r5, r2
 800bef2:	d003      	beq.n	800befc <__mcmp+0x2c>
 800bef4:	d205      	bcs.n	800bf02 <__mcmp+0x32>
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295
 800befa:	bd30      	pop	{r4, r5, pc}
 800befc:	42a3      	cmp	r3, r4
 800befe:	d3f3      	bcc.n	800bee8 <__mcmp+0x18>
 800bf00:	e7fb      	b.n	800befa <__mcmp+0x2a>
 800bf02:	2001      	movs	r0, #1
 800bf04:	e7f9      	b.n	800befa <__mcmp+0x2a>
	...

0800bf08 <__mdiff>:
 800bf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	4606      	mov	r6, r0
 800bf10:	4611      	mov	r1, r2
 800bf12:	4648      	mov	r0, r9
 800bf14:	4614      	mov	r4, r2
 800bf16:	f7ff ffdb 	bl	800bed0 <__mcmp>
 800bf1a:	1e05      	subs	r5, r0, #0
 800bf1c:	d112      	bne.n	800bf44 <__mdiff+0x3c>
 800bf1e:	4629      	mov	r1, r5
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7ff fd5b 	bl	800b9dc <_Balloc>
 800bf26:	4602      	mov	r2, r0
 800bf28:	b928      	cbnz	r0, 800bf36 <__mdiff+0x2e>
 800bf2a:	4b3f      	ldr	r3, [pc, #252]	@ (800c028 <__mdiff+0x120>)
 800bf2c:	f240 2137 	movw	r1, #567	@ 0x237
 800bf30:	483e      	ldr	r0, [pc, #248]	@ (800c02c <__mdiff+0x124>)
 800bf32:	f000 fb65 	bl	800c600 <__assert_func>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	b003      	add	sp, #12
 800bf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf44:	bfbc      	itt	lt
 800bf46:	464b      	movlt	r3, r9
 800bf48:	46a1      	movlt	r9, r4
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf50:	bfba      	itte	lt
 800bf52:	461c      	movlt	r4, r3
 800bf54:	2501      	movlt	r5, #1
 800bf56:	2500      	movge	r5, #0
 800bf58:	f7ff fd40 	bl	800b9dc <_Balloc>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	b918      	cbnz	r0, 800bf68 <__mdiff+0x60>
 800bf60:	4b31      	ldr	r3, [pc, #196]	@ (800c028 <__mdiff+0x120>)
 800bf62:	f240 2145 	movw	r1, #581	@ 0x245
 800bf66:	e7e3      	b.n	800bf30 <__mdiff+0x28>
 800bf68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf6c:	6926      	ldr	r6, [r4, #16]
 800bf6e:	60c5      	str	r5, [r0, #12]
 800bf70:	f109 0310 	add.w	r3, r9, #16
 800bf74:	f109 0514 	add.w	r5, r9, #20
 800bf78:	f104 0e14 	add.w	lr, r4, #20
 800bf7c:	f100 0b14 	add.w	fp, r0, #20
 800bf80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	46d9      	mov	r9, fp
 800bf8c:	f04f 0c00 	mov.w	ip, #0
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf9a:	9301      	str	r3, [sp, #4]
 800bf9c:	fa1f f38a 	uxth.w	r3, sl
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	b283      	uxth	r3, r0
 800bfa4:	1acb      	subs	r3, r1, r3
 800bfa6:	0c00      	lsrs	r0, r0, #16
 800bfa8:	4463      	add	r3, ip
 800bfaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfb8:	4576      	cmp	r6, lr
 800bfba:	f849 3b04 	str.w	r3, [r9], #4
 800bfbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfc2:	d8e5      	bhi.n	800bf90 <__mdiff+0x88>
 800bfc4:	1b33      	subs	r3, r6, r4
 800bfc6:	3b15      	subs	r3, #21
 800bfc8:	f023 0303 	bic.w	r3, r3, #3
 800bfcc:	3415      	adds	r4, #21
 800bfce:	3304      	adds	r3, #4
 800bfd0:	42a6      	cmp	r6, r4
 800bfd2:	bf38      	it	cc
 800bfd4:	2304      	movcc	r3, #4
 800bfd6:	441d      	add	r5, r3
 800bfd8:	445b      	add	r3, fp
 800bfda:	461e      	mov	r6, r3
 800bfdc:	462c      	mov	r4, r5
 800bfde:	4544      	cmp	r4, r8
 800bfe0:	d30e      	bcc.n	800c000 <__mdiff+0xf8>
 800bfe2:	f108 0103 	add.w	r1, r8, #3
 800bfe6:	1b49      	subs	r1, r1, r5
 800bfe8:	f021 0103 	bic.w	r1, r1, #3
 800bfec:	3d03      	subs	r5, #3
 800bfee:	45a8      	cmp	r8, r5
 800bff0:	bf38      	it	cc
 800bff2:	2100      	movcc	r1, #0
 800bff4:	440b      	add	r3, r1
 800bff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffa:	b191      	cbz	r1, 800c022 <__mdiff+0x11a>
 800bffc:	6117      	str	r7, [r2, #16]
 800bffe:	e79d      	b.n	800bf3c <__mdiff+0x34>
 800c000:	f854 1b04 	ldr.w	r1, [r4], #4
 800c004:	46e6      	mov	lr, ip
 800c006:	0c08      	lsrs	r0, r1, #16
 800c008:	fa1c fc81 	uxtah	ip, ip, r1
 800c00c:	4471      	add	r1, lr
 800c00e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c012:	b289      	uxth	r1, r1
 800c014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c018:	f846 1b04 	str.w	r1, [r6], #4
 800c01c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c020:	e7dd      	b.n	800bfde <__mdiff+0xd6>
 800c022:	3f01      	subs	r7, #1
 800c024:	e7e7      	b.n	800bff6 <__mdiff+0xee>
 800c026:	bf00      	nop
 800c028:	0800c964 	.word	0x0800c964
 800c02c:	0800c975 	.word	0x0800c975

0800c030 <__d2b>:
 800c030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c034:	460f      	mov	r7, r1
 800c036:	2101      	movs	r1, #1
 800c038:	ec59 8b10 	vmov	r8, r9, d0
 800c03c:	4616      	mov	r6, r2
 800c03e:	f7ff fccd 	bl	800b9dc <_Balloc>
 800c042:	4604      	mov	r4, r0
 800c044:	b930      	cbnz	r0, 800c054 <__d2b+0x24>
 800c046:	4602      	mov	r2, r0
 800c048:	4b23      	ldr	r3, [pc, #140]	@ (800c0d8 <__d2b+0xa8>)
 800c04a:	4824      	ldr	r0, [pc, #144]	@ (800c0dc <__d2b+0xac>)
 800c04c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c050:	f000 fad6 	bl	800c600 <__assert_func>
 800c054:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c05c:	b10d      	cbz	r5, 800c062 <__d2b+0x32>
 800c05e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	f1b8 0300 	subs.w	r3, r8, #0
 800c068:	d023      	beq.n	800c0b2 <__d2b+0x82>
 800c06a:	4668      	mov	r0, sp
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	f7ff fd7c 	bl	800bb6a <__lo0bits>
 800c072:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c076:	b1d0      	cbz	r0, 800c0ae <__d2b+0x7e>
 800c078:	f1c0 0320 	rsb	r3, r0, #32
 800c07c:	fa02 f303 	lsl.w	r3, r2, r3
 800c080:	430b      	orrs	r3, r1
 800c082:	40c2      	lsrs	r2, r0
 800c084:	6163      	str	r3, [r4, #20]
 800c086:	9201      	str	r2, [sp, #4]
 800c088:	9b01      	ldr	r3, [sp, #4]
 800c08a:	61a3      	str	r3, [r4, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bf0c      	ite	eq
 800c090:	2201      	moveq	r2, #1
 800c092:	2202      	movne	r2, #2
 800c094:	6122      	str	r2, [r4, #16]
 800c096:	b1a5      	cbz	r5, 800c0c2 <__d2b+0x92>
 800c098:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c09c:	4405      	add	r5, r0
 800c09e:	603d      	str	r5, [r7, #0]
 800c0a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0a4:	6030      	str	r0, [r6, #0]
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	b003      	add	sp, #12
 800c0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	6161      	str	r1, [r4, #20]
 800c0b0:	e7ea      	b.n	800c088 <__d2b+0x58>
 800c0b2:	a801      	add	r0, sp, #4
 800c0b4:	f7ff fd59 	bl	800bb6a <__lo0bits>
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	6163      	str	r3, [r4, #20]
 800c0bc:	3020      	adds	r0, #32
 800c0be:	2201      	movs	r2, #1
 800c0c0:	e7e8      	b.n	800c094 <__d2b+0x64>
 800c0c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0ca:	6038      	str	r0, [r7, #0]
 800c0cc:	6918      	ldr	r0, [r3, #16]
 800c0ce:	f7ff fd2d 	bl	800bb2c <__hi0bits>
 800c0d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0d6:	e7e5      	b.n	800c0a4 <__d2b+0x74>
 800c0d8:	0800c964 	.word	0x0800c964
 800c0dc:	0800c975 	.word	0x0800c975

0800c0e0 <__sfputc_r>:
 800c0e0:	6893      	ldr	r3, [r2, #8]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	b410      	push	{r4}
 800c0e8:	6093      	str	r3, [r2, #8]
 800c0ea:	da08      	bge.n	800c0fe <__sfputc_r+0x1e>
 800c0ec:	6994      	ldr	r4, [r2, #24]
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	db01      	blt.n	800c0f6 <__sfputc_r+0x16>
 800c0f2:	290a      	cmp	r1, #10
 800c0f4:	d103      	bne.n	800c0fe <__sfputc_r+0x1e>
 800c0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fa:	f7fe bc7a 	b.w	800a9f2 <__swbuf_r>
 800c0fe:	6813      	ldr	r3, [r2, #0]
 800c100:	1c58      	adds	r0, r3, #1
 800c102:	6010      	str	r0, [r2, #0]
 800c104:	7019      	strb	r1, [r3, #0]
 800c106:	4608      	mov	r0, r1
 800c108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <__sfputs_r>:
 800c10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c110:	4606      	mov	r6, r0
 800c112:	460f      	mov	r7, r1
 800c114:	4614      	mov	r4, r2
 800c116:	18d5      	adds	r5, r2, r3
 800c118:	42ac      	cmp	r4, r5
 800c11a:	d101      	bne.n	800c120 <__sfputs_r+0x12>
 800c11c:	2000      	movs	r0, #0
 800c11e:	e007      	b.n	800c130 <__sfputs_r+0x22>
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	463a      	mov	r2, r7
 800c126:	4630      	mov	r0, r6
 800c128:	f7ff ffda 	bl	800c0e0 <__sfputc_r>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d1f3      	bne.n	800c118 <__sfputs_r+0xa>
 800c130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c134 <_vfiprintf_r>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	460d      	mov	r5, r1
 800c13a:	b09d      	sub	sp, #116	@ 0x74
 800c13c:	4614      	mov	r4, r2
 800c13e:	4698      	mov	r8, r3
 800c140:	4606      	mov	r6, r0
 800c142:	b118      	cbz	r0, 800c14c <_vfiprintf_r+0x18>
 800c144:	6a03      	ldr	r3, [r0, #32]
 800c146:	b90b      	cbnz	r3, 800c14c <_vfiprintf_r+0x18>
 800c148:	f7fe fb6a 	bl	800a820 <__sinit>
 800c14c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	d405      	bmi.n	800c15e <_vfiprintf_r+0x2a>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	059a      	lsls	r2, r3, #22
 800c156:	d402      	bmi.n	800c15e <_vfiprintf_r+0x2a>
 800c158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c15a:	f7fe fd5c 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	071b      	lsls	r3, r3, #28
 800c162:	d501      	bpl.n	800c168 <_vfiprintf_r+0x34>
 800c164:	692b      	ldr	r3, [r5, #16]
 800c166:	b99b      	cbnz	r3, 800c190 <_vfiprintf_r+0x5c>
 800c168:	4629      	mov	r1, r5
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7fe fc80 	bl	800aa70 <__swsetup_r>
 800c170:	b170      	cbz	r0, 800c190 <_vfiprintf_r+0x5c>
 800c172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c174:	07dc      	lsls	r4, r3, #31
 800c176:	d504      	bpl.n	800c182 <_vfiprintf_r+0x4e>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	b01d      	add	sp, #116	@ 0x74
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c182:	89ab      	ldrh	r3, [r5, #12]
 800c184:	0598      	lsls	r0, r3, #22
 800c186:	d4f7      	bmi.n	800c178 <_vfiprintf_r+0x44>
 800c188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c18a:	f7fe fd45 	bl	800ac18 <__retarget_lock_release_recursive>
 800c18e:	e7f3      	b.n	800c178 <_vfiprintf_r+0x44>
 800c190:	2300      	movs	r3, #0
 800c192:	9309      	str	r3, [sp, #36]	@ 0x24
 800c194:	2320      	movs	r3, #32
 800c196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c19e:	2330      	movs	r3, #48	@ 0x30
 800c1a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c350 <_vfiprintf_r+0x21c>
 800c1a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1a8:	f04f 0901 	mov.w	r9, #1
 800c1ac:	4623      	mov	r3, r4
 800c1ae:	469a      	mov	sl, r3
 800c1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b4:	b10a      	cbz	r2, 800c1ba <_vfiprintf_r+0x86>
 800c1b6:	2a25      	cmp	r2, #37	@ 0x25
 800c1b8:	d1f9      	bne.n	800c1ae <_vfiprintf_r+0x7a>
 800c1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c1be:	d00b      	beq.n	800c1d8 <_vfiprintf_r+0xa4>
 800c1c0:	465b      	mov	r3, fp
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7ff ffa1 	bl	800c10e <__sfputs_r>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	f000 80a7 	beq.w	800c320 <_vfiprintf_r+0x1ec>
 800c1d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1d4:	445a      	add	r2, fp
 800c1d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 809f 	beq.w	800c320 <_vfiprintf_r+0x1ec>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ec:	f10a 0a01 	add.w	sl, sl, #1
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	9307      	str	r3, [sp, #28]
 800c1f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1fa:	4654      	mov	r4, sl
 800c1fc:	2205      	movs	r2, #5
 800c1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c202:	4853      	ldr	r0, [pc, #332]	@ (800c350 <_vfiprintf_r+0x21c>)
 800c204:	f7f4 f884 	bl	8000310 <memchr>
 800c208:	9a04      	ldr	r2, [sp, #16]
 800c20a:	b9d8      	cbnz	r0, 800c244 <_vfiprintf_r+0x110>
 800c20c:	06d1      	lsls	r1, r2, #27
 800c20e:	bf44      	itt	mi
 800c210:	2320      	movmi	r3, #32
 800c212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c216:	0713      	lsls	r3, r2, #28
 800c218:	bf44      	itt	mi
 800c21a:	232b      	movmi	r3, #43	@ 0x2b
 800c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c220:	f89a 3000 	ldrb.w	r3, [sl]
 800c224:	2b2a      	cmp	r3, #42	@ 0x2a
 800c226:	d015      	beq.n	800c254 <_vfiprintf_r+0x120>
 800c228:	9a07      	ldr	r2, [sp, #28]
 800c22a:	4654      	mov	r4, sl
 800c22c:	2000      	movs	r0, #0
 800c22e:	f04f 0c0a 	mov.w	ip, #10
 800c232:	4621      	mov	r1, r4
 800c234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c238:	3b30      	subs	r3, #48	@ 0x30
 800c23a:	2b09      	cmp	r3, #9
 800c23c:	d94b      	bls.n	800c2d6 <_vfiprintf_r+0x1a2>
 800c23e:	b1b0      	cbz	r0, 800c26e <_vfiprintf_r+0x13a>
 800c240:	9207      	str	r2, [sp, #28]
 800c242:	e014      	b.n	800c26e <_vfiprintf_r+0x13a>
 800c244:	eba0 0308 	sub.w	r3, r0, r8
 800c248:	fa09 f303 	lsl.w	r3, r9, r3
 800c24c:	4313      	orrs	r3, r2
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	46a2      	mov	sl, r4
 800c252:	e7d2      	b.n	800c1fa <_vfiprintf_r+0xc6>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	1d19      	adds	r1, r3, #4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	9103      	str	r1, [sp, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bfbb      	ittet	lt
 800c260:	425b      	neglt	r3, r3
 800c262:	f042 0202 	orrlt.w	r2, r2, #2
 800c266:	9307      	strge	r3, [sp, #28]
 800c268:	9307      	strlt	r3, [sp, #28]
 800c26a:	bfb8      	it	lt
 800c26c:	9204      	strlt	r2, [sp, #16]
 800c26e:	7823      	ldrb	r3, [r4, #0]
 800c270:	2b2e      	cmp	r3, #46	@ 0x2e
 800c272:	d10a      	bne.n	800c28a <_vfiprintf_r+0x156>
 800c274:	7863      	ldrb	r3, [r4, #1]
 800c276:	2b2a      	cmp	r3, #42	@ 0x2a
 800c278:	d132      	bne.n	800c2e0 <_vfiprintf_r+0x1ac>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	1d1a      	adds	r2, r3, #4
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	9203      	str	r2, [sp, #12]
 800c282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c286:	3402      	adds	r4, #2
 800c288:	9305      	str	r3, [sp, #20]
 800c28a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c360 <_vfiprintf_r+0x22c>
 800c28e:	7821      	ldrb	r1, [r4, #0]
 800c290:	2203      	movs	r2, #3
 800c292:	4650      	mov	r0, sl
 800c294:	f7f4 f83c 	bl	8000310 <memchr>
 800c298:	b138      	cbz	r0, 800c2aa <_vfiprintf_r+0x176>
 800c29a:	9b04      	ldr	r3, [sp, #16]
 800c29c:	eba0 000a 	sub.w	r0, r0, sl
 800c2a0:	2240      	movs	r2, #64	@ 0x40
 800c2a2:	4082      	lsls	r2, r0
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	3401      	adds	r4, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ae:	4829      	ldr	r0, [pc, #164]	@ (800c354 <_vfiprintf_r+0x220>)
 800c2b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2b4:	2206      	movs	r2, #6
 800c2b6:	f7f4 f82b 	bl	8000310 <memchr>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d03f      	beq.n	800c33e <_vfiprintf_r+0x20a>
 800c2be:	4b26      	ldr	r3, [pc, #152]	@ (800c358 <_vfiprintf_r+0x224>)
 800c2c0:	bb1b      	cbnz	r3, 800c30a <_vfiprintf_r+0x1d6>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	3307      	adds	r3, #7
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	9303      	str	r3, [sp, #12]
 800c2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d0:	443b      	add	r3, r7
 800c2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d4:	e76a      	b.n	800c1ac <_vfiprintf_r+0x78>
 800c2d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2da:	460c      	mov	r4, r1
 800c2dc:	2001      	movs	r0, #1
 800c2de:	e7a8      	b.n	800c232 <_vfiprintf_r+0xfe>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	3401      	adds	r4, #1
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f04f 0c0a 	mov.w	ip, #10
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2f2:	3a30      	subs	r2, #48	@ 0x30
 800c2f4:	2a09      	cmp	r2, #9
 800c2f6:	d903      	bls.n	800c300 <_vfiprintf_r+0x1cc>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d0c6      	beq.n	800c28a <_vfiprintf_r+0x156>
 800c2fc:	9105      	str	r1, [sp, #20]
 800c2fe:	e7c4      	b.n	800c28a <_vfiprintf_r+0x156>
 800c300:	fb0c 2101 	mla	r1, ip, r1, r2
 800c304:	4604      	mov	r4, r0
 800c306:	2301      	movs	r3, #1
 800c308:	e7f0      	b.n	800c2ec <_vfiprintf_r+0x1b8>
 800c30a:	ab03      	add	r3, sp, #12
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	462a      	mov	r2, r5
 800c310:	4b12      	ldr	r3, [pc, #72]	@ (800c35c <_vfiprintf_r+0x228>)
 800c312:	a904      	add	r1, sp, #16
 800c314:	4630      	mov	r0, r6
 800c316:	f7fd fe4f 	bl	8009fb8 <_printf_float>
 800c31a:	4607      	mov	r7, r0
 800c31c:	1c78      	adds	r0, r7, #1
 800c31e:	d1d6      	bne.n	800c2ce <_vfiprintf_r+0x19a>
 800c320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c322:	07d9      	lsls	r1, r3, #31
 800c324:	d405      	bmi.n	800c332 <_vfiprintf_r+0x1fe>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	059a      	lsls	r2, r3, #22
 800c32a:	d402      	bmi.n	800c332 <_vfiprintf_r+0x1fe>
 800c32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c32e:	f7fe fc73 	bl	800ac18 <__retarget_lock_release_recursive>
 800c332:	89ab      	ldrh	r3, [r5, #12]
 800c334:	065b      	lsls	r3, r3, #25
 800c336:	f53f af1f 	bmi.w	800c178 <_vfiprintf_r+0x44>
 800c33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c33c:	e71e      	b.n	800c17c <_vfiprintf_r+0x48>
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	462a      	mov	r2, r5
 800c344:	4b05      	ldr	r3, [pc, #20]	@ (800c35c <_vfiprintf_r+0x228>)
 800c346:	a904      	add	r1, sp, #16
 800c348:	4630      	mov	r0, r6
 800c34a:	f7fe f8bd 	bl	800a4c8 <_printf_i>
 800c34e:	e7e4      	b.n	800c31a <_vfiprintf_r+0x1e6>
 800c350:	0800cad0 	.word	0x0800cad0
 800c354:	0800cada 	.word	0x0800cada
 800c358:	08009fb9 	.word	0x08009fb9
 800c35c:	0800c10f 	.word	0x0800c10f
 800c360:	0800cad6 	.word	0x0800cad6

0800c364 <__sflush_r>:
 800c364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36c:	0716      	lsls	r6, r2, #28
 800c36e:	4605      	mov	r5, r0
 800c370:	460c      	mov	r4, r1
 800c372:	d454      	bmi.n	800c41e <__sflush_r+0xba>
 800c374:	684b      	ldr	r3, [r1, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	dc02      	bgt.n	800c380 <__sflush_r+0x1c>
 800c37a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dd48      	ble.n	800c412 <__sflush_r+0xae>
 800c380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c382:	2e00      	cmp	r6, #0
 800c384:	d045      	beq.n	800c412 <__sflush_r+0xae>
 800c386:	2300      	movs	r3, #0
 800c388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c38c:	682f      	ldr	r7, [r5, #0]
 800c38e:	6a21      	ldr	r1, [r4, #32]
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	d030      	beq.n	800c3f6 <__sflush_r+0x92>
 800c394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	0759      	lsls	r1, r3, #29
 800c39a:	d505      	bpl.n	800c3a8 <__sflush_r+0x44>
 800c39c:	6863      	ldr	r3, [r4, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3a2:	b10b      	cbz	r3, 800c3a8 <__sflush_r+0x44>
 800c3a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3a6:	1ad2      	subs	r2, r2, r3
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3ac:	6a21      	ldr	r1, [r4, #32]
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	47b0      	blx	r6
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	d106      	bne.n	800c3c6 <__sflush_r+0x62>
 800c3b8:	6829      	ldr	r1, [r5, #0]
 800c3ba:	291d      	cmp	r1, #29
 800c3bc:	d82b      	bhi.n	800c416 <__sflush_r+0xb2>
 800c3be:	4a2a      	ldr	r2, [pc, #168]	@ (800c468 <__sflush_r+0x104>)
 800c3c0:	410a      	asrs	r2, r1
 800c3c2:	07d6      	lsls	r6, r2, #31
 800c3c4:	d427      	bmi.n	800c416 <__sflush_r+0xb2>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	6062      	str	r2, [r4, #4]
 800c3ca:	04d9      	lsls	r1, r3, #19
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	6022      	str	r2, [r4, #0]
 800c3d0:	d504      	bpl.n	800c3dc <__sflush_r+0x78>
 800c3d2:	1c42      	adds	r2, r0, #1
 800c3d4:	d101      	bne.n	800c3da <__sflush_r+0x76>
 800c3d6:	682b      	ldr	r3, [r5, #0]
 800c3d8:	b903      	cbnz	r3, 800c3dc <__sflush_r+0x78>
 800c3da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3de:	602f      	str	r7, [r5, #0]
 800c3e0:	b1b9      	cbz	r1, 800c412 <__sflush_r+0xae>
 800c3e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3e6:	4299      	cmp	r1, r3
 800c3e8:	d002      	beq.n	800c3f0 <__sflush_r+0x8c>
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f7ff f9f6 	bl	800b7dc <_free_r>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3f4:	e00d      	b.n	800c412 <__sflush_r+0xae>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b0      	blx	r6
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	1c50      	adds	r0, r2, #1
 800c400:	d1c9      	bne.n	800c396 <__sflush_r+0x32>
 800c402:	682b      	ldr	r3, [r5, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0c6      	beq.n	800c396 <__sflush_r+0x32>
 800c408:	2b1d      	cmp	r3, #29
 800c40a:	d001      	beq.n	800c410 <__sflush_r+0xac>
 800c40c:	2b16      	cmp	r3, #22
 800c40e:	d11e      	bne.n	800c44e <__sflush_r+0xea>
 800c410:	602f      	str	r7, [r5, #0]
 800c412:	2000      	movs	r0, #0
 800c414:	e022      	b.n	800c45c <__sflush_r+0xf8>
 800c416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	e01b      	b.n	800c456 <__sflush_r+0xf2>
 800c41e:	690f      	ldr	r7, [r1, #16]
 800c420:	2f00      	cmp	r7, #0
 800c422:	d0f6      	beq.n	800c412 <__sflush_r+0xae>
 800c424:	0793      	lsls	r3, r2, #30
 800c426:	680e      	ldr	r6, [r1, #0]
 800c428:	bf08      	it	eq
 800c42a:	694b      	ldreq	r3, [r1, #20]
 800c42c:	600f      	str	r7, [r1, #0]
 800c42e:	bf18      	it	ne
 800c430:	2300      	movne	r3, #0
 800c432:	eba6 0807 	sub.w	r8, r6, r7
 800c436:	608b      	str	r3, [r1, #8]
 800c438:	f1b8 0f00 	cmp.w	r8, #0
 800c43c:	dde9      	ble.n	800c412 <__sflush_r+0xae>
 800c43e:	6a21      	ldr	r1, [r4, #32]
 800c440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c442:	4643      	mov	r3, r8
 800c444:	463a      	mov	r2, r7
 800c446:	4628      	mov	r0, r5
 800c448:	47b0      	blx	r6
 800c44a:	2800      	cmp	r0, #0
 800c44c:	dc08      	bgt.n	800c460 <__sflush_r+0xfc>
 800c44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	f04f 30ff 	mov.w	r0, #4294967295
 800c45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c460:	4407      	add	r7, r0
 800c462:	eba8 0800 	sub.w	r8, r8, r0
 800c466:	e7e7      	b.n	800c438 <__sflush_r+0xd4>
 800c468:	dfbffffe 	.word	0xdfbffffe

0800c46c <_fflush_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	690b      	ldr	r3, [r1, #16]
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	b913      	cbnz	r3, 800c47c <_fflush_r+0x10>
 800c476:	2500      	movs	r5, #0
 800c478:	4628      	mov	r0, r5
 800c47a:	bd38      	pop	{r3, r4, r5, pc}
 800c47c:	b118      	cbz	r0, 800c486 <_fflush_r+0x1a>
 800c47e:	6a03      	ldr	r3, [r0, #32]
 800c480:	b90b      	cbnz	r3, 800c486 <_fflush_r+0x1a>
 800c482:	f7fe f9cd 	bl	800a820 <__sinit>
 800c486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0f3      	beq.n	800c476 <_fflush_r+0xa>
 800c48e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c490:	07d0      	lsls	r0, r2, #31
 800c492:	d404      	bmi.n	800c49e <_fflush_r+0x32>
 800c494:	0599      	lsls	r1, r3, #22
 800c496:	d402      	bmi.n	800c49e <_fflush_r+0x32>
 800c498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c49a:	f7fe fbbc 	bl	800ac16 <__retarget_lock_acquire_recursive>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	f7ff ff5f 	bl	800c364 <__sflush_r>
 800c4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4a8:	07da      	lsls	r2, r3, #31
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	d4e4      	bmi.n	800c478 <_fflush_r+0xc>
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	059b      	lsls	r3, r3, #22
 800c4b2:	d4e1      	bmi.n	800c478 <_fflush_r+0xc>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4b6:	f7fe fbaf 	bl	800ac18 <__retarget_lock_release_recursive>
 800c4ba:	e7dd      	b.n	800c478 <_fflush_r+0xc>

0800c4bc <__swhatbuf_r>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	460c      	mov	r4, r1
 800c4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	b096      	sub	sp, #88	@ 0x58
 800c4c8:	4615      	mov	r5, r2
 800c4ca:	461e      	mov	r6, r3
 800c4cc:	da0d      	bge.n	800c4ea <__swhatbuf_r+0x2e>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4d4:	f04f 0100 	mov.w	r1, #0
 800c4d8:	bf14      	ite	ne
 800c4da:	2340      	movne	r3, #64	@ 0x40
 800c4dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	6031      	str	r1, [r6, #0]
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	b016      	add	sp, #88	@ 0x58
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f000 f848 	bl	800c580 <_fstat_r>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dbec      	blt.n	800c4ce <__swhatbuf_r+0x12>
 800c4f4:	9901      	ldr	r1, [sp, #4]
 800c4f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4fe:	4259      	negs	r1, r3
 800c500:	4159      	adcs	r1, r3
 800c502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c506:	e7eb      	b.n	800c4e0 <__swhatbuf_r+0x24>

0800c508 <__smakebuf_r>:
 800c508:	898b      	ldrh	r3, [r1, #12]
 800c50a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c50c:	079d      	lsls	r5, r3, #30
 800c50e:	4606      	mov	r6, r0
 800c510:	460c      	mov	r4, r1
 800c512:	d507      	bpl.n	800c524 <__smakebuf_r+0x1c>
 800c514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	2301      	movs	r3, #1
 800c51e:	6163      	str	r3, [r4, #20]
 800c520:	b003      	add	sp, #12
 800c522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c524:	ab01      	add	r3, sp, #4
 800c526:	466a      	mov	r2, sp
 800c528:	f7ff ffc8 	bl	800c4bc <__swhatbuf_r>
 800c52c:	9f00      	ldr	r7, [sp, #0]
 800c52e:	4605      	mov	r5, r0
 800c530:	4639      	mov	r1, r7
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff f9c6 	bl	800b8c4 <_malloc_r>
 800c538:	b948      	cbnz	r0, 800c54e <__smakebuf_r+0x46>
 800c53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53e:	059a      	lsls	r2, r3, #22
 800c540:	d4ee      	bmi.n	800c520 <__smakebuf_r+0x18>
 800c542:	f023 0303 	bic.w	r3, r3, #3
 800c546:	f043 0302 	orr.w	r3, r3, #2
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	e7e2      	b.n	800c514 <__smakebuf_r+0xc>
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	6020      	str	r0, [r4, #0]
 800c552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c55e:	b15b      	cbz	r3, 800c578 <__smakebuf_r+0x70>
 800c560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c564:	4630      	mov	r0, r6
 800c566:	f000 f81d 	bl	800c5a4 <_isatty_r>
 800c56a:	b128      	cbz	r0, 800c578 <__smakebuf_r+0x70>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	f043 0301 	orr.w	r3, r3, #1
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	431d      	orrs	r5, r3
 800c57c:	81a5      	strh	r5, [r4, #12]
 800c57e:	e7cf      	b.n	800c520 <__smakebuf_r+0x18>

0800c580 <_fstat_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4d07      	ldr	r5, [pc, #28]	@ (800c5a0 <_fstat_r+0x20>)
 800c584:	2300      	movs	r3, #0
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	4611      	mov	r1, r2
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	f7f4 ff5a 	bl	8001446 <_fstat>
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	d102      	bne.n	800c59c <_fstat_r+0x1c>
 800c596:	682b      	ldr	r3, [r5, #0]
 800c598:	b103      	cbz	r3, 800c59c <_fstat_r+0x1c>
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	bd38      	pop	{r3, r4, r5, pc}
 800c59e:	bf00      	nop
 800c5a0:	24000638 	.word	0x24000638

0800c5a4 <_isatty_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4d06      	ldr	r5, [pc, #24]	@ (800c5c0 <_isatty_r+0x1c>)
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	602b      	str	r3, [r5, #0]
 800c5b0:	f7f4 ff59 	bl	8001466 <_isatty>
 800c5b4:	1c43      	adds	r3, r0, #1
 800c5b6:	d102      	bne.n	800c5be <_isatty_r+0x1a>
 800c5b8:	682b      	ldr	r3, [r5, #0]
 800c5ba:	b103      	cbz	r3, 800c5be <_isatty_r+0x1a>
 800c5bc:	6023      	str	r3, [r4, #0]
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	24000638 	.word	0x24000638

0800c5c4 <_sbrk_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d06      	ldr	r5, [pc, #24]	@ (800c5e0 <_sbrk_r+0x1c>)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	602b      	str	r3, [r5, #0]
 800c5d0:	f7f4 ff62 	bl	8001498 <_sbrk>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_sbrk_r+0x1a>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_sbrk_r+0x1a>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	24000638 	.word	0x24000638

0800c5e4 <memcpy>:
 800c5e4:	440a      	add	r2, r1
 800c5e6:	4291      	cmp	r1, r2
 800c5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5ec:	d100      	bne.n	800c5f0 <memcpy+0xc>
 800c5ee:	4770      	bx	lr
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5fa:	4291      	cmp	r1, r2
 800c5fc:	d1f9      	bne.n	800c5f2 <memcpy+0xe>
 800c5fe:	bd10      	pop	{r4, pc}

0800c600 <__assert_func>:
 800c600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c602:	4614      	mov	r4, r2
 800c604:	461a      	mov	r2, r3
 800c606:	4b09      	ldr	r3, [pc, #36]	@ (800c62c <__assert_func+0x2c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4605      	mov	r5, r0
 800c60c:	68d8      	ldr	r0, [r3, #12]
 800c60e:	b954      	cbnz	r4, 800c626 <__assert_func+0x26>
 800c610:	4b07      	ldr	r3, [pc, #28]	@ (800c630 <__assert_func+0x30>)
 800c612:	461c      	mov	r4, r3
 800c614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c618:	9100      	str	r1, [sp, #0]
 800c61a:	462b      	mov	r3, r5
 800c61c:	4905      	ldr	r1, [pc, #20]	@ (800c634 <__assert_func+0x34>)
 800c61e:	f000 f841 	bl	800c6a4 <fiprintf>
 800c622:	f000 f851 	bl	800c6c8 <abort>
 800c626:	4b04      	ldr	r3, [pc, #16]	@ (800c638 <__assert_func+0x38>)
 800c628:	e7f4      	b.n	800c614 <__assert_func+0x14>
 800c62a:	bf00      	nop
 800c62c:	2400001c 	.word	0x2400001c
 800c630:	0800cb26 	.word	0x0800cb26
 800c634:	0800caf8 	.word	0x0800caf8
 800c638:	0800caeb 	.word	0x0800caeb

0800c63c <_calloc_r>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	fba1 5402 	umull	r5, r4, r1, r2
 800c642:	b93c      	cbnz	r4, 800c654 <_calloc_r+0x18>
 800c644:	4629      	mov	r1, r5
 800c646:	f7ff f93d 	bl	800b8c4 <_malloc_r>
 800c64a:	4606      	mov	r6, r0
 800c64c:	b928      	cbnz	r0, 800c65a <_calloc_r+0x1e>
 800c64e:	2600      	movs	r6, #0
 800c650:	4630      	mov	r0, r6
 800c652:	bd70      	pop	{r4, r5, r6, pc}
 800c654:	220c      	movs	r2, #12
 800c656:	6002      	str	r2, [r0, #0]
 800c658:	e7f9      	b.n	800c64e <_calloc_r+0x12>
 800c65a:	462a      	mov	r2, r5
 800c65c:	4621      	mov	r1, r4
 800c65e:	f7fe fa5d 	bl	800ab1c <memset>
 800c662:	e7f5      	b.n	800c650 <_calloc_r+0x14>

0800c664 <__ascii_mbtowc>:
 800c664:	b082      	sub	sp, #8
 800c666:	b901      	cbnz	r1, 800c66a <__ascii_mbtowc+0x6>
 800c668:	a901      	add	r1, sp, #4
 800c66a:	b142      	cbz	r2, 800c67e <__ascii_mbtowc+0x1a>
 800c66c:	b14b      	cbz	r3, 800c682 <__ascii_mbtowc+0x1e>
 800c66e:	7813      	ldrb	r3, [r2, #0]
 800c670:	600b      	str	r3, [r1, #0]
 800c672:	7812      	ldrb	r2, [r2, #0]
 800c674:	1e10      	subs	r0, r2, #0
 800c676:	bf18      	it	ne
 800c678:	2001      	movne	r0, #1
 800c67a:	b002      	add	sp, #8
 800c67c:	4770      	bx	lr
 800c67e:	4610      	mov	r0, r2
 800c680:	e7fb      	b.n	800c67a <__ascii_mbtowc+0x16>
 800c682:	f06f 0001 	mvn.w	r0, #1
 800c686:	e7f8      	b.n	800c67a <__ascii_mbtowc+0x16>

0800c688 <__ascii_wctomb>:
 800c688:	4603      	mov	r3, r0
 800c68a:	4608      	mov	r0, r1
 800c68c:	b141      	cbz	r1, 800c6a0 <__ascii_wctomb+0x18>
 800c68e:	2aff      	cmp	r2, #255	@ 0xff
 800c690:	d904      	bls.n	800c69c <__ascii_wctomb+0x14>
 800c692:	228a      	movs	r2, #138	@ 0x8a
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	f04f 30ff 	mov.w	r0, #4294967295
 800c69a:	4770      	bx	lr
 800c69c:	700a      	strb	r2, [r1, #0]
 800c69e:	2001      	movs	r0, #1
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <fiprintf>:
 800c6a4:	b40e      	push	{r1, r2, r3}
 800c6a6:	b503      	push	{r0, r1, lr}
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	ab03      	add	r3, sp, #12
 800c6ac:	4805      	ldr	r0, [pc, #20]	@ (800c6c4 <fiprintf+0x20>)
 800c6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b2:	6800      	ldr	r0, [r0, #0]
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	f7ff fd3d 	bl	800c134 <_vfiprintf_r>
 800c6ba:	b002      	add	sp, #8
 800c6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c0:	b003      	add	sp, #12
 800c6c2:	4770      	bx	lr
 800c6c4:	2400001c 	.word	0x2400001c

0800c6c8 <abort>:
 800c6c8:	b508      	push	{r3, lr}
 800c6ca:	2006      	movs	r0, #6
 800c6cc:	f000 f82c 	bl	800c728 <raise>
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	f7f4 fe84 	bl	80013de <_exit>

0800c6d6 <_raise_r>:
 800c6d6:	291f      	cmp	r1, #31
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4605      	mov	r5, r0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	d904      	bls.n	800c6ea <_raise_r+0x14>
 800c6e0:	2316      	movs	r3, #22
 800c6e2:	6003      	str	r3, [r0, #0]
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6ec:	b112      	cbz	r2, 800c6f4 <_raise_r+0x1e>
 800c6ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6f2:	b94b      	cbnz	r3, 800c708 <_raise_r+0x32>
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	f000 f831 	bl	800c75c <_getpid_r>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	4628      	mov	r0, r5
 800c700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c704:	f000 b818 	b.w	800c738 <_kill_r>
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d00a      	beq.n	800c722 <_raise_r+0x4c>
 800c70c:	1c59      	adds	r1, r3, #1
 800c70e:	d103      	bne.n	800c718 <_raise_r+0x42>
 800c710:	2316      	movs	r3, #22
 800c712:	6003      	str	r3, [r0, #0]
 800c714:	2001      	movs	r0, #1
 800c716:	e7e7      	b.n	800c6e8 <_raise_r+0x12>
 800c718:	2100      	movs	r1, #0
 800c71a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c71e:	4620      	mov	r0, r4
 800c720:	4798      	blx	r3
 800c722:	2000      	movs	r0, #0
 800c724:	e7e0      	b.n	800c6e8 <_raise_r+0x12>
	...

0800c728 <raise>:
 800c728:	4b02      	ldr	r3, [pc, #8]	@ (800c734 <raise+0xc>)
 800c72a:	4601      	mov	r1, r0
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	f7ff bfd2 	b.w	800c6d6 <_raise_r>
 800c732:	bf00      	nop
 800c734:	2400001c 	.word	0x2400001c

0800c738 <_kill_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d07      	ldr	r5, [pc, #28]	@ (800c758 <_kill_r+0x20>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	4611      	mov	r1, r2
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f7f4 fe3a 	bl	80013be <_kill>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d102      	bne.n	800c754 <_kill_r+0x1c>
 800c74e:	682b      	ldr	r3, [r5, #0]
 800c750:	b103      	cbz	r3, 800c754 <_kill_r+0x1c>
 800c752:	6023      	str	r3, [r4, #0]
 800c754:	bd38      	pop	{r3, r4, r5, pc}
 800c756:	bf00      	nop
 800c758:	24000638 	.word	0x24000638

0800c75c <_getpid_r>:
 800c75c:	f7f4 be27 	b.w	80013ae <_getpid>

0800c760 <_init>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	bf00      	nop
 800c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c766:	bc08      	pop	{r3}
 800c768:	469e      	mov	lr, r3
 800c76a:	4770      	bx	lr

0800c76c <_fini>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	bf00      	nop
 800c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c772:	bc08      	pop	{r3}
 800c774:	469e      	mov	lr, r3
 800c776:	4770      	bx	lr
